@&#MAIN-TITLE@&#Automated high-content morphological analysis of muscle fiber histology

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We developed an image processing pipeline to automatically analyze muscle fibers.


                        
                        
                           
                           The method can quickly quantify muscle fiber images for high-content analysis.


                        
                        
                           
                           Validation showed that the method achieved high objectivity.


                        
                        
                           
                           The method can help researchers make discovery in muscle-related experiments.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Morphology of muscle fibers

Muscular dystrophy

Segmentation

Quantification

Cross sections

@&#ABSTRACT@&#


               Graphical abstract
               
                  
                     
                        
                           
                        
                     
                  
               
            

@&#INTRODUCTION@&#

To address the need for quick and objective analysis of muscle fibers to develop novel therapies, we present, in this paper, an image processing approach for microscopic images to segment and analyze cross-sections of muscle fibers. In the search for treatments for the large populations with many types of muscular disorders like muscular dystrophy (MD), researchers have to manually examine and analyze the morphology of muscle fibers to identify important biomarkers about the fibers, such as the restoration of lost membrane proteins and presence of endomysial fibrosis or whether they are degenerative or regenerative. Indeed, morphological features of muscle fibers are important biomarkers of muscle health and indicators of success of therapeutic treatments. Manual analysis, however, is time-consuming and error-prone, given that it is subject to inter-observer variations; therefore, our quantitative analysis approach is a needed replacement.

Specifically, we developed algorithms to measure muscle fiber morphologies in a high-throughput high-content manner and tested it on images acquired from a preclinical model of Duchenne muscular dystrophy (DMD), which is the most common and severe form of MD [1] that affects 1 in 3500 newborn boys. The method was tested on microscopic images of the tibialis anterior (TA) muscles of mdx (C57BL/10ScSn-Dmdmdx/J) mice, and we show that it achieved high accuracy in identifying muscle fibers, quantifying their parameters, and exporting quantitative results for further statistical analysis. Despite microscopic images of cross-sections of muscle fibers being often challenging to analyze because not only must cross-sections be segmented but individual cross-sections must be identified to measure perimeters, areas, and other features, our image processing approach provided a quick, objective, and quantitative tool to analyze highly complex muscle fiber images. As each image consists of hundreds to thousands of muscle fibers, an image processing method should be highly automatic and robust to handle cross-sections of muscle fibers of different signal intensities, shapes, and sizes. In addition, an automated image processing approach needs to identify areas that did not belong to valid muscle fibers to exclude them from measurement. As a single experiment may create hundreds microscopic images of muscle fibers, it is not suited to manual analysis that cannot keep up with large numbers of images and that involves a human observer who is often forced to manually click points on a computer screen to mark the boundary of a muscle fiber. Given that two observers are unlikely to mark the boundary in the same way, this process is highly subject to inter-observer variation. What’s more, the high complexity of muscle fiber images makes it very difficult, if not impossible, to extract morphological features such as areas, diameters, and elongations. Therefore, there is an urgent need to develop a computerized analysis approach to model and quantify muscle fiber images as part of an overall more efficient and effective process to find new treatments.

To process and analyze complex images like cross-sections of muscle fibers, several steps are generally required, including pre-processing, segmentation, and morphological analysis. Pre-processing aims to correct uneven illumination of the images, remove artifacts, and improve image contrast. Segmentation typically focuses on identifying valid objects or extracting signal components from the background. Over the years, many segmentation methods have been proposed to suit various scenarios of image processing. In general, segmentation methods can be categorized as global thresholding or pixel-wise classification. Representative global threshold techniques include Ostu’s method [2] that maximizes inter-class variance of the segmentation results, and k-means segmentation [3] that clusters pixels into two classes such that each pixel belongs to the nearest cluster. Pixel-wise segmentation techniques include watershed segmentation [4], active contours [5], and graph cut [6], and their variations and improvements. For example, to overcome its well known over-segmentation problem, many techniques have been developed to restrain the watershed process by placing seed points into regions to limit the number of final partitions [7]. Active contour-based methods minimize an energy function that includes both internal energy that constrains the deformation of the contour in terms of its first and second order derivative, and external energy that is minimized when the contour deforms to the boundary of the object, e.g., a high gradient value is encountered. These methods, however, may cause leakage in deformation when there are no obvious gradient changes in the images. An improvement is made by the Chan–Vese model that detects objects whose boundaries are not clearly defined by their gradients by minimizing an energy function set up as a minimal partition problem [8] Graph cut is another type of energy minimization approach to segment an image into the foreground and background by searching for a max flow/min cut partition of the image into two disjoint sets, such that the dissimilarity between the two sets, measured as the weight of edges that have been removed, is minimized [9]. In many cases, segmentation of an image is set up as an optimization problem that searches for a solution to achieve a balance between a data fidelity term and a pre-set term that constrains the segmentation result. For example, an area-constrained segmentation method has been proposed by Niethammer and Zach for soft selections of segmentation solutions that counteracts the effect of shrinking bias encountered in many techniques [10]. Bergeest and Rohr developed a segmentation technique based on active contours by using level sets and convex energy functional, i.e., the functional has only one a minimum to reach a global solution that avoids local minima [11].

After segmentation, post-processing is often employed to quantify the results and extract morphological features that are of biological and medical significance. For instance, in muscle fiber analysis, the number of muscle fibers in a unit area and the perimeters and areas of muscle fibers are often used to evaluate the health status of the muscle as well as to identify the type of muscle fibers, e.g., degenerative or regenerative. In identifying muscle fiber centers, Liu et al. proposed a learning-based method to find the geometric centers of muscle fibers and then used a snake model to obtain the boundaries [12]. Mula et al. developed a multiple step approach to first enhance the boundaries of muscle fibers and then search for seed points inside each fiber to drive a deformable model to delineate each fiber [13].

In this paper, we present an image processing approach that is able to segment cross-sections of muscle fibers in very challenging cases and extract quantitative features for in-depth analysis, the aim of which is to provide computer-aided measurements of morphologies of muscle fibers for researchers to use to develop novel insights on the cellular mechanisms of musculoskeletal diseases. Ultimately, they will be able to more objectively evaluate their experimental approaches and reduce the time needed to analyze large numbers of muscle fibers acquired in experiments.

Animal experiments were carried out under the guidance and approval of the Institutional Animal Care and Use Committee of Harvard Medical School. Male mdx mice at the age of 4–8 weeks were purchased from Jackson Lab. To assess how many of the myoblasts might survive post transplantation, the mice were transplanted with wild type myoblasts from C57BL6 mice to assess how many of the myoblasts might survive post transplantation. In preparation for myoblasts transplantation, the hind legs of the mice were given 18Gy irradiation 3 days in advance. Then 1×105 myoblasts suspended in 10μl HBSS (Hank’s Balanced Salt Solution) were injected into each tibialis anterior (TA) muscles at 3 positions. The mice were then maintained for various periods of time before they were euthanized for tissue harvest. The mice were fed with standard pelleted rodent chow and kept in a 12-h light/12-h dark cycle.

When the TA muscles were harvested, the mice were deeply anesthetized by intraperitoneal injection of Ketamine (100mg/kg) and Xylazine (10mg/kg) and then intracardially perfused with physiological saline and periodate/lysine paraformaldehyde (4%) solution. After postfixation and dehydration, the muscles were frozen in OCT embedding compound and sectioned coronally at 12µm thickness from the mid-portion of the muscles. For immunohistochemistry, slides were washed with PBS (Phosphate Buffered Saline) and blocked with 5% goat serum, and muscle sections were incubated with a rabbit anti-dystrophin antibody (Sigma, 1:500) followed by incubation with a goat-anti-rabbit Cy3-conjugated secondary antibody (Jackson Lab, Bar Harbor, ME, USA). The images used were acquired by an Olympus IX-70 microscope equipped with a CCD (Charge-Coupled Device) camera. A single image typically has a size of 800×600pixel, with a pixel size of 0.7µm. Approximately 20 to 30 images were collected with a slight overlap in four directions to cover the whole cross-section of the TA muscle. The individual images were then merged to form a mosaic picture.

The image processing approach was designed to, step-by-step, detect and segment muscle fibers. At each step, the approach creates intermediate results that are then combined to generate final segmented results. 
                        Fig. 1 shows the flowchart of the approach. First, the image is pre-processed for enhancement, noise reduction, and binarization (row one of Fig. 1). Then the pre-processed images undergo a series of processing to correct contours that were not detected as closed, identify enclosed regions in the contours, and verify if they correspond to valid muscle fibers. Rows two to six of Fig. 1 are the steps that incrementally detect and segment muscle fibers by identifying cross-sections.

Step one of the approach is a mean subtraction operation to reduce noise and adjust for uneven illumination of an input image. For each pixel, this step subtracts the value of each pixel by the mean of its neighboring pixels as
                           
                              (1)
                              
                                 
                                    
                                       A
                                       ′
                                    
                                    
                                       i
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       A
                                    
                                    
                                       i
                                       j
                                    
                                 
                                 −
                                 
                                    
                                       〈
                                       
                                          
                                             
                                                A
                                             
                                             
                                                i
                                                j
                                             
                                          
                                       
                                       〉
                                    
                                    
                                       r
                                    
                                 
                              
                           
                        where
                           
                              (2)
                              
                                 
                                    
                                       〈
                                       
                                          
                                             
                                                A
                                             
                                             
                                                i
                                                j
                                             
                                          
                                       
                                       〉
                                    
                                    
                                       r
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                          
                                             i
                                             =
                                             x
                                             −
                                             r
                                          
                                          
                                             x
                                             +
                                             r
                                          
                                       
                                       
                                          
                                             ∑
                                             
                                                j
                                                =
                                                y
                                                −
                                                r
                                             
                                             
                                                y
                                                +
                                                r
                                             
                                          
                                          
                                             
                                                
                                                   A
                                                
                                                
                                                   i
                                                   j
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             (
                                             
                                                2
                                                r
                                                +
                                                1
                                             
                                             )
                                          
                                          2
                                       
                                    
                                 
                              
                           
                        and i and j are the coordinates of a pixel, 
                           
                              
                                 A
                              
                              
                                 i
                                 j
                              
                           
                         is the pixel in coordinates i and j of the original image A. 
                           
                              
                                 A
                                 ′
                              
                              
                                 i
                                 j
                              
                           
                         is the corresponding pixel of the new image 
                           A
                           ′
                        . In Eq. (1) 
                        
                           
                              
                                 〈
                                 
                                    
                                       
                                          A
                                       
                                       
                                          i
                                          j
                                       
                                    
                                 
                                 〉
                              
                              
                                 r
                              
                           
                         is the mean pixel intensity inside a square window centered at coordinate i and j with a radius r. Here we note that r is one of parameters of our approach that is to be optimized for satisfactory results. The image is subsequently normalized according to
                           
                              (3)
                              
                                 
                                    
                                       
                                          A
                                       
                                       ″
                                    
                                    
                                       i
                                       j
                                    
                                 
                                 =
                                 
                                    {
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         A
                                                         ′
                                                      
                                                      
                                                         i
                                                         j
                                                      
                                                   
                                                   /
                                                   
                                                   max
                                                   (
                                                   
                                                      A
                                                      ′
                                                   
                                                   )
                                                
                                             
                                             
                                                
                                                   if
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         A
                                                         ′
                                                      
                                                      
                                                         i
                                                         j
                                                      
                                                   
                                                   >
                                                   0
                                                
                                             
                                          
                                          
                                             
                                                0
                                             
                                             
                                                
                                                   if
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         A
                                                         ′
                                                      
                                                      
                                                         i
                                                         j
                                                      
                                                   
                                                   ≤
                                                   0
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           max
                           
                              (
                              
                                 A
                                 ′
                              
                              )
                           
                         gives the maximum pixel value of the image 
                           A
                           ′
                        . The next step in our approach is binarization such that
                           
                              (4)
                              
                                 
                                    
                                       B
                                    
                                    
                                       i
                                       j
                                    
                                 
                                 =
                                 
                                    {
                                    
                                       
                                          
                                             
                                                1
                                             
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               if
                                                            
                                                         
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        A
                                                                     
                                                                     ″
                                                                  
                                                                  
                                                                     i
                                                                     j
                                                                  
                                                               
                                                               >
                                                               
                                                                  
                                                                     t
                                                                  
                                                                  
                                                                     b
                                                                     i
                                                                     n
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                0
                                             
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               if
                                                            
                                                         
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        A
                                                                     
                                                                     ″
                                                                  
                                                                  
                                                                     i
                                                                     j
                                                                  
                                                               
                                                               ≤
                                                               
                                                                  
                                                                     t
                                                                  
                                                                  
                                                                     b
                                                                     i
                                                                     n
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where threshold t
                        
                           bin
                         is determined by trial-and-error and can be optimized jointly with parameter r to generate satisfactory results. Step three eliminates small regions (noise) detected in the binarization process of muscle fiber contours. At this step each enclosed region is compared with a threshold t
                        
                           noise
                         such that, if its area is less than t
                        
                           noise
                        , then the region is eliminated. After pre-processing, the algorithms proceed to detect individual muscle fibers (row two of Fig. 1). Step four is to detect pairs of pixels separated by one pixel and connect them to close some contours found in the pre-processing stage but are not completely closed. Next, step five detects small connected components with an area less than a threshold t
                        
                           small
                         that are stored as intermediate results and not used in the subsequent processing steps, and only as components larger than t
                        
                           small
                         are kept for further processing. In row three, step six marks the larger components and step seven validates whether they are true muscle fibers through convex hull analysis. A shape S is considered as convex if, for any pair of points 
                           p
                           ,
                           q
                           ∈
                           S
                        , the straight line segment 
                           
                              
                                 p
                                 q
                              
                              
                                 ¯
                              
                           
                         lies completely within the set S. The convex hull of a set S, H(S), is thus the smallest convex set that contains S 
                        [3,14]. Hence, the convex hull is the minimal boundary that encloses a finite set of points. In this way, our image processing approach calculates the size of the original object, denoted as 
                           
                              
                                 S
                              
                              
                                 O
                              
                           
                        , and the size of its convex hull, denoted as 
                           
                              
                                 S
                              
                              
                                 H
                              
                           
                        . Then we calculate the regularity ratio 
                           λ
                         such that
                           
                              (5)
                              
                                 λ
                                 =
                                 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             O
                                          
                                       
                                    
                                    
                                       
                                          
                                             S
                                          
                                          
                                             H
                                          
                                       
                                    
                                 
                              
                           
                        as a measurement of regularity of shape S. It is designed, based on our observation, using cross-sections of muscle fibers, especially of large muscle fibers; therefore it is reasonable to check 
                           λ
                         against a threshold t
                        
                           convex
                         to determine if a segmented cross-section represents a valid muscle fiber. In row four of Fig. 1, we used the morphological closing operation (step eight) to fill in small holes and gaps and joins narrow breaks. Then we repeated the fiber detection (step nine) and validation (step 10). Steps 11, 12, and 13 in row five of Fig. 1 are the same as steps 4, 9, and 10, respectively.

The last boundary enhancement/fiber detection cycle (row six of Fig. 1) starts with dilation at step 14 and then is followed by the procedure to connect nearby pixels at step 15. Dilation helps to close the contour of large fibers that are not yet detected. Next, preliminary detection is performed without fiber validation at step 16, and an opening operation is applied on these detected fibers at step 17. This morphological operation, consisting of erosion followed by dilation, smoothes the boundaries to remove thin protrusions and break narrow connections. Opening is applied before validation on the detected fibers because we observed that some fibers not detected at this stage were joined by a thin link that could be broken by the opening operation. Also, we observed that some large fibers with shapes deformed by noise had their boundaries smoothed at this step, thereby allowing their detection. Finally step 18 performs validation on the detected muscle fibers using the convex hull analysis. Following this step, all detected fibers in the above steps are joined together to generate a final result.

We identified four parameters in our approach: (1) r, (2) t
                        
                           bin, (3) t
                        
                           noise, and (4) t
                        
                           convex
                        . Because the number of important parameters is small, we determined their optimization by a brute force search of the parameter space. We also determined the optimal selection of the four parameters by comparing the results of automated analysis with those given by manual analysis. In manual analysis, biologists marked muscle fiber boundaries one by one on computer screens and saved the quantification results such as areas and diameters in text files. We discretized the four-dimensional parameter space in a grid structure and applied the image processing approach for each point in this space that corresponded to a different set of parameters. We found the best result for the following configuration of the parameters: r=9, t
                        
                           bin
                        =0.045, t
                        
                           noise
                        =10, and t
                        
                           convex
                        =1.15 and found that the most critical parameters are r and t
                        
                           bin
                        . The performance of the algorithms was robust in the presence of small changes in any parameter. There is also the fifth parameter t
                        
                           small
                         that was to 50 in our case. We found that changes in t
                        
                           small
                         did not affect the obtained results significantly; therefore it was not included among the four critical parameters for optimization.

@&#RESULTS@&#

To validate the performance of the image processing approach, we analyzed muscle fibers harvested from two groups of mdx mice with three mice in each group. All were transplanted with the same number of myoblasts. Our biological goal was to determine whether the myoblasts could survive and regenerate over time. The first group of mice was euthanized one month post cell transplantation (PCT) and the second group three months PCT. We applied the image processing approach so as to analyze and compare the mosaic pictures of each group. The segmentation of fibers started with identification of contours based on the appearance of dystrophin on the fiber membrane. Then the regions enclosed by the contours were tested and validated as corresponding to true fibers. The test showed that the algorithms correctly identified the majority of muscle fibers in various cases. 
                     Fig. 2 displays six cases of muscle fiber detection and segmentation. For each case, the leftmost panel is the original image, the center panel is the intermediate segmentation result obtained before the steps of contour close and muscle fiber validation, and the rightmost panel is the final result. Fig. 2(A) shows the processing result of a muscle fiber that is well separated from its neighbors. The muscle fiber, in this case, is found and segmented by the image processing approach. Fig. 2(B) shows a small region that has a noisy background; however, the approach is able to locate the fiber. Fig. 2(C) demonstrates the performance of the approach in handling a muscle fiber that has uneven signal intensity. Though the intermediate segmentation result does not produce a closed contour (the center panel of Fig. 2(C)), this deficiency is corrected in the final result (the rightmost panel of Fig. 2(C)). A more challenging case is shown in Fig. 2(D) in which the muscle fiber has a broken contour along its membrane, but our approach is still able to reconstruct the whole boundary in the final result. Fig. 2(E) shows a case of potential false positive that occurred in an inter-fiber region, surrounded by membranes of its neighboring muscle fibers and tentatively marked as a muscle fiber (the center panel of Fig. 2(E)). However, through the proposed convex hull analysis, the region is determined to not belong to a valid muscle fiber (the rightmost panel of Fig. 2(E)), demonstrating the capability of the image processing approach in identifying real muscle fibers. Fig. 2(F) shows how our approach can separate closely adjacent muscle fibers. The three muscle fibers were first detected as a connected single object (the center panel of Fig. 2(F)) and eventually separated to three objects via the proposed morphological operations. Since correct configuration of parameters is generally very important for image processing and analysis algorithms, we performed an intensive brute-force search to identify the values of parameters that provide the best results. We observed that the results given by the proposed approach are robust to small changes of the four parameters. We note that cases of false positive and false negative may still occur in spite of the optimal configuration of the parameters. However, we can see when comparing the automated analysis results with those given by manual analysis that our approach is sufficiently robust in performance.

In 
                     Fig. 3 we show the results of processing a muscle fiber image and plot histograms of fiber areas as given by the automated approach and manual analysis. The original image is shown in Fig. 3(A), while the segmentation given by manual analysis is shown in Fig. 3(B). We processed the image of Fig. 3(A) by our automated approach, and we show the result in Fig. 3(C). We then overlay the automated results (in green) with that of manual analysis in black in Fig. 3(D). Muscle fibers that were detected by both methods are shown in blue color. From Fig. 3(D) we can observe that most fibers are correctly detected by the automated approach as there are only a few objects that are missed by the automated approach (in black) or identified by the automated approach but not by manual analysis (in green). To further test the proposed approach on extracting morphological features from the muscle fibers, we compared the areas of muscle fibers given by the automated approach and manual analysis. We plot histograms of muscle fiber areas in Fig. 3(E) in such a way that the histogram of areas given by the automated approach is plotted in green while the histogram of manual analysis results is in black. From the histogram we note that the two approaches obtained similar results in measuring cross-sectional areas of muscle fibers.

We next compared the automated approach with manual analysis on processing whole mosaic images that consisted of 20 to 30 individual images. 
                     Fig. 4 plots the histogram of cross-sectional areas of muscle fibers given by the two approaches. The inset shows the overlay of detected muscle fibers given by the automated approach and manual analysis in which blue color represents a match between two methods, black color indicates a muscle fiber found by manual analysis but not by the automated approach, and the green color is the muscle fibers detected by the automated approach but not by manual analysis. The histogram shows that the two methods obtained similar results, though there is some difference for muscle fibers of small areas due to the reason that, in manually measuring the cross-sectional areas of muscle fiber, a human observer traces the boundaries of muscle fibers by clicking points on a computer screen and connecting the points to encircle a muscle fiber. There were variations on the exact locations to mark the boundary because, on the computer screen, the boundary has some width. This effect of variation in human measurement on determining an object’s area is more profound when the object is small, which is why there are some discrepancies in measuring the areas of small muscle fibers that actually substantiate the advantage of using computerized algorithms to measure morphological features because computerized algorithms offer more consistent performance. From the inset of Fig. 4 we can observe that the automated approach obtained similar results as those from manual analysis.

From the segmented images our approach calculated morphological fiber measurements, such as area, diameter and elongation. Area is the number of pixels inside a fiber, diameter is the largest distance between any two border pixels, and elongation is the ratio between the largest and smallest eigenvalues of the covariance matrix of the xy pixel coordinates of each fiber [3]. From these primary measurements, we can derive other features such as mean and standard deviation (STD). We summarized the quantification results in 
                     Table 1. As expected from our biological perspective, the samples from the second group of mice that were euthanized three months PCT had more large fibers than the first group of mice. However, there is little change in elongation of the muscle fibers between the two groups, indicating that the muscle fibers tend to maintain their shape over time in this experiment.

The time taken to process an image of size 1800×1800pixel with about 2000 fibers was about 6min, which means the computational speed of the approach is reasonable for high-throughput screening. In comparison, it would take a human observer more than 1h to analyze the same image.

In muscular disease studies, histopathology plays a key role in determining the health of muscle fibers. Morphologies of muscle fibers are an important biomarker of muscular states such as its overall health and force generation [15,16]. However, due to the complex shapes of muscle fibers and the large number of images generated in experiments, it remains challenging to quickly and objectively evaluate morphologies of muscle fibers. Manual analysis, a slow and error-prone process that cannot be scaled up to handle a large number of images, remains the most widely used approach to quantify muscle fiber images. In this work, we developed an image processing approach to detect and segment cross-sections of muscle fibers and extract morphological features from segmented results. Our approach consists of image pre-processing, convex hull analysis, and a series of morphological operations. Pre-processing corrects uneven background in the images. Convex hull analysis aims to validate whether a tentatively detected object is a true muscle fiber so as to remove false positives, particularly inter-fiber regions that formed among multiple muscle fibers and that are surrounded by membranes of neighboring muscle fibers. Such regions generally do not have a convex shape and are discarded by our algorithms. Here we note that the algorithms are designed not to discard an object if it is not of a convex shape in the strict sense, i.e., the straight line formed by any pair of points on its boundary must completely lay inside the object. Instead, we test the ratio of object’s area over the area of its convex hull to determine whether to label the object as a valid muscle fiber. Results such as the ones shown in Fig. 2(E) and (F) indicated that the convex hull analysis can achieve a balanced performance in keeping valid objects while discarding inter-fiber regions. We tested the image- processing approach on ex vivo images obtained from a Duchenne muscular dystrophy experiment in which the muscle fibers were labeled by dystrophin. Tests showed that the proposed approach is sufficiently robust and able to handle difficult cases of muscle fiber images. In this work we also measured a few morphological features such as areas and diameters of muscle fibers. However, it is straightforward to expand the morphological analysis to quantify other features based on the segmented images. Compared with manual analysis, image- processing algorithms generated more features in less time, enabling high-throughput screening. The proposed approach overcomes several challenges in processing muscle fiber images, including uneven illumination, close adjacency between muscle fibers, and detailed analysis to identify valid muscle fibers to reduce false positives. It involves a small number of parameters to be configured for optimal performance. Our experiments showed that the approach is sufficiently robust with respect to the selection of parameters. When compared with manual analysis of ex vivo muscle fiber images, the automated approach obtained similar results. Here we note that as a computerized technique, the automated approach may not always obtain the exactly same results as manual analysis. Manual analysis is often subject to inter-observer variations, e.g., in drawing boundaries of muscle fibers. Therefore, while manual analysis provides an expert’s opinion on analyzing the images, the results are not always consistent. In this perspective, computerized analysis has the intrinsic advantage of being consistent. In the case of quantifying cross-sectional areas of muscle fibers, computerized analysis may start from the inner side of muscle fiber membrane and thus obtain an area smaller than a human observer who draws the boundary along the outer side of the membrane. However, this difference does not affect statistical analysis of the computerized processing results because areas of all the muscle fibers will be measured in the same manner. Hence, from a statistical point of view, computerized processing offers a more robust overall performance.

The images we used to test the computational approach were obtained as individual images and merged to form a large mosaic image. We note that, by design, our approach can be used to process individual images and then combine the quantification results to obtain the final integrated result. From this perspective, the approach is amenable to run on multiple computers or on graphic processing units (GPUs) to achieve a speed-up in computations. We implemented the algorithms in Matlab. The programs can be migrated to C++ or VTK/ITK for faster computations.

While computer-aided analysis has many advantages, its accuracy and robustness depend to a large extent on image quality. Different intensities of staining would create a varying signal-to-noise ratio and SBR, requiring a more judicious selection of parameters in image processing. Another artifact caused by uneven staining is that some muscle fibers may exhibit a broken boundary, causing some fibers to remain undetected if parameters are not set appropriately. Also, uneven illumination during image collection often generates an inhomogeneous background that needs to be corrected by a pre-processing step in image processing. In combination with other experimental techniques such as ex vivo or in vivo functional tests and immunohistochemistry analysis as well as in vivo bioluminescence [17] and fluorescence [18] imaging, computer-aided analysis should facilitate research of muscular dystrophies and other types of muscular diseases, including cardiomyopathy, muscular hypertrophy, ALS, and myasthenia gravis. Dystrophin was used in our experiments to label muscle fibers that were from transplanted normal cells. Our algorithms are equally applicable to process muscle fibers stained by other means as the algorithms are based on analyzing the signal intensities and shapes as observed by a microscope. In this sense, our algorithms are more broadly applicable than the experiments done in our lab.

As microscopy techniques advance, image processing will play an increasingly important role in high-throughput screening such that is becoming even more widely used in muscle disorder research. Besides the development of algorithms to fully create a functional high-throughput screening setup, a robust file management and friendly user-interface are necessary for biologists to take advantage of high-throughput screening. Often, an associated database is needed to store a large number of image files.

Finally, we note that histology is one of the important tools in laboratories to determine and compare the efficacy of treatment for physicians in clinics. However, to obtain a full evaluation of each potential therapy, functional parameters such as whole body strength and resistance to stretch [19,20] and isometric tetanic power output [21] need to be considered as well.

None

@&#ACKNOWLEDGMENTS@&#

The authors thank Wen Liu at the Department of Anesthesia of Brigham and Women’s Hospital for the help in acquiring the images and culturing cells used in this experiment. The work of M. Miazaki was supported by FAPESP grant no. 07/50988-1. The work of C. H. Comin was supported by the FAPESP grant 2011/22639-8. The work of Y. Wang was supported by the National Institutes of Health 
                  K02AR051181. The work of L. da F. Costa was supported by the FAPESP grant 11/50761-2 and the CNPQ grant 573583/2008-0. The work of Z. Yang was supported by the National Natural Science Foundation of China award 31171148. The work of X. Xu was supported by the National Science Foundation award 0958345 and NIH award R01LM011415. The sponsors have no role in designing and interpreting the experiments and in preparation of the manuscript.

@&#REFERENCES@&#

