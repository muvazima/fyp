@&#MAIN-TITLE@&#The quantitative assessment of the pre- and postoperative craniosynostosis using the methods of image analysis

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We propose a method for brain segmentation from CT scans in the craniosynostosis.


                        
                        
                           
                           We propose algorithms for determination of indices used for craniosynostosis assessment.


                        
                        
                           
                           We propose new planar and volumetric indices dedicated to assessment of the disease.


                        
                        
                           
                           The proposed indices can be used to distinguishing between types of the craniosynostosis.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Brain segmentation

Image analysis

Computer aided diagnosis

@&#ABSTRACT@&#


               
               
                  This paper considers the problem of the CT based quantitative assessment of the craniosynostosis before and after the surgery. First, fast and efficient brain segmentation approach is proposed. The algorithm is robust to discontinuity of skull. As a result it can be applied both in pre- and post-operative cases. Additionally, image processing and analysis algorithms are proposed for describing the disease based on CT scans. The proposed algorithms automate determination of the standard linear indices used for assessment of the craniosynostosis (i.e. cephalic index CI and head circumference HC) and allow for planar and volumetric analysis which so far have not been reported. Results of applying the introduced methods to sample craniosynostotic cases before and after the surgery are presented and discussed. The results show that the proposed brain segmentation algorithm is characterized by high accuracy when applied both in the pre- and postoperative craniosynostosis, while the introduced planar and volumetric indices for the disease description may be helpful to distinguish between the types of the disease.
               
            

@&#INTRODUCTION@&#

Craniosynostosis is a common condition which affects infants. The disease is caused by the premature fusion of one or more cranial sutures which changes the growth pattern of the skull [1,2]. Skull shape deformations and the resulting increased intracranial brain pressure may in turn cause a noticeable disorder in the neuropsychological development of a child.

The fusion of sutures in the craniosynostosis is usually confirmed by the fast, low-dose computed tomography (CT) imaging. A CT scan is also used to plan the corrective surgery (which is the only way of the disease treatment). However, although the rapid development of CT imaging devices is constantly observed, the preoperative assessment of craniosynostosis is still mainly qualitative and bases on the visual analysis of the consecutive slices. The supporting quantitative analysis is based on manual measurements of the characteristic dimensions of the skull. These are performed on the most representative CT slice. Hence, the existing methods are subjective as may depend on personal skills and experience. These two factors may affect both—the selection of the slice and the selection of characteristic dimensions. As a result, repeatability of the measurements may be limited. Another limitation of the manual measurements is that it considers only a small piece of information contained in the representative slice but ignores the significant information contained within a whole scan. Using the existing tools and methods dedicated to assessment of the craniosynostosis, the physicians are not able to take advantage of volumetric information contained within a scan. Visual and manual methods are not sufficient to analyze or measure planar and volumetric indices that could provide additional and useful information about the disease.

It should be also noticed that the existing methods for assessment of craniosynostosis are dedicated mainly to the preoperative cases. Since they are based on the analysis of skull dimensions, they cannot be used in the postoperative cases, where significant parts of skull are missing due to the corrective surgery.

The computer-aided diagnosis of brain diseases benefits over traditional methods by the ability to perform automatic and reliable measurements. Therefore, this paper proposes a set of image processing and analysis algorithms dedicated to the assessment of the pre- and postoperative craniosynostosis based on CT scans by means of linear, planar and volumetric measures.

The following part of this paper is organized as follows. First, basic information about the craniosynostosis types, diagnosis and treatment methods is given in Section 2. This is followed in Section 3 by the description of various problems, which need to be solved during segmentation of brain in the pre- and postoperative craniosynostosis. The related works in the field of brain segmentation and image based assessment of the craniosynostosis are reviewed in Section 4. Section 5 describes the introduced algorithms and methods dedicated to linear, planar and volumetric description of the disease. Results provided by the proposed approaches are presented and discussed in Section 6. Finally, Section 7 concludes the paper.

Craniosynostosis manifests itself as a serious malformation of a skull. It is caused by a premature fusion of one or more cranial sutures. If two or more sutures fuse, the growth of a skull in fusion direction is stopped, but the compensatory growth in other directions is observed. Most commonly, the following types of craniosynostosis can be observed [1]:
                        
                           •
                           scaphocephaly (long head) when the head is disproportionately long and narrow;

trigonocephaly (triangular head) when the head has triangular shaped forehead;

plagiocephaly (flat head) when there is a flat spot on the back or one side of the head.

The examples of skull shapes in the regarded types of craniosynostosis and the corresponding sample CT slices are shown in Fig. 1
                     .

The only way of craniosynostosis treatment is the cranial vault remodeling, i.e. the corrective surgery which restores the normal spatial relationship between the skull and the contained neural and vascular structures and re-orientates the deviated growth vectors of the skull base and vault [3]. The corrective surgery always removes the deformed fragments of skull. A sample skull before and after surgery is shown in Fig. 2
                     .

Although the craniosynostosis is quite a common disease (it appears about 1 in 2500 individuals [4,5]) there are only two parameters used for the preoperative assessment of the disease. These are cephalic index (CI) and head circumference (HC) [6]. Cephalic index is a ratio of the maximum length and the maximum width of a head (see Fig. 3a). Head circumference is a measurement taken around the largest part of the head, above the eyebrows, above the ears and the most back part of head (see Fig. 3b).

However, usage of these indices is limited. Neither HC nor CI can be used to unambiguously distinguish between different types of craniosynostosis. It is possible for example to distinguish scaphocephaly from other types based on the cephalic index, but this index for trigonocephaly and plagiocephaly exhibits similar values.

Additionally, because the above mentioned indices are based on the skull, they cannot be directly used in the postoperative cases, where skull is discontinuous and its significant parts are missing. The measurement of head circumference requires physical contact with a patient, what after the surgery can be very difficult. The determination of CI is most commonly performed manually by the specialist and as a result may be inaccurate, unrepeatable and subjective. Additionally, linear measurements consider only information contained in the most representative slices what limits the accuracy of the assessment, as volumetric information contained within CT scan is ignored.

Therefore, there is a need to develop image processing and analysis algorithms which will automate assessment of the craniosynostosis. These methods could be used to unambiguously distinguish between different types of the skull malformation in the preoperative craniosystosis and should allow to monitor the overall progress of the treatment in the postoperative cases. These also should consider not only linear measurements, but planar and volumetric information contained within a CT scans as well.

The research described in this paper is a step towards introducing such algorithms into everyday clinical routine. To make them available both in the pre- and postoperative cases it is proposed to perform analysis based on brain, which shape and size closely fits skull shape. This is in fact in accordance with the clinical practice, as in the case of missing skull, physicians perform quantitative assessment of the disease based on the borders of brain.

However, it should be also remembered that during extraction (segmentation) of brain from CT images many problems are encountered. These are outlined in the next section.

The crucial step for both: brain volume assessment and brain shape analysis is segmentation of the brain region from an input 3D dataset. In the case of CT head scans of infants, segmentation of the brain is a challenging task. The connected regions of brain, eyes and nasal sinus are represented by similar intensities and most image segmentation approaches join them into one region, which cannot be simply and unambiguously divided into the corresponding sub-regions. An additional problem is caused by the spinal cord tissues. These are also represented by intensities similar to those assigned to brain what causes significant leakages during brain segmentation.

This problem is depicted in Figs. 4 and 5
                     
                     . In particular, Fig. 4 shows sample CT brain slices at the level of eyes and nose (Fig. 4a) and spinal cord (Fig. 4b). For each case the original slice and the result of image segmentation is given. The corresponding image segmentation result is visualized in 3D in Fig. 5, where the brain region (shown in blue) is compared to a skull (shown in red).

In the case of the postoperative craniosynostosis the problem of brain segmentation from CT scans is even more challenging due to missing pieces of the skull, which were removed during the corrective surgery. The discontinuities in bone make most existing image segmentation algorithms leak outside the skull into the skin region. This problem is depicted in 2D and 3D in Fig. 6a and b, respectively.

The over-segmentation caused by the abovementioned factors falsely increases brain size and thus its volume. It also deteriorates the real brain shape. All these factors influence further diagnosis of the disease. Therefore, in the considered problem, the brain segmentation algorithm should be robust to a skull discontinuity.

Additional issue which should be addressed during brain segmentation is proposing a standard for cutting off a brain from the spinal cord. There is no common level at the spinal cord in which CT brain scans begin. Therefore, performing brain segmentation without regard of this fact may result in including various amounts of the spinal cord into the brain region (see Fig. 7
                     ). These in turn will increase brain volume and shape in unrepeatable way. Therefore, providing the standardized way of the cut-off level determination is required to ensure comparable and repeatable assessment of the brain volumes based on binary images after segmentation. To the best of our knowledge, this issue has not been discussed so far.

Having in mind the abovementioned, this paper proposes a fast and efficient brain segmentation algorithm. The method is dedicated to CT brain scans in the pre- and postoperative craniosynostosis. The brain region after segmentation may next be used for accurate quantitative assessment of the disease independently to skull discontinuity.

@&#RELATED WORKS@&#

Computer-aided diagnosis of craniosynostosis is a challenging problem which has been reported since almost two decades. However, to the best of our knowledge, since that time only a few research projects proposing application of image processing and analysis algorithms for quantitative assessment of the disease have been reported.

The ongoing researches in the field of image processing and analysis consider mainly problems related to the pre- and postoperative control of the patients. These include the automatic preoperative classification of the disease type based on skull properties [7–9], monitoring of changes in craniosynostosis head shapes before the surgery [7,10–12] and 3D modeling of the skull after the surgical treatment [13,14]. Current researches increasingly pay attention to the estimation of the intracranial volume (ICV). However, most of the existing approaches regard only the preoperative cases [15–20]. There is also work on assessment of brain volume in the postoperative craniosynostosis [21]. However, the authors consider only MRI images and do not reveal any details about the image segmentation algorithm used in the research. Additionally, in the case of newborns, low-dose CT imaging is used rather than MRI. Therefore, the later method is of limited applicability.

Both: the quantification of the changes in craniosynostosic head shapes and the calculation of the intracranial volume require accurate brain segmentation method. Additional challenges for the precise calculation of the ICV in craniosynostosic brains include holes in the skull in newborns (the fontanelles), but also holes in the cranial base (e.g. the foramen magnum, fissures and synchondroses) [20].

The challenging problem of an accurate segmentation of the intracranial space (ICS) from CT and MRI images has been widely discussed over the years. In the case of MRI images, this task is much easier due to the clearly visible borders between important tissues inside the brain. CT images are noisy and characterized by the lower contrast and quality. This problem is especially important in the case of low-dose CT brain scans which are the standard in the pediatric neurosurgery. Low contrast and low image quality hinder the accurate ICS segmentation, hence there is still no complete research in this area. Proposed methods are mainly manual or semi-manual approaches, mostly based on the traditional thresholding [15,16] and seeded region growing methods [17–19]. More recent approaches involve modern 3D graph-cut segmentation on the volumetric graph [20] and image registration methods [22]. These however suffer from the long time of computation and a huge memory workload. Additionally, the vast majority of the existing approaches require a continuous skull which surrounds the brain region. This practically excludes their application in the postoperative craniosynostosis where significant parts of the skull are missing.

There are only a few reports regarding the problem of brain segmentation with the presence of discontinuous skull [23–25]. However, to the best of our knowledge, none of the researches have previously considered the problem of segmentation leakage into regions of skin, eyes and spinal cord that often occurs in the case of CT images. This problem seems to be deliberately neglected or unnoticed, which casts doubt on the accuracy of the performed quantitative analysis based on the obtained segmentation results.

Having in mind the poorness and limitations of the current approaches to assessment of the pre- and postoperative craniosynostosis, automatic methods for quantitative description of the disease are introduced. These include linear, planar and volumetric indices and can be applied both before and after the surgery. Since the problem of the postoperative quantitative assessment of the craniosynostosis is hardly ever regarded, the research presented in this paper touches upon issues rarely encountered in the literature. Additionally, in order to ensure accurate and efficient extraction of a brain, the new hybrid method to brain image segmentation is also proposed. This method draws on the existing techniques of mathematical morphology, linear interpolation, computational geometry and curve fitting to achieve a fully automated method for the ICV segmentation from CT images. All introduced methods are described in details in the next section.

The preprocessing step includes two main stages, namely: head alignment along the YZ plane and data interpolation.

In order to align dataset along the YZ plane of the coordinate system determined by a pixel grid, a skull is firstly extracted from the input dataset. It is simply the largest 3D connected component with pixel intensities higher than 700HU as described by the following equation:
                           
                              (1)
                              
                                 
                                    I
                                    
                                       
                                          x
                                          ,
                                          y
                                          ,
                                          z
                                       
                                    
                                    =
                                    
                                       
                                          1
                                          :
                                          L
                                          
                                             
                                                x
                                                ,
                                                y
                                                ,
                                                z
                                             
                                          
                                          >
                                          700
                                       
                                    
                                 
                              
                           
                        
                     

Next, the skull is projected onto the XY plane in accordance with Eq. (2). Projection p is a two dimensional image, in which pixel intensity is a sum of all pixel intensities at the coordinates (x, y).
                           
                              (2)
                              
                                 
                                    p
                                    
                                       
                                          x
                                          ,
                                          y
                                       
                                    
                                    =
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       Z
                                    
                                    I
                                    
                                       
                                          x
                                          ,
                                          y
                                          ,
                                          i
                                       
                                    
                                 
                              
                           
                        
                     

A sample skull and the corresponding projection image are shown in Fig. 8a and b, respectively. It can be easily seen, that the projection image captures information of skull shape in every slice. Therefore it is next used to find orientation of the head in accordance to Eq. (3). In particular head orientation angle θ is the angle for which the cross correlation between the rotated projection image p
                        
                           γ
                         and the reflected rotated projection image 
                           
                              
                                 p
                                 γ
                                 ′
                              
                           
                         is maximal, where γ∈[0, 180] is a rotation angle.
                           
                              (3)
                              
                                 
                                    θ
                                    =
                                    
                                       
                                          argmax
                                       
                                       
                                          0
                                          ≤
                                          γ
                                          ≤
                                          180
                                       
                                    
                                       
                                    x
                                    corr
                                    
                                       
                                          
                                             p
                                             γ
                                          
                                          ,
                                          
                                             p
                                             γ
                                             ′
                                          
                                       
                                    
                                 
                              
                           
                        
                     

After a head orientation angle is found, the input CT volume is aligned along the YZ plane by rotating each slice by the angle of θ
                        −90 degrees. After rotation the central sagittal plane of a head (skull) is parallel to the YZ plane. A projection image from Fig. 8b aligned along the YZ plane is shown in Fig. 8c.

The next step is a regularization of a dataset with respect to pixel dimensions, which is necessary to ensure further uniform processing in all directions. The input CT dataset consists of Z slices, X
                        ×
                        Y pixels each. The dimensions of a pixel are d
                        
                           x
                         and d
                        
                           y
                         (where: d
                        
                           x
                        
                        =
                        d
                        
                           y
                        ). The slices are stacked together into a volumetric image, with a distance between slices equal d
                        
                           z
                        . Because, most commonly, d
                        
                           z
                         is significantly higher than pixel dimensions, the input dataset cannot be put directly into a regular pixel grid (see Fig. 9b). Therefore, before the main processing, using image information from the existing slices, a volumetric image of a slice thickness equal d
                        
                           x
                         is built via linear interpolation (see Fig. 9a).

The spatial resolution of each slice in the axial plane (XY) is guaranteed during the regularization. The regularization regards the sagittal (YZ) and the coronal (XZ) plane. Since the slice thickness is usually higher than the pixel spacing, the resolution in the sagittal and the coronal plane is improved due the regularization.

The proposed brain segmentation algorithm is a hybrid approach which combines gradient filtering, computational geometry, mathematical morphology, line drawing and curve fitting. The segmentation process is performed slice-by-slice, in two view planes. In particular, the first step is done in the axial view (XY), while the remaining steps are performed in the coronal view (XZ). In the latter view, gaps and discontinuities of a skull are the smallest what facilitates the segmentation. The brain extraction is performed in a 2.5D manner to avoid leakages into regions of intensities similar to intensity of brain (see Section 3).

The introduced algorithm works in five main steps shown in Fig. 10
                        . To avoid processing the whole image and speed up the computations, the method starts from the automatic determination of the ROI (i.e. region of interest) on the axial (XY) plane. Next, the contour of the brain is estimated in the coronal (XZ) view, based on image gradient and using morphological operations. The contour pixels are then transformed into the Cartesian coordinate system. The connected contour points form the set of the polygonal curves, ordered by the gift-wrapping convex hull algorithm. Then, the missing parts of the contour between the consecutive polygonal curves are reconstructed using Bresenham algorithm and Bezier curve smoothing. Such design of the algorithm allows to exclude the spinal cord from the region of brain after segmentation, which is very important in the considered problem. Finally, after converting Cartesian coordinates back to the pixel domain, the 2D brain contour from each slice is binary filled and the results from single slices are stacked together into a volumetric space. Additionally, the segmentation result is smoothed by 3D median filtering and projected back into XY plane to perform further analysis.

The consecutive steps of the algorithm are described in details in the following subsections.

The main goal of this step is to extract the region of interest (ROI) which refers to the coarse region of brain. The biggest advantage of performing this step, is the removal of the bolster, which often appears in CT images of brain. The region of bolster can cause serious problems to the automatic analysis due to the same HU values as a skull region. Additionally, the small remnants such as rollers or bandages that hold the child's head are also removed, since they may influence the further automatic analysis of images.

The selection of the ROI is performed slice-by-slice in the axial (XY) plane. It is assumed, that the ROI is the largest connected component, which simply refers to the head. The selection of the ROI is performed on the binary image, obtained by a global thresholding with the threshold equal to −1000HU. In particular, pixels of intensities higher than the threshold are set to 1, while the remaining pixels are set to 0.

In order to find the largest connected component, the connected component labeling in the binary image is firstly performed via so called flood-filling. The proposed method iteratively finds the pixels comprising one component and assigns them the same unique labels. Each component is grown from the randomly selected seed pixel of intensity 1, by adding the neighboring pixels of the same intensity. Since the growing is performed on the binary image, no additional similarity criterion is required. The 6-connectivity (face-adjacent pixels) is considered. In particular, given the set of pixels Q
                           =[q
                           
                              i
                           , q
                           
                              i+1, …, q
                           
                              n
                           ], where q
                           
                              i..n
                           
                           =1, the algorithm works as follows:
                              
                                 (1)
                                 Search for the randomly selected, unlabeled pixel q
                                    
                                       i
                                    ,

Use the region growing algorithm to find all the connected pixels containing q
                                    
                                       i
                                    ,

Label found pixels with the unique value l
                                    
                                       i
                                    ,

Repeat steps 1–3 until all pixels are labeled,

Count all pixels with assigned label value l
                                    
                                       i
                                     and select the largest component.

This procedure is repeated for each slice. Next, results obtained for each slice are stacked together to compose the three dimensional image of a coarse head.


                           Fig. 11
                            presents the result of ROI selection in the sample slice. Especially, in Fig. 11a the original image in the axial (XY) view is shown, Fig. 11b shows the result of object labeling process for better visualization converted to RGB image, while Fig. 11c presents the selected object which refers directly to expected region of interest.

In order to precisely estimate the brain contour, the binary image of a coarse brain is next analyzed slice-by-slice in the coronal (XZ) view plane. In this view, the skull manifest itself as a convex shape, with small visible gaps, thus the exact border between the brain and surrounding tissues can be determined easier, than in the remaining view planes. Additionally, such design of the algorithm allows to exclude the spinal cord from the region of brain after segmentation, which is very important in the considered problem.

The estimation of the brain contour in each coronal cross section is based on the edges obtained using Canny edge detector [26] and the set of binary operations applied to the image. The traditional, gradient-based edge detectors such as Roberts, Sobel or Prewitt filters, hasn’t been used since they are sensitive to noise and thus may produce false edges. Canny method is less sensitive and allows to detect true weak edges. The method firstly applies Gaussian derivative filter, which reduces noise. Then, the hysteresis thresholding is applied in order to find regions of the highest gradient. Two thresholds T1 and T2 are used to differentiate between strong and weak edges. If the gradient magnitude is below T1, the edge is suppressed. If the magnitude is above T2, the edge is preserved. If the magnitude is between the two thresholds, then it is set to zero unless there is a path from the edge pixel to another pixel with a gradient above T2. Hence, the weak edges are included in the output only if they are connected to strong edges. The hysteresis also helps to ensure that noisy edges are not broken up into multiple edge fragments. As a result, the Canny method produces set of continuous, solid edges.

Given a sample 2D image from coronal view shown in Fig. 12a, the proposed algorithm for brain contour estimation works as follows:
                              
                                 (1)
                                 Apply Canny edge detector to the original grayscale image I to obtain binary image of edges I
                                    grad (as shown in Fig. 12b),

Binarize the original grayscale image I by setting non-zero pixel intensities to 1 and the rest of the pixels to 0, then assign the result to I
                                    
                                       b
                                    ,

Get the binary image I
                                    bck with pixels representing background of the original image by negating the binary image I
                                    
                                       b
                                    ,

Obtain binary image of the skull I
                                    skull by a simple thresholding of the pixel intensities higher than 700HU (i.e. assign 1 to this pixels and 0 to the remaining ones),

Perform arithmetic operations on the binary images: 
                                       
                                          
                                             I
                                             
                                                brain
                                             
                                          
                                          =
                                          
                                             
                                                1
                                                −
                                                
                                                   
                                                      
                                                         I
                                                         
                                                            skull
                                                         
                                                      
                                                      +
                                                      
                                                         I
                                                         
                                                            grad
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          −
                                          
                                             I
                                             
                                                bck
                                             
                                          
                                       
                                    ,

Retain the largest connected component from the I
                                    brain image, using the method introduced for ROI selection,

Perform arithmetic operations on the binary images: 
                                       
                                          
                                             I
                                             
                                                sum
                                             
                                          
                                          =
                                          
                                             
                                                
                                                   I
                                                   
                                                      skull
                                                   
                                                
                                                +
                                                
                                                   I
                                                   
                                                      brain
                                                   
                                                
                                             
                                          
                                       
                                     (result shown in Fig. 12c),

Fill holes in the I
                                    sum image using binary filling [31], then assign the result to I
                                    mask,

Perform arithmetic operations on the binary images: I
                                    cnt
                                    =
                                    I
                                    sum
                                    −
                                    I
                                    mask,Obtain thin contour image I
                                    cnt using morphological thinning algorithm [27].

The thinning operation performed in the last step produces one pixel width segments of object contour (see Fig. 12d). The segments are continuous curves, what is extremely important in the context of polygonal chains creation performed in the next step.

The obtained coarse brain contour has visible gaps, at the top of the head, which correspond to discontinuous skull. Also the cut-off layer between the brain and the spinal cord area is manifested as a gap in brain contour. The goal of the next steps is to link contour segments to preserve the brain shape in the most reliable manner and produce the closed edge.

For the remaining processing steps, the obtained 2D contour pixels from each slice are translated into Cartesian coordinates, respecting that the single pixel is centered at the point (x, y) and the point 
                              
                                 
                                    
                                       0,0
                                    
                                 
                              
                            is in upper-left corner of the image.

In order to programmatically determine the polygonal curves, all the contour points have to be sorted. It was decided to perform sorting with respect to the polar angle. To do the sort, the contour points from the Cartesian coordinate system are firstly mapped to polar coordinates.

The polar coordinate system is a two-dimensional coordinate system in which each point on a plane is determined by a distance r from a fixed point (called a pole) and an angle φ from a fixed axis (i.e. polar angle). The polar axis is drawn horizontally from the pole and pointing to the right. [28]. In our case, the pole point is the centroid of the contour, calculated according to the following equation:
                              
                                 (4)
                                 
                                    
                                       
                                          c
                                          x
                                       
                                       =
                                       
                                          
                                             
                                                ∑
                                                1
                                                n
                                             
                                             
                                                
                                                   x
                                                   i
                                                
                                             
                                          
                                          n
                                       
                                       n
                                       
                                          c
                                          y
                                       
                                       =
                                       
                                          
                                             
                                                ∑
                                                1
                                                n
                                             
                                             
                                                
                                                   y
                                                   i
                                                
                                             
                                          
                                          n
                                       
                                    
                                 
                              
                           where c
                           
                              x
                           , c
                           
                              y
                            are coordinates of the centroid point, x
                           
                              i
                           , y
                           
                              i
                            are coordinates of contour points and n is the number of points forming the contour.

In order to perform angle sorting, the Cartesian coordinates x and y of the contour points are converted to polar coordinates r and φ with r
                           ≥0 and φ in the interval (−
                           π, π) according the following equation [29]:
                              
                                 (5)
                                 
                                    
                                       r
                                       =
                                       
                                          
                                             
                                                x
                                                2
                                             
                                             +
                                             
                                                y
                                                2
                                             
                                          
                                       
                                       ,
                                        
                                       φ
                                       =
                                       a
                                        
                                       tan
                                        
                                       2
                                       
                                          
                                             y
                                             ,
                                             x
                                          
                                       
                                    
                                 
                              
                           
                        

After conversion to polar coordinates, the angles φ are sorted in the clockwise order. Then, sorted points are converted back to the Cartesian coordinates x and y using the following formula:
                              
                                 (6)
                                 
                                    
                                       x
                                       =
                                       r
                                       ×
                                       cos
                                        
                                       φ
                                       ,
                                        
                                       y
                                       =
                                       r
                                       ×
                                       sin
                                        
                                       φ
                                    
                                 
                              
                           
                        

By iterating over the set of sorted points and calculating the Euclidean distance between them, the algorithm is able to find continuous polygon curves, which are parts of the contour image. In particular, one polygonal curve is formed by a set of consecutive points with the Euclidean distance below √2 each.

In order to fill the gaps between contour segments and reconstruct the correct shape of the brain, the consecutive polygonal curves must be found. To achieve this, the gift-wrapping algorithm (also known as Jarvis march approach) is applied [30].

The main feature of the selected convex hull approach is that the gift-wrapping algorithm stores its vertices in a set order. It begins at the leftmost contour point q
                           0. Then the method iteratively selects the point q
                           
                              i+1 such that all points are to the right of the line 
                              
                                 
                                    
                                       
                                          q
                                          i
                                       
                                       ,
                                          
                                       
                                          q
                                          
                                             i
                                             +
                                             1
                                          
                                       
                                    
                                 
                              
                           . This point is found by comparing polar angles of all points with respect to point q
                           
                              i
                            taken for the center of polar coordinates. The algorithm works in a loop until reaches q
                           
                              h
                           
                           =
                           q
                           0. Obtained vertices form the convex hull. It can be assumed that each found vertex of the convex hull must be a part of determined polygonal curve. Thus, the ordered vertices are mapped to the corresponding contour segments and the consecutive polygonal curves are found. Using gift-wrapping algorithm, only the outermost curves are found, which in turn preserves the unexpected cut-off of the brain region.

Having the sorted curves, the proposed algorithm fits the Bezier curve between the consecutive contour segments. The proposed method uses cubic Bezier curves, which most accurately approximate the curved shapes. A cubic Bezier curve is defined in the following equation [33]:
                              
                                 (7)
                                 
                                    
                                       B
                                       
                                          t
                                       
                                       =
                                       
                                          c
                                          1
                                       
                                       
                                          
                                             
                                                
                                                   1
                                                   −
                                                   t
                                                
                                             
                                          
                                          3
                                       
                                       +
                                       3
                                       
                                          c
                                          2
                                       
                                       t
                                       
                                          
                                             
                                                
                                                   1
                                                   −
                                                   t
                                                
                                             
                                          
                                          2
                                       
                                       +
                                       3
                                       
                                          c
                                          3
                                       
                                       
                                          t
                                          2
                                       
                                       
                                          
                                             1
                                             −
                                             t
                                          
                                       
                                       +
                                       
                                          c
                                          4
                                       
                                       
                                          t
                                          3
                                       
                                    
                                 
                              
                           where c
                           1, c
                           2, c
                           3, c
                           4 are two dimensional Euclidean points called the control points and t
                           ∈[0, 1]. At t
                           =0, B(0)=
                           c
                           1 and the curve follows a trajectory towards the control point c
                           2. As t increases, the curve follows a trajectory towards c
                           4, coming from the control point c
                           3 and finally, at t
                           =1, B(1)=
                           c
                           4.

To facilitate the least-squares derivation, the Bezier function is represented as matrix operations shown in the following equation:
                              
                                 (8)
                                 
                                    
                                       B
                                       
                                          t
                                       
                                       =
                                       
                                          T
                                       
                                       ×
                                       
                                          M
                                       
                                       ×
                                       
                                          C
                                       
                                    
                                 
                              
                           where: 
                              
                                 
                                    T
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                1
                                             
                                             
                                                t
                                             
                                             
                                                
                                                   
                                                      t
                                                      2
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      t
                                                      3
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 ,
                                    
                                 
                                    M
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               −
                                                               1
                                                            
                                                         
                                                         
                                                            3
                                                         
                                                         
                                                            
                                                               −
                                                               3
                                                            
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                      
                                                         
                                                            3
                                                         
                                                         
                                                            
                                                               −
                                                               6
                                                            
                                                         
                                                         
                                                            3
                                                         
                                                         
                                                            0
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               −
                                                               3
                                                            
                                                         
                                                         
                                                            3
                                                         
                                                         
                                                            0
                                                         
                                                         
                                                            0
                                                         
                                                      
                                                      
                                                         
                                                            1
                                                         
                                                         
                                                            0
                                                         
                                                         
                                                            0
                                                         
                                                         
                                                            0
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                    
                                 and
                                    
                                 
                                    C
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      c
                                                      1
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      c
                                                      2
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      c
                                                      3
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      c
                                                      4
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           .

The curve fitting algorithm needs some computational procedure of determining the distance from a given point to the considered curve. Namely, an index into the Bezier curve for each data point is needed. In this case, the path length of the segment was used. Having the series of n data points Q
                           =[Q
                           1, Q
                           2, …
                           Q
                           
                              n
                           ] to fit the curve in, the path length at ith point is defined in the following equation:
                              
                                 (9)
                                 
                                    
                                       
                                          d
                                          i
                                       
                                       =
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             2
                                          
                                          n
                                       
                                       
                                          
                                             
                                                Q
                                                j
                                             
                                             −
                                             
                                                Q
                                                
                                                   j
                                                   −
                                                   1
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

Then, the vector 
                              
                                 T
                                 =
                                 
                                    
                                       
                                          t
                                          1
                                       
                                       ,
                                       
                                          t
                                          2
                                       
                                       ,
                                       …
                                       ,
                                       
                                          t
                                          n
                                       
                                    
                                 
                              
                            that maps the index i of each data point to the corresponding index t
                           
                              i
                            in the Bezier curve is defined. In a given moment of time, t
                           
                              i
                            is equal to the percentage of path length at point i in the data:
                              
                                 (10)
                                 
                                    
                                       
                                          t
                                          i
                                       
                                       =
                                       
                                          
                                             
                                                
                                                   
                                                      d
                                                      i
                                                   
                                                   −
                                                   
                                                      d
                                                      
                                                         i
                                                         −
                                                         1
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                
                                                n
                                                
                                                   j
                                                   =
                                                   2
                                                
                                             
                                             
                                                
                                                   
                                                      d
                                                      j
                                                   
                                                   −
                                                   
                                                      d
                                                      
                                                         j
                                                         −
                                                         1
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

The proposed algorithm computes the error of fit for a Bezier curve, defined by its control points C to the given data points. For this task, the residual sum of squared distances from each data point to its Bezier curve approximation is calculated. Considering the x values separately from the y values, the error of fit to the given x and y-points is calculated using the following equation, respectively:
                              
                                 (11)
                                 
                                    
                                       E
                                       
                                          
                                             
                                                C
                                                x
                                             
                                          
                                       
                                       =
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          n
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      x
                                                      i
                                                   
                                                   −
                                                   B
                                                   
                                                      
                                                         
                                                            t
                                                            i
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          2
                                       
                                    
                                 
                              
                           
                           
                              
                                 (12)
                                 
                                    
                                       E
                                       
                                          
                                             
                                                C
                                                y
                                             
                                          
                                       
                                       =
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          n
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      y
                                                      i
                                                   
                                                   −
                                                   B
                                                   
                                                      
                                                         
                                                            t
                                                            i
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          2
                                       
                                    
                                 
                              
                           
                        

Representing the error equations as the matrix operations and performing the simple transformations to find the maximum error of fit, the formulas shown in the following equation are obtained.
                              
                                 (13)
                                 
                                    
                                       
                                          C
                                          x
                                       
                                       =
                                       
                                          
                                             M
                                          
                                          
                                             −
                                             1
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         T
                                                      
                                                      T
                                                   
                                                   
                                                      T
                                                   
                                                
                                             
                                          
                                          
                                             −
                                             1
                                          
                                       
                                       
                                          
                                             T
                                          
                                          T
                                       
                                       
                                          X
                                       
                                    
                                 
                              
                           
                           
                              
                                 (14)
                                 
                                    
                                       
                                          C
                                          y
                                       
                                       =
                                       
                                          
                                             M
                                          
                                          
                                             −
                                             1
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         T
                                                      
                                                      T
                                                   
                                                   
                                                      T
                                                   
                                                
                                             
                                          
                                          
                                             −
                                             1
                                          
                                       
                                       
                                          
                                             T
                                          
                                          T
                                       
                                       
                                          Y
                                       
                                    
                                 
                              
                           where: 
                              
                                 T
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      t
                                                      1
                                                      3
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      t
                                                      1
                                                      2
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      t
                                                      1
                                                   
                                                
                                             
                                             
                                                1
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      t
                                                      2
                                                      3
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      t
                                                      2
                                                      2
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      t
                                                      2
                                                   
                                                
                                             
                                             
                                                1
                                             
                                          
                                          
                                             
                                                …
                                             
                                             
                                                …
                                             
                                             
                                                …
                                             
                                             
                                                …
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      t
                                                      n
                                                      3
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      t
                                                      n
                                                      2
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      t
                                                      n
                                                   
                                                
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                 
                                 ,
                                    
                                 x
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      x
                                                      1
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      x
                                                      2
                                                   
                                                
                                             
                                          
                                          
                                             
                                                …
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      x
                                                      n
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                    
                                 and
                                    
                                 y
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      y
                                                      1
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      y
                                                      2
                                                   
                                                
                                             
                                          
                                          
                                             
                                                …
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      y
                                                      n
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

Finally, the x and y-components of the best fit Bezier curve for n data points can be found by applying the transformations shown in Eqs. (13) and (14).

To preserve the brain shape in the most reliable manner, the input points for the Bezier curve are in practice all the actual points forming the consecutive curves. Filling the gaps between two consecutive curves is performed iteratively. In each iteration only two new curve points on the both ends of consecutive curves are added. This new points should be the nearest points (in terms of Euclidean distance) to the known end points. New curves points are connected using the Bresenham algorithm. The fitting algorithm stops if all the gaps are filled, which means all the polygonal curves determined in the previous step are connected.

The use of Bezier fitting algorithm provides the standardized way to disconnect the brain region from the surrounding tissues. The brain contour is approximated based on the known curve segments, therefore there is no need to additionally determine the cut-off layers between different regions (i.e. brain and spinal cord area). This ensures the repeatable assessment of the brain volumes.


                           Fig. 13a shows the curve fitting process without the use of the Bresenham algorithm (stopped after five iterations). Fig. 13b shows the curve fitting with the use of Bresenham method on each iteration. Fig. 13c presents the final result imposed on the input brain contour, after morphological thinning.

In the post-processing, the smoothed and closed polygon obtained in each slice is filled using a binary filling algorithm based on the morphological reconstruction [31]. Fig. 14
                            shows the final result of brain segmentation from a sample coronal slice using the introduced method. In particular, Fig. 14a presents the binary result of the segmentation, while Fig. 14b shows overlay of the segmented brain region on the original image. The segmented region is highlighted in red color.

Finally, the binary segmentation results are projected back to the axial (XY) plane to perform further numerical analysis. Obtained volumetric brain surface is additionally smoothed, in order to remove small artefacts caused by the image segmentation performed slice-by-slice. The smoothing is performed by applying 3D median filtration using the mask of 5×5×5pixel. The size of mask was adjusted experimentally.

Binary image of the brain after segmentation is next used to determine brain volume. In the dataset after grid regularization, a pixel is a cube of dimension equal d
                           
                              x
                           . Therefore brain volume can be easily determined by counting pixels included into the brain region and multiplying it by volume of a single pixel in accordance with the following equation:
                              
                                 (15)
                                 
                                    
                                       V
                                       =
                                       
                                          d
                                          x
                                          3
                                       
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          X
                                       
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             1
                                          
                                          Y
                                       
                                       
                                          
                                             ∑
                                          
                                          
                                             k
                                             =
                                             1
                                          
                                          Z
                                       
                                       b
                                       
                                          
                                             i
                                             ,
                                             j
                                             ,
                                             k
                                          
                                       
                                    
                                 
                              
                           where b is a binary image of brain.

In this step brain characteristic dimensions are determined. These include the standard parameters used to determine cephalic index CI i.e. the maximal brain length L and the maximal brain width W. The maximal length and width are able to capture brain deformation in horizontal direction (e.g. abnormal elongation) but ignore information about vertical changes in brain shape (e.g. abnormal height of skull). Therefore, in this paper we introduce brain height as an additional parameter describing brain shape.

Before the main processing, brain projections p
                           
                              xy
                           , p
                           
                              yz
                           , p
                           
                              xz
                            on planes XY, YZ and XZ, respectively, are found. A projection is a binary image, in which pixel intensity 1 denotes that least one pixel at this position was qualified to brain in any cross-section. Projections for a sample brain are shown in Fig. 15
                           .

Projection p
                           
                              yz
                            on a plane YZ is used to find the maximal cross-section of a brain i.e. the cross-section in which the brain length is maximal. The maximal cross-section of a brain is contained in a plane which passes through two most distant points of a brain. These can be easily found based on projection p
                           
                              yz
                           . In particular, the most top-front pixel 
                              
                                 X
                                 1
                                 =
                                 
                                    
                                       
                                          y
                                          1
                                       
                                       ,
                                       
                                          z
                                          1
                                       
                                    
                                 
                              
                            is a pixel in projection image, with the lowest y coordinate, while the most top-back pixel 
                              
                                 X
                                 2
                                 =
                                 
                                    
                                       
                                          y
                                          2
                                       
                                       ,
                                       
                                          z
                                          2
                                       
                                    
                                 
                              
                            is a pixel with the highest y coordinate (see Fig. 16a).

The plane containing maximal cross-section of brain is than defined by equation: z
                           =
                           ay
                           +
                           b where: 
                              
                                 a
                                 =
                                 
                                    
                                       
                                          
                                             
                                                z
                                                2
                                             
                                             −
                                             
                                                z
                                                1
                                             
                                          
                                       
                                    
                                    /
                                    
                                       
                                          
                                             
                                                y
                                                2
                                             
                                             −
                                             
                                                y
                                                1
                                             
                                          
                                       
                                    
                                 
                              
                            and 
                              
                                 b
                                 =
                                 
                                    
                                       
                                          
                                             
                                                y
                                                2
                                             
                                             
                                                z
                                                1
                                             
                                             −
                                             
                                                y
                                                1
                                             
                                             
                                                z
                                                2
                                             
                                          
                                       
                                    
                                    /
                                    
                                       
                                          
                                             
                                                y
                                                2
                                             
                                             −
                                             
                                                y
                                                1
                                             
                                          
                                       
                                    
                                 
                              
                           . The plane passes through slices and is angled β degrees to CT slices. Therefore, before characteristic dimensions are determined, the maximal cross section p
                           max must be reconstructed based upon CT information. In particular image data contained in plane z
                           =
                           ay
                           +
                           b is projected onto a plane z
                           =
                           z
                           2 in accordance with an Algorithm 1 and then rescaled (elongated) according to the following equation:
                              
                                 
                                    
                                    
                                       
                                          
                                             Algorithm 1
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                Data: in–3D image of brain; X,Y,Z - image dimensions; a, b - plane coefficients
                                             
                                             
                                                Result: p–projection image
                                             
                                             
                                             
                                                for x
                                             
                                             =
                                             
                                             1:1:X do
                                             
                                             
                                             
                                                
                                                
                                                
                                                for
                                              
                                             z
                                             
                                             =
                                             
                                             1:1:Z do
                                             
                                             
                                             
                                                
                                                
                                                
                                                
                                                for
                                              
                                             y
                                             
                                             =
                                             
                                             1:1:Y do
                                             
                                             
                                             
                                                
                                                
                                                
                                                
                                                
                                                if
                                              
                                             z == round(a*y
                                             
                                             +
                                             
                                             b) then
                                             
                                             
                                             
                                                
                                                
                                                
                                                
                                                
                                                
                                             
                                             p(y, x)
                                             
                                             =
                                             
                                             in(y, x, z)
                                             
                                             
                                                
                                                
                                                
                                                
                                                
                                                end
                                             
                                             
                                             
                                                
                                                
                                                
                                                
                                                end
                                             
                                             
                                             
                                                
                                                
                                                
                                                end
                                             
                                             
                                             
                                                end
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (16)
                                 
                                    
                                       
                                          p
                                          
                                             max
                                          
                                       
                                       
                                          
                                             x
                                             ,
                                             y
                                          
                                       
                                       =
                                       p
                                       
                                          
                                             x
                                             ,
                                             round
                                             
                                                
                                                   
                                                      y
                                                      
                                                         cos
                                                          
                                                         β
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           where p is projection of image onto the plane z
                           =
                           ay
                           +
                           b and β is the angle between the planes z
                           =
                           ay
                           +
                           b and z
                           =
                           z
                           2.

After maximal cross-section p
                           max is determined, the maximal brain length L and width W are easily found as dimensions of the minimal bounding box surrounding brain region (see Fig. 16b). Additionally, based on the maximal cross section p
                           max head circumference is also easily determined. In particular, one pixel with outline of the brain region in p
                           max is found and used to calculate HC in accordance with the following equation:
                              
                                 (17)
                                 
                                    
                                       HC
                                       =
                                       
                                          
                                             n
                                             +
                                             m
                                             
                                                2
                                             
                                          
                                       
                                       
                                          d
                                          x
                                       
                                    
                                 
                              
                           where n is the number of pairs of outline pixels connected by an edge, m is the number of pairs of outline pixels connected by a corner and d
                           
                              x
                            is a pixel dimension

In this paper, the authors propose to define an additional linear index—a brain height H as a maximal distance between the plane containing maximal cross-section and any pixel belonging to brain surface above the maximal cross-section (see Fig. 18a). Such definition ignores lower parts of brain which are usually not significantly changed by the disease but allows to capture changes of brain dimension in vertical direction.

Brain height is found based on a brain projection p
                           
                              yz
                            on a plane YZ. In particular, it is defined as a maximal distance between line z
                           =
                           ay
                           +
                           b and any brain pixel above the line.
                              
                                 (18)
                                 
                                    
                                       H
                                       =
                                       
                                          
                                             max
                                          
                                          
                                             
                                                y
                                                i
                                             
                                             >
                                             a
                                             
                                                x
                                                i
                                             
                                             +
                                             b
                                             &
                                             
                                                p
                                                
                                                   y
                                                   z
                                                
                                             
                                             
                                                
                                                   
                                                      y
                                                      i
                                                   
                                                   ,
                                                   
                                                      z
                                                      i
                                                   
                                                
                                             
                                             =
                                             1
                                          
                                       
                                       
                                          d
                                          i
                                       
                                       =
                                       
                                          
                                             a
                                             
                                                y
                                                i
                                             
                                             −
                                             
                                                z
                                                i
                                             
                                             +
                                             b
                                          
                                          
                                             
                                                
                                                   
                                                      a
                                                      2
                                                   
                                                   +
                                                   1
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

In practice, only pixels at the edge of a brain can be considered.

Brain characteristic dimensions still ignore volumetric information. Therefore, to supplement linear measurements, in this paper the authors propose planar cephalic index (PCI) defined as a ratio between area of brain surface above the maximal cross-section P
                           
                              S
                            and the area of maximal cross section P
                           
                              C
                           . The later can be easily determined based on maximal projection image p
                           max in accordance with the following equation:
                              
                                 (19)
                                 
                                    
                                       
                                          P
                                          C
                                       
                                       =
                                       
                                          d
                                          x
                                          2
                                       
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          X
                                       
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             1
                                          
                                          
                                             Y
                                             /
                                             cos
                                              
                                             β
                                          
                                       
                                       
                                          p
                                          
                                             max
                                          
                                       
                                       
                                          
                                             i
                                             ,
                                             j
                                          
                                       
                                    
                                 
                              
                           
                        

Brain region above the maximal cross-section is shown in blue in Fig. 17
                           . In order to determine its surface, the corresponding volume is firstly converted into a triangular mesh, where each triangle is described by a triplet of coordinates. After this conversion, the surface area of region of interest can be determined from the following equation:
                              
                                 (20)
                                 
                                    
                                       
                                          P
                                          S
                                       
                                       =
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             =
                                             1
                                          
                                          k
                                       
                                       
                                          t
                                          i
                                       
                                    
                                 
                              
                           where t
                           
                              i
                            is a surface area of the ith triangle and k is a number of triangles composing a mesh.

After both areas are computed, the planar cephalic index (PCI) can be obtained from the following equation:
                              
                                 (21)
                                 
                                    
                                       PCI
                                       =
                                       
                                          
                                             
                                                P
                                                S
                                             
                                             −
                                             
                                                P
                                                C
                                             
                                          
                                          
                                             
                                                P
                                                C
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

Additional proposed parameter is surface-area-to-volume ratio (SVR) which defines the amount of brain surface area per unit volume of a brain (both above the maximal cross-section). SVR is given by the following equation:
                              
                                 (22)
                                 
                                    
                                       SVR
                                       =
                                       
                                          
                                             
                                                P
                                                S
                                             
                                          
                                          V
                                       
                                    
                                 
                              
                           
                        

If compared to the real brain surface, the segmented region as in Fig. 17 is coarse. In particular, the details of the cortex are not visible in the result of image segmentation. However, the goal of this step indeed is extracting the interior surface of skull and the segmented region fits it very closely. Since the interior shape of skull matches the external shape of skull, the skull shape analysis can be performed based on its interior surface, which is very helpful in the postoperative cases of craniosynostosis, where parts of skull are missing.

This section presents the results of applying the introduced brain segmentation algorithm to sample craniosynostosic cases. In particular, 10 preoperative and 10 postoperative cases are considered. The preoperative cases include five normal (i.e. not deformed) skulls and five skulls deformed by the craniosynostosis. These cases were treated as preoperative cases since from the point of view of the proposed brain segmentation algorithm, there is no difference between normal skull and the skull with the craniosynostosis. It is because the problems in brain segmentation are caused by the skull discontinuity not by the skull shape. 3D CT datasets were regarded. Each dataset consisted of 100–150 slices of the resolution 512×512pixel each.

Both the visual and the numerical assessment of image segmentation quality was performed by comparing the results of the introduced approach with the ground truth segmentations. The latter were prepared semi-manually using ImageJ software. Experts supervised this process and verified all the templates. Because the manual preparation of ground truth images is tedious and time consuming, only 20 cases were included into the comparison.

Visual results of the introduced approach are presented in Figs. 18 and 19
                        . In particular, Fig. 18 shows overlays of the segmented brain region on the sample CT slices. The ground truth manual segmentations of the brain region (shown in odd rows) are highlighted in green color. The corresponding slices with overlays of the segmented brain using the proposed approach are highlighted in red color and shown in even rows. Slices present the most difficult cases, in terms of susceptibility to leaking. These include skull discontinuity and presence of eyes, ears and nasal sinus.


                        Figs. 19–21
                        
                        
                         show the sample 3D results of brain segmentation using the proposed method. In particular, Figs. 19 and 21 consider skulls with craniosynostosis while Fig. 20 corresponds to skulls having normal shape. Since with regard to skull continuity, normal skulls and preoperative craniosynostosic skulls have the same properties, the normal cases shown in Fig. 20 are considered as the preoperative ones. Fig. 19 shows 5 preoperative cases (cases 1–5) and 10 postoperative cases (cases 6–15). Additionally, Figs. 20 and 21 present the visual comparison of 3D segmentation results for the sample datasets from the CT examinations of patients with the ‘normal’ skull and the deformed skull, respectively. In particular, the 3D segmentation results obtained by the proposed brain segmentation method (violet color) are imposed on the manual segmentation results performed by specialists (pink color). Such a comparison shows the possible leaks or under-segmentation problems in the detection of the proper brain region.

The results presented in Fig. 18 show the robustness of the proposed segmentation method against discontinuous boundaries, in particular against the discontinuity of the skull. The algorithm correctly persists the shape of the brain and do not leak into region of skin, eyes, ears or nose. Additionally, based on visual assessment, the difference between the results of the proposed approach and the ground truths is hardly visible.

The 3D visualizations of the results of the introduced approach shown in Figs. 19–21 prove, that the method avoids leakages into region of eyes and skin both in the preoperative cases and the postoperative cases as well. This means, that the skull discontinuities were obeyed. Additionally, from Figs. 19–21 it can be seen, that a brain was segmented without the spinal cord and the brain stem, what is very important from the point of view of the volumetric measurements.

The DICE coefficient (Eq. (23)) and Jaccard index (Eq. (24)) [32] were used to assess the accuracy of the proposed approach. For both regarded measures 1 denotes perfect overlap between the segmentation result and ground truth image, while 0 indicates no overlap.
                           
                              (23)
                              
                                 
                                    DIC
                                    =
                                    
                                       
                                          2
                                          TP
                                       
                                       
                                          FP
                                          +
                                          2
                                          TP
                                          +
                                          FN
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (24)
                              
                                 
                                    JCD
                                    =
                                    
                                       
                                          TP
                                       
                                       
                                          FP
                                          +
                                          TP
                                          +
                                          FN
                                       
                                    
                                 
                              
                           
                        where: TP (true positives) is the number of object voxels included into the object, TN (true negatives) is the number of background voxels included into the background, FP (false positives) is the number of background voxels included into the object and FN (false negatives) is the number of object voxels included into the background. Additionally, the sensitivity (TPR) and specificity (SPC) defined by Eqs. (25) and (26) were determined.
                           
                              (25)
                              
                                 
                                    TPR
                                    =
                                    
                                       
                                          TP
                                       
                                       
                                          TP
                                          +
                                          FN
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (26)
                              
                                 
                                    SPC
                                    =
                                    
                                       
                                          TN
                                       
                                       
                                          FP
                                          +
                                          TN
                                       
                                    
                                 
                              
                           
                        
                     

The sensitivity (TPR) describes substitution and insertion errors, while the specificity (SPC) describes substitution and deletion errors. Low SPC indicates over-segmentation, while low TPR means the under-segmentation and a significant object data loss.

The determined values of image segmentation quality measures are summarized in Table 1. The consecutive columns contain case ID, type of the case, values of DICE coefficient (DIC), values of Jaccard index (JCD), sensitivity (TPR) and specificity (SPC).

Obtained DICE coefficients and Jaccard indexes show the high similarity between automatically obtained segmentation results and the manually created ground truths. DICE coefficient equal on average 0.94 and Jaccard index on average close to 0.9 means that no less than 90% brain after segmentation corresponds with the referential segmentations. Additionally, high specificity and sensitivity indicate, that there was no significant over and under segmentation. These indices clearly show relatively small tendency to over-segmentation of the proposed approach, but also confirm the very small under-segmentation and data loss effects. This means that the introduced approach keeps the brain region within a skull without significant leakages, but this is not paid with excluding important brain regions (like in the case of our previous approach to the considered problem [25]). This trend can be observed both in the preoperative and the postoperative cases. Based on numerical measures shown in Table 1
                         it can be easily seen, that the discontinuity of the skull does not influence the accuracy of the proposed segmentation method. This means the method can be considered universal and successfully used before and after the surgery.

It should be also highlighted, that the proposed brain segmentation algorithm outperforms our previous attempt to segmentation of craniosynostosic brain from CT datasets [25] in terms of time and memory usage. The previous, random walker based approach requires about 10–15min and up to 12GB RAM memory (Intel Core I7 2.10GHz, 16GB RAM) to extract brain from CT dataset consisting of 100–150 slices. The new method has been fully implemented in Java language and requires less than 4 GB RAM to perform all the necessary processing steps. The execution time of the proposed brain segmentation algorithm per one CT slice is about 0.48–0.60s, depending on the image resolution. The total time of the method for 3D dataset consisting from 100 to 150 slices varies between 45 and 95s (Intel Core I7 2.10GHz, 16GB RAM), including the optional post-processing step. This makes the method available in everyday clinical routine.

This section presents results of applying the introduced methods for craniosynostosis assessment to sample preoperative cases. In particular, five cases of scaphocephaly, five cases of trigonocephaly and five cases of plagiocephaly were selected. Only preoperative cases are considered, in order to indicate the possible relation between the introduced indices and types of the disease. This relations cannot be observed in the postoperative cases, where skull shape is corrected. However, since all indices are based on binary image of brain, these can be easily applied also in the postoperative craniosynostosis.

The results of applying the introduced image processing and analysis algorithms to linear measurements of brain properties are summarized in Table 2
                        . In particular, the case ID is given in the first column. This is followed by the type of craniosynostosis given in the second column. Brain maximal width, brain maximal length and brain maximal height in millimeters are given in columns three, four and five, respectively. Next three columns present ratios between characteristic dimensions of the brain. In particular CI refers to cephalic index defined as ratio between the maximal length and the maximal width of brain. CI2 and CI3 refers to ratio between the maximal width to the maximal height of the brain and ratio of the maximal length and the maximal height of the brain, respectively. Finally, head circumference in millimeters is presented in the last column.

Planar and volumetric measurements are summarized in Table 3
                        . In particular, the consecutive columns present: case id, type of the craniosynostosis, volume of a brain given in dm
                        3, planar cephalic index proposed in this paper and surface to volume ratio measured in 1/dm.

The average values of absolute indices calculated for each regarded type of the disease are summarized in Table 4
                        . The type of the craniosynostosis is indicated in the first column. Next columns present cephalic index, ratio CI2, ratio CI3, planar cephalic index (PCI) and surface-area-to-volume ratio (SVR), respectively. Only the indices independent on the child age were considered. Characteristic dimensions and head circumference could not be averaged, as these change according to the growth of a child.

The linear measurements were verified via comparison with the manual measurements performed by specialists. These were done manually using The Medical Imaging Interaction Toolkit (MITK), in particular the Path tool. This tool is able to measure the distance of a path drawn manually on the CT datasets. The linear measurements were performed independently by two trained experts. The assessment of brain volume determination was performed by comparing the brain volume determined based on result of segmentation using the introduced approach with the volume calculated based on the ground truth segmentations. These were built in the way described in the previous section. Unfortunately, there was no possibility to assess the accuracy of indices requiring determination of brain surface area (i.e. PCI and SVR).

The accuracy of the introduced methods for qualitative description of craniosynostosis is summarized in Table 5
                        . In particular for each regarded index (which is given in the table header) the mean absolute error (MAE), the maximal absolute error 
                           
                              
                                 
                                    
                                       AE
                                       
                                          max
                                       
                                    
                                 
                              
                           
                        , the minimal absolute error 
                           
                              
                                 
                                    
                                       AE
                                       
                                          min
                                       
                                    
                                 
                              
                           
                         and standard deviation of the mean absolute error is given 
                           
                              
                                 
                                    
                                       σ
                                       
                                          AE
                                       
                                    
                                 
                              
                           
                        . All values are given in %. For linear measurements, results obtained from two experts are considered. Expert id is indicated in the second column.

The introduced methods for calculation of standard indices used for assessment of craniosynostosis (i.e. cephalic index and head circumference) are accurate and reliable. Based on results shown in Table 5, it can be easily seen that the error of CI determination on average does not exceed 4%. Similarly, the average error of HC determination is lower than 5%. If only results from one expert are regarded, the average error of CI and HC determination does not exceed 2.5%. These are very good results.

The average errors of CI2 and CI3 determination were around 7%. This may be caused by the fact, that both these indices include the brain height introduced in this paper. Since the measure is new for the experts, and none standards regarding this dimension exist, the experts interpreted it differently from our definition. Further training would probably decrease the error rate.

The average error of volume assessment is on average 3.2%. This is also a very good result which proves that the introduced segmentation approach properly defines both: brain shape and brain volume.

It should be also noted, that the assessment presented in Table 5 is tentative. The ground truths measurements for both—linear measurements and volumetric measurements were built manually. This means that they are not fully reliable. Results provided by two experts for each considered index differ from each other by a few percent. This means, that the overall accuracy of the introduced methods can be even higher than this drawn from Table 5.

Based on numerical results shown in Tables 2 and 4 it can be clearly seen that cephalic index is not sufficient to unambiguously distinguish the type of craniosynostosis. The index appears significantly higher in the case of scaphocephaly (1.47 on average). However, in the case of trigonocephaly and plagiocephaly the values of CI are very similar (respectively: 1.08 and 1.14 on average). The difference between them is not significant. Therefore, for distinguishing between those two types of the craniosynostosis the proposed CI3 index (i.e. the ratio of the maximal length and the maximal height of brain) can be used. CI3 is significantly lower in the case of trigonocephaly which is caused by the increased head height.

Additionally, based on results shown in Tables 3 and 4 it can be observed that the proposed planar cephalic index (PCI) exhibits significant differences depending on the types of the craniosynostosis. It is the lowest in the case of plagiocephaly (2.15 on average), while the highest values (2.72 on average) correspond with trigonocephaly. Therefore, it can potentially useful for recognition of the disease type. Additionally, it might be more reliable than the linear indices, because it regards important planar information.

Similar, conclusion can be drawn the proposed surface-area-to-volume ratio (SVR). It combines volumetric and planar information about the brain shape. Additionally SVR values depend on the type of craniosynostosis. For the regarded cases the lowest values were obtained for trigonocephaly (7.20 on average), while the highest values (8.26 on average) accompanied scaphocephaly. Additionally, it provides more reliable and unambiguous information than the brain volume alone.

In order to present the possible usefulness of the proposed indices in the recognition of the craniosynostosis type, K-means clustering was applied to cluster the considered cases into three sets corresponding to the type of the disease. The clustering was performed according different indices. Clustering results are summarized in Table 6
                        . The case ID is given in column 1. This correspond with cases from Tables 2 and 3. The type of the disease is given in the second column. In particular class 1 refers to scaphocephaly, class 2 refers to trigonocephaly, while class 3 refers to plagiocephaly. The following columns present the results of clustering performed with respect to features given in the column caption. These were, respectively: cephalic index—CI (in column 3), planar cephalic index—PCI (in column 4), surface to volume ratio—SVR (in column 5), cephalic indices CI and CI2 (in column 6), cephalic indices CI and CI3 (in column 7), all cephalic indices (in column 8), and cephalic indices CI and C3 together with planar cephalic index (in column 9). The number given in the column indicates the class, to which the case was assigned by the K-means clustering algorithm. Misclassified cases are highlighted in bold. In the last row, the total classification error is given for each clustering attempt.

The clustering results shown in Table 6 confirm conclusions drawn previously from Table 4. In particular, it can be seen that cephalic index CI is not sufficient to distinguish between trigonocephaly and plagiocephaly. When applied only with respect to CI, K-means clustering misclassified three trigonocephaic cases what resulted in classification error equal to 20%. Classification performed only with respect to PCI was significantly better and misclassified only one plagiocephalic case. This resulted in classification error equal to 6.7%. It should be also underlined, that it was possible to obtain perfect classification of the regarded cases, when three indices (namely: CI, CI3 and PCI) were considered. Two of them (i.e. planar cephalic index and CI3 which regards skull height) are the outcome of the research described in this paper.

@&#CONCLUSIONS@&#

In this paper a set of universal image processing and analysis methods for an automatic assessment of craniosynostosis was proposed. These include effective and accurate brain segmentation algorithm from CT datasets, algorithms for determining the existing indices used in assessment of the disease and proposals of new methods based on planar and volumetric analysis of a brain.

The introduced brain segmentation algorithm is able to effectively estimate the correct shape of the brain, even in the case of discontinuous skull. The tests performed on sample CT datasets have revealed that the method avoids significant leakages into skin or spinal cord regions and omits different artifacts that cause problems for further analysis (i.e. nose, eyes and ears). The quantitative assessment of the method accuracy have revealed that no less than 90% of the brain region after segmentation corresponds with the referential segmentations. Additionally, although the introduced algorithm was dedicated to both the pre- and postoperative craniosynostosic cases, it can be universally applied for different types of brain pathologies.

The introduced algorithms for numerical assessment of the craniosynostosis are automatic and do not require user interaction. As a result, the measurement of all the regarded indices is objective. In opposite to the existing methods for assessment of craniosynostosis, the proposed algorithms are not influenced by a ‘human factor’, as they do not require manual selection of skull landmarks, characteristic dimensions, the most representative slice etc. Additionally, they are resistant to skull discontinuity, what makes them available both in the pre- and postoperative cases. What's most, the introduced methods do not require a physical contact with a child and may be used for assessing and monitoring the craniosynostosis based on the historical CT scans, acquired in different moments at different sites. Having in mind the abovementioned advantages, the described research can be regarded a step forward through introducing the automatic assessment of the craniosynostosis into the everyday clinical routine. The introduced methods will surely support the objective assessment and diagnosis of the craniosynostosis.

The attention should be also paid to planar and volumetric indices for assessment of craniosynostosis introduced in this paper, namely: the planar cephalic index (PCI) and the surface area to volume ratio (SVR). These include information contained within a whole CT volume (not only in the most representative slice, like in the case of the traditional methods). Such methods have not been so far used for assessment of craniosynostosis. However, based on results presented in the paper it can be seen that these indices exhibit relation with types of the disease. Therefore our future work will consider tests on a wide scope of datasets to confirm the applicability of these indices in classification of the craniosynostosis type. If the usefulness is confirmed the introduced approaches may become a new standard in the diagnosis of the disease.

The authors have no conflicts of interest associated with this publication and there has been no significant financial support for this work that could have influenced its outcome.

@&#ACKNOWLEDGEMENTS@&#

The authors would like to thank Dr. Wanda Mikołajczyk-Wieczorek from Polish Mother's Memorial Hospital in Lodz for providing us with necessary background knowledge and CT datasets used in this paper.

This research was funded by the Ministry of Science and Higher Education of Poland from founds for science in years 2013–2015 in a framework of Iuventus Plus Programme (project no. IP 2012 011272).

@&#REFERENCES@&#

