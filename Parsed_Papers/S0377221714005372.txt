@&#MAIN-TITLE@&#Outpatient appointment scheduling given individual day-dependent no-show predictions

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We develop a method to schedule appointments given no-show predictions.


                        
                        
                           
                           We study the database of a large mental health center with a high no-show rate.


                        
                        
                           
                           Likely shows should be scheduled soon, while likely no-shows later.


                        
                        
                           
                           We outperform a popular appointment scheduling policy: open access.


                        
                        
                           
                           A “same-day appointments” policy should not be adopted for high prediction quality.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Business analytics

OR in health services

Data mining

Appointment scheduling

@&#ABSTRACT@&#


               
               
                  This paper examines the combined use of predictive analytics, optimization, and overbooking to schedule outpatient appointments in the presence of no-shows. We tackle the problem of optimally overbooking appointments given no-show predictions that depend on the individual appointment characteristics and on the appointment day. The goal is maximizing the number of patients seen while minimizing waiting time and overtime. Our analysis leads to the definition of a near-optimal and simple heuristic which consists of giving same-day appointments to likely shows and future-day appointments to likely no-shows. We validate our findings by performing extensive simulation tests based on an empirical data set of nearly fifty thousand appointments from a real outpatient clinic. The results suggest that our heuristic can lead to a substantial increase in performance and that it should be preferred to open access under most parameter configurations. Our paper will be of great interest to practitioners who want to improve their clinic performance by using individual no-show predictions to guide appointment scheduling.
               
            

@&#INTRODUCTION@&#

One of the biggest obstacles to efficient appointment scheduling in outpatient clinics is “patient no-shows” (Cayirli & Veral, 2003; Chen & Robinson, 2014; Gupta & Denton, 2008; LaGanga & Lawrence, 2012; Liu & Ziya, 2014; Zacharias & Pinedo, 2013), which leads to provider underutilization and delayed patient access. A common solution is to overbook, that is scheduling more appointments than the capacity would allow, in order to increase the provider’s utilization. Although overbooking allows more patients to be seen, it also introduces patient waiting time and clinic overtime. The problem consists of finding the optimal trade-off between maximizing the revenue made from seeing patients and minimizing the costs associated with patient waiting time and clinic overtime. The difference between revenue and costs is the “clinic profit”, which should be maximized.

The performance of overbooking may not be consistently high, because it heavily depends on the moments when the no-shows happen. Compare, for example, a situation in which the only two no-shows of the day happen at the beginning of the clinic session to a situation in which one of them happens in the middle and the other one at the end of the clinic session. In the first situation, the clinic becomes congested towards the end of the day, causing long waiting time and overtime; in the second situation, the delay generated in the first part is absorbed by the appointment slot left empty by the first no-show, and the delay generated in the second part is absorbed by the appointment slot left empty by the second no-show, resulting in a short waiting time and a short overtime. The unreliability of overbooking is therefore caused by the uncertainty around the show probability of each appointment. However, with the use of statistical, machine learning, and data mining techniques, it is possible to obtain a show probability for the individual appointments. By guiding the scheduling decision with this probability, one can obtain a more reliable overbooking strategy.

Thus motivated, the present work examines the combined use of predictive analytics, optimization, and overbooking to schedule appointments. Our goals are to improve upon traditional appointment scheduling policies and to provide guidelines to clinics interested in implementing our scheduling method. Although we specifically consider the case of outpatient clinics, our work and findings can be generalized to any appointment-based system, such as lawyers’ offices.

We consider the problem of scheduling the current appointment request in an appointment slot over the next days. The show probability of the appointment will depend on the day chosen. The reasons for this dependency are: first, the “lead time” to the appointment, i.e., the number of days between the arrival of the appointment request and the appointment day (Galucci, Swartz, & Hackerman, 2005); second, the appointment location (Bean & Talaga, 1995), which is a day-dependent factor in clinics where doctors work in different locations in different days; third, the day of the week (Glowacka, Henry, & May, 2009), whose impact on no-shows is caused by the incompatibility between the patient’s personal schedule and the appointment time; fourth, weather conditions (Campbell, Chez, Queen, Barcelo, & Patron, 2000), which are obviously related to the day.

The individual day-dependent no-show predictions are obtained through a predictive technique. Then, they will be used as the input of an optimization problem, whose goal is to find the appointment slot and day which maximize the expected clinic profit. This is a difficult problem and the solution method may be hard to implement, but our analysis will lead to the development of an effective heuristic that can be easily implemented by clinics. We will conduct an extensive simulation study based on real data to show the merit of our approach.

Our contributions are summarized as follows.

We develop a dynamic appointment scheduling method given individual day-dependent no-show predictions. Ideally, this method can be used in real time to schedule appointment requests. To perform this task in acceptable times, we develop a novel application of column generation to solve a stochastic dynamic programming problem. Our computational results show that, in most cases, the problem is solved in less than a second.

Guided by an analysis of the schedules obtained by the column-generation method, we develop a heuristic scheduling policy that can be easily implemented by clinics and whose performance is only 2.9% worse than that of the column-generation method. Interestingly, this heuristic suggests to schedule predicted shows as soon as possible and predicted no-shows a few days in advance. It also suggests to schedule sequences of shows with one no-show inserted between them, so as to absorb any appointment delay. Our heuristic outperforms by up to 18.0% a popular scheduling technique: open access.

We analyze the impact of the prediction quality on the optimal clinic design. We found that if heavy overbooking is adopted, it is more important to correctly identify the showing appointments; conversely, if light overbooking (or no overbooking) is adopted, it is more important to identify the non-showing appointments. Perhaps more outstandingly, we will find that the policy of giving only same-day appointments should not be adopted if the prediction quality is sufficiently high. This result is unexpected, given the success of open access, which suggests to schedule appointments in the same day as they are requested.

We analyze the database of a large mental health center with a high no-show rate with the goal of accurately predicting the show outcome of appointments. Through a database exploration technique called propositionalization, we also identify the causes of no-shows, some of which are not reported by previous studies. Interestingly, we found that it is not only the characteristics of the patients that determine the show outcome, but also those of the provider.

In summary, this study shows how to integrate predictive analytics, optimization, and overbooking to schedule appointments in outpatient clinics. Our findings suggest that clinics with a high no-show rate can substantially increase their performance with little effort by adopting our method.

We extend previous works in the appointment scheduling literature that examine appointment scheduling rules and, in particular, in the research stream dealing with patient no-shows. In this research area, we consider two streams of research. In the former (Liu, Ziya, & Kulkarni, 2010; Qu, Rardin, Williams, & Willis, 2007; Robinson & Chen, 2010), in accordance with the findings of Galucci et al. (2005), no-shows probabilities decrease with the lead time to the appointment; that is, a patient scheduled for a same-day appointment is more likely to show than a patient scheduled for a next-day appointment. In the latter (Daggy et al., 2010; Glowacka et al., 2009; Huang & Zuniga, 2012; Muthuraman & Lawley, 2008; Zeng, Turkcan, Lin, & Lawley, 2010), no-show probabilities depend on the individual patients. Our work merges these streams by considering individual show probabilities that depend on the appointment day.

We further contribute to each body of work individually. With regards to the first body of work, we consider several day-dependent show attributes, and not only the lead time. We also generalize the Open Access model proposed by Robinson and Chen (2010) by relaxing their assumption that same-day and next-day appointments have a 100% show rate. Our generalization is motivated by the lower no-show rates observed in several studies, including this one and Liu et al. (2010). With regards to the second body of work, although those studies integrate no-show predictions into appointment scheduling, they do not analyze the impact of the prediction quality on the clinic performance and on the clinic’s optimal clinic configuration. By contrast, we determine under which combinations of prediction sensitivity and specificity it is better to overbook or to use a same-day scheduling horizon. Also, we use overbooking by slot compression (LaGanga & Lawrence, 2007b) rather than by the double booking strategy adopted by other existing works, because it arguably offers a fairer balance of patient wait time and provider utilization (LaGanga & Lawrence, 2007a).

We also contribute to the existing empirical work that attempts to understand the causes of no-shows. Existing works have attributed no-shows to several factors, such as lack of transportation, scheduling problems, oversleeping or forgetfulness, lack of child care (Campbell et al., 2000), patient age, gender, the number of previous no-shows (Shonick & Klein, 1977), appointment lead time (Bean & Talaga, 1995) and Medicaid status (Rust, Gallups, Clark, Jones, & Wilcox, 1995). These works analyze a carefully selected set of variables, obtained from data or through questionnaires, in the hope of finding causal relationships between them and the show outcome. By contrast, we build our variables by automatically exploring the database through the “propositionalization” approach proposed by Samorani, Laguna, DeLisle, and Weaver (2011). To the best of our knowledge, ours is the first application of propositionalization to appointment scheduling.

Finally, we make extensive use of cost-sensitive learning (Elkan, 2001) to increase our ability to predict shows and decrease our ability to predict no-shows or vice versa. In this way, the scheduling procedure favors maximizing shows or favors minimizing waiting time and overtime. This is the first example of cost-sensitive learning applied to appointment scheduling. Second, we employ association analysis (Tan, Steinbach, & Kumar, 2006) to study the output of our exact scheduling algorithm with the goal of defining a heuristic algorithm that is simple and explainable. Only Shaw, Park, and Raman (1992), who use decision trees to learn the dispatching rules adopted by a scheduling algorithm, apply analytics to derive a heuristic scheduling procedure. However, their problem is easier than ours, because while their set of scheduling decisions is composed of only four dispatching rules, ours is composed of one possible decision for each appointment slot and day.

We model the clinic as a single server, single stage system, which is suitable also for those clinics with multiple providers, each serving a different set of patients. We assume a constant service time equal to D (this assumption is relaxed in Appendix H), patient punctuality, and no walk-ins. Let σd
                      be the show rate corresponding to a lead time of d days. For notational convenience, let 
                        
                           
                              
                                 σ
                              
                              
                                 ¯
                              
                           
                        
                      be the average of the components of the vector 
                        σ
                     . Let N be the capacity of the clinic, i.e., the maximum number of patients that can be serviced in one clinic session without overbooking and without incurring overtime, so that the nominal length of the clinic session is ND. Under the overbooking policy of slot compression (LaGanga & Lawrence 2007b), appointments are scheduled more frequently than the capacity would allow, so that the clinic session is composed of 
                        
                           K
                           ⩾
                           N
                        
                      slots of length 
                        
                           T
                           =
                           ND
                           /
                           K
                           ⩽
                           D
                        
                     . For example, if the capacity is N
                     =9 and the service time is D
                     =40min, by shortening the slots to T
                     =30 the clinic can schedule up to K
                     =12 appointments, without double-booking any patient into appointment slots. While overbooking increases the number of patients serviced, it introduces clinic overtime and patient waiting time. The overtime cost includes the wages for the staff and the extra use of electricity and other resources, while the waiting time cost of a patient represents monetary and nonmonetary costs, such as the patient’s lost earnings while waiting or a loss of goodwill incurred by the clinic. We assume that appointment requests (or more simply, requests) arrive before the clinic session according to a Poisson process with parameter 
                        
                           λ
                        
                     . In Section 3, we show that our method can be easily extended to the case where requests may arrive during the clinic session. The scheduling problem consists of optimally scheduling the arriving request in an empty slot of any day d
                     ∊{0,1,…,
                     h
                     −1}, where d
                     =0 is the current day and h is the “scheduling horizon”. Alternatively, the request may be rejected. Rejections are allowed in some works in appointment scheduling (Muthuraman & Lawley, 2008; Schütz & Kolisch, 2012) and forbidden in other works (as in Robinson and Chen (2010)). For now, we allow rejections; in the experiments in Section 7, we forbid them.

Whenever a request arrives, an entity called “classifier” (Tan et al., 2006) predicts its show outcome (i.e., whether the appointment will result in a show or not) for each day of the horizon. Since we are more interested in the prediction quality obtained than in the prediction technique used, we use the term “classifier” to indicate any statistical, machine learning, or data mining technique that, given past appointment data, can predict the show outcomes of new unseen requests. For the moment, let us assume that a classifier has been “trained” with the clinic data and “has learned” to predict show outcomes of new requests. So, the classifier provides a predicted “show vector” 
                        s
                     , whose component sd
                     , for d
                     ∊{0,…,
                     h
                     −1}, is the predicted “show outcome” (show=1, no-show=0) expected if the arriving request is scheduled in day d (d
                     =0 is the current day). While previous studies consider show probabilities, we consider binary predictions (show or no-show) in order to keep the problem computationally tractable, as this approximation has been shown not to negatively affect the performance of the scheduling algorithm (Samorani & LaGanga, 2011). Given the show vector of the arriving request and given the information on the appointments already scheduled, an optimization algorithm schedules the request in a day and slot with the goal of maximizing the clinic profit, which is composed of one positive term (revenue) and two negative terms (waiting time cost and overtime cost). The clinic accrues a unit of revenue rd
                      for scheduling a patient in day d
                     ∊{0,…,
                     h
                     −1}. While our method allows arbitrary revenue vectors, in this paper we assume that a unit of revenue π is earned for each showing patient, which represents a monetary revenue (for for-profit clinics) or a measure of societal benefit (for non-profit clinics) earned for each patient seen. Furthermore, to encourage patient access, the clinic accrues a revenue 
                        
                           
                              
                                 π
                              
                              
                                 ̃
                              
                           
                        
                      for any appointment that is scheduled (i.e., not rejected). Finally, to reward short lead times, the revenue rd
                      earned in day d is decreased by a penalty δd proportional to the lead time. In summary, the revenue vector 
                        r
                      is built from the show outcome vector 
                        s
                      as follows:
                        
                           (1)
                           
                              
                                 
                                    r
                                 
                                 
                                    d
                                 
                              
                              =
                              
                                 
                                    π
                                 
                                 
                                    ̃
                                 
                              
                              -
                              d
                              δ
                              +
                              π
                              ·
                              
                                 
                                    s
                                 
                                 
                                    d
                                 
                              
                              ,
                              
                              ∀
                              d
                              =
                              0
                              ,
                              …
                              ,
                              h
                              -
                              1
                           
                        
                     
                  

The two costs are waiting time cost and overtime cost. Unlike previous works, where the waiting time cost is equal for all patients, we assume that each patient belongs to a waiting cost category, which is characterized by a waiting time cost ωc
                      per unit of waiting time. By assigning priorities, we try to minimize the waiting time of certain subsets of patients, such as, for instance, very sick people, children, or those who complained in the past about excessive waiting times. Finally, an overtime cost τ is paid for each unit of overtime. The notation is reported in Table 1
                     .

Extending the model proposed by LaGanga and Lawrence (2007b), whose objective was to maximize the clinic profit in one single day, here the objective is to maximize the clinic profit of the next h
                     days:
                        
                           (2)
                           
                              P
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       d
                                       =
                                       0
                                       …
                                       h
                                       -
                                       1
                                    
                                 
                              
                              P
                              (
                              i
                              )
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       d
                                       =
                                       0
                                       …
                                       h
                                       -
                                       1
                                    
                                 
                              
                              [
                              
                                 
                                    R
                                 
                                 
                                    d
                                 
                              
                              -
                              
                                 
                                    O
                                 
                                 
                                    d
                                 
                              
                              -
                              
                                 
                                    W
                                 
                                 
                                    d
                                 
                              
                              ]
                           
                        
                     
                     Rd
                      is the sum of the predicted revenues rd
                      made in day d, Od
                      is the overtime cost experienced by the clinic in day d, and Wd
                      is the average waiting time cost experienced by the showing patients in day d, which evaluates the waiting time that a showing patient expects. The waiting time is the difference between the service start time and the appointment time; the overtime is the difference between the end time of the last appointment and the clinic nominal end time ND. The formulae for the overtime Od
                      and the waiting time Wd
                      are straightforward but lengthy to compute and are omitted.

We now describe the solution method to schedule the current request q. We start by generating S scenarios to capture the uncertainty around the arrival of future appointment requests (or “future requests”). Each scenario s is described by h sets 
                        
                           
                              
                                 M
                              
                              
                                 s
                              
                           
                           (
                           v
                           )
                        
                     , which include the future requests that are forecasted to arrive during day v (v
                     =0,…,
                     h
                     −1) under scenario s. Note that these future requests are fictitious and should be generated according to historical data (see Section 4). A future request belonging to 
                        
                           
                              
                                 M
                              
                              
                                 s
                              
                           
                           (
                           v
                           )
                        
                      is characterized by (1) its waiting time cost category and by (2) its predicted show vector. The waiting time cost category determines the waiting time cost per time unit; the predicted show vector is a binary vector of length h
                     −
                     v, whose j-th component indicates whether the appointment request is predicted to show if scheduled in day v
                     +
                     j
                     −1 (0: predicted no-show. 1: predicted show). Our definition of predicted show vector guarantees that future requests can be scheduled only on or after their arrival day. For example, let h
                     =5. If under scenario s a request arrives on day 1, this request will belong to 
                        
                           
                              
                                 M
                              
                              
                                 s
                              
                           
                           (
                           1
                           )
                        
                      and will be characterized by a binary vector of length 4. If the request is predicted to show in days 1 and 3 and not to show in days 2 and 4, then its predicted show vector will be [1,0,1,0]. Let 
                        
                           
                              
                                 F
                              
                              
                                 s
                              
                           
                           (
                           d
                           )
                           =
                           
                              
                                 M
                              
                              
                                 s
                              
                           
                           (
                           0
                           )
                           ∪
                           …
                           ∪
                           
                              
                                 M
                              
                              
                                 s
                              
                           
                           (
                           d
                           )
                        
                      be the set of future requests that can be scheduled in day d under scenario s.

After generating the scenarios, we solve a stochastic optimization problem that simultaneously schedules the future requests and q to the empty slots of the existing schedule in order to maximize (2), while ensuring that q is scheduled in the same slot (or rejected) under all scenarios, in order to reach a unique solution. Obviously, since the future requests are fictitious, the only request that will be actually scheduled (or rejected) is q. The scheduling decision is determined by the variables q(d,
                     j)∊{0,1}, which indicate whether q is scheduled in slot j (j
                     =0,…,
                     K) of day d (d
                     =0,…,
                     h
                     −1). If q(d,
                     j)=1, where j
                     ∊{1,…,
                     K}, then q is scheduled in the j-th slot of day d, whereas if q(d,0)=1, then q is not scheduled in day d. If q(d,0)=1∀d
                     =0,…,
                     h
                     −1, then q is rejected.

To keep the number of constraints low, we tackle this problem with column generation (Barnhart, Johnson, Nemhauser, Savelsbergh, & Vance, 1998; Desrosiers & Lübbecke, 2005; Sauré, Patrick, Tyldesley, & Puterman, 2012). We introduce the variables xs
                     (i,
                     d)∊{0,1} to indicate whether the future request 
                        
                           i
                           ∈
                           
                              
                                 F
                              
                              
                                 s
                              
                           
                           (
                           d
                           )
                        
                      is assigned to day d under scenario s. Although the slot assigned to each future request is not explicitly considered, this information is implicitly determined once we also know the slot where q is scheduled. For example, suppose that after considering existing appointment reservations and after scheduling q, the “partial” schedule of day d results in the sequence SN_S_S (show, no-show, empty slot, show, empty slot, show). If the xs
                     (i,
                     d) variables indicate that the future requests scheduled in day d under scenario s are predicted to be N (a no-show) and S (a show), then the “complete” schedule of day d under scenario s must be SNSSNS. The alternative complete sequence, SNNSSS, obtained by switching the slot assigned to S and N, is not optimal, as it leads to a longer waiting time and overtime than SNSSNS. Note that a complete sequence determines the patients’ waiting times, the clinic overtime, and, therefore, the clinic profit. For example, assuming D
                     =30 and T
                     =20, in the sequence SSNSSS, the patients in the 1st and 4th slot wait 0min, the ones in the 2nd and the 5th slot wait 10min, the 6th patient waits 20min, and the overtime is 30min. In summary, to determine the schedule obtained and the clinic profit made in day d under scenario s, we need to know the slot j assigned to q (if j
                     =0, q is not scheduled in d) and the set of future requests (but not their order) assigned to d under s. So, we introduce the column variables ys
                     (d,
                     j,
                     A)∊{0,1}, which are equal to 1 if and only if:
                        
                           1.
                           
                              q is scheduled in slot j of day d, that is, q(d,
                              j)=1 (j
                              =0,…,
                              K; d
                              =0,…,
                              h
                              −1).

The future requests in set 
                                 
                                    A
                                    ⊆
                                    
                                       
                                          F
                                       
                                       
                                          s
                                       
                                    
                                    (
                                    d
                                    )
                                 
                               are scheduled in day d under scenario s (s
                              =1,…,
                              S).

Let us
                     (d,
                     j,
                     A) be the clinic profit made in day d under scenario s if ys
                     (d,
                     j,
                     A)=1. In our notation, the set A is an index over the subsets of 
                        
                           
                              
                                 F
                              
                              
                                 s
                              
                           
                           (
                           d
                           )
                        
                      including ∅. That is, us
                     (d,
                     j,
                     A) is the profit made in day d under scenario s assuming that (1) q is scheduled in slot j of day d and that (2) the future requests that belong to set 
                        
                           A
                           ⊆
                           
                              
                                 F
                              
                              
                                 s
                              
                           
                           (
                           d
                           )
                        
                      are scheduled in the other slots of day d. This profit is known by finding the optimal way to assign the requests in A to the remaining slots of day d, as explained in Appendix A. Since we consider K
                     +1 slots and h
                     days, the entire model includes 
                        
                           (
                           K
                           +
                           1
                           )
                           h
                           
                              
                                 2
                              
                              
                                 |
                                 
                                    
                                       F
                                    
                                    
                                       s
                                    
                                 
                                 (
                                 d
                                 )
                                 |
                              
                           
                        
                      column variables for each scenario s. The column-generation (CG) formulation is the following:
                        
                           
                              (
                              CG
                              )
                              
                              
                                 max
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       s
                                       ∈
                                       S
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       d
                                       =
                                       0
                                       …
                                       h
                                       -
                                       1
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       =
                                       0
                                       …
                                       K
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       A
                                       ⊆
                                       
                                          
                                             F
                                          
                                          
                                             s
                                          
                                       
                                       (
                                       d
                                       )
                                    
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    s
                                 
                              
                              (
                              d
                              ,
                              
                              j
                              ,
                              
                              A
                              )
                              ·
                              
                                 
                                    u
                                 
                                 
                                    s
                                 
                              
                              (
                              d
                              ,
                              
                              j
                              ,
                              
                              A
                              )
                           
                        
                     s.t.
                        
                           (3)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       
                                          
                                             d
                                          
                                          
                                             ′
                                          
                                       
                                       =
                                       d
                                       …
                                       h
                                       -
                                       1
                                    
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    s
                                 
                              
                              (
                              i
                              ,
                              
                                 
                                    d
                                 
                                 
                                    ′
                                 
                              
                              )
                              ⩽
                              1
                              ∀
                              
                              s
                              ∈
                              S
                              ,
                              
                              d
                              =
                              0
                              ,
                              …
                              ,
                              h
                              -
                              1
                              ,
                              
                              i
                              ∈
                              
                                 
                                    M
                                 
                                 
                                    s
                                 
                              
                              (
                              d
                              )
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       d
                                       =
                                       0
                                       …
                                       h
                                       -
                                       1
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       =
                                       1
                                       …
                                       K
                                    
                                 
                              
                              q
                              (
                              d
                              ,
                              
                              j
                              )
                              ⩽
                              1
                           
                        
                     
                     
                        
                           (5)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       =
                                       0
                                       …
                                       K
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       A
                                       ⊆
                                       
                                          
                                             F
                                          
                                          
                                             s
                                          
                                       
                                       (
                                       d
                                       )
                                    
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    s
                                 
                              
                              (
                              d
                              ,
                              j
                              ,
                              A
                              )
                              =
                              1
                              
                              ∀
                              
                              s
                              ∈
                              S
                              ,
                              
                              d
                              =
                              0
                              ,
                              …
                              ,
                              h
                              -
                              1
                           
                        
                     
                     
                        
                           (6)
                           
                              
                                 
                                    x
                                 
                                 
                                    s
                                 
                              
                              (
                              i
                              ,
                              d
                              )
                              -
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       =
                                       0
                                       …
                                       K
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       
                                          
                                             
                                                A
                                                ⊆
                                                
                                                   
                                                      F
                                                   
                                                   
                                                      s
                                                   
                                                
                                                (
                                                d
                                                )
                                             
                                             
                                                s
                                                .
                                                t
                                                .
                                                
                                                i
                                                
                                                ∈
                                                
                                                A
                                             
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    s
                                 
                              
                              (
                              d
                              ,
                              j
                              ,
                              A
                              )
                              =
                              0
                              
                              ∀
                              
                              s
                              ∈
                              S
                              ,
                              
                              d
                              =
                              0
                              ,
                              …
                              ,
                              h
                              -
                              1
                              ,
                              
                              i
                              ∈
                              
                                 
                                    F
                                 
                                 
                                    s
                                 
                              
                              (
                              d
                              )
                           
                        
                     
                     
                        
                           (7)
                           
                              q
                              (
                              d
                              ,
                              j
                              )
                              -
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       A
                                       ⊆
                                       
                                          
                                             F
                                          
                                          
                                             s
                                          
                                       
                                       (
                                       d
                                       )
                                    
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    s
                                 
                              
                              (
                              d
                              ,
                              j
                              ,
                              A
                              )
                              =
                              0
                              
                              ∀
                              
                              s
                              ∈
                              S
                              ,
                              
                              d
                              =
                              0
                              ,
                              …
                              ,
                              h
                              -
                              1
                              ,
                              
                              j
                              =
                              0
                              ,
                              …
                              ,
                              K
                           
                        
                     
                     
                        
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             
                                                x
                                             
                                             
                                                s
                                             
                                          
                                          (
                                          i
                                          ,
                                          d
                                          )
                                          ∈
                                          {
                                          0
                                          ,
                                          1
                                          }
                                          ∀
                                          
                                          s
                                          ∈
                                          S
                                          ,
                                          
                                          d
                                          =
                                          0
                                          ,
                                          …
                                          ,
                                          h
                                          -
                                          1
                                          ,
                                          
                                          i
                                          ∈
                                          
                                             
                                                F
                                             
                                             
                                                s
                                             
                                          
                                          (
                                          d
                                          )
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             
                                                y
                                             
                                             
                                                s
                                             
                                          
                                          (
                                          d
                                          ,
                                          j
                                          ,
                                          A
                                          )
                                          ∈
                                          {
                                          0
                                          ,
                                          1
                                          }
                                          ∀
                                          
                                          s
                                          ∈
                                          S
                                          ,
                                          
                                          d
                                          =
                                          0
                                          ,
                                          …
                                          ,
                                          h
                                          -
                                          1
                                          ,
                                          
                                          j
                                          =
                                          0
                                          ,
                                          …
                                          ,
                                          K
                                          ,
                                          
                                          A
                                          ⊆
                                          
                                             
                                                F
                                             
                                             
                                                s
                                             
                                          
                                          (
                                          d
                                          )
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          q
                                          (
                                          d
                                          ,
                                          j
                                          )
                                          ∈
                                          {
                                          0
                                          ,
                                          1
                                          }
                                          ∀
                                          
                                          d
                                          =
                                          0
                                          ,
                                          …
                                          ,
                                          h
                                          -
                                          1
                                          ,
                                          
                                          j
                                          =
                                          0
                                          ,
                                          …
                                          ,
                                          K
                                       
                                    
                                 
                              
                           
                        
                     The objective (CG) is to maximize the expected clinic profit over the next h
                     days among the considered scenarios. Since the generated scenarios have the same realization probability, they have the same weight in the objective function. Constraint set (3) ensures that any request is assigned to at most one of the days that follow its arrival. Constraint (4) enforces q to be assigned to at most one slot. Constraint set (5) forces the selection of exactly one set 
                        
                           A
                           ⊆
                           
                              
                                 F
                              
                              
                                 s
                              
                           
                           (
                           d
                           )
                        
                      for each day under each scenario. Constraint set (6) sets xs
                     (i,
                     d) to 1 if and only if the set 
                        
                           A
                           ⊆
                           
                              
                                 F
                              
                              
                                 s
                              
                           
                           (
                           d
                           )
                        
                     , scheduled in day d under scenario s, contains i. Constraint set (7) assigns q to slot j of day d if and only if the column variable selected for day d and scenario s assigns q to the j-th slot. Appendix A describes the column generation procedure adopted to efficiently solve this problem and reports an extensive numerical example. In our experiments, the average time taken to schedule the current request is 0.19s and never exceeded 1s. The average gap between the optimal solution of the LP relaxation and the integer solution is 3.7% with standard deviation=2.8%.

To allow patients’ preferences on the appointment time is sufficient to include simple constraints on the variables q(d,
                     j). Similar constraints can be used to allow requests to arrive during the clinic, in which case they cannot be scheduled to past slots. It is also straightforward to forbid request rejections by replacing the inequality sign of (4) with an equality sign, so that the current request q must be scheduled in exactly one slot, and by slightly modifying the setup of the column generation procedure. Our experiments suggest that the case where rejections are forbidden is much harder to solve and may require up to 71s of computation time for K
                     =12 and h
                     =5. The reason is that when rejections are not allowed, our model does not have the option to reject appointment requests that “do not fit” with the current schedule needs.

Note that our solution method is myopic, because we assume that the fictitious appointment requests must be scheduled within h
                     days from today, regardless of their arrival day. For example, assume h
                     =5. If a fictitious request arrives in day 2, our model will schedule it in day 2, 3, or 4, even if the request could theoretically be scheduled in day 5 or 6 too. To make the approach less myopic, we could consider a longer horizon, but doing so will make it computationally impractical to solve the problem. Despite this shortcoming, our approach is substantially more general than most of the literature on no-shows (Robinson & Chen, 2010; LaGanga & Lawrence, 2007b; Glowacka et al., 2009; Muthuraman & Lawley, 2008; Zeng et al., 2010), which considers only one day. In our experiments, we use a rolling-horizon approach (Rohleder & Klassen, 2002) where the scheduling horizon shifts through time. A more formal approach would be to model the problem as a stochastic process whose objective is to maximize the long-run average profit or, possibly, the total discounted profit over an infinite horizon. However, Alden and Smith (1992) show that the performances of the two approaches converge for a sufficiently long scheduling horizon. Even by casting the problem as a Markov decision process (Puterman, 1994) and tackling it through backward induction, we could solve within 1h only small (h
                     =1,
                     K
                     =3) and simplified instances of the problem, where revenues and costs were the same for all appointments. These considerations lead to our preference for our myopic objective (2). Our results in Section 7, however, suggest that the solutions we found are close to optimal.

Finally, note that our model (CG) would not change if our assumptions (constant service times, punctual patients, etc.) were relaxed. However, solving the subproblem would require a different solution method from the one presented in Appendix A.

We evaluate the performance of the scheduling procedure through a rolling-horizon simulation, where requests arrive according to a Poisson process with parameter 
                        
                           λ
                        
                      and need to be scheduled in one of the following h clinic sessions. We consider two categories of patients, whose waiting time costs are 
                        
                           
                              
                                 ω
                              
                              
                                 1
                              
                           
                           =
                           0.5
                           
                              
                                 ω
                              
                              
                                 ¯
                              
                           
                        
                      and 
                        
                           
                              
                                 ω
                              
                              
                                 2
                              
                           
                           =
                           1.5
                           
                              
                                 ω
                              
                              
                                 ¯
                              
                           
                        
                     , and the average waiting cost 
                        
                           
                              
                                 ω
                              
                              
                                 ¯
                              
                           
                        
                      is a parameter of the simulation. An arriving request is equally likely to belong to category 1 or 2. We fix the clinic capacity to N
                     =8, which is a realistic value for afternoon-only clinics if the service time D is, for example, 30min.

In our simulation, requests are also characterized by their realized show vector, which specifies whether the request actually shows or not in day d
                     ∊{0,…v,
                     h
                     −1}. Unlike the predicted show vector, which is revealed upon the request’s arrival and guides the scheduling decision, the realized show vector is revealed only when the appointment takes place (or results in a no-show) and is used to compute the realized clinic profit. The realized show vector is randomly generated by setting the d-th component to 1 with a probability equal to σd
                     , the show rate for day d.

We generate the realized show vectors randomly rather than from real data because the show outcome of a real appointment is known for only one day of the horizon, that is, the day in which it was scheduled; but we cannot know if the same appointment would have had the same show outcome if scheduled in another day. The “realized revenue” vector is built from the realized show vector using (1). In our experiments, σd
                      is set according to Table 2
                     .

The second row (“Observed”) reports the show rates observed at the health center under study together with their average (.76). Our analysis, though, is not limited to these values, but also considers a case where the show rates are lower and a case where they are higher. The high show rates are computed by multiplying the observed show rates by a factor such that the show rate for same-day appointments is equal to 1.00. The low show rates are computed by dividing the show rates by the factor that results in an average show rate of .65. In this way, the three average show rates 
                        
                           
                              
                                 σ
                              
                              
                                 ¯
                              
                           
                           =
                           .
                           65
                        
                     , 
                        
                           
                              
                                 σ
                              
                              
                                 ¯
                              
                           
                           =
                           .
                           76
                        
                     , and 
                        
                           
                              
                                 σ
                              
                              
                                 ¯
                              
                           
                           =
                           .
                           87
                        
                      are equidistant.

The generation of the predicted show vector depends on the prediction quality. We measure the prediction quality by its sensitivity sn, which is the proportion of correctly predicted no-shows, and its specificity sp, which is the proportion of correctly predicted shows. If a component of the realized show vector is a “show”, the corresponding element in the predicted show vector is set to “show” with probability sp and to “no-show” with probability 1−
                     sp. Similarly, components of the realized show vector that are “no-shows” are classified as “no-shows” with probability sn and to “show” with probability 1−
                     sn. The predicted revenue vector is built from the predicted show vector using (1).

We prefer using sensitivity and specificity rather than the better known measure “accuracy” (i.e., the proportion of correctly predicted requests) because they can be controlled to some extent through a technique called cost-sensitive learning, which consists of varying the weight of misclassifying shows and no-shows, so that the rule favors one type of prediction or the other. We show that shifting the prediction quality towards sensitivity or specificity causes favoring the objective of maximizing revenue or that of minimizing costs, respectively. Alternatively, the prediction quality could be expressed in terms of positive predictive value (i.e., the probability that a no-show prediction is correct) and negative predictive value (i.e., the probability that a show prediction is correct). Appendix B reports the positive predictive value and the negative predictive value corresponding to the sensitivity and specificity values used throughout our experiments. Under each scenario, the future requests’ arrival rate is set to the real arrival rate 
                        
                           λ
                        
                     , and the characteristics of each request are generated in the same way as the real requests, as described above. Practically, the requests arriving under the scenarios are different from the ones arriving during the simulation, but their characteristics follow the same patterns. We set the number of scenarios to S
                     =10. In Appendix C, we assess the impact of increasing this number. The results show that the profit only marginally improves by increasing the number of scenarios.

At the end of each day d of the simulation, we consider the realized show outcome and revenue of the requests scheduled in d, and collect the following statistics: average clinic profit, average waiting time, average overtime, and average number of shows. The results of the first h
                     days of the simulation are excluded because during this start-up period the schedule is mostly empty; similarly, the last h
                     days are excluded because the scheduling problem solved may have a shorter scheduling horizon than h.

We measure the impact of prediction quality through a full factorial experiment, where the simulation procedure is executed for the different parameter values reported in Table 3
                     .

Some simulation parameters can be fixed or controlled by the clinic, while others cannot. The controllable parameters are the scheduling horizon h, the number of slots K, the sensitivity sn and the specificity sp. The non-controllable parameters are the requests’ arrival rate 
                        
                           λ
                        
                     , the average show rate vector 
                        σ
                     , the profit for scheduling a show π, the overtime cost per time unit τ, the waiting time cost vector 
                        ω
                     . We use 3 levels for the controllable factors h, sn, and sp, which have not been studied in detail, and 2 levels for the other factors, which have been studied extensively by LaGanga and Lawrence (2007b). For now, we consider a scheduling horizon of up to 5days; in Sections 6 and 7, we also consider longer ones. The two show rate vectors considered are those corresponding to row 1 (
                        
                           
                              
                                 σ
                              
                              
                                 ¯
                              
                           
                           =
                           .
                           65
                        
                     ) and 3 (
                        
                           
                              
                                 σ
                              
                              
                                 ¯
                              
                           
                           =
                           .
                           87
                        
                     ) of Table 2. Here, 
                        
                           
                              
                                 π
                              
                              
                                 ̃
                              
                           
                        
                      is set to 0.05 and δ to 0.005. These small values ensure that 
                        
                           
                              
                                 π
                              
                              
                                 ̃
                              
                           
                           ≪
                           π
                        
                     , so that the revenue made for timely scheduling is secondary to that made for seeing patients. For every combination of parameters (26
                     ×33
                     =1728 combinations), we run a 100-day long simulation and record the measures of clinic performance. The same random seed is used, so that the request characteristics are the same for any parameter combination.

All main effects and the majority of the 2-factor interactions are significant at α
                     =0.01. However, here we focus only on the impact of the prediction quality (sn and sp) on clinic performance (Fig. 1
                     ) and its interaction with other controllable parameters (Fig. 2
                     ). In our discussion, we consider the impact on overtime but not that on waiting time because they are very similar.

Unsurprisingly, both sn and sp are positively correlated with the clinic profit (bars and labels in Fig. 1). However, their impact on shows (continuous line) and overtime (dashed line) is different: while sensitivity is positively correlated with shows and overtime (Fig. 1a), specificity is not (Fig. 1b). To understand why, let us consider, for example, the case of high sensitivity and low specificity. Under these settings, when a request is predicted to be a “show”, it rarely happens to be a “no-show” (i.e., the prediction is correct), because the “no-shows” are mostly classified correctly. Conversely, when a request is predicted to be a “no-show”, this prediction is more likely to be wrong (i.e., the request is actually a show). Since the procedure, guided by the predictions, aims at optimally balancing shows and no-shows (see Section 6), this case may result in a greater-than-optimal number of shows, which likely leads to overtime (Fig. 1a). This example intuitively suggests that high sensitivity tends to favor the objective of maximizing the revenue over the objective of minimizing the overbooking costs. By the same token, high specificity tends to favor the objective of minimizing the overbooking costs over that of maximizing the revenue, which results in a low number of shows and low overtime (Fig. 1b).

Since sensitivity is positively correlated with the number of shows and overtime, a high sensitivity is beneficial when the average show rate 
                        
                           
                              
                                 σ
                              
                              
                                 ¯
                              
                           
                        
                      is low, when τ is low, or π is large. Interestingly, as suggested by Fig. 2a, a high sensitivity is more beneficial if combined with light overbooking (K
                     =9) than if combined with heavy overbooking (K
                     =12), in which case the number of shows is more likely to exceed the capacity, causing long overtime. On the other hand, specificity is negatively correlated with overtime, but results in a small number of shows. So, a high specificity is beneficial if τ, 
                        
                           
                              
                                 σ
                              
                              
                                 ¯
                              
                           
                        
                     , or 
                        
                           
                              
                                 ω
                              
                              
                                 ¯
                              
                           
                        
                      are large, or if π is low. Unlike high sensitivity, high specificity is more beneficial if combined with heavy overbooking (K
                     =12) than if combined with light overbooking (K
                     =9), in which case there is little advantage in attempting to limit overtime (Fig. 2c).

Finally, high sensitivity and high specificity make the scheduling horizon h positively correlated with the profit. Fig. 2b and d suggest that, when sn or sp are high, the profit increases when h increases. In fact, same-day scheduling (h
                     =1) is the best strategy only when sn
                     =0.4 or sp
                     =0.4; otherwise, larger values of h are preferred. We attribute the benefit of a longer horizon to the increased flexibility in choosing the appointment day that best suits the appointment’s predicted show outcome: if, for example, a patient is predicted to show in a day and not to show in another, the scheduling algorithm may choose whether it is better to schedule a show in the first day or a no-show in the other, given the current schedule of both days. Obviously, this flexibility is useless if the prediction quality is low.

Our results suggest two important guidelines for clinics. First, same-day scheduling is the best policy only if no effort is made to predict if patients show or not, i.e., if no-show predictions are not used; otherwise, it is the worst policy. Second, if a policy of heavy overbooking is adopted, the prediction quality should be shifted towards high specificity; conversely, if light overbooking is adopted, the prediction quality should be shifted towards high sensitivity. This second finding may be also used to set the optimal level of overbooking for given sensitivity and specificity values: if the sensitivity is high, then little or no overbooking should be adopted, whereas if the specificity is high, a heavy overbooking should be adopted. More in general, since both overbooking level and prediction quality can be manipulated, these decisions need to be taken simultaneously. Next, we develop a simple but effective heuristic appointment scheduling procedure.

We now define a heuristic procedure that is easier to implement than the column-generation approach (CG) developed in Section 3. An analysis of the schedules obtained suggests that the CG procedure tries to achieve an optimal “target sequence”, in which no-shows are scheduled either between sequences of shows, so as to absorb the waiting time accumulated, or in the last slot, so as to avoid overtime.


                     Table 4
                      shows the sequences targeted by the algorithm for different values of N and K under deterministic and stochastic service times.

Under deterministic service times (top part of Table 4), it is easy to see that whenever we are overbooking (i.e., K
                     >
                     N), the last slot is an N-slot, so as to limit the overtime, and the other N-slots are strategically positioned to limit long sequences of S-slots, so as to avoid long waiting times. Note that the sequences in Table 4 depend on the revenue made per patient seen, the waiting time cost, and overtime cost, and may change if these parameters change. For example, if the waiting time cost is 0, the target sequence would have all the S-slots at the beginning and all the N-slots at the end (e.g., SSSSSSNN), in an effort to minimize overtime cost. The bottom part of Table 4 reports the target sequences if service times are distributed according to a lognormal distribution with coefficient of variation 0.325 (as in Cayirli, Veral, & Rosen 2006). To find the best schedule for stochastic service times under each parameter configuration, we enumerated all possible (2
                        K
                     ) sequences and selected the best one using the average clinic profit obtained through 1000 simulations. Interestingly, while under deterministic service times it is optimal to schedule N patients, under stochastic service times it is optimal to schedule N
                     −1 patients. This is to avoid long sequences of showing patients, which could potentially result in long waits, should many of these appointments take longer than expected. In the rest of the paper, we continue to use deterministic service times, and leave the analysis of the stochastic case to future studies.

A further analysis, whose details are reported in Appendix D, shows that S-slots are almost 6 times more likely to be assigned to same-day appointments than N-slots. This suggests that predicted shows tend to be scheduled at the last moment, while predicted no-shows tend to be scheduled farther out. This counterintuitive scheduling decision is driven by the need to schedule shows in S-slots and no-shows in N-slots: to maximize the chance of obtaining a show, it is advisable to schedule the patient at the last moment, while to maximize the chance of obtaining a no-show, it is advisable to schedule the patient a few days in advance. We also executed experiments with a much longer scheduling horizon (h
                     =30), and noted that slots are allocated according to the same logic. Guided by these findings, we developed the heuristic procedure of Fig. 3
                     .

In the case where rejections are allowed, the heuristic procedure leads to a clinic profit which is only 2.9% smaller than that obtained by the CG procedure; in the case where rejections are not allowed, it leads to a clinic profit which is only 2.1% smaller than that obtained by the CG procedure (modified to forbid rejections). Thus, a clinic can use this heuristic rather than solving CG at the cost of a modest decrease in performance. Note also that our heuristic procedure can be easily extended to the stochastic service time case: to do so, it is sufficient to set the input target sequence as one of the target sequences in the bottom part of Table 4.

The clinic profit of our heuristic heavily depends on the sensitivity sn and specificity sp of the classifier. Using HP(sn,
                     sp) as shorthand for the heuristic procedure with the sensitivity and specificity as parameters, we observe the following. If sn
                     =0 and sp
                     =1, all requests are predicted to show. Therefore, the current request is scheduled in the earliest available S-slot (step 1 in Fig. 3). If there is no S-slot is open, the request is most likely scheduled in the earliest available N-slot (step 3). Less likely, if all slots within h
                     days are already taken, the request is scheduled in the earliest available slot beyond h. In other words, HP(0,1) attempts to assign the S-slots first. This configuration represents the “lower bound” policy of our heuristic because no effort is made to predict show outcomes. The configuration HP(1,1), on the other hand, represents the “upper bound” policy, where all show outcomes are correctly predicted.

In this section, we estimate the performance that our heuristic procedure obtains given the data set of the health center under study. First, we measure the sensitivity and specificity attainable on their data set. Then, we compare our heuristic procedure to an open access policy, which attempts to maximize the show rate by scheduling only same-day or next-day appointments. To generalize our results, we perform this comparison for a variety of show rates.

The center’s database includes the details of about 50,000 appointments and 6700 patients. All protected health information was removed or coded to protect patients’ rights to privacy. Fig. 4
                         shows the Entity–Relationship diagram of the database (Chen, 1976). Here, each rectangle corresponds to a table in the database, and contains the list of columns, or attributes, of the table (identifiers are not included for clarity); each arrow A
                        →
                        B represents the relationship between table A and table B, that is, the correspondence of one or more rows of B to each row of A. The number of rows of B involved is called cardinality and it is reported next to each arrow. For example, each appointment is performed by exactly one staff member and involves exactly one patient. However, each patient may have any number (0–N) of appointments. Each patient is periodically evaluated through two types of outcome indicators proprietary to the health center under consideration: the Recovery Marker Inventory (RMI) and Consumer Recovery Measures (CRM) (Olmos et al., 2012). RMI scores are evaluations of patient progress, assessed by the provider, on different aspects of the patient’s life, such as his/her job, housing situation, and so forth. On the other hand, CRM scores are self-evaluations of the patients, who are asked how they cope with symptoms, what their level of hope is, and so on. At any given point, a patient may have an arbitrary number of RMI or CRM evaluations, but each evaluation is relative to just one patient.

In order to use any classification technique, we need to build a “mining table”, which has one row for each appointment and one column for each characteristic of the appointment. One last column is the target attribute, which is the one that we want to predict, i.e., the show outcome. To achieve a good prediction quality, the attributes of the mining table should contain as much information as possible. They should also include information that is not in the table “Appointment”, such as, for example, the demographics of the patient associated with the appointment, a summary of his/her RMI and CRM scores. Although these attributes could be constructed manually by a domain expert, an automatic way to do this has been proposed by Samorani et al. (2011), who developed a propositionalization procedure to attach to the mining table information from the other tables. By executing this procedure on the appointment data set, we obtain a mining table with 3474 attributes. Then, in order to estimate the prediction quality, we use the several statistical, machine learning, and data mining algorithms provided by Weka (Hall et al., 2009), an open source data mining software which can be downloaded from http://www.cs.waikato.ac.nz/ml/weka/downloading.html (accessed on February 21, 2013). By using cost-sensitive classification and a Bayesian classifier (Tan et al., 2006), we can obtain any of the following prediction qualities (sn,
                        sp): (0.7,0.7), (0.9,0.5), (0.6,0.8). The details of the propositionalization procedure and of the data mining process are reported in Appendix E.

Propositionalization not only increases prediction quality but it also allows new knowledge to emerge. Among the attributes it generates, the best predictors of no-show include the patient identification (coded to protect privacy and confidentiality), his/her no-show history, the lead time, and other information on the previous appointments held by the staff, such as the number of times they performed particular services such as individual or group therapy, case management and medication management, and the number of times they were in a particular location such as the regular clinic, specialized clinic, or community setting. Interestingly, it is not only the patient’s service history and characteristics that matter but also those of the provider. Such attributes could be related to differences in practice models between providers. Such differences could be due to providers’ assignments on different types of teams. For example, a high portion of services delivered in the community and more tailored to patients’ individualized needs could result in higher show rates for providers working in such teams than for those working in more standardized office-based teams. In addition, some providers specialize in particular populations of patients. For example, a clinician who works mostly with court-ordered patients might have higher show rates than other clinicians because there are legal consequences for those patients who do not show up. Or, if a clinician has been working for a long time with such patients, the clinician may have learned through experience how to be effective in engaging them so they return for their ongoing appointments rather than no-show.

In this section, we compare our heuristic to the open access policy proposed by Robinson and Chen (2010), under which appointments are scheduled in the same day of request or, at the latest, in the next one. They are scheduled sequentially, in K
                        =
                        N consecutive slots whose length T is equal to the service time D. This setting corresponds to “no overbooking”. If the number of patients scheduled for today exceeds the capacity N, up to f of these extra requests are deferred to tomorrow, where f is the deferral threshold and is less than or equal to N. If the number of deferrals exceeds f, the extra requests are scheduled today after hours, i.e., in overtime. When f
                        =0, only same-day appointments are allowed. Their model assumes that same-day and next-day appointments surely show up, which is not the case in the clinic under study (see Table 2). We then extend the model by Robinson and Chen (2010) in order to account for show rates different from 1. Let σ
                        0 be the show rate for same-day appointments and σ
                        1 the show rate for next-day appointments. Let qi
                         be the probability that i patients are deferred, which can be computed by solving the system of transition equations relative to a Markov process, as described in detail by Robinson and Chen (2010). The expected revenue obtained by open access is equal to:
                           
                              (8)
                              
                                 RV
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          0
                                       
                                       
                                          f
                                       
                                    
                                 
                                 
                                    
                                       q
                                    
                                    
                                       j
                                    
                                 
                                 [
                                 j
                                 ·
                                 
                                    
                                       π
                                    
                                    
                                       ̃
                                    
                                 
                                 -
                                 δ
                                 +
                                 π
                                 
                                    
                                       σ
                                    
                                    
                                       1
                                    
                                 
                                 ]
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          0
                                       
                                       
                                          N
                                          +
                                          f
                                          -
                                          j
                                       
                                    
                                 
                                 
                                    min
                                 
                                 (
                                 i
                                 ,
                                 N
                                 -
                                 j
                                 )
                                 ·
                                 p
                                 (
                                 i
                                 |
                                 λ
                                 )
                                 ·
                                 [
                                 
                                    
                                       π
                                    
                                    
                                       ̃
                                    
                                 
                                 +
                                 π
                                 
                                    
                                       σ
                                    
                                    
                                       0
                                    
                                 
                                 ]
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          N
                                          -
                                          j
                                          +
                                          f
                                          +
                                          1
                                       
                                       
                                          ∞
                                       
                                    
                                 
                                 (
                                 i
                                 -
                                 f
                                 )
                                 ·
                                 p
                                 (
                                 i
                                 |
                                 λ
                                 )
                                 ·
                                 [
                                 
                                    
                                       π
                                    
                                    
                                       ̃
                                    
                                 
                                 +
                                 π
                                 
                                    
                                       σ
                                    
                                    
                                       0
                                    
                                 
                                 ]
                                 ]
                              
                           
                        The derivation of (8) is reported in Appendix F.

We are now going to compare the performance of open access to that of our heuristic policy. In the no-rejection case, the comparison between two scheduling policies is performed, as suggested by Robinson and Chen (2010), not only by ensuring that the two policies have the same capacity N, but also by ensuring that the workloads (i.e., the number of patients seen) are the same and equal to N. To measure the performance of a certain policy while ensuring workload equality, the requests’ arrival rate 
                           
                              λ
                           
                         is set to the target arrival rate 
                           
                              
                                 
                                    λ
                                 
                                 
                                    ∗
                                 
                              
                           
                         that results in an expected number of showing patients per day equal to N under that policy. The reason for manipulating the arrival rate lies in the assumption that non-showing patients will reschedule their appointment, thereby increasing the arrival rate. Although finding the value of 
                           
                              
                                 
                                    λ
                                 
                                 
                                    ∗
                                 
                              
                           
                         is easy in the absence of no-shows (
                           
                              
                                 
                                    λ
                                 
                                 
                                    ∗
                                 
                              
                              =
                              N
                           
                        ) or for a constant show rate σ (
                           
                              
                                 
                                    λ
                                 
                                 
                                    ∗
                                 
                              
                              =
                              N
                              /
                              σ
                           
                        ), it cannot be computed analytically in the case considered here, where show rates depend on the scheduling decision. For example, a policy which tends to schedule appointments far in advance requires a larger 
                           
                              
                                 
                                    λ
                                 
                                 
                                    ∗
                                 
                              
                           
                         than a policy which tends to schedule appointments in the near future, otherwise the patients seen under the first policy would be fewer than those seen under the second policy.

Under open access, the target arrival rate 
                           
                              
                                 
                                    λ
                                 
                                 
                                    ∗
                                 
                              
                           
                         is computed through a numerical procedure, which, by increasing the arrival rate 
                           
                              λ
                           
                         from 8 to 12 in steps of 0.025, analytically computes the number of expected shows using (8), and chooses the value 
                           
                              
                                 
                                    λ
                                 
                                 
                                    ∗
                                 
                              
                           
                         that results in the number of shows that is closest to N. Under the heuristic policy, the target arrival rate 
                           
                              
                                 
                                    λ
                                 
                                 
                                    ∗
                                 
                              
                           
                         is computed through a similar numerical procedure, except that the expected number of shows is estimated through a 1000-day long simulation, rather than computed analytically. This approach also provides the expected clinic profit, waiting time, and overtime obtained under each policy. We use K
                        =12 slots and a scheduling horizon of h
                        =5days. These values ensure that the capacity is greater than the arrival rate and that the heuristic procedure allocates most slots based on the predictions (steps 1–2 in Fig. 3) and only few slots otherwise (step 3 in Fig. 3). Since we are comparing strategies that result in different arrival rates, we set the earliness bonus 
                           
                              
                                 
                                    π
                                 
                                 
                                    ̃
                                 
                              
                           
                         and the lead time penalty δ to 0, so that a no-show results in no revenue; otherwise, strategies resulting in a higher arrival rate would implicitly benefit because they would schedule more no-shows. The other parameter values are set to π
                        =1, 
                           
                              
                                 
                                    ω
                                 
                                 
                                    ¯
                                 
                              
                              =
                              0.5
                           
                        , τ
                        =1.2, as in LaGanga and Lawrence (2007b). Table 5
                         reports the performance of open access for each deferring threshold f, while Table 6
                         reports the performance of the heuristic procedure for the combinations of sensitivity sn and specificity sp achieved on the health center data set (Section 7.1), along with the lower bound (0,1) and upper bound (1,1) configurations.

The measures reported in these tables represent an estimate of the performance that would be obtained by implementing the open access policy or our heuristic at the mental health center under study. In both tables, the first column reports the experimental settings under consideration, and the following columns report the target arrival rate 
                           
                              
                                 
                                    λ
                                 
                                 
                                    ∗
                                 
                              
                           
                         needed to obtain N
                        =8 expected shows, the overall show rate (computed as 
                           
                              N
                              /
                              
                                 
                                    λ
                                 
                                 
                                    ∗
                                 
                              
                           
                        ), the expected overtime, waiting time, clinic profit, and the deviation compared to the largest profit obtained by open access. We assume a service time equal to 30min.

Under open access, while a large deferral threshold f is beneficial because it limits the variability of the daily workload, it is detrimental if it is too large because, as more appointments are deferred to the next day, their show rate decreases. The deferring threshold that optimizes this trade-off is f
                        =2. Compared to open access, the heuristic procedure leads to a much lower overtime, at the cost of introducing a modest amount of waiting time, resulting in a 13–18% increase in clinic profit. The largest profit is obtained by HP(.9,.5), which achieves a show rate (.88) slightly greater than the same-day appointment show rate (.87). The reason for this lies in the ability of this high-sensitivity classifier to detect the day where a patient is most likely to show, which is not necessarily today for every patient; for example, some might require some advance notice to take time off from work or arrange child care. If our predictions were perfect (as under the upper bound policy HP(1,1)), we would achieve an even larger show rate. Interestingly, the lower bound policy, HP(0,1), which simply assigns the S-slots first and the N-slots later without using no-show predictions, outperforms open access. However, we show below that this is true only for low show rates.

We also tested our heuristic with scheduling horizons of 10 and 30days, and observed a substantial decrease in show rate and clinic profit. An analysis of the scheduling decisions reveals that most S-slots are scheduled far in advance; in fact, many N-slots remain empty because, with such a long horizon, almost all requests are scheduled in the first step of the heuristic procedure (see Fig. 3), and none is scheduled in the second step. As many appointments are scheduled far in advance, the show rate is low. This result suggests that the scheduling horizon should be long enough to accommodate almost all requests, but not so long to cause a low show rate. We leave the problem of finding the optimal length of the scheduling horizon for future studies.

Other experiments reported in Appendix G show that our heuristic policy can be applied to a more traditional overbooking strategy, multiple-booking, which consists of having slots of the same length as the service time and possibly scheduling more appointments to the same slot. Finally, the experiments in Appendix G show that the comparison between the heuristic procedure and open access would obtain the same conclusions even in the case of variable service times.

Here, we perform the experiments of Section 7.2 for different show rate vectors. In particular, we iteratively multiply the observed show rate vector 
                           σ
                         (second row of Table 2) by a factor θ
                        ∊{1,1.025,1.050,…,1.350}. For θ
                        =1, the show rate vector is the original one; for θ
                        =1.350, the same-day and next-day show rates σ
                        0 and σ
                        1 become equal to 1 (we cap σ
                        0 at 1). Note, though, that even for θ
                        =1.350, the show rates σ
                        3 and σ
                        4 are smaller than 1. The results are displayed in Fig. 5
                        , where, for clarity purposes, the x-axis reports only the values of σ
                        0 and σ
                        1, instead of the entire show-rate vector.

In Fig. 5a, the grey continuous line reports the largest clinic profit that can be obtained by the open access policy using the deferral limit values f
                        ∊{0,1,…,8}; the black continuous line reports the largest clinic profit obtained by the heuristic procedure among the three configurations HP(.9,.5), HP(.7,.7), and HP(.6,.8), whose individual performances are reported in Fig. 5b; the grey dashed line reports the clinic profit obtained by the lower bound policy, i.e., HP(0,1); the black dashed line reports the clinic profit obtained by the upper bound policy HP(1,1). The gap between the lower bound policy and the heuristic procedure represents the extra profit obtained through the adoption of predictive analytics at the health center under study; the gap between the heuristic procedure and the upper bound represents the potential extra profit that can be obtained by improving our prediction quality.

The open access policy performs poorly for low show rates because it schedules many non-showing appointments afterhours, which increases overtime without increasing the revenue. Conversely, the other policies schedule non-showing appointments during the clinic hours, impacting the overtime by a lesser degree. We also analyzed the deferral threshold f that leads to the largest profit for each show rate under open access, and found that it is positively correlated with the show rate: in other words, the higher the show rate, the higher the best deferral threshold. For (σ
                        0,
                        σ
                        1)=(1.0,1.0), the largest profit is obtained with f
                        =
                        N
                        =8, in accordance to the findings of Robinson and Chen (2010); for (σ
                        0,
                        σ
                        1)=(.87,.74), the largest profit is obtained with f
                        =2; it can be easily shown that, for even lower show rates, the largest profit is obtained with f
                        =0. This suggests that while for high show rates it is important to limit the workload variability by deferring appointments, for low show rates it is important to maximize the number of shows by not deferring appointments.

The heuristic procedure generally outperforms open access. However, its advantage is small for high show rates and is large for low show rates. In particular, it is 18.0% for the show rates of the health center under study ((σ
                        0,
                        σ
                        1)=(.87,.74)), which suggests that this center may greatly benefit from adopting our method. Fig. 5b shows that, among the three heuristic configurations, the largest profit is obtained by HP(.9,.5) for low show rates, by HP(.7,.7) for intermediate show rates, and by HP(.6,.8) for high show rates. The reason, once again, lies in the importance of maximizing the number of shows when the show rate is low, a task better performed by the high-sensitivity configuration, and in the importance of minimizing overtime when the show rate is high, a task better performed by the high-specificity configuration. If the sensitivity and specificity were both equal to 1, we would obtain the upper bound profit, which is almost constant throughout the interval. Interestingly, its value is only about 1% lower than 8, which is the theoretical upper bound of the clinic profit, obtained by seeing 8 patients per day without incurring any cost. This confirms the high quality of both our column-generation and our heuristic procedure. Based on these findings, Table 7
                         summarizes our recommendations.

Clinics whose prediction quality is low (or who are simply not willing to implement the predictive logic of our framework) should adopt the lower bound policy for extremely low show rates, such as those observed in the clinic under study, the open access policy for intermediate show rates, and either the lower bound policy or the open access policy for extremely high show rates (i.e., if same-day and next-day appointments always show).

Clinics achieving a prediction quality similar to ours, which we call “Medium” in Table 7, should adopt the heuristic procedure if the show rate is not high; otherwise, adopting open access (or the lower bound policy if the show rate is very high) results in a similar performance. Clinics achieving a higher prediction quality than ours should always use the heuristic procedure. When implementing the heuristic procedure, one should shift the prediction quality towards high sensitivity (sn
                        >
                        sp) in case of low show rate and towards high specificity (sn
                        <
                        sp) in case of high show rate; for intermediate show rates, one should seek a balanced configuration (sn
                        =
                        sp).

We dealt with the problem of scheduling outpatient appointments given individual day-dependent show predictions. When overbooking, while it is desirable to maximize the number of patients seen, it is desirable to limit patient waiting time and clinic overtime. To solve this trade-off, we developed a dynamic scheduling procedure which considers no-show predictions, and we tested it via simulation for different parameter combinations. Then, we developed a heuristic and compared its performance to that of open access. To validate our results and to estimate the prediction quality that can be achieved at a real clinic, we studied in detail the data set of a large mental health center.

Our first contribution is the development of a column-generation solution method that schedules appointments given individual day-dependent show predictions. The problem is solved to optimality in less than a second if rejections are allowed; however, if rejections are not allowed, it may take a longer time.

So, by analyzing the decisions made by the column-generation procedure, we developed a near-optimal heuristic policy that is also easy to implement. This policy consists of scheduling the predicted shows in S-slots in the near future and the predicted no-shows in the N-slots farther into the future. The patterns emerged from our analysis show that no-shows are used as buffers to avoid long sequences of shows, which would otherwise result in a long waiting time and overtime. The value of scheduling patients far out even though they have a high probability of not showing up is that it satisfies the patient’s immediate perception of needing non-urgent care and the patient will not continue to call back seeking an appointment. If the patient does not show, their appointment time will be partly used by appointments assigned to the preceding S-slots.

We then considered the case of a large mental health center with a high no-show rate. First, we analyzed their database with the goal of measuring the prediction quality (sensitivity and specificity). By exploring their database with propositionalization, we found that causes of no-shows include not only the characteristics of the patients, but also those of the provider. This could be explained by differences in providers’ amount of experience or different practice approaches used by providers, due to either their working on different kinds of teams (more community-based versus more traditional office-based), or possibly differences in skills in engaging patients so they return for their scheduled appointments. Second, we compared the estimated performance of the heuristic procedure to that of the open access policy proposed by Robinson and Chen (2010). Our results show that, if implemented at the health center under consideration, our heuristic would outperform open access, leading to a profit increase of up to 18.0%. We also showed that for low show rates the prediction quality should be shifted towards high sensitivity, while for high show rates it should be shifted towards high specificity.

The main managerial insights that emerge from our work are:
                        
                           1.
                           Same-day scheduling is the worst policy if individual no-show predictions are considered, because a longer horizon increases the flexibility in matching the appointment’s predicted show outcome to the needs of the current schedule.

The trade-off between specificity and sensitivity, which can be regulated by using cost-sensitive learning, determines which objective to favor: a higher sensitivity favors maximizing the revenue and, therefore, the number of shows, whereas a higher specificity favors minimizing overtime and waiting time. For this reason, if heavy overbooking is adopted, the prediction quality should be shifted towards high specificity; conversely, if light overbooking (or no overbooking) is adopted, the prediction quality should be shifted towards high sensitivity.

We believe that these simple guidelines are of great interest to practitioners who want to integrate predictive analytics into their appointment scheduling system. As medical practices are rapidly adopting electronic medical record systems to qualify for federal payments and avoid penalties for noncompliance, the availability of electronic appointment data is increasing. This can help improve the prediction accuracy in an expanding number of clinics, and provides valuable opportunities to apply our models to improve clinic performance even more.

Our work can be extended both theoretically and practically. Interesting theoretical extensions include (1) the development of a more stylized model for the appointment scheduling problem, which can confirm our findings analytically and (2) the consideration of walk-ins, which we have been left out from the present study. An important practical extension is to validate our work by implementing it in a real clinic. A real-world implementation could validate our findings and shed light on whether our scheduling policy affects patients’ no-show behavior over time.

@&#ACKNOWLEDGEMENTS@&#

The authors thank the anonymous referees for their valuable suggestions. This work was partly funded by the Nova Faculty Fellowship, University of Alberta School of Business.

Supplementary data associated with this article can be found, in the online version, at http://dx.doi.org/10.1016/j.ejor.2014.06.034.


                     
                        
                           Supplementary data 1
                           
                        
                     
                  

@&#REFERENCES@&#

