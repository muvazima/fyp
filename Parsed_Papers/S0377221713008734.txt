@&#MAIN-TITLE@&#A column generation approach for solving the patient admission scheduling problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We develop a new model for the patient admission scheduling problem.


                        
                        
                           
                           We apply column generation and dynamic constraint aggregation to solve the problem.


                        
                        
                           
                           A new dual disaggregation strategy is presented.


                        
                        
                           
                           An aggressive variable fixing routine is presented.


                        
                        
                           
                           We improve lower and upper bounds on existing benchmark instances.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

OR in health services

Scheduling

Column generation

Dynamic constraint aggregation

Dual disaggregation

Branch and bound

@&#ABSTRACT@&#


               
               
                  This paper addresses the Patient Admission Scheduling (PAS) problem. The PAS problem entails assigning elective patients to beds, while satisfying a number of hard constraints and as many soft constraints as is possible, and arises at all planning levels for hospital management. There exist a few, different variants of this problem. In this paper we consider one such variant and propose an optimization-based heuristic building on branch-and-bound, column generation, and dynamic constraint aggregation to solve it. We achieve tighter lower bounds than previously reported in the literature and, in addition, we are able to produce new best known solutions for five out of twelve instances from a publicly available repository.
               
            

@&#INTRODUCTION@&#

In this paper we consider a new approach for solving the Patient Admission Scheduling (PAS) problem. In many countries, the allocation of patients to wards (more specifically, to beds) is carried out by a central planning unit in the hospital management. The algorithm presented in this paper can assist hospital management at the operational level in assigning elective patients to beds, while attempting to satisfy as many individual patient preferences as is possible and making sure critical medical equipment is available. Hospitals usually have slack in order to deal with emergency patients, which are, naturally, difficult to plan for. Emergency patients are not considered in this study.

The area of patient admission scheduling in hospitals is important for a high-quality health care system. To provide health care services is perhaps one of the most complex industries worldwide. Planning and managing the operations of a hospital in an efficient manner requires a sound knowledge of the hospital system, and understanding the patient flow is critical for this. Most literature within patient admission scheduling focuses on the strategic (and tactical) level and describes tools and cases for assisting hospital management with tactical and strategic planning problems. Some examples are: Jittamai and Kangwansura (2011), Harper (2002) and Kusters and Groot (1996). The aim here is to have the right number of beds available in order to increase the efficiency of the hospital.

The problem that we investigate in this paper is the operational version of the PAS problem. This problem has only recently started to receive attention. It is indirectly part of scheduling operating rooms, which has gained some attention. The survey in Guerriero and Guido (2011) lists some 129 publications that focus on the optimization of hospital operating theaters.

In the few, existing articles available on the operational level PAS problem slightly different versions of the problem are considered. In Hutzschenreuter, Bosman, Blonk-Altena, Aarle, and Poutré (2008) an agent-based model for the problem is presented. A model of the patient flow is generated in order to admit an optimal mix of patients from different departments with a special focus on the common usage of (central) hospital resources. The work is based on a detailed description of the patient flow and its probabilities. This system can be used to develop policies for achieving a good patient mix and to facilitate efficient hospital operations.

In contrast to this, Chen et al. (2010) develop a genetic algorithm for an admission scheduling problem with only one department. The algorithm uses historical data and optimizes a long-term admission strategy instead of suggesting a specific schedule.

In the remaining work in this area, Demeester, Souffriau, Causmaecker, and Vanden Berghe (2010), Bilgin, Demeester, Misir, Vancroonenburg, and Vanden Berghe (2012) and Ceschia and Schaerf (2011) all consider the same version of the PAS problem. This definition of the problem was originally presented in Demeester et al. (2010). In addition, the authors have published a website containing instances,
                        1
                        
                           http://allserv.kahosl.be/∼peter/pas.
                     
                     
                        1
                      current best known solutions, and a solution validator.

The problem has a fixed number of elective patients. In practice, elective patients often wait for an admission date; however, in this particular context, each patient has already been assigned both an admission date and a discharge date, and these are known with certainty. In addition, each patient states their medical requirements. The aim is then to determine which beds to assign to which patients in order to maximize the patient comfort and efficiency of the medical operations. This planning has to be done in compliance with a few hard constraints; for example, admission and discharge dates must be respected, mandatory medical equipment needs to be in the room assigned, and male and female patients cannot share the same room simultaneously. In this paper we present a new mathematical formulation of the problem and devise an efficient column generation-based heuristic for solving it. Our methodology utilizes a dynamic constraint aggregation procedure to overcome some of the problems associated with solving large integer programming formulations. The methodology is tested on the benchmark instances provided by Demeester et al. (2010), where we report tighter linear programming (LP) bounds, significantly faster running times than previous mathematical programming approaches in achieving these, and five new best known integer solutions.

It should finally be noted that in an effort to get closer to the real-life problem Ceschia and Schaerf (2012) introduce the dynamic PAS problem or PAS under uncertainty (PASU). This problem is based on the PAS problem as defined in Demeester et al. (2010) with the addition that patients do not necessarily get admitted to the hospital on their planned admission date, and may also stay an extra day longer.

In this paper, our aim is to focus on the PAS problem, introduce a new method for solving the problem, and benchmark its performance against existing approaches available. The structure of this paper is, therefore, as follows. In Section 2, we introduce the PAS problem in more detail and present a binary integer programming formulation to model it. Section 3 describes the proposed solution methodology as well as a detailed discussion on the dynamic constraint aggregation procedure. Here we also introduce a new dual disaggregation strategy. Computational results are described in Section 4, and conclusions from this study are drawn in Section 5.

In this section we consider the PAS problem in more detail. In particular, we provide a detailed overview of the constraints of the problem and introduce the required terminology and notation that is used throughout the paper. The description of the problem is consistent with that of Demeester et al. (2010).

The PAS problem requires that a set of patients requiring medical attention, 
                        
                           P
                        
                     , is assigned to a set of hospital beds over a prespecified daily time horizon. We denote the set of consecutive days that comprise this planning horizon as 
                        
                           T
                        
                     . Each patient, 
                        
                           p
                           ∈
                           P
                        
                     , is assumed to have a known admission date, 
                        
                           
                              
                                 a
                              
                              
                                 p
                              
                           
                           ∈
                           T
                        
                     , and a known discharge date, 
                        
                           
                              
                                 d
                              
                              
                                 p
                              
                           
                           ∈
                           T
                        
                     , which together define the duration of the patient’s stay in the hospital.
                        2
                        In the benchmark instances proposed by Demeester et al. (2010) some patients have a discharge dates beyond the planning horizon. For these patients we provide a virtual discharge date corresponding to the end of the planning horizon.
                     
                     
                        2
                      We let 
                        
                           W
                           =
                           {
                           (
                           p
                           ,
                           t
                           )
                           ∈
                           P
                           ×
                           T
                           |
                           
                              
                                 a
                              
                              
                                 p
                              
                           
                           ⩽
                           t
                           <
                           
                              
                                 d
                              
                              
                                 p
                              
                           
                           }
                        
                      be the set of all patient-time combinations; in other words, the set of all patient days which must be assigned at the hospital.

For treatment each patient requires one or more so-called specialisms (e.g. cardiology, oncology, gerontology, etc.). Typically, patients need just one specialism. The case where patients need multiple specialisms is excluded from our study. Each bed is located in a particular room, and each room belongs to a particular department at the hospital. Every department has the ability to cater for the treatment of a variety of specialisms, but with varying degrees of expertise. Some departments (e.g. pediatrics, gerontology) also have an age policy, which means that the department can only admit patients of a certain age. As is the case for departments, rooms also have a ranked list of specialisms for which they are suitable. Furthermore, every room has a certain number of identical beds, termed the room capacity (typically this is one, two, or four beds) and is equipped with a set of properties (e.g. oxygen and telemetry) that can be used for treatment. The presence of certain room properties for a patient may either be required (mandatory) or simply preferred. Each room also has a gender policy. This stipulates that all patients in the room must be male, female, segregated (the same gender on any given day), or unrestricted. The rooms at the hospital can be classified as a particular room type, where all rooms of a particular type are identical. We denote the set of all room types at the hospital as 
                        
                           R
                        
                     , and for each 
                        
                           r
                           ∈
                           R
                        
                      we let 
                        
                           
                              
                                 N
                              
                              
                                 r
                              
                           
                        
                      be the number of available rooms of this type. Since all beds in a given room are identical and all the rooms of a particular type are also identical, one can equivalently view the PAS problem as finding an assignment of patients to room types over the planning horizon.

In the process of assigning patients to room types, several constraints are enforced. These are classified as either hard or soft constraints. The former must be respected, while the latter can be violated; however, a penalty is incurred for each violation. In the version of the PAS problem that we consider there are five different types of hard constraints. Firstly, there is the obvious requirement that no two patients can simultaneously occupy the same bed. Viewed from a room type assignment perspective, this is equivalent to stating that the capacity of the room type must not be violated on any day. Secondly, on each day of the planning horizon each room type’s gender policy must be respected. Thirdly, for each patient’s admission the period of stay is contiguous. Finally, each patient should be assigned a room type consistent with their age and the required mandatory equipment.

All other constraints are considered soft and will be described in turn. In this way we will remain consistent with the overall approach to the problem posed by Demeester et al. (2010). We begin by discussing all penalties that are incurred when assigning a given patient, 
                        
                           p
                           ∈
                           P
                        
                     , to a particular room type, 
                        
                           r
                           ∈
                           R
                        
                     . All such individual penalties can be accumulated to obtain one patient room type assignment penalty, 
                        
                           
                              
                                 d
                              
                              
                                 pr
                              
                           
                        
                     . Firstly, each patient has a preference for the capacity of the room in which they will stay. A patient who is assigned a room type with a capacity larger than their preference incurs a penalty. Secondly, a patient should be placed in a department whose most competent specialism matches the patient’s required specialism. Lower levels of expertise are penalized. Similarly, a patient should receive a room type that best matches the patient’s specialism. Imperfect matches are again penalized. Finally, in terms of room properties, patients should receive a room type that is equipped with their preferred properties. Missing preferred properties are penalized. The only penalty not related to room type assignment concerns the transfer of patients between two different rooms on consecutive days. Since it is undesirable to transfer patients during their stay, every time a patient is transferred, a transfer-out penalty, 
                        
                           
                              
                                 t
                              
                              
                                 o
                              
                           
                        
                     , as well as a transfer-in penalty, 
                        
                           
                              
                                 t
                              
                              
                                 i
                              
                           
                        
                     , are incurred. Table 1
                      gives the weights associated with violating each constraint. These are identical to Demeester et al. (2010), again for consistency.

Given the problem description outlined above, one can formally state the PAS problem as follows: find the minimum penalty allocation of patients to room types so that each patient is allocated to a room type on each day of their stay, while respecting all hard constraints and violating as few soft constraints as is necessary.

In order to represent a solution we define a room schedule. A room schedule is a particular assignment of patients to a given room (of a certain type) over the planning horizon. A solution to the PAS problem is simply a set of room schedules for each room type. Fig. 1
                      further illustrates the notion of a room schedule. It gives an example of how patients could be assigned to a room type containing four beds over a 14-day time horizon. Male patients are indicated by a solid gray rectangle, while female patients are represented by a dark gray, hatched rectangle. The horizontal lines connecting successive rectangles indicate that the respective rectangles represent the same patient. A solid white rectangle merely indicates that the relevant bed is empty. We denote the set of all feasible room schedules for a given room type, 
                        
                           r
                           ∈
                           R
                        
                     , as 
                        
                           
                              
                                 S
                              
                              
                                 r
                              
                           
                        
                     .

Using the above terminology, the PAS problem can now be formulated as the following binary integer program (see (1)–(4)). The binary decision variable 
                        
                           
                              
                                 x
                              
                              
                                 rs
                              
                           
                        
                      states whether or not the solution contains room schedule 
                        
                           s
                           ∈
                           
                              
                                 S
                              
                              
                                 r
                              
                           
                        
                      for room type 
                        
                           r
                           ∈
                           R
                        
                     . Allocating room schedule 
                        
                           s
                           ∈
                           
                              
                                 S
                              
                              
                                 r
                              
                           
                        
                      to room type 
                        
                           r
                           ∈
                           R
                        
                      has a cost 
                        
                           
                              
                                 c
                              
                              
                                 rs
                              
                           
                        
                      (i.e. the sum of all penalties incurred for the room schedule over the time horizon). The binary indicator variable 
                        
                           
                              
                                 a
                              
                              
                                 sw
                              
                           
                        
                      states whether or not a given room schedule, 
                        
                           s
                           ∈
                           
                              
                                 S
                              
                              
                                 r
                              
                           
                        
                     , contains patient-time combination 
                        
                           w
                           ∈
                           W
                        
                     .
                        
                           (1)
                           
                              min
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       r
                                       ∈
                                       R
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       s
                                       ∈
                                       
                                          
                                             S
                                          
                                          
                                             r
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    c
                                 
                                 
                                    rs
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    rs
                                 
                              
                              ,
                           
                        
                     
                     
                        
                           (2)
                           
                              s
                              .
                              t
                              .
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       r
                                       ∈
                                       R
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       s
                                       ∈
                                       
                                          
                                             S
                                          
                                          
                                             r
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    a
                                 
                                 
                                    sw
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    rs
                                 
                              
                              =
                              1
                              
                              ∀
                              w
                              ∈
                              W
                              ,
                           
                        
                     
                     
                        
                           (3)
                           
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       s
                                       ∈
                                       
                                          
                                             S
                                          
                                          
                                             r
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    rs
                                 
                              
                              
                              ⩽
                              
                                 
                                    N
                                 
                                 
                                    r
                                 
                              
                              
                              ∀
                              r
                              ∈
                              R
                              ,
                           
                        
                     
                     
                        
                           (4)
                           
                              
                              
                                 
                                    x
                                 
                                 
                                    rs
                                 
                              
                              ∈
                              {
                              0
                              ,
                              1
                              }
                              
                              ∀
                              r
                              ∈
                              R
                              ,
                              
                              ∀
                              s
                              ∈
                              
                                 
                                    S
                                 
                                 
                                    r
                                 
                              
                              .
                           
                        
                     
                  

The objective function, given by (1), minimizes the sum of the penalties incurred in allocating the room schedules. Constraint set (2) ensures that each patient is assigned a room for each night of their respective stays, while constraints (3) prevent staff from assigning more room schedules for a particular room type than there are rooms of that type. The binary restrictions on the decision variables are given by (4). To complete the description we let 
                        
                           
                              
                                 π
                              
                              
                                 w
                              
                           
                        
                      be the dual variable value on constraint (2) associated with patient-time combination 
                        
                           w
                           ∈
                           W
                        
                      and we let 
                        
                           
                              
                                 σ
                              
                              
                                 r
                              
                           
                        
                      be the dual variable value on constraint (3) associated with room type 
                        
                           r
                           ∈
                           R
                        
                     .

Model (1)–(4) is a generalized set partitioning problem that states the PAS problem from a room type perspective. That is, only legal room schedules for each room type are included in the model. As a consequence, the constraints on the gender policy of the room type and its bed count are embedded in the column definition of the model. Therefore, we expect the LP relaxation of this formulation to be tighter than one that simply considers the assignment of patients to beds. For the latter case, additional constraints are required to enforce both the gender requirement and the bed counts of the respective room types.

The above formulation is characterized by an exponential number of variables and relatively few constraints. This makes it an ideal candidate for a column generation based approach. However, while the number of constraints is far fewer than the number of possible variables, it is still large enough (
                        
                           |
                           W
                           |
                        
                      is at least 2244 for the instances we consider) to impede the performance of an LP solver. Hence, we develop a column generation approach which utilizes dynamic constraint aggregation to help reduce the row dimension of the formulation. The details of this algorithm will be described in the subsequent section.

To solve the PAS problem we propose a column generation based approach that incorporates a dynamic constraint aggregation procedure to improve the performance of the algorithm. The dynamic constraint aggregation is of crucial importance in that it reduces the row dimension of the set partitioning problem. Column generation is a widely used decomposition technique for solving large-scale optimization problems in which it is impossible to consider all variables explicitly in the formulation. In column generation the problem is decomposed into a master problem and one (or more) pricing problem(s), respectively. In what follows we describe the structure of both the master (see Section 3.1) and pricing problems (see Section 3.2) as well as provide a detailed explanation of how we apply the dynamic constraint aggregation methodology (see Section 3.3). Column generation relies on relaxing the integrality restrictions of integer variables to obtain a linear programming formulation. As a consequence the solution obtained by column generation may be fractional and therefore it is typically embedded in a branch-and-bound framework where the LP relaxation in each node is solved by column generation. We partly apply the branch-and-bound technique and describe in Section 3.4 how we obtain an integer solution.

The PAS master problem is identical in structure to that of model (1)–(4); however, it only contains a subset of the possible variables. The role of the pricing problem is to identify favorable variables dynamically using the dual variable information from an optimal solution of the relaxed master problem. To obtain the relaxed master problem, we replace constraints (4) with
                           
                              (5)
                              
                                 
                                    
                                       x
                                    
                                    
                                       rs
                                    
                                 
                                 ≥
                                 0
                                 
                                 ∀
                                 r
                                 ∈
                                 R
                                 ,
                                 ∀
                                 s
                                 ∈
                                 
                                    
                                       S
                                    
                                    
                                       r
                                    
                                 
                                 .
                              
                           
                        The premise in column generation is that many of the variables will be non-basic in an optimal solution to the original problem, so one should only generate those variables that have the potential to improve the objective function value. Thus, the objective function for the pricing problem is the reduced cost calculation of the non-basic variables. For the PAS problem we identify one pricing problem for each room type, where each has an objective function of the form
                           
                              (6)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          p
                                          ,
                                          t
                                          )
                                          ∈
                                          W
                                       
                                    
                                 
                                 (
                                 
                                    
                                       d
                                    
                                    
                                       pr
                                    
                                 
                                 -
                                 
                                    
                                       π
                                    
                                    
                                       pt
                                    
                                 
                                 )
                                 
                                    
                                       z
                                    
                                    
                                       pt
                                    
                                 
                                 +
                                 
                                    
                                       t
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       γ
                                    
                                    
                                       i
                                    
                                 
                                 +
                                 
                                    
                                       t
                                    
                                    
                                       o
                                    
                                 
                                 
                                    
                                       γ
                                    
                                    
                                       o
                                    
                                 
                                 -
                                 
                                    
                                       σ
                                    
                                    
                                       r
                                    
                                 
                                 .
                              
                           
                        Here, 
                           
                              
                                 
                                    z
                                 
                                 
                                    pt
                                 
                              
                           
                         is a binary variable indicating whether or not patient-time combination 
                           
                              (
                              p
                              ,
                              t
                              )
                              ∈
                              W
                           
                         is assigned to room type 
                           
                              r
                              ∈
                              R
                           
                        , and 
                           
                              
                                 
                                    γ
                                 
                                 
                                    i
                                 
                              
                           
                         and 
                           
                              
                                 
                                    γ
                                 
                                 
                                    o
                                 
                              
                           
                         give the total number of transfers into and out of the room schedule over the planning horizon for room type 
                           
                              r
                              ∈
                              R
                           
                        .

Column generation is hence an iterative procedure between the master and pricing problems. The master problem solves to optimality a relaxed, restricted version of the original problem, which contains a subset of promising variables, while the pricing problems identify favorable variables to append to the master problem. If no such variable is found, the process terminates, and one has found an optimal solution to the LP relaxation of the original problem. If integrality is desired, column generation can be embedded in a branch-and-price framework. The reader is referred to Desrosiers, Lübbecke, and Solomon (2005, chapter 1) for an introduction to column generation.

The aim of the pricing problem is to identify a room schedule for each room type satisfying the room constraints such that (6) is minimized. That is, a room schedule that places at most 
                           
                              
                                 
                                    Q
                                 
                                 
                                    r
                                 
                              
                           
                         patients in the room in any time period and satisfies the gender policy requirements. We therefore have a pricing problem for each room type 
                           
                              r
                              ∈
                              R
                           
                        .

In defining the pricing problems, we let 
                           
                              
                                 
                                    P
                                 
                                 
                                    r
                                 
                              
                              ⊆
                              P
                           
                         be the subset of patients which are compatible with the room specification, thereby leaving out patients who do not satisfy the gender policy or the age policy of room type 
                           
                              r
                              ∈
                              R
                           
                         or who require mandatory room properties which the room type does not possess. Similarly, we define 
                           
                              
                                 
                                    V
                                 
                                 
                                    r
                                 
                              
                              =
                              {
                              (
                              p
                              ,
                              t
                              )
                              ∈
                              W
                              |
                              p
                              ∈
                              
                                 
                                    P
                                 
                                 
                                    r
                                 
                              
                              }
                           
                         to be the set of relevant patient-time combinations for the room type 
                           
                              r
                              ∈
                              R
                           
                        .

The gender policy of the room type can be considered as a categorization of the patients. If the room type has either the male policy, the female policy, or the unrestricted policy, then the room only has a single category of patients. On the other hand, if the room has the segregated policy, then both genders are considered, but only one of the genders can be present in the room at any time. Thus, we let C be the index set of the categories (genders) and let 
                           
                              
                                 
                                    m
                                 
                                 
                                    cp
                                 
                              
                              ∈
                              {
                              0
                              ,
                              1
                              }
                           
                         be a parameter taking the value 1 if and only if patient 
                           
                              p
                              ∈
                              
                                 
                                    P
                                 
                                 
                                    r
                                 
                              
                           
                         belongs to category 
                           
                              c
                              ∈
                              C
                           
                        .

A variable 
                           
                              
                                 
                                    γ
                                 
                                 
                                    pt
                                 
                                 
                                    i
                                 
                              
                           
                         measures whether or not patient 
                           
                              p
                              ∈
                              
                                 
                                    P
                                 
                                 
                                    r
                                 
                              
                           
                         is transferred into the room schedule from period 
                           
                              t
                              -
                              1
                           
                         to period t, and 
                           
                              
                                 
                                    γ
                                 
                                 
                                    pt
                                 
                                 
                                    o
                                 
                              
                           
                         indicates whether or not patient p is transferred out of the room schedule from period 
                           
                              t
                              -
                              1
                           
                         to period t. The variable 
                           
                              
                                 
                                    v
                                 
                                 
                                    ct
                                 
                              
                           
                         states whether or not a patient from category c is present in the room schedule in period 
                           
                              t
                              ∈
                              T
                           
                        . A mathematical model for the pricing problem is then
                           
                              (7)
                              
                                 
                                    min
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          p
                                          ,
                                          t
                                          )
                                          ∈
                                          
                                             
                                                V
                                             
                                             
                                                r
                                             
                                          
                                       
                                    
                                 
                                 (
                                 
                                    
                                       d
                                    
                                    
                                       pr
                                    
                                 
                                 -
                                 
                                    
                                       π
                                    
                                    
                                       pt
                                    
                                 
                                 )
                                 
                                    
                                       z
                                    
                                    
                                       pt
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          p
                                          ,
                                          t
                                          )
                                          ∈
                                          
                                             
                                                V
                                             
                                             
                                                r
                                             
                                          
                                       
                                    
                                 
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       γ
                                    
                                    
                                       pt
                                    
                                    
                                       i
                                    
                                 
                                 +
                                 
                                    
                                       t
                                    
                                    
                                       o
                                    
                                 
                                 
                                    
                                       γ
                                    
                                    
                                       pt
                                    
                                    
                                       o
                                    
                                 
                                 )
                                 ,
                              
                           
                        
                        
                           
                              (8)
                              
                                 s
                                 .
                                 t
                                 .
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          p
                                          ∈
                                          
                                             
                                                P
                                             
                                             
                                                r
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       pt
                                    
                                 
                                 ⩽
                                 
                                    
                                       Q
                                    
                                    
                                       r
                                    
                                 
                                 
                                 t
                                 ∈
                                 T
                                 ,
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                 
                                    
                                       z
                                    
                                    
                                       pt
                                    
                                 
                                 -
                                 
                                    
                                       z
                                    
                                    
                                       p
                                       ,
                                       t
                                       -
                                       1
                                    
                                 
                                 ⩽
                                 
                                    
                                       γ
                                    
                                    
                                       pt
                                    
                                    
                                       i
                                    
                                 
                                 
                                 p
                                 ∈
                                 
                                    
                                       P
                                    
                                    
                                       r
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       a
                                    
                                    
                                       p
                                    
                                 
                                 <
                                 t
                                 <
                                 
                                    
                                       b
                                    
                                    
                                       p
                                    
                                 
                                 ,
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                 
                                    
                                       z
                                    
                                    
                                       p
                                       ,
                                       t
                                       -
                                       1
                                    
                                 
                                 -
                                 
                                    
                                       z
                                    
                                    
                                       pt
                                    
                                 
                                 ⩽
                                 
                                    
                                       γ
                                    
                                    
                                       pt
                                    
                                    
                                       o
                                    
                                 
                                 
                                 p
                                 ∈
                                 
                                    
                                       P
                                    
                                    
                                       r
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       a
                                    
                                    
                                       p
                                    
                                 
                                 <
                                 t
                                 <
                                 
                                    
                                       b
                                    
                                    
                                       p
                                    
                                 
                                 ,
                              
                           
                        
                        
                           
                              (11)
                              
                                 
                                 
                                    
                                       m
                                    
                                    
                                       cp
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       pt
                                    
                                 
                                 ⩽
                                 
                                    
                                       v
                                    
                                    
                                       ct
                                    
                                 
                                 
                                 p
                                 ∈
                                 
                                    
                                       P
                                    
                                    
                                       r
                                    
                                 
                                 ,
                                 
                                 c
                                 ∈
                                 C
                                 ,
                                 
                                 t
                                 ∈
                                 T
                                 ,
                              
                           
                        
                        
                           
                              (12)
                              
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          c
                                          ∈
                                          C
                                       
                                    
                                 
                                 
                                    
                                       v
                                    
                                    
                                       ct
                                    
                                 
                                 ⩽
                                 1
                                 
                                 t
                                 ∈
                                 T
                                 ,
                              
                           
                        
                        
                           
                              (13)
                              
                                 
                                 
                                    
                                       z
                                    
                                    
                                       pt
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 (
                                 p
                                 ,
                                 t
                                 )
                                 ∈
                                 
                                    
                                       V
                                    
                                    
                                       r
                                    
                                 
                                 ,
                              
                           
                        
                        
                           
                              (14)
                              
                                 
                                 
                                    
                                       γ
                                    
                                    
                                       pt
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       γ
                                    
                                    
                                       pt
                                    
                                    
                                       0
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 (
                                 p
                                 ,
                                 t
                                 )
                                 ∈
                                 
                                    
                                       V
                                    
                                    
                                       r
                                    
                                 
                                 ,
                              
                           
                        
                        
                           
                              (15)
                              
                                 
                                 
                                    
                                       v
                                    
                                    
                                       ct
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 c
                                 ∈
                                 C
                                 ,
                                 
                                 t
                                 ∈
                                 T
                                 .
                              
                           
                        
                     

The objective (7) corresponds to the variable part of the reduced cost coefficient of a column given in (6). The number of patients transferred into the room schedule is 
                           
                              
                                 
                                    γ
                                 
                                 
                                    i
                                 
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    (
                                    p
                                    ,
                                    t
                                    )
                                    ∈
                                    
                                       
                                          V
                                       
                                       
                                          r
                                       
                                    
                                 
                              
                              
                              
                                 
                                    γ
                                 
                                 
                                    pt
                                 
                                 
                                    i
                                 
                              
                           
                         and the number of patients transferred out of the room schedule is 
                           
                              
                                 
                                    γ
                                 
                                 
                                    o
                                 
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    (
                                    p
                                    ,
                                    t
                                    )
                                    ∈
                                    
                                       
                                          V
                                       
                                       
                                          r
                                       
                                    
                                 
                              
                              
                              
                                 
                                    γ
                                 
                                 
                                    pt
                                 
                                 
                                    o
                                 
                              
                           
                        . Constraints (8) ensure that the room capacity is not violated. For each patient in each period within the patient’s admission, constraints (9) and (10) measure, respectively, whether or not the patient is transferred into the room and whether or not the patient is transferred out of the room. Next, constraints (11) and (12) enforce the gender policy where only one category, as defined above, is allowed into the room in each period. If we only have a single category, then 
                           
                              |
                              C
                              |
                              =
                              1
                           
                         and constraints (11) and (12) would be redundant. Finally, variable types are stated in (13)–(15). Note that if the 
                           
                              
                                 
                                    z
                                 
                                 
                                    pt
                                 
                              
                           
                        -variables are binary, then the other variables will take binary values in an optimal solution, and thus we let the other variables be standard non-negative continuous variables.

Instead of solving model (7)–(15) directly, we use a variety of heuristics and dynamic programming algorithms to solve the pricing problems. We use heuristics as, most of the time, they yield sufficiently good columns with negative reduced cost using only short computation time. When the heuristics cannot identify any negative reduced cost columns, we turn to an exact dynamic programming approach, which gives a number of negative reduced cost columns if any such columns exist.

We primarily use three different pricing heuristics. The two first are based on greedily selecting patients for their full stay by increasing contribution to the reduced-cost coefficient. In this way, we avoid the penalties of transferring patients into and out of the room. The first heuristic greedily selects the patient with the most negative contribution to the reduced cost which is compatible with the already allocated patients. In this heuristic, patients are not selected according to the time interval during which they occupy the bed and, as a consequence, the corresponding schedule can display unused beds on many days. To remedy this, the second heuristic increments the time period, t, such that we can only select patients, p, with 
                           
                              
                                 
                                    a
                                 
                                 
                                    p
                                 
                              
                              =
                              t
                           
                        . Then, patients starting in period t are selected greedily as long as they are compatible with already allocated patients. If no more patients can be found, the period t is incremented and the process is repeated.

The third heuristic is based on the following observation. If the room has only one bed, i.e. capacity 
                           
                              
                                 
                                    Q
                                 
                                 
                                    r
                                 
                              
                              =
                              1
                           
                        , then the pricing problem reduces to a shortest-path problem in a directed acyclic graph. The graph has an origin node and a destination node, as well as a node for each patient-time combination where the patient is compatible with the room type. In addition, a set of auxiliary nodes – one node for each period – is used to indicate that the bed is not occupied. An arc is only present between a pair of nodes if the period for the tail node is one less than the period for the head node. The graph is thereby layered and the origin node has arcs into the first layer and the nodes in the last layer have arcs to the destination node. The cost on an arc corresponds to the reduced cost contribution of having the nodes in sequence. Hence, solving this shortest-path problem from the origin node to the destination node and multiplying the resulting value with the room capacity yields a lower bound on the pricing problem (7)–(15). Subtracting 
                           
                              
                                 
                                    σ
                                 
                                 
                                    r
                                 
                              
                           
                         from this lower bound gives a lower bound on the reduced-cost coefficient of any schedule for room type r. On the other hand, if we resolve the shortest-path problem, where we have removed the patients not compatible with the patients found on previous shortest paths, then we will get a feasible room schedule, where each path corresponds to the occupation of a single bed in the room throughout the planning period. Thus, solving the increasingly restricted shortest-path problem 
                           
                              
                                 
                                    Q
                                 
                                 
                                    r
                                 
                              
                           
                         times results in a feasible room schedule. In contrast to the two first greedy heuristics, the shortest-path based heuristic allows transfers.

The two first heuristics are very fast and are both run for each room type in each pricing iteration. The shortest-path based heuristic is run only for those room types which have a negative lower bound on the reduced costs.

When the heuristics cannot identify any negative reduced cost room schedules, we solve the pricing for a subset of room types by dynamic programming. The sequence in which we try to price out each room type is based on the lower bound on the reduced cost for any schedule for the room type. We select the room types in increasing value of the lower bound of the reduced cost. If the number of negative reduced cost columns obtained is sufficiently large, then the exact pricing is prematurely terminated. If not, then the dynamic programming algorithm is run on all room types having a negative lower bound on the reduced cost.

The dynamic programming approach uses the increasing days 
                           
                              t
                              ∈
                              T
                           
                         as stages and 
                           
                              (
                              
                                 
                                    C
                                 
                                 
                                    t
                                 
                              
                              (
                              S
                              )
                              ,
                              S
                              )
                           
                         as states, where 
                           
                              S
                              ⊆
                              
                                 
                                    P
                                 
                                 
                                    r
                                 
                              
                           
                         having 
                           
                              |
                              S
                              |
                              ⩽
                              
                                 
                                    Q
                                 
                                 
                                    r
                                 
                              
                           
                         and all patients in S are compatible with each other, i.e. they do not violate the gender policy. 
                           
                              
                                 
                                    C
                                 
                                 
                                    t
                                 
                              
                              (
                              S
                              )
                           
                         is then the lowest penalty with which we can obtain S in period t using any feasible sequence of sets 
                           
                              
                                 
                                    S
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    S
                                 
                                 
                                    t
                                    -
                                    1
                                 
                              
                           
                        . Given two sets, 
                           
                              
                                 
                                    S
                                 
                                 
                                    ′
                                 
                              
                           
                         and S, we let 
                           
                              
                                 
                                    γ
                                 
                                 
                                    t
                                    -
                                    1
                                    ,
                                    t
                                 
                                 
                                    i
                                 
                              
                              (
                              
                                 
                                    S
                                 
                                 
                                    ′
                                 
                              
                              ,
                              S
                              )
                           
                         be a function calculating the number of patients transferred in from 
                           
                              
                                 
                                    S
                                 
                                 
                                    ′
                                 
                              
                           
                         to S. Likewise, we let 
                           
                              
                                 
                                    γ
                                 
                                 
                                    t
                                    -
                                    1
                                    ,
                                    t
                                 
                                 
                                    o
                                 
                              
                              (
                              
                                 
                                    S
                                 
                                 
                                    ′
                                 
                              
                              ,
                              S
                              )
                           
                         be the number of patients transferred out of the room schedule from 
                           
                              
                                 
                                    S
                                 
                                 
                                    ′
                                 
                              
                           
                         to S. Note that these two functions do not add newly arrived patients or discharged patients. If we let 
                           
                              
                                 
                                    F
                                 
                                 
                                    t
                                 
                              
                           
                         be the set of feasible subsets 
                           
                              S
                              ⊆
                              
                                 
                                    P
                                 
                                 
                                    r
                                 
                              
                           
                         satisfying (1) each patient 
                           
                              p
                              ∈
                              S
                           
                         the patient has to be admitted, i.e. 
                           
                              
                                 
                                    a
                                 
                                 
                                    p
                                 
                              
                              ⩽
                              t
                              <
                              
                                 
                                    b
                                 
                                 
                                    p
                                 
                              
                           
                        ; (2) the number of patients in the room at time t is no larger than the number of beds available, i.e. 
                           
                              |
                              S
                              |
                              ⩽
                              
                                 
                                    Q
                                 
                                 
                                    r
                                 
                              
                           
                        ; and (3) the gender policy of the room is satisfied. Then we can calculate 
                           
                              
                                 
                                    C
                                 
                                 
                                    t
                                 
                              
                              (
                              S
                              )
                           
                         by the following recursion:
                           
                              (16)
                              
                                 
                                    
                                       C
                                    
                                    
                                       t
                                    
                                 
                                 (
                                 S
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            p
                                                            ∈
                                                            S
                                                         
                                                      
                                                   
                                                   (
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         pr
                                                      
                                                   
                                                   -
                                                   
                                                      
                                                         π
                                                      
                                                      
                                                         pt
                                                      
                                                   
                                                   )
                                                   ,
                                                
                                                
                                                   t
                                                   =
                                                   1
                                                   ,
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            p
                                                            ∈
                                                            S
                                                         
                                                      
                                                   
                                                   (
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         pr
                                                      
                                                   
                                                   -
                                                   
                                                      
                                                         π
                                                      
                                                      
                                                         pt
                                                      
                                                   
                                                   )
                                                   +
                                                   
                                                      
                                                         
                                                            min
                                                         
                                                         
                                                            
                                                               
                                                                  S
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            ∈
                                                            
                                                               
                                                                  F
                                                               
                                                               
                                                                  t
                                                                  -
                                                                  1
                                                               
                                                            
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  C
                                                               
                                                               
                                                                  t
                                                                  -
                                                                  1
                                                               
                                                            
                                                            (
                                                            
                                                               
                                                                  S
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                   
                                                
                                                
                                             
                                             
                                                
                                                   
                                                   
                                                      
                                                         
                                                            +
                                                            
                                                               
                                                                  t
                                                               
                                                               
                                                                  i
                                                               
                                                            
                                                            
                                                               
                                                                  γ
                                                               
                                                               
                                                                  t
                                                                  -
                                                                  1
                                                                  ,
                                                                  t
                                                               
                                                               
                                                                  i
                                                               
                                                            
                                                            (
                                                            
                                                               
                                                                  S
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            ,
                                                            S
                                                            )
                                                            +
                                                            
                                                               
                                                                  t
                                                               
                                                               
                                                                  o
                                                               
                                                            
                                                            
                                                               
                                                                  γ
                                                               
                                                               
                                                                  t
                                                                  -
                                                                  1
                                                                  ,
                                                                  t
                                                               
                                                               
                                                                  o
                                                               
                                                            
                                                            (
                                                            
                                                               
                                                                  S
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            ,
                                                            S
                                                            )
                                                         
                                                      
                                                   
                                                
                                                
                                                   t
                                                   >
                                                   1
                                                   .
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

At each stage, the dynamic programming constructs the sets S and identifies their cost by the recursion (16). The size of 
                           
                              
                                 
                                    F
                                 
                                 
                                    t
                                 
                              
                           
                         is exponential in 
                           
                              
                                 
                                    Q
                                 
                                 
                                    r
                                 
                              
                           
                         and 
                           
                              |
                              
                                 
                                    P
                                 
                                 
                                    r
                                 
                              
                              |
                           
                        , and thus this algorithm is not polynomially bounded in the worst case. We can, however, apply preprocessing as well as dominance criteria between states, which significantly reduces the computation times. The preprocessing is stronger the closer the solution of the pricing problem is to price out, which makes it possible to solve the dynamic programming problem for a single room in less than a second in most cases. The reader is referred to Range, Lusby, and Larsen (in press) for further details on the preprocessing, the dynamic programming algorithm as well as the shortest-path based bound.

Dynamic constraint aggregation is a technique for efficiently solving large set partitioning problems. Set partitioning problems with a large row dimension are notoriously degenerate, and this often results in excessively long solution times for the resulting linear programs. Dynamic constraint aggregation attempts to reduce the row dimension (and hence the potential degeneracy) of set partitioning problems by partitioning the constraints into aggregated sets of constraints, known as clusters. The set partitioning problem is then restated in terms of the clusters; that is, there is one partitioning constraint for each cluster. The reduced size of the aggregated problem means it is also easier to solve.

Naturally, the aggregation impacts the columns that can be included in the model. Only columns that are compatible with the aggregation are considered in the optimization. A column is said to be compatible if it covers all elements of a cluster or none of them. Due to the possibility of excluding favorable columns depending on the choice of aggregation, the aggregation is dynamically updated if one detects incompatible columns that have a favorable reduced cost. A theoretical framework for this methodology was first proposed by Villeneuve (1999), while the first implementation of dynamic constraint aggregation can be found in Elhallaoui, Villeneuve, Soumis, and Desaulniers (2005). Elhallaoui, Metrane, Soumis, and Desaulniers (2010) make the procedure so-called multi phase. In the multi phase approach a strategy for pricing columns in order of increasing incompatibility is incorporated.

According to Elhallaoui et al. (2005), the initial motivation for constraint aggregation arose in a crew scheduling application, where it was observed that crews very rarely change vehicles. A similar property is also true for the PAS problem; here the transferring of patients is extremely undesirable. That is, all patient-time combinations for a single patient are likely to be assigned to the same room schedule. Using this observation, one could consider all consecutive patient-time combinations for a certain patient as a single, aggregated patient-time combination. Formally, in patient admission scheduling, an aggregation of the partitioning constraints into a set of clusters 
                           
                              H
                           
                         results in a partition, Q, of 
                           
                              W
                           
                        . This is defined as follows:
                           
                              
                                 Q
                                 =
                                 {
                                 
                                    
                                       W
                                    
                                    
                                       h
                                    
                                 
                                 :
                                 h
                                 ∈
                                 H
                                 }
                                 ,
                                 
                                 where
                                 
                                 
                                    
                                       W
                                    
                                    
                                       i
                                    
                                 
                                 ∩
                                 
                                    
                                       W
                                    
                                    
                                       j
                                    
                                 
                                 =
                                 ∅
                                 
                                 ∀
                                 i
                                 ,
                                 j
                                 ∈
                                 H
                                 ,
                                 i
                                 
                                 ≠
                                 
                                 j
                                 ,
                                 
                                 
                                    
                                       
                                          ⋃
                                       
                                       
                                          h
                                          ∈
                                          H
                                       
                                    
                                 
                                 
                                    
                                       W
                                    
                                    
                                       h
                                    
                                 
                                 =
                                 W
                                 .
                              
                           
                        
                     

The aggregated master problem can be written as follows. Here all notation is the same as the disaggregated model with the exception of the indicator variables 
                              
                                 
                                    
                                       a
                                    
                                    
                                       sh
                                    
                                 
                              
                           . These simply indicate whether or not a given room schedule, 
                              
                                 s
                                 ∈
                                 
                                    
                                       S
                                    
                                    
                                       r
                                    
                                 
                              
                            (
                              
                                 r
                                 ∈
                                 R
                              
                           ), covers all the patient-time combinations contained in partition 
                              
                                 h
                                 ∈
                                 H
                              
                            or none of them.
                              
                                 (1)
                                 
                                    min
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             r
                                             ∈
                                             R
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             s
                                             ∈
                                             
                                                
                                                   S
                                                
                                                
                                                   r
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          c
                                       
                                       
                                          rs
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          rs
                                       
                                    
                                    ,
                                 
                              
                           
                           
                              
                                 (17)
                                 
                                    s
                                    .
                                    t
                                    .
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             r
                                             ∈
                                             R
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             s
                                             ∈
                                             
                                                
                                                   S
                                                
                                                
                                                   r
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          a
                                       
                                       
                                          sh
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          rs
                                       
                                    
                                    =
                                    1
                                    
                                    ∀
                                    h
                                    ∈
                                    H
                                    ,
                                 
                              
                           
                           
                              
                                 (3)
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             s
                                             ∈
                                             
                                                
                                                   S
                                                
                                                
                                                   r
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          rs
                                       
                                    
                                    ⩽
                                    
                                       
                                          N
                                       
                                       
                                          r
                                       
                                    
                                    
                                    ∀
                                    r
                                    ∈
                                    R
                                    ,
                                 
                              
                           
                           
                              
                                 (5)
                                 
                                    
                                    
                                       
                                          x
                                       
                                       
                                          rs
                                       
                                    
                                    ⩾
                                    0
                                    
                                    ∀
                                    r
                                    ∈
                                    R
                                    ,
                                    
                                    ∀
                                    s
                                    ∈
                                    
                                       
                                          S
                                       
                                       
                                          r
                                       
                                    
                                    .
                                 
                              
                           
                        

Observe that the objective function (1), constraints (3), and constraints (5) are inherited from the disaggregated model. The only difference arises in constraint set (17). Here there is now just one partitioning constraint for each partition 
                              
                                 h
                                 ∈
                                 H
                              
                           . To complete the description, we let 
                              
                                 
                                    
                                       α
                                    
                                    
                                       h
                                    
                                 
                              
                            be the dual variable value on constraint (17) associated with partition 
                              
                                 h
                                 ∈
                                 H
                              
                           . Since constraint set (3) is unchanged from the disaggregated model, the dual variable on constraint (3) associated with room type 
                              
                                 r
                                 ∈
                                 R
                              
                            remains 
                              
                                 
                                    
                                       σ
                                    
                                    
                                       r
                                    
                                 
                              
                           .

In order to generate new columns that are compatible with the disaggregated model (or prove that none exists), one must first obtain duals that are consistent with the disaggregated model by disaggregating the dual variable values obtained from the aggregated master problem. Elhallaoui et al. (2005) disaggregate duals by solving shortest-path problems in a specially designed graph. They observe that the dual has to satisfy
                              
                                 (18)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             w
                                             ∈
                                             
                                                
                                                   W
                                                
                                                
                                                   h
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          π
                                       
                                       
                                          w
                                       
                                    
                                    =
                                    
                                       
                                          α
                                       
                                       
                                          h
                                       
                                    
                                    ,
                                    
                                    ∀
                                    h
                                    ∈
                                    H
                                 
                              
                           in order for the disaggregated dual variable values to be consistent with the aggregated dual variable values. To further disaggregate the aggregated duals, the authors apply a heuristic based on a shortest-path problem where as many of the dual constraints for the incompatible columns are satisfied. The main reason for using the heuristic is that it is reasonably fast.

Here we present a new dual disaggregation strategy that is similar in structure to that of the linear programming model proposed by Elhallaoui, Metrane, Desaulniers, and Soumis (2011) for solving the so-called complementarity problem. This problem arises in the authors’ improved primal simplex algorithm and requires one to obtain a complete, feasible dual solution from a reduced problem. Instead of a complementarity problem we solve a dual feasibility problem directly. When applying dynamic constraint aggregation, we observe that only a small subset of clusters is actually violated. A violated cluster is one for which there exists an incompatible room schedule that covers some, but not all, of the patient-time combinations contained in the cluster. In what follows we denote the subset of non-violated (resp. violated) clusters as 
                              
                                 U
                                 ⊆
                                 H
                              
                            (resp. 
                              
                                 
                                    
                                       U
                                    
                                    
                                       ‾
                                    
                                 
                                 ⊆
                                 H
                              
                           ). Furthermore, we denote the set of room schedules for a certain room type, 
                              
                                 r
                                 ∈
                                 R
                              
                           , that are incompatible with the current aggregation as 
                              
                                 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             ‾
                                          
                                       
                                    
                                    
                                       r
                                    
                                    
                                       Q
                                    
                                 
                              
                           . Each of the compatible room schedules is included in the aggregated master problem and all relevant information that can be derived from these is contained in the aggregated dual 
                              
                                 
                                    
                                       α
                                    
                                    
                                       u
                                    
                                 
                              
                           , where 
                              
                                 u
                                 ∈
                                 U
                              
                           . As these aggregated duals can be disaggregated in any way such that (18) is feasible, the only columns of interest when disaggregating the aggregated dual variables are those representing incompatible room schedules. A dual constraint for any room schedule 
                              
                                 s
                                 ∈
                                 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             ‾
                                          
                                       
                                    
                                    
                                       r
                                    
                                    
                                       Q
                                    
                                 
                              
                           , where 
                              
                                 r
                                 ∈
                                 R
                              
                           , can be written as
                              
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             h
                                             ∈
                                             H
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             w
                                             ∈
                                             
                                                
                                                   W
                                                
                                                
                                                   h
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          a
                                       
                                       
                                          sw
                                       
                                    
                                    
                                       
                                          π
                                       
                                       
                                          w
                                       
                                    
                                    +
                                    
                                       
                                          σ
                                       
                                       
                                          r
                                       
                                    
                                    ⩽
                                    
                                       
                                          c
                                       
                                       
                                          rs
                                       
                                    
                                    .
                                 
                              
                           If we rewrite this in terms of the sets 
                              
                                 U
                              
                            and 
                              
                                 
                                    
                                       U
                                    
                                    
                                       ‾
                                    
                                 
                              
                            and move the constant terms to the right-hand side, we obtain
                              
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             u
                                             ∈
                                             
                                                
                                                   U
                                                
                                                
                                                   ‾
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             w
                                             ∈
                                             
                                                
                                                   W
                                                
                                                
                                                   u
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          a
                                       
                                       
                                          sw
                                       
                                    
                                    
                                       
                                          π
                                       
                                       
                                          w
                                       
                                    
                                    ⩽
                                    
                                       
                                          c
                                       
                                       
                                          rs
                                       
                                    
                                    -
                                    
                                       
                                          σ
                                       
                                       
                                          r
                                       
                                    
                                    -
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             u
                                             ∈
                                             U
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             w
                                             ∈
                                             
                                                
                                                   W
                                                
                                                
                                                   u
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          a
                                       
                                       
                                          sw
                                       
                                    
                                    
                                       
                                          π
                                       
                                       
                                          w
                                       
                                    
                                    .
                                 
                              
                           One knows by construction that no room schedule violates any cluster 
                              
                                 u
                                 ∈
                                 U
                              
                           . Thus, one can replace 
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       u
                                       ∈
                                       U
                                    
                                 
                                 
                                 
                                    
                                       ∑
                                    
                                    
                                       w
                                       ∈
                                       
                                          
                                             W
                                          
                                          
                                             u
                                          
                                       
                                    
                                 
                                 
                                 
                                    
                                       a
                                    
                                    
                                       sw
                                    
                                 
                                 
                                    
                                       π
                                    
                                    
                                       w
                                    
                                 
                              
                            with 
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       u
                                       ∈
                                       U
                                    
                                 
                                 
                                 
                                    
                                       a
                                    
                                    
                                       su
                                    
                                 
                                 
                                    
                                       α
                                    
                                    
                                       u
                                    
                                 
                              
                            and obtain
                              
                                 (19)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             u
                                             ∈
                                             
                                                
                                                   U
                                                
                                                
                                                   ‾
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             w
                                             ∈
                                             
                                                
                                                   W
                                                
                                                
                                                   u
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          a
                                       
                                       
                                          sw
                                       
                                    
                                    
                                       
                                          π
                                       
                                       
                                          w
                                       
                                    
                                    ⩽
                                    
                                       
                                          c
                                       
                                       
                                          rs
                                       
                                    
                                    -
                                    
                                       
                                          σ
                                       
                                       
                                          r
                                       
                                    
                                    -
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             u
                                             ∈
                                             U
                                          
                                       
                                    
                                    
                                       
                                          a
                                       
                                       
                                          su
                                       
                                    
                                    
                                       
                                          α
                                       
                                       
                                          u
                                       
                                    
                                    .
                                 
                              
                           This constraint must be satisfied if the aggregated dual solution is an optimal dual solution to the disaggregated master problem. To ease the notation, we let 
                              
                                 
                                    
                                       y
                                    
                                    
                                       rs
                                    
                                 
                                 =
                                 
                                    
                                       c
                                    
                                    
                                       rs
                                    
                                 
                                 -
                                 
                                    
                                       σ
                                    
                                    
                                       r
                                    
                                 
                                 -
                                 
                                    
                                       ∑
                                    
                                    
                                       u
                                       ∈
                                       U
                                    
                                 
                                 
                                 
                                    
                                       a
                                    
                                    
                                       su
                                    
                                 
                                 
                                    
                                       α
                                    
                                    
                                       u
                                    
                                 
                              
                            and formulate the following LP to determine if the aggregated dual variables can be successfully disaggregated.
                              
                                 (20)
                                 
                                    min
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             r
                                             ∈
                                             R
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             s
                                             ∈
                                             
                                                
                                                   
                                                      
                                                         S
                                                      
                                                      
                                                         ‾
                                                      
                                                   
                                                
                                                
                                                   r
                                                
                                                
                                                   Q
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          μ
                                       
                                       
                                          rs
                                       
                                    
                                    ,
                                 
                              
                           
                           
                              
                                 (21)
                                 
                                    s
                                    .
                                    t
                                    .
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             w
                                             ∈
                                             
                                                
                                                   W
                                                
                                                
                                                   u
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          π
                                       
                                       
                                          w
                                       
                                    
                                    =
                                    
                                       
                                          α
                                       
                                       
                                          u
                                       
                                    
                                    
                                    ∀
                                    u
                                    ∈
                                    
                                       
                                          U
                                       
                                       
                                          ‾
                                       
                                    
                                    ,
                                 
                              
                           
                           
                              
                                 (22)
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             u
                                             ∈
                                             
                                                
                                                   U
                                                
                                                
                                                   ‾
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             w
                                             ∈
                                             
                                                
                                                   W
                                                
                                                
                                                   u
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          a
                                       
                                       
                                          sw
                                       
                                    
                                    
                                       
                                          π
                                       
                                       
                                          w
                                       
                                    
                                    -
                                    
                                       
                                          μ
                                       
                                       
                                          rs
                                       
                                    
                                    ⩽
                                    
                                       
                                          y
                                       
                                       
                                          rs
                                       
                                    
                                    
                                    ∀
                                    r
                                    ∈
                                    R
                                    ,
                                    
                                    s
                                    ∈
                                    
                                       
                                          
                                             
                                                S
                                             
                                             
                                                ‾
                                             
                                          
                                       
                                       
                                          r
                                       
                                       
                                          Q
                                       
                                    
                                    ,
                                 
                              
                           
                           
                              
                                 (23)
                                 
                                    
                                    
                                       
                                          μ
                                       
                                       
                                          rs
                                       
                                    
                                    ⩾
                                    0
                                    
                                    ∀
                                    r
                                    ∈
                                    R
                                    ,
                                    
                                    s
                                    ∈
                                    
                                       
                                          
                                             
                                                S
                                             
                                             
                                                ‾
                                             
                                          
                                       
                                       
                                          r
                                       
                                       
                                          Q
                                       
                                    
                                    ,
                                 
                              
                           
                           
                              
                                 (24)
                                 
                                    
                                    
                                       
                                          π
                                       
                                       
                                          w
                                       
                                    
                                    ⩾
                                    0
                                    
                                    ∀
                                    w
                                    ∈
                                    W
                                    .
                                 
                              
                           Here, 
                              
                                 
                                    
                                       μ
                                    
                                    
                                       rs
                                    
                                 
                              
                            (where 
                              
                                 r
                                 ∈
                                 R
                                 ,
                                 s
                                 ∈
                                 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             ‾
                                          
                                       
                                    
                                    
                                       r
                                    
                                    
                                       Q
                                    
                                 
                              
                           ) are auxiliary variables capturing the magnitude of violation for the relevant dual constraint (19). The objective function, given by (20), minimizes the sum of the violations. Constraint set (21) enforces the requirement that the sum of the disaggregated dual variables is the value of the aggregated dual, while constraints (22) determine the magnitude of violation in constraints (19). Constraints (23) are the non-negativity requirements on the 
                              
                                 
                                    
                                       μ
                                    
                                    
                                       rs
                                    
                                 
                              
                            variables. Finally, we also add constraints (24) to ensure that the disaggregated dual variables are also non-negative. This is because we relax the partitioning constraints (17) to be covering constraints when solving the aggregated master problem and thus restrict the dual variables to be non-negative, effectively stabilizing them. By restricting the sign of the aggregated dual variables 
                              
                                 
                                    
                                       α
                                    
                                    
                                       h
                                    
                                 
                              
                            (
                              
                                 h
                                 ∈
                                 H
                              
                           ) to be non-negative, we can automatically set 
                              
                                 
                                    
                                       π
                                    
                                    
                                       w
                                    
                                 
                                 =
                                 0
                              
                            for 
                              
                                 w
                                 ∈
                                 
                                    
                                       W
                                    
                                    
                                       h
                                    
                                 
                              
                            whenever 
                              
                                 
                                    
                                       α
                                    
                                    
                                       h
                                    
                                 
                                 =
                                 0
                              
                            (
                              
                                 h
                                 ∈
                                 H
                              
                           ). This stabilizing technique gives a significant speed up when solving the dual disaggregation problem.

If one obtains an objective function value of zero when solving this problem, dual disaggregation is indeed feasible and the solution can be used to price new columns; however, if the converse is true, i.e. if there is at least one room schedule for which the corresponding 
                              
                                 
                                    
                                       μ
                                    
                                    
                                       rs
                                    
                                 
                                 >
                                 0
                              
                           , then the aggregated dual solution can never be optimal for the disaggregated problem and reaggregation is necessary. When reaggregating, room schedules with 
                              
                                 
                                    
                                       μ
                                    
                                    
                                       rs
                                    
                                 
                                 >
                                 0
                              
                            are forced into the aggregation to ensure that they are compatible with the aggregation.

An overview of the solution approach is depicted in Fig. 2
                           . As a starting point, the algorithm requires one to construct an initial aggregation. To do this, we implement a greedy, daily assignment heuristic with look-ahead penalties to yield an upper bound. It should be noted that if a patient is incompatible with the room (or bed) then a large penalty is added. If it is not possible to make a fully compatible assignment of all patients on a given day, then the daily assignment problem will return a solution which incurs this large penalty at least once, indicating that the problem is infeasible for that given day. The initial aggregation is based on this heuristic solution. Following this the algorithm enters an iterative loop between the master problem and room type pricing problems. For each pricing problem the three heuristics described in Section 3.2 are solved and if they do not provide sufficiently negative reduced cost columns, then the exact dynamic programming pricing algorithm is executed. If no pricing problem returns a room schedule with negative reduced cost, the current set of room schedules in the relaxed, aggregated master problem is optimal. Otherwise, a decision on whether the aggregation should be revised or not is made. Typically, the decision to reaggregate is based on the number of incompatible columns returned from the pricing problems. If only incompatible columns are returned, reaggregation is necessary, while if only compatible columns are returned, no change to the aggregation is necessary. In the case where both incompatible and compatible columns are returned a decision is usually based on the ratio of the best reduced cost from each set. In the computational results we refer to this as the Dynamic Constraint Aggregation (DCA) method.

The previous sections describe a column generation based approach for solving the relaxed master problem. However, to find a solution to the original problem, i.e. model (1)–(4), one must reintroduce the binary restriction on the decision variables where it is violated. In this section we describe several variable fixing routines based on the work of Lusby, Dohn, Range, and Larsen (2012) that can be used to obtain an integer solution to the original formulation.

When implementing column generation, the most conventional approach to obtain an integer solution is to incorporate the procedure in a branch-and-price framework. This is akin to the normal branch-and-bound procedure for solving mixed integer programming (MIP) problems, with the exception that columns are dynamically added at each node of the branch-and-bound tree. Since the relaxed master problem only contains a subset of the possible columns of the original model, the pricing problem(s) must be solved at each node of the branch-and-bound tree to ensure optimality of the procedure.

For binary integer programs, one typically employs variable branching. With this approach one identifies a fractional variable in the solution to the relaxed problem and then partitions the solution space into two disjoint subspaces (branches). In the left branch the variable is bounded downwards (i.e. assumes the value of zero), while in the right branch the variable is forced to take its upper bound value of one. This approach, however, does not transfer easily to a column generation setting. In column generation, the property that prevents one from regenerating previously generated variables is the reduced cost of a variable. Existing basic variables have a reduced cost of zero, while existing non-basic variables have a non-negative reduced cost. This is, however, not true for variables with an upper bound. Non-basic variables with a value equal to their upper bound can have a negative reduced cost. One can enforce the bounds on the variables by adding relevant constraints to the master problem. The corresponding dual variables on these constraints can then be included in the reduced cost calculation to ensure that all variables have a non-negative reduced cost. However, it is usually extremely cumbersome to monitor the dual costs for individual variables in the pricing problem. The more preferred approach is a branching strategy that results in minimal changes to the master and pricing problems.

The method of constraint branching developed by Ryan and Foster (1981) is well suited to set partitioning, set packing, and set covering problems, and is often easily incorporated into a column generation approach. This approach requires one to identify two constraints (each with a unit right-hand side) that are covered fractionally in an optimal solution to a relaxed version of the problem. Based on the identification of a such a pair of constraints, one then partitions the solution space into two subspaces. In the left branch the two constraints are required to be covered by the same variable, while in the right branch it is required that they are covered by different variables. From a column generation perspective, it is usually easy to implement such a procedure. Upon identifying a branch, one removes from the current master problem those variables that are inconsistent with branch and then ensures that the pricing problem does not return any variables that do not satisfy the branch by modifying the pricing problem in some way. Typically this approach is preferred in a column generation context as one can circumvent the need for additional constraints (and the necessary dual variables) in the master problem.

For the PAS problem, constraint branching is theoretically possible; however, it is unlikely to perform well. The power of the constraint branch technique relies on unit right hand sides and this is not the case here (see e.g. Constraint (3)). Furthermore, since it is possible for a room type to have more than one bed, forcing a particular patient-time combination into a particular room schedule for a certain room type does not have a large impact on the patient-time combinations of other patients. Preliminary experiments confirmed this. Coupling the weakness of constraint branching technique here with a severely degenerate generalized set partitioning problem suggests that an exact branch-and-price strategy is unlikely to be successful. Since this is a problem arising in practice, where excessive run times are undesirable, we prefer to implement a heuristic branching strategy where the main focus is to quickly find an integer solution of high quality. The approach we adopt is the aggressive variable fixing strategy of Lusby et al. (2012). This was proven to be an extremely efficient approach on the generalized set covering problem. The idea is to identify variables to fix in an optimal, fractional solution. Due to the difficulties associated with bounding variables from above in column generation, solely lower bounds are introduced. As the PAS problem is modeled as a binary integer program, enforcing a lower bound of one on a decision variable will be equivalent to fixing the variable at one. In what follows, we describe the variable fixing routines as they apply to the PAS problem.

Consider an optimal solution, 
                           
                              
                                 
                                    x
                                 
                                 
                                    ∗
                                 
                              
                           
                        , to the relaxed master problem. If 
                           
                              
                                 
                                    x
                                 
                                 
                                    rs
                                 
                                 
                                    ∗
                                 
                              
                              ∈
                              {
                              0
                              ,
                              1
                              }
                              ,
                              
                              ∀
                              r
                              ∈
                              R
                              ,
                              s
                              ∈
                              
                                 
                                    S
                                 
                                 
                                    r
                                 
                              
                           
                        , then 
                           
                              
                                 
                                    x
                                 
                                 
                                    ∗
                                 
                              
                           
                         is also a solution to the original problem, and the algorithm terminates. If this is not the case, we consider the fractional component of each of the variables 
                           
                              
                                 
                                    f
                                 
                                 
                                    rs
                                 
                                 
                                    ∗
                                 
                              
                              =
                              
                                 
                                    x
                                 
                                 
                                    rs
                                 
                                 
                                    ∗
                                 
                              
                              -
                              ⌊
                              
                                 
                                    x
                                 
                                 
                                    rs
                                 
                                 
                                    ∗
                                 
                              
                              ⌋
                           
                         and determine which one(s) to fix to a new lower bound of one. The criterion for fixing a variable to one is based on a pre-specified threshold 
                           
                              τ
                           
                         (with 
                           
                              0
                              ⩽
                              τ
                              ⩽
                              1
                              )
                           
                        . All variables whose fractional value is at least 
                           
                              τ
                           
                         have their lower bounds changed from zero to one. That is, we enforce
                           
                              (25)
                              
                                 
                                    
                                       x
                                    
                                    
                                       rs
                                    
                                 
                                 ⩾
                                 1
                                 ,
                                 
                                 ∀
                                 r
                                 ∈
                                 R
                                 ,
                                 
                                 s
                                 ∈
                                 
                                    
                                       S
                                    
                                    
                                       r
                                    
                                 
                                 :
                                 
                                    
                                       f
                                    
                                    
                                       rs
                                    
                                    
                                       ∗
                                    
                                 
                                 ⩾
                                 τ
                                 .
                              
                           
                        
                     

If 
                           
                              
                                 
                                    f
                                 
                                 
                                    rs
                                 
                                 
                                    ∗
                                 
                              
                              <
                              τ
                              ,
                              
                              ∀
                              r
                              ∈
                              R
                              ,
                              s
                              ∈
                              
                                 
                                    S
                                 
                                 
                                    r
                                 
                              
                           
                        , we enforce the requirement that the variable with the largest fractional value is fixed to one. The approach effectively generates one path in the full branch-and-price tree. This fixing strategy is termed the Decreasing Fractional Ordering (DFR) method.

Unlike in the work of Lusby et al. (2012), this approach may not result in a feasible integer solution here. This is because patients only have a set of room types to which they can be assigned. In other words, not all patients can be assigned to all room types, and some patients are definitely more flexible with respect to this property than others. Through a sequence of potentially greedy variable fixings, it is possible to arrive at a situation where there are no feasible room types left for a particular patient. To guard against this possibility, we offer an alternative strategy. The procedure first identifies for each patient the room schedule that the patient fractionally covers the most (i.e. one room schedule for each patient). These fractional values are first sorted by patient flexibility, where flexibility is measured as the number of remaining feasible room types for the patient, and then in order of decreasing magnitude. Based on this ranking, the largest fractional variable for the room schedule containing the least flexible patient is chosen as the variable to fix. This alternative fixing strategy is termed the Increasing Flexible Ordering (IFL) method.

Prior to enforcing the fixing, a look-ahead procedure quickly determines whether fixing the chosen variable will result in infeasibility on the next iteration. If this is the case, we consider the next patient in the ranked list. This has an impact when we change the order in which the patients are ranked. For the DFR method we clearly select the column with the largest fractional value regardless of the threshold. If the look-ahead procedure determines that fixing the column will result in infeasibility in the next iteration, then it is not fixed. On the other hand, if it is fixed, the next fixing has to take into account that the previous column was fixed when checking for infeasibilities. In the IFL case, we select the columns while the column value is still at least equal to the threshold. Again we have to check for infeasibilities, and this may yield another set of columns being fixed compared to the previous strategy. In case no column above the threshold can be fixed, then the first possible column for each of the orderings is fixed. Note that for the IFL case we may select columns with significantly smaller values than in the DFR case.

An alternative approach of ranking columns is to use a weighted sum of different criteria and choose the column(s) having the smallest weighted sum. An obvious criterion is to use the value of the variable, i.e. 
                           
                              1
                              -
                              
                                 
                                    x
                                 
                                 
                                    rs
                                 
                                 
                                    ∗
                                 
                              
                           
                        . If we only use this criterion, then we will get a similar approach to the threshold approaches described above, with a threshold of one. Therefore, we add another criterion. As discussed above, fixing only on the largest variable value may yield a situation where it is not feasible to fix any of the remaining columns in the last iterations. Thus, we take the least flexible patient into account in another way. On average, the penalty of having the patient p in the hospital for a single period in the solution 
                           
                              
                                 
                                    x
                                 
                                 
                                    ∗
                                 
                              
                           
                         is
                           
                              
                                 
                                    
                                       
                                          
                                             d
                                          
                                          
                                             ‾
                                          
                                       
                                    
                                    
                                       p
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 
                                    
                                       d
                                    
                                    
                                       rp
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          s
                                          ∈
                                          S
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          p
                                          ,
                                          t
                                          )
                                          ∈
                                          W
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             a
                                          
                                          
                                             (
                                             p
                                             ,
                                             t
                                             )
                                             s
                                          
                                       
                                    
                                    
                                       
                                          
                                             d
                                          
                                          
                                             p
                                          
                                       
                                       -
                                       
                                          
                                             a
                                          
                                          
                                             p
                                          
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       sr
                                    
                                    
                                       ∗
                                    
                                 
                                 .
                              
                           
                        For each patient, p, we then say that good available compatible room types r are those which are in fact available as well as compatible and also have 
                           
                              
                                 
                                    d
                                 
                                 
                                    rp
                                 
                              
                              ⩽
                              
                                 
                                    
                                       
                                          d
                                       
                                       
                                          ‾
                                       
                                    
                                 
                                 
                                    p
                                 
                              
                           
                        . The latter part states that any room type having too high a patient-room penalty will not be considered a good compatible room type. For each room schedule we identify the patient having the least number of good compatible rooms. If we normalize this with the difference between the patient having the largest number of good compatible rooms and the patient having the least number of good compatible rooms then we have the second criterion used in the fixing. We let 
                           
                              
                                 
                                    β
                                 
                                 
                                    f
                                 
                              
                           
                         be the weight of the first criterion (i.e. of 
                           
                              1
                              -
                              
                                 
                                    x
                                 
                                 
                                    rs
                                 
                                 
                                    ∗
                                 
                              
                           
                        ) and 
                           
                              
                                 
                                    β
                                 
                                 
                                    c
                                 
                              
                           
                         be the weight of the second criterion (the normalized number of good available compatible rooms).

Finally, when a lower bound of one is imposed on any given variable, a check is made to see if there is any spare capacity in the room schedule being fixed. If this is the case, those patients not contained in the room schedule, but fractionally assigned to other room schedules, are considered and an attempt is made to assign each of them to the room schedule being fixed without incurring a total penalty greater than what they currently have. If a patient can be assigned (and while there is still capacity in the room schedule), the change is made. Note that if we did not consider this, we would simply waste spare capacity.

We observe that the room schedules in the LP solution tend to be unfilled, which is the reason for filling up room schedules when fixing them. This is likely due to over-capacity of the available beds and rooms, as well as patients may incur the same penalty when being allocated to different room types i.e. the rooms are equally bad from that patient’s perspective. As a consequence, it does not matter for the algorithm in which room type the patient is placed, and the column generation will converge towards an arbitrary alternative solution. From the point of view of the variable fixing this may be prohibiting because we have no control of how many different room types are still available. Whenever a room type becomes unavailable, then we risk having patients who cannot have their requirements met. Hence, we are interested in having as many different room types available as possible. To this end, we change the master problem slightly by penalizing the use of the last room of each type. Suppose that 
                           
                              δ
                           
                         is the penalty of using the last room of a type, and let 
                           
                              0
                              ⩽
                              
                                 
                                    v
                                 
                                 
                                    r
                                 
                              
                              ⩽
                              1
                           
                         measure the magnitude of usage of the last room. Then we change the objective (1) of the master problem to
                           
                              (26)
                              
                                 min
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          s
                                          ∈
                                          
                                             
                                                S
                                             
                                             
                                                r
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       rs
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       rs
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 δ
                                 
                                    
                                       v
                                    
                                    
                                       r
                                    
                                 
                              
                           
                        and the upper bound constraint (3) on the number of room types to
                           
                              (27)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          s
                                          ∈
                                          
                                             
                                                S
                                             
                                             
                                                r
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       rs
                                    
                                 
                                 ⩽
                                 
                                    
                                       N
                                    
                                    
                                       r
                                    
                                 
                                 -
                                 1
                                 +
                                 
                                    
                                       v
                                    
                                    
                                       r
                                    
                                 
                                 ,
                                 
                                 ∀
                                 r
                                 ∈
                                 R
                                 ,
                              
                           
                        leaving the remaining constraints (17) and (5) in the aggregated master problem unchanged. Selecting 
                           
                              δ
                              >
                              0
                           
                         sufficiently small will force the column generation to choose the alternative solution where as many different room types are available as possible. Note that setting 
                           
                              δ
                           
                         too large will most likely increase the objective value in terms of the original objective (1). In the computational results this is referred to as the room penalty extension, hence combining it with the DCA method we get the DCA RP method. If we select 
                           
                              δ
                              =
                              0
                           
                        , we will have a model where each solution has the value of the original model.

In this section we discuss the effectiveness of the proposed algorithm by comparing its performance on the 12 of the 13 benchmark instances provided by Demeester et al. (2010).
                        3
                        Instance 13 is omitted as it has a different structure than the remaining test instances. The difference lies in the multispecialism patients. If transfers are allowed between the multiple specialisms without a transfer penalty then the patient could be split into two virtual patients and the instance could be solved in the same way as the other instances. On the other hand Ceschia and Schaerf (2011) actually impose a transfer penalty for the mutispecialism patients. This would require making the patient-room penalty time dependent, which has not been implemented in our model.
                     
                     
                        3
                      The first six instances all contain a time horizon of 14days, while the remaining seven instances contain between 14 and 91days, and are more difficult. The latter set of instances contain more room properties, different gender properties, and also enforce age constraints on the departments. For comparative purposes, we will compare with the best known bounds, running times, and solutions obtained by Ceschia and Schaerf (2011). It should be noted that Ceschia and Schaerf (2011) use a relaxation of the original model, where the hard constraints corresponding to gender segregation, mandatory room properties and age limitations are treated as soft constraints with objective values per unit of violation given in Table 1. As a consequence, our results will naturally yield larger objective values both in the LP-relaxation as well as the integer solutions. However, we still use the results obtained by Ceschia and Schaerf (2011) as an indication of the performance of our method.

In order to make this comparison we use the standard penalties described by Demeester et al. (2010). As a point of reference, Table 2
                      provides a summary of all instances we consider. It reports for each instance, the number of rooms (Rooms), the number of room types (
                        
                           |
                           R
                           |
                        
                     ), the number of beds (Beds), the number of patients (
                        
                           |
                           P
                           |
                        
                     ), the number of time periods (
                        
                           |
                           T
                           |
                        
                     ), the number of patient-time combinations (
                        
                           |
                           W
                           |
                        
                     ), the number of departments at the hospital (D), the number different room properties (Pr), and the number of different specialisms (Sp). Furthermore, the table includes the occupancy (O), the average number of compatible rooms for a patient (ACR), the average number of ideal rooms (AIR), where a room is ideal if it is compatible and has a zero penalty, and the average of the average patient room penalty (APRP).

It can be seen from the table that the first six instances have significantly more compatible rooms than the last six instances. As a consequence it will be harder to identify a feasible solution for the last six instances. Furthermore, it can be observed that the number of ideal rooms also decreases and the average patient room penalty increases. Hence, one would expect to have more violation of the soft constraints in the last six instances than in the first six.

Our approach has been implemented in C++ using the MinGW 4.5.2 compiler. We have used the Coin-or interface to the IBM CPLEX 12.2 32-bit solver with default settings to solve the LP relaxation of the master problems, as well as the dual disaggregation problem. The computational tests have been performed on a Windows 7 laptop equipped with an Intel i7 cpu and 8gigabytes RAM. In the default settings, CPLEX uses two parallel processes for solving linear programs, whereas the remaining part of the program is executed on a single core of the cpu. We impose a time limit of 5hours corresponding to 18,000seconds.

We begin the analysis with a direct comparison between the lower bound achieved using the proposed methodology, which utilizes dynamic constraint aggregation (DCA), and the current best known lower bounds of Ceschia and Schaerf (2011). Unless otherwise stated we use the standard penalties given in Table 1, but retain the hard constraints as indicated. Furthermore, we also compare the DCA with a standard column generation procedure (i.e. no constraint aggregation) and with the DCA approach using the room penalty extension (DCA RP) with 
                           
                              δ
                              =
                              0.01
                           
                        . Table 3
                         reports the bounds obtained as well as the time taken to achieve them. Note that the objective function value obtained with the DCA RP method must be adjusted to account for the incurred, artificial penalties that we have added. Hence, for this approach there are two objective value columns in the table.

We are able to solve the first six instances using our approach. Neither Std. Col. Gen., DCA, nor DCA RP are able to identify an LP-bound for the instances 7, 8, 10, and 11. Instance 9 and Instance 12 are infeasible with respect to certain hard constraints, which is shown by the greedy assignment-based construction of initial columns. The instances 7, 8, and 10 are terminated due to the time limit, whereas Instance 11 terminates prematurely because the program runs out of memory.

For the first six instances, one can observe that the proposed room schedule model provides a tighter, and in some cases, a much tighter bound than that of Ceschia and Schaerf (2011). For example, in Instance 3 the bound is improved by some 1.6%. Clearly, this tightening of the bound is due to solving a more restricted problem than Ceschia and Schaerf (2011) both in terms of hard constraints and in terms of the decomposition into a covering problem and room scheduling problem. Furthermore, in the first six instances all three column generation based procedures are overwhelmingly faster. Therefore, not only does the model provide tighter bounds, but we can also obtain these bounds in a fraction of the time. The comparison between the standard column generation procedure and that of the DCA approach illustrates the power of the constraint aggregation procedure. With the exception of Instance 4, significant gains in the root relaxation time can be seen. Table 4
                         provides some summary statistics for the standard column generation procedure and the DCA approach. It reports the number of iterations (It), the number of rows and columns in the master problem, and the number of fractional columns at the optimal LP solution. For the DCA approach, it also reports the number of incompatible columns identified at the last iteration of the column generation (ICOL). One can see that the increased speed up from DCA most likely comes from the reduced number of iterations and a smaller master problem. The small difference in solution times between the two different approaches for Instance 4 is probably due to the large number of incompatible columns; a reaggregation of 
                           
                              W
                           
                         into a new set of clusters is required every time we wish to force incompatible columns into the master problem. The DCA RP is somewhat slower than the DCA, but obtains an LP solution with the same adjusted objective value as the DCA. This is due to the DCA just obtaining one among many possible primal alternative solutions, whereas the DCA RP has less primal alternative solutions, and therefore has to search for a more specific one. As argued in Section 3.4 it will force the algorithm to pack the rooms more and thereby make it easier for the integerization to identify feasible integer solutions.

In order to investigate the reason for the method having difficulties solving test instances 7, 8, and 10 we focus on the transfer penalty. Intuitively, if the transfer penalties are large then transfers will be less frequent and the aggregation will be easier to identify. In fact, if the transfer penalties are infinite then the number of partitions 
                           
                              |
                              H
                              |
                           
                         will be bounded from above by the number of patients in the problem, as transfers will never take place. Therefore, one would expect the LP-relaxation to be easier to solve when the transfer penalties are large. We test this by varying the transfer penalties and the results are given in Table 5
                        . In the tests we use three transfer penalty settings; 
                           
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              =
                              
                                 
                                    t
                                 
                                 
                                    o
                                 
                              
                              =
                              2
                              ,
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              =
                              
                                 
                                    t
                                 
                                 
                                    o
                                 
                              
                              =
                              5
                           
                        , and 
                           
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              =
                              
                                 
                                    t
                                 
                                 
                                    o
                                 
                              
                              =
                              25
                           
                        . This gives one case having a significantly smaller penalty than the standard setting, one case having slightly less penalty than the standard setting, and one case setting having a much larger transfer penalty than the standard case. The case 
                           
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              =
                              
                                 
                                    t
                                 
                                 
                                    o
                                 
                              
                              =
                              5
                           
                         was intentionally chosen to see how sensitive the computational time is to a very slight change in the transfer penalty. In the table the time, 
                           
                              t
                              (
                              s
                              )
                           
                        , to achieve the bound is given. If the test is terminated due to the time limit it is indicated with “–”. The value of the master problem at termination is given in the LP column. It is interesting to observe the number of transfers in non-degenerate columns of the basis of the master problem, as they indicate how many transfers one may expect in a later integer solution. This is given in the column TNC. For this test, however, it may be even more interesting to observe the number of transfers in degenerate columns of the basis. This is given in the TDC columns.

Comparing results of the case 
                           
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              =
                              
                                 
                                    t
                                 
                                 
                                    o
                                 
                              
                              =
                              5
                           
                         in Table 5 with the results of the DCA in Table 3, we observe that there is no conclusive change in computation time, and the LP-bounds remain the same. Hence, a slight change in the transfer penalties does not significantly influence the computation time.

Two conclusions may be drawn from the tests given in Table 5. First, the time it takes to reach an LP bound increases as the transfer penalty decreases, and second, the number of transfers in degenerate columns increases drastically. A third, though not surprising, conclusion is that the number of transfers in non-degenerate basic columns increases slightly as the transfer penalties are decreased. The increase in number of transfers in degenerate columns when decreasing the transfer penalties is most likely because the right hand side of the dual constraints decrease and the corresponding columns are required for a dual LP optimal solution. But as more transfers are required for dual optimality the bound on 
                           
                              |
                              H
                              |
                           
                         will increase and approach 
                           
                              |
                              W
                              |
                           
                        , the number of patient-time combinations. This, again, introduces more degeneracy into the primal master problem and the performance of the column generation deteriorates. Consequently, the computation time for reaching the LP optimal solution increases.

In this section we test the performance of the methods introduced Section 3.4 for forcing integrality of the solution. We have based the tests on dichotomous parameters which yields 16 different parameter settings. The first parameter is whether the weighted variable fixing routine or threshold based variable routine is used. If the weighted variable fixing routine is used then it is subdivided into the case where only the largest fractionality of a column is used 
                           
                              (
                              
                                 
                                    β
                                 
                                 
                                    f
                                 
                              
                              =
                              1
                              ,
                              
                                 
                                    β
                                 
                                 
                                    c
                                 
                              
                              =
                              0
                              )
                           
                         and the case where both largest fractionality and normalized number of good available rooms are taken into account 
                           
                              (
                              
                                 
                                    β
                                 
                                 
                                    f
                                 
                              
                              =
                              1
                              ,
                              
                                 
                                    β
                                 
                                 
                                    c
                                 
                              
                              =
                              1
                              )
                           
                        . On the other hand, if the threshold based fixing routine is used then the threshold is fixed at 
                           
                              τ
                              =
                              0.8
                           
                         and it is subdivided into the DFR and the IFL, as described in Section 3.4. In recognition of the LP-relaxation being easier to solve with large transfer penalties we have tested the integerization on standard transfer penalties 
                           
                              (
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              =
                              
                                 
                                    t
                                 
                                 
                                    o
                                 
                              
                              =
                              5.5
                              )
                           
                         as well as with large transfer penalties 
                           
                              (
                              
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              =
                              
                                 
                                    t
                                 
                                 
                                    o
                                 
                              
                           
                        
                        =10,000). Finally, the tests have been conducted with 
                           
                              (
                              δ
                              =
                              0.01
                              )
                           
                         and without 
                           
                              (
                              δ
                              =
                              0
                              )
                           
                         the room penalty extension. Tables 6 and 7
                        
                         gives the results for the weighted variable fixing routine with standard transfer penalties and large transfer penalties, respectively. For comparison Tables 8 and 9
                        
                         includes the results for the threshold based approach with standard and large transfer penalties, respectively. Each of the tables include the best known values (CS UB) reported by Ceschia and Schaerf (2011), which are compared to our results. For each test the time in seconds, 
                           
                              t
                              (
                              s
                              )
                           
                        , is given as well as the upper bound, UB. If our results are equal to those reported by Ceschia and Schaerf (2011), then the result is shown in italics. Results shown in boldface are where our method achieves solutions that are better than the best solutions reported in the literature. Our best solutions are underlined in the tables. The fixing routines may terminate with an integer infeasible solution, for example if all compatible rooms for a given patient have already been fixed, and this is indicated by “–”. We have only included the instances where the LP-relaxation could be solved within the time limit.

First we note that our method identifies new best solutions for five out of the eight instances. This is despite the fact that we solve a more restricted problem compared to the previous heuristic approaches in the literature (e.g. Ceschia and Schaerf (2011) and Demeester et al. (2010)). The new best solutions are, however, found only within the first six instances. We attribute this to the availability of compatible rooms in these six instances. All of these new best solutions are within 
                           
                              1.63
                              %
                           
                         of the optimal solution if we compare with the lower bounds identified in Table 3, and the solutions found for instances 5 and 6 are all within 
                           
                              0.2
                              %
                           
                         of the optimal solution. This indicates that the lower bound is very tight in these cases. For the best known solution for Instance 4 found by Ceschia and Schaerf (2011) the gap is 
                           
                              2.38
                           
                        %, which is still small, while our best solution for Instance 4 has a gap of 
                           
                              2.98
                           
                        %, which is also reasonable. It should be noted that none of the 16 test set-ups are strictly better than all the other set-ups and therefore we do not have a dominant parameter setting.

If we focus on fixing variables in the standard model (1)–(4) only using the fractionality of the variables as a guide, i.e. the cases having 
                           
                              δ
                              =
                              0
                           
                         with 
                           
                              
                                 
                                    β
                                 
                                 
                                    c
                                 
                              
                              =
                              0
                           
                         for weighted variable fixing and DFR for the threshold variable fixing, then we observe that it is difficult for the fixing routines to identify a feasible integer solution. The exception is for the weighted variable fixing routine with 
                           
                              
                                 
                                    β
                                 
                                 
                                    c
                                 
                              
                              =
                              0
                           
                         and 
                           
                              δ
                              =
                              0
                           
                        , where feasible integer solutions are found for each of the tested instances. It does, however, become much easier to identify feasible integer solutions if the room penalty extension is used with 
                           
                              δ
                              =
                              0.01
                           
                        , if the normalized good available compatible rooms is taken into account with 
                           
                              
                                 
                                    β
                                 
                                 
                                    c
                                 
                              
                              =
                              1.0
                           
                         for the weighted variable fixing routine, or if the increased flexible ordering (IFL) is used for the threshold fixing routine. Consequently, to increase the chance of getting feasible solutions we suggest that one of these remedying approaches is used.

Turning to the room penalty extension we can observe that six out of eight of our best solutions are found using the standard model (
                           
                              δ
                              =
                              0
                           
                        ) and not with the room penalty extension (
                           
                              δ
                              =
                              0.01
                           
                        ). This seems reasonable as the standard model will have the columns with the best possible costs at a high magnitude and by selecting these columns only corresponds to greedily minimizing the overall costs without taking future actions into account.

The time to obtain the upper bound solution decreases in most cases when the transfer penalty is increased. Likewise, it is typically faster to use the threshold variable fixing than to use the weighted variable fixing routine. The latter is due to the fact that the threshold variable fixing has the possibility to fix more than one column, whereas the weighted variable routine fixes only one variable.

As the objective of the problem is based on multiple criteria we provide, in Table 10
                        , a break down of the objective into the different components for the best integer solutions found by our approach. First the instance is given and then we state the objective value (Obj.) of the solution. The next column (Pref.) is the penalty for not being assigned a room having the preferred capacity. This is followed by the columns Dep., Spec. and, Treat. which state, respectively, the penalty achieved for not assigning the correct department, not having the prioritized specialism, and not having the preferred treatment properties. Finally, the penalty obtained for having transfers is stated in the column Transf. Clearly most of the penalty comes from patients not being assigned rooms of the desired capacity. In some of the instances, however, penalties are also assigned due to the lack of best specialism or due to lack of preferred room properties. It should be noted that none of the solutions have any penalties for transfers nor any penalties for assignment to a wrong department.

The computational results show that a column generation based heuristic approach using aggressive variable fixing is a viable approach for identifying high-quality solutions for PAS. While in most cases providing feasible solutions, the column generation based heuristic also provides a quality measure through the lower bound obtained in the root node. This is, in our opinion, a significant advantage compared to heuristics in general.

@&#CONCLUSION@&#

The patient admission scheduling problem is an intriguing and important part of hospital management. For hospitals with a central planning unit, producing an optimal or near-optimal plan can be highly important for patients as well as the hospital – a good plan will result in better care with a better utilization of resources and a focus on the right resources. It will minimize extra work in moving patients around the hospital and allocating the patients to the wards best suited for their needs given the overall set of elective patients.

In this paper we have developed a new state-of-the-art optimization-based approach for the PAS problem as defined by Demeester et al. (2010). The method is based on column generation, giving a tighter bound, and a branch-and-bound framework – leading to a branch-and-price set-up – this guides the solution process in finding near-optimal solutions. The framework is based on variable fixing. In order to efficiently handle the relatively large master problem of the method, dynamic constraint aggregation has been incorporated into the approach. This reduces the master problem significantly although, due to the administrative overhead, the reduction is not fully carried over into a running time reduction.

On the six first instances from Demeester et al. (2010) we produce new best solutions in five cases. Overall, it should be noted that the gaps we obtain are in general small, for example the largest gap on the newly found best solutions is 
                        
                           1.63
                        
                     % above the lower bound.

In conclusion, our optimization-based heuristic is currently the best approach for the small instances of the PAS problem. For the larger instances the approach needs further refinements. For future research we could utilize the fact that for long time horizons most patients are usually only in the hospital for a short while. This suggests that a rolling-horizon time window approach would be able to give us near-optimal solutions even for larger instances than the current instances over 14days. Another remaining challenge is also to be able to produce the best solutions with one parameter setting or incorporate a self-adjusting approach on the parameters in the method.

@&#REFERENCES@&#

