@&#MAIN-TITLE@&#A novel Multiple Objective Symbiotic Organisms Search (MOSOS) for time–cost–labor utilization tradeoff problem


@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           This research presents a novel multiple optimization algorithm MOSOS.


                        
                        
                           
                           MOSOS is applied to solve time-cost-utilization work shift tradeoff problem.


                        
                        
                           
                           The model performance is demonstrated in the experimental results.


                        
                        
                           
                           Statistical test found MOSOS to provide better solutions compared to other methods.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Work shift

Scheduling

Multi-objective analysis

Symbiotic Organisms Search

Time-cost-resource tradeoff

@&#ABSTRACT@&#


               
               
                  Multiple work shifts are commonly utilized in construction projects to meet project requirements. Nevertheless, evening and night shifts raise the risk of adverse events and thus must be used to the minimum extent feasible. Tradeoff optimization among project duration (time), project cost, and the utilization of evening and night work shifts while maintaining with all job logic and resource availability constraints is necessary to enhance overall construction project success. In this study, a novel approach called “Multiple Objective Symbiotic Organisms Search” (MOSOS) to solve multiple work shifts problem is introduced. The MOSOS algorithm is new meta-heuristic based multi-objective optimization techniques inspired by the symbiotic interaction strategies that organisms use to survive in the ecosystem. A numerical case study of construction projects were studied and the performance of MOSOS is evaluated in comparison with other widely used algorithms which includes non-dominated sorting genetic algorithm II (NSGA-II), the multiple objective particle swarm optimization (MOPSO), the multiple objective differential evolution (MODE), and the multiple objective artificial bee colony (MOABC). The numerical results demonstrate MOSOS approach is a powerful search and optimization technique in finding optimization of work shift schedules that is it can assist project managers in selecting appropriate plan for project.
               
            

@&#INTRODUCTION@&#

Labor is a critical construction project resource for construction contractors to be successful on every construction project. Inefficient management of labor resources can result the contractors not able to meet the project deadline and budget requirement. When facing a tight schedule deadline, labor resources has a huge limitation on the number of hours a worker can work per day. Therefore, it requires the use of shift work to meet scheduled deadlines [1]. Using shift work can approximately double the total amount of work hours per day. It also has an advantage over using overtime hours because it prevents worker fatigue and has lower hourly labor costs [2,3]. Furthermore, work shift done during the evening and night is often more efficient due to the quieter, less congested environment around the construction site.

In spite of these advantages, the multiple shift schedules possess several shortcomings including its negative impacts on construction cost, productivity, and safety [1,4]. The multiple shifts might lead in higher overall costs that are required for shift premiums, quality control, nighttime lighting, and safety measures. Additionally, disturbed sleep cycles and stress resulting in higher injury and accident risks, and nighttime construction adversely affects worker health due to circadian rhythm disruption [5–7]. Moreover, recent researches identified that the utilization of evening and night shifts causes higher rates of labor overturn and absenteeism that leads to project delays and cost overruns [2,4]. In order to minimize these negative impacts of utilizing multiple shifts while complying with labor availability constraints, project decision makers need to distribute and utilize the limited labor resources among multiple shifts in the most efficient and effective way to maximize project performance.

Over past decades, a significant amount of research studies have developed optimization models to solve civil engineering problems ranging from structural engineering [8] to construction management [9]. In recent years, there have been notable efforts to solve resource utilization problems using multi-objective optimization models. The most commonly used multi-objective optimization model is the multiple objective genetic algorithm (GA) [10–13]. Other researchers have developed hybrid models of genetic and other algorithms such as particle swarm optimization (PSO) [14], differential evolution (DE) [15] and simulated annealing [16]. However, there are a few reported researches that focus on optimizing the utilization of multiple labor shifts in constructions. Jun and El-Rayes [1] firstly applied a multiple objective genetic algorithm to work shift problem. Therefore, further study is needed to build better optimization models to schedule construction project work shift.

Symbiotic Organisms Search (SOS) is currently one of the most recent metaheuristic algorithms [17]. SOS was first used in a wide variety of highly nonlinear benchmark and engineering problems. The SOS algorithm is simply structured and easy to use, while demonstrating great robustness and fast convergence in solving single objective global optimization problem. Preliminary studies indicate that the new SOS algorithm is superior over the widely used GA, PSO, DE, and bees algorithm (BA) in solving a various continuous benchmark function and engineering problems [17]. Since the SOS algorithm is relatively new, the capability of the SOS algorithm in solving the time cost utilization labor tradeoff (TCUT) problem is very interesting to be further explored and investigated.

This study presents the novel Multiple Objective Symbiotic Organisms Search (MOSOS) algorithm to facilitate a TCUT analysis. The important contribution of this research is that the proposed MOSOS algorithm is a new, multiple objective optimization (MOO) version of the basic SOS algorithm. MOSOS algorithm is developed to fit the TCUT problem because the ability to provide efficient solutions for complex problems simpler operations of SOS is very much attractive and encouraging. The proposed algorithm is designed to attain fast convergence without losing solution diversity on the Pareto front.

The remaining of this paper is organized as follows. In Section 2, the time-cost-utilization resource problem is mathematically formulated. In Section 3, literature related to the establishment of the new optimization model is briefly reviewed. In Section 4, the detailed descriptions of the proposed optimization model for the TCUT problem are presented in details. In Section 5, the performance of the newly developed model is demonstrated using two numerical experiments and result comparisons. Section 6 presents study conclusions.

Using multiple work shifts in a construction project requires that the project planners determine the execution mode of project activities, seek to find the optimal scheduling sequence and assign workers to shifts while satisfying all project constraints. The work shift problem must minimize three contradicting objectives simultaneously including project duration, project cost, and total evening and night shift working hours [1].

The first objective, minimization of total project duration, may be expressed as follows:

                        
                           
                              
                                 M
                                 i
                                 n
                                 i
                                 m
                                 i
                                 z
                                 e
                                 
                                 p
                                 r
                                 o
                                 j
                                 e
                                 c
                                 t
                                 
                                 t
                                 i
                                 m
                                 e
                                 
                                 
                                 
                                 T
                                 =
                                 
                                    ∑
                                    
                                       n
                                       =
                                       1
                                    
                                    l
                                 
                                 
                                    T
                                    n
                                    
                                       S
                                       n
                                    
                                 
                                 =
                                 M
                                 a
                                 
                                    x
                                    
                                       ∀
                                       n
                                    
                                 
                                 
                                    (
                                    E
                                    
                                       S
                                       n
                                    
                                    +
                                    
                                       D
                                       n
                                    
                                    )
                                 
                              
                           
                        
                     
                     
                        
                           (1)
                           
                              
                                 E
                                 
                                    S
                                    n
                                 
                                 =
                                 
                                    
                                       M
                                       a
                                       x
                                       i
                                       m
                                       u
                                       m
                                    
                                    
                                       
                                          all
                                          
                                          predecessors
                                       
                                       
                                       m
                                       
                                       of
                                       
                                       n
                                    
                                 
                                 
                                    (
                                    E
                                    
                                       S
                                       m
                                    
                                    +
                                    
                                       D
                                       m
                                    
                                    )
                                 
                              
                           
                        
                     where 
                        
                           T
                           n
                           
                              S
                              n
                           
                        
                      is the duration of the activity 
                        
                           n
                           {
                           n
                           =
                           1
                           ,
                           2
                           ,
                           …
                           ,
                           l
                           }
                        
                      on the critical path for a specific option of resources (Sn
                     ); l is the total number of critical activities on a specific critical path. ESn
                      is the earliest start of activity n, Dn
                      is the duration of activity n. In general, project duration is calculated based on precedence constraints and activity duration. The project information determines the precedence constraints and the selection alternatives determine activity duration.

The second objective, minimization of total project cost, may be calculated as follows:

                        
                           (2)
                           
                              
                                 M
                                 i
                                 n
                                 i
                                 m
                                 i
                                 z
                                 e
                                 p
                                 r
                                 o
                                 j
                                 e
                                 c
                                 t
                                 
                                 cost
                                 =
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                    
                                    N
                                 
                                 
                                    C
                                    o
                                    s
                                    
                                       t
                                       i
                                       
                                          S
                                          i
                                       
                                    
                                 
                              
                           
                        
                     where 
                        
                           C
                           o
                           s
                           
                              t
                              i
                              
                                 S
                                 i
                              
                           
                        
                      is the total cost which includes direct and indirect cost of activity i for a specific option of resources (Sn
                     ) and N is the total number of activities.

The third and final objective, minimization of project labor utilization in evening and night shifts, may be calculated as follows.

                        
                           (3)
                           
                              
                                 
                                    
                                       
                                          M
                                          i
                                          n
                                          i
                                          m
                                          i
                                          z
                                          e
                                          
                                          L
                                          H
                                          E
                                          N
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          L
                                          H
                                          E
                                          +
                                          L
                                          H
                                          N
                                          (
                                          1
                                          +
                                          W
                                          )
                                          if
                                          
                                          SS
                                       
                                    
                                 
                                 
                                    
                                    
                                       =
                                    
                                    
                                       
                                          3
                                          
                                          
                                          
                                             (
                                             Three
                                             
                                             
                                             shifts
                                             
                                             
                                             system
                                             
                                             
                                             (
                                             SS
                                             )
                                             )
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 L
                                 H
                                 N
                                 E
                                 =
                                 L
                                 H
                                 E
                                 
                                 
                                 
                                 if
                                 
                                 
                                    SS
                                    =
                                    2
                                 
                                 
                                 
                                    (
                                    Two
                                    
                                    
                                    shifts
                                    
                                    
                                    system
                                    )
                                 
                              
                           
                        
                     
                     
                        
                           (5)
                           
                              
                                 L
                                 H
                                 E
                                 =
                                 
                                    ∑
                                    
                                       n
                                       =
                                       1
                                    
                                    N
                                 
                                 
                                    
                                       (
                                       
                                          
                                             
                                                D
                                                n
                                             
                                          
                                          *
                                       
                                       
                                          R
                                          
                                             n
                                             ,
                                             2
                                          
                                       
                                       )
                                    
                                    *
                                 
                                 H
                                 E
                              
                           
                        
                     
                     
                        
                           (6)
                           
                              
                                 L
                                 H
                                 N
                                 =
                                 
                                    ∑
                                    
                                       n
                                       =
                                       1
                                    
                                    N
                                 
                                 
                                    
                                       (
                                       
                                          
                                             
                                                D
                                                n
                                             
                                          
                                          *
                                       
                                       
                                          R
                                          
                                             n
                                             ,
                                             3
                                          
                                       
                                       )
                                    
                                    *
                                 
                                 H
                                 N
                              
                           
                        
                     where LHEN is the total number of evening and night shift work hours, LHE is the total number of evening shift work hours and LHN is the total number of night shift work hours. Because risks faced in night shift work are typically higher than in other shifts, W is the defined weight that represents the relative importance of minimizing LHN. R
                     
                        n, k
                      is the daily labor demand of activity n on shift k. k represents the shift type (e.g., for the 3-shift system, k = 1 means day shift, k = 2 means evening shift, and k = 3 means night shift); HE is the daily evening shift work hours (7.5 h per day); and HN is the daily night shift work hours (7 h per day). In this study, day shift is the period of time for such work during the day (as 8 a.m. to 4 p.m. – 8 h). Evening shift is the work shift during the evening (as 4 p.m. to midnight). Night shift is the work shift during the night (as midnight to 8 a.m.).

@&#LITERATURE REVIEW@&#

A MOO problem involves several conflicting objectives simultaneously. The MOO with such conflicting objective functions gives rise to a set of Pareto optimal solutions instead of one optimal solution. Because no one of these solutions can be considered to be better than any other with respect to all objective functions. Generally, the MOO problem consists of n decision variables, k objective functions, m inequality constraints and p equality constraints. It may be mathematically formulated as follows [18–20]:

                           
                              (7)
                              
                                 
                                    
                                       min
                                       
                                          X
                                          ∈
                                          D
                                       
                                    
                                    f
                                    
                                       (
                                       X
                                       )
                                    
                                    =
                                    
                                       [
                                       
                                          f
                                          1
                                       
                                       
                                          (
                                          X
                                          )
                                       
                                       ,
                                       
                                          f
                                          2
                                       
                                       
                                          (
                                          X
                                          )
                                       
                                       ,
                                       …
                                       ,
                                       
                                          f
                                          k
                                       
                                       
                                          (
                                          X
                                          )
                                       
                                       ]
                                    
                                 
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    s
                                    
                                       .
                                       t
                                    
                                    
                                    
                                       g
                                       i
                                    
                                    
                                       (
                                       X
                                       )
                                    
                                    ≥
                                    0
                                    ;
                                    
                                    i
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    m
                                 
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       h
                                       j
                                    
                                    
                                       (
                                       X
                                       )
                                    
                                    =
                                    0
                                    ;
                                    
                                    j
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    p
                                 
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    D
                                    =
                                    {
                                    X
                                    |
                                    g
                                    (
                                    X
                                    )
                                    ≥
                                    0
                                    ,
                                    h
                                    (
                                    X
                                    )
                                    =
                                    0
                                    }
                                 
                              
                           
                        where f(X) is the objective vector, k is the number of objective functions. gi
                        (X) is the set of inequality constraints, and hj
                        (X) is the set of equality constraints. The solution 
                           
                              X
                              
                                 
                                    (
                                    
                                       x
                                       1
                                    
                                    ,
                                    
                                       x
                                       2
                                    
                                    ,
                                    …
                                    ,
                                    
                                       x
                                       n
                                    
                                    )
                                 
                                 T
                              
                           
                         is a vector of n decision variables in feasible region D. The multi-objective optimization problem works to determine those vectors X that yield the optimum values for all the objective functions from the set D of all vectors which satisfy (8) and (9).

Because this problem rarely presents a unique solution, decision makers are expected to choose a solution from among a set of efficient solutions, known collectively as the Pareto. The Pareto dominance is formally defined as follows (Deb [18]):

Solution 
                           
                              
                                 X
                                 1
                              
                              
                                 
                                    (
                                    
                                       x
                                       
                                          1.1
                                       
                                    
                                    ,
                                    
                                       x
                                       
                                          1.2
                                       
                                    
                                    ,
                                    …
                                    ,
                                    
                                       x
                                       
                                          1
                                          .
                                          n
                                       
                                    
                                    )
                                 
                                 T
                              
                           
                         dominates 
                           
                              
                                 X
                                 2
                              
                              
                                 
                                    (
                                    
                                       
                                          x
                                          
                                             2.1
                                          
                                       
                                       ,
                                       
                                          x
                                          
                                             2.2
                                          
                                       
                                       ,
                                       …
                                       ,
                                    
                                    
                                       x
                                       
                                          2
                                          .
                                          n
                                       
                                    
                                    )
                                 
                                 T
                              
                           
                         if both the conditions are satisfied:

                           
                              1.
                              
                                 
                                    
                                       ∀
                                       i
                                       ∈
                                       
                                          (
                                          1
                                          ,
                                          2
                                          ,
                                          …
                                          ,
                                          k
                                          )
                                       
                                       :
                                       
                                          f
                                          i
                                       
                                       
                                          (
                                          
                                             X
                                             1
                                          
                                          )
                                       
                                       ≤
                                       
                                          f
                                          i
                                       
                                       
                                          (
                                          
                                             X
                                             2
                                          
                                          )
                                       
                                    
                                 . The solution X
                                 1 is no worse than X
                                 2 in attaining all objectives.


                                 
                                    
                                       ∃
                                       i
                                       ∈
                                       
                                          (
                                          1
                                          ,
                                          2
                                          ,
                                          …
                                          ,
                                          k
                                          )
                                       
                                       :
                                       
                                          f
                                          i
                                       
                                       
                                          (
                                          
                                             X
                                             1
                                          
                                          )
                                       
                                       <
                                       
                                          f
                                          i
                                       
                                       
                                          (
                                          
                                             X
                                             2
                                          
                                          )
                                       
                                    
                                 . The solution X
                                 1 is strictly better than X
                                 2 in at least one objective.

So, while comparing two different solutions X
                        1 and X
                        2, there are three possibilities of dominance relation between them.

                           
                              •
                              
                                 X
                                 1 dominates X
                                 2
                              


                                 X
                                 1 is dominated by X
                                 2
                              


                                 X
                                 1 and X
                                 2 are non-dominated to each other.

A non-dominated solution means that no other solution has been found that dominates it. The set of non-dominated solutions is called the Pareto front.

Multiple Objective Evolutionary Algorithms (MOEAs) have attracted increasing attention for solving MOO problems [21–24] in recent years. Various researchers from various multi-disciplinary have used MOEAs to solve optimization problems that arise in their own fields [25–27]. As MOO problems become more complex, new MOEAs will continue to emerge.

The SOS algorithm is a new meta-heuristic algorithm developed by Cheng and Prayogo [17]. It is inspired by the biological dependency-based interaction seen among organisms in nature. The dependency-based interaction is often known as symbiosis. Like most population-based meta-heuristic algorithms, SOS shares the similar following features: it uses a population of organisms which contains candidate solutions to seek the global solution over the search space; it has special operators that employ the candidate solutions to guide the searching process; it uses a selection mechanism to preserve the better solutions; it requires a proper setting of common control parameters such as population size and maximum number of evaluations.

However, unlike most meta-heuristic algorithms which have additional control parameters (i.e. GA has crossover and mutation rate; PSO has inertia weight, cognitive factor, and social factor), SOS requires no algorithm-specific parameters. This is considered as an advantage over competing algorithms since SOS does not need additional work for tune the parameters. Improper tuning related to the algorithm-specific parameters might increase the computational time and produce the local optima solution.

In the early stage, a random ecosystem (population) matrix is created, each row representing a candidate solution to the corresponding problem. The number of organisms in the ecosystem, so-called the ecosystem size, is pre-determined by the users. The rows in the matrix are called organisms, same as individuals in other meta-heuristic algorithms. Each virtual organism represents a candidate solution to the corresponding problem/objective. The search begins after the initial ecosystem generated. During the searching process, each organism gains benefit from continuously interacting with one another through three different ways:

                           
                              1.
                              Mutualism phase: The phase where one organism is developing a relationship that benefits itself and also the other. The interaction between bees and flowers is a classic example to explain the philosophy of mutualism.

Commensalism phase: The phase where one organism is developing a relationship that benefits itself while does not impact the other. An example of commensalism is the relationship between remora fish and sharks.

Parasitism phase: The phase where one organism is developing a relationship that benefits itself but harms the other. An example of parasitism is the plasmodium parasite, which uses its relationship with the anopheles mosquito to pass between human hosts.

These three phases are adopted from the most common symbioses used by organisms to increase their fitness and survival advantage over the long term. During the interaction, the one who receive a benefit will evolve to a fitter organism while the one who is harmed will perish. The mechanisms for updating the best organism will be conducted after one organism has completed their three phases. The phase will operate until the stopping criterion is achieved. The pseudocode shown in Fig. 1
                         further summarizes the basic step SOS optimization procedure.

This section describes the Multiple Objective Symbiotic Organisms Search (MOSOS) for solving the TCUT problem developed in this study based on the original SOS algorithm [17]. Fig. 2
                      shows the overall operational architecture of the proposed algorithm. The following subsections provide further details on the flowchart.

This study considers the TCUT problem, in which project cost, project duration, and the utilization of evening and night work shifts are optimized simultaneously. The model requires project information inputs including activity relationship, activity duration (Duri
                        ), activity cost (Ci
                        ), daily labor demand (Ri,j
                        ), shift options (Si
                        ) for each activity, and total number of available labor (RC). In addition, the user also must provide parameter settings for the search engine (MOSOS) such as the value of ecosystem size ecosize, number of decision variables D, number of objective functions M, maximum number of generations Gmax
                        , the lower bound (LB) and the upper bound (UB) of decision variables. With these inputs, the optimizer conducts calculations to obtain an optimal set of shift options, optimal scheduling sequence and assign available labors to shifts for all construction project activities. With all the necessary information provided, the model is capable of operating automatically without any human intervention.

Population (ecosystem) initialization is the first and the primary task in any optimization algorithm. These two terms, population and ecosystem or, are used interchangeably. Analogous to other population-based algorithms, MOSOS begins with an initial population called the ecosystem. In the initial ecosystem, a group of organisms is generated randomly to the search space as follows:

The initial process generates a point in D-dimensional space 
                           
                              X
                              =
                              {
                              
                                 x
                                 1
                              
                              ,
                              
                                 x
                                 2
                              
                              ,
                              …
                              ,
                              
                                 x
                                 D
                              
                              }
                           
                         in which 
                           
                              
                                 x
                                 1
                              
                              ,
                              
                                 x
                                 2
                              
                              ,
                              …
                              ,
                              
                                 x
                                 D
                              
                              ∈
                              ℜ
                           
                         and xj
                         ∈ [0, 1] have uniform random distributions. The first ecosize organisms may be easily generated as follows:

                           
                              (11)
                              
                                 
                                    
                                       
                                          
                                             X
                                             
                                                i
                                                ,
                                                j
                                             
                                             
                                                G
                                                =
                                                0
                                             
                                          
                                       
                                       
                                          =
                                       
                                       
                                          
                                             L
                                             
                                                B
                                                j
                                             
                                             +
                                             
                                                
                                                   
                                                      x
                                                      
                                                         i
                                                         ,
                                                         j
                                                      
                                                   
                                                
                                                *
                                             
                                             
                                                (
                                                U
                                                
                                                   B
                                                   j
                                                
                                                −
                                                L
                                                
                                                   B
                                                   j
                                                
                                                )
                                             
                                             ;
                                             
                                             i
                                             =
                                             1
                                             ,
                                             2
                                             ,
                                             …
                                             ,
                                             D
                                             ;
                                          
                                       
                                    
                                    
                                       
                                          j
                                       
                                       
                                          =
                                       
                                       
                                          
                                             1
                                             ,
                                             2
                                             ,
                                             …
                                             ,
                                             e
                                             c
                                             o
                                             s
                                             i
                                             z
                                             e
                                          
                                       
                                    
                                 
                              
                           
                        
                     

A candidate solution to the TCUT problems may be represented as a vector with these decision variables: (1) shift option used for each activity; (2) the priority value of each activity; and (3) the labor constraint with (2N + 1), (2N + 2) elements for two, three shifts system, respectively, as follows:

                           
                              (12)
                              
                                 
                                    X
                                    =
                                    
                                       [
                                       
                                          
                                             
                                                
                                                   x
                                                   
                                                      i
                                                      ,
                                                      1
                                                   
                                                
                                                ,
                                                …
                                                ,
                                                
                                                   x
                                                   
                                                      i
                                                      ,
                                                      j
                                                   
                                                
                                                ,
                                                …
                                                ,
                                                
                                                   x
                                                   
                                                      i
                                                      ,
                                                      N
                                                   
                                                
                                             
                                             ︸
                                          
                                          
                                             
                                                Shift
                                                −
                                                Option
                                             
                                             
                                             
                                                S
                                                n
                                             
                                          
                                       
                                       ,
                                       
                                          
                                             
                                                
                                                   x
                                                   
                                                      i
                                                      ,
                                                      N
                                                      +
                                                      1
                                                   
                                                
                                                ,
                                                …
                                                ,
                                                
                                                   x
                                                   
                                                      i
                                                      ,
                                                      2
                                                      N
                                                   
                                                
                                             
                                             ︸
                                          
                                          
                                             
                                                Priority
                                                −
                                                value
                                             
                                             
                                             
                                                P
                                                n
                                             
                                          
                                       
                                       ,
                                       
                                          
                                             
                                                
                                                   x
                                                   
                                                      i
                                                      ,
                                                      2
                                                      N
                                                      +
                                                      1
                                                   
                                                
                                                ,
                                                
                                                   x
                                                   
                                                      i
                                                      ,
                                                      D
                                                   
                                                
                                             
                                             ︸
                                          
                                          
                                             
                                                Labor
                                                −
                                                Constraint
                                             
                                             
                                             
                                                L
                                                k
                                             
                                             /
                                             R
                                             C
                                          
                                       
                                       ]
                                    
                                 
                              
                           
                        where D is the number of decision variables in the problem at hand. It is obvious that N is the number of activities in the project network. Index i denotes the ith individual in the population.

                           
                              (1)
                              Shift option: Shift-option (Sn
                                 ) represents the feasible shift options for activity n. Every option has specific combinations of duration, cost and labor demands that lead to different total project durations, total costs and total labor hours. Vector xi,n
                                  represents one shift option value for activity n. Si,n
                                  is an integer number in the range [1,USn
                                 ] (n = 1 to N), meaning one position from USn
                                  shift options. Because the original DE operates with real-value variables, a function is employed to convert the execution mode options of those activities from real values to integer values within the feasible domain.
                                    
                                       (13)
                                       
                                          
                                             
                                                S
                                                
                                                   i
                                                   ,
                                                   n
                                                
                                             
                                             =
                                             R
                                             o
                                             u
                                             n
                                             d
                                             
                                                (
                                                
                                                   x
                                                   
                                                      i
                                                      ,
                                                      n
                                                   
                                                
                                                ×
                                                U
                                                
                                                   S
                                                   n
                                                
                                                )
                                             
                                             
                                             ;
                                             
                                             
                                             
                                             
                                             
                                             
                                                (
                                                n
                                                =
                                                1
                                                ,
                                                …
                                                ,
                                                N
                                                )
                                             
                                          
                                       
                                    
                                 where x
                                 
                                    i, n
                                  is the shift option value of activity n at the individual ith. USn
                                  represents the total number of shift options for each activity. Round is a function to convert a real number to the nearest integer greater than or equal to it.

Priority value: priority-value (Pn
                                 ) represents the preference value for each activity in comparison with all other activities. Eq. (14) shows the constraint for this variable.
                                    
                                       (14)
                                       
                                          
                                             0
                                             ≤
                                             
                                                P
                                                n
                                             
                                             ≤
                                             1
                                             ;
                                             
                                             n
                                             =
                                             N
                                             ,
                                             …
                                             ,
                                             2
                                             N
                                          
                                       
                                    
                                 
                              

Together with labor constraints and the precedence relationships between activities, Pn
                                  values help determine the project scheduling sequence and calculate project duration based the resource constraint subsystem presented in the following subsection.

Labor constraints: labor-constraint (Lk/RC) represents the percentage of total available labors per day for shift k. Eq. (15) shows the constraint for this variable.
                                    
                                       (15)
                                       
                                          
                                             0
                                             ≤
                                             
                                                L
                                                k
                                             
                                             /
                                             R
                                             C
                                             ≤
                                             1
                                             ;
                                             
                                             k
                                             =
                                             1
                                             ,
                                             K
                                             −
                                             1
                                          
                                       
                                    
                                 
                              

Once the MOSOS organism is created, the project duration is calculated through serial method. The shift-option (Sn
                        ) values of MOSOS organism defines the execution mode of each activity and then determines the corresponding durations and resource requirements of all activities. The priority value (Pn
                        ) of MOSOS organism carries out the sequence of activities. Labor-constraint (Lk
                        ) figure out the number of available labors per day for each shift.

The serial method was proposed by Kolisch [28]. It consists of n = 1,…,N stages, in which one activity is selected and scheduled in each stage. When an activity has been checked and currently available amounts of resources are adequate, this activity is scheduled at the earliest precedence time (e.g., the earliest completion times of its predecessors) and resource-feasible time. The serial schedule schema is revised for easier comprehension and implementation using the following two steps:

Step 1: Transfer MOSOS organism sequence of tasks priorities to an active schedule based on precedence constraints.

Denote a set of tasks in project 
                           
                              J
                              =
                              {
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              N
                              }
                           
                        . We can define priority relations in set J as a set of pair 
                           
                              C
                              =
                              {
                              (
                              i
                              ,
                              j
                              )
                              |
                              i
                           
                         that must be executed before j}. We introduce the binary relation matrix 
                           
                              V
                              =
                              (
                              
                                 v
                                 
                                    i
                                    j
                                 
                              
                              ,
                              1
                              ≤
                              i
                              ,
                              j
                              ≤
                              n
                              )
                           
                        , 
                           
                              
                                 v
                                 
                                    i
                                    j
                                 
                              
                              =
                              1
                           
                        , if (i, j) ∈ C, 
                           
                              
                                 v
                                 
                                    i
                                    j
                                 
                              
                              =
                              0
                           
                        , if (i, j)∉C, related with a set of priority constraints and define a full-priority relation matrix 
                           
                              G
                              =
                              (
                              
                                 g
                                 
                                    i
                                    j
                                 
                              
                              ,
                              1
                              ≤
                              i
                              ,
                              j
                              ≤
                              n
                              )
                           
                        . This matrix describes all priority relation chains. So, 
                           
                              
                                 g
                                 
                                    k
                                    j
                                 
                              
                              =
                              1
                           
                         if it is possible to find such a sequence of index pairs that (k, k
                        1) ∈ C, (k
                        1, k
                        2) ∈ C,…,(kl, kj
                        ) ∈ C. The matrix V has the following property: 
                           
                              
                                 v
                                 
                                    i
                                    j
                                 
                              
                              =
                              1
                              ⇒
                              
                                 v
                                 
                                    j
                                    i
                                 
                              
                              =
                              1
                           
                        . The G matrix shares this feature as well [29]. Fig 3
                         illustrates the transfer procedure.

Step 2: Calculate project duration based on active schedule

Two important points must be considered before applying the serial method. Firstly, activity A starts when all predecessors are completed (network logic). Secondly, activity A start time depends on resource availability. Thus, activity A is scheduled to start after the completion time of its immediate predecessor on the histogram at the point when sufficient resources are available for activity completion (resource constrained). Fig 4
                         demonstrates how the serial generation calculates project duration.

The search engine (MOSOS) takes into account the results obtained from the scheduling module and the search for an optimal combination of shift work options, optimal scheduling sequence for each activity and assign available labors to shifts. This research used three contradicting objectives. Section 2 describes the formulae for each objective function.

Let Xi
                         be the organism matched to the ith row of the ecosystem population. The organism Xi
                         selects organism Xj
                         as its partner randomly from the ecosystem. Organism Xi
                         is associated to the jth row of the ecosystem where j is different from i. The mutualistic symbiosis between organism Xi
                         and Xj
                         is modeled in Eqs. (23) and (24).

                           
                              (23)
                              
                                 
                                    
                                       X
                                       
                                          i
                                          
                                          n
                                          e
                                          w
                                       
                                    
                                    =
                                    
                                       X
                                       i
                                    
                                    +
                                    r
                                    a
                                    n
                                    d
                                    
                                       
                                          (
                                          0
                                          ,
                                          1
                                          )
                                       
                                       *
                                    
                                    
                                       (
                                       
                                          X
                                          
                                             b
                                             e
                                             s
                                             t
                                          
                                       
                                       −
                                       M
                                       u
                                       t
                                       u
                                       a
                                       l
                                       _
                                       V
                                       e
                                       c
                                       t
                                       o
                                       
                                          r
                                          *
                                       
                                       B
                                       
                                          F
                                          1
                                       
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (24)
                              
                                 
                                    
                                       X
                                       
                                          j
                                          n
                                          e
                                          w
                                       
                                    
                                    =
                                    
                                       X
                                       j
                                    
                                    +
                                    r
                                    a
                                    n
                                    d
                                    
                                       
                                          (
                                          0
                                          ,
                                          1
                                          )
                                       
                                       *
                                    
                                    
                                       (
                                       
                                          X
                                          
                                             b
                                             e
                                             s
                                             t
                                          
                                       
                                       −
                                       M
                                       u
                                       t
                                       u
                                       a
                                       l
                                       _
                                       V
                                       e
                                       c
                                       t
                                       o
                                       
                                          r
                                          *
                                       
                                       B
                                       
                                          F
                                          2
                                       
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (25)
                              
                                 
                                    M
                                    u
                                    t
                                    u
                                    a
                                    l
                                    _
                                    V
                                    e
                                    c
                                    t
                                    o
                                    r
                                    =
                                    
                                       
                                          
                                             X
                                             i
                                          
                                          +
                                          
                                             X
                                             j
                                          
                                       
                                       2
                                    
                                 
                              
                           
                        Some notes on the mutualism mathematical model:

                           
                              1.
                              
                                 rand(0,1) in Eqs. (23) and (24) is a vector of random numbers between 0 and 1.

“Mutual_Vector” represents the mutual connection between organism Xi
                                  and Xj
                                 .


                                 Xbest
                                  represents the best organism in an ecosystem. In this model, the Xbest
                                  is arbitrarily chosen among the first non-dominated rank.

Organism Xi
                                  might benefit significantly when interacting with organism Xj
                                 . Meanwhile, organism Xj
                                  might only get benefit slightly when interacting with organism Xi
                                 . Here, Benefit Factors (BF
                                 1) and (BF
                                 2) are determined stochastically as either 1 or 2. This illustrates whether an organism partially or fully benefits from the interaction.

Organisms are evolving to a fitter version only if their new fitness dominates their pre-interaction fitness. In this case, the old Xi
                                  and Xj
                                  will be replaced immediately by Xi new
                                  and Xj new
                                 , respectively. The old Xi
                                  and Xj
                                  will be moved into advanced population. Otherwise, the Xi new
                                  and Xj new
                                  will be added into advanced population for selecting the next generation ecosystem. In this way, the proposed algorithm can converge faster while maintaining good diversity. Since algorithm may gain some important information from dominated the solution in latter sorting.

For each organism Xi
                                 , this interaction counts for two function evaluations.

After the mutualism phase is finished, the organism Xi
                         selects again a new partner randomly from the ecosystem, organism Xj
                        . In this circumstance, organism Xi
                         attempts to benefit from the interaction but organism Xj
                         neither benefits nor suffers from the relationship. The commensal symbiosis between organism Xi
                         and Xj
                         is modeled in Eq. (26).

                           
                              (26)
                              
                                 
                                    
                                       X
                                       
                                          i
                                          new
                                       
                                    
                                    =
                                    
                                       X
                                       i
                                    
                                    +
                                    r
                                    a
                                    n
                                    d
                                    
                                       
                                          (
                                          −
                                          1
                                          ,
                                          1
                                          )
                                       
                                       *
                                    
                                    
                                       (
                                       
                                          X
                                          
                                             b
                                             e
                                             s
                                             t
                                          
                                       
                                       −
                                       
                                          X
                                          j
                                       
                                       )
                                    
                                 
                              
                           
                        
                     

Some notes on the commensalism mathematical model:

                           
                              1.
                              
                                 rand(−1,1) in Eq. (26) is a vector of random numbers between −1 and 1.


                                 Xbest
                                  reflects the best organism in the ecosystem, similar to those in the mutualism phase.

Organism Xi
                                  is updated by Xi new
                                  only if its new fitness dominates its pre-interaction fitness. Then, Xi
                                  will be moved into advanced population, otherwise, Xi new
                                 . This selection mechanism is analogous to those in the mutualism phase.

For each organism Xi
                                 , this interaction counts for one function evaluation.

After the commensalism phase is completed, the organism Xi
                         selects again a new organism randomly from the ecosystem, organism Xj
                        . In parasitism, organism Xi
                         is given a role similar to the anopheles mosquito through the creation of an artificial parasite called “Parasite_Vector”. Organism Xj
                         serves as a host to the Parasite_Vector. During the interaction, the Parasite_Vector tries to kill the host Xj
                         and replace Xj
                         in the ecosystem. The organism Xi
                         may gain a benefit, because by cloning it, its influence in the ecosystem may increase while Xj
                         may have to suffer and die.

The creation of Parasite_Vector is described as follows:

                           
                              1.
                              Initial Parasite_Vector is created in the search space by duplicating organism Xi
                                 . Some decision variables from the initial Parasite_Vector will be modified randomly in order to differentiate Parasite_Vector with organism Xi
                                 .

A random number is created within a range from one to the number of decision variables. This random number represents the total number of modified variables.

The location of the modified variables is determined stochastically.

Finally, the variables are modified using a uniform distribution within the range of the search space. The Parasite_Vector is ready for the parasitism phase.

Both Parasite_Vector and organism Xj
                         are then evaluated to measure their fitness. If Parasite_Vector dominates or non-dominated each other with Xj
                        , it will replace organism Xj
                         in the current ecosystem and Xj
                         will be moved into advanced population. Otherwise, the Parasite_Vector will be moved into advanced population. For each organism Xi
                        , this interaction counts for one function evaluation.

Modification of the selection mechanism is the most important task of multi-objective optimization because the careful selection of candidate solutions facilitates the generation of a good Pareto front. This study used a new selection mechanism proposed by Ali et al. [30]. During the optimization process, size of ecosystem remains ecosize. Ecosize best (elite) solutions are selected from the combined ecosystem, which mixed of the current and advanced population together. While the “highest fitness value” solution is the best solution in the single objective solution scenario, a two-solution dominance approach is used in multi-objective scenarios. Note that the total size of the combined population is larger than ecosize. However, population size during the optimization process remains ecosize. Thus, ecosize solutions are selected based on the technique as follow. At first, thus, the fast non-dominated sorting technique [31] is employed to sort the combined population into non-dominated sets (F
                        1, F
                        2, …). The solutions belonging to the best non-dominated set (Set F
                        1) are selected first to enter the main population. If size of F
                        1 is smaller than ecosize, the remaining members of the population are chosen from subsequent non-dominated fronts in rank order (F
                        2, F
                        3 …). This procedure continues until no further sets can be accommodated. Assume that Fk
                         is the last non-dominated set beyond which no other set can be accommodated. In general, the number of solutions in all sets F
                        1 to Fk
                         is greater than ecosize. To select the optimal ecosize population members using crowding entropy sorting technique [32], it is necessary to first fill all population slots in descending order of distance. Fig 5
                         provides an overview of this procedure.

The optimization process terminates when the stopping conditions are achieved. The user can set these types of conditions. Maximum generation Gmax
                         or maximum number of functions evaluations (NFE) may be used as the stopping criterion. This study used the maximum number of generation as stopping condition for the proposed algorithm. When the optimization process ends, the final set of optimal solutions, called the Pareto front, is presented to the user. Obtaining the entire Pareto front is of great importance because it assists planners to evaluate the pros and cons of each potential solution based on qualitative and experience-driven considerations.

This study analyzed a numerical case to demonstrate the effectiveness of the proposed MOSOS for the TCUT problem, with obtained results compared against four approaches also employed to handle the TCUT problem, including NSGA-II, MOPSO, MODE and MOABC. The case project adapted was a previous study of a construction project by Jun and El-Rayes [1]. The project comprised 15 construction activities, each of which has a number of possible shift alternatives. In the case study, a three shifts system (SS = 3) was utilized in combination with a total of 70 available daily labors (RC = 70). The weight for night shift in Eq. (3) was set as W = 80%. Fig. 6
                      shows the precedence relationships of the network projects. Table 1
                      illustrates project information data including allowable types of shift operation for each activity (n) and its direct cost, duration, and daily labor demand for each shift and Shift-option (Sn
                     ) for project. Project with an average of seven execution modes for each of the 15 activities generate multiple billions 715 of possible combinations for completing the entire projects. Each possible combination has a unique impact on project performance, which means that DMs must search in a large number of potential solutions to find those that establish an optimal tradeoff/balance among construction duration, cost, and the utilization of evening and night work shifts. The newly developed multi-objective optimization model was used to search the many potential solutions.

Since the original SOS is the core mechanism in the proposed MOSOS-TCUT. Only two common control parameters which are population size and maximum number of generations are needed to be manually determined in this experiment. These parameters are set based on proposed values form the literature [1,17,33] and several experiments (trial and error) like other metaheuristic algorithms as following settings: the population size was set as 200 and maximum number of generations was set as 300. The other parameters were set as default. Thirty independent optimization runs were conducted. Table 2 describes the first 8 non-dominated solutions in descending order of time, cost, the utilization labor and compromised of case study, respectively, along with optimal shift option combination, scheduling sequence, and labor for each shift. It can be seen that solution 1 generates the smallest project duration value for project while solution 3 and 5 generate the smallest values for cost and total evening and night shift working hours for project, and other solutions strike a balance among the three objectives. Fig. 7 presents schedules of three selected non-dominated solutions (1, 3, and 7) and their corresponding time, cost and total evening and night shift working hours for project. Based on the generated solutions, project managers might choose the optimal solutions for a specific project scenario based on experience, preferences, and specific conditions. If a manager needs to prioritize time, solution 1 is optimal. If a manager needs to prioritize budget and labor utilization in evening and night shifts, solution 3, 5 are optimal. On the other hand, if a manager wants to strike a measured balance between the three objectives, solution 7 provides a centrist solution that offers an acceptable project duration (27 days), a moderate cost ($128700), a moderate total labor hour value in evening and night shifts (998 h) for the project. Fig. 8 shows Pareto fronts obtained using MOSOS for case study. The Pareto front presents the relationships among project duration, cost, and labor utilization. This three-dimensional visualization of the tradeoffs may help project managers evaluate the impact on project performance of the various potential resource-utilization plans.


                        Figs. 8–10 show
                        
                        
                        
                        
                         the two objectives relationship between time and cost, cost and labor utilization, and time and labor utilization, respectively, on a two-dimensional plane. It can be seen from the time-cost curve example (Fig. 9) that lower project funding correlates with longer project completion duration and vice versa. Nevertheless, Figs. 8–10 might not be good representatives of the entire tradeoff surface in the three-dimensional space. In fact, the two-dimensional tradeoff surface, when projected from three to two dimensions, might lose some non-dominated points because there is a hidden dimension that makes these points non-dominated.

We compared MOSOS performance against NSGA-II [31], MOPSO [34], MODE [30] and MOABC [35] to assess comparative effectiveness. For comparison purposes, all five algorithms used an equal number of function evaluations, had a population size of 200 and a maximum of 300 generations. In NSGA-II, the constant mutant and crossover probability factors were set at 0.5 and 0.9, respectively. In MOPSO, the two learning factors c
                        1, c
                        2 are both chosen at 2, and the inertia factor w is set in range of 0.3–0.7. In MODE, the crossover probability CR is set to 0.8, and the scaling factor F equals to 0.5. MOSOS control parameters remained the same as stated in previous subsection. Thirty independent runs were carried out for all experiments in case study.

Much research effort has been invested in recent years to develop methods able to evaluate the performance of multi-objective optimization models. Its complex characteristics mean that multi-objective optimization results cannot be evaluated directly, unlike those of single-objective optimization. In the literature, the researchers have suggested numerous quality indicators [31,36–38]. This study used the following four evaluation methods.

                           
                              1.
                              Number of solutions found in the Pareto-optimal front: the goal of multi-objective optimization is to obtain the Pareto-optimal front that contains the non-dominated solutions of the problem under investigation. No single solution in the Pareto-optimal front may be objectively evaluated as being better than its peers [39]. Therefore, it is preferable to find as many solutions within the Pareto-optimal front as possible.


                                 Table 3 shows that MOSOS earned the highest number of solutions found in the Pareto front evaluation criterion with 20.9 solutions on average.

C-metric (C): C-metric is often used to assess the quality of the true Pareto front of optimized problems [40]. Let S
                                 1, S
                                 2⊆S be two sets of decision solutions. C-metric is defined as the mapping between the ordered pair (S1,S2) and the interval [0,1]:
                                    
                                       (24)
                                       
                                          
                                             C
                                             
                                                (
                                                
                                                   S
                                                   1
                                                
                                                ,
                                                
                                                   S
                                                   2
                                                
                                                )
                                             
                                             =
                                             
                                                
                                                   |
                                                   
                                                      {
                                                      
                                                         a
                                                         2
                                                      
                                                      ∈
                                                      
                                                         S
                                                         2
                                                      
                                                      ;
                                                      ∃
                                                      
                                                         a
                                                         1
                                                      
                                                      ∈
                                                      
                                                         S
                                                         1
                                                      
                                                      :
                                                      
                                                         a
                                                         1
                                                      
                                                      ≤
                                                      
                                                         a
                                                         2
                                                      
                                                      }
                                                   
                                                   |
                                                
                                                
                                                   |
                                                   
                                                      S
                                                      2
                                                   
                                                   |
                                                
                                             
                                          
                                       
                                    
                                 
                              

The numerator in Eq. (24) denotes that the number of solutions in S
                                 2 is dominated by at least one solution in S
                                 1, the denominator is the total solutions in S
                                 2. Provided that C(S
                                 1,S
                                 2) = 1, all solutions in S
                                 2 are dominated by or equal to solutions in S
                                 1. If C(S
                                 1,S
                                 2) = 0, then S
                                 1 covers none of the solutions in S
                                 2. Both C(S
                                 1,S
                                 2) and C(S
                                 2,S
                                 1) should be checked in the comparison because C-metric is not symmetrical in its arguments [41]. Table 4 illustrates comparison results among four algorithms in terms of C-metric, where A1, A2, A3, A4 and A5 indicate MOSOS, MODE, MOABC, MOPSO, and NSGA-II, respectively. Results show that MOSOS dominates more than 67.2% of MODE solutions, 94.4% of MODE solutions, 100.0% of MOPSO solutions, and 100.0% of NSGA-II solutions on average.

Spread (SP): this indicator [32] measures the extent of spread achieved among the non-dominated solutions. The mathematical definition of SP may be given as:
                                    
                                       (25)
                                       
                                          
                                             S
                                             P
                                             =
                                             
                                                
                                                   
                                                      ∑
                                                      
                                                         i
                                                         =
                                                         1
                                                      
                                                      k
                                                   
                                                   
                                                      d
                                                      
                                                         (
                                                         
                                                            E
                                                            i
                                                         
                                                         ,
                                                         Ω
                                                         )
                                                      
                                                      +
                                                      
                                                         ∑
                                                         
                                                            X
                                                            ∈
                                                            Ω
                                                         
                                                      
                                                      
                                                         |
                                                         
                                                            d
                                                            
                                                               (
                                                               X
                                                               ,
                                                               Ω
                                                               )
                                                            
                                                            −
                                                            
                                                               d
                                                               ¯
                                                            
                                                         
                                                         |
                                                      
                                                   
                                                
                                                
                                                   
                                                      ∑
                                                      
                                                         i
                                                         =
                                                         1
                                                      
                                                      k
                                                   
                                                   
                                                      d
                                                      (
                                                      
                                                         E
                                                         i
                                                      
                                                      ,
                                                      Ω
                                                      )
                                                      +
                                                   
                                                   
                                                      (
                                                      
                                                         |
                                                         Ω
                                                         |
                                                      
                                                      −
                                                      k
                                                      )
                                                   
                                                   
                                                      d
                                                      ¯
                                                   
                                                
                                             
                                          
                                       
                                    
                                 where Ω is a set of solutions, 
                                    
                                       (
                                       
                                          E
                                          1
                                       
                                       ,
                                       …
                                       ,
                                       
                                          E
                                          k
                                       
                                       )
                                    
                                  are k extreme solutions in the set of true Pareto-front PF, k is the number of objectives and 
                                    
                                       d
                                       
                                          (
                                          X
                                          ,
                                          Ω
                                          )
                                       
                                       =
                                       
                                          min
                                          
                                             Y
                                             ∈
                                             Ω
                                             ,
                                             Y
                                             ≠
                                             X
                                          
                                       
                                       
                                          ∥
                                          
                                             F
                                             (
                                             X
                                             )
                                             −
                                             F
                                             (
                                             Y
                                             )
                                          
                                          ∥
                                       
                                    
                                  is the minimum Euclidean distance between solution X and its neighboring solutions in the obtained non-dominated Ω set; 
                                    
                                       
                                          d
                                          ¯
                                       
                                       =
                                       
                                          1
                                          
                                             |
                                             Ω
                                             |
                                          
                                       
                                       
                                          ∑
                                          
                                             X
                                             ∈
                                             Ω
                                          
                                       
                                       
                                          d
                                          (
                                          X
                                          ,
                                          Ω
                                          )
                                       
                                    
                                  is the mean value of all d(X, Ω), |Ω| is the total solutions in Ω set. A value of zero for this metric indicates all members of the Pareto optimal set are spaced equidistantly. A smaller value of SP indicates a better distribution and diversity of non-dominated solutions. Table 5
                                 
                                  shows a comparison of the spread metric for different algorithms. This supports that the average performance of the MOSOS is superior to that of the other four algorithms in case study.

Hyper-volume (HV): this indicator calculates the volume (in the objective space) covered by members of a non-dominated set of solutions Ω for a problem that works to minimize all objectives [37,42]. A hypercube vi
                                  is constructed for each solution Xi
                                  ∈ Ω with reference point W and the solution Xi as the diagonal corners of the hypercube. The reference point can be found simply by constructing a vector of worst objective function values. Thereafter, a union of all hypercubes is found and its HV is calculated as:
                                    
                                       (26a)
                                       
                                          
                                             H
                                             V
                                             =
                                             
                                                ⋃
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   |
                                                   Ω
                                                   |
                                                
                                             
                                             
                                                v
                                                i
                                             
                                          
                                       
                                    
                                 
                              

Algorithms with larger HV values are desirable. The HV value of a set of solutions is normalized using a reference set of Pareto optimal solutions with the same reference point. After normalization, the HV values are confined to range [0,1]. Table 6
                        
                         lists the results for each of the four compared algorithms in terms of HV. From Table 6, we see that the proposed model obtains the largest HV values in case study, which means that MOSOS has better convergence and diversity performance than the other four algorithms.

A hypothesis test was performed to further demonstrate the superiority of the MOSOS over the other approaches. In all indicators, the hypothesis tests only considered the MOSOS and the best of other approaches. A one-tailed t-test with equal sample sizes and unequal and unknown variances analyzed the following hypothesis tests:


                           
                              Hypothesis
                              MOSOS versus standard MODE in term of C-metric (Table 4).

H0: There is no difference in the C-metric of the MOSOS algorithm and that of the MODE algorithm.

H1: The MOSOS algorithm is significantly better than the MODE algorithm.

MOSOS 
                              
                                 
                                    s
                                    1
                                 
                                 =
                                 0.130
                              
                           ; MODE: 
                              
                                 
                                    s
                                    2
                                 
                                 =
                                 0.076
                              
                           ; 
                              
                                 
                                    n
                                    1
                                 
                                 =
                                 
                                    n
                                    2
                                 
                                 =
                                 n
                                 =
                                 30
                              
                           ;

                              
                                 
                                    
                                       
                                          
                                             v
                                          
                                          
                                             =
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            (
                                                            
                                                               
                                                                  s
                                                                  1
                                                                  2
                                                               
                                                               /
                                                               
                                                                  n
                                                                  1
                                                               
                                                               +
                                                               
                                                                  s
                                                                  2
                                                                  2
                                                               
                                                               /
                                                               
                                                                  n
                                                                  2
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                      2
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  (
                                                                  
                                                                     
                                                                        s
                                                                        1
                                                                        2
                                                                     
                                                                     /
                                                                     
                                                                        n
                                                                        1
                                                                     
                                                                  
                                                                  )
                                                               
                                                            
                                                            2
                                                         
                                                         
                                                            
                                                               n
                                                               1
                                                            
                                                            −
                                                            1
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            
                                                               
                                                                  (
                                                                  
                                                                     
                                                                        s
                                                                        2
                                                                        2
                                                                     
                                                                     /
                                                                     
                                                                        n
                                                                        2
                                                                     
                                                                  
                                                                  )
                                                               
                                                            
                                                            2
                                                         
                                                         
                                                            
                                                               n
                                                               2
                                                            
                                                            −
                                                            1
                                                         
                                                      
                                                   
                                                
                                                =
                                                
                                                   
                                                      
                                                         
                                                            (
                                                            
                                                               
                                                                  
                                                                     0.130
                                                                  
                                                                  2
                                                               
                                                               /
                                                               30
                                                               +
                                                               
                                                                  
                                                                     0.076
                                                                  
                                                                  2
                                                               
                                                               /
                                                               30
                                                            
                                                            )
                                                         
                                                      
                                                      2
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  (
                                                                  
                                                                     
                                                                        
                                                                           0.130
                                                                        
                                                                        2
                                                                     
                                                                     /
                                                                     30
                                                                  
                                                                  )
                                                               
                                                            
                                                            2
                                                         
                                                         
                                                            30
                                                            −
                                                            1
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            
                                                               
                                                                  (
                                                                  
                                                                     
                                                                        
                                                                           0.076
                                                                        
                                                                        2
                                                                     
                                                                     /
                                                                     30
                                                                  
                                                                  )
                                                               
                                                            
                                                            2
                                                         
                                                         
                                                            30
                                                            −
                                                            1
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                             =
                                          
                                          
                                             
                                                46.8
                                                
                                                (
                                                
                                                   closest
                                                   
                                                   to
                                                   
                                                   47
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

Critical value: with significant level of t-test 
                              
                                 α
                                 =
                                 0.05
                              
                           ; 
                              
                                 ν
                                 =
                                 47
                              
                           ; we have 
                              
                                 
                                    t
                                    
                                       α
                                       ;
                                       ν
                                    
                                 
                                 =
                                 
                                    t
                                    
                                       0.05
                                       ;
                                       47
                                    
                                 
                                 =
                                 1.678
                              
                           
                           
                              
                                 
                                    
                                       
                                          
                                             
                                                Statistical
                                                
                                                test:
                                                
                                                t
                                             
                                          
                                          
                                             =
                                          
                                          
                                             
                                                
                                                   
                                                      (
                                                      
                                                         
                                                            
                                                               x
                                                               ¯
                                                            
                                                            1
                                                         
                                                         −
                                                         
                                                            
                                                               x
                                                               ¯
                                                            
                                                            2
                                                         
                                                      
                                                      )
                                                   
                                                   
                                                      
                                                         
                                                            s
                                                            1
                                                            2
                                                         
                                                         /
                                                         
                                                            n
                                                            1
                                                         
                                                         +
                                                         
                                                            s
                                                            2
                                                            2
                                                         
                                                         /
                                                         
                                                            n
                                                            2
                                                         
                                                      
                                                   
                                                
                                                =
                                                
                                                   
                                                      (
                                                      
                                                         0.6720
                                                         −
                                                         0.1583
                                                      
                                                      )
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               0.130
                                                            
                                                            2
                                                         
                                                         /
                                                         30
                                                         +
                                                         
                                                            
                                                               0.076
                                                            
                                                            2
                                                         
                                                         /
                                                         30
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                             =
                                          
                                          
                                             
                                                18.655
                                                >
                                                1.678
                                                =
                                                
                                                   t
                                                   
                                                      0.05
                                                      ;
                                                      47
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           where n is the sample size (number of experimental runs), ν is the degrees of freedom used in the test, 
                              
                                 s
                                 1
                                 2
                              
                            and 
                              
                                 s
                                 2
                                 2
                              
                            are the unbiased estimators of the variances of the two samples (MOSOS and MODE). The denominator of t is the standard error of the difference between two means 
                              
                                 
                                    x
                                    ¯
                                 
                                 1
                              
                           , 
                              
                                 
                                    x
                                    ¯
                                 
                                 2
                              
                            (average).

H0 is rejected because the statistical test value noted above is greater than the critical value, which demonstrates the proposed MOSOS as statistically superior to the standard MOABC in terms of the C-metric. In the same manner, Table 7
                            shows the results of the hypothesis test between MOSOS and the best of other approaches in terms of the C-metric (C), Spread (SP) and Hyper-volume (HV):

As shown in Table 7, the proposed algorithm MOSOS produced results that were significantly better than other approaches in terms of the C-metric, spread, and hyper-volume 
                              
                                 (
                                 t
                                 =
                                 18.655
                                 >
                                 1.678
                                 =
                                 
                                    t
                                    
                                       0.05
                                       ;
                                       47
                                    
                                 
                                 ;
                                 
                                 
                                 t
                                 =
                                 −
                                 1.758
                                 <
                                 −
                                 1.674
                                 =
                                 −
                                 
                                    t
                                    
                                       0.05
                                       ;
                                       54
                                    
                                 
                                 
                                 
                                 a
                                 n
                                 d
                                 
                                 
                                 t
                                 =
                                 8.567
                                 >
                                 1.672
                                 =
                                 
                                    t
                                    
                                       0.05
                                       ;
                                       57
                                    
                                 
                                 )
                              
                           .

The proposed algorithm is also analyzed statistically with other algorithms using non parametric Wilcoxon's signed ranks test [43]. Wilcoxon's test is defined as follows. Let di
                            be the difference between the performance scores of the two algorithms on ith out of n solutions. The differences are ranked according to their absolute values; in case of ties, the practitioner can apply one of the available methods existing in the literature [44] such as ignore ties, assign the highest rank, compute all the possible assignments and average the results obtained in every application of the test, and so on. This study uses the average ranks for dealing with ties (for example, if two differences are tied in the assignation of ranks 1 and 2, assign rank 1.5 to both differences).

Let R+
                            be the sum of ranks for the solutions in which the proposed algorithm MOSOS outperformed the compared algorithm, and R
                           − the sum of ranks for the opposite. Ranks of di
                            = 0 are split evenly among the sums; if there is an odd number of them, one is ignored:

                              
                                 (27)
                                 
                                    
                                       
                                          
                                             
                                                R
                                                +
                                             
                                          
                                          
                                             =
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      
                                                         d
                                                         i
                                                      
                                                      >
                                                      0
                                                   
                                                
                                                
                                                   r
                                                   a
                                                   n
                                                   k
                                                   (
                                                   
                                                      d
                                                      i
                                                   
                                                   )
                                                
                                                +
                                                
                                                   1
                                                   2
                                                
                                                
                                                   ∑
                                                   
                                                      
                                                         d
                                                         i
                                                      
                                                      =
                                                      0
                                                   
                                                
                                                
                                                   r
                                                   a
                                                   n
                                                   k
                                                   (
                                                   
                                                      d
                                                      i
                                                   
                                                   )
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                R
                                                −
                                             
                                          
                                          
                                             =
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      
                                                         d
                                                         i
                                                      
                                                      <
                                                      0
                                                   
                                                
                                                
                                                   r
                                                   a
                                                   n
                                                   k
                                                   (
                                                   
                                                      d
                                                      i
                                                   
                                                   )
                                                
                                                +
                                                
                                                   1
                                                   2
                                                
                                                
                                                   ∑
                                                   
                                                      
                                                         d
                                                         i
                                                      
                                                      =
                                                      0
                                                   
                                                
                                                
                                                   r
                                                   a
                                                   n
                                                   k
                                                   (
                                                   
                                                      d
                                                      i
                                                   
                                                   )
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

Let 
                           T be the smaller of the sums, T = min(R+, R
                           −). If T is less than or equal to the value of the distribution of Wilcoxon for n degrees of freedom ([45], Table B.12), the null hypothesis of equality of means is rejected; this will mean that proposed algorithm outperforms the other one.


                           Table 8 displays Wilcoxon's signed ranks test results of proposed algorithm and benchmarked algorithms for number of solutions found, spread and hyper volume indicators, respectively. It can be seen from Table 8 that the MOSOS outperformed the compared algorithms in all indicators since (T < Critical 
                           value).

@&#CONCLUSIONS@&#

A novel Multiple Objective Symbiotic Organisms Search optimization algorithm has been introduced for optimizing work shift schedules. MOSOS is a population based meta-heuristic algorithm which imitates the biological interactions between organisms in an ecosystem. Three phases of mutualism, commensalism, and parasitism inspire MOSOS to find the non-dominated solutions of given multiple objectives. The proposed algorithm run a construction project to demonstrate its efficacy in finding optimal schedules that simultaneously minimize project duration (time), cost, and the utilization of evening and night work shifts while satisfying with all precedence and labor availability constraints. A project was conducted to illustrate the impact of three shifts systems on project performance. Experimental results shows that the proposed MOSOS approach efficiently solves multi-objective TCUT problems and finds Pareto optimal solutions in one simulation run. Results obtained from the proposed approach have been compared with those obtained from widely used multi-objective evolutionary algorithms such as MOABC, MODE, MOPSO, and NSGA-II. MOSOS displayed better diversity characteristics, yielded better compromise solutions, and attained a higher degree of satisfaction. It is also observed that the proposed approach provides a competitive performance in terms of diversity characteristics, compromise solutions and degree of satisfactions.

The Pareto front generated by MOSOS provides useful information that assists construction-project decision makers determine the optimal tradeoff among the three important project considerations of project duration, cost, and labor utilization.

The proposed MOSOS is simple, robust and efficient. It does not impose any limitation on the number of objectives and can be extended to include more objectives. Further minor modifications of the proposed MOSOS algorithm hold interesting potential to resolve other multi-objective optimization problems in the field of construction management such as the tradeoffs among performance, cost, and reliability in engineering design work; time, cost and safety tradeoffs; and resource-constrained and resource-leveling in project scheduling activities.

Detail flowchart of MOSOS for the TCUT problem.


                     
                        
                     
                  

@&#REFERENCES@&#

