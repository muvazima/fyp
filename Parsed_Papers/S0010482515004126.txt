@&#MAIN-TITLE@&#The Latin American laws of correct nutrition: Review, unified interpretation, model and tools

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We propose a model for the “Laws of the Correct Nutrition” in use in Latin America.


                        
                        
                           
                           The proposed model describes and specifies the Laws in a formal language.


                        
                        
                           
                           We validate and verify the model using a state of the art tool.


                        
                        
                           
                           We designed a nourishing menu enforcing the Laws through model.


                        
                        
                           
                           We developed a software tool as support for the creation of model-based valid menus.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Laws of Nutrition

Domain model

Diet planning

Menu planning

Unified Modeling Language (UML)

Object Constraint Language (OCL)

Software

Model validation

@&#ABSTRACT@&#


               
               
                  Background: The “Laws of Correct Nutrition”: the Law of Quantity, the Law of Quality, the Law of Harmony and the Law of Adequacy, provide the basis of a proper diet, i.e. one that provides the body with the energy required and nutrients it needs for daily activities and maintenance of vital functions. For several decades, these Laws have been the basis of nourishing menus designed in Latin America; however, they are stated in a colloquial language, which leads to differences in interpretation and ambiguities for non-experts and even experts in the field.
                  Methods: We present a review of the different interpretations of the Laws and describe a consensus. We represent concepts related to nourishing menu design employing the Unified Modeling Language (UML). We formalize the Laws using the Object Constraint Language (OCL). We design a nourishing menu for a particular user through enforcement of the Laws.
                  Results: We designed a domain model with the essential elements to plan a nourishing menu and we expressed the necessary constraints to make the model׳s behavior conform to the four Laws. We made a formal verification and validation of the model via USE (UML-based Specification Environment) and we developed a software prototype for menu design under the Laws.
                  Conclusion: Diet planning is considered as an art but consideration should be given to the need for a set of strict rules to design adequate menus. Thus, we model the “Laws of Nutrition” as a formal basis and standard framework for this task.
               
            

@&#INTRODUCTION@&#

For a long time society has recognized the relationship between diet and health. But today׳s common concepts of ‘balanced diet’ or ‘good nutrition’ have emerged since 1935 when Dr. Pedro Escudero, considered the “father of nutrition” in Latin America [1,2], proposed four Laws of Correct Nutrition, now considered one of his fundamental contributions to the discipline [3]. Also known as “Laws of Feeding”
                        1
                     
                     
                        1
                        For sake of simplicity, we will call them “Laws of Nutrition”, as no official translation is available.
                      
                     [4], these Laws are:
                        
                           •
                           Law of Quantity, which states that the amount of energy the body demands should be the amount consumed.

Law of Quality, which states foods from all the food groups should be consumed.

Law of Harmony, which highlights the need to keep a proper relation between the distributions of ingested nutrients.

Law of Adequacy, which insists on adapting diet to the nutritional, social and psychological needs of individuals.

On the one hand, the importance of the Laws of Correct Nutrition is that they are the basis of nutrition theory [5] as they serve as a rule to correctly calculate nutritious menus and to classify them. However, since their introduction these Laws have been stated in natural language, which has the disadvantage of allowing different interpretations depending on the personal point of view, knowledge and experience of the reader. In fact, discrepancies in interpretation can be found in the literature, especially on informal Web sites as well, as different interpretations in different countries.

On the other hand, the general-purpose diagram-based Unified Modeling Language (UML) is currently the standard modeling language for the analysis and design of information systems. However, this is not the only field in which this language can be used as its applicability to cases that need to be modeled has been proved with multiple examples [6]. In medical systems, for example, there are models for stroke rehabilitation processes [7], models for the molecular biology domain [8], and UML forms the basis of the caCORE Software Development Kit [9].

Nevertheless, UML itself lacks of sufficient expressiveness to specify detailed restrictions of classes and data types. To support such expressiveness a new standard has emerged: Object Constraint Language (OCL) that is a formal notation created to describe constraints and restrictions on UML objects models [10]. OCL allows the expression of arbitrarily complex constraints that must be always true (called invariants) which may be global properties or may be associated with methods of a class [11].

The main advantage of OCL is that it allows specifying restrictions on a notation free of ambiguities and without side effects, so it is used to complement UML diagrams. Although other languages that can be used to the same purpose, OCL is the only one that is standardized [12].

OCL has been used to model different kind of problems, for example, in the validation of the security properties of the San Francisco Subway train system [13], to specify the API of the Java Card smart card [14], or to specify business rules of financial messaging [15]. In medical systems, there is GELLO, an object-oriented query and expression language based on OCL. It is used for clinical decision support by facilitating the retrieving of data models from HL7 Reference Information Model compliant databases and is designed to provide a rich expression language for decision logic in guideline formalisms [16]. These works show it is possible to verify and validate UML conceptual schemas with arbitrary constraints formalized in OCL [17].

Due to its expressiveness and its potential to model real world problems, OCL was chosen for modeling the Laws of Nutrition, thus allowing the creation of a common language, where both researchers in Computer Science and in Health Science can interpret the specifications without misunderstanding.

The aim of this research was to characterize the validity of a nourishing menu. Then we propose model the basic elements needed to create menus using the UML, make a review of the Laws of Correct Nutrition, and formalize these Laws in a unified format, using the OCL, while verifying and validating the correct specification of constraints and restrictions using the open source licensed modeling tool USE: A UML based Specification Environment [18]. As far as we know, there are no previous proposals modeling this set of postulates.

A domain model captures the most important types of objects in the context of some area of interest; it represents the starting point in an Object Oriented Programming software development methodology [19]. Firstly, we design a UML class diagram representing the domain model. Each class in the domain consists of attributes, i.e. basic data, and methods, i.e. operations over the data. Secondly, we specified the invariants for the Laws of Nutrition. The code conventions and programming styles used are the ones proposed and used by Google in its Java software projects [20].

The scope of the Laws corresponds to the planning of nourishing menus. Each menu item is generally quantified in rations, grams or milliliters, which leads to an overall quantification of calories and nutrients [21].


                        
                        Fig. 1 shows the proposed domain model, which considers the basic elements in the process of planning nourishing menus. The elements are enumerations, classes, one abstract class and one association class describing the relationship amongst them. Enumerations in the model are data types consisting of predefined list of values used to define valid constant values. Variables declared as having an enumerated type must be equal to one of the predefined values of that type. Enumerations shown in Fig. 1 are:
                           
                              •
                              
                                 Gender: a set with two values identified as female or male.


                                 PhysicalActivity: set with four types of physical activity: repose, light activity, moderate activity and intense activity [22]. See 
                                 Table 1 for details.


                                 MealTime: a set that specifies the occasions in a day when food is eaten. Traditional occasions are breakfast, lunch, and dinner, but morning snack, evening snack, and night snack are also considered [23].


                                 FoodGroup: food sets with similar properties. The classifications are taken from Mexican food composition tables [24]: Cereal grains and its products, legumes, oleaginous and nut seeds, vegetables, starchy roots, fruits, meat and viscera, marine resources, native food, dairy products, poultry eggs, oils and fats, sweets and honey, processed and ready to eat foods and beverages.


                                 HealthyPlateGroup: the food classification according to the ideal dish proposed in the ‘Healthy Eating Plate’ [25]: vegetables, fruits, whole grains, healthy protein and healthy oils. To consider other foods not listed in these healthy groups, the addition of an ‘others’ group was necessary.


                                 UnitOfMeasurement: typical units of measurement to quantify food. Valid units are slice, gram, kilogram, milliliter, liter, ounce, pound, cup, centimeter, inch, teaspoon and tablespoon [26]. We also add the very common household units can and pinch.

An abstract class represents an element that cannot be instantiated directly, thus it is useful in case of inheritance. The abstract class shown in Fig. 1 is:
                           
                              •
                              
                                 Recipe: represents a set of one or more basic foodstuffs. This class models both dishes and drinks, because both have the same characteristics and operations.

Classes in the model are abstract representations of the objects involved in the menu planning process. Classes shown in Fig. 1 are:


                                 User: an individual with particular characteristics that requires a menu.


                                 BasicFoodstuff100gr: a distinct ingestible substance that belongs to any of the food groups, in 100g portions. The attribute values are taken from Mexican food composition tables [24]. Examples include lemon, condensed milk or honey.


                                 Dish: a solid or semisolid stew that can be ingested during a meal. A dish may be as simple as one taco or as sophisticated as a serving of “Rice and beans”, which is Haiti׳s national dish and a traditional dish in throughout Latin America, consisting of 50g of rice, 30g of black beans, and half a cup of chopped onion, 1 tablespoon of vegetable oil and 1 teaspoon of salt. This class inherits attributes and methods from Recipe.


                                 Drink: a liquid that can be ingested during a meal. For example, a drink as simple as 1L of orange juice or as sophisticated as 1 cup of “Spiced coffee”, a common aromatic coffee made with dark roasted coffee, brown sugar, cinnamon, cloves and orange peel. This class inherits attributes and methods from Recipe.


                                 Meal: a set of dishes, drinks and basic foodstuffs by themselves ingested at a certain time of the day. For example a typical breakfast consisting of 200ml of orange juice, ½ piece of bread roll and 2 scrambled eggs.


                                 Menu: a particular set of meals that a user should eat during one day to fulfill his or her nutritional requirements.

An association class is the result of a logical connection between classes, the association classes found on Fig. 1 are:


                                 RecipeIngredient: the class resulting from the relation between Recipe and BasicFoodstuff100gr. Each ingredient from a recipe is generally measured in household units, so a conversion rule is needed in order to obtain the corresponding value of nutrients in grams or milliliters.


                                 MealIngredient: the class resulting from the relation between Meal and BasicFoodstuff100gr. As before, each ingredient in a meal is generally measured in household units, so a conversion rule is needed in order to obtain the corresponding value of nutrients in grams or milliliters.

Logical connections between classes found on Fig. 1 are:

Aggregation: Two uni-directional associations exist between User and BasicFoodstuff100gr, because a user may have a set of favorite foodstuffs and a set of offending foodstuffs.

Composition: Three uni-directional associations exist between different classes. A Menu has exactly one User and it is composed of 1 or more Meal instances. A Meal is made up of 1 or more Recipe instances.

Generalization: This is the relationship between Recipe (the parent or super class) and Dish and Drink (the children or subclasses). In addition, RecipeIngredient is the parent of MealIngredient class. Child classes inherit all attributes and methods from their parent classes.

The definition of getter and setter methods is required in each class of Fig. 1, except in BasicFoodstuff100gr. Subsequently, an invariant is required for the group of users under consideration. Lastly, the four Laws of Correct Nutrition are presented.

We define methods to obtain different characteristics and requirements of a user. Nutrition experts use well known formulas to calculate these characteristics and requirements. Attributes weight, height and age are measured in kg, cm and years, respectively.

Lorentz׳s formula is commonly used to obtain the Theoretical Ideal Weight (TIW) of an individual [22], shown in Eqs. (1) and (2).
                                 
                                    (1)
                                    
                                       
                                          
                                             
                                                
                                                   TIW
                                                
                                                
                                                   women
                                                
                                             
                                          
                                          =
                                          
                                             (
                                             
                                                
                                                   height
                                                
                                                –
                                                100
                                             
                                             )
                                          
                                          –
                                          
                                             (
                                             
                                                
                                                   (
                                                   
                                                      
                                                         height
                                                      
                                                      –
                                                      150
                                                   
                                                   )
                                                
                                                /
                                                2
                                             
                                             )
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    (2)
                                    
                                       
                                          
                                             
                                                TIW
                                             
                                             
                                                men
                                             
                                          
                                          =
                                          
                                             (
                                             
                                                
                                                   height
                                                
                                                –
                                                100
                                             
                                             )
                                          
                                          –
                                          
                                             (
                                             
                                                
                                                   (
                                                   
                                                      
                                                         height
                                                      
                                                      –
                                                      150
                                                   
                                                   )
                                                
                                                /
                                                4
                                             
                                             )
                                          
                                       
                                    
                                 
                              
                           

The following code shows the OCL implementation to compute User׳s TIW:
                                 
                                    Table
                                    
                                       
                                       
                                          
                                             
                                                context User: getTIW(): Real
                                             
                                          
                                          
                                             
                                                
                                                body: if (gender = Gender::FEMALE) then
                                          
                                          
                                             
                                                
                                                result = (height–100)–((height–150) / 2)
                                          
                                          
                                             
                                                else
                                          
                                          
                                             
                                                
                                                result = (height–100)–((height–150) / 4)
                                          
                                       
                                    
                                 
                              
                           

The Theoretical Ideal Weight classifies an individual as having acceptable weight if they are within 90–119% of the calculated ideal weight [22]. That is, an individual with a weight within this range is considered normal and neither underweight nor overweight (see user invariant in Section 2.2.2).

To model the first Law of Nutrition, the Law of Quantity, first it is necessary to compute the minimal energy requirement of the body, known as Basal Metabolic Rate (BMR). The most commonly used formula, for both clinical and research purposes, is the Harris–Benedict equation, reviewed by Mifflin and St Jeor [27], shown in Eqs. (3) and (4).
                                 
                                    (3)
                                    
                                       
                                          B
                                          M
                                          
                                             
                                                R
                                             
                                             
                                                w
                                                o
                                                m
                                                e
                                                n
                                             
                                          
                                          
                                          =
                                          
                                          (
                                          10
                                          *
                                          w
                                          e
                                          i
                                          g
                                          h
                                          t
                                          )
                                          +
                                          (
                                          6.25
                                          *
                                          h
                                          e
                                          i
                                          g
                                          h
                                          t
                                          )
                                          −
                                          (
                                          5
                                          *
                                          a
                                          g
                                          e
                                          )
                                          –
                                          161
                                       
                                    
                                 
                              
                              
                                 
                                    (4)
                                    
                                       
                                          B
                                          M
                                          
                                             
                                                R
                                             
                                             
                                                m
                                                e
                                                n
                                             
                                          
                                          =
                                          (
                                          10
                                          *
                                          w
                                          e
                                          i
                                          g
                                          h
                                          t
                                          )
                                          +
                                          (
                                          6.25
                                          *
                                          h
                                          e
                                          i
                                          g
                                          h
                                          t
                                          )
                                          −
                                          (
                                          5
                                          *
                                          a
                                          g
                                          e
                                          )
                                          +
                                          5
                                       
                                    
                                 
                              
                           

The following code shows the OCL implementation to compute User׳s BMR:
                                 
                                    Table
                                    
                                       
                                       
                                          
                                             
                                                context User::getBMR(): Real
                                             
                                          
                                          
                                             
                                                
                                                body: if (gender = Gender.FEMALE) then
                                             
                                          
                                          
                                             
                                                
                                                result = (10*weight) + (6.25*height)−(5*age) - 161
                                          
                                          
                                             
                                                
                                                
                                                else
                                             
                                          
                                          
                                             
                                                
                                                result = (10*weight) + (6.25*height)−(5*age) + 5
                                          
                                          
                                             
                                                
                                                
                                                endif
                                             
                                          
                                       
                                    
                                 
                              
                           

Thermic Effect of Food (TEF), which consists of energy expenditure required to process food, is computed from BMR according to Eq. (5).
                                 
                                    (5)
                                    
                                       
                                          T
                                          E
                                          F
                                          =
                                          B
                                          M
                                          R
                                          *
                                          0.10
                                       
                                    
                                 
                              
                           

Subsequently, daily Total Energy Expenditure (TEE) is calculated. This one corresponds to the daily recommendation of calories for the user. TEF is added to BMR as well as the Thermic Effect of Activity (TEA), which is obtained from Table 1 
                              [28]. Eq. (6) shows the TEE formula.
                                 
                                    (6)
                                    
                                       
                                          T
                                          E
                                          E
                                          =
                                          B
                                          M
                                          R
                                          +
                                          T
                                          E
                                          F
                                          +
                                          T
                                          E
                                          A
                                       
                                    
                                 
                              
                           

The following code shows the OCL implementation to compute a user׳s TEE:
                                 
                                    Table
                                    
                                       
                                       
                                          
                                             
                                                context User::getTEE(): Real
                                             
                                          
                                          
                                             
                                                
                                                body: (let tef = (getBMR() * 0.10) in
                                             
                                          
                                          
                                             
                                                
                                                
                                                if (gender = Gender::FEMALE) then
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                if (physicalAct = PhysicalActivity::REPOSE) then
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                result = getBMR() + tef
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                else if (physicalAct = PhysicalActivity::LIGHT) then
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                result = getBMR() + tef + (getBMR() * 0.12)
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                else if (physicalAct = PhysicalActivity::MODERATE) then
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                result = getBMR() + tef + (getBMR() * 0.27)
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                else
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                result = getBMR() + tef + (getBMR() * 0.45)
                                          
                                          
                                             
                                                
                                                
                                                
                                                endif endif endif
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                
                                                else
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                
                                                
                                                
                                                if (physicalAct = PhysicalActivity::REPOSE) then
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                
                                                
                                                
                                                result = getBMR() + tef
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                else if (physicalAct = PhysicalActivity::LIGHT) then
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                result = getBMR() + tef + (getBMR() * 0.14)
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                else if (physicalAct = PhysicalActivity::MODERATE) then
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                result = getBMR() + tef + (getBMR() * 0.27)
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                else
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                result = getBMR() + tef + (getBMR() * 0.54)
                                          
                                          
                                             
                                                
                                                
                                                
                                                endif endif endif
                                             
                                          
                                          
                                             
                                                
                                                
                                                endif)
                                          
                                       
                                    
                                 
                              
                           

In the model, a RecipeIngredient represents the presence of a BasicFoodstuff100gr in a Recipe. The methods of RecipeIngredient along with the methods of MealIngredient are the foundations from which the energy and macro- and micro-nutrient values of the menu are calculated.

For attributes: energy, carbohydrates, protein, fat, saturated fat, monounsaturated fat, polyunsaturated fat, cholesterol, calcium, phosphorus, iron, magnesium, sodium, potassium, zinc, vitamin A, vitamin C, vitamin B1, vitamin B2, vitamin B3, vitamin B6, vitamin B9, vitamin B12, water, fiber and price, a corresponding get[Attribute]() method converts 100g to the appropriate value for the recipe. For example, energy of the ingredient is obtained via getEnergy() method:
                                 
                                    Table
                                    
                                       
                                       
                                          
                                             
                                                context RecipeIngredient::getEnergy(): Real
                                             
                                          
                                          
                                             
                                                
                                                body: basicFoodstuff100gr.energy * inGrams/100
                                          
                                       
                                    
                                 
                              
                           

All other attributes follow same method structure. The same methods apply to MealIngredient class as it inherits from RecipeIngredient.

To calculate the energy and macro- and micro-nutrients of a Recipe, Meal and the overall Menu, corresponding methods in each class share the same structure. For example, the calculation of the energy of a Recipe, Meal or Menu corresponds to the sum of the energy of their composed classes:
                                 
                                    Table
                                    
                                       
                                       
                                          
                                             
                                                context Recipe::getEnergy(): Real
                                             
                                          
                                          
                                             
                                                
                                                
                                                body: recipeIngredient.getEnergy()->sum()
                                          
                                          
                                             
                                                context Meal::getEnergy(): Real
                                             
                                          
                                          
                                             
                                                
                                                
                                                body: foods.getEnergy()->sum()+
                                          
                                          
                                             
                                                
                                                
                                                mealIngredient.getEnergy()->sum()
                                          
                                          
                                             
                                                context Menu::getEnergy(): Real
                                             
                                          
                                          
                                             
                                                
                                                
                                                body: meals.getEnergy()->sum()
                                          
                                       
                                    
                                 
                              
                           

All other methods of Recipe, Meal and Menu follow the same structure to calculate overall value for the recipe, meal and menu.

The model considers only adult users with a weight within the ‘normal’ range of their theoretical ideal weight and without pathologies. Therefore, users represent individuals between 18 and 60 years old and who have a weight in the range defined by the invariant:
                              
                                 Table
                                 
                                    
                                    
                                       
                                          
                                             Context User
                                       
                                       
                                          
                                             
                                             inv StandardAdult: (age>= 18) and (age<= 60) and
                                          
                                       
                                       
                                          
                                             
                                             
                                             (weight >= getTIW() * 0.90) and
                                          
                                       
                                       
                                          
                                             
                                             
                                             (weight <= getTIW() * 1.19) and
                                          
                                       
                                       
                                          
                                             
                                             
                                             (isIll = false)
                                       
                                    
                                 
                              
                           
                        

The amount of food should be sufficient to meet the caloric needs of the body and to maintain caloric balance [29]. Caloric balance means that the amount of calories consumed during the day should be equal to those expended.

Any food regime that accomplishes this Law is considered as sufficient. If it does not cover the caloric requirements for balance, it is insufficient, and if the intake exceeds the needs, it is considered excessive 
                              [3].

The Law of Quantity states that ingested food must provide the caloric amounts required to satisfy the energy demands of the body (TEE) with a commonly accepted margin of error of 10%. The following invariant validates this Law:
                                 
                                    Table
                                    
                                       
                                       
                                          
                                             
                                                context Menu
                                          
                                          
                                             
                                                
                                                inv LawOfQuantity: getEnergy() >= (user.getTEE() * 0.90)
                                          
                                          
                                             
                                                
                                                
                                                
                                                and getEnergy() <= (user.getTEE() * 1.10)
                                          
                                       
                                    
                                 
                              
                           

A diet should be complete in composition to provide the body, which is an indivisible unit, with all substances that integrate it [29]. This Law states that ingested food must contain nutrients of each food group [30]. This Law may be satisfied following the guidelines ‘The eatwell plate’ [31], ‘Plato del bien comer’ [32], ‘Plato ideal’ [33] or ‘MyPlate’ [34], to name just a few government proposals. There are also non-government proposals such as ‘Healthy Eating Plate’ [25]. These dietary guidelines sketched as ‘plates’ divide foods into groups based on their composition and nutrient contributions.

The Law of Quality invariant follows the recommendations of the ‘Healthy Eating Plate’, food consumed during the day must contain the necessary nutrients from the five food groups and water [25]:
                                 
                                    Table
                                    
                                       
                                       
                                          
                                             
                                                Context Menu
                                          
                                          
                                             
                                                
                                                inv LawOfQuality:
                                          
                                          
                                             
                                                
                                                
                                                (meals.foods.basicFoodstuff.plateGroup->
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                includes(HealthyPlateGroup::FRUITS) or
                                             
                                          
                                          
                                             
                                                
                                                
                                                meals. mealIngredient.basicFoodstuff.plateGroup->
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                includes(HealthyPlateGroup::FRUITS))
                                          
                                          
                                             
                                                
                                                
                                                
                                                and
                                             
                                          
                                          
                                             
                                                
                                                
                                                (meals.foods.basicFoodstuff.plateGroup->
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                includes(HealthyPlateGroup::VEGETABLES) or
                                             
                                          
                                          
                                             
                                                
                                                
                                                meals. mealIngredient.basicFoodstuff.plateGroup->
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                includes(HealthyPlateGroup::VEGETABLES))
                                          
                                          
                                             
                                                
                                                
                                                
                                                and
                                             
                                          
                                          
                                             
                                                
                                                
                                                (meals.foods.basicFoodstuff.plateGroup->
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                includes(HealthyPlateGroup::WHOLE_GRAINS) or
                                             
                                          
                                          
                                             
                                                
                                                
                                                meals. mealIngredient.basicFoodstuff.plateGroup->
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                includes(HealthyPlateGroup::WHOLE_GRAINS))
                                          
                                          
                                             
                                                
                                                
                                                
                                                and
                                             
                                          
                                          
                                             
                                                
                                                
                                                (meals.foods.basicFoodstuff.plateGroup->
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                includes(HealthyPlateGroup::HEALTHY_PROTEIN) or
                                             
                                          
                                          
                                             
                                                
                                                
                                                meals. mealIngredient.basicFoodstuff.plateGroup->
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                includes(HealthyPlateGroup::HEALTHY_PROTEIN))
                                          
                                          
                                             
                                                
                                                
                                                
                                                and
                                             
                                          
                                          
                                             
                                                
                                                
                                                (meals.foods.basicFoodstuff.plateGroup->
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                includes(HealthyPlateGroup::HEALTHY_OILS) or
                                             
                                          
                                          
                                             
                                                
                                                
                                                meals. mealIngredient.basicFoodstuff.plateGroup->
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                includes(HealthyPlateGroup::HEALTHY_OILS))
                                          
                                          
                                             
                                                
                                                
                                                
                                                and
                                             
                                          
                                          
                                             
                                                
                                                
                                                (meals.foods.basicFoodstuff.plateGroup->
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                includes(HealthyPlateGroup::WATER)or
                                             
                                          
                                          
                                             
                                                
                                                
                                                meals. mealIngredient.basicFoodstuff.plateGroup->
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                includes(HealthyPlateGroup::WATER))
                                          
                                       
                                    
                                 
                              
                           

A diet that fulfills this Law is considered complete. A diet in which a nutrient principle is missing or is greatly reduced is called poor 
                              [3].

The amounts of the various nutritional principles that integrate diet must maintain a relation of proportions between themselves [29]. A set of invariants validate this Law. Recommended intakes of the amounts of macronutrients may vary depending of the country or the approach followed by nutrition scientists, so the following distribution is proposed: 50–70% carbohydrates, 10–20% proteins and 20–35% fats. With these proportions, we cover most of the proposed distributions found in literature. Considering the conversion factors from grams to calories: 4 for carbohydrates, 4 for proteins and 9 for fats, the invariant that captures this specific constraint is:
                                 
                                    Table
                                    
                                       
                                       
                                          
                                             
                                                Context Menu
                                          
                                          
                                             
                                                
                                                
                                                inv LawOfHarmony_Macronutrients: (let:carb=getCarbohydrates()*4 in
                                             
                                          
                                          
                                             
                                                
                                                
                                                (carb >= getEnergy() * 0.50) and (carb <= getEnergy() * 0.70))
                                          
                                          
                                             
                                                
                                                
                                                and (let:prot=getProteins()*4 in
                                             
                                          
                                          
                                             
                                                
                                                
                                                (prot >= getEnergy() * 0.10) and (prot <= getEnergy() * 0.20))
                                          
                                          
                                             
                                                
                                                
                                                and (let:fat=getFat()*9 in
                                             
                                          
                                          
                                             
                                                
                                                
                                                (fat >= getEnergy() * 0.20) and (fat<= getEnergy() * 0.35))
                                          
                                       
                                    
                                 
                              
                           

The importance of this Law is highlighted when considering micronutrients. There are common recommended intakes of vitamins and minerals [24,35] establishing lower bounds for daily intakes, some of them according to gender, the following invariants model these limits (units may vary depending on the micronutrient). The following invariants validate this specific constraint:
                                 
                                    Table
                                    
                                       
                                       
                                          
                                             
                                                context Menu
                                          
                                          
                                             
                                                
                                                inv LawOfHarmony_Vitamins: if (user.gender = Gender::FEMALE) then
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                getVitA() >= 700 and getVitB1() >= 1.1 and
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                getVitB2() >= 1.1 and self.getVitB3() >= 14 and
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                getVitB6() >= 1.3 and self.getVitB9() >= 400 and
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                getVitB12() >= 2.4 and self.getVitC() >= 75
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                else
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                getVitA() >= 900 and self.getVitB1() >= 1.2 and
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                getVitB2() >= 1.3 and self.getVitB3() >= 16 and
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                getVitB6() >= 1.3 and self.getVitB9() >= 400 and
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                getVitB12() >= 2.4 and self.getVitC() >= 90
                                          
                                          
                                             
                                                
                                                
                                                
                                                endif
                                             
                                          
                                          
                                             
                                                context Menu
                                          
                                          
                                             
                                                
                                                inv LawOfHarmony_Minerals: if (user.gender = Gender::FEMALE) then
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                getCalcium() >= 1000 and getPhosphorus() >= 700 and
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                getSodium() >= 500 and getPotassium() >= 2000 and
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                getIron() >= 18 and getMagnesium() >= 315 and
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                getZinc() >= 8
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                else
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                getCalcium() >= 1000 and getPhosphorus() >= 700 and
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                getSodium() >= 500 and getPotassium() >= 2000 and
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                getIron() >= 8 and getMagnesium() >= 410 and
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                getZinc() >= 11
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                endif
                                             
                                          
                                       
                                    
                                 
                              
                           

Nowadays, most diets recommend limiting saturated fats. The following invariant checks that saturated fat must be lower than 7% of entire energy intake [36]:
                                 
                                    Table
                                    
                                       
                                       
                                          
                                             
                                                context Menu
                                          
                                          
                                             
                                                
                                                
                                                inv LawOfHarmony_Sat: (getSat() * 9) <= (getEnergy() * 0.07)
                                          
                                       
                                    
                                 
                              
                           

Recommended fiber intake is 20g minimum [36]. The following invariant validates this specific constraint:
                                 
                                    Table
                                    
                                       
                                       
                                          
                                             
                                                context Menu
                                          
                                          
                                             
                                                
                                                
                                                inv LawOfHarmony_Fiber: getFiber() >= 20
                                          
                                       
                                    
                                 
                              
                           

Most of nutritionists include water as an essential element for keeping a healthy, well-nourished state; water boosts metabolism and is involved in every type of cellular process in the body. The recommended daily intake of water is 2.7L for women and 3.7L for men [22]. Water intake is computed according to the following invariant:
                                 
                                    Table
                                    
                                       
                                       
                                          
                                             
                                                context Menu
                                          
                                          
                                             
                                                
                                                
                                                inv LawOfHarmony_Water: if (user.gender = Gender::FEMALE) then
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                getWater() >= 2700
                                          
                                          
                                             
                                                
                                                
                                                
                                                else
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                getWater() >= 3700
                                          
                                          
                                             
                                                
                                                
                                                
                                                endif
                                             
                                          
                                       
                                    
                                 
                              
                           

Any diet that fulfills this Law is considered harmonic or, more commonly, balanced. If the nutritional principles do not keep this proportionality, it is a disharmonic or unbalanced diet [3].

The purpose of a diet depends on the needs of a particular user [29]. The Law of Adequacy states that the ingested nutrients should be appropriate to the age, physical activity and physiological state of the individual. The invariant StandardAdult satisfies this restriction by default, as this model only contemplates healthy adult individuals. However, the Law of Adequacy represents aspects of a diet not considered in previous the Laws. Thus, a diet should be adapted to tastes, habits, trends, and socioeconomic status [29].

When a diet meets these requirements, it is said to be adequate. When it is not fulfilled, the diet regimen is inadequate or unsuitable 
                              [3].

In order to model the Law of Adequacy, a suitable menu considers both food preferences and food intolerances, taking into account also the economic situation of the user. The following invariant validates this Law:
                                 
                                    Table
                                    
                                       
                                       
                                          
                                             
                                                context Menu
                                          
                                          
                                             
                                                
                                                inv LawOfAdequacy: (meals.foods. basicFoodstuff->
                                          
                                          
                                             
                                                
                                                
                                                
                                                intersection(user.intolerants)->isEmpty() or
                                             
                                          
                                          
                                             
                                                
                                                
                                                meals. mealIngredient. basicFoodstuff->
                                          
                                          
                                             
                                                
                                                
                                                
                                                intersection(user.intolerants)->isEmpty()
                                          
                                          
                                             
                                                
                                                
                                                
                                                and
                                             
                                          
                                          
                                             
                                                
                                                
                                                (meals.foods.basicFoodstuff ->
                                          
                                          
                                             
                                                
                                                
                                                
                                                intersection(user.favorites)->notEmpty() or
                                             
                                          
                                          
                                             
                                                
                                                
                                                meals. mealIngredient.basicFoodstuff ->
                                          
                                          
                                             
                                                
                                                
                                                
                                                intersection(user.favorites)->notEmpty()
                                          
                                          
                                             
                                                
                                                
                                                
                                                and
                                             
                                          
                                          
                                             
                                                
                                                
                                                getPrice() <= user.budget
                                          
                                       
                                    
                                 
                              
                           

The complete specs of the Laws of Nutrition are freely available in the GitHub versioning control system
                                 2
                              
                              
                                 2
                                 https://github.com/chavezbosquez/laws-nutrition-ocl.
                              .

We implement the invariants for the Laws of Nutrition in a software prototype. 
                        Fig. 2 shows the UML activity diagram for the prototype in operation. The prototype validates the user characteristics, and displays the list of foodstuffs from the Mexican food tables [24] in a CSV (Comma Separate Values) file format. Then, the user can design the menu which is validated against of the Laws of Nutrition. User can save the resulting menu to JSON (JavaScript Object Notation) file format, and export it to PDF standard format or to PNG image format. Each foodstuff and menu item can be exported to XMI (XML Metadata Interchange) file format or to the USE specification format.

We use the OpenJDK 7, an open-source implementation of the Java Platform, Standard Edition, as the development platform, it has multithreaded and platform-independent capabilities, and is an active and robust platform [37]. The prototype was built upon a Model-View-Controller (MVC) design pattern under Rapid Application Development (RAD). The MVC paradigm separates the representation of information from the user׳s interaction with it [10]. This separation of representation allows flexibility and maintainability for the System. RAD is a software development methodology that favors rapid prototyping [11].


                        
                        Fig. 3 shows main screen with the full example menu fulfilling the Laws of Nutrition.

@&#RESULTS@&#

Model validation answers the question “is the model right?” while model verification answers the question “is it the right model?” [38]. The answers are discussed in detail below. USE version 4.1.0 under Ubuntu 14.04 was employed.


                        
                        Fig. 4 shows the model at the initial system state, i.e. an empty state with no objects or links. All OCL specification syntax and model semantics are correct with respect to the UML model.

A dynamic model represents a scenario at runtime where the required data objects are instantiated to validate the model. Dynamic instances of each class were instantiated in order to generate a valid nourishing menu for a specific user. For this instantiation, food composition tables [24] used by nutritionists and dietitians to design menus were employed.

Since foodstuffs at the deepest level of a menu, these are the first elements that must be instantiated. Instances of BasicFoodstuff100gr were filled with data from [24]. 
                        Fig. 5 shows an instance of a BasicFoodstuff100gr corresponding to jalapeño pepper.

Once instantiated basic foodstuffs are used to instantiate preparations (dishes and drinks). 
                        
                        Figs. 6 and 7 show two examples of common preparations. The first example is a popular dish in most Latin America countries called ‘Lentil soup’ while the second one is a common drink worldwide, ‘Lemonade’. Both examples are instances of the Preparation class, specifically of Dish and Drink classes, respectively.


                        CompleteMeal instances were created after generating the preparations. 
                        Fig. 8 presents an instance corresponding to a breakfast.


                        
                        Fig. 9 shows the User instance. The specific user is a man whose age, height, weight and health status are valid according to the StandardAdult invariant. This individual has a ‘favorite’ food, tuna fish, and he is tolerant to all foods. The object diagram and the output of method getTEE() is shown in Fig. 9.

Finally, 
                        Fig. 10 shows the proposed menu. This instance contains 5 complete meals: breakfast, morning snack, lunch, evening snack and dinner. 
                        Fig. 11 shows the number of object instantiated and object link count. 40 basic foodstuffs are used, 7 dishes and 2 dinks were proposed, 6 basic foodstuffs were used directly in a meal and 52 foodstuffs were part a dish / drink.


                        
                        Fig. 12 shows the results of the instanced menu validation. The result indicates that this menu fulfills the four Laws of Nutrition, since the validation is performed for each of the different instances that compose the menu.


                        
                        Table 2 shows the overall menu, amounts and units were established with the help of Mexican equivalent foods system [39]. Menu design was relatively straightforward using the Software developed.

@&#DISCUSSION@&#

Nowadays the Laws of Correct Nutrition are the basis for building menus in many countries of Latin America. Despite its effect over more than seven decades, there has been no reported formalization of the Laws of Correct Nutrition, and there are no formal standards to identify entities involved in the process of generating menus or the relationships between them. To this end, the most significant entities forming part of the menu generation process were selected.

The model emerges as a proposal to represent, with a precise semantics, these Laws found in literature, which have been always previously specified in a natural language. Consequently, the interpretation of these Laws varies among different countries. For example, in Argentina people continue respecting the original scheme of four Laws, while in Mexico the model was extended to 6 Laws.

In this sense, a plan for correct nutrition is the one that complies with the four Laws. Food is an essential element in all living beings, and it is known that humanity suffers epidemics such as mellitus diabetes, metabolic syndrome, obesity, among others, which it has been shown are directly affected by diet [40]. Thus, we expect with the development of this model to create a bridge between Computing and Health Sciences that may help treating health problems related to improper nutrition. Even when the model considers general facts, equations and rules, some issues are not standardized and the model reflects these particularities. However, the framework is flexible enough to accommodate different formulations, as the mentioned below.

The Law of Quantity is a well-known restriction about limit the caloric intake in a±10% range according to the user requirement. This can be seen as an unwritten golden rule of menu planning for virtually all nutrition scientists in Latin America. However, there are a number of formulas for estimating BMR, such as Mifflin & St Jeor equations from 1990, World Health Organization (WHO) equations from 1985, and the still widely used Harris-Benedict equations from 1919. The use of any of these formulas has a direct impact on the caloric requirement and hence in the instances.

Law of Quality is a major point of discussion due to the different food groups recommended by the ‘plates’ guidelines. For example, dairy products are indispensable in ‘MyPlate’ and ‘The eatwell plate’, but in most Latin American guidelines these foods are optional under the protein group. The more recent ‘Healthy Eating Plate’ points consumers to the healthiest choices in the major food groups, and can be seen as competitor to the US government׳s ‘MyPlate’.

Law of Harmony corresponds to a widely used concept known as ‘balanced diet’. However, there is also a point of debate in terms of ideal distribution of calories, i.e. percentage ranks of macronutrients. Our method to compute the correct distribution is simple, as we calculate the total energy from each macronutrient, and then check if these values fall in the applicable range. We rely on the Law of Quantity to meet the overall caloric requirement of the user.

Law of Adequacy is definitely the most difficult to fulfill largely due to the focus on the user satisfaction, being cited by Escudero as ‘the most important of the four Laws’. Most of the people cannot stick with a diet for a long period, often because many prescribed diets are too restrictive, too costly, or too awkward, so current trends in diet prescription are emphasizing the adherence of the diet, confirming Escudero׳s claim.

There is also an area of opportunity in terms of adding rules in this proposed model, since complying with the Laws does not prohibit designing a menu with one meal a day in which all the energy and nutrients needed by the user are consumed. Nevertheless, as far as we know, no nutrition scientist will prescribe such diet for healthy people. It is equally imperative to contemplate the different ‘combinations’ of foodstuff to avoid incompatibilities that generate adverse reactions to the user, for example avoiding dairy and citrus food in the same meal time. Even though the model allows these odd diets, nutrition scientists use additional knowledge not included in the four Laws.

There is increasing interest in the modeling of food fundamentals, for example FOODS: Food-Oriented Ontology-Driven Systems [41], the Personalized Health Management Portal [42], and FTTO: Food Track & Trace ontology [43] for food traceability control. However, these frameworks do not validate menus with reference to the Laws of Nutrition.

We use USE, a system for the specification of information systems [44]. Besides USE, there are other tools having support for OCL with the same functionality [45]. However, USE was selected since it is a constantly evolving platform, it is open source, and it supports most of the elements of the latest version of OCL standard.

Manually menu design is by no means straightforward, so a tool to assist nutritionists in this task is advantageous. We propose a prototype that allows menu design with live validation of the Laws of Nutrition.

@&#CONCLUSIONS@&#

We have described the results on modeling the Laws of Correct Nutrition. After the literature review, we pose a unified interpretation of the Laws captured in a computational specification employing the UML and the OCL. The UML model along with the Laws expressed in OCL are a quantitative and objective definition of the well-known theory proposed by Escudero in 1935. The model is correct since it was verified and validated by instantiating all classes and generating a nourishing menu for a particular user, using the state of the art tool USE. At this time, a limitation is the lack of a fully-automated tool to build menus in accordance with the Laws of Nutrition.

Future work on the modeling includes considering users with different diseases. Modeling the nutrition scientist׳s expertize is a further challenge, because experts in nutrition may hold different points of view and in consequence, they follow different approaches to creating menus. Specialists in computer science can easily understand the presented model which will facilitate expanding our prototype towards an automated decision-making solution.

None declared.

@&#ACKNOWLEDGMENTS@&#

To CONACYT for supporting the doctoral program in Computer Science at the Universidad Juárez Autónoma de Tabasco. We thank the anonymous reviewers and Robert Cambridge for the review and comments.

@&#REFERENCES@&#

