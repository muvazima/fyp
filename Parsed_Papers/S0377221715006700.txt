@&#MAIN-TITLE@&#Calibrating cross-training to meet demand mix variation and employee absence

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We study the cross-training that a work team needs in order to cope with demand mix variation.


                        
                        
                           
                           Demand mix variation is defined in a straightforward, business sense manner.


                        
                        
                           
                           A certain level of absences is also considered.


                        
                        
                           
                           To numerically solve the problem a constraint-based selection procedure is developed.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Production

Manpower planning

Constraint selection

Cross-training

Flexibility

@&#ABSTRACT@&#


               
               
                  We address the problem of determining the cross-training that a work team needs in order to cope with demand mix variation and absences. We consider the case in which all workers can be trained on all tasks, the workforce is a resource that determines the capacity and a complete forecasting of demand is not available. The demand mix variation that the organization wants to be able to cope with is fixed by establishing a maximum time to devote to each product. We contend that this approach is straightforward, has managerial practicality and can be applied to a broad range of practical scenarios. It is required that the demand mix variation be met, even if there are a certain level of absences. To numerically solve the mathematical problem, a constraint-based selection procedure is developed, which we term CODEMI. We provide illustrated examples demonstrating solution quality for the approximation, and we report on an illustrative set of computational cases.
               
            

@&#INTRODUCTION@&#

Demand-mix flexibility, also called product flexibility and process flexibility, consists of the capacity of a production process to produce a variety of products to meet demand mix variability. The benefits of this flexibility have been demonstrated by Jordan and Graves (1995). Cross-training workers can increase production flexibility, thereby helping it to efficiently deliver a broader range of products by increasing overall workforce skills, so that they can cope with a wider range of possible demands (Hopp & VanOyen, 2004). Thus, cross-training workers are potentially an effective source of demand mix flexibility.

The question of ‘who should be trained on which tasks?’ is an important one for many organizations, some of whom adopt cross-training policies not as a response to direct skill requirements, but rather for employee job enrichment, to reduce boredom, or to create greater agility globally. To obtain some of these benefits, the specification of particular levels of cross-training may not be necessary. More often, cross-training is necessary for gaining flexibility in order to cope with demand variations, and redundancy, as a compensation for employee absences. In this case, the effectiveness of cross-training depends in largely upon how cross-training is carried out. When acquiring ability in new tasks requires significant durations and concomitant training cost, establishing the appropriate cross-training goals becomes critical.

The literature distinguishes between cases in which various specific patterns of flexibility are considered, and when full flexibility is assumed or allowed. Furthermore, situations in which the workforce is the only essential resource must be distinguished from those in which other resources are involved (see Section 2.1). The problem addressed here corresponds to full flexibility, with the workforce as the critical resource, as is common in practice. This situation can be found in call centers (Batta, Berman, & Wang, 2007), maintenance service operations (Brusco & Johns, 1998), nurse staffing (Bard & Purnomo, 2005) and retail services (Berman & Larson, 2004), among others. In fact, labor is often the limiting resource in practice (Slomp & Molleman, 2002).

Some literature addresses demand mix variation by considering a set of future demands along with the corresponding probabilities of occurrence (see Section 2.2). In this paper, the demand scenarios to be covered will be defined by establishing the degree of variability that the organization wants to be able to meet. This approach had not been previously dealt with in the literature and has practical applicability, as we will support below.

When addressing cross-training and demand coverage, different complementary characteristics can be considered. The skills involved can be either categorical or hierarchical. Categorical skills are binary in nature, and as such are either possessed or not possessed at all (De Bruecker, Van den Bergh, & Demeulemeester, 2014). When skills are hierarchical, they can be performed at different levels, as it has been assumed by some previous research (Azizi & Liang, 2013; Pinker, Lee, & Berman, 2009). Similarly, the literature has considered homogenous or heterogeneous workers from the point of view of learning capacity (Shafer, Nembhard, & Uzumeri, 2001).

In addition, cross-training in a single department or between departments can be considered (Van den Bergh, Beliën, De Bruecker, Demeulemeester, & De Boeck, 2013), the possibility of overtime can be included (Wright & Mahar, 2013) and, for each worker, primary and secondary skills can be distinguished (de Matta & Peters, 2009; Guerry, De Feyter, & Vanden Berghe, 2013). In this paper, several straightforward assumptions regarding these options have been adopted: categorical skills, homogeneity of workers regarding learning, one single department, with no overtime considered. Primary and secondary skills are not differentiated when defining cross-training objectives.

The objective of this paper is to develop a method for determining cross-training goals for a work team in order to meet a certain level of demand mix variation, which is established by using the time devoted to each product. It is assumed that there is some level of worker absenteeism and that all workers can be trained to perform each task. Previous cross-training is taken into account to consider cases wherein there may be preexisting teams and cross trained skills. The problem is analyzed and solved via the development and use of a constraints-based selection procedure, which we term CODEMI. We will examine this novel approach using several computational cases. A primary contribution of the paper is the development of this novel and practical approach for addressing the cross-training problem.

In the remainder of this paper we discuss the relevant literature review in Section 2, followed by definitions and description of the problem, along with definitions of the relevant variables for our modeling approach in Section 3, the model itself and discussion on scope and disaggregation. Section 4 presents a novel procedure for generating solutions, illustrative examples, an evaluation of the solution approximation obtained, and computational performance. We report our conclusions in Section 5.

@&#LITERATURE REVIEW@&#

The operations management literature on flexibility can be classified into two main streams (Chou, Chua, Teo, & Zheng, 2010): (1) work that describes and examines the value of different patterns of flexibility and (2) work assuming potential full flexibility, in which any resource, such as machines or workers, can eventually perform any task. The first group of work focuses on schemes that, with limited resource flexibility, provide outcome flexibility that is not far from optimal. This result is obtained by using chaining strategies, initially developed for production lines. For instance, in D-skill-chaining, each worker is trained at a primary station and also on the D stations succeeding it. Park (1991) analyzed the effect of worker cross-training in a dual resource constrained job shop and showed that cross-training produces the most significant improvement when no previous cross-training exists. The benefits of skill-chaining in serial production lines were further analyzed by Hopp, Tekin, and Van Oyen (2004), among others. Xu, Xu, and Xie (2011) provide a thorough review of the research on Dual Resource Constrained (DRC) systems, including studies that provide insights into worker cross-training policies. Other related work includes, Tharmmaphornphilas and Norman (2004) who describe a method for obtaining effective job rotation interval lengths, and Kim and Nembhard (2010) who consider cross training with a heterogeneous workforce that includes learning and forgetting behavior.

A second stream of work involves cases in which human resources are prepared to perform any task, should the need arise. In general, the goal is to determine the most appropriate level of resource flexibility by considering the acquisition cost of resource flexibility and the need for flexible outcomes. For example, Fine and Freund (1990) address the trade-offs involved in investing in product-flexible manufacturing capacity. The future demand is characterized by a certain finite set of future ‘states of the world’. It is explicitly assumed that organizations identify possible future states and assess their corresponding likelihoods. Iravani, Van Oyen, and Sims (2005) propose indices that quantify the ability of a system to respond to variability by taking advantage of the flexibility of resources, such as cross-training of workers, the flexibility of machines, or the reallocation of factories.

Furthermore, situations in which the workforce is the only essential resource must be distinguished from situations in which other secondary and tertiary resources are involved. When resources other than worker capacity are important, scenarios must be developed by analyzing specific cases (Agnihothri & Mishra, 2004). Here, we address the situation in which the only critical resource is the work performed by workers, and consequently, workforce capacity is directly linked with production capacity.

The determination of preferred cross-training levels has been considered extensively in the literature. Perhaps due to the complexities of the broadest problem, studies tend to address very specific subsets and cases. Solutions found in each case are based on the particular characteristics and the data available. Table 1 outlines many papers that correspond to the establishment of useful cross training levels.

We note that the evaluation of candidate cross training policies is one potential means for organizations to determine how best to meet dynamic demands. The current study is a further response to this need. Further, Pinker et al. (2009) showed that flexibility policies can lead a firm to staff with too little slack to be flexible to demand shocks, thus leading to higher total costs.

Following this line of work, Marentette, Johnson, and Mills (2009) proposed an approach for pairing skills that, successfully compares the costs of training to the benefits of increased staffing level efficiencies. Colen and Lambrecht (2012) simulate and evaluate the performance obtained in a maintenance and repair operation according to the proportion between the technicians dedicated to preventive maintenance and the fully cross-trained technicians. Andradóttir, Ayhan, and Down (2013) identify the characteristics of desirable flexibility structures, that include achieving the maximum possible capacity and viewing the entire network as a bottleneck. To distinguish these cross-training structures allow discarding non-useful cross-training. Despite the broad set of aims in these studies, each ultimately whole or in part involves the determination of one or more policies for calibrating a cross training level.

On an alternate tack, Easton (2014) analyzes the improved benefits that can be obtained by considering joint variability of demand and workforce attendance when scheduling. Optimal worker allocation decisions are determined across the plausible set of realizations of attendance and demand. In a more specific nursing allocation application, Paul and MacDonald (2014) develop optimization models to maximize the benefits of cross-training in two departments and multi-department configurations, wherein they consider the costs of temporary nurses and the service levels that organizations aim to achieve. In a related nurse allocation problem, Gnanlet and Gilland (2014) analyze the influence of nurse productivity when working on secondary cross trained tasks as well as their effects when working under various cross training policies.

Recalling that Fine and Freund (1990) explicitly assume that organizations identify possible future ‘states of the world’, Brusco and Johns (1998) and Agnihothri and Mishra (2004) analyzed cases where future requirements are extrapolated from previous experience. Thus, an alternative approach for determining cross training levels is to prepare a set of future demands and corresponding probabilities of occurrence in order to address demand mix variations. The information requirements are a strong limitation on the practical application of these approaches, since a complete forecasting of demand is not generally available and the preparation of such a set of possible demands as inputs is in itself a challenging problem. The current study contributes to this stream of research, wherein we propose to define a set of possible demands based on a business decision, as explicated in Section 3.

@&#METHODOLOGY@&#

@&#INTRODUCTION@&#

We consider the problem of meeting work team cross-training goals while meeting a level of demand mix variation and employee absences, with worker skill capability as the only critical resource. That is, we consider a so-called skill-matrix for each team. A skill-matrix is generically a matrix with as many rows as workers belonging to the team and as many columns as jobs the teams must perform. Each row of the matrix corresponds to a specific worker with an indication of whether that worker is trained on and can perform the corresponding columnar job. Similarly, columns (jobs) indicate the set of workers who may perform that job (see Daniels, Mazzola, & Shi, 2004).

We define demand mix variation by first establishing a maximum time to devote to each product. Then the problem is expressed by using an expression such as the following:

                           
                              “Obtain cross-training that makes it possible for a team to meet demand, devoting up to X percent of time to product 1, up to Y percent to product 2, … , and with up to A worker absences.”
                           
                        
                     

We employ this perspective for its straightforward practical appeal. For example, assume a language service that translates texts from Spanish, Chinese and Arabic to English, with a working capacity of 600 hours per week. They expect to translate orders involving 200 hours of work of each language per week with some demand variations. Naturally, full flexibility may not be obtainable in this context, not least due to the time needed to acquire specific language skills. Nonetheless the question of how to establish demand mix variation goals is important. We note that the specific bounds in this context must be considered a business decision. For example, the objective can be to be able to accept up to 50 percent of work time devoted to Spanish translations, 40 percent to Chinese translations and 40 percent to Arabic translations. Demands of 300, 240 and 60 hours, respectively, would be admissible, yet demands of 150, 150 and 300 would not be. We remark that selection based on the time to be devoted to each product does not imply any loss of generality. That is, adapting the problem to other measures, such as the number of units or turnover, is straightforward.

The approach and the model defined below are applicable for groups of workers of any size. However, we note that the general problem is NP-hard, as it includes the resolution of covering problems, which are known to be NP-hard (Johnson & Garey, 1979). Thus, a solution procedure able to handle moderate size instances is presented and tested (see Section 4). These instances with moderate sizes correspond to practical situations. Cross-training can be determined for any scale problem, but it is common to set cross training at a team level. Scenarios having these characteristics have been reported in the literature for call centers, repair services, and field services that dispatch teams of technicians or other staff into the field. These services are important, for example, for servicing machines in medical electronics, telecommunications and information technology, industrial automation, building controls, high-voltage power equipment, and office products (Agnihothri & Mishra, 2004). Literature describing middle-size cross-training problems that have been observed in real cases are showed in Table 1.
                     

The nature of the specific application will affect the determination of the planning horizon and the planning units (blocks), as an important aspect of the problem discussed in Section 3.4. In call centers, for example, significant delays are not reasonable and thus a short planning horizon is the norm. For activities such as project work, or repairs, the planning blocks will usually coincide with project or repair activities. Ultimately, planning horizons can be considered on a case-by-case basis. For instance, in manufacturing, there is greater freedom regarding the setting planning horizons and blocks.

The following specific assumptions are used herein.

                           
                              •
                              We consider a work team that can be trained on a given set of task types. The teams will have a constant productivity rate, and not be able to perform other task types. However, tasks for which individuals were previously cross-trained, are considered for potential assignment within the decision process.

A set of products is produced in differential quantities based on demand scenarios formed from combinations of units of products (planning blocks). The planning blocks will be established a priori (fixed planning blocks), or normed to make them more similar (size leveled planning blocks). Meeting the demand for these planning blocks requires the determination of decision variables for worker task assignments, given a time horizon, and scenario information.

The number of hours of work per worker is established to be feasible for a given time horizon.

Workers may be absent at any point in time, noting that what matters here is not only the number of absent workers, but also the capabilities of the cross-trained workers who are present. All the potential combinations of worker absences that respect a given limit of the total number of absent workers are considered, independently of their probability of occurrence.

Teams must be able to meet any demand scenario while simultaneously respecting the established upper bounds for the proportion of the total time to devote to each product.

It is possible for a manager to establish bounds on: (1) the number of task types for which a worker can be trained, and (2) the difference between the maximum and the minimum number of the task types for which the workers will be trained.

The objective is to minimize the total number of tasks for which the workers will be trained, noting that training in general entails considerable cost and can be complicated to organize.

A model to solve the problem described above is presented after some preliminary notational definitions.

                           
                              J
                           
                           
                              
                                 
Number of different products (j = 1 … J).


                                 
Number of different task types necessary to complete the products (k = 1...K).


                                 
Number of workers (w = 1...W).


                                 
Number of absent workers.


                                 
Number of time units of work per worker, based on the planning horizon.


                                 
Number of units of time that are necessary to perform task type k to complete a unit (or a planning block of a product) j.


                                 
Upper bound on the proportion of time devoted to product j for demand scenarios that the workers must meet; i.e., they must be able to meet demand scenarios by devoting a proportion of the total time of work from 0 to pj
                                  to product j = 1...J.


                                 
Upper bound of the number of task types for which the worker w can be trained (w = 1...W).


                                 
Upper bound of the difference between the maximum and the minimum number of task types for which the workers will be trained (w = 1...W).


                                 
Binary variable indicating whether worker w = 1...J had previously performed task type k = 1...K.

The set of demand scenarios that workers are required to meet must be considered. From the problem definition, the conditions to impose are:

                           
                              (i)
                              The demand scenarios are within the bounds on the proportion of time devoted to each product.

The work time required to meet the demand scenarios is less than or equal to the work time that the present employees must work.

The set of demand scenarios satisfying these two conditions are formalized in Eq. (1), wherein nj, j = 1...J, is the component j of an element of Ω, correspond to the number of product j to produce.

                           
                              (1)
                              
                                 
                                    
                                       
                                          Ω
                                       
                                       
                                          =
                                       
                                       
                                          
                                             {
                                             
                                                (
                                                
                                                   n
                                                   1
                                                
                                                .
                                                .
                                                
                                                   n
                                                   J
                                                
                                                )
                                             
                                             ∈
                                             N
                                             ×
                                             ⋯
                                             ×
                                             N
                                             
                                                |
                                                
                                                   ∑
                                                   
                                                      j
                                                      =
                                                      1
                                                   
                                                   J
                                                
                                                
                                                   
                                                      ∑
                                                      
                                                         k
                                                         =
                                                         1
                                                      
                                                      K
                                                   
                                                   
                                                      n
                                                      j
                                                   
                                                   
                                                      v
                                                      
                                                         k
                                                         j
                                                      
                                                   
                                                
                                                ≤
                                                
                                                   (
                                                   
                                                      W
                                                      −
                                                      A
                                                   
                                                   )
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             ·
                                             H
                                             ∧
                                             
                                                (
                                                
                                                   ∑
                                                   
                                                      k
                                                      =
                                                      1
                                                   
                                                   K
                                                
                                                
                                                   
                                                      n
                                                      j
                                                   
                                                   
                                                      v
                                                      
                                                         k
                                                         j
                                                      
                                                   
                                                
                                                
                                                   (
                                                   1
                                                   /
                                                   
                                                      
                                                         (
                                                         
                                                            W
                                                            −
                                                            A
                                                         
                                                         )
                                                      
                                                      ·
                                                      H
                                                   
                                                   )
                                                
                                                ≤
                                                
                                                   p
                                                   j
                                                
                                                ,
                                                j
                                                =
                                                1
                                                .
                                                .
                                                J
                                                )
                                             
                                             }
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The set of corresponding indices is also defined as:

                           
                              IΩ
                              
                           
                           
                              
                                 
Set of indices of the group Ω. The component j, j∈{1...J}, of the element of Ω corresponding to θ∈IΩ
                                  is notated as πθj
                                 .

We let A employees be absent, and correspondingly W − A of the W employees are present. The set of the different groups of W − A employees is considered, and the corresponding set of indices is defined:

                              
                                 Ψ
                              
                              
                                 
                                    
Set of possible groups of present employees, obtained as variations of W − A elements.


                                    
Set of indices of Ψ. The component w, w∈{1...W − A}, of the element of Ψ corresponding to ψ∈IΨ
                                     is notated as τψw
                                    .


                           
                              
                                 xwk
                                 
                              
                              
                                 
                                    
Binary variable that indicates whether the employee w = 1...W is able to perform task type k = 1...K after the necessary cross-training is obtained.


                                    
Number of units of time that employee w would devote to task type k in the assignment of work that proves the demand scenario θ can be met by the group of present employees ψ (w = 1...W, k = 1...K, θ∈IΩ, ψ∈IΨ
                                    ). Variable y is defined also for absent workers, assigning a value of 0 for compactness.

The constraints in Eqs. (2)–(4) require that each group of present employees ψ is able to perform each possible demand scenario θ. Specifically, constraint (2) imposes the work time bound for each employee, (3) implies that no work is assigned to an employee that is not part of the group of present employees and (4) imposes that a solution meeting the demand scenario is obtained. In addition, constraint (5) expresses that an employee devotes time only to the task that he or she is able to perform; constraint (6) imposes a bound on the number of task types for which a worker can be trained; constraint (7) guarantees that the previous cross-training of the workers is included in the final solution; and constraint (8) limits the difference between the maximum and the minimum number of task types in which the workers will be trained.

                              
                                 (2)
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      k
                                                      =
                                                      1
                                                   
                                                   K
                                                
                                                
                                                   y
                                                   
                                                      w
                                                      k
                                                   
                                                   
                                                      θ
                                                      ψ
                                                   
                                                
                                                ≤
                                                H
                                                ,
                                             
                                          
                                          
                                             
                                                w
                                                =
                                                1
                                                .
                                                .
                                                W
                                                ,
                                                θ
                                                ∈
                                                
                                                   I
                                                   Ω
                                                
                                                ,
                                                ψ
                                                ∈
                                                
                                                   I
                                                   Ψ
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (3)
                                 
                                    
                                       
                                          
                                             
                                                y
                                                
                                                   w
                                                   k
                                                
                                                
                                                   θ
                                                   ψ
                                                
                                             
                                          
                                          
                                             =
                                          
                                          
                                             
                                                0
                                                ,
                                             
                                          
                                       
                                       
                                          
                                             k
                                          
                                          
                                             =
                                          
                                          
                                             
                                                1
                                                .
                                                .
                                                K
                                                ,
                                                θ
                                                ∈
                                                
                                                   I
                                                   Ω
                                                
                                                ,
                                                ψ
                                                ∈
                                                
                                                   I
                                                   Ψ
                                                
                                                ,
                                                w
                                                ∈
                                                
                                                   {
                                                   
                                                      1
                                                      .
                                                      .
                                                      W
                                                   
                                                   }
                                                
                                                ,
                                                w
                                                ∉
                                                
                                                   (
                                                   
                                                      τ
                                                      
                                                         ψ
                                                         1
                                                      
                                                   
                                                   ,
                                                   .
                                                   .
                                                   ,
                                                   
                                                      τ
                                                      
                                                         ψ
                                                         W
                                                         −
                                                         A
                                                      
                                                   
                                                   )
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (4)
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      w
                                                      =
                                                      1
                                                   
                                                   W
                                                
                                                
                                                   y
                                                   
                                                      w
                                                      k
                                                   
                                                   
                                                      θ
                                                      ψ
                                                   
                                                
                                                ≥
                                                
                                                   ∑
                                                   
                                                      j
                                                      =
                                                      1
                                                   
                                                   J
                                                
                                                
                                                   v
                                                   
                                                      k
                                                      j
                                                   
                                                
                                                ·
                                                
                                                   π
                                                   
                                                      θ
                                                      j
                                                   
                                                
                                                ,
                                             
                                          
                                          
                                             
                                                k
                                                =
                                                1
                                                .
                                                .
                                                K
                                                ,
                                                
                                                θ
                                                ∈
                                                
                                                   I
                                                   Ω
                                                
                                                ,
                                                
                                                ψ
                                                ∈
                                                
                                                   I
                                                   Ψ
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (5)
                                 
                                    
                                       
                                          
                                             
                                                
                                                   y
                                                   
                                                      w
                                                      k
                                                   
                                                   
                                                      θ
                                                      ψ
                                                   
                                                
                                                ≤
                                                
                                                   x
                                                   
                                                      w
                                                      k
                                                   
                                                
                                                ·
                                                H
                                                ,
                                             
                                          
                                          
                                             
                                                w
                                                =
                                                1
                                                .
                                                .
                                                W
                                                ,
                                                
                                                k
                                                =
                                                1
                                                .
                                                .
                                                K
                                                ,
                                                
                                                θ
                                                ∈
                                                
                                                   I
                                                   Ω
                                                
                                                ,
                                                
                                                ψ
                                                ∈
                                                
                                                   I
                                                   Ψ
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (6)
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      k
                                                      =
                                                      1
                                                   
                                                   K
                                                
                                                
                                                   x
                                                   
                                                      w
                                                      k
                                                   
                                                
                                                ≤
                                                
                                                   u
                                                   w
                                                
                                                ,
                                             
                                          
                                          
                                             
                                                w
                                                =
                                                1
                                                .
                                                .
                                                W
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (7)
                                 
                                    
                                       
                                          
                                             
                                                
                                                   x
                                                   
                                                      w
                                                      k
                                                   
                                                
                                                −
                                                
                                                   
                                                      
                                                         x
                                                         ′
                                                      
                                                   
                                                   
                                                      w
                                                      k
                                                   
                                                
                                                ≥
                                                0
                                                ,
                                             
                                          
                                          
                                             
                                                k
                                                =
                                                1
                                                .
                                                .
                                                K
                                                ,
                                                
                                                w
                                                =
                                                1
                                                .
                                                .
                                                W
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (8)
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                      
                                                         k
                                                         =
                                                         1
                                                      
                                                      K
                                                   
                                                   
                                                      x
                                                      
                                                         w
                                                         k
                                                      
                                                   
                                                   −
                                                   
                                                      ∑
                                                      
                                                         
                                                            k
                                                            ′
                                                         
                                                         =
                                                         1
                                                      
                                                      K
                                                   
                                                   
                                                      x
                                                      
                                                         w
                                                         
                                                            k
                                                            ′
                                                         
                                                      
                                                   
                                                   ≤
                                                   
                                                      d
                                                      w
                                                   
                                                   ,
                                                
                                             
                                             
                                                
                                                   ∀
                                                   k
                                                   ,
                                                   
                                                      k
                                                      ′
                                                   
                                                   ∈
                                                   K
                                                   ,
                                                   k
                                                   ≠
                                                   
                                                      k
                                                      ′
                                                   
                                                
                                             
                                          
                                       
                                       ,
                                       
                                       w
                                       =
                                       1
                                       .
                                       .
                                       W
                                    
                                 
                              
                           
                        

The objective function (9) minimizes the total number of tasks to which the set of workers will be trained.

                              
                                 (9)
                                 
                                    
                                       min
                                       
                                       
                                          
                                             ∑
                                             
                                                w
                                                =
                                                1
                                             
                                             W
                                          
                                          
                                             
                                                ∑
                                                
                                                   k
                                                   =
                                                   1
                                                
                                                K
                                             
                                             
                                                
                                                   x
                                                   
                                                      w
                                                      k
                                                   
                                                
                                                −
                                                
                                                   
                                                      
                                                         x
                                                         ′
                                                      
                                                   
                                                   
                                                      w
                                                      k
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

The current problem pertains to production planning, since cross-training goals are established to make the set of production plans feasible. Thus, the planning horizon and planning blocks to be used must be determined. In the hypothetical situation, in which selfsame characteristics of a case determine the planning horizon and corresponding blocks, this would not be an issue. However, in general their selection must be carefully considered, as it determines the scope and the level of disaggregation. Two alternative treatments are considered for planning blocks. First, considering when fixed planning blocks are used, and second when size leveled planning blocks are used. These are described in turn below.

The scenario includes a set of products and the time to be devoted to a certain task type for producing a unit or a planning block, formed by a certain number of units. These planning blocks can be used directly to define the demand scenarios to be considered. In doing so, the disaggregation level is effectively fixed. Thus, the size of the problem depends on the planning horizon, which is measured by the number of hours of work that it includes, as this is the only resource involved.


                           Table 2 presents an illustrative example for fixed planning blocks, with time expressed in hours. Taking 40 hours of work per worker in option 1 implies 160 hours of total work time are available. For example, product 1 needs to be produced for 15 hours with a 55 percent upper bound on the time devoted to that product. Scenarios including up to 5 units of product 1 will be included. We note that the requirements are specific for the different products (i.e., a single unit of product 1 uses 9.38 percent of the total time, while one unit of product 2 uses 12.5 percent, etc.). There are 180 scenarios with an objective value of 13, which corresponds to the number of tasks that the workers will need to learn.

To consider a larger set of scenarios, option 2 (in Table 2) uses 80 hours of work per worker. With 320 hours of total work time available, the scenarios can include more units produced, implying that the number of scenarios increases to 4620. The option 2 objective value correspondingly increases to 15. While some scenarios can be feasibly produced with 320 hours of work, and are simple multiples of smaller scenarios (160 total hours), other scenarios require new combinations in order to meet the demand mix. These new combinations will necessarily give rise to the greater requirements on cross-training.

An alternative possibility is to set the number of planning blocks for the solution of the problem. Both the planning horizon and planning blocks must to be set in this case. The number of planning blocks will be set by leveling their size while maintaining a minimum number of blocks per product. The planning horizon, defined by the total number of work hours, will be set wide enough to include the required number of planning blocks. An illustrative example is given in Table 3
                           , wherein the planning horizon is fixed at 160 hours. Compared to the time necessary for completing the production, it is large enough so as to have no direct influence. One possible rule is to take three or more planning blocks per product which are less than or equal to 10 percent of total work time, assuming that the goal is to define as few blocks as possible such as in option 1.

If one takes three or more planning blocks per product, which are less than or equal to 5 percent of total work time (option 2), we obtain fully size leveled planning blocks, 520 demand scenarios and a solution objective function value of 15. Note that the demand scenarios obtained by applying option 2 do not contain the same demand scenarios obtained by applying the rule of option 1. The minimum number of blocks and the non-exact divisibility illustrate that not all the conditions are proportional. That is, a skill-matrix that allows workers to meet the demand scenarios of option 1 do not necessarily allow them to meet those of option 2, and vice versa.

As in the previous case, reasonable decisions about the planning horizon and blocks should made according to the characteristics of the case and the solvability of the resulting problem. The use of size leveled blocks is preferable if the size of the problem has to be decreased to make it more readily solvable. Fixed planning blocks in turn are useful when the characteristics, and practical needs of an organization make this necessary. This may be the case for example with repairs, consulting jobs, or other scenarios when demand is manifested in discrete blocks.

We propose a procedural algorithm (COnstraints for DEmand MIxes, CODEMI) for solving the general problem posited that applies the concept of constraint selection, which is based on the idea that only a few constraints bind the optimal solution. Various general algorithms have been developed for solving a range of linear problems (Arsham, 2007; Myers, 1992). The idea of adding constraints based on partial results obtained follows the classical work of Dantzig, Fulkerson, and Johnson (1954). We present a novel algorithm that strongly differs from those in the existing literature, in that it attempts to exploit some of the special characteristics of our defined problem. The procedure allows for solving considerably large problem instances, as the computational experience described in Section 4.4 illustrates.

To reduce the size of the problem to be solved, in
Eq. (10) we define the set Ω’, which is a subset of demand scenarios Ω, as defined in Eq. (1). We impose that the workers are able to meet the demand scenarios in Ω’ be no weaker than requiring that they be able to meet the demand scenarios in Ω. In effect, if a demand scenario belongs to Ω, either it belongs to Ω’ or another product scenario including at least the number of units for different products belong to Ω’. Consequently, if the workers are able to meet Ω’, they are also able to meet Ω.
                        
                           
                              (10)
                              
                                 
                                    
                                       Ω
                                       ′
                                    
                                    =
                                    
                                       {
                                       
                                          
                                             (
                                             
                                                n
                                                1
                                             
                                             .
                                             .
                                             
                                                n
                                                J
                                             
                                             )
                                          
                                          ∈
                                          Ω
                                          
                                             |
                                             
                                                (
                                                
                                                   n
                                                   1
                                                
                                                .
                                                .
                                                
                                                   n
                                                   j
                                                
                                                +
                                                1
                                                .
                                                .
                                                
                                                   n
                                                   J
                                                
                                                )
                                                ∉
                                                Ω
                                                ,
                                                
                                                j
                                                =
                                                1
                                                .
                                                .
                                                J
                                             
                                          
                                       
                                       }
                                    
                                 
                              
                           
                        The procedure includes the following eleven key steps, with Pseudo-code given in Table 4.
                        
                        
                           
                              (1)
                              Determine the initial scope and level of disaggregation. That is, set the planning horizon and the number of planning blocks. The parameter that determines the planning horizon is H, time of work per worker in the planning period.

As described in Section 3.4, the two alternatives are fixed or leveled planning blocks. When fixed, they are not adjustable, and when leveled, then number of planning blocks is determined from m, the minimum number of blocks per product, and U, the upper bound on the percentage that each block that represents the total work time. Initial values of theses parameters are defined by trading off the detail in the demand scenarios definition and the solvability of the problems steps (6) and (8), noting that this is a practical analytical decision without loss of generality.

Determine the calculation parameters. The parameters are the following:

                                    
                                       •
                                       
                                          S1
                                          , demand scenarios selected from the initial set in step 0.


                                          S2
                                          , selected scenarios when successive selections are necessary, step 8.


                                          T, maximum run-time applied in steps 6 and 9.

Generate the set Ω, as defined in Eq. (1).

Generate the set Ω’, as a subset of the set Ω, demand scenarios that the employees must meet. For greater practicality, generate only the demand scenarios that use all the available time, given the indivisibility of the number of products or planning blocks to produce. That is, we determine the subset of demand scenarios belonging to Ω’.

Prioritize by sorting the demand scenarios belonging to Ω’ according to a measure of the proximity of a demand scenario θ to the maximum production of each product. To accomplish this, define mj
                                 , the maximum possible number of planning blocks for the product j (Eq. (11)), and Dθ
                                 , the previously mentioned measure (Eq. (12)).
                                    
                                       (11)
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         m
                                                         j
                                                      
                                                      =
                                                      int
                                                      
                                                         [
                                                         
                                                            
                                                               
                                                                  (
                                                                  
                                                                     W
                                                                     −
                                                                     A
                                                                  
                                                                  )
                                                               
                                                               ·
                                                               H
                                                               ·
                                                               
                                                                  p
                                                                  j
                                                               
                                                            
                                                            /
                                                            
                                                               
                                                                  ∑
                                                                  
                                                                     k
                                                                     =
                                                                     1
                                                                  
                                                                  K
                                                               
                                                               
                                                                  v
                                                                  
                                                                     k
                                                                     j
                                                                  
                                                               
                                                            
                                                         
                                                         ]
                                                      
                                                      ,
                                                   
                                                
                                                
                                                   
                                                      j
                                                      =
                                                      1
                                                      .
                                                      .
                                                      J
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       (12)
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            D
                                                            θ
                                                         
                                                         =
                                                         
                                                            ∑
                                                            
                                                               j
                                                               =
                                                               1
                                                            
                                                            J
                                                         
                                                         1
                                                      
                                                      /
                                                      
                                                         (
                                                         
                                                            
                                                               m
                                                               j
                                                            
                                                            −
                                                            
                                                               
                                                                  
                                                                     π
                                                                     ′
                                                                  
                                                               
                                                               
                                                                  θ
                                                                  j
                                                               
                                                            
                                                            +
                                                            0.1
                                                         
                                                         )
                                                      
                                                   
                                                
                                                
                                                   
                                                      θ
                                                      ∈
                                                      
                                                         I
                                                         Ω
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              

In Eq. (12), the constant 0.1 is arbitrarily small to prevent divisions by zero. When the maximum number of planning blocks is reached, the value of the summand is 10. With greater differences the summand will be smaller. The value of Dθ
                                  is higher, as the numbers of planning blocks of the demand scenario θ are closer to the maximum.

The first S1
                                  demand scenarios with higher values are selected to form set Ω
                                 *. Intuitively, these demand scenarios are more extreme and may determine the solution for the group.

Define and solve the mathematical problem corresponding to the set Ω
                                 * instead of Ω’. Outcomes from this process include:

                                    
                                       •
                                       Infeasible formulation. This can be due to insufficient total work time or because the relation between the tasks necessary to produce the products, the demands to cover and the bounds to the individual cross-training. In such cases there is also no formal solution to the originally defined problem.

The mathematical problem is not solved after a certain time T. A recalibration of the parameters can aid in reducing the actual solution time—go to step 9.

A solution is obtained. Continue to next step.

Test the solution obtained in step 6 with all the demand scenarios of the set Ω’. If all demands are satisfied, the problem is solved. If not, add some of the unmet scenarios to the previous elements in Ω
                                 * by executing the step (8).

Select a subset of S2
                                  elements between the unmet scenarios obtained in step 7 by following the same strategy as in step 5.

Solve the mathematical problem by using the set Ω
                                 *. If a solution is obtained, return to step 7. If the problem is not solved after a certain time T, consider parameter recalibration—next step.

As the problem has not been solved, the calculation is done again by using different parameters. A first attempt may be to modify the parameters (S1, S2
                                  and T). Then go to step 5.

If no result is found, the scope and the level of disaggregation of the problem may be controlled by adjusting their parameters (H, m, U), where m and U are only applicable in the option of size leveled planning blocks (see Section 3.4). After this, the step 3 and the following are performed. Note that, for some combinations of data, the problem may be infeasible and then no solution will be returned.

When, in step 10, the parameters S1, S2
                         and T are modified, the problem solved remains the same. Contrarily, the change of the parameters that is done in step 11 implies the solving of a relaxed version of the problem: the obtained cross-training will be able to cope with demand in shorter periods, when the number of hours per worker (H) is decreased, or fewer changes of task will be considered, when fewer planning blocks are considered. The quality of the solution approximation obtained is tested in Section 4.3.

We consider an example that includes a set of products along with a set of tasks that must be completed in order to produce these products. In Table 5
                         the time of each task needed to complete each product is shown.

We assume that the work team has to be able to cover demand scenarios up to 60 percent, 40 percent, 40 percent and 60 percent of the time devoted to products 1, 2, 3 and 4, respectively. The schema is presented graphically in Fig. 1
                        . We assume a group of six workers, with one absence; 160 hours of work per worker in the period under consideration (e.g., 1 month); that a worker can be trained in up to four tasks; and no previous cross-training of the workers. The objective is to determine the cross-training by minimizing the total number of tasks in which the workers will be cross-trained and by guaranteeing the stated conditions.

Given five workers to be present (non-absent), 800 hours of work will be available. A maximum of 480, 320, 320 and 480 hours can be devoted to products 1 through 4, allowing for maximum production of 32, 16, 32 and 32 units, respectively. Following the algorithm in Section 4.1, the set Ω’ is generated. Ω’ includes 9565 demand scenarios. Continuing to step 4 and taking S1
                         = 10, a subset of 10 demand scenarios is selected to form the subset Ω
                        * (Table 6
                        ).

A solution for the subset Ω
                        * is obtained in step 6, and is tested with all the demand scenarios of the set Ω’ in step 7. All the scenarios of Ω’ can be met, and the problem is solved. The solution obtained is presented in the form of a skill-matrix shown in Fig. 2.
                        
                     

The solution procedure involves widening the scope and disaggregation level of the problem in the cases where a solution is not obtained after a pre-specified time. This is done by adjusting the parameters (H, m, U), where m and U are only applicable for size leveled planning blocks. By doing so, a relaxed version of the problem is created. The cross-training obtained therein will be able to meet the demand in fewer periods, when the number of hours per worker (H) is decreased and fewer task changes are allowed when fewer planning blocks are considered. To evaluate the effect of these relaxations on the obtained result, we examine the expected gaps formed by using this approach. The instance sizes are limited in order to obtain both exact solutions and solutions using the CODEMI approach.


                        Tables 7
                         and 8
                         present the input conditions for the instances solved corresponding to fixed planning blocks and size leveled planning blocks, respectively. A total of 200 instances were considered. A total of 178 were solved successfully with the remaining 22 terminating as infeasible. We remark that this is a function of the initial problem conditions rather than the algorithm, and highlights the general difficulty in predetermining the most appropriate a priori resource levels. Results obtained from the analyses are summarized in Table 9
                        . Note that difference between the cross-training needed in the exact solution and in the approximation is always below 10 percent, with averages below 1 percent. In practice, feasible solutions for the initial problem could be necessary. The development of heuristics to start with a feasible problem instances for this problem is an objective of future research.

The instances with fixed planning blocks consider five products, 12 tasks, eight employees and one absence. The instances with size leveled planning blocks are similar in dimension but marginally higher: six products, 12 tasks, 10 employees and one absence. For clarity, and to allow for slightly larger problem instances, we did not consider previous experience in these comparisons. We note that with size leveled planning blocks, the dimensions of planning blocks are homogeneous. However, with fixed planning blocks, the widest planning block determines the granularity of the entire problem; to widen the scope and the level of disaggregation implies, in general, higher losses of precision. Size leveled planning blocks make it easier to widen the problem and then to solve for instances with greater dimension.

For this computational evolution, we ran a total of 100 instances with fixed planning blocks, and 100 instances with size leveled planning blocks. The instances are generated by considering the number of units of time to perform the tasks to complete a unit of product (vkj
                        ); the upper bounds on proportion of time devoted to products (pj
                        ); and the upper bounds on the number of kinds of tasks for which worker w can be trained (nw
                        ). Regarding the number of units of time to perform the tasks to complete a unit of product, different patterns of zero and non-zero models are included to reflect a range possible scenarios on the similitude among tasks. Non-zero values are randomly generated between 0 and 10 and rounded. Instances of upper bounds on the proportion of time devoted to products are randomly generated by assigning to each component a randomly generated value between 0.1 and 0.8. For the upper bounds on the number different tasks for which a worker can be trained, instances have been defined to include balanced and unbalanced values and multiple levels.

The calculation of the instances in which fixed planning blocks are used has been performed by taking parameter H, the time of work per worker, to be 100; H defines the scope of the problem, and the parameters of the resolution procedure are established as follows: S1
                        , number of demand scenarios selected from the initial set, 15; S2
                        , number of selected scenarios in the successive selections of subsets, 5; and T, the maximum computational time of 120 minutes for the step 4 of the procedure. A summary of the data for 100 instances are shown in Table 10
                        . A total of 95 instances were solved with the initial parameters; four required a change of the strategy to S1
                         = 10, S2
                         = 5; and one was solved when the scope of the problem was diminished by taking H, time of work per worker, 75 hours. The number of attempts until a solution was obtained ranges from 1 to 29, while the solution time ranges from 47 seconds to 29 hours, 8 minutes using IBM ILOG CPLEX 12.1.0 on an Intel(R) Pentium(R) D 3.4 gigahertz with 2 gigabyte RAM.

To solve instances in which size leveled planning blocks are defined, the initial values of the parameters defining the scope and level of problem aggregation are: H, time of work per worker, 75; m, minimum number of blocks per product, 3; and U, upper bound of the percentage that each block represents of the total work time, 5 percent. The initial values of the resolution procedure parameters are: S
                        1, number of demand scenarios selected from the initial set, 15; S
                        2, number of selected scenarios in the successive selections of subsets, 5; and T, the maximum calculation time of 120 minutes. Data from the 100 instances that were solved are shown in Table 11
                        . A total of 47 instances were solved by maintaining the initial characteristics of the problem, 33 of them by maintaining all the initial calculation parameters and another 12 using S
                        1 = 10, and S
                        2 = 5. Using the proposed approach, the other instances are solved by changing the granularity of the problem, in this case by diminishing upper bound of the percentage that each block represents of the total work time (U) and the minimum number of blocks per product (m). A total of 41 instances were solved with U = 15 percent, m = 3; six with U = 20 percent, m = 3; one with U = 25 percent, m = 3; and, finally, five with U = 25 percent, m = 2.

@&#CONCLUSIONS@&#

We addressed the problem of determining a cross-training skill matrix that a work team must have in place in order to meet a level of demand mix variation and workplace absences. Demand mix variations are defined in a straightforward manner in order to relate well to common business practices, thereby allowing for practical use and future improvements of the proposed approach. This paper contributes to the literature on determining appropriate cross training levels and skill matrices for groups of workers, wherein we developed a novel approach using the CODEMI algorithm for solving problems in this class. An appropriate solution is to define demand mix variation by means of establishing the upper bounds for the proportion of total time devoted to each product.

As the problem is defined in terms of ‘level of variation’ and `level of absenteeism’, the scope and level of disaggregation are not part of the original definition problem. The influence on the results, which arises from the definition of the parameters that determine the scope and level of disaggregation, was analyzed in detail in order to guide their selection in real cases. The solution approach we present is based on constraint selection, and we report the performance based on computational experience. The approach is effective in solving problems in the range selected, with average optimality gaps of less than 1 percent, with the largest gap observed less than 9 percent.

The dimensions of the solved instances suggest that the proposed approach and the solution method described can be a basis for future, practical applications. For such applications, it would be most useful to obtain feasible solutions of the problem, even if they are suboptimal, rather than solving a relaxed version of the problem. Future research in developing such an approach will extend the practicality of the current study as well as the broader problem of determining well-scaled math programming formulations. Extension of our approach and CODEMI algorithm to a heterogeneous set of workers is also of considerable interest for future work. The effect on cross-training cost of the variability of demand and of the number of workers involved is also an interesting topic for future research.

@&#REFERENCES@&#

