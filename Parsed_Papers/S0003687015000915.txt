@&#MAIN-TITLE@&#Virtual Sliding QWERTY: A new text entry method for smartwatches using Tap-N-Drag

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We developed Virtual Sliding QWERTY (VSQ) for enhancing text entry tasks with smartwatches.


                        
                        
                           
                           For the verification of VSQ, we also conducted usability tests.


                        
                        
                           
                           As a result, VSQ showed an average of 11.9 words per minute which was higher than previous studies.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Smartwatch

Ultra small display

Text entry

Qwerty keyboard

Tap-N-Drag

@&#ABSTRACT@&#


               
               
                  A smaller screen of smartwatches compare to conventional mobile devices such as PDAs and smartphones is one of the main factors that makes users to input texts difficult. However, several studies have only proposed a concept for entering texts for smartwatches without usability tests while other studies showed low text input performance. In this study, we proposed a new text entry method called Virtual Sliding QWERTY (VSQ) which utilizes a virtual qwerty-layout keyboard and a ‘Tap-N-Drag’ method to move the keyboard to the desired position. In addition, to verify VSQ we conducted a usability test with 20 participants for a combination of 5 key sizes and 4 CD-gains. As a result, VSQ achieved an average of 11.9 Words per Minute which was higher than previous studies. In particular, VSQ at 5 × 5 key size and 2×, or 3× CD-gain had the highest performance in terms of the quantitative and qualitative usability test.
               
            

@&#INTRODUCTION@&#

Since the1880s a wristwatch, a wearable device, has played a role in conveniently showing the time. Recently, with the development in IT technology, in addition to telling the time a smartwatch with similar functions to a smartphone has been developed. This wearable device is multi-functional in that it has the capability of being used as a wrist watch and also as a smartphone.

One of the key design considerations of the wearable device such as a smartwatch is the size of the device (Narayanaswami and Raghunath, 2000). The small size of the device restricts the screen size, and restricts the information space and also it makes it difficult to input text. The difficulty of inputting text on a small screen size is a widely known problem (Haseloff, 2001), and various methods of resolving the limitation have been developed (Colle and Hiszem, 2004; Gündüz and Pathan, 2013; Kwon et al., 2009, 2011; Park and Han, 2010; Parhi et al., 2006; Schedlbauer, 2007). However, the target devices of the previous studies were PDAs or smartphones which have a significantly larger screen than a smartwatch which has an ultra-small touchscreen. Thus, there is a limitation in the utilization of the current input method for the smartwatch.

Studies in the development of a method of enhancing text input for a smartwatch remain at a developmental stage. Although several studies have provided new methods of inputting text which may be feasible for the smartwatch, only a few studies have conducted usability tests to verify the input methods which currently have limitations (Table 1
                     ). Partridge et al. (2002) provided TiltType that inputs text using slope attained by an accelerometer. TiltType shows 9 letters sequentially on the 9 regions including 8 azimuth (NW, N, NE, E, SE, S, SW, W) and a center point. A user can move the next page with the other 9 letters by pushing a button and to select one of the alphabets they have to change the angle of the watch by tilting the arm. Raghunath and Narayanaswami (2002) developed Alphabet selector which selects one of 24 alphabets, A to Z, in a two-line circle with the use of a physical button. TiltType and Alphabet selector are currently only concepts, and usability tests to validate the concepts have not been conducted. Also, the two concept methods did not consider a touchscreen interface which is widely used on the mobile device.

Instead of the physical button recent studies have developed text input methods based on touchscreen interface (Oney et al., 2013; Komninos and Dunlop, 2014; Cho et al., 2014). Oney et al. (2013) proposed ZoomBoard based on a qwerty keyboard layout and a zoomable interface (Fig. 1
                     a). A user can select a letter by zooming in on the qwerty keyboard by touching the appropriate area on the keyboard. As a result of the usability test, the method shows an average of 9.3 words per minute (WPM). Due to the high familiarity of the qwerty keyboard by users, ZoomBoard does not require additional learning time for the users. However, it is time consuming because the system requires zoom in/out repeatedly to select letters. Komninos and Dunlop (2014) proposed a 6 key layout which group 3 to 5 letters from the alphabets (Fig. 1b). This method is similar as it has a standard-12 key layout (Balakrishnan and Yeow, 2008; ITU, 2001) that is one of the widely used input methods in a smartphone. In order to select a target letter a user should touch the group including the target repeatedly. For instance, in order to select ‘c’ and ‘c’ sequentially, the user should touch the keys 7 times: the ‘abc’ key group 3 times, one ‘space’ key, and the ‘abc’ key group 3 times. The usability test to verify a 6 key layout was conducted under controlled experiments with 20 participants, and it showed an average 8.1 WPM. Cho et al. (2014) proposed DragKeys whose keys are formed into 8 groups. Key groups are circularly arranged in 8 azimuths around the text cursor and appear when users enter texts. Users can enter a character by dragging the corresponding key. DragKeys hierarchically contains two levels of key arrays. Users select one of 8 key groups in the 1st drag action and users select a desired key in the 2nd drag or touch action. It means that users need to drag or touch 2 times to enter a character. Also, a new arrangement of DragKeys may require more learning time although this was not validated through experiments.

Unlike text entry methods above based on physical button or touch screen, a new text entry method using touch based supported wristband has also been suggested by Funk et al. (2014). The proposed wristband includes two options: a linear layout which shows an A to Z alphabet continuously and a group layout which shows 8 groups including 3 to 4 letters. A target letter is selected by touch or multi-touch for a group layout. However, these methods showed low performance proximately 3.5 WPM.

In order to improve a text input method with a touch screen, an optimal key size should be considered. Previous studies to derive the optimal key size for a small touch screen have focused on the task using the thumb on a smartphone (Balakrishnan and Yeow, 2008; Park et al., 2008; Park and Han, 2010). However, when users input a text by a smartwatch, they might use their index finger or middle finger which has a smaller width than the thumb. Therefore, the optimal key size of the smartwatch could be different to the optimal size derived from the previous studies.

When considering the previous studies, the following limitations exist. Firstly, only limited studies have focused on a text entry method for smartwatches. Secondly, only a few studies have conducted usability tests for validating their own method (Oney et al., 2013; Komninos and Dunlop (2014); Funk et al., 2014), and their performances were relatively slower than the text entry speed for the iPhone and Android phone: 15.8, and 21.4 WPM respectively (Ariff et al., 2010; Catellucci and MacKenzie, 2011). Thirdly, the recent methods by Oney et al. (2013), Komninos and Dunlop (2014), Cho et al. (2014), and Funk et al. (2014) required multi-touches to select a target letter. Finally, the previous studies lack consideration of an optimal key size for an index or middle finger which is expected to be mainly used on smartwatches.

To overcome the limitations, this study aims to develop Virtual Sliding QWERTY (VSQ), an improved text input method for smartwatches, and also to conduct usability tests to verify VSQ. VSQ was developed based on a ‘qwerty layout’ that is the most widely used, and a ‘Tap-N-Drag’ method. In order to select a target letter instead of the current multi-touch methods users move the qwerty keyboard until the target letter is shown on the screen. Besides, considering the usage environment of a smartwatch this study aims to derive an optimal key size for an index finger. This paper includes the following sections. Section 2 explains VSQ design considerations. Section 3 describes the experimental design for verifying VSQ. Section 4 shows the results of the usability test, and the results are discussed in Section 5. Finally, Section 6 gives the conclusion.

VSQ is a text entry method which utilizes tapping on the qwerty keyboard in order to move it to the desired position on the virtual keyboard (Fig. 2
                     ). The proposed method requires very little learning time for users and is intuitive to use because it utilizes the full sized qwerty layout which PC and smart phone users are already familiar with. Despite limitations in the size of the screen it is possible to access any key on the keyboard by sliding the keyboard using the finger in any direction, thus making the keyboard a virtual keyboard concept. Design considerations of the proposed VSQ are as follows.
                        
                           •
                           
                              Keyboard layout: The qwerty layout is one of the most widely used keyboard layouts in PCs and smart phones (Green et al., 2004; Hsiao et al., 2014; Wu et al., 2014), and thus it can be used intuitively and quickly. There are verity of qwerty keyboard layouts and for this study we used the google android based smartphone layout.


                              Display size: Smartwatches have been developed with a variety of screen sizes according to the practical purposes of the watch. In order to use our study result in the commercial market in the future, we considered the screen size of current commercialized smartwatches. Accordingly this research surveyed the display size of recently published smartwatches. As shown in Table 2
                              , the diagonal length of the smartwatches was between 32 mm and 51 mm, and the average length was 41 mm. Based on this, we regarded 40 mm as the target display size for the research.


                              Text box: When someone texts, the keyboard and the text box make up the entire display. For practical use, the size of the text box need careful consideration. To show texts clearly and to edit letters easily we determined the text box size as 25.5(Width: W) mm × 6(Height: H) mm from a pilot test.


                              Used finger: Inputting text on a smartphone is mainly performed using the thumb(s) of one hand or both hands (Balakrishnan and Yeow, 2008; Park et al., 2008; Park and Han, 2010). A smartwatch, however, is worn on the wrist of one hand and is operated by the other hand. As the watch will be on the wrist, an index finger or middle finger is easier than a thumb for inputting texts using a smartwatch. In this research, an index finger of one-hand was considered.


                              Key size: The key size of a keyboard is one of the important factors which affect objective performance and subjective satisfaction in interface design. For improved input accuracy and speed in text input for smartwatch, the optimized key size for an index finger should be considered. Accordingly this research considered five key sizes including 3 × 3 mm, 4 × 4 mm, 5 × 5 mm, 6 × 6 mm, and 7 × 7 mm 7 × 7 mm size is based on the previous research results which derived an appropriate key size for the use of a thumb for smartphones (Park and Han, 2010). From the pilot tests, 3 × 3 mm size was derived as a touchable minimum key size. 2 × 2 mm used by ZoomBoard (Oney et al., 2013) was excluded. The reasons for this is that the pilot test results showed that recognizing the button texts was difficult and inducing many errors while touching the buttons.


                              Gap between keys: Gap size between the key buttons on the keyboard is one of factors affecting the key size of touch interfaces. According to the Colle and Hiszem (2004), gap size between keys, however, rarely affects the objective performance and subjective satisfaction, and a 0 mm or 1 mm of edge-to-edge space is acceptable for the touch interface. Thus, this research considered 0.6 mm of gap size for all keys.


                              CD-gain: In order to find the desired keys on a small screen of smartwatches when moving a large virtual keyboard, one of the important factors is speed of navigation of the keyboard. This can be regarded as CD-gain, which is the ratio of the velocity of a display pointer to the velocity of an input device. In other words, the ratio of the traveled distance of a pointer to the traveled distance of device (Casiez et al., 2008). In this study, CD-gain can be expressed as the ratio of the traveled distance of keyboard to the traveled distance of fingers. As CD-gain increases, the users can navigate the desired keyboard area faster in the whole virtual keyboard area but with decreasing control accuracy. To derive the optimal CD-gain having the highest objective performance and subjective satisfaction with a key size, we considered four variables including 1×, 2×, 3×, and 4× from a pilot test.

@&#METHODS@&#

Twenty right-handed undergraduate students (10 males and 10 females, mean age 23.7 (Std.: 2.47)) participated in the experiment. None of the participants had any experience in using smartwatches. The participants mainly used their smartphone for Web Browsing, Social Network Service (SNS), Text messaging, e-mail, and etc. In order to select the appropriate participants who were familiar with the qwerty layout, we performed a screening test to check the typing speed of the participants in a PC environment. Each participant performed the ten typing tests and only participants who averaged 175 characters per minute (CPM) were selected. According to Brown (1988), an average of 35 WPM and 23 WPM are moderate to slow level of typing proficiency respectively. These can be regarded as 175 CPM and 115 CPM when one considers the average number of characters in English word is around 5. Based on this criteria, we judged that the participants over an average of 175 CPM were accustomed to the qwerty layout. The average typing speed of the selected twenty participants was 244.16 (Std.: 65.12, Min.: 178.2, Max.: 429.5) CPM. Additionally, the average length and width of the index finger of the participants was 74.0 mm (Std.: 3.9 mm) and 14.7 mm (Std.: 1.3 mm) respectively.

The experiment was conducted on the Microsoft Surface Pro 3 that has a 12-inch multi-touch screen with a resolution of 2560 × 1440 pixels. The program was developed by C# in Microsoft Visual Studio 2010 environment and operated in Microsoft Windows 8.1.

The size of the developed prototype is 29.0(W) mm × 28.0(H) mm and the diagonal length is 40.0 mm. The required text box space in which texts can be inputted, shown and edited is 25.5(W)mm × 6(H)mm and is located in the top side of the display (Fig. 3
                        a).

The information space of VSQ seen in the limited 29 × 22 mm space is affected by the key arrangements, the key size, and the gap size between keys. In this study, in all of the experimental conditions, the key arrangements are equal and the gap size between keys are the same as edge-to-edge 0.6 mm. The information space of the whole keyboard including all the keys is 40.0(W) × 21.0(H)mm, 50.0(W) × 26.5(H)mm, 60.0(W) × 31.0(H)mm, 70.0(W) × 36.5(H)mm, 80.0(W) × 41.0(H)mm when the key sizes are 3 × 3 mm, 4 × 4 mm, 5 × 5 mm, 6 × 6 mm, and 7 × 7 mm respectively.

In addition, the Space and Backspace functions which are frequently used to make sentences can be performed by the swipe gestures as well as the key press. The reason for this was to provide users with more convenient input methods. If the users swipe their fingers to the left side (Left gesture) in the text input space then the Backspace function is performed, and if the users swipe to the right side (Right gesture) the Space function is performed.

Lastly, we called the angle between the wrist wearing the smartwatch and the body as the elbow angle. This is one of the factors which caused discomfort to users during text inputting. In the real usage situation, the users use the smartwatch in their most comfortable position and the angle. In this research, we assumed that the angle between a user's body and the desk is the elbow angle. For this research, to make the situation as real as possible, the participants were allowed to adjust the angle of the tablet in order to gain the most comfortable position to input text (Fig. 3b).

@&#EXPERIMENTAL DESIGN@&#

This experiment used a two-factor within-subject factorial design. The independent variables were key size (SIZE) and CD-gain (GAIN). The SIZE consisted of five different sizes of keypad button: 3 × 3 mm, 4 × 4 mm, 5 × 5 mm, 6 × 6 mm, and 7 × 7 mm. GAIN consisted of 1×, 2×, 3×, and 4× (Table 3
                        ). A total of 20 experimental conditions (5 SIZE × 4 GAIN) were randomly presented to the participants in Latin Square Presentation Order to reduce any carryover effect such as learning and fatigue. Each participant conducted each combination of conditions 5 times for a total of 100 trials.

The dependent variables consisted of two objective measures: characters per minute (CPM) and key strokes per character (KSPC), and two subjective measures: preference (PREF) and Ease of use (EASE) (Table 4
                        ). The task completion time for deriving CPM was measured from the first point that a user touched a keyboard to the point that a last word in a text was selected.

KSPC is the number of key strokes per correct unit character input. This means accuracy of inputting a key. Specifically, the key input accuracy is the degree in which target characters are inputted without mistakes. A variety of mistakes can occur during the key input. For instance, users can input irrelevant keys by mistake as they moved keyboard to the desired key area (Mistake by movements). Users can input other keys due to not being familiar with the spelling of the English words (Mistake by unfamiliar words). Also, users can input adjacent keys to the desired key by mistake because the SIZE is not large enough for the users' fingers (Mistake by adjacent keys). For example, when users try to input ‘S’, users might input other keys such as ‘Q, ‘W’, ‘E’, ‘A’, ‘D’, ‘X’, ‘C’ adjacent to the ‘S’ key. In this research, KSPC means the accuracy of inputting a character according only to the SIZE. In order to measure the accuracy using only the SIZE, we only considered mistakes with adjacent keys and not mistakes made by movements and unfamiliar words as previously explained. In addition, the number of touches for inputting Space and Backspace which are provided in both methods including the key input and swipe gesture was also not considered. To remain consistent with the number of touches, the space between words in a sentence was also not considered.

For the subjective measures, PREF and EASE were scored on a 100-point scale where 0-point means “strongly dislike (PREF)” and “very difficult (EASE)” and 100-point means “strongly preferred (PREF)” and “very easy (EASE).”

For evaluation VSQ phrase sets suggested by MacKenzie and Soukoreff (2003) were used. The phrase sets were suitable for comparing performances among text entry methods because the sets have been frequently used in various studies (Lyons and Clawson, 2012). The participants of this study were all Korean who were not familiar with English and this factor may have affected the text entry performance negatively due to the difficulty of vocabularies. To reduce this disadvantage, we derived 302 phrases from the 500 phrase sets by extracting phrases with over 10 characters per word. The average number of characters without spaces in each phrase was 21.65 (Std.: 3.03), the average number of words in each phrase was 5.31 (Std.: 0.99), and the average number of characters in each word was 4.17 (Std.: 0.77). The original phrase set consisted of 24.19 characters per phrase (Std.: 4.47), 5.42 words per phrase (Std.: 1.09), and 4.58 characters per word (Std.: 1.02). Without repetition for 100 trials, the selected phrases were randomly presented to the participants to reduce the carryover effect.

The experiment included five phases: the screening phase, the preparation phase, the practice phase, the main test phase and the interview phase. In the screening phase, the participants who typed over 175 CPM were selected as mentioned in Section 3.1. In the preparation phase, a researcher gave instructions for VSQ and the short description of the procedures and tasks to the selected participants. In the practice phase, participants were asked to practice at least one for each condition so that they could become accustomed to the SIZE and GAIN for all conditions. In addition, before conducting a main test participants were required to adjust the angle of the device to make it comfortable.

In the main test, participants were required to input 5 phrases for each experimental condition and thus a total of 100 trials were conducted. The detailed explanation of each trial is as follows. 1) The required target sentence to be inputted was shown in the display. 2) A participant read the target sentence and touched the “START” button on the left side of the display when he/she was ready. 3) If the “START” button was clicked, the smartwatch including VSQ was shown on the right side of the display and the text of “START” button changed to “PROCESSING.” When a trial began, the center position of the keyboard was represented. 4) The participant inputted the target text by moving the keyboard from the initial position and pressed the desired key. The participants touched the “FINISH” button below the “PROGRESSING” button when they had finished inputting the sentence (Fig. 4
                        ). This was the end of one trial and this was repeated 5 trials in total for each experimental condition. To reduce the learning effect, each different sentence which was randomly selected from the phrase sets were used in all 100 trials. After each experimental condition was finished, the subjective satisfaction was conducted and sufficient rest time was provided to the participant. Finally, an interview was conducted about the overall feelings of the conditions at the end of the testing period. It lasted about one and half hours.

@&#RESULTS@&#

A within-subject ANOVA was conducted to identify the statistical significance of the main effects and interactions. If there were significant main effects, a Student Newman Keuls (SNK) test was conducted for post-hoc analysis. Table 5
                      shows an average of CPM and KSPC per experimental condition. An average of elbow angle for 20 participants was 23.26° (Std.: 9.86). 18 of the 20 participants did not change the setting angle during the experiment and two of them changed the angle once each during the experiment.

CPM was significantly affected by the main effects SIZE (F(4, 76) = 13.264, p < 0.0001) and GAIN (F(3, 57) = 6.907, p < 0.0001) but not affected by the interaction between SIZE and GAIN. In terms of SIZE, CPM for SIZE = 4 × 4 and 5 × 5 mm were not significantly different from each other and were all significantly higher than the other SIZE. CPM was the lowest for SIZE = 7 × 7 mm (Fig. 5
                        ). In the case of GAIN, CPM for GAIN = 2× was significantly higher than GAIN = 1× and 4×, but not significantly different from GAIN = 3× (Fig. 6
                        ).

The mean number of KSPC was significantly affected by the main effect SIZE (F(4, 76) = 9.255, p < 0.0001) but not affected by GAIN. KSPC for SIZE = 5 × 5, 6 × 6, and 7 × 7 mm were not significantly different from each other, and were all significantly less than for SIZE = 3 × 3 mm. Meanwhile, KSPC for SIZE = 4 × 4, 5 × 5, and 6 × 6 mm were not significantly different from each other (Fig. 7
                        ).

PREF was significantly affected by the main effects SIZE (F(4, 76) = 9.220, p < 0.0001) and GAIN (F(3, 57) = 3.227, p = 0.021) but not affected by the interaction between SIZE and GAIN. In the case of PREF, SIZE of 4 × 4, 5 × 5, and 6 × 6 mm were significantly more preferred than 3 × 3 and 7 × 7 mm that showed the lowest PREF (Fig. 8
                        ). PREF for GAIN of 1×, 2×, and 3× were not significantly different each other, but only GAIN of 2× was higher than 4× (Fig. 9
                        ).

EASE was significantly affected by the main effects SIZE (F(4, 76) = 10.048, p < 0.0001) and GAIN (F(3, 57) = 5.354, p < 0.0001) but was not affected by the interaction between SIZE and GAIN. SIZE of 4 × 4, 5 × 5, and 6 × 6 mm were not significantly different from each other and were easier than 3 × 3 and 7 × 7 mm (Fig. 10
                        ). EAES for GAIN of 1×, 2×, and 3× was not significantly different from each other, but only GAIN of 2× was higher than 4× (Fig. 11
                        ).

@&#DISCUSSION@&#

Overall, the CPM of VSQ was 54.4 in the 306 phrase sets whose average number of characters per word was 4.17. In order to compare the results to previous studies, we derived WPM for VSQ based on the average number of characters per word in 500 original phrase sets that had been used in previous studies. The average number of characters per word in 500 phrase sets was 4.58; therefore WPM for VSQ can be translated to 11.9 by the formula: WPM
                     
                     =
                     
                     CPM/average number of characters per word. Specifically, in all of the experimental conditions, the best CPM was 60.4 which can be translated to 13.2 WPM at 4 × 4 SIZE and 2× GAIN, and the worst CPM was 46.2 which can be translated to 10.1 WPM at 7 × 7 SIZE and 4 × GAIN.

CPM for SIZE showed the reversed U-shaped curves. CPM for 4 × 4 and 5 × 5 SIZE was the highest, and CPM for 7 × 7 was the lowest. This result might be caused by the conflicting positive and negative effect. As SIZE increases, the accuracy of touching a key is enhanced: positive effect. However, because the number of keys in a screen is reduced, a user has to drag a keyboard more frequently which might cause a location confusion while navigating the keyboard: negative effect. In an interview during the experiments, most participants responded that “as the key size increased, I felt confused and sometimes I lost my way while searching for the target letter.” Although KSPC for 5 × 5, 6 × 6, and 7 × 7 SIZE was the lowest for higher touch accuracy, the result of the lowest CPM, PREF, and EASE for 7 × 7 might support the conflicting positive and negative effect.

In this study, KSPC for SIZE 
                        ≥
                      5 × 5 was the lowest. This result is different from previous researches in which the target device were PDAs or smartphones (Balakrishnan and Yeow, 2008; Park et al., 2008; Park and Han, 2010). In the previous study, over 7 × 7 SIZE has the highest accuracy. This result might come from the width of different fingers used for inputting texts. The previous studies have focused on the optimal SIZE to a thumb considering the usage experience of a mobile phone. However, in this study, we considered the usage experience of a smartwatch where the majority of users might input texts with an index finger. There has been little study of finding an optimal SIZE for an index finger, and thus the optimal SIZE derived from this study would be useful for designing keys for an ultra-small display.

In the case of GAIN, CPM for 2× and 3× was the highest, and CPM for 1× and 4× was the lowest. Compared with Kwon et al. (2011) that showed the highest performance at 3×, 5×, 7× GAIN, the GAIN derived from this study was relatively slower. Kwon et al. (2011) used a relatively large information space: 222.50 (W) × 244.75 (H) mm (1000 (W) × 1100 (H) pixel), and the tasks included a search stage to find a target button and a fine control stage to select the target button. However, in this study, because the information space, i.e. the keyboard size, was smaller: 40.0 (W) × 21.0 (H) mm (at 3 × 3 SIZE) to 80.0 (W) × 41.0 (H) (at 7 × 7 SIZE), it required a shorter movement for the information space. In particular, inputting texts required the short movement frequently because letters were located close to each other due to the small size of the keyboard allowing fine control. Therefore, at GAIN = 4 “the negative effect, lack of fine control in the control stage, seemed to overpower the positive effect (Kwon et al., 2011),” due to the fast movement of the keyboard. Participants reported that moving to a center area of the keyboard was especially difficult at high GAIN due to the greater movement of the keyboard than the length that they expected. Also, several participants responded that this excessive movement caused the location confusion with the keyboard. Meanwhile, at GAIN = 1 participants responded that it required frequent drag tasks to find target letters which was tedious and time consuming.

In short, VSQ at 5 × 5 SIZE, 2×, and 3× GAIN showed the highest performance in terms of the quantitative and qualitative usability test. Also, VSQ at 4 × 4 SIZE showed the highest performance except for KSPC. In the case of 4 × 4 SIZE, due to the small size of the key the accuracy of selecting a key was somewhat less than for keys over size 5 × 5. However, the number of letters shown on a screen was numerous, and thus relatively smaller effort was required to move a keyboard. In the interview, most of the participants reported that the number of letters shown on the screen was more important than the accuracy because it reduced the location confusion while inputting texts, and also modifying the errors was easy. In addition, the user experience might affect the result considering that 7 participants had used iPhone 5 on which the qwerty keyboard has 4 mm width keys.

In the following sentences, we compare previous studies and examine some advantages and disadvantages of VSQ with regards to text entry speed. Table 6
                      shows the comparison results between VSQ and previous studies. In the previous studies mentioned in Table 1, we excluded TiltType and Alphabet selector for comparison. This is because these two methods used the physical button interfaces instead of touch screen interfaces, and also did not show the text entry performance. When compared to the previous studies, VSQ showed the highest text entry speed. The average text entry speed for all experimental conditions was 11.9 WPM and ranged between 13.2 WPM and 10.1 WPM for the best and worst respectively. In the previous studies, DragKeys did not show the performance, whereas ZoomBoard, 6 key layout, and Touch-sensitive wristband showed 9.3 WPM, 8.3 WPM, and 3.45 WPM, respectively. VSQ did not conduct experiments in the same experimental conditions and tasks also some of the previous studies did not conduct the experiments under rigorous experimental conditions. Therefore, we cannot deduce that the performance of VSQ is much higher or lower than the others. However, ZoomBoard that showed the highest CPM in the previous studies might be comparable to VSQ because the experimental conditions of VSQ and ZoomBoard were quite similar. Prototypes in these researches for the experiments were carried out on tablets including MS Surface Pro 3 and Apple iPad 3 but not on the smartwatches, and also used the same phrase sets by MacKenzie and Soukoreff (2003) for the text entry tasks. Therefore, we can deduce that ZoomBoard was conducted in comparable experimental conditions compared to previous studies. Therefore, we identically compared VSQ to ZoomBoard. VSQ is able to input an additional 2.6 (Min.: 0.8, Max.: 3.9) WPM more than ZoomBoard.

This result might be caused by the number of touches needed to input a letter. With ZoomBoard, a user needs to touch a keyboard two times to select a letter because zooming-in to the keyboard has to be preceded by selecting a letter. This might cause inefficiency in the number of touches when target letters, which should be inputted consecutively, are located adjacent to each other such as ‘A’ and ‘S’ on the qwerty keyboard. In the case of VSQ, a user needs to drag a keyboard to find a letter until the letter is shown on the screen. However, when target letters, which should be inputted consecutively, are shown on the screen together, a user can select the letters continuously without a dragging action. This result can be interpreted that the dragging of VSQ requires less time than the zoom in-and-out of ZoomBoard.

This study has made the following contributions. Firstly, we developed VSQ which is feasible for an ultra-small touch screen and verified its' usability through testing by users. Secondly, we derived an optimal SIZE for an index finger considering the users experience of a smartwatch. Finally, we derived an optimal GAIN for an ultra-small touch screen. These results could be useful for designing a layout for an ultra-small touch screen. However, VSQ has a limitation in that it might be used conveniently by users who have a knowledge of the overall location of keys on a qwerty keyboard. In addition, when part of a key is located on the boundary edge of the screen, the key could not be selected by a finger. This might be caused by the limitation of touch sensors in the equipment used. This limitation will be eradicated with the development of the technology.

@&#CONCLUSION@&#

We developed VSQ which is an enhanced text input method and conducted a usability test with 20 participants. VSQ showed a higher WPM compared with previous studies. In particular, VSQ showed the highest performance at 4 × 4, 5 × 5 SIZE, and at 2×, 3× GAIN. However, for further validation of VSQ, the following considerations should be considered in any future study. Firstly, although this study only dealt with Korean users whose main language is not English, any further study should include users whose main language is English. The participants in this study were not familiar with some of the words in the phrase sets and therefore had a tendency to input letters individually when the word was not familiar to them because they needed to refer to the spelling of the word. However, users whose main language is English might use a different strategy to input a word, i.e. input a letter considering whole-word as they are familiar with spelling, and this different strategy might lead to different results. Secondly, this study only dealt with users who are familiar with a qwerty keyboard, and thus future studies should incorporate users who have had different experience of keyboards. Finally, this study used a tablet PC instead of a smartwatch for the experiments, and thus, for further verification of VSQ future studies with smartwatches should be conducted. In spite of its limitations, the results of this study indicate a good starting point for further studies in improving the text input performance on an ultra-small screen. The executable program and source code used in this study can be found at http://github.com/chahero/VirtualSlidingQWERTY.

@&#REFERENCES@&#

