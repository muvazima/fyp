@&#MAIN-TITLE@&#Minimizing costs is easier than minimizing peaks when supplying the heat demand of a group of houses

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We model a simple heating system.


                        
                        
                           
                           We examine complexity of computing the optimal control.


                        
                        
                           
                           Minimizing cost is polynomial while minimizing the peak is NP-complete.


                        
                        
                           
                           Further study of minimizing the peak.


                        
                        
                           
                           Studied problem has practical applications in Smart Grids.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Complexity

Dynamic programming

Job scheduling

Lot-sizing

@&#ABSTRACT@&#


               
               
                  This paper studies planning problems for a group of heating systems which supply the hot water demand for domestic use in houses. These systems (e.g. gas or electric boilers, heat pumps or microCHPs) use an external energy source to heat up water and store this hot water for supplying the domestic demands. The latter allows to some extent a decoupling of the heat production from the heat demand. We focus on the situation where each heating system has its own demand and buffer and the supply of the heating systems is coming from a common source. In practice, the common source may lead to a coupling of the planning for the group of heating systems. On the one hand, the external supply of the energy for heating up the water may have to be bought by an energy supplier on e.g. a day-ahead market. As the price of energy varies over time on such markets, this supplier is interested in a planning which minimizes the total cost to supply the heating systems with energy. On the other hand, the bottleneck to supply the energy also may be the capacity of the distribution system (e.g. the electricity networks or the gas network). As this has to be dimensioned for the maximal consumption, in this case it is important to minimize the maximal peak. The two mentioned coupling constraints for supplying the energy for producing the heat, lead to two different objectives for the planning of the group of heating systems: minimizing cost and minimizing the maximal peak. In this paper, we study the algorithmic complexity of the two resulting planning problems. For minimizing costs, a classical dynamic programming approach is given which solves the problem in polynomial time. On the other hand, we prove that minimizing the maximal peak is NP-hard and discuss why this problem is hard. Based on this, we show that this problem becomes polynomial if all heating systems have the same consumption of energy when turned on. Finally, we present a Fix Parameter Tractable (FPT) algorithm for minimizing the maximal peak which is linear in the number of time intervals.
               
            

@&#INTRODUCTION@&#

In modern society, a significant amount of energy is consumed for heating water (Aguilar et al., 2005). Almost every building in developed countries is connected to a district heating system or equipped with appliances for heating water locally. Typical appliances for heating water are electrical and gas heating systems, heat pumps and Combined Heat and Power units (microCHP). The resulting water is stored in buffers to be prepared for demands of inhabitants.

A schematic overview of a local heating system is presented in Fig. 1
                     . It consists of

                        
                           •
                           a supply which represents some source of energy (electricity, gas),

a converter which converts the energy into heat (hot water),

a buffer which stores heat for later usage and

a demand which represents the consumption profile of heat.

A more formal definition of the used model for local heating and the used parameters and variables is given in Section 1.1. For the presentation of the model electricity and heat is used to distinguish between consumed and produced energy, but the given model can handle arbitrary types of energy. Furthermore, even though the presented model of the local heating system is quite simple, it cannot only be applied for heating water but has many other applications, e.g. heating demand of houses, fridges and freezers and inventory managements. Section 1.1 presents more details about those applications.

The combination of a heating device and a buffer gives some freedom in deciding when the heat has to be produced. To use this freedom in a proper way, different objectives may be considered in practice. On one hand, the electricity used to heat water has to be bought. Although these prices are nowadays mostly fixed for private costumers, the supply companies delivering the electricity are faced with variable prices resulting e.g. from a day-ahead market. This leads to the objective of minimizing the total cost of electricity consumed by all heating systems in the area of the supply company during the planning period. Note that in cost or auction based control algorithms for Smart Grids, this objective is also used (see e.g. Molderink et al., 2010). On the other hand, the energy used for heating is transported from a supply to the heating systems by electrical networks or gas pipes. These transport media have to be able to transport all the used energy and therefore have to be dimensioned for the maximal consumption peak of all houses connected to the transport network. Thus, minimizing the maximal consumption over all these houses may decrease investments in the distribution networks.

The above mentioned aspects lead to two basic planning problems for a group of heating systems which are both based on the same model but they differ in the objective function. The first problem is called minimizing cost. The second one is minimizing peak where peak is the maximal consumption of electricity over the planning period. Those problems are formally defined in Section 1.1. We show that the algorithmic complexity of those problems is substantially different, although the problems differ only by the objective function. The use of a classical dynamic programming approach (see e.g. Cormen et al., 2001) gives a simple polynomial-time algorithm. On the other hand, we proof that minimizing peak is NP-hard and we discuss why minimizing peak makes the problem hard. We show that minimizing peak becomes polynomial if all converters have the same consumption of electricity when turned on. We also present a dynamic programming algorithm for the general case of minimizing peak which is linear in the number of time intervals and the multiplicative constant depends only on the number of heating systems and the ratio between capacity and production of the heating systems, meaning that the algorithm is a Fix Parameter Tractable (FPT) algorithm.

In this section we present a mathematical description of the studied model, possible applications of this model and a summary of the results of this paper. The used parameters and decision variables are summarized the following table.

                           
                              
                                 
                                    C
                                 
                              
                              set of heating systems

set of time intervals

consumed electricity of converter c if turned on

produced heat of converter c if turned on

heat demand from the heating system c in time interval t
                              

price of electricity in time interval t
                              

lower bound on the state of charge of buffer c in time interval t
                              

upper bound on the state of charge of buffer c in time interval t
                              

operational state of the converter x
                                 
                                    c, t
                                 
                              

state of charge of buffer c in the beginning of time interval t
                              

First of all, we consider a discrete time model for the considered problem, meaning that we split the planning period into T time intervals of the same length. We consider sets 
                           
                              C
                              =
                              
                                 {
                                 1
                                 ,
                                 ⋯
                                 ,
                                 C
                                 }
                              
                           
                         of C heating systems and 
                           
                              T
                              =
                              
                                 {
                                 1
                                 ,
                                 ⋯
                                 ,
                                 T
                                 }
                              
                           
                         of T time intervals. In this paper, the letter c is always an index of a heating system and t is an index of a time interval. For mathematical purposes, we separate a heating system into a converter, a buffer and a demand; see Fig. 1. We say “a converter c” or “a buffer c” or “a demand c” to refer to the devices of the heating system 
                           
                              c
                              ∈
                              C
                           
                        .

We consider a simple converter which has only two states: In every time interval the converter is either turned on or turned off. The amount of consumed electricity is Ec
                         and the amount of produced heat (or any other form of energy) is Hc
                         during one time interval in which the converter 
                           
                              c
                              ∈
                              C
                           
                         is turned on. If the converter is turned off, then it consumes and produces no energy. Let x
                        
                           c, t
                         ∈ {0, 1} be the variable indicating whether the converter 
                           
                              c
                              ∈
                              C
                           
                         is running in time interval 
                           
                              t
                              ∈
                              T
                           
                        .

The state of charge of a buffer 
                           
                              c
                              ∈
                              C
                           
                         at the beginning of time interval 
                           
                              t
                              ∈
                              T
                           
                         is denoted by s
                        
                           c, t
                         which represents the amount of heat in the buffer. Note that s
                        
                           c, T + 1 is the state of charge at the end of planning period. The state of charge s
                        
                           c, t
                         is limited by a lower bound L
                        
                           c, t
                         and an upper bound U
                        
                           c, t
                        . Those two bounds are usually constant over time: the upper bound U
                        
                           c, t
                         is the capacity of buffer and the lower bound L
                        
                           c, t
                         is mostly zero. But it may be useful to allow different values, e.g. a given initial state of charge can be modeled by setting L
                        
                           c, 1 and U
                        
                           c, 1 equal to the initial state. In this paper, we assume that L
                        
                           c, 1 = U
                        
                           c, 1, so the initial state of charge s
                        
                           c, 1 is fixed.

The amount of consumed heat by the inhabitants of the house from heating system 
                           
                              c
                              ∈
                              C
                           
                         during time interval 
                           
                              t
                              ∈
                              T
                           
                         is denoted by D
                        
                           c, t
                        . This amount is assumed to be given and is called the demand of heating system c. Furthermore, the price of a unit of electricity consumed by a converter in time interval 
                           
                              t
                              ∈
                              T
                           
                         is denoted by Pt
                        . We discuss in Section 5 that different prices of electricity for different converters do not influence the developed algorithms. In this paper, we study off-line problems, so we assume that both demands D
                        
                           c, t
                         and prices Pt
                         are given for the whole planning period.

The operational variables of the converters x
                        
                           c, t
                         and the states of charge of buffers s
                        
                           c, t
                         are restricted by the following invariants.

                           
                              (1)
                              
                                 
                                    
                                       
                                          
                                             
                                                s
                                                
                                                   c
                                                   ,
                                                   t
                                                   +
                                                   1
                                                
                                             
                                             =
                                             
                                                s
                                                
                                                   c
                                                   ,
                                                   t
                                                
                                             
                                             +
                                             
                                                H
                                                c
                                             
                                             
                                                x
                                                
                                                   c
                                                   ,
                                                   t
                                                
                                             
                                             −
                                             
                                                D
                                                
                                                   c
                                                   ,
                                                   t
                                                
                                             
                                          
                                       
                                       
                                       
                                          
                                             
                                             
                                             
                                             
                                             for
                                             
                                             
                                             c
                                             ∈
                                             C
                                             ,
                                             
                                             t
                                             ∈
                                             T
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (2)
                              
                                 
                                    
                                       
                                          
                                             
                                                [
                                                4
                                                p
                                                t
                                                ]
                                             
                                             
                                                L
                                                
                                                   c
                                                   ,
                                                   t
                                                
                                             
                                             ≤
                                             
                                                s
                                                
                                                   c
                                                   ,
                                                   t
                                                
                                             
                                             ≤
                                             
                                                U
                                                
                                                   c
                                                   ,
                                                   t
                                                
                                             
                                          
                                       
                                       
                                       
                                          
                                             
                                             
                                             
                                             
                                             for
                                             
                                             
                                             c
                                             ∈
                                             C
                                             ,
                                             
                                             t
                                             ∈
                                             T
                                             ∪
                                             
                                                {
                                                T
                                                +
                                                1
                                                }
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       
                                          
                                             
                                                [
                                                4
                                                p
                                                t
                                                ]
                                             
                                             
                                                x
                                                
                                                   c
                                                   ,
                                                   t
                                                
                                             
                                             ∈
                                             
                                                {
                                                0
                                                ,
                                                1
                                                }
                                             
                                          
                                       
                                       
                                       
                                          
                                             
                                             
                                             
                                             
                                             for
                                             
                                             
                                             c
                                             ∈
                                             C
                                             ,
                                             
                                             t
                                             ∈
                                             T
                                          
                                       
                                    
                                 
                              
                           
                        
                        Eq. (1) is the charging equation of the buffer. During time interval 
                           
                              t
                              ∈
                              T
                              ,
                           
                         the state of charge s
                        
                           c, t
                         of a buffer 
                           
                              c
                              ∈
                              C
                           
                         is increased by the production of the converter which is Hcx
                        
                           c, t
                         and it is decreased by the demand D
                        
                           c, t
                        . Eqs. (2) and (3) ensure that the domains of variables s
                        
                           c, t
                         and x
                        
                           c, t
                        , respectively, are taken into account.

In this paper, we compare the complexity of the following two objective functions.

                           
                              (4)
                              
                                 
                                    
                                       
                                          
                                             Minimizing
                                             
                                             cost:
                                          
                                       
                                       
                                       
                                          
                                             minimize
                                             
                                             
                                                ∑
                                                
                                                   c
                                                   ∈
                                                   C
                                                
                                             
                                             
                                                E
                                                c
                                             
                                             
                                                ∑
                                                
                                                   t
                                                   ∈
                                                   T
                                                
                                             
                                             
                                                P
                                                t
                                             
                                             
                                                x
                                                
                                                   c
                                                   ,
                                                   t
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (5)
                              
                                 
                                    
                                       
                                          
                                             Minimizing
                                             
                                             peak:
                                          
                                       
                                       
                                       
                                          
                                             minimize
                                             
                                             m
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (6)
                              
                                 
                                    
                                       
                                          
                                             [
                                             4
                                             p
                                             t
                                             ]
                                          
                                       
                                       
                                       
                                          
                                             where
                                             
                                             m
                                             ≥
                                             
                                                ∑
                                                
                                                   c
                                                   ∈
                                                   C
                                                
                                             
                                             
                                                E
                                                c
                                             
                                             
                                                x
                                                
                                                   c
                                                   ,
                                                   t
                                                
                                             
                                             
                                             for
                                             
                                             t
                                             ∈
                                             T
                                          
                                       
                                    
                                 
                              
                           
                        Since Ecx
                        
                           c, t
                         is the amount of consumed electricity by a converter c in time t and EcPtx
                        
                           c, t
                         is the cost for this electricity, the sum in (4) is the cost for electricity consumed by all converters during the whole planning period. Furthermore, since the sum 
                           
                              
                                 ∑
                                 
                                    c
                                    ∈
                                    C
                                 
                              
                              
                                 E
                                 c
                              
                              
                                 x
                                 
                                    c
                                    ,
                                    t
                                 
                              
                           
                         is the amount of electricity consumed by all converters in time t, the inequality (6) and the objective function (5) guarantee that the value of the variable m is the maximal consumption of electricity during one time period within the whole planning period.

The contribution of this paper are as follows. First, we prove that minimizing peak is NP-hard even for two time intervals (T = 2) and it is strongly NP-hard if the number of time intervals T is a part of input (Section 3). To make it easier to get more insight in the differences between the two objectives, in Section 4 some preprocessing methods for the input data are presented. They, both, simplify the mathematical model and decrease the computation time if a Mixed Integer Linear Programming solver is used for minimizing peak. Afterwards, in Section 5, a classical dynamic programming approach (see e.g. Cormen et al., 2001) is given, which results in a polynomial-time algorithm for minimizing cost. This leads to the question which elements of the problem make the objective to minimize peak hard. The polynomial reduction presented in Section 3 sets up parameters Hc, L
                        
                           c, t
                        , U
                        
                           c, t
                         and D
                        
                           c, t
                         in such a way that every converter has to run exactly once and the consumption of converters Ec
                         is used for partitioning integers into time intervals. Therefore, partitioning the consumption of converters Ec
                         makes minimizing peak hard. Thus, we investigate the special case where the consumption values Ec
                         of all converters are equal, since in this case partition is trivial. We show that minimizing peak is also easy in this case by presenting a polynomial time algorithm (Section 6).

However, as the assumption that all converters have the same consumption is not really practical. Therefore we consider which other restriction makes minimizing peak tractable. As minimizing peak is NP-hard already for two time interval and practical study cases often have a fixed number of heating systems but a long planning period, it would be useful to have a FPT algorithm for minimizing peak which is polynomial in the number of time intervals T if the number of heating systems C is fixed. We present such an algorithm which is polynomial in T if C and a radio between capacity of buffers and production of converters is fixed (Section 5).

Furthermore, Section 4 presents some preprocessing methods for the input data which both simplifies the mathematical model and decreases computation time if a Mixed Integer Linear Programming solver is used for minimizing peak.

@&#MOTIVATION@&#

The considered problems originate from a project called MeppelEnergie which plans to build a group of houses and a biogas station in Meppel, a small city in the Netherlands
                           1
                        
                        
                           1
                           For more details, see websites http://www.utwente.nl/ctit/energy/projects/ meppel.html
 and http://www.meppelwoont.nl/nieuwveense-landen/.
                        . In this project, the houses will have a heat pump for space heating and tap demands. Due to Dutch legislation, the biogas station will provide electricity only to those heat pumps. Therefore, the heat pumps should be scheduled in such a way that they only consume, if possible, the electricity produced by the biogas station. If this is not possible, the remaining energy has to be bought on the electricity market at minimal cost.

The study (Fink et al., 2014) shows that some central control of all heat pumps is necessary to avoid large peak loads. Therefore, our task is to design one or more algorithms to control all heat pumps. The first of our proposed algorithms is called global MILP control which uses an Mix Integers Linear Programming solver to find an optimal (or near to optimal) solution of the minimizing peak problem. The paper (Fink et al., 2014) shows that this approach can be used only for small number of houses. For larger number of houses, a faster algorithm for the minimizing peak problem is necessary but the problem is NP-hard. Therefore, we try to find an easier problem which can be solved faster (polynomial algorithm for the case where all heat pump consume the same amount of energy; FPT algorithm for the general case). In practice, it may be sufficient to find a solution which is close to the optimum. One such approximation algorithm is presented in Fink et al. (2014).

Other approach is a cost-based control where a central controller distributes prices for every time and every heat pump computes electrical consumption minimizing cost. This cost-based approach can be used by TRIANA methodology (Toersche et al., 2012) or multi-commodity auction where the auctioneer’s goal is to find a price for every time interval which minimizes peak of the total consumption of electricity. In both cases, controllers of heat pumps are required to solved the minimizing cost problem.

In the time of writing this paper, the first group of houses of the project MeppelEnergie is being built. When the biogas station and sufficiently many houses will be finished, we will show practical results of our theoretical study.

The remaining of the paper is organized as follows. Section 2 gives applications of our results and related literature. The hardness of the problem of minimizing peak is proved in Section 3. Section 4 presents a simpler form of our problem which is used in later sections. Dynamic programming is used in Section 5 to present polynomial algorithm for minimizing cost and a FPT algorithm for minimizing peak. A polynomial algorithm for a special case of minimizing peak is presented in Section 6.

In the following we present related literature and give some possible applications of this model.

Some related works can be found in inventory management and lot-sizing literature (see e.g. Drexl and Kimms, 1997; Karimi et al., 2003 for reviews). In inventory control problems (see Sven, 2006) a buffer may represent an inventory of items, whereby a converter represent the production of items and demand represent the ordered quantities. Note, that on a first view the buffer constraint (1) and (2) seem to be identical to the classical inventory holding constraints. However, there are a few differences. On the one hand, in inventory problems the lower bounds are in general 0. On the other hand, inventory control problems with different production facilities (in our case the converters) consider the situation that several production facilities share an inventory (since otherwise the problem decouples in independent problems). However, the main difference between the problem considered in this paper and inventory problems is in the objective. In our case the objective does not contain any holding costs or fixed costs for starting the production in a certain time period. In case of peak minimization thereby the objective is the only binding element between the different heating systems and makes that the problem is quite different to inventory problems. In case of cost minimization, the problem splits into independent problems for the different heating systems and in Section 5 we present a dynamic program to solve this problem which is in its base similar to dynamic programs for specific inventory problems.

One other related area is vehicle routing and scheduling (see e.g. Laporte, 1992 for an overview of this area). For example, Lin et al. (2007) studied optimal vehicle refueling policies. In their model, a refueling station can provide an arbitrary amount of gas while our converter is restricted into two possible states of heat generation. Other papers on vehicle refueling policies are more distant from our research since a car is routed on a graph (see e.g. Lin, 2008; Sweda and Klabjan, 2012).

As our problem consists of only one commodity, also the single item lot-sizing problems somehow related (see Brahimi et al., 2006 for a review). Wagner and Whitin (1958) presented an 
                        
                           O
                           (
                           
                              T
                              2
                           
                           )
                        
                      algorithm for the uncapacitated lot-sizing problem which was improved by Federgruen and Tzur (1991),Wagelmans et al. (1992) and Aggarwal and Park (1993) to 
                        
                           O
                           (
                           T
                           log
                           T
                           )
                        
                     . On the other hand, Florian et al. (1980) proved that the lot-sizing problem with upper bounds on production and order quantities is NP-hard. Computational complexity of the capacited lot-sizing problems is studied in Bitran and Yanasse (1982). Our problem is a special case of capacited single item lot-sizing problem which does not seem to be considered in the literature.

A problem somewhat similar to the problem in this paper was considered by Bosman et al. (2009); 2011) who studied a microCHP planning problem and proved that minimizing peak is NP-hard in their model (Bosman et al., 2010). Bosman (2010) also presents a dynamic programming algorithm for the microCHP planning problem whose time complexity is O(T
                     3C + 1) where T is the number of time intervals and C is the number of microCHPs.

In the following we give some possible applications of a model presented in this paper.

                        
                           •
                           
                              Hot  water: Converter and buffer form a model of a simple electrical or gas boiler. Demand represents the consumption of hot water in a house.


                              House heating: The model may be used to express a very simple model for house heating. The converter represents a simple heater. The capacity of the buffer corresponds to thermal capacity of the heating system (e.g. hot water buffer or thermal capacity of concrete floors and walls) and the state of charge of the buffer is related to the temperature inside the house. Heat losses of the house may be modeled using the demand if we assume that the temperature difference inside the house does not have significant influence on the losses. More details about using thermal mass as a buffers are presented in van Leeuwen et al. (2014) and computing heat demands are explained in Fink et al. (2014).


                              Fridges and freezers: A fridge essentially works in the opposite way than heating, so it may be modeled similarly. However, we have to be careful with the correct interpretation of all parameters. The state of charge of the buffer again represents the temperature inside the fridge, but a higher state of charge means a lower temperature. The converter does not produce heat to the fridge but it decreases the temperature inside the fridge, so the converter increases the state of charge of the buffer (fridge). The demand decreases the state of charge of the fridge due to thermal loss and usage of the fridge by humans.

In this section, we prove that minimizing peak is NP-hard. We present two polynomial reductions. In the first reduction we use the partition problem to prove that minimizing peak is already NP-hard for problems with only two time intervals. In the second reduction we use the 3-partition to prove that minimizing peak is strongly NP-hard if the number of time intervals is part of the input.

The problem of minimizing peak is an optimization problem. The corresponding decision problem is a question whether for a given M there exists a solution satisfying conditions (1), (2) and (3) such that the maximal peak is at most M, that is 
                        
                           M
                           ≥
                           
                              ∑
                              
                                 c
                                 ∈
                                 C
                              
                           
                           
                              E
                              c
                           
                           
                              x
                              
                                 c
                                 ,
                                 t
                              
                           
                        
                      for all 
                        
                           t
                           ∈
                           T
                        
                     . This problem belongs to NP since for given values of binary variables x
                     
                        c, t
                      for 
                        
                           c
                           ∈
                           C
                        
                      and 
                        
                           t
                           ∈
                           T
                        
                      we can easily compute states of charges s
                     
                        c, t
                      by the recurrence formula (1) and check whether capacity conditions (2) are satisfied.

For the first reduction we use the partition problem where the decision whether a given multiset of N positive integers {I
                     1, …, IN
                     } can be partitioned into two subsets S
                     1 and S
                     2 such that the sum of the numbers in S
                     1 equals the sum of the numbers in S
                     2. Although the partition problem is NP-complete, there is a pseudo-polynomial time dynamic programming solution, and there are heuristics that solve (specific versions of) the problem, either optimally or approximately, see Kellerer et al. (2004).

The instance of the peak minimization problem in the reduction has exactly T = 2 time intervals. All demands are unitary, that is D
                     
                        c, 1 = D
                     
                        c, 2 = 1 for 
                        
                           c
                           ∈
                           C
                           ,
                        
                      all buffers have the capacity 2 and the initial state of charge is 1, i.e. L
                     
                        c, 1 = U
                     
                        c, 1 = 1, L
                     
                        c, 2 = L
                     
                        c, 3 = 0 and U
                     
                        c, 2 = U
                     
                        c, 3 = 2 for 
                        
                           c
                           ∈
                           C
                        
                     . Furthermore, the production of all converters c is Hc
                      = 2. Note that this choice of the parameters implies that the capacity constraints (1) and (2) of the buffers are satisfied if and only if every converter runs exactly once. Finally, the number of converters C is chosen to be equal to the number of integers N and the consumption of converters corresponds to the integers of the partition problem, i.e. Ec
                      = Ic
                      for 
                        
                           c
                           ∈
                           C
                        
                     . We ask for a solution where the maximal peak is at most the half of the sum of integers I
                     1, …, IN
                     .

Since every converter has to run exactly once, we have a one-to-one correspondence between assigning integers I
                     1, …, IN
                      into subsets S
                     1 and S
                     2 and scheduling the converters in the two time intervals 1 and 2. Therefore, the integers I
                     1, …, IN
                      can be partitioned into two subsets of equal sum if and only if there exists a scheduling of the converters such that the consumption of electricity in both time intervals is equal. This completes the proof that minimizing peak is NP-hard even for two time intervals.

In the following we consider an arbitrary number of time intervals and prove that this makes the problem of minimizing the peak strongly NP-hard using a reduction from the 3-partition problem. The decision question in the 3-partition problem is whether a given sequence I
                     1, …, I
                     3N
                      of 3N positive integers can be partitioned into N sets S
                     1, …, SN
                      such that every number of the sequence is contained in exactly one set and the sums of the numbers in each subset are equal. The 3-partition problem is a well-known strongly NP-complete problem and it remains hard even if some restrictions are set up on the integers (Garey and Johnson, 1979).

The reduction of the 3-partition problem to the problem of minimizing peaks is similar to the reduction presented above. For this, the number of time intervals T is the number of subsets N and the number of converters C is 3N. We again choose the parameters for the buffers and demands in such a way that every converter has to run exactly once:

                        
                           •
                           demands are unitary, i.e. D
                              
                                 c, t
                               = 1 for 
                                 
                                    c
                                    ∈
                                    C
                                 
                               and 
                                 
                                    t
                                    ∈
                                    T
                                 
                              ,

the initial state of charge is T − 1, i.e. U
                              
                                 c, 1 = L
                              
                                 c, 1 = T − 1 for 
                                 
                                    c
                                    ∈
                                    C
                                 
                              ,

buffers have the capacity 2T − 2, i.e. U
                              
                                 c, t
                               = 2T − 2 and L
                              
                                 c, t
                               = 0 for 
                                 
                                    c
                                    ∈
                                    C
                                 
                               and t ∈ {2, …, t + 1},

and the productions of all converters is Hc
                               = T.

The choice implies that if some converter c does not run during the planning period, then the final state of charge of the corresponding buffer gets s
                     
                        c, T + 1 = −1 which violates its capacity constraints (2). If some converter c runs twice (or more times), then the final state of charge s
                     
                        c, T + 1 of its buffer is (at least) 2T − 1 which also violates its capacity constraints (2). Therefore, the capacity constraints (1) and (2) of all buffers are satisfied if and only if every converter runs exactly once.

Finally, the C numbers of the partitioning problem are assigned as consumption values to the converters, that is Ec
                      = Ic
                      for 
                        
                           c
                           ∈
                           C
                        
                     . The decision question is whether there exists a scheduling of converters such that the peak is at most 
                        
                           M
                           =
                           
                              1
                              T
                           
                           
                              ∑
                              
                                 c
                                 ∈
                                 C
                              
                           
                           
                              I
                              c
                           
                        
                     . Since every converter has to run exactly once, we have one-to-one correspondence between assigning integers into subsets and scheduling of converters in the different time intervals. Therefore, integers can be partitioned into T subsets of equal sum if and only if there exists schedule for the converters such that the consumptions of electricity is constant over the planning period. This completes the proof that minimizing peak is strongly NP-hard for an arbitrary number of time intervals.

In this section, we simplify the problem presented in Section 1.1. We show that conditions (1) and (2) can be replaced by one condition (11). This simpler formulation is used in the following sections.

First, we expand the recurrence formula (1) into an explicit equation.

                        
                           
                              
                                 
                                    s
                                    
                                       c
                                       ,
                                       t
                                       +
                                       1
                                    
                                 
                                 =
                                 
                                    s
                                    
                                       c
                                       ,
                                       1
                                    
                                 
                                 +
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                    
                                    t
                                 
                                 
                                    H
                                    c
                                 
                                 
                                    x
                                    
                                       c
                                       ,
                                       i
                                    
                                 
                                 −
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                    
                                    t
                                 
                                 
                                    D
                                    
                                       c
                                       ,
                                       i
                                    
                                 
                              
                           
                        
                     Since we assume that the initial state of charge satisfies s
                     
                        c, 1 = L
                     
                        c, 1 = U
                     
                        c, 1, we can replace s
                     
                        c, 1 by L
                     
                        c, 1 and substitute into inequalities (2).

                        
                           
                              
                                 
                                    L
                                    
                                       c
                                       ,
                                       t
                                       +
                                       1
                                    
                                 
                                 ≤
                                 
                                    L
                                    
                                       c
                                       ,
                                       1
                                    
                                 
                                 +
                                 
                                    H
                                    c
                                 
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                    
                                    t
                                 
                                 
                                    x
                                    
                                       c
                                       ,
                                       i
                                    
                                 
                                 −
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                    
                                    t
                                 
                                 
                                    D
                                    
                                       c
                                       ,
                                       i
                                    
                                 
                                 ≤
                                 
                                    U
                                    
                                       c
                                       ,
                                       t
                                       +
                                       1
                                    
                                 
                              
                           
                        
                     which can be rewritten as

                        
                           
                              
                                 
                                    
                                       
                                          L
                                          
                                             c
                                             ,
                                             t
                                             +
                                             1
                                          
                                       
                                       −
                                       
                                          L
                                          
                                             c
                                             ,
                                             1
                                          
                                       
                                       +
                                       
                                          ∑
                                          
                                             i
                                             =
                                             1
                                          
                                          t
                                       
                                       
                                          D
                                          
                                             c
                                             ,
                                             i
                                          
                                       
                                    
                                    
                                       H
                                       c
                                    
                                 
                                 ≤
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                    
                                    t
                                 
                                 
                                    x
                                    
                                       c
                                       ,
                                       i
                                    
                                 
                                 ≤
                                 
                                    
                                       
                                          U
                                          
                                             c
                                             ,
                                             t
                                             +
                                             1
                                          
                                       
                                       −
                                       
                                          L
                                          
                                             c
                                             ,
                                             1
                                          
                                       
                                       +
                                       
                                          ∑
                                          
                                             i
                                             =
                                             1
                                          
                                          t
                                       
                                       
                                          D
                                          
                                             c
                                             ,
                                             i
                                          
                                       
                                    
                                    
                                       H
                                       c
                                    
                                 
                              
                           
                        
                     Since the sum 
                        
                           
                              ∑
                              
                                 i
                                 =
                                 1
                              
                              t
                           
                           
                              x
                              
                                 c
                                 ,
                                 i
                              
                           
                        
                      is an integer between 0 and t we obtain the following simple condition

                        
                           (7)
                           
                              
                                 
                                    
                                       
                                          
                                             A
                                             
                                                c
                                                ,
                                                t
                                             
                                             ′
                                          
                                          ≤
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             t
                                          
                                          
                                             x
                                             
                                                c
                                                ,
                                                i
                                             
                                          
                                          ≤
                                          
                                             B
                                             
                                                c
                                                ,
                                                t
                                             
                                             ′
                                          
                                          
                                          for
                                          
                                          c
                                          ∈
                                          C
                                          ,
                                          t
                                          ∈
                                          T
                                       
                                    
                                 
                              
                           
                        
                     where

                        
                           (8)
                           
                              
                                 
                                    
                                       
                                          A
                                          
                                             c
                                             ,
                                             t
                                          
                                          ′
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          max
                                          
                                             {
                                             0
                                             ,
                                             
                                                ⌈
                                                
                                                   
                                                      
                                                         L
                                                         
                                                            c
                                                            ,
                                                            t
                                                            +
                                                            1
                                                         
                                                      
                                                      −
                                                      
                                                         L
                                                         
                                                            c
                                                            ,
                                                            1
                                                         
                                                      
                                                      +
                                                      
                                                         ∑
                                                         
                                                            i
                                                            =
                                                            1
                                                         
                                                         t
                                                      
                                                      
                                                         D
                                                         
                                                            c
                                                            ,
                                                            i
                                                         
                                                      
                                                   
                                                   
                                                      H
                                                      c
                                                   
                                                
                                                ⌉
                                             
                                             }
                                          
                                          ,
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (9)
                           
                              
                                 
                                    
                                       
                                          
                                             [
                                             3
                                             p
                                             t
                                             ]
                                          
                                          
                                             B
                                             
                                                c
                                                ,
                                                t
                                             
                                             ′
                                          
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          min
                                          
                                             {
                                             t
                                             ,
                                             
                                                ⌊
                                                
                                                   
                                                      
                                                         U
                                                         
                                                            c
                                                            ,
                                                            t
                                                            +
                                                            1
                                                         
                                                      
                                                      −
                                                      
                                                         L
                                                         
                                                            c
                                                            ,
                                                            1
                                                         
                                                      
                                                      +
                                                      
                                                         ∑
                                                         
                                                            i
                                                            =
                                                            1
                                                         
                                                         t
                                                      
                                                      
                                                         D
                                                         
                                                            c
                                                            ,
                                                            i
                                                         
                                                      
                                                   
                                                   
                                                      H
                                                      c
                                                   
                                                
                                                ⌋
                                             
                                             }
                                          
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                  

The values of 
                        
                           A
                           
                              c
                              ,
                              t
                           
                           ′
                        
                      and 
                        
                           B
                           
                              c
                              ,
                              t
                           
                           ′
                        
                      for all 
                        
                           c
                           ∈
                           C
                        
                      and 
                        
                           t
                           ∈
                           T
                        
                      can be easily computed in time 
                        
                           O
                           (
                           C
                           T
                           )
                        
                     . In the rest of this section we study properties of sequences 
                        
                           
                              A
                              
                                 c
                                 ,
                                 1
                              
                              ′
                           
                           ,
                           ⋯
                           ,
                           
                              A
                              
                                 c
                                 ,
                                 T
                              
                              ′
                           
                        
                      and 
                        
                           
                              B
                              
                                 c
                                 ,
                                 1
                              
                              ′
                           
                           ,
                           ⋯
                           ,
                           
                              B
                              
                                 c
                                 ,
                                 T
                              
                              ′
                           
                        
                      which are shortly denoted by 
                        
                           
                              (
                              
                                 A
                                 
                                    c
                                    ,
                                    t
                                 
                                 ′
                              
                              )
                           
                           t
                        
                      and 
                        
                           
                              
                                 (
                                 
                                    B
                                    
                                       c
                                       ,
                                       t
                                    
                                    ′
                                 
                                 )
                              
                              t
                           
                           ,
                        
                      respectively.

Observe that the sequence of partial sums 
                        
                           
                              ∑
                              
                                 i
                                 =
                                 1
                              
                              t
                           
                           
                              x
                              
                                 c
                                 ,
                                 i
                              
                           
                        
                      for t = 1, …, T is non-decreasing and the difference of two consecutive elements is at most 1. We say that a sequence (Zt
                     )
                        t
                      of T integers satisfies (10) if

                        
                           (10)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             Z
                                             1
                                          
                                          ∈
                                          
                                             {
                                             0
                                             ,
                                             1
                                             }
                                          
                                          ,
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             Z
                                             t
                                          
                                          ≤
                                          
                                             Z
                                             
                                                t
                                                +
                                                1
                                             
                                          
                                          ≤
                                          
                                             Z
                                             t
                                          
                                          +
                                          1
                                          
                                          for
                                          
                                          all
                                          
                                          t
                                          =
                                          1
                                          ,
                                          …
                                          ,
                                          T
                                          −
                                          1
                                          .
                                       
                                    
                                 
                              
                           
                        
                     We show that we can replace parameters 
                        
                           A
                           
                              c
                              ,
                              t
                           
                           ′
                        
                      and 
                        
                           B
                           
                              c
                              ,
                              t
                           
                           ′
                        
                      by parameters A
                     
                        c, t
                      and B
                     
                        c, t
                      in such a way that sequences (A
                     
                        c, t
                     )
                        t
                      and (B
                     
                        c, t
                     )
                        t
                      satisfy (10) and binary variables x
                     
                        c, t
                      satisfy (7) if and only if they satisfy

                        
                           (11)
                           
                              
                                 
                                    
                                       
                                          
                                             A
                                             
                                                c
                                                ,
                                                t
                                             
                                          
                                          ≤
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             t
                                          
                                          
                                             x
                                             
                                                c
                                                ,
                                                i
                                             
                                          
                                          ≤
                                          
                                             B
                                             
                                                c
                                                ,
                                                t
                                             
                                          
                                          
                                          for
                                          
                                          c
                                          ∈
                                          C
                                          ,
                                          t
                                          ∈
                                          T
                                          .
                                       
                                    
                                 
                              
                           
                        
                     We present an algorithmic approach to obtain the required sequences (A
                     
                        c, t
                     )
                        t
                      and (B
                     
                        c, t
                     )
                        t
                     . Hereby, we process the heating systems 
                        C
                      one by one. Throughout this approach, binary variables x
                     
                        c, t
                      satisfy (7) if and only if they satisfy (11). In the end of the approach, sequences (A
                     
                        c, t
                     )
                        t
                      and (B
                     
                        c, t
                     )
                        t
                      satisfy (10). We start by setting 
                        
                           
                              A
                              
                                 c
                                 ,
                                 t
                              
                           
                           =
                           
                              A
                              
                                 c
                                 ,
                                 t
                              
                              ′
                           
                        
                      and 
                        
                           
                              B
                              
                                 c
                                 ,
                                 t
                              
                           
                           =
                           
                              B
                              
                                 c
                                 ,
                                 t
                              
                              ′
                           
                        
                      for all 
                        
                           t
                           ∈
                           T
                        
                     .

We first process the sequence (A
                     
                        c, t
                     )
                        t
                     . Note that if demand D
                     
                        c, t + 1 is negative or the upper bound (U
                     
                        c, t
                     )
                        t
                      is not constant over time, then it can happen that A
                     
                        c, t
                      > A
                     
                        c, t + 1. However, the sum 
                        
                           
                              ∑
                              
                                 i
                                 =
                                 1
                              
                              t
                           
                           
                              x
                              
                                 c
                                 ,
                                 t
                              
                           
                        
                      cannot be greater than 
                        
                           
                              ∑
                              
                                 i
                                 =
                                 1
                              
                              
                                 t
                                 +
                                 1
                              
                           
                           
                              x
                              
                                 c
                                 ,
                                 t
                              
                           
                           ,
                        
                      so in this case we can replace the value of A
                     
                        c, t + 1 by A
                     
                        c, t
                     . Next note, that if demand D
                     
                        c, t + 1 is greater than production Hc
                      or (U
                     
                        c, t
                     )
                        t
                      is not constant over time, then it can happen that A
                     
                        c, t + 1 ≥ A
                     
                        c, t
                      + 2. Since the state of charge of the buffer needs to be prepared for this large demand, the sum 
                        
                           
                              ∑
                              
                                 i
                                 =
                                 1
                              
                              t
                           
                           
                              x
                              
                                 c
                                 ,
                                 t
                              
                           
                        
                      has to be at least A
                     
                        c, t + 1 − 1, meaning that we can replace the value of A
                     
                        c, t
                      by A
                     
                        c, t + 1 − 1. We iteratively correct the sequence (A
                     
                        c, t
                     )
                        t
                      until there is no t such that A
                     
                        c, t
                      > A
                     
                        c, t + 1 or A
                     
                        c, t + 1 ≥ A
                     
                        c, t
                      + 2. Then, the sequence (A
                     
                        c, t
                     )
                        t
                      satisfies (10). Note that one change of a value A
                     
                        c, t
                      may enforce many other changes but all those changes can be processed in linear time.

In an analogous way, we can obtain B
                     
                        c, t
                      from 
                        
                           B
                           
                              c
                              ,
                              t
                           
                           ′
                        
                     . If B
                     
                        c, t
                      > B
                     
                        c, t + 1, then we replace B
                     
                        c, t
                      by B
                     
                        c, t + 1. If B
                     
                        c, t + 1 ≥ B
                     
                        c, t
                      + 2, then we replace B
                     
                        c, t + 1 by B
                     
                        c, t
                      + 1.

The preprocessing presented above gives us a simple system to answer the natural question whether a feasible solution satisfying constraints (1), (2) and (3) exists. It is now easy to see that there exists binary x
                     
                        c, t
                      satisfying (11) if and only if A
                     
                        c, t
                      ≤ B
                     
                        c, t
                      for every 
                        
                           c
                           ∈
                           C
                        
                      and 
                        
                           t
                           ∈
                           T
                        
                     . Obviously, this condition is necessary. The condition is also sufficient, since in this case x
                     
                        c, 1 = A
                     
                        c, 1 and x
                     
                        c, t
                      = A
                     
                        c, t
                      − A
                     
                        c, t − 1 for t = 2, …, T gives a feasible solution.

It may be interesting to notice that all changes presented in this section are essentially based on Gomory–Chvátal cutting planes (Cook et al., 1997) which may speed up branch-and-bound. Our experiments show that those changes decrease computation time if Integer Linear Programming solvers are used to find the minimal peak.

In this section we present dynamic programming algorithms for minimizing cost and minimizing peak. The classical dynamic programming algorithm (Cormen et al., 2001) for minimizing cost is used and it is presented here for completeness and for easier understanding of the dynamic programming algorithm for minimizing peak. Those two algorithms are similar, so we first describe both algorithms together and then we determine their time complexity.

The substantial reason why minimizing cost is polynomial is that every heating system can be solved separately because there is no mutual restriction between the variables of different heating systems. Therefore, feasible solutions of the different heating systems can be joined to achieve a feasible solution of the whole model and vice versa. Furthermore, the sum of costs of the separate solutions of all heating systems equals the total cost of the whole model. Hence, an optimal solution of the whole model can be composed from optimal solutions of the separated heating systems. The main concern is to describe a polynomial time algorithm for minimizing cost of a single heating system. The problem of minimizing cost of a single heating system 
                        
                           c
                           ∈
                           C
                        
                      is given as

                        
                           
                              
                                 
                                    
                                       Minimize
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                t
                                                ∈
                                                T
                                             
                                          
                                          
                                             P
                                             
                                                c
                                                ,
                                                t
                                             
                                          
                                          
                                             x
                                             
                                                c
                                                ,
                                                t
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          such
                                          
                                          that
                                       
                                    
                                    
                                       
                                          
                                             A
                                             
                                                c
                                                ,
                                                t
                                             
                                          
                                          ≤
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             t
                                          
                                          
                                             x
                                             
                                                c
                                                ,
                                                i
                                             
                                          
                                          ≤
                                          
                                             B
                                             
                                                c
                                                ,
                                                t
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                          for
                                          
                                          
                                          t
                                          ∈
                                          T
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             x
                                             
                                                c
                                                ,
                                                t
                                             
                                          
                                          ∈
                                          
                                             {
                                             0
                                             ,
                                             1
                                             }
                                          
                                       
                                    
                                    
                                       
                                          
                                          for
                                          
                                          
                                          t
                                          ∈
                                          T
                                          .
                                       
                                    
                                 
                              
                           
                        
                     Note that the amount of consumed electricity Ec
                      by the converter c is not important.

We describe a simple dynamic programming algorithm for this problem which is in its base similar to dynamic programs for special lot-sizing problems. The algorithm uses a function f(t, n) which denotes the minimal cost of energy for time intervals 1, …, t if the converter is running exactly n times during those intervals and constraint (11) is satisfied. The dynamic programming is based on the recursive formula

                        
                           (12)
                           
                              
                                 f
                                 
                                    (
                                    t
                                    ,
                                    n
                                    )
                                 
                                 =
                                 
                                    {
                                    
                                       
                                          
                                             
                                                min
                                                
                                                   {
                                                   f
                                                   
                                                      (
                                                      t
                                                      −
                                                      1
                                                      ,
                                                      n
                                                      )
                                                   
                                                   ,
                                                   f
                                                   
                                                      (
                                                      t
                                                      −
                                                      1
                                                      ,
                                                      n
                                                      −
                                                      1
                                                      )
                                                   
                                                   +
                                                   
                                                      P
                                                      t
                                                   
                                                   }
                                                
                                             
                                          
                                          
                                             
                                                if
                                                
                                                t
                                                ∈
                                                T
                                                
                                                and
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                             
                                                
                                                
                                                   A
                                                   
                                                      c
                                                      ,
                                                      t
                                                   
                                                
                                                ≤
                                                n
                                                ≤
                                                
                                                   B
                                                   
                                                      c
                                                      ,
                                                      t
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                             0
                                          
                                          
                                             
                                                if
                                                
                                                t
                                                =
                                                n
                                                =
                                                0
                                             
                                          
                                       
                                       
                                          
                                             ∞
                                          
                                          
                                             otherwise.
                                          
                                       
                                    
                                 
                              
                           
                        
                     The term f(t − 1, n) represents the case that it is possible to turn off the converter in the time interval t. The term f(t − 1, n − 1) + Pt
                      represents the case that the converter is turned on and we have to pay for electricity in the time interval t. The initial conditions for this recurrence are f(0, 0) = 0 and f(n, t) = ∞ if the converter cannot run n times during the first t time intervals (e.g. the term n − 1 in the recursive formula can be negative).

In the following, we present the algorithm for minimizing peak. The algorithm uses a similar state space as above. Each state is determined by a time interval t and numbers nc
                      giving the number of runs of the converters 
                        
                           c
                           ∈
                           C
                        
                      up to time interval t. We use a recursive formula similar to (12) and the boundary condition (11) for every heating system.

Formally, a state is a pair 
                        
                           (
                           t
                           ,
                           
                              n
                              →
                           
                           )
                        
                      where t is a time interval and 
                        
                           
                              n
                              →
                           
                           =
                           
                              (
                              
                                 n
                                 1
                              
                              ,
                              …
                              ,
                              
                                 n
                                 C
                              
                              )
                           
                        
                      is a vector where nc
                      is the number of runs of a converter c ∈ {1, …, C} up to time interval t. Note that a state is feasible if

                        
                           (13)
                           
                              
                                 
                                    A
                                    
                                       c
                                       ,
                                       t
                                    
                                 
                                 ≤
                                 
                                    n
                                    c
                                 
                                 ≤
                                 
                                    B
                                    
                                       c
                                       ,
                                       t
                                    
                                 
                                 
                                 for
                                 
                                 all
                                 
                                 c
                                 ∈
                                 C
                              
                           
                        
                     which means that condition (11) is satisfied for all 
                        
                           c
                           ∈
                           C
                        
                     . We introduce a function 
                        
                           F
                           (
                           t
                           ,
                           
                              n
                              →
                           
                           )
                        
                      which denotes the minimal peak during time intervals 1, …, t if the converter c runs exactly nc
                     -times during intervals 1, …, t for every 
                        
                           c
                           ∈
                           C
                        
                     . The function F is determined by the recursive function

                        
                           (14)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          F
                                          (
                                          t
                                          ,
                                          
                                             n
                                             →
                                          
                                          )
                                          =
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          {
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            min
                                                            
                                                               
                                                                  y
                                                                  →
                                                               
                                                               ∈
                                                               
                                                                  
                                                                     {
                                                                     0
                                                                     ,
                                                                     1
                                                                     }
                                                                  
                                                                  C
                                                               
                                                            
                                                         
                                                         max
                                                         
                                                            {
                                                            
                                                               ∑
                                                               
                                                                  c
                                                                  ∈
                                                                  C
                                                               
                                                            
                                                            
                                                               E
                                                               c
                                                            
                                                            
                                                               y
                                                               c
                                                            
                                                            ,
                                                            
                                                            F
                                                            
                                                               (
                                                               t
                                                               −
                                                               1
                                                               ,
                                                               
                                                                  n
                                                                  →
                                                               
                                                               −
                                                               
                                                                  y
                                                                  →
                                                               
                                                               )
                                                            
                                                            }
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                      if
                                                      
                                                      t
                                                      ∈
                                                      T
                                                      
                                                      and
                                                      
                                                      (13)
                                                      
                                                      holds
                                                   
                                                
                                             
                                             
                                                
                                                   0
                                                
                                                
                                                   
                                                      if
                                                      
                                                      t
                                                      =
                                                      0
                                                      
                                                      and
                                                      
                                                      
                                                         n
                                                         →
                                                      
                                                      =
                                                      
                                                         0
                                                         →
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   ∞
                                                
                                                
                                                   otherwise.
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     where 
                        
                           
                              y
                              →
                           
                           =
                           
                              (
                              
                                 y
                                 1
                              
                              ,
                              ⋯
                              ,
                              
                                 y
                                 C
                              
                              )
                           
                           ∈
                           
                              
                                 {
                                 0
                                 ,
                                 1
                                 }
                              
                              C
                           
                        
                      are all combinations to turn on and turn off converters in time interval t. The initial condition of the recursion are 
                        
                           F
                           (
                           0
                           ,
                           
                              0
                              →
                           
                           )
                           =
                           0
                        
                      and 
                        
                           F
                           (
                           t
                           ,
                           
                              n
                              →
                           
                           )
                        
                      if the state 
                        
                           (
                           t
                           ,
                           
                              n
                              →
                           
                           )
                        
                      is infeasible.

It remains to determine the time complexity of the dynamic programming algorithms. For minimizing cost of a single heating system, formula (12) can be evaluated in constant time. The time complexity depends on the number of pairs (t, n) that satisfies the condition

                        
                           (15)
                           
                              
                                 
                                    A
                                    
                                       c
                                       ,
                                       t
                                    
                                 
                                 ≤
                                 n
                                 ≤
                                 
                                    B
                                    
                                       c
                                       ,
                                       t
                                    
                                 
                                 .
                              
                           
                        
                     For a fixed time t the number of n satisfying (15) can be bounded in two ways. The first way uses constraints 0 ≤ n ≤ t ≤ T which implies that the number of n satisfying (15) is 
                        
                           O
                           (
                           T
                           )
                           ,
                        
                      so the number of pair (t, n) is 
                        
                           O
                           (
                           
                              T
                              2
                           
                           )
                        
                     . Hence, the overall time complexity of the dynamic programming algorithm for minimizing cost for all heating systems is 
                        
                           O
                           (
                           C
                           
                              T
                              2
                           
                           )
                        
                     .

In the second way, we use the fact that number of n satisfying (15) is B
                     
                        c, t
                      − A
                     
                        c, t
                      + 1. In order to estimate the difference B
                     
                        c, t
                      − A
                     
                        c, t
                     , we substitute formula’s (8) and (9) to obtain

                        
                           
                              
                                 
                                    B
                                    
                                       c
                                       ,
                                       t
                                    
                                 
                                 −
                                 
                                    A
                                    
                                       c
                                       ,
                                       t
                                    
                                 
                                 ≤
                                 
                                    B
                                    
                                       c
                                       ,
                                       t
                                    
                                    ′
                                 
                                 −
                                 
                                    A
                                    
                                       c
                                       ,
                                       t
                                    
                                    ′
                                 
                                 ≤
                                 
                                    
                                       
                                          U
                                          
                                             c
                                             ,
                                             t
                                             +
                                             1
                                          
                                       
                                       −
                                       
                                          L
                                          
                                             c
                                             ,
                                             t
                                             +
                                             1
                                          
                                       
                                    
                                    
                                       H
                                       c
                                    
                                 
                                 .
                              
                           
                        
                     Using this estimate we can upper bound the number of n satisfying (15) by Rc
                      which is given by

                        
                           
                              
                                 
                                    R
                                    c
                                 
                                 =
                                 
                                    max
                                    
                                       t
                                       ∈
                                       T
                                    
                                 
                                 
                                    ⌊
                                    
                                       
                                          
                                             U
                                             
                                                c
                                                ,
                                                t
                                                +
                                                1
                                             
                                          
                                          −
                                          
                                             L
                                             
                                                c
                                                ,
                                                t
                                                +
                                                1
                                             
                                          
                                       
                                       
                                          H
                                          c
                                       
                                    
                                    ⌋
                                 
                                 +
                                 1
                                 .
                              
                           
                        
                     Therefore, time complexity of the dynamic programming algorithm for minimizing cost of a single heating system 
                        
                           c
                           ∈
                           C
                        
                      is 
                        
                           O
                           (
                           T
                           min
                           
                              {
                              T
                              ,
                              
                                 R
                                 c
                              
                              }
                           
                           )
                        
                      and time complexity for whole model is 
                        
                           O
                           (
                           T
                           C
                           min
                           
                              {
                              T
                              ,
                              R
                              }
                           
                           )
                        
                      where 
                        
                           R
                           =
                           
                              max
                              
                                 c
                                 ∈
                                 C
                              
                           
                           
                              R
                              c
                           
                        
                     .

Similarly in the algorithm for minimizing peak, we have at most RC
                      states for every time interval t, so the total number of states is at most RCT. The complexity of evaluation the recursive formula for one state is 
                        
                           O
                           (
                           
                              2
                              C
                           
                           )
                           ,
                        
                      thus the total time complexity of this dynamic programming algorithm is 
                        
                           O
                           (
                           
                              
                                 (
                                 2
                                 R
                                 )
                              
                              C
                           
                           ·
                           T
                           )
                        
                     . Therefore, the algorithm is linear in the number of time intervals T if the number of heating systems C and the ratio R are fixed. In summary, the algorithm is FPT algorithm where the fixed parameters are C and R.

In this section we consider the special case of the problem of minimizing peak where all converters have the same consumption. This essentially means that the objective is minimizing the maximal number of simultaneously running converters. Furthermore, it is sufficient to solve the decision problem whether there exists a feasible planning of all converters such that at most M converters are running in every time interval for given M. Based on that, we can find the optimal value of M by binary search in at most log (C) steps. In this section, we present a polynomial time algorithm which decides whether there exists x
                     
                        c, t
                      ∈ {0, 1} for 
                        
                           t
                           ∈
                           T
                        
                      and 
                        
                           c
                           ∈
                           C
                        
                      such that

                        
                           (16)
                           
                              
                                 
                                    
                                       
                                          
                                             ∑
                                             
                                                c
                                                ∈
                                                C
                                             
                                          
                                          
                                             x
                                             
                                                c
                                                ,
                                                t
                                             
                                          
                                          ≤
                                          M
                                       
                                    
                                    
                                       
                                          
                                          for
                                          
                                          t
                                          ∈
                                          T
                                          
                                          and
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             A
                                             
                                                c
                                                ,
                                                t
                                             
                                          
                                          ≤
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             t
                                          
                                          
                                             x
                                             
                                                c
                                                ,
                                                i
                                             
                                          
                                          ≤
                                          
                                             B
                                             
                                                c
                                                ,
                                                t
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                          for
                                          
                                          c
                                          ∈
                                          C
                                          ,
                                          t
                                          ∈
                                          T
                                       
                                    
                                 
                              
                           
                        
                     holds. We reformulate this problem as a job scheduling and a network flow problem.

We assume that sequences (A
                     
                        c, t
                     )
                        t
                      and (B
                     
                        c, t
                     )
                        t
                      satisfy (10). Observe that if there exists x
                     
                        c, t
                      satisfying (16), then there exists another solution 
                        
                           x
                           
                              c
                              ,
                              t
                           
                           ′
                        
                      satisfying (16) and 
                        
                           
                              ∑
                              
                                 t
                                 ∈
                                 T
                              
                           
                           
                              x
                              
                                 c
                                 ,
                                 t
                              
                              ′
                           
                           =
                           
                              A
                              
                                 c
                                 ,
                                 T
                              
                           
                        
                     . So, we can decrease the upper bound B
                     
                        c, t
                      to min {B
                     
                        c, t
                     , A
                     
                        c, T
                     } without influencing feasibility of (16). Therefore, without loss of generality we also assume that A
                     
                        c, T
                      = B
                     
                        c, T
                     .

Now, we reformulate our decision problem as a job scheduling problem. For every heating system c we introduce A
                     
                        c, T
                      jobs. Each job is a pair (c, j) where 
                        
                           c
                           ∈
                           C
                        
                      is a heating system and j ∈ {1, …, A
                     
                        c, T
                     } denotes one of the A
                     
                        c, T
                      runs of the converter c. The aim is to assign a time interval z
                     
                        c, j
                      for every job (c, j), meaning that {z
                     
                        c, j
                      ; j = 1, …, A
                     
                        c, T
                     } is the set of time intervals in which converter c is running. As two jobs of the same converter cannot be assigned to the same time interval, the sequence 
                        
                           
                              (
                              
                                 z
                                 
                                    c
                                    ,
                                    j
                                 
                              
                              )
                           
                           
                              j
                              =
                              1
                           
                           
                              A
                              
                                 c
                                 ,
                                 T
                              
                           
                        
                      is assumed to be increasing which means that jobs of every heating system have a chain dependency.

In order to satisfy the upper bounds of a buffer c we introduce a release time r
                     
                        c, j
                      for every job (c, j) which is the minimal t such that B
                     
                        c, t
                      = j. Similarly for the lower bound, we introduce a deadline d
                     
                        c, j
                      for every job (c, j) which is the minimal t such that A
                     
                        c, t
                      = j. Since at most M converters can be running in every time interval, jobs have to be scheduled on M parallel machines. Note that all jobs have unit processing time and all parallel machines are identical.

This problem can be solved using the more general scheduling problem Pm
                     |ri, pi
                      = 1, chains|L
                     max . Dror et al. (1998) established that Pm
                     |ri, pi
                      = 1, chains|L
                     max  can be solved in polynomial time. For completeness of the paper, we present the reduction of the problem of minimizing peak into a network flow problem. This reduction is based on a construction presented by Baptiste et al. (2004) who consider the problem Pm
                     |ri, pi
                      = 1, chains|∑fi
                     .

The network consists of vertices of five types. First, the network has one source vertex v
                     1. Second, every job (c, j) has one vertex 
                        
                           v
                           
                              c
                              ,
                              j
                           
                           2
                        
                     . Third, for every heating system c and time t the network has one vertex 
                        
                           v
                           
                              c
                              ,
                              t
                           
                           3
                        
                     . Fourth, every time t has one vertex 
                        
                           v
                           t
                           4
                        
                     . Fifth, the network has one sink vertex v
                     5.

The network consists of oriented edges of four types. First, the source vertex v
                     1 is connected to every job vertex 
                        
                           v
                           
                              c
                              ,
                              j
                           
                           2
                        
                     . Second, every job vertex 
                        
                           v
                           
                              c
                              ,
                              j
                           
                           2
                        
                      is connected to a vertex 
                        
                           v
                           
                              c
                              ,
                              t
                           
                           3
                        
                      if job (c, j) can be processed in time t; that is r
                     
                        c, j
                      ≤ t ≤ d
                     
                        c, j
                     . Third, every vertex 
                        
                           v
                           
                              c
                              ,
                              t
                           
                           3
                        
                      is connected to the time vertex 
                        
                           v
                           t
                           4
                        
                     . Fourth, every time vertex 
                        
                           v
                           t
                           4
                        
                      is connected to the sink v
                     5. The capacity of edges from time vertices to the sink is M and other edges have capacity 1. The decision problem in this network is whether there exists flow from the source to the sink of size 
                        
                           
                              ∑
                              
                                 c
                                 ∈
                                 C
                              
                           
                           
                              A
                              
                                 c
                                 ,
                                 T
                              
                           
                        
                      which is the total number of jobs.

We describe the correspondence between flow in the network and assignments of jobs to machines. The supply in the sink equals to the total number of jobs, so every edge from the source has to be saturated in a desired flow. A job (c, j) runs in time t if the edge from job vertex 
                        
                           v
                           
                              c
                              ,
                              j
                           
                           2
                        
                      to the vertex 
                        
                           v
                           
                              c
                              ,
                              t
                           
                           3
                        
                      is saturated. Since job vertex 
                        
                           v
                           
                              c
                              ,
                              j
                           
                           2
                        
                      has exactly one saturated incoming edge, every job has to be assigned to exactly one time t. Since every vertex 
                        
                           v
                           
                              c
                              ,
                              t
                           
                           3
                        
                      has exactly one outgoing edge, at most one incoming edge can be saturated, so two jobs of the same heating system cannot be assigned to the same time interval. Hence, every machine c is processing at most one job in every time interval. Every time vertex 
                        
                           v
                           t
                           4
                        
                      has at most M saturated incoming edges since it has exactly one outgoing edge which has capacity M. Hence, at most M converters are running in every time interval.

Since the number of vertices of the network flow instance is 
                        
                           O
                           (
                           C
                           T
                           )
                           ,
                        
                      the problem of minimizing peak for converters with equal consumption is polynomially solvable. Note that we can assign different capacities to edges from time vertices 
                        
                           v
                           t
                           4
                        
                      to the sink v
                     5 which can be useful in practice to fulfill a given electrical profile.

@&#CONCLUSION@&#

This paper investigates the complexity of minimizing peak and minimizing cost for a heating problem for a group of heating systems. We prove that minimizing peak is strongly NP-hard in general and it remains NP-hard if the number of time intervals T is fixed and at least two. On the other hand, minimizing peak becomes polynomial if the number of heating systems C and parameters of buffers and converters are fixed. The time complexity of our dynamic programming algorithm is 
                        
                           O
                           (
                           
                              
                                 (
                                 2
                                 R
                                 )
                              
                              C
                           
                           ·
                           T
                           )
                        
                      where R is a ratio between the capacity of a buffer and the production of a converter. However, in practical study cases, different lengths of the time intervals may be of interest. Since shortening a time interval decreases the production of heat by the converter, the ratio R is increased, and thus the time complexity of our algorithm is strongly influenced by the change of the lengths of the time intervals. Therefore, it would be better to have an algorithm for minimizing peak which is polynomial in T and whose multiplicative constant depends only on C. We are especially interested whether there exists an algorithm whose time complexity is 
                        
                           O
                           (
                           
                              D
                              C
                           
                           ·
                           T
                           )
                        
                      where D is a constant.

In contrast to minimizing peak, we prove that minimizing cost is polynomially solvable by a dynamic programming algorithm of running time 
                        
                           O
                           (
                           R
                           T
                           C
                           )
                        
                      which can also be bounded by 
                        
                           O
                           (
                           
                              T
                              2
                           
                           C
                           )
                        
                     . Algorithms for minimizing cost are important for cost and auction base control of Smart Grids (Molderink et al., 2010). This leaves an interesting open problem whether there exists faster algorithm for minimizing cost of a single heating system than the dynamic programming algorithm presented in this paper. Finally, note that practical converters may have more operation modes (Toersche et al., 2012). The presented dynamic programming algorithm can be adopted for such a situation, but the computation time is increased, so faster algorithms would also be useful in this case.

@&#ACKNOWLEDGMENT@&#

This research is conducted within the iCare project (11854) supported by Technology Foundation STW. We would like to thank the anonymous referees for their helpful comments.

@&#REFERENCES@&#

