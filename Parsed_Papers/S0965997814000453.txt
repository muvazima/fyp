@&#MAIN-TITLE@&#Decentralized fault detection and isolation in wireless structural health monitoring systems using analytical redundancy

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Design and prototype implementation of a fault-tolerant SHM system.


                        
                        
                           
                           Various sensor faults can be detected autonomously.


                        
                        
                           
                           Analytical redundancy for detecting and isolating sensor faults in real time.


                        
                        
                           
                           Fully decentralized approach, as opposed to traditional strategies.


                        
                        
                           
                           Laboratory experiments for validating the prototype SHM system.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Fault detection and isolation

Structural health monitoring

Wireless sensing

Smart structures

Analytical redundancy

Artificial neural networks

@&#ABSTRACT@&#


               
               
                  One of the most critical issues when deploying wireless sensor networks for long-term structural health monitoring (SHM) is the correct and reliable operation of sensors. Sensor faults may reduce the quality of monitoring and, if remaining undetected, might cause significant economic loss due to inaccurate or missing sensor data required for structural assessment and life-cycle management of the monitored structure. This paper presents a fully decentralized approach towards autonomous sensor fault detection and isolation in wireless SHM systems. Instead of physically installing multiple redundant sensors in the monitored structure (“physical redundancy”), which would involve substantial penalties in cost and maintainability, the information inherent in the SHM system is used for fault detection and isolation (“analytical redundancy”). Unlike traditional centralized approaches, the analytical redundancy approach is implemented distributively: Partial models of the wireless SHM system, implemented in terms of artificial neural networks in an object-oriented fashion, are embedded into the wireless sensor nodes deployed for monitoring. In this paper, the design and the prototype implementation of a wireless SHM system capable of autonomously detecting and isolating various types of sensor faults are shown. In laboratory experiments, the prototype SHM system is validated by injecting faults into the wireless sensor nodes while being deployed on a test structure. The paper concludes with a discussion of the results and an outlook on possible future research directions.
               
            

@&#INTRODUCTION@&#

The continuing progress in structural health monitoring (SHM) and wireless sensing technologies has led to prolonged periods of time wireless SHM systems are able to operate autonomously [1,2]. As a consequence, wireless SHM systems, if permanently installed on large-scale engineering structures such as bridges, dams, towers or wind turbines, require sensors operating correctly and precisely over long periods of time. However, when being deployed over extended time periods, sensors are increasingly exposed to harsh environmental conditions as well as ageing and degradation that may cause less accurate sensor data or even sensor faults. It is evident that wireless SHM systems deployed for long-term structural health monitoring require continuous performance monitoring and calibration of the sensors. Monitoring and calibration, in common practice scheduled on a periodic basis, are typically conducted manually within maintenance trips to remote monitoring sites, which are time-consuming and costly. Due to a lack of knowledge about actual sensor conditions, the sensors deployed in wireless SHM systems are usually maintained and calibrated regardless of their performance, causing further maintenance costs and decreased monitoring quality owing to unnecessary and inaccurate sensor calibrations and undetected sensor faults.

To ensure a high quality of monitoring and to reduce maintenance costs, it is essential to continuously monitor the quality of sensor data and to automatically detect and isolate sensor faults. Although much progress has been made in developing intelligent SHM systems [3–6] and structural control systems [7,8], undetected faults still remain an open problem posing substantial challenges in SHM research [9]. Faults in wireless SHM systems can have several reasons, for example malfunctioning hardware, bugs in the software embedded into the wireless sensor nodes, harsh weather conditions, or environmental hazards. While some faults in wireless SHM systems might be easy to detect – for example if sensor data is missing – other faults might be more subtle, e.g. if caused by small sensor drifts. In general, a fault can be defined as a defect that leads to an error, and an error corresponds to an incorrect system state that may result in a failure 
                     [10]. A sensor fault, if not being detected and isolated, can propagate throughout the entire SHM system causing severe failures that may degrade the overall system performance or even cause a total system malfunction [11,12]. Sensor failures, in general, can be categorized into hard failures and soft failures [13]. Hard failures are, for example, large bias failures that occur instantaneously, and soft failures are small biases or drifts that accumulate relatively slowly over time.

Fault diagnosis, according to [14], can be described as a process that includes (i) fault detection, (ii) fault isolation, (iii) fault identification, and (iv) fault accommodation. It should be noted that unstructured uncertainties, process noise, and measurement noise is usually outside the scope of fault diagnosis. This paper focuses on the area of fault detection and isolation (FDI). The concept of FDI has widely been studied in computer science for several years [15,16], and numerous approaches towards FDI have been proposed including, e.g., model-based approaches, knowledge-based approaches, or a combination of both [14,17–19]. More recently, FDI concepts have also been successfully implemented in a number of engineering disciplines, such as aerospace engineering, mechanical engineering and electrical engineering, to improve the availability and reliability of distributed engineering systems [20–22]. However, the investigation of fault detection and isolation in wireless SHM systems has received little attention.

This paper presents a decentralized approach towards fault detection and isolation in wireless SHM systems. Implementing the analytical redundancy approach, neural networks are embedded into the wireless sensor nodes installed in the monitored structure enabling each sensor node autonomously detecting and isolating sensor faults in real time. The paper is organized as follows. First, background information on FDI concepts is given. Then, the design and prototype implementation of a wireless SHM system capable of fault detection and isolation, with strong emphasis on the embedded neural network approach, is described. Next, laboratory experiments are presented that are devised to validate the performance of the wireless SHM system. For the laboratory experiments, the prototype SHM system is installed on a test structure, and sensor data obtained during normal (i.e. non-faulty) system operation is used to train the fault diagnosis capabilities of the SHM system. Thereupon, faults are injected into the wireless sensor nodes to validate the system’s capabilities to autonomously detect and isolate sensor faults. The paper concludes with a discussion of the results and an outlook on possible future research directions.

Traditionally, a key technique towards fault detection and isolation in distributed systems is the multiplication, i.e. the redundant installation of hardware components such as sensors, data acquisition units or computers (“physical redundancy”). For example, for measuring one single parameter of interest, multiple sensors are physically deployed. To make a decision whether one of the observed sensors is faulty, the outputs of the redundant sensors are compared using decision rules that are commonly based on simple majority voting logics [23]. However, physical redundancy involves substantial penalties in cost and maintainability because multiple hardware components must be installed in the monitored structure. Moreover, voting assumes independent faults, and sensors operating in the same environment can hardly be considered independent. Overcoming these problems, the concept of “analytical redundancy” has emerged, fostered by the rapid advancements in computer science and information technology [14].

Instead of physically installing multiple sensors for measuring one single parameter, analytical redundancy takes advantage of the redundant information inherent in the observed SHM system and utilizes the coherences and relationships between the sensors regularly installed [18]. Analytical redundancy, when applied for fault detection and isolation in wireless SHM systems, has tremendous potential to reduce system costs and power consumption of wireless sensor nodes while substantially increasing availability, reliability, safety and maintainability of the SHM system. For each observed sensor, virtual sensor outputs representing non-faulty operation are predicted based on measured outputs of correlated sensors and on a priori knowledge about the system. Comparing actual and virtual sensor outputs, residuals are generated for each sensor. The residuals, reflecting inconsistencies between the actual sensor behavior and the model-based, virtual sensor behavior, serve as the basis for decision making with respect to potential sensor faults.

As opposed to physical redundancy, which often uses simple voting logics to determine faulty sensors, analytical redundancy employs mathematical models of the observed decentralized (SHM) system for mapping the inherent redundancy contained in the system. The mathematical models used to generate the diagnostic residuals between actual and virtual sensor outputs can be either first-principle models derived analytically or black box models obtained empirically. To estimate the virtual sensor outputs as precisely as possible and to correctly interpret the residuals between actual and virtual sensor outputs, analytical redundancy, compared to physical redundancy, requires more sophisticated information processing techniques. For estimating virtual sensor outputs and for generating the residuals, several techniques have been proposed in related disciplines. Widely used and well accepted approaches include, e.g., estimation filters, band-limiting filters as well as innovation testing based on Kalman filters, threshold logic, and generalized likelihood ratio testing. Among the most efficient approaches for estimating virtual sensor outputs is the application of artificial neural networks, because neural networks are capable to accurately model non-linear and dynamic decentralized systems (such as wireless SHM systems) without the need for first-principle models or a priori knowledge about the complex internal structures of the system observed [24]. A plenitude of different types of neural networks has been studied to advance engineering applications in the past decades. On the other hand, due to the efficiency and reliability of such subsymbolic techniques, research in this field is still very active, and new approaches, such as the hierarchical graph neuron (HGN) [25] have emerged and are exploited in different engineering fields in recent years.

Neural networks, consisting of a set of processing units (neurons) and weighted connections between the units, have the ability (i) to find patterns and associations between given input and output values of the network and (ii) to estimate output values based on given input values – even if the input is inaccurate, noisy, or incomplete. During a training phase, a neural network learns from existing relationships, i.e. from given pairs of input and output values, resulting in a non-linear black box model that is applied in a subsequent runtime phase. In the runtime phase, new input values are presented to the neural network, which estimates the corresponding output values by adapting itself to the new inputs. For fault detection and isolation in wireless SHM systems, these distinct strengths of neural networks can advantageously be used to estimate virtual outputs of a sensor based on actual outputs recorded by correlated sensors presented to the neural network as inputs, which results in a precise and robust residual generation [26].

The characteristics of neural networks, particularly the approximation and adaptation capabilities, have led to a plenitude of neural networks applications deployed to achieve analytical redundancy in various types of engineering systems. Examples include fault detection in wind turbine structures [27], aircraft engines [28], fossil-fuel power plants [26], flight control systems [29], unmanned airborne vehicles [30], and robotic systems [31]. However, most of the existing studies tackle the problem of fault detection and isolation with centralized approaches, in which sensor data originating from different sources is first transferred into a centralized repository and then analyzed with respect to anomalies or inconsistencies that might indicate sensor faults. Unfortunately, these centralized approaches bring up further technical issues because of the extensive global communication required and the large amounts of sensor data to be transmitted.

Unlike traditional centralized approaches as described above, the research presented in this paper pursues a full decentralization to achieve reliable, robust and resource-efficient fault detection and isolation in wireless SHM systems. For that purpose, artificial neural networks are embedded into the wireless sensor nodes of the wireless SHM system. Hosting only a few neurons and communicating only with its local neighbors, each wireless sensor node is capable of autonomously detecting and isolating faults of its sensors based on real-time information received from neighboring sensor nodes, while efficiently using the limited computing resources.

The conceptual design essentially involves sensors installed in the monitored structure to continuously measure structural and environmental parameters such as acceleration and temperature data. Each sensor is connected to a wireless sensor node designed to autonomously collect data from the sensors, to locally aggregate the sensor data and – in order to assemble a global picture about the structural condition – to communicate with other sensor nodes and with an Internet-enabled local computer placed near the structure. The local computer is primarily deployed to process and to store the sensor data and to enable further (remote) data processing. In case of potential structural anomalies detected from the sensor data, alerts are autonomously generated by the local computer and sent to the human individuals involved.

For collecting, analyzing and communicating sensor data, modular Java-based software programs, referred to as “SHM modules”, are embedded into the wireless sensor nodes used in this study. In addition to the SHM modules, further software programs, labeled “FDI modules”, are embedded into the wireless sensor nodes for autonomous detection and isolation of sensor faults. In the following subsections, after a general description of the sensor node hardware, the design and the implementation of the FDI modules are presented in detail. For details on the SHM modules, the interested reader is referred to [32–34].

For the prototype implementation of the wireless SHM system, Java-based Oracle SunSPOT sensing units are deployed [35,36]. As opposed to common wireless sensor nodes that are usually implemented in low-level native languages such as C/C++ and assembly language, the sensing units deployed in this study comprise of a fully capable Java ME virtual machine (Connected Limited Device Configuration); the “Squawk” virtual machine ensures a lightweight execution of embedded applications providing several features relevant to FDI, such as garbage collection, thread scheduling, and interrupt handling. Furthermore, whereas most Java virtual machines run a single application, the Squawk virtual machine can run multiple independent applications on one single wireless sensor node. Each application is represented as a Java object being completely isolated from all other applications, which makes Squawk a powerful basis for the prototype implementation of the FDI modules embedded into wireless sensor nodes.

The computational core of the sensing units is an Atmel AT91RM9200 incorporating a 32-bit processor with 16kB instruction and 16kB data cache executing at 180MHz maximum internal clock speed [37]. Included are several peripheral interface units such as USB port, programmable I/O controller and I2C bus. Memory of the sensing units is a Spansion S71PL032J40 with 4MB flash memory and 512kB RAM. For wireless communication, an integrated radio transceiver, the IEEE 802.15.4-compliant Texas Instruments (Chipcon) CC2420 single-chip transceiver is deployed, operating on the 2.4GHz unregulated industrial, scientific and medical (ISM) band. Power supply is provided by an internal, rechargeable lithium-ion battery (3.7V, 720mAh). Each sensor node, besides a number of analog inputs and sensors, comprises of an integrated temperature sensor and a three-axis linear accelerometer. The accelerometer, type LIS3L02AQ manufactured by STMicroelectronics, measures a bandwidth of 4.0kHz in x- and y-axis and 2.5kHz in z-axis over a scale of ±6g [38].

The FDI modules embedded into the wireless sensor nodes integrate two interconnected sub-modules. As illustrated in Fig. 1
                        , each FDI module includes
                           
                              (i)
                              a mathematical model of the SHM system for computing virtual outputs of the observed sensor and

a decision logic for the comparison of actual and virtual sensor outputs required for decision making with respect to faulty or non-faulty sensors.

To illustrate the conceptual design of the FDI modules, a typical SHM system is considered in Fig. 1. The dynamic system, which can be a complete SHM system or a distinct set of sensors being observed, has an input vector x and an output vector z. For a realistic system representation it is important to model all effects that can affect the system, such as sensor faults, modeling errors as well as system and measurement noise. These effects are included in the fault vector f, which is in the fault-free case f
                        =0 and f
                        ≠0 in a faulty case. Further effects that are relevant to fault detection and isolation are summarized in the vector of unknown inputs d. The mathematical system model is implemented based on artificial neural networks that allow modeling non-linear systems and estimating virtual sensor outputs without detailed knowledge about the complex internal structures of the observed SHM system. The system model, using the actual system inputs x, estimates the virtual system outputs 
                           
                              
                                 
                                    z
                                 
                                 
                                    ˆ
                                 
                              
                           
                         representing the outputs of the system in non-faulty operation. The residuals r between actual system outputs z and virtual system outputs 
                           
                              
                                 
                                    z
                                 
                                 
                                    ˆ
                                 
                              
                           
                         are evaluated through the decision logic.

The FDI modules embedded into the wireless sensor nodes are organized in a software package named “fdi_module”, which systematically groups all elements relevant to fault detection and isolation. Fig. 2
                         shows an abbreviated class diagram illustrating the core classes of the “fdi_module” package. The software package shown provides a general framework for constructing different types of neural networks with varying topologies and parameters, i.e. with different numbers of layers, neurons and connections between the neurons as well as several linear and non-linear activation functions for each neuron.

As shown in Fig. 2, the “fdi_module” package includes the classes “SystemModel” and “DecisionLogic” that provide the main functionalities of the FDI module. The “SystemModel” class is designed to estimate virtual sensor outputs based on actual outputs of correlated sensors. For recording real-time sensor data, the “SystemModel” class has access to the sensor node resources, such as the internal accelerometer and the temperature sensor. The “DecisionLogic” class includes methods and attributes for evaluating the diagnostic residuals, and it is capable to communicate the evaluation results by accessing the wireless transceiver of a wireless sensor node. Using adaptive thresholds, the decision logic supports the real-time detection of hard sensor failures, e.g. large biases, as well as soft sensor failures, such as drifts that increase relatively slowly with time.

As shown in Fig. 2, further classes are implemented to ensure a reliable fault detection and isolation. The “NeuralNetwork” class provides the generic structure and functionalities required to run specific instances of a neural network on a wireless sensor node. Technically, a neural network consists of a set of neurons (class “Neuron”), where each neuron j can have i
                        =1,…,
                        n inputs xi
                         and one output zj
                        . The neurons are arranged in layers (class “Layer”) being connected with neurons of other layers through weighted connections (class “Connection”), where
                           
                              •
                              neurons of an input layer receive sensor data from outside the neural network,

neurons of hidden layers, being connected with input and output layers, are responsible for the actual processing within the neural network, and

neurons of an output layer send the estimated virtual sensor outputs out of the network to the decision logic for evaluation.

Furthermore, each neuron is provided with an input function (class “InputFunction”) and an activation function (class “ActivationFunction”). The input function of a neuron j combines i
                        =1,…,
                        n input values xi
                         producing a single value yj
                         that represents the net input of the neuron. The input function implemented in this study is given by Eq. (1):
                           
                              (1)
                              
                                 
                                    
                                       y
                                    
                                    
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          n
                                       
                                    
                                 
                                 
                                    
                                       w
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 +
                                 
                                    
                                       b
                                    
                                    
                                       j
                                    
                                 
                                 ,
                              
                           
                        where xi
                         are the net inputs, wij
                         are the weights of the connections from neuron i to neuron j, and bj
                         is the bias associated with neuron j. Applying the activation function, each neuron j transforms its net input into an activation value zj
                         that defines the output of the neuron. In this study, a variety of linear and non-linear activation functions is implemented, based, e.g. on the identity function zj
                        
                        =
                        yj
                        , on linear functions zj
                        
                        =
                        cyj
                        , where c is a constant, and on sigmoid functions, as denoted in Eq. (2), including logistic and hyperbolic tangent functions.
                           
                              (2)
                              
                                 
                                    
                                       z
                                    
                                    
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       1
                                       +
                                       
                                          
                                             e
                                          
                                          
                                             -
                                             
                                                
                                                   y
                                                
                                                
                                                   j
                                                
                                             
                                          
                                       
                                    
                                 
                                 ,
                              
                           
                        
                     

Finally, learning rules are implemented in the FDI module (class “LearningRule”) to train a neural network by providing it with sensor data obtained during normal operation of the wireless SHM system. The data sets used for training contain the desired network outputs (i.e. measurements recorded by the observed sensor) and given network inputs (i.e. measurements recorded by correlated sensors). The residuals between desired and estimated network outputs are used by the learning algorithm to adjust the weights of the connections in the neural network in order to achieve optimum network outputs. For the adjustments, i.e. to train the network, the backpropagation algorithm [39] – one of the most studied supervised learning methods for neural networks training [40] – is prototypically embedded into each wireless sensor node (class “Backpropagation”), calculating the (k
                        +1)th adjustment of the connection weight wij
                         following Eq. (3):
                           
                              (3)
                              
                                 Δ
                                 
                                    
                                       w
                                    
                                    
                                       ij
                                    
                                 
                                 (
                                 k
                                 +
                                 1
                                 )
                                 =
                                 -
                                 η
                                 
                                    
                                       ∂
                                       E
                                    
                                    
                                       ∂
                                       
                                          
                                             w
                                          
                                          
                                             ij
                                          
                                       
                                    
                                 
                                 +
                                 α
                                 Δ
                                 
                                    
                                       w
                                    
                                    
                                       ij
                                    
                                 
                                 (
                                 k
                                 )
                                 ,
                              
                           
                        where E is the network error that is determined by the neural network output, η is the learning rate that defines to what extend the weights will change in one iteration within the training phase, and α is the momentum rate that allows the attenuation of oscillations when adjusting the weights [40]. The objective function (or cost function) defined to measure the network performance is implemented using the sum of squares error function representing the total network error. Thus, the total network error is defined as the mean squared error:
                           
                              (4)
                              
                                 MSE
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       PJ
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          p
                                          =
                                          1
                                       
                                       
                                          P
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          J
                                       
                                    
                                 
                                 
                                    
                                       (
                                       
                                          
                                             t
                                          
                                          
                                             pj
                                          
                                       
                                       -
                                       
                                          
                                             z
                                          
                                          
                                             pj
                                          
                                       
                                       )
                                    
                                    
                                       2
                                    
                                 
                                 ,
                              
                           
                        where t and z are, respectively, the desired (target) output and the estimated output of the jth neuron in the pth iteration, and P and J denote the total number of training sets and output nodes. To minimize the total network error, the embedded backpropagation algorithm performs gradient descent to adjust the network weights wij
                         (Eq. (3)).

The mathematical model of the SHM system introduced in Fig. 1 is divided into partial system models, each of which embedded into one wireless sensor node. The partial system models implemented herein are, in general, based on multi-layer backpropagation feedforward neural networks, which have proven their effectiveness in parameter estimation problems in a number of engineering applications. Before porting specific neural network instances on the wireless sensor nodes, the optimum network topology and the network parameters are determined on a desktop PC using training data recorded in preliminary laboratory tests. In general, the dataflow from neurons of the input layer to neurons of the output layer is strictly feedforward, i.e. outputs to neurons of the same layer as well as outputs to neurons of a previous layer, as in recurrent neural networks, are not permitted. While the input function of a neuron is a priori given by Eq. (1), the hyperbolic tangent function is chosen, as a result of computational steering, as an appropriate sigmoid activation function for transforming the net input yj
                         into a node’s output zj
                        :
                           
                              (5)
                              
                                 
                                    
                                       z
                                    
                                    
                                       j
                                    
                                 
                                 =
                                 1
                                 -
                                 
                                    
                                       2
                                    
                                    
                                       
                                          
                                             e
                                          
                                          
                                             2
                                             
                                                
                                                   y
                                                
                                                
                                                   j
                                                
                                             
                                          
                                       
                                       +
                                       1
                                    
                                 
                                 ,
                              
                           
                        
                     

The hyperbolic tangent activation function is chosen because it leads to faster convergence of the learning algorithms than other non-linear functions, as corroborated in previous studies [44]. It is worth mentioning that for embedding the hyperbolic tangent function into the resource-limited wireless sensor nodes, helper routines are implemented because the software of the wireless sensor nodes, as described earlier, is based on the Connected Limited Device Configuration (CLDC), which does not support resource-intensive mathematical functions.

With respect to the network topology, the number of neurons on the input layer and the number of neurons on the output layer are predetermined by the sensors of the wireless SHM system. More specifically, the output layer contains the estimated outputs of an observed sensor, and the input layer corresponds to the correlated sensors. By contrast, the optimum numbers of hidden layers and the optimum number of neurons per hidden layer (hidden neurons) are to be determined. Although it has been more than two decades since neural networks have been first introduced for processing sensor data, there still exists no generally accepted method to determine the optimum numbers of hidden layers and hidden neurons [41]. However, it has been shown that one hidden layer with 2n
                        +1 nodes, where n is the number of input nodes, is sufficient to approximate any non-linear function if relatively complex activation functions and/or relatively high numbers of neurons are used [42]. On the other hand, if employing activation functions of reduced complexity, such as regular sigmoid functions, and a small number of neurons, it has been suggested that two hidden layers are preferably to be implemented [43].

Using the network error MSE as a performance measure, the optimum number of hidden layers and the optimum number of hidden neurons are determined in this study based on a heuristic search followed by trial and error. It is observed that the network error decreases with the number of hidden neurons, but too many hidden neurons cause overfitting problems, such that the neural network memorizes the training data instead of generalizing when new data sets are presented entailing a poor predictive performance of the neural network. Also, increasing the number of hidden layers and hidden neurons reduces the computational efficiency of the wireless sensor nodes; performance tests conducted in this study on several prototype network implementations show that each additional hidden neuron, on the average, adds about 75% computation time (taking one neuron on one hidden layer as a benchmark). Finally, the need for precision is balanced with the need for computational efficiency, resulting in 2 hidden layers with 3 hidden neurons for each neural network instance embedded into the wireless sensor nodes. The resulting network topology and the neuron structure are shown in Fig. 3
                        .

Two laboratory experiments are devised to validate the performance of the wireless SHM system and to test its fault detection and isolation capabilities. The SHM system is mounted on a three-story test structure as shown in Fig. 4
                     . The test structure is an aluminum shear frame structure of 1.52m height. The lateral stiffness of each floor originates from four aluminum columns with cross sections of approximately 1.3cm×0.6cm. Each floor, connected to the columns through bolted joints, has a dimension of 46.5cm×26.7cm and weighs about 7.3kg. The wireless sensor nodes of the SHM system are installed in the center of every floor. In addition to the wireless sensor nodes, the base station, connected to the local computer, is placed next to the test structure. In the first laboratory experiment, the performance of the SHM system under normal operation, i.e. in the absence of sensor faults, is validated. In the second experiment, faults are injected into the wireless sensor nodes to test the capabilities of the wireless SHM system with respect to autonomous FDI. The (non-faulty) sensor data recorded in the first laboratory experiment is used in the second laboratory experiment to train the neural networks of the wireless sensor nodes.

In the first laboratory experiment, the test structure is excited at the upper floor (floor A) by a one-directional horizontal deflection along the longitude of the structure, forcing the structure to vibrate freely at its characteristic frequencies. The acceleration data along the longitude of the structure is recorded by the wireless sensor nodes (y-direction in Fig. 4). Each node locally calculates the frequency response function from the recorded acceleration time histories using an embedded FFT algorithm [34] that is implemented to convert the measured accelerations from the time domain into the frequency domain. Thereupon, the primary modes of the test structure are derived through peak picking.

For the laboratory experiment, the embedded FFT algorithm is performed on 256 consecutive time points. The sensor data collected by the sensor nodes is sampled at 50Hz, well above the primary modes of response of the test structure, as analytically calculated in previous studies from a numerical model of the test structure [45,46]. Fig. 5
                         shows the acceleration response recorded by the wireless sensor nodes. The frequencies of the calculated primary modes of response are determined by in this experiment as 2.1Hz, 5.7Hz and 8.4Hz, showing very good agreement with the theoretical response analytically determined from the numerical model (2.1Hz, 5.7Hz, 8.2Hz). As an example, the frequency response function derived from the acceleration response of the second floor through sensor node B is depicted in Fig. 6
                        . The test procedure conducted in this experiment is repeated 10 times to obtain sufficient quantities of sensor data for the second laboratory experiment.

The second laboratory experiment includes two steps. In the first step, the sensor data recorded in the first laboratory experiment is used in an offline training procedure as training data for the wireless sensor nodes. In the training procedure, the wireless sensor nodes of the SHM system learn from the previously recorded data sets, representing non-faulty sensor operation, to identify signatures of non-faulty sensors or, in other words, to distinguish between non-faulty and faulty sensors. In the second step, faults are injected into the wireless sensor nodes to validate their autonomous fault detection and isolation capabilities.

Within the offline training procedure, the previously obtained acceleration data is used (i) to train, (ii) to validate, and (iii) to test the neural network of each wireless sensor node. For every sensor node, a total of 2560 data points originating from the 10 test procedures is randomly subdivided into three disjoint subsets, 80% of which serving as training data (training set), 10% are used for cross validation (validation set), and 10% are used for testing the neural networks (test set). First, the training set is applied to adjust the connection weights of each neural network using the backpropagation algorithm introduced in Eq. (3). Each network is trained several times with random initial weights to avoid local minima problems when determining the optimum connection weights. After every training cycle (or epoch), the validation set, being independent from the training set, is used to validate the network performance. The validation set is used to monitor the network error during training and to stop training when the error – the mean squared error defined in Eq. (4) – is less than 0.002. To avoid overfitting, it is also monitored if the network error increases during the training procedure. Taking sensor node B as an example, Fig. 7
                            shows the mean squared error between the desired sensor output and the estimated sensor output of the accelerometer plotted against the number of epochs.

Once the connection weights are fixed, the test set is used to evaluate the fully trained neural network of each sensor node and to confirm the predictive power when estimating sensor outputs. For this purpose, the data points of the test set are fed into the neural networks, and the estimated sensor outputs are compared with the desired sensor outputs (Figs. 8 and 9
                           
                           ). By the example of sensor node B, Fig. 8 illustrates a time history of horizontal acceleration measured during excitation of the test structure and the corresponding acceleration estimated by the neural network. The goodness of fit of each trained neural network to the measured acceleration data is determined by the coefficient of determination R
                           2. As can be seen from Fig. 9, the neural network of sensor node B is able to predict the acceleration measurements with R
                           2
                           =0.959, which is above the minimum coefficient of determination 
                              
                                 
                                    
                                       R
                                    
                                    
                                       min
                                    
                                    
                                       2
                                    
                                 
                                 =
                                 0.95
                              
                            defined as a threshold to be met before applying a fully trained network for real-time fault detection and isolation.

Two common sensor failures, a drift (soft failure) and a large bias (hard failure), are simulated. The corresponding faults are injected into the code of the embedded software module of sensor node B, which is implemented for collecting and analyzing acceleration data (“SHM module”). While sensor node B is affected by the simulated fault, sensor node A and sensor node C are capable of running in normal operation.


                           Fig. 10
                            depicts the time histories of the residuals between the actual measurements and the virtual sensor outputs that are estimated based on the acceleration measurements of sensor node A and sensor node C, thus being fully independently from the actual measurements of sensor node B. As can be seen from Fig. 10, the drift is inserted at t
                           =5s. The time-varying drift is simulated by adding a ramp with a slope of 0.03g/s to the regular accelerometer reading. The fault is detected by sensor node B at about t
                           =11s as soon as the pre-defined threshold of ±0.2g is exceeded. At t
                           =18s, the residuals are permanently out of the tolerable range for more than Δt
                           =5s, a time span chosen based on data processing constraints, and trigger the automated fault correction. From this moment on, the virtual sensor outputs of sensor node B are used in lieu of the actual measurements recorded by the faulty accelerometer. Otherwise, the faulty sensor of sensor node B would continue feeding incorrect measurements into the SHM system, and it would affect the fault detection and isolation of the other wireless sensor nodes.

The results of the second simulated failure, the large bias shown in Fig. 11
                           , are similar to those of the drift. The bias is injected at t
                           =5s with a constant offset of 0.5g. It can be seen that the residuals remain near zero prior to the fault and jump to non-zero values immediately after occurrence of the bias, whereupon the fault is detected and corrected by the wireless sensor node.

In the laboratory experiments, different fault types have been injected into one of the wireless sensor nodes of the SHM system. While large biases, in general, can be detected relatively easy, it is known that drifts are among those failure types, which are, because of the temporal component in the failure signature, most difficult to detect [47]. Nevertheless, the results from the laboratory experiments demonstrate that the FDI modules of the wireless sensor nodes are capable to autonomously detect and isolate these faults. This is due to the virtual sensor outputs used for residual generation, which are calculated independently from the actual measurements of an affected sensor node. Although, for the sake of clarity in this paper, the sensor drift exemplarily injected in the experiment has a relatively large slope value (0.03g/s), it is clear that the embedded FDI modules detect more subtle drifts of smaller slope values with the same accuracy and with a small probability of false alarms; the fault detection of smaller drifts, as elucidated in this paper, just takes a longer time because the time span between occurrence of the fault and fault detection depends on the fault magnitude and on the thresholds defined for the residuals.

As demonstrated in the second laboratory experiment, sensor faults can be detected and isolated without the need for first-principle models and without a priori knowledge about the internal structures of the SHM system. In total, the dynamic, non-linear behavior of the SHM system has been captured very precisely by the (partial) system models implemented into the wireless sensor nodes. The coefficient of determination between measured and estimated acceleration data has been R
                        2
                        =0.959, and the mean squared error, as calculated during network validation, has been less than 0.002. Furthermore, each wireless sensor node hosts only a few neurons – it has been found that two hidden layers with three hidden neurons each are adequately in this study – and communicates only with its local neighbors, achieving a reduced model complexity along with an increased resource efficiency of the SHM system. Nevertheless, although much attention has been paid to determine an optimum architecture of the embedded neural networks, both the precision and the computational efficiency may be refined by further investigations of network architectures and by additional optimizations of distinct network parameters. Also, collecting further quantities of sensor data from the test structure, to be used for training, validation and testing of the embedded neural networks, would help further improving the FDI performance of the wireless SHM system.

With respect to the monitoring capabilities of the wireless SHM system, on the other hand, the practicability of the system has been demonstrated in the first laboratory experiment. In particular, real-time data acquisition and autonomous analyses of sensor data have been proven reliable when comparing the experimental results with the results obtained from the numerical model of the test structure. However, it has been unveiled in the laboratory experiments that there is still room for improvements in the network-wide synchronization. As in every wireless SHM system, the network-wide synchronization of the time references of the wireless sensor nodes in association with a reliable data transmission are essential to guarantee a correct real-time behavior of the system – an issue being even more important when measurements recorded by a sensor node are used by other sensor nodes for estimating virtual sensor outputs. Currently, the wireless sensor nodes are synchronized upon launching the SHM system with a time resolution of 1ms based on the Squawk virtual machines running on the sensor nodes. Although further investigations are needed, it might be assumed that the present time resolution could probably limit the real-time performance and might affect both the monitoring capabilities and the FDI performance of the SHM system if operating permanently over long periods of time. Based on the insights gained from the laboratory experiments, it is therefore proposed to improve the synchronization in further prototype implementations by directly accessing the timer/counter of the nodes’ internal processors. With a time resolution of the processors smaller than 1μs, very accurate timestamping of each recorded measurement can be obtained.

Sensor faults in wireless structural health monitoring system systems may reduce the monitoring quality and might cause considerable economic loss due to inaccurate or missing sensor data required for structural assessment and life-cycle management of the monitored structure. Nevertheless, fault detection and isolation in wireless SHM system has received little attention. In this paper, a decentralized analytical redundancy approach towards autonomous sensor fault detection and isolation for wireless SHM systems has been presented. Instead of physically installing multiple redundant sensors in the monitored structure (“physical redundancy”), which would involve substantial penalties in cost and maintainability, the information inherent in the SHM system is used for fault detection and isolation. Furthermore, as opposed to traditional centralized FDI approaches that require extensive global communication between the sensor nodes as well as large amounts of sensor data to be transmitted, the analytical redundancy approach presented in this study has been implemented in a fully decentralized fashion.

As demonstrated in this paper, multi-layer backpropagation feedforward neural networks have been embedded into the wireless sensor nodes of the SHM system for autonomous fault detection and isolation. Although the application of neural networks in traditional FDI is not new, there have been no studies available that investigate the embedment of artificial neural networks into wireless sensor nodes achieving a fully autonomous real-time FDI for wireless SHM systems. The results obtained in this study clearly demonstrate that the analytical redundancy approach based on neural networks enables autonomous real-time FDI in wireless SHM systems in a decentralized manner.

Representing another distinct advantage compared to traditional FDI approaches, fault detection and isolation has been conducted without the need for first-principle models of the SHM system and without a priori knowledge about the internal system structures. Nevertheless, opportunities exist for further improvements. For example, additional investigations of neural network architectures may be devised and additional fault injections may be conducted to further increase the FDI accuracy. Also, as delineated in the previous section, future work may be conducted on the network-wide synchronization, which can further advance the precision of the residual generation within the wireless SHM system and, hence, the reliability of fault detection and isolation.

@&#ACKNOWLEDGEMENTS@&#

This research has been partially funded by the German Research Foundation (DFG) under Grants SM 281/1-1 and SM 281/2-1. The financial support of the DFG is gratefully acknowledged. Furthermore, the authors would like to express their gratitude to Professor Yuri Petryna (Berlin Institute of Technology) for his invaluable support.

@&#REFERENCES@&#

