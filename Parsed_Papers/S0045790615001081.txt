@&#MAIN-TITLE@&#User preference-based automatic orchestration of web services using a multi-agent

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           The proposed approach uses a multi-agent system to automate the process.


                        
                        
                           
                           It increases the overall system performance over traditional approach.


                        
                        
                           
                           It supports several QoS parameter such as reliability, throughput, response time and reusability.


                        
                        
                           
                           The graph depicts the response time between proposed and traditional approach.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Service-oriented architecture

Web service

Web service composition

Multi-agent

@&#ABSTRACT@&#


               
               
                  Service-oriented architecture (SOA) is a self-contained service with a collection of services. Services communicate with each other using a web service. Web services use a collection of open protocols and standards for communication between different web services and their applications. In today’s environment, users are not satisfied with a single web service. To fulfill the users’ needs, two or more atomic services must be combined to provide a single complex service. Hence several atomic web services must be orchestrated based on user preference by using a multi-agent system. In the traditional approach, the orchestration of web services is a manual process. The proposed system reduces human intervention and supports the orchestration of atomic web services into a complex service by using a multi-agent system. Therefore, this paper addresses the automatic orchestration by using a multi-agent i.e., two agents. The first agent is used to select an appropriate web service from the available atomic service. The second agent is used to orchestrate the selected web services to form a complex service based on a user’s requirement and quality of service (QoS).
               
            

@&#INTRODUCTION@&#

Service-oriented architecture (SOA) is a collection of services that communicate with each other through the help of web services. SOA [1] is a triangular model. SOA services have certain characteristics, such as being autonomous, discoverable, composable, and reusable and having loosely coupled services. The web services are used to implement the SOA. SOA plays three major roles, namely service provider, service consumer and service registry. The service provider creates a web service and publishes it to the service registry. The service consumer finds the services from the service registry and then binds them with the service provider to access the service whenever they need. Currently, users are not satisfied with a single web service. Two or more atomic web services are combined into a complex service in order to fulfill the users’ needs. Some quality of service (QoS) [2] parameters such as availability, response time, throughput and reliability, must be considered before the orchestration of web services. Therefore, it is a tough task to select a service according to a specific requirement and to build a composite complex web service. In the traditional web service composition approach, orchestration is performed manually. The business process execution language for web services (BPEL4WS)-based, workflow-based, and template-based approaches are used. Recently, a multi-agent system approach has been used to compose a complex web service from a set of atomic web services. Based on users’ requests and QoS parameters, the web services are selected by agents. In the proposed system, orchestration is performed automatically by agents, which reduces human effort and response time. Here, the autonomous and negotiation agents orchestrate web services. Autonomous agents have a high degree of self-determination. Autonomous agents decide for themselves what action to perform and when. These autonomous agents need to communicate with other agents to achieve their goal. A negotiation agent is used to bind the web services with a set of selected web services to build a complex web service. Negotiation agents work based on certain parameters, such as the performance and cost of web services, quality of service, reliability, availability and interoperability. By using these two agents, the performance of the proposed system is improved.

The organization of this paper is as follows: first, the definition of a web service is given. Second, the web service composition process is depicted and then the principle of a multi-agent system is defined. Finally the multi-agent based framework for web service composition is proposed and the response time comparison between both the traditional and agent systems is shown in the results analysis.

@&#LITERATURE REVIEW@&#

Rajeswari et al. [3] deal with various challenges in the QoS parameter for the composition of web service. They illustrated the related technology by analyzing and comparing QoS parameters based on the results of conventional algorithms and a composition model. Here, they have not considered the agents for automatic web service composition.

Kumar [4] proposed an approach for the process of semantic web service composition, which can be measured as the most important process for achieving the high-level objective of fulfilling a user’s request. In the conventional model, the semantic web-based systems cannot satisfy client-requirements by using only the single available web service component. In that condition, service discovery and service selection are used for selecting the appropriate service components, followed by the use of service composition for generating a composition of the selected web service components according to the requested task. Here, a single agent for service composition was considered and implemented in the semantic web based system.

Niu et al. [5] proposed the context-aware reasoning-based service agent model (CARSA), which develops the relationship among various service consumers and providers mutually with a similar optimization approach to support the efficiency of web service composition. Two reasoning optimization methods are proposed in this model based on the substitute relationship and the dependency relationship. This helps to filter out the irrelevant actions. However, this framework does not consider user preferences.

Bertoli et al. [6] have shown that implementation results with few tools can be realized based on the adoption and extension of powerful AI planning techniques, taking the “planning via model-checking” approach as a stepping stone. However, they considered only a single agent to perform the automatic service composition.

Santofimia et al. [7] proposed the automation of the composition task using artificial intelligent agents for providing transparency from the user’s perspective. This also exposes the use of intelligent agents for the automation of the service composition task. By using a composer agent, the system relieves the user from being aware of the details involved in the composition, achieving in this way a more intelligent ambient agent that is in charge of knowing what, how, and when to compose the basic resource-oriented services. Here also, a single agent has been considered to perform the composition.

Gibbins et al. [8] discussed the merits of using multi-agent systems in web services. Here, they have not composed the several web services.

Narayanan et al. [9] proposed an approach to provide both model-theoretic semantics and distributed operational semantics for the simulation, validation, verification, automated composition and enactment of DAMLS-described web services. Here, agents are not involved during the process of automated composition.

Service-oriented architecture is a triangular model, built based on the concept of “services”. It is a self-contained service and composed of many services. These services communicate with each other. In SOA [1], communication among different services can be implemented through the web service. Each service is autonomous, discoverable, composable, reusable and loosely coupled. Fig. 1
                      shows the three major roles of service: service registry, service consumer, and service provider.

A service registry provides controlled access to data. It has a set of services that are published by the service provider. It acts as a service repository and centralized directory. Any client can request to access an existing service or new one. The service registry provides this access to a customer based on the requirement.

A service provider creates and publishes services in the service registry and makes them available to all clients.

A service consumer finds services in the service registry and then binds them with the service provider to access the service whenever they are needed.

Web service establishes communication between two systems over a network and uses standard protocols for communication. Web service [10] provides high interoperability and supports a loosely coupled architecture. It allows different applications to share their services among themselves to make the application platform independent. It increases the quality of services through the open protocols. Web service uses protocols such as simple object access protocol (SOAP), hypertext transfer protocol (HTTP), web service description language (WSDL), and universal description discovery and integration (UDDI), and also supports the low cost of communication. SOAP is a communication protocol used to communicate between applications. WSDL is a standard format for describing web services. It is an integrated part of UDDI and describes the procedure to access web service. UDDI is a platform independent, open framework and uses WSDL to describe interfaces to web services.

If a single web service has not satisfied a user’s requirement, then two or more services with few QoS parameters (i.e., availability, response time, throughput and reliability) must be combined to form a composite [11–16] complex web service. It is hard to select and composite web services based on a users’ requirement. Composition of web services involves three steps, which are depicted in Fig. 2
                     .

This is the process of choosing the appropriate web services from the available set of web services based on a user’s requirements.

This is the process of aggregating selected atomic web services to form a complex web service. This should satisfy the user’s need.

This is the final step and involves the execution of the composite complex web service and the achievement of a specified goal.

An agent is a person or a piece of software that acts. An agent [17–20] can be a computer system that is present in a dynamic environment and can act independently on behalf of the user. The agent should be proactive, reactive, goal oriented and autonomous. A multi-agent system consists of a number of agents that communicate with each other. For successful communication, they are able to coordinate, cooperate and negotiate with each other. Here, two agents are used to build a complex composite web service. One agent acts autonomously and decides for itself the necessary things to be done to satisfy the user’s need. This autonomous agent is used to select a service automatically from the available set of web services based on the user’s requirements. Another agent is used to exchange messages between other agents and is involved in some activities such as coordination, cooperation and negotiation. Multi-agents [21–25] act on behalf of a user and have different goals and motivations. They also have characteristics such as reliability, maintainability, responsiveness, flexibility, reuse and expendability. Multi-agents are used to orchestrate several atomic web services and to build a composite complex web service. Automatic orchestration of web services using multi-agent involves a five step process.

The orchestration process uses atomic web services as raw elements. By using these atomic web services, a complex service can be composed.

This protocol discovers available services from the set of existing atomic services, based on the user’s requirements as well as helps to find new services from the service registry.

After discovering services from the available set of services, the service selection agent automatically filters the exact services based on the user’s requirements.

Here, the orchestration of web services is performed automatically by agents. These agents reduce the need for human intervention and automatically orchestrate the selected web services to form a composite complex web service. Additionally, they use the negotiation principle to bind appropriate services among other agents.

Finally, service execution takes place to execute the complex web service and to produce the result based on the user’s goal.

In this proposed framework, the web service registry consists of a collection of atomic web services. Service discovery protocol is used to discover services from the service registry. Service selection uses an autonomous agent, which will automatically select a web service from the available set of services based on the user’s requirements. Another agent automatically binds the selected service based on the negotiation principle. Service execution takes input from the binding phase and builds a composite web service, as depicted, in Fig. 3
                     .

In the web service selection algorithm (Algorithm 1), a Select set of atomic web services (AWSi) from the service registry using a service registry protocol, an autonomous agent (AA) and user preferences based on QoS (UP) are taken as input. Then, it finds an appropriate web service based on the user’s requirements by using an autonomous agent. It also fetches a web service from the set of a atomic web services for composition based on the QoS preferred by the user. It should be noted, that if QoS matched with an available atomic web service, then it is selected by using an autonomous agent, for service orchestration. After repeating these steps for all available atomic web services, one has to order those services based on priority for web service orchestration.
                           
                              
                                 
                                 
                                    
                                       
                                          Algorithm 1: For Web services selection
                                    
                                 
                                 
                                    
                                       
                                          Input:
                                       
                                    
                                    
                                       
                                          – Select a set of atomic Web services (AWSi) from the service registry using a service registry protocol
                                    
                                    
                                       
                                          – Autonomous agent (AA)
                                    
                                    
                                       
                                          – User preference based on QoS (UP)
                                    
                                    
                                       
                                          Output:
                                       
                                    
                                    
                                       
                                          – Selected atomic Web services for composition
                                    
                                    
                                       1. findWebServices by AA (UP, AWSi)
                                    
                                    
                                       { // find services using agent that meet the user’s Requirements based on QoS
                                    
                                    
                                       2. if QoS requirements specified by user{
                                    
                                    
                                       // match Web Services with QoS information
                                    
                                    
                                       3. QoSMatches=QoSMatch (AWSi,UP); }
                                    
                                    
                                       4 .else {// return SelectServices (AWSi, “random”); }
                                    
                                    
                                       5. else {
                                    
                                    
                                       6. AgentOrder=Using Agent Order AA (QoSMatches,UP);
                                    
                                    
                                       7. return Selected Atomic Web Services (AgentOrder, UP, “forall”);
                                    
                                    
                                       }
                                    
                                    
                                       }
                                    
                                 
                              
                           
                        
                     

In the web service composition algorithm (Algorithm 2), selected atomic web services based on user preferences (SAWSi) and agent with the negotiation principle are taken as input. Here, the agent will automatically bind the selected atomic web services based on the negotiation principle. If the selected atomic web services are matched with negotiation principles, then the agent will composite those atomic web services together. This step should be repeated until reaching the goal by using the agent with the negotiation principle.
                           
                              
                                 
                                 
                                    
                                       
                                          Algorithm 2: For Web service composition using negotiation agent
                                    
                                 
                                 
                                    
                                       
                                          Input:
                                       
                                    
                                    
                                       
                                          – Selected atomic Web services based on user preference (SAWSi)
                                    
                                    
                                       
                                          – Agent with negotiation principle(ANP)
                                    
                                    
                                       
                                          Output:
                                       
                                    
                                    
                                       
                                          – Composite atomic Web services (CWS)
                                    
                                    
                                       1. Automatic binding using ANP (SAWSi, negotiation principle)
                                    
                                    
                                       {// do automatic binding using agent that meets the negotiation principle
                                    
                                    
                                       2. if Specified SAWSi matches with ANP{
                                    
                                    
                                       3. ANP match=NP (SAWSi, ANP);}
                                    
                                    
                                       4. else { // select next SAWSi and repeat this process until achieving the goal
                                    
                                    
                                       5. return to next SAWSi };
                                    
                                    
                                       6. ANPMatches=Composition (SAWSi, NP);
                                    
                                    
                                       7. return composite atomic Web service (ANPMatches, NP, “forall”); }
                                    
                                 
                              
                           
                        
                     

@&#RESULTS@&#

In Fig. 4
                     , a comparison is made between the proposed agent based web service selection method and the typical web service selection based on a number of services and the time taken to select those services (Table 1
                     ). It proves that the proposed framework, i.e., agent based selection, achieves faster selection than the typical system, which is depicted in the graph below.

In Fig. 5
                     , a comparison is made between the proposed agent based web service composition and typical web service composition, based on a number of services and the time taken to orchestrate those services. It proves that the proposed framework, i.e., agent based composition, achieves faster orchestration than the typical system, which is depicted in the graph below.

In Fig. 6
                     , we compared our proposed agent based web service composition response time with the typical web service composition response time based on the number of user requests and the time taken to orchestrate those services (Table 2
                     ). By using the proposed framework, agent based composition achieves a faster response time than the typical system, which is depicted in the graph below.

In Fig. 7
                     , the snapshot depicts the jade tool implementation for multi-agent-based web service composition.

In the orchestration of several atomic web services, automation of the process and the response time of the system are the major issues. Traditionally, different systems have been proposed to overcome this issue. However, these systems are inadequate to provide automation and quick response times. The multi-agent-based system provides automation as well as a quick response time. This analysis of the system is given in the form of a graph, which represents the comparison between the normal system and agent based systems based on selection, composition and response time. This analysis proves that the proposed system gives a better result than the traditional approach. JADE tools are used to implement this orchestration based on multi agent. The JADE tool provides several benefits, such as high performance, low administration, increased productivity and interoperability. It permits a developer to build complex services, such as a real world business model without any constraints due to the procedure of storing and accessing data, because the developers can store and retrieve within an interconnected object structure, although they are always in memory. The development effort required for moving an object to and from a database is eliminated by JADE. Furthermore, developers can normally target more complex services; thus, development is regularly faster and easier. JADE makes programming easier by giving developers a single data model, flawless persistent data storage and a brief conceptual model for building object oriented, distributed systems that manage complex and highly connected data.

In future work, in addition to this proposed framework, users can implement additional agents to produce a quicker response time. They can also use the coordinate and cooperate agent principle to obtain a highly reliable and fault-tolerant system. In the future, users can also implement a mobile based framework to provide portable and more reliable services.

@&#REFERENCES@&#

