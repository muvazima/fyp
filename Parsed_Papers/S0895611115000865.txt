@&#MAIN-TITLE@&#Skeleton Graph Matching vs. Maximum Weight Cliques aorta registration techniques

@&#HIGHLIGHTS@&#


               
                  
                  
                     
                        
                           
                           Comparison of two skeleton-based approaches in 3-D medical data registration.


                        
                        
                           
                           Skeleton Graph Matching vs. Maximum Weight Cliquess.


                        
                        
                           
                           Applicable to compare pre- and postoperative abdominal aorta aneurysm examinations.


                        
                        
                           
                           Efficient matching of different aorta structures (of different patients).


                        
                        
                           
                           Segmentation and feature extraction incorporate level set approach.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Hybrid level-set active contour

Image registration

Skeleton Graph Matching

Maximum Weight Cliques

Skeletonisation

@&#ABSTRACT@&#


               
               
                  Vascular diseases are one of the most challenging health problems in developed countries. Past as well as ongoing research activities often focus on efficient, robust and fast aorta segmentation, and registration techniques. According to this needs our study targets an abdominal aorta registration method. The investigated algorithms make it possible to efficiently segment and register abdominal aorta in pre- and post-operative Computed Tomography (CT) data. In more detail, a registration technique using the Path Similarity Skeleton Graph Matching (PSSGM), as well as Maximum Weight Cliques (MWCs) are employed to realise the matching based on Computed Tomography data. The presented approaches make it possible to match characteristic voxels belonging to the aorta from different Computed Tomography (CT) series. It is particularly useful in the assessment of the abdominal aortic aneurysm treatment by visualising the correspondence between the pre- and post-operative CT data. The registration results have been tested on the database of 18 contrast-enhanced CT series, where the cross-registration analysis has been performed producing 153 matching examples. All the registration results achieved with our system have been verified by an expert. The carried out analysis has highlighted the advantage of the MWCs technique over the PSSGM method. The verification phase proves the efficiency of the MWCs approach and encourages to further develop this methods.
               
            

@&#INTRODUCTION@&#

Nowadays, vascular diseases belong to the most challenging health problems in developed countries. According to statistics acquired by the Centers for Disease Control and Prevention (CDC), abdominal aortic aneurysms (AAAs) have been the cause of around 10,000 deaths only in the United States in 2009. A bit decreased, but still around 7000 deaths annually, have been indicated for the United Kingdom, by the British Heart Foundation (retrieved 2011). For the year 2012 the Statistical Federal Agency has counted 3500 deaths caused by AAA in Germany. An abdominal aortic aneurysm is a dilated and weakened segment of the abdominal aorta. It is an abnormal ballooning of the abdominal portion of the aorta, that occurs as a consequence of aortic medial degeneration and can break open causing death. To prevent from rupturing, interventional radiologists offer minimally invasive treatment for it. The open surgical repair by a vascular surgeon is the most commonly used treatment for a large, non-ruptured aneurysm. The less invasive and relatively new technique, eliminating the need for a large abdominal incision, is placing a graft within the aneurysm (see Fig. 1
                     ). It redirects blood flow and stops direct pressure from being exerted on the weak aortic wall [1].

Thanks to research activities targeting medical image processing techniques, early diagnosis and treatment becomes nowadays possible. A contrast-enhanced CT angiography (CTA), which replaced a conventional angiography, is an imaging technique commonly used in vascular diagnosis. Despite the fast development of modern contrast-enhanced imaging techniques, providing complex 3D datasets, the tremendous amount of problems still remain unsolved. Hence, vascular segmentation as well as registration techniques are the topics of past [3,4,9] and ongoing [5,6,13,8] research activities.

The high efficacy and efficiency requirements for diagnostic assistance in clinical routines, visually relating different datasets is especially well suited for endovascular therapies where patients with aortic stentgrafts have to be examined on a regular basis. The follow-up CTs are usually performed biyearly to reevaluate endovascular parameters, such as aortic diameters at anatomical landmarks (e.g. renal ostia) and landing zone configurations (i.e. proximal/distal neck lengths and shapes). Assisting the visualisation and/or active selection of corresponding positions for further assessment in the different datasets, the procedure becomes considerably less time-consuming and error prone. Moreover, it reduces the generally high user dependency and thus lower comparability of measurements performed by different clinicians. Given that aneurysm treatment is accompanied by considerable morphological changes of the aorta and branching vasculature (including restructured arteries, e.g. inferior mesenteric artery), a stable and efficient matching of the datasets is key for reliable long-term surveillance of aneurysm patients [7]. This is a specific requirement for common clinical settings where pre-interventional (for AAA patient “candidates”) and post-interventional situations (e.g. retreatment due to dislocated stentgrafts, extended or additional aneurysms) have to be assessed for further surgery planning.

The AAA segmentation techniques [2–4,6,7] address either both, aorta lumen and thrombus analysis, or only one of the mentioned problems. An automated method for the segmentation of thrombus in abdominal aortic aneurysms from CT data is presented in [3]. The Active Shape Model (ASM) fitting is performed in sequential slices. As the starting point for the analysis the results obtained for the adjacent slice are used. The full 3D segmentation technique in CT is reported in [4]. The system analyses both global features and local information. The first one incorporates a-priori knowledge of the intensity, volume, and shape of the aorta and other structures. The second one considers voxel location, intensity, and texture information. All of them are used for training and driving a Support Vector Machine (SVN). As reported in [2] the current state-of-the-art in AAA segmentation is modelling, feature analysis or their combination, and in all these areas different efficient techniques can be found. The newest vascular segmentation approaches use the advanced deformable models like the level set method [6] or its hybrid extension [5].

Despite the fact that the segmentation of vascular structures is valuable for the assistance of diagnosis, the currently developed computer aided diagnosis (CAD) software in efficient image registration targets treatment and surgery planning. It does not only allow measurements of lumen or thrombus volume, but combining different image information is also useful for treatment planning and monitoring. Thanks to it, the comparative analysis of consecutive (pre- and post-operative) CT studies as well as matching of different image modalities is possible.

Depending on the application, various registration techniques have been reported [9–11,13,14,8]. The registration methods, which address the problem of simultaneous analysis of different image modalities are given in [9–11,13], whereas the pre- and post-operative CT sequence matching algorithms are presented in [14,8]. The authors of [11] propose a registration technique based on the overlaying the preoperative 3D model of the aorta onto the intraoperative 2D X-ray images. The presented technique utilises two X-ray images showing the abdominal aorta from different angles in an integrated way. They developed a hierarchical registration scheme deployed by a sensible partition of the registration parameter space based on the image acquisition protocol and the patients motion constraint.

The 2D/3D registration technique is also addressed in [9]. The non-rigid method enables information from the CT to be overlaid onto the fluoroscopy images during the implantation procedure. The authors have investigated the use of manually picked landmarks and the thin plate spline algorithm to deform the CT surface so it more accurately represents the interventional scene. The automatic movement compensation in 2D/3D registration of fluoroscopy and preoperative volumetric data is presented in [13]. It proposes a pelvis boundary detection method that enables real time monitoring of patient movement and an automatic 2D/3D re-registration algorithm that compensates for it.

The newest AAA registration algorithm described in [8] targets in matching of pre- operative CT with intra-operative non-contrast-enhanced cone-beam CT, characterising by the relatively low signal-to-noise ratio of the abdominal aorta without contrast enhancement.

The idea of a graph-based approach is presented in [10]. The introduced 2D/3D registration method is there formulated on a 3D graph and applied for AAA interventions. As an input, the algorithm takes the 3D graph generated from a segmentation of the CT volume and the 2D distance map calculated from the 2D X-ray image. For computing the graph similarity, different measures are then used in a length preservation and a smoothness regularisation term.

@&#METHODS@&#

In our work, two different registration techniques, namely Path Similarity Skeleton Graph Matching (PSSGM), and Maximum Weight Cliques (MWCs), introduced in Section 2.4 are employed and investigated to realise the Computed Tomography data matching procedure. The developed techniques exploit aorta lumen segmentation, based on the hybrid level-set active contour method (Section 2.1), abdominal organs segmentation (Section 2.1), skeletonisation procedure using Subvoxel Precision Based Skeletons (Section 2.2) and a specialised data extraction step (Section 2.3). The presented approach makes it possible to match all voxels belonging to the aorta from different Computed Tomography (CT) series. The developed methodology is particularly useful in the assessment of the abdominal aortic aneurysm treatment by finding and visualising the correspondence between the pre- and post-operative CT data.

The presented methodology deals with following features of analysed dataset: (i) the data is voxelised and the size of the voxels strongly vary in size, (ii) the number of slices between two corresponding patient series are different, (iii) the region of interest varies in size and location, (iv) aorta branches disappear or even appear through the resolution variability. Moreover, (v) the radii of vessels (usually used as feature in matching procedures) as sample values are mostly meaningless, since the vessel branches do not provide unique diameter changes and (vi) the vessel branches are able to move inside the CT series. All these issues make the registration task difficult but proof the power and universality of that method.

The registration results have been tested on the database consisting of 18 CTA series of 9 patients, for which two different contrast-enhanced CTA series were acquired. The registration procedure was performed for single patients as well as for CTA series of different persons, giving in total 153 numerical tests performed. All registration results, achieved with our system and verified by an expert, provide very interesting findings regarding the strengths and the weaken of the introduced set up.

@&#METHODOLOGY@&#

The idea of registration procedure presented in our work uses skeleton information to match the segmented objects in 3D images (CTA series). Due to this fact, the first processing step is a robust aorta segmentation technique introduced in the following section. However, the aorta structure does not provide distinctive and robust features required in both investigated matching algorithms. Therefore, the internal organ segmentation step is introduced. On the basis of the obtained information skeletonisation and features extraction stages are incorporated to finally perform the data matching.

The abdominal aorta segmentation task is performed using a hybrid level set approach that has been proposed in [18]. In order to minimise the energy 
                              E
                           , the steady state solution of the gradient flow equation is searched. The energy functional 
                              E
                            including both, boundary (second term) as well as image region properties (first term) is formulated as [18]:
                              
                                 (1)
                                 
                                    E
                                    (
                                    ϕ
                                    )
                                    =
                                    −
                                    η
                                    
                                       ∫
                                       Ω
                                    
                                    (
                                    
                                       
                                          I
                                       
                                    
                                    −
                                    μ
                                    )
                                    H
                                    (
                                    ϕ
                                    )
                                    ∂
                                    Ω
                                    +
                                    τ
                                    
                                       ∫
                                       Ω
                                    
                                    g
                                    |
                                    ▽
                                    H
                                    (
                                    ϕ
                                    )
                                    |
                                    ∂
                                    Ω
                                    ,
                                 
                              
                           where the two predefined weights η and τ balance the terms. The predefined parameter μ operates as threshold for the lower intensity level of the target object in the image I. It boots the curve during the evolution to enclose the regions with values above μ. The second term operates on the objects boundary obtained from the image gradients which are accessible through the function g|▽
                           I| usually defined as:
                              
                                 (2)
                                 
                                    
                                       
                                          
                                             g
                                             =
                                             exp
                                             (
                                             −
                                             a
                                             |
                                             ▽
                                             
                                                
                                                   I
                                                
                                             
                                             
                                                |
                                                2
                                             
                                             )
                                                
                                                
                                                
                                             or
                                          
                                          
                                             g
                                             =
                                             
                                                1
                                                
                                                   1
                                                   −
                                                   a
                                                   |
                                                   ▽
                                                   
                                                      
                                                         I
                                                      
                                                   
                                                   
                                                      |
                                                      2
                                                   
                                                
                                             
                                             ,
                                          
                                       
                                    
                                 
                              
                           with a controlling the slope. It is known as geodesic active contour functional that has been proposed in [19]. It encourage the curve to attach the areas with high image gradients. The PDE of the functional is derived from the Gateaux derivative gradient flow by embedding level set function (LSF) of ϕ:
                              
                                 (3)
                                 
                                    
                                       ϕ
                                       t
                                    
                                    =
                                    δ
                                    (
                                    ϕ
                                    )
                                    
                                       
                                          
                                             η
                                             (
                                             
                                                
                                                   I
                                                
                                             
                                             −
                                             μ
                                             )
                                             +
                                             τ
                                             
                                                
                                                   
                                                      div
                                                      
                                                         
                                                            
                                                               g
                                                               
                                                                  
                                                                     ▽
                                                                     ϕ
                                                                  
                                                                  
                                                                     |
                                                                     ▽
                                                                     ϕ
                                                                     |
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           The function δ(ϕ) replaces derivative of the function H, δ
                           =
                           H′. Replacing δ(ϕ) by |▽
                           I| the Eq. 3 can be simplified to [18]:
                              
                                 (4)
                                 
                                    
                                       ϕ
                                       t
                                    
                                    =
                                    η
                                    (
                                    
                                       
                                          I
                                       
                                    
                                    −
                                    μ
                                    )
                                    +
                                    τ
                                    div
                                    (
                                    g
                                    ▽
                                    ϕ
                                    )
                                    .
                                 
                              
                           div(·) stands for divergence operator. The exemplary aorta segmentation result is presented in Fig. 2
                           .

The benefit of using hybrid segmentation method lies in its robustness and accuracy, since the boundary information support a precise location of the target object, the region data prevents boundary leakage problems. However, to specify the term concerning regional information the applied level set technique utilises global threshold indicating the lower bound of target object. It might results inaccurate segmentation, especially for medical images with intensity inhomogeneity caused by artefacts and noise. To avoid this situation, as a preprocessing step, an adaptive filtering technique based on anisotropic diffusion filtering is introduced [12].

The hybrid level-set segmentation [18] applied a sphere as an initial surface. The presented results proved, that the algorithm successfully converges to the target object. However, the time to converge it strongly depends on this step. In our work, the size of the analysed AAA CTA data ([512×512×
                           n]pix, where n
                           =〈220, 680〉) determined the clustering-based initial surface selection procedure. For this, the weighted fuzzy c-means (WFCM) clustering is introduced. This modification of the standard FCM reduces its computational complexity, working on the histogram of analysed data instead of using all the volume points.

To match the already segmented aortas (in different CTA series) unique and robust features have to be extracted. The classical skeleton based object matching techniques [25] use the radii information – the distance from the skeleton path to the object edge. However, the non-specific radii information does not provide meaningful knowledge of analysed vessels – the vessel branches do not provide unique diameter changes. Moreover, as it was already mentioned, the vessel branches are able to move inside the CT series. To stabilise the aorta position inside the series and extract discriminative object features some further organs have to be segmented. The three organs of the human body also visible in the CT scan, creating the reference system, are both kidneys and L4 of the lumbar spine. The specific points (described in following section) of segmented organs are then reference points which enable the introduction of Local Coordinate System (LCS). This approach for the establishment of the mutexs is reasonable since the organs are stable in there position and provide native support of being rotation invariant.

To segment the reference organs a Kernelized Fuzzy C-Means clustering technique [22] is applied on the CT image series. It maps the fuzzy clustering into a kernel space in order to alleviate weaknesses occurring inevitably by its native use. This efficient method enables robust and fast (computational complexity O(n
                           2)) segmentation process.

The reference points within segmented organs creating the LCS are set as: (i) the furthest to the right and the furthest to the left point belonging to the left and right kidney, respectively, (ii) the center of gravity of L4 of the lumbar spine. The 2D and 3D representations of the segmented aorta lumen, internal organs and LCS reference points are visualized in Figs. 3
                            and 4
                           .

After segmenting the kidneys, the L4 of the lumbar spine and the abdominal aorta, the Subvoxel Precision Based Skeletonization (SPBS) method was applied to the latter. The choice of skeletonization technique was dictated due to its connection to aorta segmentation technique introduced in previous section – both approaches use the Fast Marching Method (FMM). The skeletonization method employs it to generate a distance map on subvoxel precision, while the segmentation technique uses it for the reinitialization purpose. The extraction of the skeletal structure is worthwhile due to attractive properties especially in case where the object geometry is mostly circular. The applied skeletonization technique was introduced in [23]. It targets in generation of subvoxel precise skeletons based on volumetric data using an arbitrary FMM. The main benefit of using SPBS is its continuity – the smallest unit of the skeleton does not have to corresponds to the voxel size of the volumetric grid. Moreover, it works fully automatic – without any user inputs, e.g., number of branches or object specific parameters. The computational demands for the entire algorithm amount to O(hn
                        log
                        n) with h branches forming the skeletal structure and n grid points indicated by 
                           
                              v
                              x
                           
                           ≠
                           0
                         (x depicts the location).

The overall idea behind that method is to detect a global point p
                        ★ with the highest distance to the boundary. Afterwards, an interior point p
                        ≠
                        p
                        ★ is selected with largest distance to p
                        ★, which is then used as starting point of the actual skeleton branch. The branch by itself is established by performing a “gradient descent, backtracking procedure on the fast marching time-crossing map” [23]. These steps are repeated for each skeleton branch and are the subject of a more detailed discussion as part of the following content.

The inputs of the algorithm are the segmented object and its corresponding subvoxel precise distance field. Originally [23], the initialisation was a two step mechanism separates the computation of a time crossing map T from the actual distance field calculation. However, in subsequent years, this approach was replaced by the method presented in [24]. For the purpose of segmentation, the authors propose a method introduced in [19] and being the basis of aorta lumen segmentation step described in previous section. Once the object is segmented, T can be easily generated by invoking the algorithm presented in [24]. From now, the term distance map and time crossing map are used synonymous, since the distance map is a special case of the time crossing map, where all boundary values have been used as a start configuration.

Two further quantities are derived from the time crossing map. This is speed image and the interior object point with the largest distance to the boundary, called the global maximum distance point. The speed image, in detail discussed in [23], is a popular instrument to control the evolution process of a curve. In this context, the speed image υ is derived from the distance field T:


                           
                              
                                 (5)
                                 
                                    
                                       υ
                                       x
                                    
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        
                                                                           a
                                                                           x
                                                                        
                                                                     
                                                                     b
                                                                  
                                                               
                                                            
                                                         
                                                         2
                                                      
                                                   
                                                   
                                                      if
                                                      
                                                      
                                                         a
                                                         x
                                                      
                                                      ∈
                                                      
                                                         Ω
                                                         +
                                                      
                                                   
                                                
                                                
                                                   
                                                      0
                                                   
                                                   
                                                      otherwise
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           where 
                              
                                 a
                                 x
                              
                              ∈
                              
                                 Ω
                                 +
                              
                              ⊆
                              
                                 
                                    
                                       ℝ
                                    
                                 
                                 n
                              
                            depicts the distance values inside the object and b
                           =max(T). The global maximum point is detected by considering all peaks inside the distance map. Therefore, it is sampled in scanline order and the first global maximum value encountering is selected as p
                           ★. This implementation guarantees, that this point will be on the skeletal structure of the skeleton [23].

Through the detection of p
                           ★, the augmented Fast Matching Method (FMM) is introduced [23]. (The Fig. 5
                            illustrates the working principle of the augmented fast marching method.) Therefore, p
                           ★ and υ are used as initialization for a level set curve evolution that is based on a fast marching approach. Then, during each update step, the augmented FMM assigns the piece-wise linear geodesic distance from p
                           ★ to the current voxel. For this purpose, the smallest geodesic distance value, residing in one of the 26 adjacent neighbours at time step t with the Manhattan distance between these two voxels (T
                           
                              ▷) is estimated. In this context, the time step determines the arrival of the curve propagation at the current voxel. Once, the curve evolution terminated, the first end point of a branch is selected by localizing the one with the highest geodesic distance in T
                           
                              ▷. In case that more than one point share the same maximum distance, the point corresponding to the highest value in T is taken:


                           
                              
                                 (6)
                                 
                                    
                                       
                                          
                                             p
                                          
                                       
                                       ♢
                                    
                                    =
                                    arg
                                    
                                       max
                                       
                                          
                                             
                                                
                                                   p
                                                
                                             
                                             
                                                i
                                                ,
                                                j
                                                ,
                                                k
                                             
                                          
                                       
                                    
                                    T
                                    (
                                    
                                       
                                          
                                             p
                                          
                                       
                                       
                                          i
                                          ,
                                          j
                                          ,
                                          k
                                       
                                    
                                    )
                                    .
                                 
                              
                           
                        

Given p
                           ★ and p
                           ♢, the task is now to find the centreline describing the branch between them. It is formulated as minimum-cost path problem [23]. The authors emphasize the benefit of using the speed as cost function in their work, since it guarantees that no skeleton corners will be hugged during the gradient descend back-tracking procedure.

The problem is then formulated as follows:
                              
                                 (7)
                                 
                                    T
                                    (
                                    
                                       
                                          x
                                       
                                    
                                    )
                                    =
                                    arg
                                    
                                       min
                                       
                                          
                                             C
                                             
                                                
                                                   
                                                      
                                                         x
                                                      
                                                   
                                                   ★
                                                
                                                ,
                                                
                                                   
                                                      x
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       ∫
                                       0
                                       N
                                    
                                    c
                                    (
                                    
                                       
                                          C
                                       
                                    
                                    (
                                    u
                                    )
                                    )
                                    du
                                 
                              
                           where c(·) indicates an arbitrary cost function that only depends on the position x and 
                              
                                 
                                    C
                                 
                              
                              (
                              u
                              )
                              :
                              [
                              0
                              ;
                              1
                              )
                              →
                              
                                 
                                    
                                       ℝ
                                    
                                 
                                 n
                              
                            is the parameterized path. The goal is now to find the one between x
                           ★ to x among all other paths 
                              
                                 C
                                 
                                    
                                       
                                          
                                             x
                                          
                                       
                                       ★
                                    
                                    ,
                                    
                                       
                                          x
                                       
                                    
                                 
                              
                            minimizing the cumulative cost defined in (7). Uitert and Bitter [23] emphasize the benefit of using the speed as cost function, since it guarantees that no skeleton corners will be hugged during the gradient descend back-tracking procedure. In order to show the corner preserving functionality, consider the time of traversing a half circle path along the centerline of a half annulus as:


                           
                              
                                 (8)
                                 
                                    T
                                    (
                                    r
                                    ,
                                    a
                                    )
                                    =
                                    
                                       
                                          π
                                          r
                                       
                                       
                                          υ
                                          (
                                          a
                                          )
                                       
                                    
                                    =
                                    π
                                    r
                                    
                                       
                                          
                                             
                                                
                                                   b
                                                   a
                                                
                                             
                                          
                                       
                                       2
                                    
                                    ,
                                 
                              
                           
                        

where r depicts the circle radius, υ is the speed shown in 5 and arepresents distance from the annulus boundary. If the path shifts closer to the outer boundary, it is obvious that this path requires a longer time. In the other case where the path tends to move closer to the center (the inner boundary), the same behaviour can be observed. “Thus, the minimum path in the time-crossing map found during the back-tracking method will result in a branch that is in the central region of the object” [23].

Now, the actual skeleton branch or rather centerline C(u) has to be determined. Therefore, a gradient descent back-tracking method is employed starting at p
                           ♢
                           =
                           C(0) and following ∇
                           T toward the global maximum point p
                           ★:


                           
                              
                                 (9)
                                 
                                    
                                       
                                          d
                                          
                                             
                                                C
                                             
                                          
                                       
                                       du
                                    
                                    =
                                    −
                                    
                                       
                                          ∇
                                          T
                                       
                                       
                                          ‖
                                          ∇
                                          T
                                          ‖
                                       
                                    
                                    .
                                 
                              
                           
                        

The gradient descend procedure is implemented o the basis of the local gradients of T, which are approximated through linear interpolation driven by the gradients residing at the eight corner voxels connecting to the cell in which the active subvoxel location p
                           
                              t
                            is currently located. The next branch point p
                           
                              t+1 is then calculated based on:


                           
                              
                                 (10)
                                 
                                    
                                       
                                          
                                             p
                                          
                                       
                                       
                                          t
                                          +
                                          1
                                       
                                    
                                    =
                                    
                                       
                                          
                                             p
                                          
                                       
                                       t
                                    
                                    −
                                    
                                       
                                          τ
                                          ˙
                                       
                                    
                                    
                                    
                                       
                                          (
                                          
                                             
                                                ∇
                                                ˆ
                                             
                                          
                                          
                                          T
                                          )
                                       
                                       
                                          ∥
                                          
                                             
                                                ∇
                                                ˆ
                                             
                                          
                                          
                                          T
                                          ∥
                                       
                                    
                                    
                                    ,
                                 
                              
                           where 
                              
                                 
                                    ∇
                                    ˆ
                                 
                              
                              
                              T
                            depicts the local gradient as defined above. In [23] the authors propose 
                              
                                 
                                    τ
                                    ˙
                                 
                              
                              =
                              0.01
                           . This value do not perform well during the experiments carrying out in this project. Fig. 6
                            illustrates the problem in 2D, but one can also observe it in 3D. Although the problem occurred only rarely, it leads to gaps inside the skeletal structure. In most cases this problem could be solved by increasing 
                              
                                 τ
                                 ˙
                              
                            to 0.05. However, the procedure reacts highly sensitive to this parameter, e.g. adjusting 
                              
                                 τ
                                 ˙
                              
                            to large also leads to incomplete skeletons. Moreover, T is strong monotonically increasing and thus 
                              ∥
                              
                                 
                                    ∇
                                    ˆ
                                 
                              
                              
                              T
                              ∥
                              ≠
                              0
                            is an always valid condition.

Since the FMM starts at p
                           ★, the time-crossing map keeps a singularity at this location and thus the gradient descend is not well defined any more, consequently it is not able to reach its destination natively. As a solution, the authors propose “to track the tracking” until it reaches p
                           ★ in a distance that is less than one to p
                           ★, which, in turn, is within one voxel unit due to ∥∇
                           T
                           ∥=1. All remaining points are then calculated by a simple interpolation (see [23]).

To complete the final skeleton Steps: 1–5 have to be repeated, changing the input values. First, the global maximum point is merged with all the already detected branch points: 
                              
                                 K
                                 
                                    (
                                    0
                                    )
                                 
                              
                              =
                              {
                              
                                 
                                    
                                       p
                                    
                                 
                                 ★
                              
                              }
                              ,
                                 
                              
                                 K
                                 
                                    
                                    
                                       t
                                       ′
                                    
                                    +
                                    1
                                 
                              
                              =
                              
                                 K
                                 
                                    
                                    
                                       t
                                       ′
                                    
                                 
                              
                              ∩
                              
                                 
                                    
                                       C
                                    
                                 
                                 
                                    
                                    
                                       t
                                       ′
                                    
                                    +
                                    1
                                 
                              
                              =
                              {
                              
                                 
                                    
                                       p
                                    
                                 
                                 0
                              
                              ,
                              
                                 
                                    
                                       p
                                    
                                 
                                 1
                              
                              ,
                              …
                              ,
                              
                                 
                                    
                                       p
                                    
                                 
                                 t
                              
                              ,
                              …
                              
                                 
                                    
                                       p
                                    
                                 
                                 N
                              
                              }
                           . t′ indicates the current iteration of the algorithm. 
                              
                                 K
                                 
                                    
                                    
                                       t
                                       ′
                                    
                                    +
                                    1
                                 
                              
                            is then passed to the augmented FMM and based on the updated geodesic distances a new 
                              
                                 
                                    
                                       p
                                    
                                 
                                 
                                    ♢
                                    ,
                                    
                                    
                                       t
                                       ′
                                    
                                 
                              
                            is determined. Through restarting the gradient-descend tracking procedure at 
                              
                                 
                                    
                                       p
                                    
                                 
                                 
                                    ♢
                                    ,
                                    
                                    
                                       t
                                       ′
                                    
                                 
                              
                            a further, to the skeleton belonging, centerline is started to be extracted (using the same interpolation technique as given in Step 5 [23]). The connection of the new branch with the already existing skeleton front is considered as established, if it is within 
                              
                                 τ
                                 ˙
                              
                            voxels to one of the skeleton points.

As mentioned at the beginning, one of the major benefits which underlines the value of the algorithm is that it determines the number of branches automatically. No user dependent relays are required and the number of parameters that have to be set by the programmer is negligible. The criteria responsible for the termination is a threshold T
                           (Dia) defined as the maximum diameter of the object. In [23] the authors suggest taking the distance from the global maximum point to the boundary twice. It stops the algorithm when a new branch shall be added to the skeleton whose length is below T
                           (Dia).

The exemplary results of application of this method to AAA data are shown in Fig. 7
                           .

After all the previously described steps are performed – aorta and the internal organs are segmented, and skeleton is obtained, the main registration technique (matching process) is incorporated. It includes both, feature extraction and finding of configurations of assignments fitting best to each other from a global perspective. It means, finding the set of correspondences with minimum costs. In the following section the feature extraction part is presented.

The standalone features are sequences of radii. They are obtained by sampling each skeleton path between two end points with a fixed number of sample points. At each location a maximum ball is estimated that still fits to the constraints given by the segmented boundary. The actual calculation of the desired data is realized based on time-crossing map T obtained during the first iteration of the skeletonization method introduced in Section 2.2, where the boundary is only used as initialization.

The reference point dependent features are more sophisticated in comparison to the standalone ones. They are calculated by incorporating the organs segmented in Section 2.1 and replace the standalone features completely. However, both approaches have in common that they operate on a sampling procedure along the shortest path 
                              p
                              (
                              v
                              ,
                              v
                              ′
                              )
                            between two skeleton end points or rather nodes 
                              v
                            and 
                              
                                 v
                                 ′
                              
                              ∈
                              G
                           , where G is the skeleton graph. This path is then sampled by a set of K equally distributed points. Subsequently, each sample point 
                              
                                 
                                    
                                       s
                                    
                                 
                                 
                                    i
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    K
                                 
                                 
                                    (
                                    v
                                    ,
                                    
                                       v
                                       ′
                                    
                                    )
                                 
                              
                            is described with a rotation and scale invariant identifier consisting of four angles calculated in relation to the kidneys (
                              
                                 
                                    
                                       
                                          
                                             e
                                          
                                       
                                       ˙
                                    
                                 
                                 1
                              
                              ,
                              
                                 
                                    
                                       
                                          
                                             e
                                          
                                       
                                       ˙
                                    
                                 
                                 2
                              
                           ) and the spine (
                              
                                 
                                    
                                       e
                                    
                                 
                                 ¯
                              
                           ). The actual descriptor 
                              (
                              
                                 α
                                 
                                    i
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    K
                                 
                                 
                                    
                                    (
                                    v
                                    ,
                                    
                                       v
                                       ′
                                    
                                    )
                                 
                              
                              ,
                              
                                 β
                                 
                                    i
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    K
                                 
                                 
                                    
                                    (
                                    v
                                    ,
                                    
                                       v
                                       ′
                                    
                                    )
                                 
                              
                              ,
                              
                                 γ
                                 
                                    i
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    K
                                 
                                 
                                    
                                    (
                                    v
                                    ,
                                    
                                       v
                                       ′
                                    
                                    )
                                 
                              
                              ,
                              
                                 δ
                                 
                                    i
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    K
                                 
                                 
                                    
                                    (
                                    v
                                    ,
                                    
                                       v
                                       ′
                                    
                                    )
                                 
                              
                              )
                            is then generated based on the direction vectors:


                           
                              
                                 (11)
                                 
                                    
                                       
                                          
                                             v
                                          
                                       
                                       1
                                    
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   e
                                                
                                             
                                             ˙
                                          
                                       
                                       1
                                    
                                    −
                                    
                                       
                                          
                                             e
                                          
                                       
                                       ¯
                                    
                                    ,
                                    
                                    
                                       
                                          
                                             v
                                          
                                       
                                       2
                                    
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   e
                                                
                                             
                                             ˙
                                          
                                       
                                       2
                                    
                                    −
                                    
                                       
                                          
                                             e
                                          
                                       
                                       ¯
                                    
                                    ,
                                    
                                    
                                       
                                          n
                                       
                                    
                                    =
                                    
                                       
                                          
                                             v
                                          
                                       
                                       1
                                    
                                    ×
                                    
                                       
                                          
                                             v
                                          
                                       
                                       2
                                    
                                 
                              
                           
                        

By definition, these vectors are linear independent and thus, the resulting plane 
                              A
                            constitutes an appropriate reference for all required subsequent calculation tasks. The resulting plane 
                              A
                            is depicted with black line in Fig. 4. The finial generation is then accomplished by the following and straightforward formulas known from the field of linear algebra:


                           
                              
                                 (12)
                                 
                                    
                                       
                                          
                                             
                                                α
                                                i
                                             
                                          
                                          
                                             =
                                          
                                          
                                             arccos
                                             (
                                             〈
                                             
                                                
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                      
                                                      ˆ
                                                   
                                                
                                                1
                                             
                                             ,
                                             
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                      
                                                      ˆ
                                                   
                                                
                                                i
                                                
                                                   
                                                   (
                                                   
                                                      
                                                         v
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                      
                                                      ′
                                                   
                                                   )
                                                
                                             
                                             〉
                                             )
                                          
                                       
                                       
                                          
                                             
                                                β
                                                i
                                             
                                          
                                          
                                             =
                                          
                                          
                                             arccos
                                             (
                                             〈
                                             
                                                
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                      
                                                      ˆ
                                                   
                                                
                                                2
                                             
                                             ,
                                             
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                      
                                                      ˆ
                                                   
                                                
                                                i
                                                
                                                   
                                                   (
                                                   
                                                      
                                                         v
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                      
                                                      ′
                                                   
                                                   )
                                                
                                             
                                             〉
                                             )
                                          
                                       
                                       
                                          
                                             
                                                γ
                                                i
                                             
                                          
                                          
                                             =
                                          
                                          
                                             arccos
                                             (
                                             〈
                                             
                                                
                                                   
                                                      
                                                         n
                                                      
                                                   
                                                   ˆ
                                                
                                             
                                             ,
                                             
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                      
                                                      ˆ
                                                   
                                                
                                                i
                                                
                                                   
                                                   (
                                                   
                                                      
                                                         v
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                      
                                                      ′
                                                   
                                                   )
                                                
                                             
                                             〉
                                             )
                                          
                                       
                                       
                                          
                                             
                                                δ
                                                i
                                             
                                          
                                          
                                             =
                                          
                                          
                                             g
                                             (
                                             〈
                                             
                                                
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                      
                                                      ˆ
                                                   
                                                
                                                1
                                             
                                             ,
                                             
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                      
                                                      ˆ
                                                   
                                                
                                                i
                                                
                                                   
                                                   (
                                                   
                                                      
                                                         v
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                      
                                                      ′
                                                   
                                                   )
                                                
                                             
                                             〉
                                             ,
                                             〈
                                             
                                                
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                      
                                                      ˆ
                                                   
                                                
                                                2
                                             
                                             ,
                                             
                                                
                                                   
                                                      
                                                         
                                                            s
                                                         
                                                      
                                                      ˆ
                                                   
                                                
                                                i
                                                
                                                   
                                                   (
                                                   
                                                      
                                                         v
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                      
                                                      ′
                                                   
                                                   )
                                                
                                             
                                             〉
                                             )
                                          
                                       
                                    
                                 
                              
                           with
                              
                                 (13)
                                 
                                    g
                                    (
                                    
                                       
                                          v
                                       
                                    
                                    ,
                                    
                                       
                                          
                                             v
                                          
                                       
                                       ′
                                    
                                    )
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      arctan
                                                      (
                                                      
                                                         
                                                            v
                                                         
                                                      
                                                      /
                                                      
                                                         
                                                            
                                                               v
                                                            
                                                         
                                                         ′
                                                      
                                                      )
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               v
                                                            
                                                         
                                                         ′
                                                      
                                                      >
                                                      0
                                                   
                                                
                                                
                                                   
                                                      arctan
                                                      (
                                                      
                                                         
                                                            v
                                                         
                                                      
                                                      /
                                                      
                                                         
                                                            
                                                               v
                                                            
                                                         
                                                         ′
                                                      
                                                      )
                                                      +
                                                      π
                                                   
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                      
                                                      ≥
                                                      0
                                                      ,
                                                      
                                                         
                                                            
                                                               v
                                                            
                                                         
                                                         ′
                                                      
                                                      <
                                                      0
                                                   
                                                
                                                
                                                   
                                                      arctan
                                                      (
                                                      
                                                         
                                                            v
                                                         
                                                      
                                                      /
                                                      
                                                         
                                                            
                                                               v
                                                            
                                                         
                                                         ′
                                                      
                                                      )
                                                      −
                                                      π
                                                   
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                      
                                                      <
                                                      0
                                                      ,
                                                      
                                                         
                                                            
                                                               v
                                                            
                                                         
                                                         ′
                                                      
                                                      <
                                                      0
                                                   
                                                
                                                
                                                   
                                                      +
                                                      π
                                                      /
                                                      2
                                                   
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                      
                                                      >
                                                      0
                                                      ,
                                                      
                                                         
                                                            
                                                               v
                                                            
                                                         
                                                         ′
                                                      
                                                      =
                                                      0
                                                   
                                                
                                                
                                                   
                                                      −
                                                      π
                                                      /
                                                      2
                                                   
                                                   
                                                      
                                                         
                                                            v
                                                         
                                                      
                                                      <
                                                      0
                                                      ,
                                                      
                                                         
                                                            
                                                               v
                                                            
                                                         
                                                         ′
                                                      
                                                      =
                                                      0
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           where 
                              
                                 
                                    
                                       
                                          
                                             v
                                          
                                       
                                       ˆ
                                    
                                 
                                 i
                              
                           , 
                              
                                 
                                    
                                       
                                          
                                             s
                                          
                                       
                                       ˆ
                                    
                                 
                                 i
                                 
                                    
                                    (
                                    
                                       
                                          v
                                       
                                    
                                    ,
                                    
                                       
                                          
                                             v
                                          
                                       
                                       ′
                                    
                                    )
                                 
                              
                            and 
                              
                                 
                                    
                                       n
                                    
                                 
                                 ˆ
                              
                            are unit vectors of v
                           
                              i
                           , 
                              
                                 
                                    
                                       s
                                    
                                 
                                 i
                                 
                                    
                                    (
                                    
                                       
                                          v
                                       
                                    
                                    ,
                                    
                                       
                                          
                                             v
                                          
                                       
                                       ′
                                    
                                    )
                                 
                              
                            and n, respectively. In order to estimate the dissimilarity between two paths p(v, v′) and 
                              p
                              (
                              
                                 
                                    
                                       
                                          v
                                       
                                    
                                    ˙
                                 
                              
                              ,
                              
                                 
                                    
                                       
                                          
                                             v
                                          
                                       
                                       ˙
                                    
                                 
                                 ′
                              
                              )
                            (with 
                              
                                 
                                    
                                       
                                          
                                             v
                                          
                                       
                                       ˙
                                    
                                 
                                 ′
                              
                              ,
                              
                                 
                                    
                                       
                                          v
                                       
                                    
                                    ˙
                                 
                              
                              ∈
                              
                                 
                                    G
                                    ˙
                                 
                              
                           ) as well as to perform the actual matching procedure, all s
                           
                              i
                            values are stored in a path signature vector, e.g., 
                              
                                 
                                    
                                       z
                                    
                                 
                                 
                                    (
                                    
                                       
                                          v
                                       
                                    
                                    ,
                                    
                                       
                                          
                                             v
                                          
                                       
                                       ′
                                    
                                    )
                                 
                              
                              =
                              (
                              
                                 
                                    
                                       s
                                    
                                 
                                 1
                              
                              ,
                              …
                              ,
                              
                                 
                                    
                                       s
                                    
                                 
                                 
                                    i
                                    −
                                    1
                                 
                              
                              ,
                              
                                 
                                    
                                       s
                                    
                                 
                                 K
                              
                              )
                           .

The quality of the matching results strongly relies on fitness of the features used for it. They should describe the characteristic of the underlying structure in an unique, robust and mostly invariant way. If it is not like this, even the strongest matching algorithm will not be able to find the right correspondences. However, also the decision of the selected matching algorithm influences the finding of the best configuration remarkably. Therefore, two methods: Path Similarity Skeleton Graph Matching (PSSGM) [25] and Maximum Weight Cliquess (MWC) [27] are employed and compared afterwards.

In both cases, the paths dissimilarities are used as input. More specifically, the Hungarian (in PSSGM) takes the values as total input while the MWC technique only partially operates on it. Technically, the path signature vectors 
                           
                              
                                 
                                    z
                                 
                              
                              
                                 (
                                 v
                                 ,
                                 
                                    v
                                    ′
                                 
                                 )
                              
                           
                         and 
                           
                              
                                 
                                    z
                                 
                              
                              
                                 (
                                 
                                    
                                       v
                                       ˙
                                    
                                 
                                 ,
                                 
                                    
                                       
                                          v
                                          ˙
                                       
                                    
                                    ′
                                 
                                 )
                              
                           
                         are separated during the calculation and their values are considered individually. Therefore, let 
                           p
                           (
                           v
                           ,
                           
                              v
                              ′
                           
                           )
                         be a path in G between the nodes 
                           v
                         and 
                           
                              v
                              ′
                           
                        . Further, 
                           p
                           (
                           
                              
                                 v
                                 ˙
                              
                           
                           ,
                           
                              
                                 
                                    v
                                    ˙
                                 
                              
                              ′
                           
                           )
                         depicts one in 
                           
                              G
                              ˙
                           
                        . Finally, assume that both are ordered and encompassing N, and 
                           
                              N
                              ˙
                           
                         nodes with 
                           N
                           ≤
                           
                              
                                 N
                                 ˙
                              
                           
                        , respectively. The actual path distance is then derived as:


                        
                           
                              (14)
                              
                                 
                                    P
                                    d
                                 
                                 (
                                 p
                                 (
                                 v
                                 ,
                                 
                                    v
                                    ′
                                 
                                 )
                                 ,
                                 p
                                 (
                                 
                                    
                                       
                                          v
                                          ˙
                                       
                                    
                                    ′
                                 
                                 ,
                                 
                                    
                                       v
                                       ˙
                                    
                                 
                                 )
                                 )
                                 =
                                 ψ
                                 (
                                 
                                    
                                       
                                          z
                                       
                                    
                                    α
                                    
                                       (
                                       v
                                       ,
                                       
                                          v
                                          ′
                                       
                                       )
                                    
                                 
                                 ,
                                 
                                    
                                       
                                          z
                                       
                                    
                                    α
                                    
                                       (
                                       
                                          
                                             v
                                             ˙
                                          
                                       
                                       ,
                                       
                                          
                                             
                                                v
                                                ˙
                                             
                                          
                                          ′
                                       
                                       )
                                    
                                 
                                 )
                                 +
                                 ψ
                                 (
                                 
                                    
                                       
                                          z
                                       
                                    
                                    β
                                    
                                       (
                                       v
                                       ,
                                       
                                          v
                                          ′
                                       
                                       )
                                    
                                 
                                 ,
                                 
                                    
                                       
                                          z
                                       
                                    
                                    β
                                    
                                       (
                                       
                                          
                                             v
                                             ˙
                                          
                                       
                                       ,
                                       
                                          
                                             
                                                v
                                                ˙
                                             
                                          
                                          ′
                                       
                                       )
                                    
                                 
                                 )
                                 +
                                 ψ
                                 (
                                 
                                    
                                       
                                          z
                                       
                                    
                                    γ
                                    
                                       (
                                       v
                                       ,
                                       
                                          v
                                          ′
                                       
                                       )
                                    
                                 
                                 ,
                                 
                                    
                                       
                                          z
                                       
                                    
                                    γ
                                    
                                       (
                                       
                                          
                                             v
                                             ˙
                                          
                                       
                                       ,
                                       
                                          
                                             
                                                v
                                                ˙
                                             
                                          
                                          ′
                                       
                                       )
                                    
                                 
                                 )
                                 
                                 +
                                 ψ
                                 (
                                 
                                    
                                       
                                          z
                                       
                                    
                                    δ
                                    
                                       (
                                       v
                                       ,
                                       
                                          v
                                          ′
                                       
                                       )
                                    
                                 
                                 ,
                                 
                                    
                                       
                                          z
                                       
                                    
                                    δ
                                    
                                       (
                                       
                                          
                                             v
                                             ˙
                                          
                                       
                                       ,
                                       
                                          
                                             
                                                v
                                                ˙
                                             
                                          
                                          ′
                                       
                                       )
                                    
                                 
                                 )
                                 ,
                              
                           
                        where ψ(·, ·) implements a Dynamic Time Wrapping (DTW). The DTW is the appropriate choice for this task because of its capability to perform an elastic and/or partial matching of two sequences. Having this measure, the costs for assigning two nodes, e.g., 
                           v
                         and 
                           
                              v
                              ˙
                           
                         is calculated based on the values received by the DTW. For this purpose the Optimal Subsequence Bijection (OSB) [26] method is applied to them. The costs, e.g. 
                           c
                           (
                           v
                           ,
                           
                              
                                 v
                                 ˙
                              
                           
                           )
                        , are estimated using all paths emanating from 
                           v
                         and 
                           
                              v
                              ˙
                           
                        . The advantage of doing this is, that the OSB finds the subsequence a′ in sequence a that best matches b′ in b skipping possible outlier elements. To prevent that too many elements of a sequence are skipping, the authors of the OSB suggest a penalty term. This term is defined in analogy to the original paper [26]. The whole procedure is then repeated for all combination of nodes in G and 
                           
                              G
                              ˙
                           
                        . Once all information are generated, they can be directly passed to the Hungarian, where the matching is performed based on a bipartite graph. The execution of the MWS approach requires more efforts and shall be subject of the following content.

In context of finding WMC, the authors [27] express the matching problem as a integer quadratic program with the goal to find maximal weight cliques in an undirected affinity graph G
                           ★ satisfying a certain set of constrains. In order to populate the corresponding affinity matrix A 
                           unary potentials (the weight of a vertex; diagonal entries) as well as binary potentials (weight of the edges; off-diagonal entries) have to be determined.


                           Unary Potentials. These quantities are derived from the values returned by the OSB. They constitute the easiest set of numbers required here. However, one crucial point has to be considered. The method expects similarity values instead of dissimilarities. The actual implementation of the conversion is straightforward and falls back to Gaussian function which takes the OSB outcome as input.


                           Binary Potentials. Hence, the pairwise distance consistency measure is reused to generated the edge weights between two assignments 
                              
                                 u
                                 ★
                              
                              =
                              (
                              v
                              ,
                              
                                 
                                    v
                                    ˙
                                 
                              
                              )
                            and 
                              
                                 u
                                 ♢
                              
                              =
                              (
                              
                                 v
                                 ′
                              
                              ,
                              
                                 
                                    
                                       v
                                       ˙
                                    
                                 
                                 ′
                              
                              )
                           :


                           
                              
                                 (15)
                                 
                                    
                                       
                                          
                                             A
                                          
                                       
                                       
                                          (
                                          
                                             u
                                             ★
                                          
                                          ,
                                          
                                             u
                                             ♢
                                          
                                          )
                                       
                                    
                                    =
                                    exp
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         (
                                                         f
                                                         (
                                                         v
                                                         ,
                                                         
                                                            v
                                                            ′
                                                         
                                                         )
                                                         −
                                                         f
                                                         (
                                                         
                                                            
                                                               v
                                                               ˙
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               
                                                                  v
                                                                  ˙
                                                               
                                                            
                                                            ′
                                                         
                                                         )
                                                         )
                                                      
                                                      2
                                                   
                                                
                                                
                                                   2
                                                   
                                                      Θ
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                    ,
                                 
                              
                           where f(·, ·) calculates the Euclidean distance and Θ adjusts the influence of geometric deformations on the result. Finally, all values are normalized to a range of [0, 1] in order to remain scale invariant because of varying resolutions between different CT scans.


                           Mutual Exclusion Constraints. These limitations to the search space in form of a mutex matrix M are realized by simple geometrical relations which are enforced to be kept during the matching. Therefore, the plane 
                              A
                           , established in correlation with the feature generation process, is reused in this context. The decision to employ the vectors v
                           1, v
                           2 and n is absolutely reasonable, since they are an appropriate instrument to operate as a LCS. This becomes more obvious, if one considers the existing facts which are highly attractive for the purpose to impose robust constraints on the correspondence configuration. Firstly, the vectors spanning the plane are linear independent. Secondly, the information is accessible without any further computation step. Thirdly, geometrical relations like, e.g., up/down are easy to implement. This kind of description performs robustly and leads to excellent results. The exemplary results of matching two CTA series of one patient, or more accurately their skeletons are shown in Fig. 8
                           . The results of AAA skeletons matching for examinations of different patients are shown in Figs. 9 and 10
                           
                           .

@&#RESULTS@&#

The presented segmentation/registration framework was tested on the database provided by the SOVAmed GmbH. It consists of 9 pairs of of CTA series to be segmented and matched. The examinations contain pre- as well as post-operative series (in total 18). Based on the normalized CTA data the number of clusters used in initial surface construction was set to 5. In the employed hybrid level-set segmentation technique [18], a boundary feature map related to the image gradient is a decreasing function g such as
                        
                           (16)
                           
                              g
                              =
                              
                                 1
                                 
                                    1
                                    −
                                    a
                                    |
                                    ∇
                                    I
                                    
                                       |
                                       2
                                    
                                 
                              
                              ,
                           
                        
                     with the constant a controlling the slope set to 5. The parameters required for (1) are set to η
                     =0.5 and τ
                     =0.2, respectively. The required parameters were chosen experimentally. The experiments were performed on randomly selected 1/3 of the available CTA volumes. The change of parameters mostly results in segmentation of to small regions, in the extreme case, leading to skipping of single branch. However, this problem affecting further registration step is rare.

For the database we analyse does not exist gold standard for validation of the segmentation step. To the best of our knowledge and according to the information given in [15] there do not exist any standard for evaluation of registration results. Due to the fact, that the idea of our paper is to perform the registration of the volumetric data using graph matching procedure, for the validation the corresponding skeleton points – end nodes given by an expert are used. For this, the correct and sufficient segmentation followed by skeletonization step should provide the full skeleton containing all the corresponding points omitting the outliers. The proposed set-up makes it possible to efficiently segment the aorta and reference organ points in all 18 analysed series. The segmentation results were compared to the segmentation results obtained using classical level set approach described in [20] as well as the newest hybrid technique presented in [5]. The proposed technique outperforms the level set approach [20], which tends to leak out of weak boundaries creating false positive skeleton branches. The segmentation results obtained using [5] are comparable to those obtained using the introduced technique, but the technique developed in [5] is connected with a bit higher computational complexity. However, for a future work with extended database we consider to apply the method [5], which is recommended also for inhomogeneous structure.

The most sophisticated part of the skeletonization algorithm is the shortest path computation, which is responsible for the establishment of the skeleton branches. Therefore, the method uses a back-tracking mechanism to track the centerline along the gradient descent inside the time crossing map. The set up required for this is defined in two steps: (1) selection of the method used to approximate the local gradient; (2) selection of the step size 
                        
                           τ
                           ˙
                        
                     , which is applied to the previously computed gradient in order to find the next sample location in the space (see eq. (10)). The (1) is done based on an n-linear interpolation between the gradients at the corners of the cell, in which the current sample point resides (Euclidean method). In [23] the step size (2) is set to 
                        
                           
                              τ
                              ˙
                           
                        
                        =
                        0.01
                     . However, for this setting, the algorithm does not converge and gets lost after some iteration – a wrong gradient to generate the next sample location is calculated, what is shown in Fig. 6. To avoid this situation the step size is increased to 
                        
                           
                              τ
                              ˙
                           
                        
                        =
                        0.5
                     .

The obtained segmentation and skeletonization results were then used in a matching/registration step. For all the analysed pairs of volumetric data the matching algorithm based on Hungarian method as well as Maximum Weight Cliques were investigated. The developed registration technique targets in findings correlation between the segmented skeleton points rather than transforming the whole CT volume. Such a solution is sufficient for the reliable comparison of AAA patients and thanks to avoiding the analysis of the whole volume is much faster and less error-prone than the global optimization. It is specially important in case of the analysis of CT database where the mean resolution of a single series/examination is of 512×512×213 pixels. The obtained matching can be used for the full registration scheme as the landmarks data. For instance, the authors of the most cited paper in multi-modal medical image registration area [16] define a deformation of registered image by minimizing an energy functional based on the images subject to the landmark conditions. However, we tried to register one skeleton to the other using non-rigid B-spline grid based registration [17]. The registration results are shown in Fig. 11
                     . Due to the fact that the corresponding points/landmarks are not known before the analysis, the algorithm targets in transforming all the points in the volume minimizing the global energy functional producing incorrect registration results. In case, when the skeletons with different number/length of branches are analysed the voxel-based analysis fails. The two algorithms introduced and modified in our work target in finding and matching the corresponding skeleton nodes and are robust even in case of registration of very different skeleton structures.

The matching results were verified using the correspondence defined by the expert. In each registered pair of data the expert indicated the points to match. As a registration results a labeled skeleton points on both series were marked, so that we were able to verify them (see Fig. 12
                     ). For all the analysed data sets 7–14 end-points (depending on the series) of the skeletons to match were detected. The tests were divided into two separate parts. In the first one the presented algorithms were used to match/register two CTA series of a single patient, whereas the second one uses all the combinations of the data (144 of series to match). For the first part of the analysis the Hungarian matching technique resulted 6 totally correct matches (all the correspondence were found correctly) and a mean accuracy of 88% correctly matched end points (65 of 74). Much better results were obtained using the MWCs technique, where in 7 of 9 series the results were totally correct and the mean accuracy was equal to 96% correctly matched points (68 of 71). For the second phase of the tests the mean accuracy of MWCs technique was equal to 73% (888 of 1212 correctly matched points). Much worst results were obtained using PSSGM, where the mean accuracy was 55%. To evaluate the proposed organ oriented coordinate system modification to the matching step, the obtained results were also compared with the classical skeleton based object matching [25] using the radii information as feature. The mean accuracy for this was 50%, what proofs the validity of introduced steps and changes. However, for the medical usage of developed set-up further improvements to segmentation as well as registration part are needed.

@&#CONCLUSION@&#

The paper presents the comparison of two skeleton matching techniques applied to 3D registration of abdominal aortic aneurysm in CTA. Both the developed/investigated method consist of 3D segmentation of aorta and internal organs, skeletonization step and graph-based matching parts. The results are evaluated on the basis of real CTA data of patients with abdominal aortic aneurysm. All the obtained results were verified by the human expert, who compared the real correlation of the pre- and post-operative studies with the results created by our system. The promising results encourage to further develop this technique. In our work we plan to improve the segmentation as well as registration results incorporating a context analysis of the image data.

The novelty of our paper is the concept of the data registration system, selection of the state-of-the-art methods, their optimization and medical application for them. The classical skeleton based matching procedure is extended using organ-oriented coordinate system. The known from literature skeleton-based registration techniques were not validated for the assessment of aneurysm treatment yet and the presented results might be useful for future work in this area. The proposed medical application introduces the registration of AAA follow up studies as well as comparative analysis of the treatment applied for different patients. The presented graph-based algorithm is insensitive to difference in image intensities and after introducing additional preprocessing steps might be used in rigid/non-rigid registration of different modalities (i.e. preoperative CT to intra-operative US).

@&#ACKNOWLEDGEMENTS@&#

This work was funded by the German Research Foundation(DFG) as part of the research training group GRK 1564 “Imaging New Modalities”. The research is supported by the NCN Grant no. UMO-2012/05/B/ST7/02136. The experimental data were provided by SOVAmed GmbH: www.sovamed.com/en.

@&#REFERENCES@&#

