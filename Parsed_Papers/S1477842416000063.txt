@&#MAIN-TITLE@&#An array content static analysis based on non-contiguous partitions

@&#HIGHLIGHTS@&#


               
                  
                  
                     
                        
                           
                           An abstract domain that partitions array elements according to semantic properties.


                        
                        
                           
                           The abstract domain can represent non-contiguous partitions.


                        
                        
                           
                           Allowing empty groups eliminates the need for global disjunction.


                        
                        
                           
                           We verify two non-trivial invariants in two distinct operating systems.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Array analysis

Abstract domain

Program verification

@&#ABSTRACT@&#


               
               
                  Conventional array partitioning analyses split arrays into contiguous partitions to infer properties of sets of cells. Such analyses cannot group together non-contiguous cells, even when they have similar properties. In this paper, we propose an abstract domain which utilizes semantic properties to split array cells into groups. Cells with similar properties will be packed into groups and abstracted together. Additionally, groups are not necessarily contiguous. This abstract domain allows us to infer complex array invariants in a fully automatic way. Experiments on examples from the Minix 1.1 memory management and a tiny industrial operating system demonstrate the effectiveness of the analysis.
               
            

@&#INTRODUCTION@&#

Arrays are ubiquitous, yet their mis-use often causes software defects. Therefore, a large number of works address the automatic verification of array manipulating programs. In particular, partitioning abstractions [12,18,20] split arrays into sets of contiguous groups of cells (also called segments), in order to, hopefully, infer that they enjoy similar properties. A traditional example is that of an initialization loop, with the usual invariant that splits the array into an initialized zone (the segment from index 0 to the current index) and an uninitialized region (the segment from the current index to the end of the array).

However, when cells that have similar properties are not contiguous, these approaches cannot infer adequate array partitions. This happens for unsorted arrays of structures, when there is no relation between indexes and cell fields. Sometimes the partitioning of array elements relies on relations among cell fields. This phenomenon can be observed in low-level software, such as operating system services and critical embedded systems drivers, which rely on static array zones instead of dynamically allocated blocks [30]. When cells with similar properties are not contiguous, traditional partition based techniques are unlikely to infer relevant partitions/precise array invariants.


                     Fig. 1
                      illustrates the Minix 1.1 Memory Management Process Table (MMPT) main structure. The array of structures mproc defined in Fig. 1(a) stores the process descriptors. Each descriptor comprises a field mparent that stores the index of the parent process in mproc, and a field mpflag that stores the process status. Fig. 1(c) depicts the concrete values stored in mproc to describe the process topology shown in Fig. 1(b) (the whole mproc table consists of 24 slots, here we show only 8, for the sake of space). An element of mproc is a process descriptor when its field mpflag is strictly positive and a free slot if it is null. Minix 1.1 uses the three initial elements of mproc to store the descriptors of the memory management service, the file system service and the init process. Descriptors of other processes appear in a random order. In the example of Fig. 1, init has two children whose descriptors are in 
                        mproc
                        [
                        3
                        ]
                      and 
                        mproc
                        [
                        4
                        ]
                     ; similarly, the process corresponding to 
                        mproc
                        [
                        4
                        ]
                      has a single child the descriptor of which is in 
                        mproc
                        [
                        6
                        ]
                     . Moreover, Minix assumes a parent–child relation between mm and fs, as mm has index 0 and the parent field of fs stores 0. To abstract the process table state, valid process descriptors and free slots should be partitioned into different groups.

Traditional, contiguous partitioning cannot achieve this for two reasons: (1) the order of process descriptors in mproc cannot be predicted, hence is random in practice, and (2) there is no simple description of the boundaries between these regions (or even their sizes) in the program state. The symbolic abstract domain by Dillig, Dillig and Aiken [15] also fails here as it cannot attach arbitrary abstract properties to summarized cells.

In this paper, we set up an abstract domain to partition the array into non-contiguous groups for process descriptors and free slots so as to infer this partitioning and precise invariants (Section 2) automatically. Our contributions are:
                        
                           •
                           An abstract domain that partitions array elements according to semantic properties, and can represent non contiguous partitions (Section 4).

Static analysis algorithms for the computation of abstract post-conditions (Sections 5 and 6), widening and inclusion check (Section 7).

The implementation and the evaluation of the analysis on the inference of tricky invariants in excerpts of some operating systems (e.g. Minix 1.1) and other challenging array examples (Sections 8 and 9).

@&#OVERVIEW@&#

Minix is a Unix-like multitasking computer operating system [31]. It is a very small OS (with fewer than 10000 lines of kernel), yet it greatly influenced the design of other kernels, including Linux. It is based on a micro-kernel architecture, with separate, lightweight services respectively in charge of task scheduling (in kernel), memory management and file system. Each service maintains a process table that describes the processes currently running. The tables of distinct services are consistent with each other. In the following, we consider the process table of the memory management service, which is very similar to that of the other services (and is quite representative of process table structures in operating systems kernels). This process table consists of an array mproc that stores the memory management information for each process in a distinct slot. As in all Unix operating systems, processes form a reversed tree, where each process has a reference to its parent (which created it) and is referred to by its children (which it created).

New processes can be created by the system call fork from a parent process. A process exits after it calls exit and its parent calls wait. These two system calls form a synchronization barrier and the process and its parent are set to be “hanging” and “waiting” respectively when they reach the barrier first. In Fig. 1(b), the process described by 
                        mproc
                        [
                        4
                        ]
                      would be “hanging” after it calls exit if 
                        mproc
                        [
                        2
                        ]
                      is not “waiting”, and after 
                        mproc
                        [
                        2
                        ]
                      calls wait, 
                        mproc
                        [
                        4
                        ]
                      will exit. System calls fork, wait and exit are first handled by memory management and then passed on to task scheduling and file system if needed. One function and three system calls perform atomic changes on the process table structure:
                        
                           •
                           function mm_init is called when the operating system is initialized and constructs slots in mproc for the first three system level processes;

system call fork creates a process descriptor in mproc if there exists at least one free slot, and returns an error code otherwise;

system call wait frees the hanging descendants of the parameter process and sets itself to waiting if it has descendants that are not hanging;

system call exit frees the parameter process and its hanging descendants if its parent is waiting, or sets itself to hanging.


                     Invariants: The global invariant of the process table is very complex, as it describes the reversed tree shown in Fig. 1(b). In this paper, we consider the verification of the memory safety of the operations on the Minix memory management process table (and of other similar process tables, as we remarked they are overall quite similar), which actually does not require the verification of that strong invariant, but can be established by verifying a weaker set of properties instead:
                        
                           •
                           Each valid process descriptor has an mparent field that should store a value in 
                                 [
                                 0
                                 ,
                                 23
                                 ]
                               (since the length of array mproc is 24), hence represents a valid index in mproc: this entails the absence of out-of-bound accesses in process table management functions.

The mparent field of any valid process descriptor should be the index of a valid process descriptor: as a process can only complete its exit phase when its parent calls wait, failure to maintain a parent for each process could cause a terminating process to become dangling and never be eliminated.


                     Abstraction: To capture the properties expressed by 
                        C
                     , the analysis should utilize an abstraction that splits the set of cells in the array mproc into two groups of cells: the first group consists of valid process descriptors whereas the second group collects the free slots. However, we notice that each of these groups of cells is not contiguous in general. Indeed, while the slots representing valid processes are allocated from the beginning of the array at the start-up, as soon as some processes terminate, the group of slots representing valid processes is not contiguous anymore. For instance, the process state shown in Fig. 2
                     (a) corresponds to the table of Fig. 1(c), where both the groups of valid processes and the group of free slots are non-contiguous. In this picture, group 0 consists of all the valid process descriptors whereas group 1 collects all free slots.

Once the cells of the array are partitioned into these two groups, the values of the individual fields of the slots can be abstracted in a rather precise manner as shown in Fig. 2(b).

We let 
                        
                           
                              G
                           
                           
                              i
                           
                        
                      denote the set of indexes of all the elements in group i. The abstract state shown in Fig. 2(b) ties each group to properties of its elements. These will be formally defined in Section 4. By the Minix specification, the elements of group 0 satisfy the following correctness conditions in 
                        C
                     :
                        
                           •
                           their indexes are in 
                                 [
                                 0
                                 ,
                                 23
                                 ]
                              , which we note 
                                 0
                                 ≤
                                 
                                    
                                       
                                          
                                             Idx
                                          
                                          
                                             ̲
                                          
                                       
                                    
                                    
                                       0
                                    
                                 
                                 ≤
                                 23
                               in Fig. 2(b);

the size of group 0 is between 0 and 24, which we note 
                                 0
                                 ≤
                                 
                                    
                                       
                                          
                                             Sz
                                          
                                          
                                             ̲
                                          
                                       
                                    
                                    
                                       0
                                    
                                 
                                 ≤
                                 24
                              ;

their flag fields are in 
                                 [
                                 1
                                 ,
                                 63
                                 ]
                              , which we note 
                                 1
                                 ≤
                                 
                                    
                                       
                                          
                                             mpflag
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       0
                                    
                                 
                                 ≤
                                 63
                              ; field 
                                 mpflag
                               uses 6 bits to indicate the state of that cell (including in_use, waiting and hanging), and valid process descriptors have a strictly positive flag;

their parents are valid indexes, which we note 
                                 0
                                 ≤
                                 
                                    
                                       
                                          
                                             mparent
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       0
                                    
                                 
                                 ≤
                                 23
                              ;

their parent fields are indexes of valid process descriptors, hence are also in group 0, which we note 
                                 
                                    
                                       
                                          
                                             mparent
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       0
                                    
                                 
                                 ◃
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                              .


                     Analysis: We now consider the verification of the functions that operate on the Minix memory management process table. In the remainder of this section, we focus on auxiliary function cleanup, which is called by wait and exit, and that turns elements of mproc that describe hanging processes into free slots. This function provides a representative view of the challenges that arise when analyzing the other functions manipulating this process table. It consists of a case split, depending of the nature of the process to cleanup. Fig. 3
                     (a) displays an excerpt of a de-recursified version of cleanup, which handles the case where the process being cleaned-up is a child of init. This situation arises if we consider calling 
                        cleanup
                        (
                        4
                        )
                      in the state shown in Fig. 2(a): indeed, this will cause the removal of user process usr0 which has init as parent; this means that process usr2 should become a child of init, while the record formerly associated to usr0 turns into a free slot, the result is shown in Fig. 3(b).

The correctness of the whole process table management relies on the fact that system calls wait and exit will always call cleanup in a state where the process table is correct, and where the process that will be cleaned up is a currently valid user process. This means that function cleanup should always be called in a state that satisfies the pre-condition defined by the correctness conditions listed in the previous paragraph, and where argument child is in group 0 (i.e., is valid), and greater than 2 (user process), which we note 
                        child
                        ◃
                        
                           
                              G
                           
                           
                              0
                           
                        
                        ∧
                        child
                        >
                        2
                     . Fig. 4
                      overviews the main local invariants that can be obtained on the excerpt of cleanup, and starting from that pre-condition. To compute this automatically, our analysis shall proceed by performing a forward abstract interpretation of the procedure, computing sound post-conditions and loop invariants [10]. In this section, we discuss the main original aspects of this analysis, namely (1) cell materialization (to allow strong updates), (2) termination of the loop analysis and (3) pruning of unnecessary groups.

As remarked above, function cleanup should be called only in states that satisfy 
                        C
                     , and where predicate 
                        child
                        ◃
                        
                           
                              G
                           
                           
                              0
                           
                        
                        ∧
                        child
                        >
                        2
                      holds (which means 
                        mproc
                        [
                        child
                        ]
                      may be any element of group 0 the index of which is greater than 2) as shown in 
                        
                           
                              
                           
                        
                      of Fig. 4. After the assignment in line 2, the analysis infers that parent is also an index in group 0, since 
                        C
                      entails that 
                        
                           
                              
                                 
                                    mparent
                                 
                                 
                                    ^
                                 
                              
                           
                           
                              0
                           
                        
                        ◃
                        
                           
                              G
                           
                           
                              0
                           
                        
                      (the parent of any valid process is also a valid process). The resulting abstract state is shown in ①. The analysis of an update to the array is more complex. Indeed, at line 4, array cell 
                        mproc
                        [
                        child
                        ]
                      is modified, and while this cell is known to belong to group 
                        
                           
                              G
                           
                           
                              0
                           
                        
                     , this group may have several elements (it has at least one element since 
                        child
                        ◃
                        
                           
                              G
                           
                           
                              0
                           
                        
                     , thus 
                        
                           
                              
                                 
                                    Sz
                                 
                                 
                                    ̲
                                 
                              
                           
                           
                              0
                           
                        
                        ≥
                        1
                     ). Therefore, and in order to perform a strong update, our analysis first materializes the array element that is being modified, by splitting group 0 into two groups, labeled 0 and 2, where group 2 has exactly one element, corresponding to 
                        mproc
                        [
                        child
                        ]
                      (which is also expressed by 
                        child
                        ◃
                        
                           
                              G
                           
                           
                              2
                           
                        
                     ). Both groups inherit predicates from former group 0. Since group 2 has a single element (
                        
                           
                              
                                 
                                    Sz
                                 
                                 
                                    ̲
                                 
                              
                           
                           
                              2
                           
                        
                        =
                        1
                     ) which corresponds exactly to the modified cell, the analysis can perform a strong update at this stage, and it generates the abstract state ②. Materialization is a common technique in static analysis. However, in our case, this technique does not require the analysis to make case splits and to use a disjunction abstract domain, as is often the case, e.g., in shape analysis [8,6]. This operation will be described in detail in Section 6.

The analysis of all the atomic statements in the program follows similar principles. We now discuss the termination of the loop analysis. Since our abstract domain has infinite chains (the number of groups is not bounded), and to ensure the termination of the analysis of loops, we need to use a terminating widening operator [10]. The widening operator of our array domain associates groups with similar properties from its two input abstract states (even if they disagree on the number of groups) by a heuristic group matching scheme, and it over-approximates the predicates attached to them. Termination is guaranteed by ensuring that the number of groups can only decrease. In this example, the post-fixpoint ③ is obtained after two widening iterations. In the post-fixpoint groups 0 (resp., 3) represent valid process descriptors with indexes greater (resp., lower) than i, group 1 describes the free slots, and group 2 consists of 
                        mproc
                        [
                        child
                        ]
                      (the process that was just cleaned up).

Compared to other array analyses, indexes of array cells play a less important role in our analysis, since localization and materialization of cells are based on the groups, and thus on all the relations over group fields and group membership. However, information about the relations between loop indexes and groups matters greatly. For instance, the loop abstract post-fixpoint ③ shows that indexes of elements in group 0 are greater than i. Thus, after the loop exit, any element of group 0 should have an index greater than 24, which implies that this group is empty at that point. Hence, this group can be pruned out, and the analysis produces post-condition ④ after the loop. This example shows that our analysis can reduce the number of groups, when some become redundant (e.g., when it proves a group empty).

Post-condition ④ entails that correctness condition 
                        C
                      holds at the end of the execution of cleanup (note that group 2, corresponding to child now describes a free slot). Combining the fact that the post-condition of the else branch (line 12) also entails correctness condition 
                        C
                      (the analysis process is not shown here, as it is mostly similar), our analysis verifies that correctness condition 
                        C
                      always holds when function cleanup returns.

In this section, we fix notations and set up a simple array imperative language that we are going to use in order to formalize the analysis. The syntax of this language is shown in Fig. 5
                     (b).


                     Syntax: We let 
                        N
                      denote the set of non-negative integers and 
                        F
                      denote the set of fields. Our language allows two kinds of types. Base types B include boolean, floating point and integer. Structural types T describe arrays of structures. Variables of types B and T are denoted by 
                        V
                      and 
                        A
                      respectively. This language also allows variables of structure type (they are considered arrays of length 1), and arrays of base type values (they are arrays of structures made of a single field).

We restrict the form of array cell accesses (to read or write a value) to expressions of the form 
                        a
                        [
                        v
                        ]
                     , where 
                        v
                      is a variable, which will simplify both the semantics and the definition of the analysis (more complex array accesses can be decomposed into expressions of this form using auxiliary variables). However, we do not consider array accesses through pointer dereference (analyzing such expressions would merely require extending our analysis by taking a product with a pointer domain). These restrictions allow us to streamline the language under consideration around the purpose of our analysis, namely, to deal with arrays of complex data structures. Statements s comprise skip, variables declarations, assignments and control structures (condition tests, loops, sequences).


                     Concrete states and semantics: A concrete state σ is a partial function mapping basic cells (base variables and fields of array cells) into values (which are denoted by 
                        Val
                     ). The set 
                        S
                      of concrete states is defined by 
                        σ
                        ∈
                        S
                        =
                        (
                        
                           A
                           ×
                           N
                           ×
                           F
                           ∪
                           V
                        
                        )
                        →
                        Val
                     . More specifically, the set of all fields of cells of array a is denoted by 
                        
                           
                              F
                           
                           
                              a
                           
                        
                     , and the set of valid indexes in 
                        a
                      is denoted by 
                        
                           
                              N
                           
                           
                              a
                           
                        
                     .


                     Fig. 5 (c) defines the concrete collecting semantics of expressions, l-values, condition tests and statements. The semantics 
                        〚
                        ex
                        〛
                      of expression 
                        ex
                      maps a state into the value 
                        ex
                      evaluates to. The semantics 
                        〚
                        lv
                        〛
                      of l-value 
                        lv
                      maps a state into the cell 
                        lv
                      evaluates to. The semantics 
                        〚
                        cond
                        〛
                      of condition 
                        cond
                      filters out the states in which 
                        cond
                      does not evaluate to TRUE. The semantics 
                        〚
                        s
                        〛
                      of statement 
                        s
                      is a denotational semantics [28] that maps a set of pre-states S into the set of states that can be reached by executing 
                        s
                      from a state in S. This semantics does not explicitly characterize the non-terminating executions, however it could trivially be extended into a semantics that collects the set of all reachable states (we make the choice to use an “angelic” denotational semantics so as to make the formalization of our analysis simpler).

In this section, we formalize abstract elements and their concretization. We describe the abstraction of the contents of arrays, using numeric constraints in Section 4.1. Then, we extend it with relation predicates between groups in Section 4.2.


                        Non-contiguous array partition: Our analysis partitions each array into groups of cells which are not necessarily contiguous. A group denotes an abstraction for the set of cells it is composed of. It is denoted by a name 
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                        , where subscript i identifies the group. We let 
                           G
                         denote the set of group names 
                           {
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                           ∣
                           i
                           ≥
                           0
                           }
                        . 
                           Definition 1
                           Array partition


                           An array partition is a function which maps each array variable to a set of groups. 
                                 
                                    
                                       p
                                       :
                                       A
                                       →
                                       P
                                       (
                                       G
                                       )
                                       
                                       where
                                       
                                       ∀
                                       
                                          
                                             a
                                          
                                          
                                             0
                                          
                                       
                                       ,
                                       
                                          
                                             a
                                          
                                          
                                             1
                                          
                                       
                                       ∈
                                       A
                                       ,
                                       
                                       
                                          
                                             a
                                          
                                          
                                             0
                                          
                                       
                                       ≠
                                       
                                          
                                             a
                                          
                                          
                                             1
                                          
                                       
                                       ⟹
                                       p
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             0
                                          
                                       
                                       )
                                       ∩
                                       p
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       =
                                       ∅
                                    
                                 
                              
                           

A valuation is a function 
                                 ψ
                                 ∈
                                 Ψ
                                 =
                                 G
                                 →
                                 P
                                 (
                                 N
                                 )
                              , and interprets each group into the set of indexes it represents in a given concrete state.


                        Numerical properties: To express numerical properties of group contents, sizes, and indexes, we adjoin numeric abstract elements to partition 
                           p
                        . The numeric abstract elements are from numeric domains with summarized dimensions [17], which hold two kinds of dimensions: non-summary dimensions are dimensions that account for exactly one concrete memory cell whereas summary dimensions represent for potentially unbounded collection of concrete memory cells.

The numerical information is a conjunction of (1) global constraints and of (2) per group constraints.

First, the global component 
                        
                           
                              
                                 n
                              
                              
                                 g
                              
                           
                         constrains base type variables group sizes and group fields. It consists of a numeric abstract element with the following dimensions:
                           
                              •
                              
                                 
                                    v
                                    ∈
                                    V
                                 : each base type variable has a corresponding non-summary dimension in 
                                    
                                       
                                          n
                                       
                                       
                                          g
                                       
                                    
                                  (e.g., integer variable i in the example of Fig. 6(b)).


                                 
                                    
                                       
                                          
                                             
                                                Sz
                                             
                                             
                                                ̲
                                             
                                          
                                       
                                       
                                          i
                                       
                                    
                                 : the number of elements in group 
                                    
                                       
                                          G
                                       
                                       
                                          i
                                       
                                    
                                  is constrained by a non-summary dimension 
                                    
                                       
                                          
                                             
                                                Sz
                                             
                                             
                                                ̲
                                             
                                          
                                       
                                       
                                          i
                                       
                                    
                                  (e.g., 
                                    
                                       
                                          
                                             
                                                Sz
                                             
                                             
                                                ̲
                                             
                                          
                                       
                                       
                                          0
                                       
                                    
                                  in Fig. 6(b)).


                                 
                                    
                                       
                                          
                                             
                                                f
                                             
                                             
                                                ^
                                             
                                          
                                       
                                       
                                          i
                                       
                                    
                                 : for group 
                                    
                                       
                                          G
                                       
                                       
                                          i
                                       
                                    
                                 , its contents in filed f are summarized into a dimension 
                                    
                                       
                                          
                                             
                                                f
                                             
                                             
                                                ^
                                             
                                          
                                       
                                       
                                          i
                                       
                                    
                                  (e.g., 
                                    
                                       
                                          
                                             
                                                value
                                             
                                             
                                                ^
                                             
                                          
                                       
                                       
                                          0
                                       
                                    
                                  in Fig. 6(b)).

Second, for each group 
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                        , the summarized index dimension 
                           
                              
                                 
                                    
                                       Idx
                                    
                                    
                                       ̲
                                    
                                 
                              
                              
                                 i
                              
                           
                         and some base type variables (e.g., variables used to index array cells) are constrained by a group specific numeric abstract value 
                           
                              
                                 n
                              
                              
                                 i
                              
                           
                         (e.g., 
                           
                              
                                 n
                              
                              
                                 0
                              
                           
                         in Fig. 6(b)). Since group indexes are constrained in separate abstract numeric elements, the relational numeric constraints on group indexes are only those with base type variables.

For instance, in Fig. 6(b), group 
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                         (resp., 
                           
                              
                                 G
                              
                              
                                 1
                              
                           
                        ) comprises all the cells that store positive (resp., negative) values, the group specific numeric constraints reveal that all three positive values are stored in the first five cells of the array. In this example, we show explicitly 
                           
                              
                                 n
                              
                              
                                 0
                              
                           
                         and 
                           
                              
                                 n
                              
                              
                                 1
                              
                           
                        . In the following, and unless a confusion is possible, we will represent numerical constraints all together, and not distinguish group specific and global constraints.

At this stage, we can introduce an abstract element as a partition together with a set of global and group specific numerical constraints: 
                           Definition 3
                           Abstract state


                           An abstract element 
                                 
                                    
                                       a
                                    
                                    
                                       ♯
                                    
                                 
                               is a pair 
                                 (
                                 p
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       →
                                    
                                 
                                 )
                               where 
                                 
                                    
                                       n
                                    
                                    
                                       →
                                    
                                 
                               is a tuple 
                                 (
                                 
                                    
                                       n
                                    
                                    
                                       g
                                    
                                 
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       0
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       k
                                       −
                                       1
                                    
                                 
                                 )
                              , and 
                                 p
                               defines k array partitions.

Our domain needs to distinguish numeric constraints on group indices from those on group contents, because our domain allows empty groups and our algorithm reasons precisely on group indexes which may lead index dimensions to bottom. This is detailed in Example 1: 
                           Example 1
                           Let a be an array of length 4 and our abstraction partitions it into two groups 
                                 p
                                 (
                                 a
                                 )
                                 =
                                 {
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                                 ,
                                 
                                    
                                       G
                                    
                                    
                                       1
                                    
                                 
                                 }
                              . When 
                                 ψ
                                 (
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                                 )
                                 =
                                 {
                                 0
                                 ,
                                 1
                                 ,
                                 2
                                 ,
                                 3
                                 }
                               and 
                                 ψ
                                 (
                                 
                                    
                                       G
                                    
                                    
                                       1
                                    
                                 
                                 )
                                 =
                                 ∅
                              , the most precise numeric constraint on indexes of 
                                 
                                    
                                       G
                                    
                                    
                                       1
                                    
                                 
                               is 
                                 
                                    
                                       
                                          
                                             Idx
                                          
                                          
                                             ̲
                                          
                                       
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 ⊥
                              . In any numerical domain where each dimension describes at least one concrete cell, and when a dimension describes an empty set of values, the whole abstract element can be reduced to bottom, meaning the whole abstract value describes the empty set of values. This would obviously not be acceptable in our case, which is why abstract predicates about group indexes have to be kept separate from the other predicates, and we have to exclude each 
                                 
                                    
                                       
                                          
                                             Idx
                                          
                                          
                                             ̲
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                               from 
                                 
                                    
                                       n
                                    
                                    
                                       g
                                    
                                 
                              . Moreover, an empty group will be characterized by an empty set of indexes (so that the group specific information is bottom), as expected. Actually, this is a reduced cardinal power [11] operation on the global component and per group components.


                        Concretization: A concrete numeric mapping is a function ν, mapping each base type variable to one value, each structure field to a non empty set of values and each index to a possibly empty set of values. We write 
                           
                              
                                 γ
                              
                              
                                 Num
                              
                           
                         for the concretization of numeric elements, which maps a set of numeric constraints 
                           
                              
                                 n
                              
                              
                                 →
                              
                           
                         into a set of functions ν as defined above. The concretization 
                           
                              
                                 γ
                              
                              
                                 Num
                              
                           
                           (
                           
                              
                                 n
                              
                              
                                 i
                              
                           
                           )
                         of constraints over group 
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                         is such that when 
                           
                              
                                 n
                              
                              
                                 i
                              
                           
                           =
                           ⊥
                         and 
                           ν
                           ∈
                           
                              
                                 γ
                              
                              
                                 Num
                              
                           
                           (
                           
                              
                                 n
                              
                              
                                 i
                              
                           
                           )
                        , then 
                           ν
                           (
                           
                              
                                 
                                    
                                       Idx
                                    
                                    
                                       ̲
                                    
                                 
                              
                              
                                 i
                              
                           
                           )
                           =
                           ∅
                        . Then, 
                           
                              
                                 γ
                              
                              
                                 Num
                              
                           
                           (
                           
                              
                                 n
                              
                              
                                 g
                              
                           
                           ,
                           
                              
                                 n
                              
                              
                                 0
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 n
                              
                              
                                 k
                                 −
                                 1
                              
                           
                           )
                           =
                           
                              
                                 γ
                              
                              
                                 Num
                              
                           
                           (
                           
                              
                                 n
                              
                              
                                 g
                              
                           
                           )
                           ∩
                           
                              
                                 γ
                              
                              
                                 Num
                              
                           
                           (
                           
                              
                                 n
                              
                              
                                 0
                              
                           
                           )
                           …
                           
                              
                                 γ
                              
                              
                                 Num
                              
                           
                           (
                           
                              
                                 n
                              
                              
                                 k
                                 −
                                 1
                              
                           
                           )
                        .

Additionally, we use the following four predicates to break up the definition of concretization:
                           
                              •
                              Predicate 
                                    
                                       
                                          P
                                       
                                       
                                          v
                                       
                                    
                                    (
                                    ψ
                                    )
                                  states that each array element belongs to exactly one group (equivalently, groups form a partition of the array indexes): 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                v
                                             
                                          
                                          (
                                          ψ
                                          )
                                          
                                             
                                                ⟺
                                             
                                             
                                                def
                                                .
                                             
                                          
                                          ∀
                                          a
                                          ∈
                                          A
                                          ,
                                          
                                          
                                             
                                                N
                                             
                                             
                                                a
                                             
                                          
                                          =
                                          
                                             
                                                
                                                   ⋃
                                                
                                                
                                                   
                                                      
                                                         G
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ∈
                                                   p
                                                   (
                                                   a
                                                   )
                                                
                                             
                                          
                                          ψ
                                          (
                                          
                                             
                                                G
                                             
                                             
                                                i
                                             
                                          
                                          )
                                          ∧
                                          (
                                          
                                             ∀
                                             
                                                
                                                   G
                                                
                                                
                                                   i
                                                
                                             
                                             ,
                                             
                                                
                                                   G
                                                
                                                
                                                   j
                                                
                                             
                                             ∈
                                             p
                                             (
                                             a
                                             )
                                             ,
                                             
                                             i
                                             ≠
                                             j
                                             ⇒
                                             ψ
                                             (
                                             
                                                
                                                   G
                                                
                                                
                                                   i
                                                
                                             
                                             )
                                             ∩
                                             ψ
                                             (
                                             
                                                
                                                   G
                                                
                                                
                                                   j
                                                
                                             
                                             )
                                             =
                                             ∅
                                          
                                          )
                                       
                                    
                                 
                              

Predicate 
                                    
                                       
                                          P
                                       
                                       
                                          b
                                       
                                    
                                    (
                                    σ
                                    ,
                                    ν
                                    )
                                  expresses that ν and σ consistently abstract base type variables: 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                b
                                             
                                          
                                          (
                                          σ
                                          ,
                                          ν
                                          )
                                          
                                             
                                                ⟺
                                             
                                             
                                                def
                                                .
                                             
                                          
                                          ∀
                                          v
                                          ∈
                                          V
                                          ,
                                          
                                          ν
                                          (
                                          v
                                          )
                                          =
                                          σ
                                          (
                                          v
                                          )
                                       
                                    
                                 
                              

Predicate 
                                    
                                       
                                          P
                                       
                                       
                                          i
                                       
                                    
                                    (
                                    ν
                                    ,
                                    ψ
                                    )
                                  expresses that ν and ψ consistently abstract group indexes:
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          ν
                                          ,
                                          ψ
                                          )
                                          
                                             
                                                ⟺
                                             
                                             
                                                def
                                                .
                                             
                                          
                                          ∀
                                          a
                                          ∈
                                          A
                                          ,
                                          
                                          ∀
                                          
                                             
                                                G
                                             
                                             
                                                i
                                             
                                          
                                          ∈
                                          p
                                          (
                                          a
                                          )
                                          ,
                                          
                                          ψ
                                          (
                                          
                                             
                                                G
                                             
                                             
                                                i
                                             
                                          
                                          )
                                          =
                                          ν
                                          (
                                          
                                             
                                                
                                                   
                                                      Idx
                                                   
                                                   
                                                      ̲
                                                   
                                                
                                             
                                             
                                                i
                                             
                                          
                                          )
                                          ∧
                                          |
                                          ψ
                                          (
                                          
                                             
                                                G
                                             
                                             
                                                i
                                             
                                          
                                          )
                                          |
                                          =
                                          ν
                                          (
                                          
                                             
                                                
                                                   
                                                      Sz
                                                   
                                                   
                                                      ̲
                                                   
                                                
                                             
                                             
                                                i
                                             
                                          
                                          )
                                       
                                    
                                 
                              

Predicate 
                                    
                                       
                                          P
                                       
                                       
                                          c
                                       
                                    
                                    (
                                    σ
                                    ,
                                    ψ
                                    ,
                                    ν
                                    )
                                  states σ and ν define compatible abstractions of groups contents: 
                                    
                                       
                                          
                                             
                                                P
                                             
                                             
                                                c
                                             
                                          
                                          (
                                          σ
                                          ,
                                          ψ
                                          ,
                                          ν
                                          )
                                          
                                             
                                                ⟺
                                             
                                             
                                                def
                                                .
                                             
                                          
                                          ∀
                                          a
                                          ∈
                                          A
                                          ,
                                          
                                          ∀
                                          f
                                          ∈
                                          
                                             
                                                F
                                             
                                             
                                                a
                                             
                                          
                                          ,
                                          
                                          ∀
                                          
                                             
                                                G
                                             
                                             
                                                i
                                             
                                          
                                          ∈
                                          p
                                          (
                                          a
                                          )
                                          ,
                                          
                                          ∀
                                          j
                                          ∈
                                          ψ
                                          (
                                          
                                             
                                                G
                                             
                                             
                                                i
                                             
                                          
                                          )
                                          ,
                                          
                                          σ
                                          (
                                          a
                                          ,
                                          j
                                          ,
                                          f
                                          )
                                          ∈
                                          ν
                                          (
                                          
                                             
                                                
                                                   
                                                      f
                                                   
                                                   
                                                      ^
                                                   
                                                
                                             
                                             
                                                i
                                             
                                          
                                          )
                                       
                                    
                                 
                              

Concretization 
                                 
                                    
                                       γ
                                    
                                    
                                       Part
                                    
                                 
                               is defined by: 
                                 
                                    
                                       
                                          
                                             γ
                                          
                                          
                                             Part
                                          
                                       
                                       (
                                       p
                                       ,
                                       
                                          
                                             n
                                          
                                          
                                             →
                                          
                                       
                                       )
                                       
                                          
                                             :
                                             ≔
                                          
                                          
                                             def
                                             .
                                          
                                       
                                       {
                                       (
                                       σ
                                       ,
                                       ψ
                                       ,
                                       ν
                                       )
                                       ∣
                                       ν
                                       ∈
                                       
                                          
                                             γ
                                          
                                          
                                             Num
                                          
                                       
                                       (
                                       
                                          
                                             n
                                          
                                          
                                             →
                                          
                                       
                                       )
                                       ∧
                                       
                                          
                                             P
                                          
                                          
                                             v
                                          
                                       
                                       (
                                       ψ
                                       )
                                       ∧
                                       
                                          
                                             P
                                          
                                          
                                             b
                                          
                                       
                                       (
                                       σ
                                       ,
                                       ν
                                       )
                                       ∧
                                       
                                          
                                             P
                                          
                                          
                                             i
                                          
                                       
                                       (
                                       ν
                                       ,
                                       ψ
                                       )
                                       ∧
                                       
                                          
                                             P
                                          
                                          
                                             c
                                          
                                       
                                       (
                                       σ
                                       ,
                                       ψ
                                       ,
                                       ν
                                       )
                                       }
                                    
                                 
                              
                           

The tuple defined below respects all the four predicates parameterized by 
                                 (
                                 p
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       →
                                    
                                 
                                 )
                               in Fig. 6(b), and implies the concrete state in Fig. 6(a). 
                                 
                                    
                                       
                                          
                                             
                                                σ
                                                :
                                             
                                             
                                                (
                                                a
                                                ,
                                                0
                                                ,
                                                value
                                                )
                                             
                                             
                                                ↦
                                             
                                             
                                                2
                                             
                                          
                                          
                                             
                                             
                                                (
                                                a
                                                ,
                                                1
                                                ,
                                                value
                                                )
                                             
                                             
                                                ↦
                                             
                                             
                                                −
                                                110
                                             
                                          
                                          
                                             
                                             
                                                (
                                                a
                                                ,
                                                2
                                                ,
                                                value
                                                )
                                             
                                             
                                                ↦
                                             
                                             
                                                2
                                             
                                          
                                          
                                             
                                             
                                                (
                                                a
                                                ,
                                                3
                                                ,
                                                value
                                                )
                                             
                                             
                                                ↦
                                             
                                             
                                                −
                                                120
                                             
                                          
                                          
                                             
                                             
                                                (
                                                a
                                                ,
                                                4
                                                ,
                                                value
                                                )
                                             
                                             
                                                ↦
                                             
                                             
                                                8
                                             
                                          
                                          
                                             
                                             
                                                (
                                                a
                                                ,
                                                5
                                                ,
                                                value
                                                )
                                             
                                             
                                                ↦
                                             
                                             
                                                −
                                                100
                                             
                                          
                                          
                                             
                                             
                                                (
                                                a
                                                ,
                                                6
                                                ,
                                                value
                                                )
                                             
                                             
                                                ↦
                                             
                                             
                                                −
                                                100
                                             
                                          
                                       
                                       
                                       
                                          
                                             
                                                ψ
                                                :
                                             
                                             
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      0
                                                   
                                                
                                             
                                             
                                                ↦
                                             
                                             
                                                {
                                                0
                                                ,
                                                2
                                                ,
                                                4
                                                }
                                             
                                          
                                          
                                             
                                             
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      1
                                                   
                                                
                                             
                                             
                                                ↦
                                             
                                             
                                                {
                                                1
                                                ,
                                                3
                                                ,
                                                5
                                                ,
                                                6
                                                }
                                             
                                          
                                       
                                       
                                       
                                          
                                             
                                                ν
                                                :
                                             
                                             
                                                
                                                   
                                                      
                                                         
                                                            Idx
                                                         
                                                         
                                                            ̲
                                                         
                                                      
                                                   
                                                   
                                                      0
                                                   
                                                
                                             
                                             
                                                ↦
                                             
                                             
                                                {
                                                0
                                                ,
                                                2
                                                ,
                                                4
                                                }
                                             
                                          
                                          
                                             
                                             
                                                
                                                   
                                                      
                                                         
                                                            Idx
                                                         
                                                         
                                                            ̲
                                                         
                                                      
                                                   
                                                   
                                                      1
                                                   
                                                
                                             
                                             
                                                ↦
                                             
                                             
                                                {
                                                1
                                                ,
                                                3
                                                ,
                                                5
                                                ,
                                                6
                                                }
                                             
                                          
                                          
                                             
                                             
                                                
                                                   
                                                      
                                                         
                                                            Sz
                                                         
                                                         
                                                            ̲
                                                         
                                                      
                                                   
                                                   
                                                      0
                                                   
                                                
                                             
                                             
                                                ↦
                                             
                                             
                                                3
                                             
                                          
                                          
                                             
                                             
                                                
                                                   
                                                      
                                                         
                                                            Sz
                                                         
                                                         
                                                            ̲
                                                         
                                                      
                                                   
                                                   
                                                      1
                                                   
                                                
                                             
                                             
                                                ↦
                                             
                                             
                                                4
                                             
                                          
                                          
                                             
                                             
                                                
                                                   
                                                      
                                                         
                                                            value
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                   
                                                   
                                                      0
                                                   
                                                
                                             
                                             
                                                ↦
                                             
                                             
                                                {
                                                2
                                                ,
                                                8
                                                }
                                             
                                          
                                          
                                             
                                             
                                                
                                                   
                                                      
                                                         
                                                            value
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                   
                                                   
                                                      1
                                                   
                                                
                                             
                                             
                                                ↦
                                             
                                             
                                                {
                                                −
                                                100
                                                ,
                                                −
                                                110
                                                ,
                                                −
                                                120
                                                }
                                             
                                          
                                       
                                    
                                 
                              
                           

The abstraction we have defined so far can describe non-contiguous groups of cells, yet lacks important predicates, that are necessary to ensure the analysis can be precise enough. Let us consider assignment 
                           parent
                           =
                           mproc
                           [
                           child
                           ]
                           .
                           mparent
                         in cleanup (Fig. 3(a)). To deduce that 
                           parent
                         is the index of a valid process descriptor, our analysis should track the facts that (1) child is the index of a valid process descriptor; (2) for each valid process descriptor, its parent is the index of a valid process descriptor. The numerical predicates that are available to the analysis do not entail these two facts. Instead, they only imply that child and 
                           
                              
                                 
                                    
                                       mparent
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 0
                              
                           
                         are in range 
                           [
                           0
                           ,
                           23
                           ]
                        , hence are valid array cells. These numeric properties do not characterize the group that cells belong to, hence, that the new value of 
                           parent
                         is an index of a valid process descriptor. To avoid such an imprecision, we extend abstract states with relation predicates, that express membership properties: 
                           Definition 5
                           Relation predicates


                           
                              
                                 
                                    
                                       
                                          
                                             
                                                r
                                             
                                             
                                                :
                                                :
                                                =
                                             
                                             
                                                r
                                                ∧
                                                r
                                             
                                             
                                                
                                             
                                             
                                             
                                                
                                             
                                             
                                                a
                                                
                                                conjunction
                                                
                                                of
                                                
                                                predicates
                                             
                                          
                                          
                                             
                                             
                                                ∣
                                             
                                             
                                                true
                                             
                                             
                                                
                                             
                                             
                                             
                                                
                                             
                                             
                                                empty
                                             
                                          
                                          
                                             
                                             
                                                ∣
                                             
                                             
                                                v
                                                ◃
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      a
                                                   
                                                
                                             
                                             
                                                
                                             
                                             
                                                where
                                                
                                                v
                                                ∈
                                                V
                                             
                                             
                                                
                                             
                                             
                                                var-index
                                                
                                                predicate
                                             
                                          
                                          
                                             
                                             
                                                ∣
                                             
                                             
                                                
                                                   
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ◃
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      a
                                                   
                                                
                                             
                                             
                                                
                                             
                                             
                                                where
                                                
                                                f
                                                ∈
                                                
                                                   
                                                      F
                                                   
                                                   
                                                      a
                                                   
                                                
                                                ,
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ∈
                                                p
                                                (
                                                a
                                                )
                                             
                                             
                                                
                                             
                                             
                                                content-index
                                                
                                                predicate
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      a
                                                   
                                                
                                             
                                             
                                                :
                                                :
                                                =
                                             
                                             
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      a
                                                   
                                                
                                                ∪
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                             
                                                
                                             
                                             
                                                where
                                                
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ∈
                                                p
                                                (
                                                a
                                                )
                                             
                                             
                                                
                                             
                                             
                                                a
                                                
                                                disjunction
                                                
                                                of
                                                
                                                groups
                                                
                                                in
                                                
                                                a
                                             
                                          
                                          
                                             
                                             
                                                ∣
                                             
                                             
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                             
                                                
                                             
                                             
                                                where
                                                
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ∈
                                                p
                                                (
                                                a
                                                )
                                             
                                             
                                                
                                             
                                             
                                          
                                       
                                    
                                 
                              
                           

We consider function cleanup of Fig. 3(a). The pre-condition for the analysis of Fig. 4 is based on correctness property 
                                 C
                              , hence partitions mproc in two groups, thus 
                                 p
                                 (
                                 mproc
                                 )
                                 =
                                 {
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                                 ,
                                 
                                    
                                       G
                                    
                                    
                                       1
                                    
                                 
                                 }
                              , in which 
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                               accounts for all valid process descriptors and 
                                 
                                    
                                       G
                                    
                                    
                                       1
                                    
                                 
                               for all free slots. Additionally, cleanup should be called on a valid process descriptor, hence child should be in group 
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                              , which corresponds to predicate 
                                 child
                                 ◃
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                              . Combining this with predicate 
                                 
                                    
                                       
                                          
                                             mparent
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       0
                                    
                                 
                                 ◃
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                               and the fact that 
                                 parent
                               is initialized as the parent of child, the analysis derives 
                                 parent
                                 ◃
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                               (i.e., 
                                 parent
                               is a valid process descriptor index). Hence, at point ①, the analysis will derive relations 
                                 r
                                 =
                                 child
                                 ◃
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                                 ∧
                                 parent
                                 ◃
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                                 ∧
                                 …
                              .

An abstract state consists of a partition, a set of numeric constraints and a set of group relation predicates: 
                                 
                                    
                                       
                                          
                                             a
                                          
                                          
                                             ♯
                                          
                                       
                                       ∈
                                       
                                          
                                             D
                                          
                                          
                                             ♯
                                          
                                       
                                       =
                                       {
                                       (
                                       p
                                       ,
                                       
                                          
                                             n
                                          
                                          
                                             →
                                          
                                       
                                       ,
                                       r
                                       )
                                       }
                                    
                                 
                              
                           


                        Concretization: We now extend the concretization to account for relation predicates. As a slight abuse of notation, we extend 
                           ψ
                         on disjunctions of groups, and let 
                           ψ
                           (
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                           ∪
                           …
                           ∪
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                           )
                           =
                           ψ
                           (
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                           )
                           ∪
                           …
                           ∪
                           ψ
                           (
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                           )
                        . 
                           Definition 7
                           Concretization


                           The concretization function 
                                 
                                    
                                       γ
                                    
                                    
                                       Gr
                                    
                                 
                               for relation predicates maps an abstract state into a set of triples 
                                 (
                                 σ
                                 ,
                                 ψ
                                 ,
                                 ν
                                 )
                               made of a concrete state, a valuation and a concrete numeric mapping; it is defined by induction on group relation predicates: 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      γ
                                                   
                                                   
                                                      Gr
                                                   
                                                
                                                (
                                                p
                                                ,
                                                
                                                   
                                                      n
                                                   
                                                   
                                                      →
                                                   
                                                
                                                ,
                                                true
                                                )
                                             
                                             
                                                :
                                                :
                                                =
                                             
                                             
                                                
                                                   
                                                      γ
                                                   
                                                   
                                                      Part
                                                   
                                                
                                                (
                                                p
                                                ,
                                                
                                                   
                                                      n
                                                   
                                                   
                                                      →
                                                   
                                                
                                                )
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      γ
                                                   
                                                   
                                                      Gr
                                                   
                                                
                                                (
                                                p
                                                ,
                                                
                                                   
                                                      n
                                                   
                                                   
                                                      →
                                                   
                                                
                                                ,
                                                v
                                                ◃
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      a
                                                   
                                                
                                                )
                                             
                                             
                                                :
                                                :
                                                =
                                             
                                             
                                                {
                                                (
                                                σ
                                                ,
                                                ψ
                                                ,
                                                ν
                                                )
                                                ∈
                                                
                                                   
                                                      γ
                                                   
                                                   
                                                      Part
                                                   
                                                
                                                (
                                                p
                                                ,
                                                
                                                   
                                                      n
                                                   
                                                   
                                                      →
                                                   
                                                
                                                )
                                                ∣
                                                σ
                                                (
                                                v
                                                )
                                                ∈
                                                ψ
                                                (
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      a
                                                   
                                                
                                                )
                                                }
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      γ
                                                   
                                                   
                                                      Gr
                                                   
                                                
                                                (
                                                p
                                                ,
                                                
                                                   
                                                      n
                                                   
                                                   
                                                      →
                                                   
                                                
                                                ,
                                                
                                                   
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ◃
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      a
                                                   
                                                
                                                )
                                             
                                             
                                                :
                                                :
                                                =
                                             
                                             
                                                {
                                                (
                                                σ
                                                ,
                                                ψ
                                                ,
                                                ν
                                                )
                                                ∈
                                                
                                                   
                                                      γ
                                                   
                                                   
                                                      Part
                                                   
                                                
                                                (
                                                p
                                                ,
                                                
                                                   
                                                      n
                                                   
                                                   
                                                      →
                                                   
                                                
                                                )
                                                ∣
                                                ∀
                                                k
                                                ∈
                                                ψ
                                                (
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      i
                                                   
                                                
                                                )
                                                ,
                                                
                                                σ
                                                (
                                                a
                                                ,
                                                k
                                                ,
                                                f
                                                )
                                                ∈
                                                ψ
                                                (
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      a
                                                   
                                                
                                                )
                                                }
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      γ
                                                   
                                                   
                                                      Gr
                                                   
                                                
                                                (
                                                p
                                                ,
                                                
                                                   
                                                      n
                                                   
                                                   
                                                      →
                                                   
                                                
                                                ,
                                                
                                                   
                                                      r
                                                   
                                                   
                                                      0
                                                   
                                                
                                                ∧
                                                
                                                   
                                                      r
                                                   
                                                   
                                                      1
                                                   
                                                
                                                )
                                             
                                             
                                                :
                                                :
                                                =
                                             
                                             
                                                
                                                   
                                                      γ
                                                   
                                                   
                                                      Gr
                                                   
                                                
                                                (
                                                p
                                                ,
                                                
                                                   
                                                      n
                                                   
                                                   
                                                      →
                                                   
                                                
                                                ,
                                                
                                                   
                                                      r
                                                   
                                                   
                                                      0
                                                   
                                                
                                                )
                                                ∩
                                                
                                                   
                                                      γ
                                                   
                                                   
                                                      Gr
                                                   
                                                
                                                (
                                                p
                                                ,
                                                
                                                   
                                                      n
                                                   
                                                   
                                                      →
                                                   
                                                
                                                ,
                                                
                                                   
                                                      r
                                                   
                                                   
                                                      1
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                              The concretization 
                              
                                 
                                    
                                       γ
                                    
                                    
                                       St
                                    
                                 
                               maps an abstract state into a set of concrete states and is defined by: 
                                 
                                    
                                       
                                          
                                             γ
                                          
                                          
                                             St
                                          
                                       
                                       (
                                       p
                                       ,
                                       
                                          
                                             n
                                          
                                          
                                             →
                                          
                                       
                                       ,
                                       r
                                       )
                                       :
                                       :
                                       =
                                       {
                                       σ
                                       ∣
                                       ∃
                                       ψ
                                       ,
                                       ν
                                       ,
                                       
                                       (
                                       σ
                                       ,
                                       ψ
                                       ,
                                       ν
                                       )
                                       ∈
                                       
                                          
                                             γ
                                          
                                          
                                             Gr
                                          
                                       
                                       (
                                       p
                                       ,
                                       
                                          
                                             n
                                          
                                          
                                             →
                                          
                                       
                                       ,
                                       r
                                       )
                                       }
                                    
                                 
                              
                           

The concretization of an abstract state collects all the concrete states that can be described by the abstract state for some valuation and concrete numeric mapping.
                           Example 4
                           We propose to consider the abstract state obtained by adding relation predicates 
                                 r
                                 =
                                 i
                                 ◃
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                                 ∧
                                 
                                    
                                       
                                          
                                             value
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       0
                                    
                                 
                                 ◃
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                               to the abstract state of Fig. 6(b). Then, the concrete state shown in Fig. 6(a) is not in the concretization 
                                 
                                    
                                       γ
                                    
                                    
                                       St
                                    
                                 
                                 (
                                 
                                    
                                       a
                                    
                                    
                                       ♯
                                    
                                 
                                 )
                               anymore. Indeed, 
                                 a
                                 [
                                 4
                                 ]
                                 =
                                 8
                               violates the group predicate 
                                 
                                    
                                       
                                          
                                             value
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       0
                                    
                                 
                                 ◃
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                              .


                        Abstract order: We let relation 
                           ≤
                         be defined by: 
                           
                              
                                 
                                    
                                       a
                                    
                                    
                                       1
                                    
                                    
                                       ♯
                                    
                                 
                                 ≤
                                 
                                    
                                       a
                                    
                                    
                                       2
                                    
                                    
                                       ♯
                                    
                                 
                                 ⟺
                                 
                                    
                                       γ
                                    
                                    
                                       St
                                    
                                 
                                 (
                                 
                                    
                                       a
                                    
                                    
                                       1
                                    
                                    
                                       ♯
                                    
                                 
                                 )
                                 ⊆
                                 
                                    
                                       γ
                                    
                                    
                                       St
                                    
                                 
                                 (
                                 
                                    
                                       a
                                    
                                    
                                       2
                                    
                                    
                                       ♯
                                    
                                 
                                 )
                              
                           
                        
                     

We also define that 
                           
                              
                                 a
                              
                              
                                 1
                              
                              
                                 ♯
                              
                           
                           ≤
                           
                              
                                 a
                              
                              
                                 2
                              
                              
                                 ♯
                              
                           
                           ∧
                           
                              
                                 a
                              
                              
                                 2
                              
                              
                                 ♯
                              
                           
                           ≤
                           
                              
                                 a
                              
                              
                                 1
                              
                              
                                 ♯
                              
                           
                           ⟺
                           
                              
                                 a
                              
                              
                                 1
                              
                              
                                 ♯
                              
                           
                           =
                           
                              
                                 a
                              
                              
                                 2
                              
                              
                                 ♯
                              
                           
                        . It is easy to observe that this relation defines a partial order over abstract states.

Group fields and indexes both correspond to summarized dimensions, but only group indexes need to be excluded from the global numeric component 
                           
                              
                                 n
                              
                              
                                 g
                              
                           
                        . That is because our static analysis algorithms (Sections 5–7) treat them differently. When a group is empty, the set of values for its index dimension could be described in the abstract either as the empty set or by a more conservative over-approximation. However, our analysis will always over-approximate the values its other fields may take (which implies the corresponding dimensions will not carry precise information). This is necessary since our numerical abstract domain allows one abstract dimension to stand for either one concrete cell (in the case of a non-summary dimension) or for a strictly positive number of concrete cells (in the case of a summary dimension), henceforth, it is not able to describe precisely states where one abstract dimension corresponds to zero concrete cell. As a consequence, when a group becomes empty, our analysis will always consider each of its fields still corresponds to a non-empty set of concrete cells, and will attach to the fields of such a group the same abstract predicates as it would if the group were not empty.

In this section, we define a set of basic operations on partitions, that abstract transfer functions and lattice operators will call to modify the structure of partitions.


                     Splitting: Unless it is provided with a pre-condition that specifies otherwise, our analysis initially partitions each array into a single group, with unconstrained contents. Additional groups can get introduced during the analysis, by a basic operator 
                        split
                     .

Operator 
                        split
                      applies to an abstract state 
                        
                           
                              a
                           
                           
                              ♯
                           
                        
                     , an array 
                        t
                      and a group 
                        
                           
                              G
                           
                           
                              i
                           
                        
                      corresponding to array 
                        t
                      and replaces it with two groups 
                        
                           
                              G
                           
                           
                              i
                           
                        
                        ,
                        
                           
                              G
                           
                           
                              j
                           
                        
                      (where 
                        
                           
                              G
                           
                           
                              j
                           
                        
                      is a fresh group name). The two new groups inherit the properties of the group they replace (membership in the old group turns into membership in the union of the two new groups). Assuming that 
                        
                           
                              a
                           
                           
                              ♯
                           
                        
                        =
                        (
                        p
                        ,
                        
                           
                              n
                           
                           
                              →
                           
                        
                        ,
                        r
                        )
                     , and with the above notations, 
                        split
                      performs the following actions:
                        
                           •
                           It extends partition 
                                 p
                               with the fresh group name 
                                 
                                    
                                       G
                                    
                                    
                                       j
                                    
                                 
                              .

The numeric constraints on indexes and fields of group 
                                 
                                    
                                       G
                                    
                                    
                                       j
                                    
                                 
                               are inherited from those of 
                                 
                                    
                                       G
                                    
                                    
                                       i
                                    
                                 
                              , and every occurrence of 
                                 
                                    
                                       
                                          
                                             Sz
                                          
                                          
                                             ̲
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                               is replaced by 
                                 
                                    
                                       
                                          
                                             Sz
                                          
                                          
                                             ̲
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                                 +
                                 
                                    
                                       
                                          
                                             Sz
                                          
                                          
                                             ̲
                                          
                                       
                                    
                                    
                                       j
                                    
                                 
                              .

The relation predicates on 
                                 
                                    
                                       G
                                    
                                    
                                       j
                                    
                                 
                               are inherited from those on 
                                 
                                    
                                       G
                                    
                                    
                                       i
                                    
                                 
                              .


                           Fig. 8
                           (a) defines an abstract state 
                              (
                              p
                              ,
                              
                                 
                                    n
                                 
                                 
                                    →
                                 
                              
                              ,
                              r
                              )
                            with a single array, fully initialized to 0, and represented by a single group. Applying operator 
                              split
                            to that abstract state and to index i produces the abstract state of Fig. 8(b), where 
                              
                                 
                                    G
                                 
                                 
                                    1
                                 
                              
                            is a group with exactly one element, with the same constraints on 
                              
                                 
                                    value
                                 
                                 
                                    ^
                                 
                              
                            as in the previous state.


                           Suppose 
                           
                              
                                 
                                    a
                                 
                                 
                                    ♯
                                 
                              
                            
                           is an abstract state, 
                              
                                 
                                    G
                                 
                                 
                                    i
                                 
                              
                            
                           a group and 
                           
                              t
                            
                           an array, the operator 
                           
                              split
                            
                           is sound in the sense that 
                           
                              
                                 
                                    
                                       
                                          γ
                                       
                                       
                                          St
                                       
                                    
                                    (
                                    
                                       
                                          a
                                       
                                       
                                          ♯
                                       
                                    
                                    )
                                    ⊆
                                    
                                       
                                          γ
                                       
                                       
                                          St
                                       
                                    
                                    (
                                    split
                                    (
                                    
                                       
                                          a
                                       
                                       
                                          ♯
                                       
                                    
                                    ,
                                    t
                                    ,
                                    
                                       
                                          G
                                       
                                       
                                          i
                                       
                                    
                                    )
                                    )
                                 
                              
                           
                        

Let 
                              
                                 
                                    a
                                 
                                 
                                    ♯
                                 
                              
                              =
                              (
                              p
                              ,
                              
                                 
                                    n
                                 
                                 
                                    →
                                 
                              
                              ,
                              r
                              )
                            be an abstract state, and 
                              
                                 
                                    G
                                 
                                 
                                    i
                                 
                              
                            be a group of 
                              a
                            in 
                              
                                 
                                    a
                                 
                                 
                                    ♯
                                 
                              
                           . We assume that splitting 
                              
                                 
                                    G
                                 
                                 
                                    i
                                 
                              
                            in 
                              
                                 
                                    a
                                 
                                 
                                    ♯
                                 
                              
                            produces groups 
                              
                                 
                                    G
                                 
                                 
                                    
                                       
                                          i
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              ,
                              
                                 
                                    G
                                 
                                 
                                    k
                                 
                              
                            (
                              
                                 
                                    G
                                 
                                 
                                    
                                       
                                          i
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                            is actually 
                              
                                 
                                    G
                                 
                                 
                                    i
                                 
                              
                            in the output, we add a superscript to distinguish it from the 
                              
                                 
                                    G
                                 
                                 
                                    i
                                 
                              
                            in the input) in 
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          ♯
                                       
                                    
                                 
                                 
                                    ′
                                 
                              
                            (
                              split
                              (
                              
                                 
                                    a
                                 
                                 
                                    ♯
                                 
                              
                              ,
                              a
                              ,
                              
                                 
                                    G
                                 
                                 
                                    i
                                 
                              
                              )
                              =
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          ♯
                                       
                                    
                                 
                                 
                                    ′
                                 
                              
                           ). Let 
                              σ
                              ∈
                              
                                 
                                    γ
                                 
                                 
                                    St
                                 
                              
                              (
                              
                                 
                                    a
                                 
                                 
                                    ♯
                                 
                              
                              )
                           . We write 
                              ψ
                              ,
                              ν
                            for the witnesses of 
                              σ
                              ∈
                              
                                 
                                    γ
                                 
                                 
                                    St
                                 
                              
                              (
                              
                                 
                                    a
                                 
                                 
                                    ♯
                                 
                              
                              )
                            in Definition 3.

Then, we define 
                              
                                 
                                    ψ
                                 
                                 
                                    ′
                                 
                              
                              ,
                              
                                 
                                    ν
                                 
                                 
                                    ′
                                 
                              
                            from 
                              ψ
                              ,
                              ν
                            by:
                              
                                 
                                    
                                       •
                                    
                                 
                                 fixing 
                                       
                                          
                                             ψ
                                          
                                          
                                             ′
                                          
                                       
                                       (
                                       
                                          
                                             G
                                          
                                          
                                             
                                                
                                                   i
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                       )
                                     and 
                                       
                                          
                                             ψ
                                          
                                          
                                             ′
                                          
                                       
                                       (
                                       
                                          
                                             G
                                          
                                          
                                             k
                                          
                                       
                                       )
                                     so that 
                                       
                                          
                                             ψ
                                          
                                          
                                             ′
                                          
                                       
                                       (
                                       
                                          
                                             G
                                          
                                          
                                             
                                                
                                                   i
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                       )
                                       ∪
                                       
                                          
                                             ψ
                                          
                                          
                                             ′
                                          
                                       
                                       (
                                       
                                          
                                             G
                                          
                                          
                                             k
                                          
                                       
                                       )
                                       =
                                       ψ
                                       (
                                       
                                          
                                             G
                                          
                                          
                                             i
                                          
                                       
                                       )
                                    ;

adding new dimensions (fields, size, index) for groups 
                                       
                                          
                                             G
                                          
                                          
                                             
                                                
                                                   i
                                                
                                                
                                                   ′
                                                
                                             
                                          
                                       
                                       ,
                                       
                                          
                                             G
                                          
                                          
                                             k
                                          
                                       
                                    , that inherit from the values of the dimensions corresponding to 
                                       
                                          
                                             G
                                          
                                          
                                             i
                                          
                                       
                                    :
                                       
                                          ○
                                          
                                             
                                                
                                                   
                                                      ν
                                                   
                                                   
                                                      ′
                                                   
                                                
                                              maps 
                                                
                                                   
                                                      
                                                         
                                                            Idx
                                                         
                                                         
                                                            ̲
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                
                                              and 
                                                
                                                   
                                                      
                                                         
                                                            Idx
                                                         
                                                         
                                                            ̲
                                                         
                                                      
                                                   
                                                   
                                                      k
                                                   
                                                
                                              to the respective sets of elements of 
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                
                                              and 
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      k
                                                   
                                                
                                             ;


                                             
                                                
                                                   
                                                      ν
                                                   
                                                   
                                                      ′
                                                   
                                                
                                              maps 
                                                
                                                   
                                                      
                                                         
                                                            Sz
                                                         
                                                         
                                                            ̲
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                
                                              and 
                                                
                                                   
                                                      
                                                         
                                                            Sz
                                                         
                                                         
                                                            ̲
                                                         
                                                      
                                                   
                                                   
                                                      k
                                                   
                                                
                                              to the respective sizes of 
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                
                                              and 
                                                
                                                   
                                                      G
                                                   
                                                   
                                                      k
                                                   
                                                
                                             ;

other dimensions take the same value as in 
                                                ν
                                             .

This proves the soundness of 
                              split
                           .□

This operator may lose a little precision on the sizes of the generated groups when the underlying numeric domain is not complete on linear assignments.


                     Creation: Operator 
                        create
                      extends the partition of an existing array with a new, empty group. It is used by join and widening, so as to generalize abstract states. By nature, an empty group satisfies any field property, thus the analysis may assign any numeric property to the fields of the new group, depending on the context.

When applied to abstract state 
                        
                           
                              a
                           
                           
                              ♯
                           
                        
                        =
                        (
                        p
                        ,
                        
                           
                              n
                           
                           
                              →
                           
                        
                        ,
                        r
                        )
                      and to array variable 
                        a
                     , operator 
                        create
                      performs the following operations:
                        
                           •
                           It introduces a fresh group name 
                                 
                                    
                                       G
                                    
                                    
                                       j
                                    
                                 
                               to the partition 
                                 p
                                 (
                                 a
                                 )
                               of array 
                                 a
                              .

The size constraint 
                                 
                                    
                                       
                                          
                                             Sz
                                          
                                          
                                             ̲
                                          
                                       
                                    
                                    
                                       j
                                    
                                 
                                 =
                                 0
                               is added to 
                                 
                                    
                                       n
                                    
                                    
                                       →
                                    
                                 
                              .

Additional constraints on the index and the fields of group 
                                 
                                    
                                       G
                                    
                                    
                                       j
                                    
                                 
                               are added to 
                                 
                                    
                                       n
                                    
                                    
                                       →
                                    
                                 
                              .

For each group 
                                 
                                    
                                       G
                                    
                                    
                                       i
                                    
                                 
                                 ∈
                                 p
                                 (
                                 a
                                 )
                               and each 
                                 f
                                 ∈
                                 
                                    
                                       F
                                    
                                    
                                       a
                                    
                                 
                              , content-index predicate 
                                 
                                    
                                       
                                          
                                             f
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       j
                                    
                                 
                                 ◃
                                 
                                    
                                       G
                                    
                                    
                                       i
                                    
                                 
                               is added to r.


                           Fig. 9
                           (a) defines an abstract state 
                              (
                              p
                              ,
                              
                                 
                                    n
                                 
                                 
                                    →
                                 
                              
                              ,
                              r
                              )
                            with a single array, fully initialized to 0, and represented by a single group. Similarly, Fig. 9(b) shows a possible result for 
                              create
                           .


                           Operator 
                           
                              create
                            
                           is sound in the sense that, for all abstract state 
                           
                              
                                 
                                    a
                                 
                                 
                                    ♯
                                 
                              
                           , for all array variable 
                           
                              t
                            
                           and for all 
                           
                              
                                 
                                    G
                                 
                                 
                                    i
                                 
                              
                           , 
                              
                                 
                                    
                                       
                                          γ
                                       
                                       
                                          St
                                       
                                    
                                    (
                                    create
                                    (
                                    
                                       
                                          a
                                       
                                       
                                          ♯
                                       
                                    
                                    ,
                                    t
                                    )
                                    )
                                    =
                                    
                                       
                                          γ
                                       
                                       
                                          St
                                       
                                    
                                    (
                                    
                                       
                                          a
                                       
                                       
                                          ♯
                                       
                                    
                                    )
                                 
                              
                           
                        

In the new group 
                              
                                 
                                    G
                                 
                                 
                                    i
                                 
                              
                            created by operator 
                              create
                           , the predicate 
                              
                                 
                                    
                                       
                                          Sz
                                       
                                       
                                          ̲
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              =
                              0
                            guarantees that 
                              |
                              ψ
                              (
                              
                                 
                                    G
                                 
                                 
                                    i
                                 
                              
                              )
                              |
                              =
                              ν
                              (
                              
                                 
                                    
                                       
                                          Sz
                                       
                                       
                                          ̲
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              )
                              =
                              0
                            which indicates that the addition of the new group does not affect the concretization.□


                     Merging groups: Fine-grained abstract states, with many groups can express precisely complex properties, yet may incur increased analysis cost. In fact, the basic operators shown so far only add new groups, and removing groups may be required, at least for the sake of termination. Therefore, the analysis needs to merge distinct groups. This merge operator occurs as part of join, widening or when other transfer functions detect distinct groups of a same array enjoy similar properties. Operator 
                        merge
                      takes an abstract state 
                        
                           
                              a
                           
                           
                              ♯
                           
                        
                        =
                        (
                        p
                        ,
                        
                           
                              n
                           
                           
                              →
                           
                        
                        ,
                        r
                        )
                     , an array 
                        t
                      and a set of groups S of array 
                        t
                      as arguments and replaces all the groups of that set by a single group. For the sake of simplicity, we describe the operations performed when S has two elements 
                        
                           
                              G
                           
                           
                              j
                           
                        
                        ,
                        
                           
                              G
                           
                           
                              k
                           
                        
                      (the case of a set of more than two elements is similar):
                        
                           •
                           It creates a fresh group name 
                                 
                                    
                                       G
                                    
                                    
                                       i
                                    
                                 
                               and adds it to partition 
                                 p
                              .

The numeric constraints on indexes and fields of 
                                 
                                    
                                       G
                                    
                                    
                                       i
                                    
                                 
                               over-approximate those on 
                                 
                                    
                                       G
                                    
                                    
                                       k
                                    
                                 
                               and 
                                 
                                    
                                       G
                                    
                                    
                                       j
                                    
                                 
                              ; group size 
                                 
                                    
                                       
                                          
                                             Sz
                                          
                                          
                                             ̲
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                               is assigned with 
                                 
                                    
                                       
                                          
                                             Sz
                                          
                                          
                                             ̲
                                          
                                       
                                    
                                    
                                       k
                                    
                                 
                                 +
                                 
                                    
                                       
                                          
                                             Sz
                                          
                                          
                                             ̲
                                          
                                       
                                    
                                    
                                       j
                                    
                                 
                               in 
                                 
                                    
                                       n
                                    
                                    
                                       →
                                    
                                 
                              .

The relation predicates on 
                                 
                                    
                                       G
                                    
                                    
                                       i
                                    
                                 
                               over-approximate those on 
                                 
                                    
                                       G
                                    
                                    
                                       k
                                    
                                 
                               and 
                                 
                                    
                                       G
                                    
                                    
                                       j
                                    
                                 
                               in 
                                 r
                               (namely any field that is known to be an element of 
                                 
                                    
                                       G
                                    
                                    
                                       j
                                    
                                 
                               or 
                                 
                                    
                                       G
                                    
                                    
                                       k
                                    
                                 
                               is then known to be an element of 
                                 
                                    
                                       G
                                    
                                    
                                       i
                                    
                                 
                                 )
                              .

It removes group names 
                                 
                                    
                                       G
                                    
                                    
                                       j
                                    
                                 
                               and 
                                 
                                    
                                       G
                                    
                                    
                                       k
                                    
                                 
                               from partition 
                                 p
                              .

It renames 
                                 
                                    
                                       G
                                    
                                    
                                       i
                                    
                                 
                               to 
                                 
                                    
                                       G
                                    
                                    
                                       j
                                    
                                 
                               or 
                                 
                                    
                                       G
                                    
                                    
                                       k
                                    
                                 
                              , the choice depends on which group may originally consist of more cells.


                           Fig. 10
                           (a) defines an abstract state 
                              
                                 
                                    a
                                 
                                 
                                    ♯
                                 
                              
                            which describes an array with two groups. Applying 
                              merge
                            to 
                              
                                 
                                    a
                                 
                                 
                                    ♯
                                 
                              
                            and set 
                              {
                              0
                              ,
                              1
                              }
                            produces the state shown in Fig. 10(b), with a single group and coarser predicates, obtained by joining the constraints over the contents of the initial groups.


                           Operator 
                           
                              merge
                            
                           is sound in the following sense: for all abstract state 
                           
                              
                                 
                                    a
                                 
                                 
                                    ♯
                                 
                              
                           , array variable 
                           
                              t
                           , and two groups 
                           
                              
                                 
                                    G
                                 
                                 
                                    k
                                 
                              
                            
                           and 
                           
                              
                                 
                                    G
                                 
                                 
                                    j
                                 
                              
                            
                           in array 
                           
                              t
                           , 
                              
                                 
                                    
                                       
                                          γ
                                       
                                       
                                          St
                                       
                                    
                                    (
                                    
                                       
                                          a
                                       
                                       
                                          ♯
                                       
                                    
                                    )
                                    ⊆
                                    
                                       
                                          γ
                                       
                                       
                                          St
                                       
                                    
                                    (
                                    merge
                                    (
                                    
                                       
                                          a
                                       
                                       
                                          ♯
                                       
                                    
                                    ,
                                    t
                                    ,
                                    {
                                    
                                       
                                          G
                                       
                                       
                                          k
                                       
                                    
                                    ,
                                    
                                       
                                          G
                                       
                                       
                                          j
                                       
                                    
                                    }
                                    )
                                    )
                                 
                              
                           
                        

Let 
                              
                                 
                                    a
                                 
                                 
                                    ♯
                                 
                              
                              =
                              (
                              p
                              ,
                              
                                 
                                    n
                                 
                                 
                                    →
                                 
                              
                              ,
                              r
                              )
                            be an abstract state, and two groups 
                              
                                 
                                    G
                                 
                                 
                                    k
                                 
                              
                            and 
                              
                                 
                                    G
                                 
                                 
                                    j
                                 
                              
                            in 
                              p
                           . We assume that applying 
                              merge
                            on 
                              
                                 
                                    G
                                 
                                 
                                    k
                                 
                              
                            and 
                              
                                 
                                    G
                                 
                                 
                                    j
                                 
                              
                            in 
                              
                                 
                                    a
                                 
                                 
                                    ♯
                                 
                              
                            produces group 
                              
                                 
                                    G
                                 
                                 
                                    i
                                 
                              
                            (in the algorithm of merge, 
                              
                                 
                                    G
                                 
                                 
                                    i
                                 
                              
                            will be renamed to 
                              
                                 
                                    G
                                 
                                 
                                    j
                                 
                              
                            or 
                              
                                 
                                    G
                                 
                                 
                                    k
                                 
                              
                            finally, but the renaming does not affect the concretization) in abstract state 
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          ♯
                                       
                                    
                                 
                                 
                                    ′
                                 
                              
                              =
                              (
                              
                                 
                                    p
                                 
                                 
                                    ′
                                 
                              
                              ,
                              
                                 
                                    
                                       
                                          n
                                       
                                       
                                          →
                                       
                                    
                                 
                                 
                                    ′
                                 
                              
                              ,
                              
                                 
                                    r
                                 
                                 
                                    ′
                                 
                              
                              )
                           .

Let 
                              σ
                              ∈
                              
                                 
                                    γ
                                 
                                 
                                    St
                                 
                              
                              (
                              
                                 
                                    a
                                 
                                 
                                    ♯
                                 
                              
                              )
                           . We write 
                              ψ
                              ,
                              ν
                            for the witnesses of 
                              σ
                              ∈
                              
                                 
                                    γ
                                 
                                 
                                    St
                                 
                              
                              (
                              
                                 
                                    a
                                 
                                 
                                    ♯
                                 
                              
                              )
                            in Definition 3. We now show that 
                              σ
                            is also in the concretization of 
                              
                                 
                                    
                                       
                                          a
                                       
                                       
                                          ♯
                                       
                                    
                                 
                                 
                                    ′
                                 
                              
                           , by constructing a witnesses 
                              
                                 
                                    ψ
                                 
                                 
                                    ′
                                 
                              
                              ,
                              
                                 
                                    ν
                                 
                                 
                                    ′
                                 
                              
                           :
                              
                                 1.
                                 Fixing 
                                       
                                          
                                             ψ
                                          
                                          
                                             ′
                                          
                                       
                                       (
                                       
                                          
                                             G
                                          
                                          
                                             i
                                          
                                       
                                       )
                                     so that 
                                       
                                          
                                             ψ
                                          
                                          
                                             ′
                                          
                                       
                                       (
                                       
                                          
                                             G
                                          
                                          
                                             i
                                          
                                       
                                       )
                                       =
                                       ψ
                                       (
                                       
                                          
                                             G
                                          
                                          
                                             j
                                          
                                       
                                       )
                                       ∪
                                       ψ
                                       (
                                       
                                          
                                             G
                                          
                                          
                                             k
                                          
                                       
                                       )
                                    .

Adding new dimensions (fields, size, index) for group 
                                       
                                          
                                             G
                                          
                                          
                                             i
                                          
                                       
                                    , that inherit from the values of the dimensions corresponding to 
                                       
                                          
                                             G
                                          
                                          
                                             j
                                          
                                       
                                       ,
                                       
                                          
                                             G
                                          
                                          
                                             k
                                          
                                       
                                     (we recall some of these dimensions are summary dimensions in the numerical domain):
                                       
                                          (a)
                                          
                                             
                                                ν
                                                (
                                                
                                                   
                                                      
                                                         
                                                            Idx
                                                         
                                                         
                                                            ̲
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                )
                                                =
                                                ν
                                                (
                                                
                                                   
                                                      
                                                         
                                                            Idx
                                                         
                                                         
                                                            ̲
                                                         
                                                      
                                                   
                                                   
                                                      j
                                                   
                                                
                                                )
                                                ∪
                                                ν
                                                (
                                                
                                                   
                                                      
                                                         
                                                            Idx
                                                         
                                                         
                                                            ̲
                                                         
                                                      
                                                   
                                                   
                                                      k
                                                   
                                                
                                                )
                                              (summary dimension);


                                             
                                                ν
                                                (
                                                
                                                   
                                                      
                                                         
                                                            Sz
                                                         
                                                         
                                                            ̲
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                )
                                                =
                                                ν
                                                (
                                                
                                                   
                                                      
                                                         
                                                            Sz
                                                         
                                                         
                                                            ̲
                                                         
                                                      
                                                   
                                                   
                                                      j
                                                   
                                                
                                                )
                                                +
                                                ν
                                                (
                                                
                                                   
                                                      
                                                         
                                                            Sz
                                                         
                                                         
                                                            ̲
                                                         
                                                      
                                                   
                                                   
                                                      k
                                                   
                                                
                                                )
                                             ;

similar to 
                                                
                                                   
                                                      
                                                         
                                                            Idx
                                                         
                                                         
                                                            ̲
                                                         
                                                      
                                                   
                                                   
                                                      .
                                                   
                                                
                                             , fields are summary dimensions and defined by 
                                                ν
                                                (
                                                
                                                   
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                   
                                                   
                                                      i
                                                   
                                                
                                                )
                                                =
                                                ν
                                                (
                                                
                                                   
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                   
                                                   
                                                      j
                                                   
                                                
                                                )
                                                ∪
                                                ν
                                                (
                                                
                                                   
                                                      
                                                         
                                                            f
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                   
                                                   
                                                      k
                                                   
                                                
                                                )
                                             .

Removing all dimensions corresponding to 
                                       
                                          
                                             G
                                          
                                          
                                             j
                                          
                                       
                                       ,
                                       
                                          
                                             G
                                          
                                          
                                             k
                                          
                                       
                                    .

This proves the soundness of 
                              merge
                           .□

The precision loss in merging depends on the similarity of the groups being merged. Our analysis loses no precision when the merged groups are exactly the same.


                     Reduction: Our abstract domain can be viewed as a product abstraction and can benefit from reduction 
                     [11]. If we consider abstract state 
                        
                           
                              a
                           
                           
                              ♯
                           
                        
                        =
                        (
                        p
                        ,
                        
                           
                              n
                           
                           
                              →
                           
                        
                        ,
                        r
                        )
                     , components 
                        
                           
                              n
                           
                           
                              →
                           
                        
                      and 
                        r
                      may allow us to refine each other. Such steps are performed by a partial reduction operator 
                        reduce
                     , which strengthens the numeric and relation predicates, without changing the global concretization [11]. The operations of 
                        reduce
                      are based on the numeric implications of relation predicates. It consists of two directions:
                        
                           •
                           from 
                                 r
                               to 
                                 
                                    
                                       n
                                    
                                    
                                       →
                                    
                                 
                              : relation predicates always imply numeric constraints over the size and indexes of array groups, e.g., if 
                                 v
                                 ◃
                                 
                                    
                                       G
                                    
                                    
                                       i
                                    
                                 
                              , then group 
                                 
                                    
                                       G
                                    
                                    
                                       i
                                    
                                 
                               has at least one element (
                                 
                                    
                                       
                                          
                                             Sz
                                          
                                          
                                             ̲
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                                 ≥
                                 1
                              ), and if 
                                 
                                    
                                       
                                          
                                             Idx
                                          
                                          
                                             ̲
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                                 <
                                 5
                              , then 
                                 v
                                 <
                                 5
                              ;

from 
                                 
                                    
                                       n
                                    
                                    
                                       →
                                    
                                 
                               to 
                                 r
                              : more precise relation predicates can be inferred from the numeric relations between variables and summarized group indexes, e.g., if 
                                 v
                                 <
                                 
                                    
                                       
                                          
                                             Idx
                                          
                                          
                                             ̲
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                              , then reduce removes 
                                 
                                    
                                       G
                                    
                                    
                                       i
                                    
                                 
                               from 
                                 v
                                 ◃
                                 
                                    
                                       G
                                    
                                    
                                       i
                                    
                                 
                                 ∪
                                 
                                    
                                       G
                                    
                                    
                                       j
                                    
                                 
                               in 
                                 r
                              .


                           Suppose 
                           
                              
                                 
                                    a
                                 
                                 
                                    ♯
                                 
                              
                            
                           is an abstract state, operator 
                           
                              reduce
                            
                           does not change concretization: 
                              
                                 
                                    
                                       
                                          γ
                                       
                                       
                                          St
                                       
                                    
                                    (
                                    reduce
                                    (
                                    
                                       
                                          a
                                       
                                       
                                          ♯
                                       
                                    
                                    )
                                    )
                                    =
                                    
                                       
                                          γ
                                       
                                       
                                          St
                                       
                                    
                                    (
                                    
                                       
                                          a
                                       
                                       
                                          ♯
                                       
                                    
                                    )
                                 
                              
                           
                        

To establish the soundness of 
                              reduce
                           , we simply need to consider each of the reduction cases mentioned above. We discuss only the first case, as the proof of the other cases is similar. We let 
                              (
                              p
                              ,
                              
                                 
                                    n
                                 
                                 
                                    →
                                 
                              
                              ,
                              r
                              )
                            be an abstract state, such that 
                              v
                              ◃
                              
                                 
                                    G
                                 
                                 
                                    i
                                 
                              
                            appears in 
                              r
                           . Then 
                              ∀
                              (
                              σ
                              ,
                              ψ
                              ,
                              ν
                              )
                              ∈
                              
                                 
                                    γ
                                 
                                 
                                    Gr
                                 
                              
                              (
                              p
                              ,
                              
                                 
                                    n
                                 
                                 
                                    →
                                 
                              
                              ,
                              r
                              )
                           , we have 
                              σ
                              (
                              v
                              )
                              ∈
                              ψ
                              (
                              
                                 
                                    G
                                 
                                 
                                    i
                                 
                              
                              )
                           , which implies 
                              |
                              ψ
                              (
                              
                                 
                                    G
                                 
                                 
                                    i
                                 
                              
                              )
                              |
                              ≥
                              1
                           . Since 
                              ν
                              (
                              
                                 
                                    
                                       
                                          Sz
                                       
                                       
                                          ̲
                                       
                                    
                                 
                                 
                                    1
                                 
                              
                              )
                              =
                              |
                              ψ
                              (
                              
                                 
                                    G
                                 
                                 
                                    i
                                 
                              
                              )
                              |
                           , it is sound to add constraint 
                              
                                 
                                    
                                       
                                          Sz
                                       
                                       
                                          ̲
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              ≥
                              1
                            to 
                              
                                 
                                    n
                                 
                                 
                                    →
                                 
                              
                           .□


                     Principles of partitioning: The basic operators on partitions are utilized by transfer functions and lattice operators to manipulate groups. The group modifications follow the principles listed below:
                        
                           •
                           
                              No disjunctions are introduced: our analysis does not produce disjunctions even if it has to lose some precision.


                              Groups with similar properties get merged: in most cases, only groups with similar properties are merged. Especially in join and widening, our analysis computes the similarities between groups and decides which groups to be merged.


                              Assignments are based on strong updates: our analysis generates a group which contains only the cell being in assigned to allow strong update.


                              The analysis strives to limit the number of groups: the analysis cost increases dramatically with the number of groups. Therefore our analysis merges groups whenever merging is an option (e.g., in an assignment and when the group an array cell belongs to is not known, our analysis merges all possible groups instead of generating a disjunction; this helps keeping the number of groups reasonable).

Our array static analysis performs a forward abstract interpretation 
                     [10]. In this section, we study the abstract transfer functions for tests (Section 6.1) and assignments (Section 6.2). Each transfer function should over-approximate the concrete effect of the corresponding program construction in the abstract domain.

The concrete semantics of a condition 
                           cond
                         is a function that inputs a set of states S and returns the subset of S in which 
                           cond
                         evaluates to 
                           TRUE
                        . Therefore, the abstract interpretation of a test from abstract state 
                           
                              
                                 a
                              
                              
                                 ♯
                              
                           
                           =
                           (
                           p
                           ,
                           
                              
                                 n
                              
                              
                                 →
                              
                           
                           ,
                           r
                           )
                         should narrow the set of concrete states described by 
                           
                              
                                 a
                              
                              
                                 ♯
                              
                           
                         by filtering out states in which 
                           cond
                         does not evaluate to 
                           TRUE
                        . Intuitively, it proceeds by strengthening constraints in the numeric component 
                           
                              
                                 n
                              
                              
                                 →
                              
                           
                        , and propagating them into 
                           r
                         thanks to 
                           reduce
                        .

However, the application of test 
                           cond
                         to numeric constraints 
                           
                              
                                 n
                              
                              
                                 →
                              
                           
                         is not immediate, since the array cells that occur in 
                           cond
                         do not necessarily correspond directly to dimensions in 
                           
                              
                                 n
                              
                              
                                 →
                              
                           
                        . As an example, let us consider condition test 
                           a
                           [
                           i
                           ]
                           .
                           f
                           ==
                           0
                         in an abstract state where 
                           a
                         is partitioned into two groups 
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                           ,
                           
                              
                                 G
                              
                              
                                 1
                              
                           
                         and where the only constraint available is 
                           i
                           ◃
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                           ∪
                           
                              
                                 G
                              
                              
                                 1
                              
                           
                        : then, the group array cell 
                           a
                           [
                           i
                           ]
                         belongs to cannot be identified without ambiguity. Moreover, each group may contain several elements, and its 
                           f
                         field may be described by a summary variable. Therefore, our analysis cannot refine 
                           a
                           [
                           i
                           ]
                           .
                           f
                        .

To derive a precise post-condition, our analysis relies on a local disjunction such that each case covers a group the index may belong to, and allows for a more precise test. In the above example, the analysis will analyze test 
                           a
                           [
                           i
                           ]
                           .
                           f
                           ==
                           0
                         in a disjunction of two abstract states where the relation predicate is replaced by 
                           i
                           ◃
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                         (resp., 
                           i
                           ◃
                           
                              
                                 G
                              
                              
                                 1
                              
                           
                        ). This process is called enumerate. The analysis then applies the numerical domain condition test operator to each disjunct. In this case, it will apply 
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 0
                              
                           
                           ==
                           0
                         to disjunct 0 and 
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 1
                              
                           
                           ==
                           0
                         to disjunct 1. Note that 
                           
                              
                                 n
                              
                              
                                 →
                              
                           
                         may have summary dimensions (whenever a group describes more than a single array cell, its fields are summary dimensions), and that the actual condition test may not strengthen the constraints: for instance, if the size of group 
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                         is not known to be exactly one, condition test 
                           
                              
                                 
                                    
                                       f
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 0
                              
                           
                           ==
                           0
                         
                        will not strengthen the constraints in 
                           
                              
                                 n
                              
                              
                                 →
                              
                           
                        . After the numerical condition test operator has been applied to all disjuncts, the analysis applies operator 
                           reduce
                        , and merges all resulting disjuncts.

Note that the abstract test operator does not change the shape of the array partitions, thus, all the disjuncts generated by the above process can be merged by a trivial join operator, which simply over-approximates the properties for each group (a more general join operator, able to deal with abstract states with incompatible partitions will be presented in Section 7): 
                           Definition 8
                           Local disjunction join


                           Utilizing the join operator 
                                 
                                    
                                       join
                                    
                                    
                                       Num
                                    
                                 
                               of the numeric domain with summarized domains [17], we define the local disjunction join operator 
                                 
                                    
                                       join
                                    
                                    
                                       ≡
                                    
                                 
                               as 
                                 
                                    
                                       
                                          
                                             join
                                          
                                          
                                             ≡
                                          
                                       
                                       (
                                       (
                                       p
                                       ,
                                       
                                          
                                             
                                                
                                                   n
                                                
                                                
                                                   →
                                                
                                             
                                          
                                          
                                             0
                                          
                                       
                                       ,
                                       
                                          
                                             r
                                          
                                          
                                             0
                                          
                                       
                                       )
                                       ,
                                       (
                                       p
                                       ,
                                       
                                          
                                             
                                                
                                                   n
                                                
                                                
                                                   →
                                                
                                             
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             r
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       )
                                       =
                                       (
                                       p
                                       ,
                                       
                                          
                                             join
                                          
                                          
                                             Num
                                          
                                       
                                       (
                                       
                                          
                                             
                                                
                                                   n
                                                
                                                
                                                   →
                                                
                                             
                                          
                                          
                                             0
                                          
                                       
                                       ,
                                       
                                          
                                             
                                                
                                                   n
                                                
                                                
                                                   →
                                                
                                             
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       ,
                                       
                                          
                                             r
                                          
                                          
                                             0
                                          
                                       
                                       ∩
                                       
                                          
                                             r
                                          
                                          
                                             1
                                          
                                       
                                       )
                                    
                                 
                              
                           


                              The local disjunction join operator 
                              
                                 
                                    
                                       join
                                    
                                    
                                       ≡
                                    
                                 
                               
                              is sound: 
                                 
                                    
                                       ∀
                                       i
                                       ∈
                                       {
                                       0
                                       ,
                                       1
                                       }
                                       ,
                                       
                                       
                                          
                                             γ
                                          
                                          
                                             St
                                          
                                       
                                       (
                                       p
                                       ,
                                       
                                          
                                             
                                                
                                                   n
                                                
                                                
                                                   →
                                                
                                             
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             r
                                          
                                          
                                             i
                                          
                                       
                                       )
                                       ⊆
                                       
                                          
                                             γ
                                          
                                          
                                             St
                                          
                                       
                                       (
                                       
                                          
                                             join
                                          
                                          
                                             ≡
                                          
                                       
                                       (
                                       (
                                       p
                                       ,
                                       
                                          
                                             
                                                
                                                   n
                                                
                                                
                                                   →
                                                
                                             
                                          
                                          
                                             0
                                          
                                       
                                       ,
                                       
                                          
                                             r
                                          
                                          
                                             0
                                          
                                       
                                       )
                                       ,
                                       (
                                       p
                                       ,
                                       
                                          
                                             
                                                
                                                   n
                                                
                                                
                                                   →
                                                
                                             
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             r
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       )
                                       )
                                    
                                 
                              
                           


                        Algorithm: The algorithm of the abstract transfer function for condition tests is fully described in Fig. 11
                        . Operator 
                           enumerate
                           :
                           
                              
                                 D
                              
                              
                                 ♯
                              
                           
                           →
                           P
                           (
                           D
                           )
                         generates the set of every possible state in which each array cell in cond belongs to exactly one group. Namely, 
                           
                              
                                 γ
                              
                              
                                 St
                              
                           
                           (
                           
                              
                                 a
                              
                              
                                 ♯
                              
                           
                           )
                           =
                           ∪
                           {
                           
                              
                                 γ
                              
                              
                                 St
                              
                           
                           (
                           
                              
                                 a
                              
                              
                                 i
                              
                              
                                 ♯
                              
                           
                           )
                           ∣
                           
                              
                                 a
                              
                              
                                 i
                              
                              
                                 ♯
                              
                           
                           ∈
                           enumerate
                           (
                           
                              
                                 a
                              
                              
                                 ♯
                              
                           
                           )
                           }
                        , and in any 
                           
                              
                                 a
                              
                              
                                 i
                              
                              
                                 ♯
                              
                           
                        , and for any array cell 
                           a
                           [
                           v
                           ]
                         in cond, the group that 
                           a
                           [
                           v
                           ]
                         belongs to is deterministic. Then, condition test 
                           
                              
                                 test
                              
                              
                                 Num
                              
                           
                         of the numeric domain with summarized domains [17] and the reduction operator are applied in each disjunctive state. All states are eventually joined together by the local disjunction join operator 
                           
                              
                                 join
                              
                              
                                 ≡
                              
                           
                        .
                           Example 8
                           We consider the analysis of the code studied in Section 2. At the beginning of the iteration on fixpoint of the loop, from numeric constraints over i and group indexes, 
                                 mproc
                                 [
                                 i
                                 ]
                               may be in 
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                              , 
                                 
                                    
                                       G
                                    
                                    
                                       1
                                    
                                 
                               or 
                                 
                                    
                                       G
                                    
                                    
                                       2
                                    
                                 
                              . Then, the analysis of test 
                                 mproc
                                 [
                                 i
                                 ]
                                 .
                                 mpflag
                                 >
                                 0
                               will locally create three disjuncts corresponding to each of these groups. However, in the case of 
                                 
                                    
                                       G
                                    
                                    
                                       1
                                    
                                 
                              , 
                                 
                                    
                                       
                                          
                                             mpflag
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 0
                              , thus the numeric test 
                                 
                                    
                                       
                                          
                                             mpflag
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       1
                                    
                                 
                                 >
                                 0
                               will produce abstract value 
                                 ⊥
                               denoting the empty set of states. The same happens in the case of 
                                 
                                    
                                       G
                                    
                                    
                                       2
                                    
                                 
                              . Therefore, only the third disjunct (the case corresponding to 
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                              ) contributes to the abstract post-condition. Thus, the analysis derives 
                                 i
                                 ◃
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                              .


                              The abstract transfer function 
                              
                                 test
                               
                              is sound in the sense that: 
                                 
                                    
                                       〚
                                       cond
                                       〛
                                       
                                          
                                             γ
                                          
                                          
                                             St
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             ♯
                                          
                                       
                                       )
                                       ⊆
                                       
                                          
                                             γ
                                          
                                          
                                             St
                                          
                                       
                                       (
                                       test
                                       (
                                       cond
                                       ,
                                       
                                          
                                             a
                                          
                                          
                                             ♯
                                          
                                       
                                       )
                                       )
                                    
                                 
                              
                           

The soundness of the condition test operator 
                                 test
                               follows from the fact that operators 
                                 enumerate
                               and 
                                 reduce
                               do not change the concretization, and from the soundness of the condition test operator 
                                 
                                    
                                       test
                                    
                                    
                                       Num
                                    
                                 
                               of the numeric domain, and of the local disjunction join operator 
                                 
                                    
                                       join
                                    
                                    
                                       ≡
                                    
                                 
                              .

The precision loss in condition test mainly comes from that in the condition test of numeric domains with summarized dimensions.

Given l-value 
                           lv
                         and expression 
                           ex
                        , the concrete semantics of assignment 
                           lv
                           =
                           ex
                         writes the value of 
                           ex
                         into the cell that 
                           lv
                         evaluates to. On the abstract level, given abstract pre-condition 
                           
                              
                                 a
                              
                              
                                 ♯
                              
                           
                           =
                           (
                           p
                           ,
                           
                              
                                 n
                              
                              
                                 →
                              
                           
                           ,
                           r
                           )
                        , an abstract post-condition for 
                           lv
                           =
                           ex
                         can be computed in three steps:
                           
                              1.
                              materialization of the memory cell that gets updated,

update of the numeric constraints in 
                                    
                                       
                                          N
                                       
                                       
                                          ♯
                                       
                                    
                                  using 
                                    
                                       
                                          assign
                                       
                                       
                                          Num
                                       
                                    
                                  
                                 [21], and update of the relation predicates, and

application of the reduction operator to the resulting abstract state.


                        Materialization: When 
                           lv
                         denotes an array cell, the analysis first materializes it into a group consisting of a single cell, so that strong updates can be carried out on 
                           
                              
                                 n
                              
                              
                                 →
                              
                           
                         and 
                           r
                        . To achieve this, the analysis computes which group(s) 
                           lv
                         may evaluate into in abstract state 
                           
                              
                                 a
                              
                              
                                 ♯
                              
                           
                        . If there is a single such group 
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                        , that contains a single cell (i.e., 
                           
                              
                                 
                                    
                                       Sz
                                    
                                    
                                       ̲
                                    
                                 
                              
                              
                                 i
                              
                           
                           =
                           1
                        ), then materialization is already achieved. If there is a single such group 
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                        , and 
                           
                              
                                 
                                    
                                       Sz
                                    
                                    
                                       ̲
                                    
                                 
                              
                              
                                 i
                              
                           
                         is greater than 1, then the analysis calls 
                           split
                         in order to divide 
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                         into a group of size 1 and a group containing the other elements. Last, when there are several such groups (e.g., when 
                           lv
                         is 
                           a
                           [
                           i
                           ]
                         and 
                           i
                           ◃
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                           ∪
                           
                              
                                 G
                              
                              
                                 1
                              
                           
                        ), the analysis first calls 
                           merge
                         to merge all such groups and then falls back to the case where 
                           lv
                         can only evaluate into a single group. This process is formalized as operator 
                           materialize
                           :
                           {
                           lv
                           }
                           ×
                           
                              
                                 D
                              
                              
                                 ♯
                              
                           
                           →
                           
                              
                                 D
                              
                              
                                 ♯
                              
                           
                        .

Note that in the last case, the merge of several groups may incur a loss in precision since the properties of several groups get merged before the abstract assignment takes place. We believe this loss in precision is acceptable here. The other option would be to produce a disjunction of abstract states, yet it would increase the analysis cost and the gain in precision would be unclear, as programmers typically view those disjunctions of groups of cells as having similar roles. Our experiments (Section 9) did confirm this intuition.

Materialization is not a novel technique in array analysis. Nevertheless, materialization gains extra precision due to the non-contiguous partition in our domain. To illustrate this, we compare the way our analysis performs with array analyses that are based solely on contiguous partitions. In Fig. 12
                        (a), array a is partitioned into three contiguous groups. The relation predicate 
                           i
                           ◃
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                           ∪
                           
                              
                                 G
                              
                              
                                 2
                              
                           
                         indicates that variable i stores an index that belongs to group 0 or group 2. To materialize array cell 
                           a
                           [
                           i
                           ]
                        , there are in general two methods: we could either let the analysis create two disjuncts such that, in each case the group 
                           a
                           [
                           i
                           ]
                         belongs to is fully known, or we could let it merge groups 
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                         and 
                           
                              
                                 G
                              
                              
                                 2
                              
                           
                        . The first solution obviously requires additional work in all cases. The second solution requires either a non-contiguous partition be created (since groups 
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                         and 
                           
                              
                                 G
                              
                              
                                 2
                              
                           
                         are not adjacent), or a non-trivial merge of groups throughout the array: in an array analysis that is based solely on contiguous partitions, this implies that all groups between 
                        
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                         
                        and 
                        
                           
                              
                                 G
                              
                              
                                 2
                              
                           
                         have to be merged, which incurs a significant, and unnecessary precision loss. In our domain, non-contiguous partitions are allowed, so that our analysis is able to merge only 
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                         and 
                           
                              
                                 G
                              
                              
                                 2
                              
                           
                        . Therefore, we can rely on the latter solution, so as to avoid (even local) disjunctions, and without losing much precision.


                        Constraints: New relation predicates can be inferred by operator 
                           propagate
                           :
                           {
                           lv
                           =
                           ex
                           }
                           ×
                           {
                           r
                           }
                           →
                           {
                           r
                           }
                        . It propagates relation predicates in two ways: (1) if both sides of the assignment are base variables, e.g.
                           v
                           =
                           u
                        , and we have 
                           u
                           ◃
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                        , then after assignment, we get 
                           v
                           ◃
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                        ; (2) if the right hand side is an array cell as in 
                           parent
                           =
                           mproc
                           [
                           child
                           ]
                           .
                           mparent
                         in the example of Section 2, since child stores an index in group 
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                         (
                           child
                           ◃
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                        ), the operator first looks for relations between fields and indexes such as 
                           
                              
                                 
                                    
                                       mparent
                                    
                                    
                                       ^
                                    
                                 
                              
                              
                                 0
                              
                           
                           ◃
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                        , and propagates them to the l-value as 
                           parent
                           ◃
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                        .

In this phase, the numeric assignment relies on local disjuncts that are merged right after the abstract assignment, as we have shown in the case of condition tests (Section 6.1).


                        Algorithm: The algorithm of assignment is formalized in Fig. 13
                        . Operator materialize is used to materialize the array cell to be updated (when lvis a base type variable, it does not modify the abstract state). It utilizes split (sometimes also merge) to separate lvto compose a group by itself. Operator enumerate generates every possible state in which each array cell in exbelongs to exactly one group as in Section 6.1. Then, assignment 
                           
                              
                                 assign
                              
                              
                                 Num
                              
                           
                         of numeric domain with summary dimensions [17] is applied on each disjunctive state. Operator propagate infers new relation predicates without numerical information. The reduction operator is then applied on each disjuncts after both 
                           
                              
                                 n
                              
                              
                                 →
                              
                           
                         and 
                           r
                         are updated by 
                           
                              
                                 assign
                              
                              
                                 Num
                              
                           
                         and propagate respectively. Finally, all states are eventually joined together by the local disjunction join operator 
                           
                              
                                 join
                              
                              
                                 ≡
                              
                           
                        .
                           Example 9
                           We consider 
                                 a
                                 [
                                 i
                                 ]
                                 =
                                 2
                               and abstract pre-condition shown in Fig. 12(a). The l-value evaluates into an index in 
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                               or 
                                 
                                    
                                       G
                                    
                                    
                                       2
                                    
                                 
                              , The result of materialization is shown in Fig. 12(b), we can see that groups 
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                               and 
                                 
                                    
                                       G
                                    
                                    
                                       2
                                    
                                 
                               are merged into group 
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                               and 
                                 a
                                 [
                                 i
                                 ]
                               is split as the sole element of group 
                                 
                                    
                                       G
                                    
                                    
                                       3
                                    
                                 
                              . Then, the assignment boils down to a strong update on numeric dimension 
                                 
                                    
                                       
                                          
                                             value
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       3
                                    
                                 
                              .


                              Abstract transfer function 
                              
                                 assign
                               
                              is sound in the sense that: 
                                 
                                    
                                       〚
                                       lv
                                       =
                                       ex
                                       〛
                                       
                                          
                                             γ
                                          
                                          
                                             St
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             ♯
                                          
                                       
                                       )
                                       ⊆
                                       
                                          
                                             γ
                                          
                                          
                                             St
                                          
                                       
                                       (
                                       assign
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             ♯
                                          
                                       
                                       ,
                                       lv
                                       ,
                                       ex
                                       )
                                       )
                                    
                                 
                              
                           

The soundness of the assignment operator 
                                 assign
                               follows from the fact that operators 
                                 enumerate
                               and 
                                 reduce
                               do not change the concretization, from the soundness of the assignment operator 
                                 
                                    
                                       assign
                                    
                                    
                                       Num
                                    
                                 
                               of the numeric domain, from the soundness of 
                                 propagate
                               and 
                                 materialize
                               (since operators split and merge are sound), and of the local disjunction join operator 
                                 
                                    
                                       join
                                    
                                    
                                       ≡
                                    
                                 
                              .□

Our analysis performs strong update in assignments, which captures the precise information on the concrete memory cells being modified. However, the merging phase that occurs before strong update might lead to a precision loss. Without such a merge, the analysis would have to enumerate all the groups an index may belong to, and to carry out a case analysis over this set of groups (each case would require a splitting of a group), which could turn out overly costly. This motivates the decision to perform the merge before the update. Additionally, and without a merging phase, the number of groups would be increased by one for each assignment, which could significantly impact the analysis performance.

Our analysis does not materialize the array elements that participate in condition tests (e.g., 
                           a
                           [
                           i
                           ]
                           ==
                           0
                        ). The other solution would be to split the array element (e.g., 
                           a
                           [
                           i
                           ]
                        ) out as a new separate group and to constrain its value to be zero. The reason is that compared to assignments, the precision our analysis gains from materialization in condition test does not seem worth the increased cost it would entail. Indeed, if there is no read/write operation in 
                           a
                           [
                           i
                           ]
                         after it has been materialized in condition test, there would be no precision gain.

Our analysis proceeds by standard abstract interpretation, and uses widening and inclusion test to compute abstract post-fixpoints for loops and abstract join for control flow union (e.g., after an 
                        if
                      statement). All these operators face the same difficulties: they may be applied to a pair of abstract states that do not have compatible array partitions (either the numbers of partitions are different, or the groups that appear in both arguments have radically different meanings), thus, they may need to “re-partition” their arguments before they can compute any precise information. We discuss this issue in detail in the case of join.

Abstract join should compute an abstract state whose concretization over-approximates that of both of its arguments.


                        The partition compatibility problem: The local join operator 
                           
                              
                                 join
                              
                              
                                 ≡
                              
                           
                         shown in Definition 8 cannot be applied to pairs of abstract states that do not have the same number of groups. In fact, in the context of control flow joins (and not basic abstract post-conditions as in Section 6.1), this operator would not be adequate even when both inputs have the same number of groups.

Let us assume two abstract states 
                           
                              
                                 a
                              
                              
                                 0
                              
                              
                                 ♯
                              
                           
                           ,
                           
                              
                                 a
                              
                              
                                 1
                              
                              
                                 ♯
                              
                           
                         with the same number of groups for each array, that we assume to have the same names. Then, the operator 
                           
                              
                                 join
                              
                              
                                 ≡
                              
                           
                         can be applied to these states, and computes an over-approximation for 
                           
                              
                                 a
                              
                              
                                 0
                              
                              
                                 ♯
                              
                           
                           ,
                           
                              
                                 a
                              
                              
                                 1
                              
                              
                                 ♯
                              
                           
                        , by joining predicates for each group name, the global numeric invariants and the side relations. However, this simple operator may produce very imprecise results if applied directly. As an example, we show two abstract states 
                           
                              
                                 a
                              
                              
                                 0
                              
                              
                                 ♯
                              
                           
                         and 
                           
                              
                                 a
                              
                              
                                 1
                              
                              
                                 ♯
                              
                           
                         in Fig. 14
                        (a) and (b), that are similar up to a group name permutation. The direct join is shown in Fig. 14(c). We note that the exact size of groups and the tight constraints over 
                           value
                         were lost. Conversely, if the same operation is done after a permutation of group names, an optimal result is found, as shown in Fig. 14(d).

Obviously, this group matching problem is actually even more complicated in general as 
                           
                              
                                 a
                              
                              
                                 0
                              
                              
                                 ♯
                              
                           
                           ,
                           
                              
                                 a
                              
                              
                                 1
                              
                              
                                 ♯
                              
                           
                         usually do not have the same number of groups. To address this, we need to define a join operator that modifies partitions, and uses constraints over partition group fields into account to decide what partition modification is most adequate.


                        Ranking function: To properly associate 
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                         in Fig. 14(a) with 
                           
                              
                                 G
                              
                              
                                 1
                              
                           
                         in Fig. 14(b), the analysis should take into account the group field properties. This is achieved with the help of a ranking function 
                           rank
                           :
                           G
                           ×
                           G
                           →
                           N
                        , which computes a distance between groups of cells of the same array in different abstract states by comparing their numerical and relation predicates. A high value of 
                           rank
                           (
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 G
                              
                              
                                 j
                              
                           
                           )
                         indicates that 
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                         of 
                           
                              
                                 a
                              
                              
                                 0
                              
                              
                                 ♯
                              
                           
                         and 
                           
                              
                                 G
                              
                              
                                 j
                              
                           
                         of 
                           
                              
                                 a
                              
                              
                                 1
                              
                              
                                 ♯
                              
                           
                         are likely to describe sets of cells with similar properties.

The value of 
                           rank
                           (
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 G
                              
                              
                                 j
                              
                           
                           )
                         is determined by three factors:
                           
                              •
                              the number of common constraints on the dimensions associated to fields and indexes in 
                                    
                                       
                                          n
                                       
                                       
                                          →
                                       
                                    
                                  (including their ranges and, when a relational abstract domain is used, relations with program variables);

the number of variables that have the same value ranges in both states, and that have var-index relations with both groups;

the “group origin”, determined by group names in the representation of the abstract values (this allows the analysis to detect that two groups were computed from a single group instance, in a predecessor abstract state).


                        Re-partitioning: Using the set of 
                           rank
                           (
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 G
                              
                              
                                 j
                              
                           
                           )
                         values, the analysis computes a pairing 
                        
                           ↔
                        
                        
                           ∈
                           P
                           (
                           G
                           ×
                           G
                           )
                        , that is a set of relations between groups of 
                           
                              
                                 a
                              
                              
                                 0
                              
                              
                                 ♯
                              
                           
                         and groups of 
                           
                              
                                 a
                              
                              
                                 1
                              
                              
                                 ♯
                              
                           
                        . The pairing is defined by the rules below:
                           
                              1.
                              we sort all pairs of groups decreasingly according to their ranking values, and then select the first k pairs (k is a constant number, usually the analysis lets k be the maximal number of groups in 
                                    
                                       
                                          a
                                       
                                       
                                          0
                                       
                                       
                                          ♯
                                       
                                    
                                  and 
                                    
                                       
                                          a
                                       
                                       
                                          1
                                       
                                       
                                          ♯
                                       
                                    
                                 ). That is, if the value of 
                                    rank
                                    (
                                    
                                       
                                          G
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    
                                       
                                          G
                                       
                                       
                                          j
                                       
                                    
                                    )
                                  is among the highest k ranking values of all group pairs, a relation 
                                    
                                       
                                          G
                                       
                                       
                                          i
                                       
                                    
                                    ↔
                                    
                                       
                                          G
                                       
                                       
                                          j
                                       
                                    
                                  is added to the pairing;

if three relations of the form 
                                    
                                       
                                          G
                                       
                                       
                                          i
                                       
                                    
                                    ↔
                                    
                                       
                                          G
                                       
                                       
                                          k
                                       
                                    
                                 , 
                                    
                                       
                                          G
                                       
                                       
                                          i
                                       
                                    
                                    ↔
                                    
                                       
                                          G
                                       
                                       
                                          j
                                       
                                    
                                  and 
                                    
                                       
                                          G
                                       
                                       
                                          t
                                       
                                    
                                    ↔
                                    
                                       
                                          G
                                       
                                       
                                          j
                                       
                                    
                                  have been added to the pairing, then the “middle” relation 
                                    
                                       
                                          G
                                       
                                       
                                          i
                                       
                                    
                                    ↔
                                    
                                       
                                          G
                                       
                                       
                                          j
                                       
                                    
                                  is removed.

if there is no 
                                    
                                       
                                          G
                                       
                                       
                                          j
                                       
                                    
                                  such that 
                                    
                                       
                                          G
                                       
                                       
                                          i
                                       
                                    
                                    ↔
                                    
                                       
                                          G
                                       
                                       
                                          j
                                       
                                    
                                 , then an empty such group is created with 
                                    create
                                 ;

if 
                                    
                                       
                                          G
                                       
                                       
                                          i
                                       
                                    
                                    ↔
                                    
                                       
                                          G
                                       
                                       
                                          j
                                       
                                    
                                  and 
                                    
                                       
                                          G
                                       
                                       
                                          i
                                       
                                    
                                    ↔
                                    
                                       
                                          G
                                       
                                       
                                          k
                                       
                                    
                                 , then 
                                    
                                       
                                          G
                                       
                                       
                                          j
                                       
                                    
                                  and 
                                    
                                       
                                          G
                                       
                                       
                                          k
                                       
                                    
                                  are merged by operator 
                                    merge
                                  and the resulting group is paired with 
                                    
                                       
                                          G
                                       
                                       
                                          i
                                       
                                    
                                 ;

if 
                                    
                                       
                                          G
                                       
                                       
                                          i
                                       
                                    
                                  is mapped only to 
                                    
                                       
                                          G
                                       
                                       
                                          j
                                       
                                    
                                 , 
                                    
                                       
                                          G
                                       
                                       
                                          j
                                       
                                    
                                  is mapped only to 
                                    
                                       
                                          G
                                       
                                       
                                          i
                                       
                                    
                                 , and 
                                    i
                                    ≠
                                    j
                                 , then one of them is renamed accordingly (so that they carry the same name).

The algorithm of 
                           join
                         is shown in Fig. 15
                        . It first computes the ranking values of all groups from two abstract states by operator 
                           rank
                        , and then repartition the two states by 
                           repartition
                         (with 
                           create
                         and 
                           merge
                        ) according to the ranking values. Finally, it applies 
                           
                              
                                 join
                              
                              
                                 ≡
                              
                           
                         on two compatible states.
                           Theorem 8
                           Soundness


                           
                              Join operator 
                              
                                 join
                               
                              is sound in the sense that: 
                                 
                                    
                                       ∀
                                       
                                          
                                             a
                                          
                                          
                                             0
                                          
                                          
                                             ♯
                                          
                                       
                                       ,
                                       
                                          
                                             a
                                          
                                          
                                             1
                                          
                                          
                                             ♯
                                          
                                       
                                       ,
                                       
                                       
                                          
                                             γ
                                          
                                          
                                             St
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             0
                                          
                                          
                                             ♯
                                          
                                       
                                       )
                                       ⊆
                                       
                                          
                                             γ
                                          
                                          
                                             St
                                          
                                       
                                       (
                                       join
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             0
                                          
                                          
                                             ♯
                                          
                                       
                                       ,
                                       
                                          
                                             a
                                          
                                          
                                             1
                                          
                                          
                                             ♯
                                          
                                       
                                       )
                                       )
                                       ∧
                                       
                                          
                                             γ
                                          
                                          
                                             St
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             1
                                          
                                          
                                             ♯
                                          
                                       
                                       )
                                       ⊆
                                       
                                          
                                             γ
                                          
                                          
                                             St
                                          
                                       
                                       (
                                       join
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             0
                                          
                                          
                                             ♯
                                          
                                       
                                       ,
                                       
                                          
                                             a
                                          
                                          
                                             1
                                          
                                          
                                             ♯
                                          
                                       
                                       )
                                       )
                                    
                                 
                              
                           

The soundness of the join operator 
                                 join
                               follows from the fact that the operator 
                                 repartition
                               is sound (since 
                                 create
                               and 
                                 merge
                               are sound), and from the soundness of 
                                 
                                    
                                       join
                                    
                                    
                                       ≡
                                    
                                 
                              .□

We assume 
                                 a
                               is an integer array of length 100 and i is an integer variable storing a value in 
                                 [
                                 0
                                 ,
                                 99
                                 ]
                              , and consider the program of Fig. 16
                              (a). At the exit of the 
                                 if
                               statement, the analysis needs to join the pre-condition (also the state in false branch) shown in Fig. 16(c) (that has a single group) and the state in true branch shown in Fig. 12(b) (that has two groups). We note that 
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                               in Fig. 16(c) has similar properties as 
                                 
                                    
                                       G
                                    
                                    
                                       0
                                    
                                 
                               in Fig. 16(b), thus they get paired. Moreover, 
                                 
                                    
                                       G
                                    
                                    
                                       1
                                    
                                 
                               in Fig. 16(b) is paired to no group, so a new group is created, and paired to it. At that stage 
                                 
                                    
                                       join
                                    
                                    
                                       ≡
                                    
                                 
                               applies, and returns the abstract state shown in Fig. 16(d).

Our join operator is not optimal. That is due to the fact the algorithm for pairing is heuristic and thus may not find the best pairing relations. Join may also lose precision due to the merge operator.

The widening algorithm is similar to that of join, but with a different re-partitioning strategy that ensures termination.


                        Case of compatible partitions: We first define a restriction of widening to compatible abstract states (that is, abstract states, whose partitions have the same numbers of groups, with the same names):
                           Definition 9
                           Widening for compatible states


                           The widening for compatible states is defined by 
                                 
                                    
                                       
                                          
                                             widen
                                          
                                          
                                             ≡
                                          
                                       
                                       (
                                       (
                                       p
                                       ,
                                       
                                          
                                             
                                                
                                                   n
                                                
                                                
                                                   →
                                                
                                             
                                          
                                          
                                             0
                                          
                                       
                                       ,
                                       
                                          
                                             r
                                          
                                          
                                             0
                                          
                                       
                                       )
                                       ,
                                       (
                                       p
                                       ,
                                       
                                          
                                             
                                                
                                                   n
                                                
                                                
                                                   →
                                                
                                             
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             r
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       )
                                       =
                                       (
                                       p
                                       ,
                                       
                                          
                                             widen
                                          
                                          
                                             Num
                                          
                                       
                                       (
                                       
                                          
                                             
                                                
                                                   n
                                                
                                                
                                                   →
                                                
                                             
                                          
                                          
                                             0
                                          
                                       
                                       ,
                                       
                                          
                                             
                                                
                                                   n
                                                
                                                
                                                   →
                                                
                                             
                                          
                                          
                                             1
                                          
                                       
                                       )
                                       ,
                                       
                                          
                                             r
                                          
                                          
                                             0
                                          
                                       
                                       ∩
                                       
                                          
                                             r
                                          
                                          
                                             1
                                          
                                       
                                       )
                                    
                                 
                              
                           


                        Re-partitioning for widening: To achieve termination, 
                           widen
                         needs to ensure that the partition component eventually converges: after the partition component has converged, 
                           
                              
                                 widen
                              
                              
                                 ≡
                              
                           
                         can be applied, and will ensure both soundness and termination. This convergence property is not guaranteed by the group matching algorithm of Section 7.1. Therefore the widening operator 
                           widen
                         relies on a slightly different group re-partitioning operator 
                           
                              
                                 repartition
                              
                              
                                 ▿
                              
                           
                        . The only difference between it with 
                           repartition
                         lies in the pairing phase:
                           
                              1.
                              operator 
                                    
                                       
                                          repartition
                                       
                                       
                                          ▿
                                       
                                    
                                  pairs each group with the group with which it has the highest ranking value;

if three relations of the form 
                                    
                                       
                                          G
                                       
                                       
                                          i
                                       
                                    
                                    ↔
                                    
                                       
                                          G
                                       
                                       
                                          k
                                       
                                    
                                 , 
                                    
                                       
                                          G
                                       
                                       
                                          i
                                       
                                    
                                    ↔
                                    
                                       
                                          G
                                       
                                       
                                          j
                                       
                                    
                                  and 
                                    
                                       
                                          G
                                       
                                       
                                          t
                                       
                                    
                                    ↔
                                    
                                       
                                          G
                                       
                                       
                                          j
                                       
                                    
                                  have been added to the pairing, the “middle” relation 
                                    
                                       
                                          G
                                       
                                       
                                          i
                                       
                                    
                                    ↔
                                    
                                       
                                          G
                                       
                                       
                                          j
                                       
                                    
                                  gets removed.

The algorithm of 
                           widen
                         is shown in Fig. 17
                        . It just replaces 
                           repartition
                         and 
                           
                              
                                 join
                              
                              
                                 ≡
                              
                           
                         in the algorithm of join with 
                           
                              
                                 repartition
                              
                              
                                 ▿
                              
                           
                         and 
                           
                              
                                 widen
                              
                              
                                 ≡
                              
                           
                         respectively.

The resulting 
                           widen
                         operator is a sound and terminating widening operator [10]. For better precision, the analysis always uses 
                           join
                         for the first abstract iteration for a loop, and uses widening afterwards.
                           Theorem 9
                           Soundness and termination


                           
                              The operator 
                              
                                 widen
                               
                              is a widening operator: it over-approximates its arguments and ensures the termination of abstract iterates.

As in the case of 
                                 join
                              , the fact that 
                                 widen
                               returns an over-approximation of its inputs follows from the soundness of the basic operators on groups. Thus, we only have to establish the convergence of any sequence of abstract iterates of the form 
                                 
                                    
                                       a
                                    
                                    
                                       n
                                       +
                                       1
                                    
                                    
                                       ♯
                                    
                                 
                                 =
                                 widen
                                 (
                                 
                                    
                                       a
                                    
                                    
                                       n
                                    
                                    
                                       ♯
                                    
                                 
                                 ,
                                 
                                    
                                       
                                          
                                             a
                                          
                                          
                                             n
                                          
                                          
                                             ♯
                                          
                                       
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              .

Since 
                                 widen
                               never calls 
                                 create
                               and 
                                 split
                              , and changes the number of groups only by calling 
                                 merge
                              , the number of groups in its result decreases in any sequence of widened iterates, and eventually stabilizes after finitely many steps. From that point, groups are stable. Also, the height of the set of relation constraints over these groups is finite, thus the 
                                 r
                               component will also stabilize after finitely many iterates. Therefore, since 
                                 widen
                               applies 
                                 
                                    
                                       widen
                                    
                                    
                                       Num
                                    
                                 
                               on the numeric constraints component, it ensures the termination of any sequence of abstract iterates.

Therefore, widen is a widening operator.□

We consider the abstract states depicted in Fig. 16(b) and (c) and show how 
                                 widen
                               applies to these abstract states. The group matching algorithm will merge the two groups in Fig. 16(b) and pair the resulting group to the only group in Fig. 16(c). The output state after applying 
                                 
                                    
                                       widen
                                    
                                    
                                       ≡
                                    
                                 
                               is shown in Fig. 18
                              .

To check the termination of sequences of abstract iterates over loops, and the entailment of post-conditions, the analysis uses a sound inclusion checking operator 
                           isle
                        : when 
                           isle
                           (
                           
                              
                                 a
                              
                              
                                 0
                              
                              
                                 ♯
                              
                           
                           ,
                           
                              
                                 a
                              
                              
                                 1
                              
                              
                                 ♯
                              
                           
                           )
                         returns 
                           TRUE
                        , then 
                           
                              
                                 γ
                              
                              
                                 St
                              
                           
                           (
                           
                              
                                 a
                              
                              
                                 0
                              
                              
                                 ♯
                              
                           
                           )
                           ⊆
                           
                              
                                 γ
                              
                              
                                 St
                              
                           
                           (
                           
                              
                                 a
                              
                              
                                 1
                              
                              
                                 ♯
                              
                           
                           )
                        .

As in the case of join, a restricted inclusion checking operator 
                           
                              
                                 isle
                              
                              
                                 ≡
                              
                           
                         can be defined in a straightforward manner, that checks inclusion on “compatible” abstract states, that is abstract states with matching partitions: if 
                           is
                           _
                           
                              
                                 le
                              
                              
                                 Num
                              
                           
                           (
                           
                              
                                 
                                    
                                       n
                                    
                                    
                                       →
                                    
                                 
                              
                              
                                 0
                              
                           
                           ,
                           
                              
                                 
                                    
                                       n
                                    
                                    
                                       →
                                    
                                 
                              
                              
                                 1
                              
                           
                           )
                           =
                           TRUE
                         and 
                           
                              
                                 r
                              
                              
                                 1
                              
                           
                         is included in 
                           
                              
                                 r
                              
                              
                                 0
                              
                           
                         (as a set of constraints), then 
                           
                              
                                 γ
                              
                              
                                 St
                              
                           
                           (
                           p
                           ,
                           
                              
                                 
                                    
                                       n
                                    
                                    
                                       →
                                    
                                 
                              
                              
                                 0
                              
                           
                           ,
                           
                              
                                 r
                              
                              
                                 0
                              
                           
                           )
                           ⊆
                           
                              
                                 γ
                              
                              
                                 St
                              
                           
                           (
                           p
                           ,
                           
                              
                                 
                                    
                                       n
                                    
                                    
                                       →
                                    
                                 
                              
                              
                                 1
                              
                           
                           ,
                           
                              
                                 r
                              
                              
                                 1
                              
                           
                           )
                        , hence we let 
                           
                              
                                 isle
                              
                              
                                 ≡
                              
                           
                         return 
                           TRUE
                         in that case.

The inclusion checking algorithm is quite similar to that of join, but uses a modified ranking operator 
                           
                              
                                 rank
                              
                              
                                 <
                              
                           
                         and a modified re-partition operator 
                           
                              
                                 repartition
                              
                              
                                 <
                              
                           
                        . Operator 
                           
                              
                                 rank
                              
                              
                                 <
                              
                           
                         is the same as rankexcept that it evaluates 
                           
                              
                                 rank
                              
                              
                                 <
                              
                           
                           (
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                           ,
                           
                              
                                 G
                              
                              
                                 0
                              
                              
                                 ′
                              
                           
                           )
                         into a negative integer when the ranges of indexes, field contents and size of group 
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                         (from the left argument) are not included into those of 
                           
                              
                                 G
                              
                              
                                 0
                              
                              
                                 ′
                              
                           
                        . The difference of 
                           
                              
                                 repartition
                              
                              
                                 <
                              
                           
                         with 
                           repartition
                         lies in two aspects: firstly, in the pairing phase 
                           
                              
                                 repartition
                              
                              
                                 <
                              
                           
                         guarantees that each group from the left argument is paired with at least one group in the right argument; secondly, the partition transforming phase only modifies the groups in the left argument so as to construct an abstract state with the same groups as the right argument. This means that when two groups 
                           
                              
                                 G
                              
                              
                                 j
                              
                           
                         and 
                           
                              
                                 G
                              
                              
                                 k
                              
                           
                         from the right argument are paired with a single group 
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                         in the left argument, the inclusion checking algorithm will apply 
                           split
                         to 
                           
                              
                                 G
                              
                              
                                 i
                              
                           
                         and pair the two resulting groups with 
                           
                              
                                 G
                              
                              
                                 j
                              
                           
                         and 
                           
                              
                                 G
                              
                              
                                 k
                              
                           
                         respectively.

The inclusion checking algorithm is shown in Fig. 19
                        . It first computes the ranking values of all groups from two abstract states using operator 
                           rank
                        . If there is a group from the left argument that ranks negatively with all groups from the right argument, 
                           isle
                         conservatively returns false. Otherwise, it re-partitions the two states by 
                           
                              
                                 repartition
                              
                              
                                 <
                              
                           
                         (with 
                           create
                        , 
                           split
                         and 
                           merge
                        ) according to the ranking values. Finally, it applies 
                           
                              
                                 isle
                              
                              
                                 ≡
                              
                           
                         to two compatible states.
                           Theorem 10
                           Soundness


                           
                              The inclusion check operator 
                              
                                 isle
                               
                              is sound in the sense that 
                              
                                 
                                    
                                       isle
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             0
                                          
                                          
                                             ♯
                                          
                                       
                                       ,
                                       
                                          
                                             a
                                          
                                          
                                             1
                                          
                                          
                                             ♯
                                          
                                       
                                       )
                                       =
                                       TRUE
                                       ⟹
                                       
                                          
                                             γ
                                          
                                          
                                             St
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             0
                                          
                                          
                                             ♯
                                          
                                       
                                       )
                                       ⊆
                                       
                                          
                                             γ
                                          
                                          
                                             St
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             1
                                          
                                          
                                             ♯
                                          
                                       
                                       )
                                    
                                 
                              
                           

First, we note that 
                                 
                                    
                                       repartition
                                    
                                    
                                       <
                                    
                                 
                               does not modify the right hand side argument, and performs an over-approximation of the left hand side argument (through 
                                 create
                              , 
                                 split
                               and 
                                 merge
                              ). Second, 
                                 
                                    
                                       isle
                                    
                                    
                                       ≡
                                    
                                 
                               is sound. Therefore, when 
                                 isle
                               returns true, all elements in the concretization of the left argument also belong to the concretization of the right argument. Hence, it is sound.□

Our inclusion check operator is not complete because of the heuristics of pairing algorithm and the precision loss in operators on partitions.

In this section, we formalize an abstract interpreter for the language of Section 3, and we discuss in detail the full analysis of the cleanup example.

The abstract semantics of a program (a sequence of statements) 
                           〚
                           s
                           
                              
                                 〛
                              
                              
                                 #
                              
                           
                           :
                           
                              
                                 D
                              
                              
                                 ♯
                              
                           
                           →
                           
                              
                                 D
                              
                              
                                 ♯
                              
                           
                         is a function that maps an abstract pre-condition into an abstract post-condition. To define it, we let 
                           
                              
                                 lfp
                              
                              
                                 #
                              
                           
                         denote an abstract post-fixpoint operator, that applies to an abstract transformer, and computes an abstract post-fixpoint: if 
                           F
                           :
                           P
                           →
                           P
                         is a continuous concrete function and 
                           
                              
                                 F
                              
                              
                                 #
                              
                           
                           :
                           
                              
                                 D
                              
                              
                                 ♯
                              
                           
                           →
                           
                              
                                 D
                              
                              
                                 ♯
                              
                           
                         is such that 
                           F
                           ○
                           
                              
                                 γ
                              
                              
                                 St
                              
                           
                           ⊆
                           
                              
                                 γ
                              
                              
                                 St
                              
                           
                           ○
                           
                              
                                 F
                              
                              
                                 #
                              
                           
                        , then: 
                           
                              
                                 
                                    
                                       lfp
                                    
                                    
                                       
                                          
                                             γ
                                          
                                          
                                             St
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             ♯
                                          
                                       
                                       )
                                    
                                 
                                 ⊆
                                 
                                    
                                       γ
                                    
                                    
                                       St
                                    
                                 
                                 (
                                 
                                    
                                       lfp
                                    
                                    
                                       
                                          
                                             a
                                          
                                          
                                             ♯
                                          
                                       
                                    
                                    
                                       #
                                    
                                 
                                 
                                    
                                       F
                                    
                                    
                                       #
                                    
                                 
                                 )
                              
                           
                        In practice, as usual, 
                           
                              
                                 lfp
                              
                              
                                 #
                              
                           
                         computes a sequence of the abstract iterates, enforces its converges using widening, uses inclusion check to check when convergence has occurred, and may perform unroll iterations (our analysis unrolls all loops exactly once) or apply other techniques to enhance the precision of abstract post-fixpoint.
                           Definition 10
                           Abstract semantics


                           The abstract semantics 
                                 〚
                                 s
                                 
                                    
                                       〛
                                    
                                    
                                       #
                                    
                                 
                               of a statement 
                                 s
                               is defined by: 
                                 
                                    
                                       
                                          
                                             
                                                〚
                                                skip
                                                
                                                   
                                                      〛
                                                   
                                                   
                                                      #
                                                   
                                                
                                                (
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ♯
                                                   
                                                
                                                )
                                             
                                             
                                                =
                                             
                                             
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ♯
                                                   
                                                
                                             
                                          
                                          
                                             
                                                〚
                                                lv
                                                =
                                                ex
                                                
                                                   
                                                      〛
                                                   
                                                   
                                                      #
                                                   
                                                
                                                (
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ♯
                                                   
                                                
                                                )
                                             
                                             
                                                =
                                             
                                             
                                                assign
                                                (
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ♯
                                                   
                                                
                                                ,
                                                lv
                                                ,
                                                ex
                                                )
                                             
                                          
                                          
                                             
                                                〚
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      1
                                                   
                                                
                                                ;
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      2
                                                   
                                                
                                                
                                                   
                                                      〛
                                                   
                                                   
                                                      #
                                                   
                                                
                                                (
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ♯
                                                   
                                                
                                                )
                                             
                                             
                                                =
                                             
                                             
                                                〚
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      2
                                                   
                                                
                                                
                                                   
                                                      〛
                                                   
                                                   
                                                      #
                                                   
                                                
                                                ○
                                                〚
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      1
                                                   
                                                
                                                
                                                   
                                                      〛
                                                   
                                                   
                                                      #
                                                   
                                                
                                                (
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ♯
                                                   
                                                
                                                )
                                             
                                          
                                          
                                             
                                                〚
                                                if
                                                (
                                                cond
                                                )
                                                {
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      1
                                                   
                                                
                                                }
                                                else
                                                {
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      2
                                                   
                                                
                                                }
                                                
                                                   
                                                      〛
                                                   
                                                   
                                                      #
                                                   
                                                
                                                (
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ♯
                                                   
                                                
                                                )
                                             
                                             
                                                =
                                             
                                             
                                                join
                                                (
                                                〚
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      1
                                                   
                                                
                                                
                                                   
                                                      〛
                                                   
                                                   
                                                      #
                                                   
                                                
                                                ○
                                                test
                                                (
                                                cond
                                                ,
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ♯
                                                   
                                                
                                                )
                                                ,
                                                〚
                                                
                                                   
                                                      s
                                                   
                                                   
                                                      2
                                                   
                                                
                                                
                                                   
                                                      〛
                                                   
                                                   
                                                      #
                                                   
                                                
                                                ○
                                                test
                                                (
                                                cond
                                                ==
                                                FALSE
                                                ,
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ♯
                                                   
                                                
                                                )
                                                )
                                             
                                          
                                          
                                             
                                                〚
                                                while
                                                (
                                                cond
                                                )
                                                {
                                                s
                                                }
                                                
                                                   
                                                      〛
                                                   
                                                   
                                                      #
                                                   
                                                
                                                (
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ♯
                                                   
                                                
                                                )
                                             
                                             
                                                =
                                             
                                             
                                                test
                                                (
                                                cond
                                                ==
                                                FALSE
                                                ,
                                                
                                                   
                                                      lfp
                                                   
                                                   
                                                      
                                                         
                                                            a
                                                         
                                                         
                                                            ♯
                                                         
                                                      
                                                   
                                                   
                                                      #
                                                   
                                                
                                                
                                                   
                                                      F
                                                   
                                                   
                                                      #
                                                   
                                                
                                                )
                                             
                                          
                                          
                                             
                                             
                                             
                                                where
                                                
                                                
                                                   
                                                      F
                                                   
                                                   
                                                      #
                                                   
                                                
                                                ≔
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ♯
                                                   
                                                
                                                ↦
                                                〚
                                                s
                                                
                                                   
                                                      〛
                                                   
                                                   
                                                      #
                                                   
                                                
                                                (
                                                test
                                                (
                                                cond
                                                ,
                                                
                                                   
                                                      a
                                                   
                                                   
                                                      ♯
                                                   
                                                
                                                )
                                                )
                                             
                                          
                                       
                                    
                                 
                              
                           


                              Given a program 
                              
                                 s
                               
                              and an abstract pre-condition 
                              
                                 
                                    
                                       a
                                    
                                    
                                       ♯
                                    
                                 
                              , the post-condition derived by the analysis is sound: 
                                 
                                    
                                       〚
                                       s
                                       〛
                                       (
                                       
                                          
                                             γ
                                          
                                          
                                             St
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             ♯
                                          
                                       
                                       )
                                       )
                                       ⊆
                                       
                                          
                                             γ
                                          
                                          
                                             St
                                          
                                       
                                       (
                                       〚
                                       s
                                       
                                          
                                             〛
                                          
                                          
                                             #
                                          
                                       
                                       (
                                       
                                          
                                             a
                                          
                                          
                                             #
                                          
                                       
                                       )
                                       )
                                    
                                 
                              
                           

By induction over the syntax, and using the soundness of all the primitives called by the analysis.□

In Section 2, we overviewed some key parts of the analysis of an excerpt of function cleanup, which is part of the Minix memory management process table operations. We now provide more details about this analysis.

The function cleanup should always be called in a state where the Minix Memory Management Process Table satisfies global correctness property 
                           C
                         described in Fig. 2(b), and where argument child is the identifier of a valid user process descriptor. Therefore, the analysis starts with pre-condition 
                           C
                           ∧
                           child
                           ◃
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                           ∧
                           child
                           >
                           2
                        . It then proves that, under this pre-condition, and after executing the body of cleanup, 
                           C
                         always holds: to achieve this, it verifies that 
                           isle
                           (
                           〚
                           cleanup
                           (
                           child
                           )
                           
                              
                                 〛
                              
                              
                                 #
                              
                           
                           (
                           C
                           ∧
                           child
                           ◃
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                           ∧
                           child
                           >
                           2
                           )
                           ,
                           C
                           )
                           =
                           TRUE
                        .

In Fig. 20
                        , we describe with more details the analysis of the excerpt of cleanup. At start-up, we get pre-condition 
                           C
                           ∧
                           child
                           ◃
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                           ∧
                           child
                           >
                           2
                         (before line 1 in the figure). Because of the property of field 
                           mparent
                         in group 
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                         according to 
                           C
                        , we obtain 
                           parent
                           ◃
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                         at the beginning of line 2. At line 4, since child could be any cell whose index is larger than or equal to 2 in group 
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                        . The analysis performs a materialization during the analysis of that update, which splits group 
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                         into groups 
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                           ,
                           
                              
                                 G
                              
                              
                                 2
                              
                           
                        , as shown after line 4.

Then, the analysis enters the 
                           while
                         loop that starts at line 6. For the sake of clarity, we show only the abstract states computed after the convergence of the sequence of widening iterates (note those are the final invariants, and not the abstract states for the unroll iteration). The loop head invariant is shown right after line 6. For the sake of space and readability, we elide some groups and the properties of their fields:
                           
                              •
                              group 
                                    
                                       
                                          G
                                       
                                       
                                          1
                                       
                                    
                                  always describes the slots that were free before the call to cleanup (note that excludes the process descriptor of index child that is being freed).

group 
                                    
                                       
                                          G
                                       
                                       
                                          0
                                       
                                    
                                  describes the valid process descriptors that have not yet been visited by the loop (i.e., with an index greater or equal than i);

group 
                                    
                                       
                                          G
                                       
                                       
                                          2
                                       
                                    
                                  describes a group that consists of exactly one cell, corresponding to the process descriptor that is being cleaned up (cell 
                                    mproc
                                    [
                                    child
                                    ]
                                    )
                                 ;

group 
                                    
                                       
                                          G
                                       
                                       
                                          3
                                       
                                    
                                  describes the valid process descriptors that were already examined during the loop (i.e., with an index strictly lower than i).

The test at line 7 entails that i cannot be in groups 
                           
                              
                                 G
                              
                              
                                 1
                              
                           
                         and 
                           
                              
                                 G
                              
                              
                                 2
                              
                           
                         (all those processes have a null flag), thus, 
                           i
                           ◃
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                        . The test at line 8 keeps only the states where i is the index of a child of the process being cleaned up. This test leads to the splitting of that group, which enables a strong update at line 9.

We now briefly discuss the abstract iterates that lead to this invariant. During the first iteration, a new group is created so that, during the loop, the analysis always distinguishes the valid process descriptors with an index strictly lower than i from those with an index that is greater or equal than i. Not applying 
                           widen
                         at the end of the first iteration, and delaying it to the second iteration allows us to preserve this group. At the end of the subsequent widening iterations, the groups corresponding to index i and to indexes lower than or equal to i are merged together.

Last, when exiting the loop, 
                           i
                           ≥
                           24
                        . Since, the loop head invariant contains constraints 
                           i
                           ≤
                           
                              
                                 
                                    
                                       Idx
                                    
                                    
                                       ̲
                                    
                                 
                              
                              
                                 0
                              
                           
                         and 
                           
                              
                                 
                                    
                                       Idx
                                    
                                    
                                       ̲
                                    
                                 
                              
                              
                                 0
                              
                           
                           ≤
                           23
                        , this group is necessarily empty, and can be removed. After removal of that group, the analysis produces the abstract post-condition shown at line 11.

The post-condition of function cleanup is presented right after line 13. Actually the only difference with the state after line 11 is that group 2 may contain more elements (more slots might be cleaned up in the 
                           else
                         branch). It is easy to prove that it implies 
                           C
                         by comparison operator 
                           isle
                        .

We have implemented our analysis and evaluated how it copes with two classes of programs: (1) process tables as found in operating systems, including the Minix Memory Management Process Table and the task scheduling table of a proprietary Embedded Operating System currently under development, and (2) academic examples introduced in related works, and where we demonstrate that partitions in contiguous groups are not strictly necessary for the verification. Our abstract domain has been integrated into the MemCAD static analyzer [30,32,7]. It uses the Apronlibrary of numerical abstract domains [21]. In practice, our analysis uses octagons [26] for all test cases except one that is analyzed using convex polyhedra [9].


                        Verification of memory management part in Minix: The main data-structure of the Memory Management operating system service of Minix 1.1 is the MMPT mproc, which contains memory management information for each process. At start up, it is initialized by function mm_init, which creates process descriptors for 
                           mm
                        , 
                           fs
                         and init. After that, mproc should satisfy property 
                           C
                         (Section 2). Then, it gets updated by system calls fork, wait and exit, which respectively create a process, wait for terminated children process descriptors to be removed, and terminate a process. Each of these functions should be called only in a state that satisfies 
                           C
                        , and should return a state that also satisfies 
                           C
                         (we recall 
                           C
                         was defined in Fig. 2(b), and splits the indexes in the process table into two groups: group 
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                         contains all the indexes of the valid processes whereas group 
                           
                              
                                 G
                              
                              
                                 1
                              
                           
                         contains all the indexes of the “free cells” in the table). If property 
                           C
                         was violated, several critical issues could occur. First, system calls could crash due to out-of-bound accesses, e.g., when accessing mproc through field 
                           mparent
                        . Moreover, higher level, hard to debug issues could occur, such as the persistence of dangling processes, that would never be eliminated.

Therefore, we verified, using our analysis, that (1) mm_init properly initializes the structure, so that 
                           C
                         holds afterwards (under no pre-condition), and that (2) fork, wait and exit preserve 
                           C
                         (i.e., the analysis of each of these functions from pre-condition 
                           C
                         returns a post-condition that also satisfies 
                           C
                        ). This verification boils down to the following computations: 
                           
                              
                                 
                                    
                                       
                                          isle
                                          (
                                          〚
                                          mm
                                          _
                                          init
                                          
                                             
                                                〛
                                             
                                             
                                                #
                                             
                                          
                                          (
                                          ⊤
                                          )
                                          ,
                                          C
                                          )
                                       
                                       
                                          =
                                       
                                       
                                          TRUE
                                       
                                    
                                    
                                       
                                          isle
                                          (
                                          〚
                                          exit
                                          (
                                          who
                                          )
                                          
                                             
                                                〛
                                             
                                             
                                                #
                                             
                                          
                                          (
                                          C
                                          ∧
                                          who
                                          ◃
                                          
                                             
                                                G
                                             
                                             
                                                0
                                             
                                          
                                          ∧
                                          who
                                          >
                                          2
                                          )
                                          ,
                                          C
                                          )
                                       
                                       
                                          =
                                       
                                       
                                          TRUE
                                       
                                    
                                    
                                       
                                          isle
                                          (
                                          〚
                                          fork
                                          (
                                          who
                                          )
                                          
                                             
                                                〛
                                             
                                             
                                                #
                                             
                                          
                                          (
                                          C
                                          ∧
                                          who
                                          ◃
                                          
                                             
                                                G
                                             
                                             
                                                0
                                             
                                          
                                          )
                                          ,
                                          C
                                          )
                                       
                                       
                                          =
                                       
                                       
                                          TRUE
                                       
                                    
                                    
                                       
                                          isle
                                          (
                                          〚
                                          wait
                                          (
                                          who
                                          )
                                          
                                             
                                                〛
                                             
                                             
                                                #
                                             
                                          
                                          (
                                          C
                                          ∧
                                          who
                                          ◃
                                          
                                             
                                                G
                                             
                                             
                                                0
                                             
                                          
                                          )
                                          ,
                                          C
                                          )
                                       
                                       
                                          =
                                       
                                       
                                          TRUE
                                       
                                    
                                 
                              
                           
                        Note that function cleanup was inlined in wait and fork in a recursion free form (our analyzer currently does not supported recursion). Our tool achieves the verification of all these four functions. The results are shown in the first four lines of the table in Fig. 21
                        , including analysis time and peak number of groups for array mproc.

The analysis of mm_init and fork is very fast. The analysis of exit and wait also succeeds, although it is more complex due to the intricate structure of cleanup (which consists of five loops and a large number of tests) which requires 151 joins. Despite this, the maximum number of groups remains reasonable (six in the worst case).


                        Verification of task scheduling part in an industrial operating system: AOS: To assess the ability of our analysis to reason about process tables found in operating systems, and beyond the Minix case, we have also analyzed the task scheduling part of a more recent, industrial small embedded operating system, which we refer to as AOS. It uses a table 
                           taskq
                         to record the status of all processes. Fig. 22
                        (a) shows the definition of this table. Field 
                           used
                         indicates whether this cell is a valid process descriptor or a free slot. Since processes may get allocated and may exit at any time, the set of valid process descriptors is dynamic, and may correspond to any set of indexes of 
                           taskq
                        .

At a given time, a process may be either in state ready, in state suspended or in state sleeping. The processes that are in the same status are connected together by field 
                           next
                        , which means there are three embedded lists in this table. The first three and the last three elements of array 
                           taskq
                         are not used to store information of any process; instead, they respectively perform as list heads and tails. Fig. 22(b) shows the first 8 elements of 
                           taskq
                         in a given concrete state. We can see that the 
                           used
                         cells are not contiguous and the elements of the three lists are interleaved with each other. This array is manipulated by five functions listed below:
                           
                              •
                              Function tinit initializes array taskq by setting the first and last three elements as the heads and tails of the three lists that respectively correspond to ready, suspended and sleeping processes.

System call tcreat finds a free slot in taskq, changes it to 
                                    used
                                  and adds it to the list of sleeping processes.

System call 
                                    tsched
                                  decides which state the executing process should be in after its current execution.

System call tstop moves one node from the list of ready processes to the list of sleeping processes.

System call tstart moves one node from the list of sleeping processes to the list of ready processes.

We now consider a couple of examples from the literature, where arrays are used as containers, i.e., where the relative order of groups does not matter for the program׳s correctness. The purpose of this study is to exemplify other examples of cases our abstract domain is adequate for. Program 
                           int
                           _
                           init
                         consists of a simple initialization loop. Our analysis succeeds here, and can handle other cases relying on basic segments, although our algorithms are not specific to segments (and are geared towards the abstraction of non contiguous partitions).

Moreover, Fig. 22 shows 
                           complex
                        , an excerpt of an example from [12]. The second example is challenging for most existing techniques, as observed in [12] since resolving 
                           a
                           [
                           index
                           ]
                         at line 10 is tricky. As shown in Fig. 21, our analysis handles these two loops well, with respectively 4 and 3 groups.

The invariant of the first initialization loop in Fig. 22 is abstract state ① (at line 4): group 
                           
                              
                                 G
                              
                              
                                 1
                              
                           
                         accounts for initialized cells, whereas cells of 
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                         remain to be initialized. The analysis of 
                           a
                           [
                           i
                           ]
                           =
                           0
                           ;
                         from ① materializes a single uninitialized cell, so that a strong update produces abstract state ②. At the next iteration, and after increment operation 
                           i
                           ++
                        , widening merges 
                           
                              
                                 G
                              
                              
                                 2
                              
                           
                         with 
                           
                              
                                 G
                              
                              
                                 1
                              
                           
                        , which produces abstract state ① again. At loop exit, the analysis derives 
                           
                              
                                 G
                              
                              
                                 0
                              
                           
                         is empty as 
                           56
                           ≤
                           
                              
                                 
                                    
                                       Idx
                                    
                                    
                                       ̲
                                    
                                 
                              
                              
                                 0
                              
                           
                           ≤
                           55
                        . At this stage, this group is eliminated. The analysis of the second loop converges after two widening iterations, and produces abstract state ③. We note that group 
                           
                              
                                 G
                              
                              
                                 3
                              
                           
                         is kept separate, while groups 
                           
                              
                                 G
                              
                              
                                 1
                              
                           
                         and 
                           
                              
                                 G
                              
                              
                                 2
                              
                           
                         get merged when the assignment at line 10 is analyzed (Section 6.2). This allows us to prove the assertion at line 11.

In this paper, we have presented a novel abstract domain that is tailored for arrays, and that relies on partitioning, without imposing the constraint that the cells of a given group be contiguous.

Most array analyses require each group be a contiguous array segment. Abstract interpretation based static analysis tools [4,18,20,12] contiguously partition arrays over indexes statically and dynamically respectively. Tools based on decision procedures [1,2,5], and theorem provers [22,29,25,23] can describe properties of array cells over a certain range of indexes. We believe that both approaches are adequate for different sets of problems: segment based approaches are adequate to verify algorithms that use arrays to order elements, such as sorting algorithms, while our segment-less approach works better to verify programs that use arrays as dictionaries.

Other works target dictionary structures and summarize non-contiguous sets of cells, that are not necessarily part of arrays. In particular, [15,16] seeks for a unified way to reason about pointers, scalars and arrays. These works are orthogonal to our approach, as we strive to use properties specific to arrays in order to reason about the structure of groups. Therefore, [15,16] cannot express the invariants presented in Section 2 for two reasons: (1) the access paths cannot describe the contents of array elements as an interval or with other numeric constraints; (2) they cannot express content-index predicates. Similarly, HOO [13] is an effective abstract domain for containers and JavaScript open objects. As it uses a set abstract domain [14], it has a very general scope but does not exploit the structure of arrays, hence would sacrifice efficiency in such cases.

Last, template-based methods [3,19] are very powerful invariant generation techniques, yet require user supplied templates and can be quite costly.

Our approach has several key distinguishing factors. First, it not only relies on index relations, but also exploits semantic properties of array elements, to select groups. Second, relation predicates track lightweight properties, that would not be captured in a numerical domain. Last, it allows empty groups, which eliminated the need for any global disjunction in our examples (a few assignments and tests benefit from cheap, local disjunctions). Finally, experiments show that it is effective at inferring non-trivial array invariants with non-contiguous groups, and is able to verify the manipulation of two complex data-structures in two distinct operating systems.

Our analysis currently does not handle dynamically allocated arrays. However, that support could be added rather simply, by leaving the size of arrays abstract, to be represented by non-summarized dimensions in 
                        
                           
                              n
                           
                           
                              g
                           
                        
                     . Non-contiguous partitioning and group relation predicates enable our domain to verify memory safety invariants involving complex data structure in operating systems, which could not be achieved by previous static analyses [27,33] which also target system code.

Finally, this paper extends [24] with a full description of the algorithms for the transfer functions and analysis operators and of their proofs of soundness, with a formalization of the analysis of a basic array language, and with a deeper experimental evaluations. In particular, the verification of the task manager table 
                        taskq
                      is novel.

@&#REFERENCES@&#

