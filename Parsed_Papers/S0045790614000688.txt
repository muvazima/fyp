@&#MAIN-TITLE@&#A lightweight security scheme for query processing in clustered wireless sensor networks

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Low-overhead secured query-processing mechanism in clustered WSN environment.


                        
                        
                           
                           Preserves security features- confidentiality, integrity and defence against replay attack.


                        
                        
                           
                           Query is sent from base station to cluster heads in encrypted form.


                        
                        
                           
                           The cluster heads register their member nodes by exchanging messages.


                        
                        
                           
                           The cluster heads send aggregated responses to the base station.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

@&#ABSTRACT@&#


               
               
                  When wireless sensor networks (WSNs) are deployed in areas inaccessible by human beings, security becomes extremely important, as they are prone to different types of malicious attacks. We propose a scheme to build a security mechanism in a query-processing paradigm within WSNs with clustered architecture. This work aims to preserve the basic security features such as confidentiality and integrity as well as to protect from replay attack in presence of mote class attacker. Considering the limitations of such an attacker, the probability of attacking cluster head and member nodes is higher than attacking the base station. Paying attention to this fact, in all communication between cluster head and member nodes, the key is neither transmitted nor pre-deployed. Performance of the scheme is evaluated and compared through qualitative and quantitative analyses; results show the present scheme’s dominance over the competing schemes.
               
            

@&#INTRODUCTION@&#

WSNs unlike traditional networks are much more susceptible to attacks mainly due to the nature of their deployment and mode of communication. Attacks in sensor networks are of two types viz. active and passive attacks [1,2]. Active attacks are those where the adversary listens to and modifies the communication taking place in the network. Examples of such attacks are denial-of-service (DoS) attacks [2,3], node replication attacks, routing attacks, etc. Passive attackers only eavesdrop on the communication taking place without actively participating in disrupting the communication. Therefore, such networks require high security measures that must ensure proper protection of the network. Further, conventional security mechanism intended for the resource-rich networks such as local area network does not fit into the resource-starved network like WSN. In presence of such limitations it becomes imperative to devise lightweight security solutions for WSNs. Public key cryptography which requires complex computations creates a barrier in designing lightweight solutions [2]. However, symmetric key cryptography requiring relatively less computations and storage may be used as a security solution in such a scenario.

In this work, we propose a lightweight security scheme capable of maintaining the basic security features of the network as well as thwarting replay attack using symmetric cryptography. The scheme is an improved version of a security scheme SQPS (Secured Query Processing Scheme) proposed in one of our previous works [4]. The proposed strategy deals with securing the network at every step of communication within the network. Performance of the scheme is measured primarily by analyzing it in terms of cracking probability and cracking time as well as through calculation of storage, computation and communication overheads. Subsequent to this analysis, the scheme is also evaluated through simulation taking authentication rate, data freshness and packet delivery ratio as parameters. Both analytical and simulation results are compared with one existing competing scheme and the earlier version of the present scheme. In analytical results, performance shows significant improvement in terms of computation and communication overheads at the cost of slightly increased storage overhead, that is affordable now-a-days in motes [5] with improved specification. This proves the suitability of the proposed scheme for a resource-constrained network like WSN. On the other hand simulation results show improved performance of the scheme in replay attack detection without compromising the network performance in terms of packet delivery ratio.

The rest of the paper is organized as follows. Section 2 deals with related works. In Section 3 network and system assumptions are described in details. This is followed by Section 4 that gives a detailed description of the proposed scheme. Performance analysis of the scheme along with a detailed comparative study is done in Section 5. In Section 6, concluding remarks highlighting future scope of the work are presented.

@&#RELATED WORKS@&#

Many works deal with security primitives such as authentication, encryption and anti-replay protection that are described below:

Many works reported so far propose solutions for various forms of DoS attack. Deng et al. [6] have considered a particular type of DoS attack along a multi-hop data delivery path known as path-based DoS attack. As WSNs are generally tree structured, so an attack on the nodes along a path also affects the branches connected to that path. A one-way hash chain (OHC) mechanism has been proposed by the authors to prevent such path-based DoS attacks and protect end-to-end communication along a multi-hop data delivery path. Here an OHC number is added with each message packet leading to an extra overhead which is a major constraint for a resource constrained sensor node.

Perrig et al. [7] have developed a security protocol SNEP (Sensor Network Encryption Protocol) for one-to-one communication that provides basic security features and replay protection. The basic security features include confidentiality and two-party data authentication where it employs RC (Rivest Cipher) 5 based symmetric cryptography for confidentiality and MAC (Message Authentication Code) based authentication for data authentication. Here μTESLA protocol is used for securing broadcast of messages. The exchange of huge authentication information in SNEP is a real bottleneck for the resource-constrained WSN.

Das [8] have designed a hash-based user authentication scheme which provides protection against attacks such as replay attack and impersonation attack. The scheme presents a two-factor user authentication protocol for providing strong authentication and session key establishment. However, as the scheme does not establish any secured channel between user and node, it fails to protect response messages of a registered user’s query.

Nanda and Krishna [9] has developed a key management scheme for protecting the server from DoS attack in a hierarchical sensor network where the base station (BS) makes the first level hierarchy, cluster heads (CHs) form the second level hierarchy and the ground level is made by member nodes (MNs). This scheme provides time-stamp based DoS attack defense mechanism. Each node including the BS has an inbuilt key which is used for key generation. The generated keys are used for communication between BS and CH as well as between CH and MNs during network operation. It also provides solution for checking node authentication where the BS authenticates CHs and the CHs authenticate their MNs. Though the authors provide node authentication, other basic security features are not ensured with this scheme.

Xiong et al. [10] have presented a dynamic window scheme for securing broadcast in WSN against one type of DoS attack known as bogus packet insertion attacks. In energy-starved WSN it is not feasible for the nodes to check authentication of all the received messages. Also energy consumption to deal with fake messages and broadcast delay are two conflicting requirements. So, the scheme applies trade-off between these two by integrating authentication-first and forwarding-first methods to achieve securing broadcast in WSN. Each time before forwarding, a node decides whether or not to verify the message. The decision is taken based on dynamic window size, which is maintained by the node. The window-size is updated dynamically analyzing the authenticity of the received message, and number of hops the incoming message has passed after the latest authentication. Authors claim that using their scheme, the fake message is disseminated only to a small amount of nodes, thus saving the whole network from the effect of this attack. The scheme helps in minimizing broadcast delay but does not mention about other security properties such as integrity.

Since sensor nodes are energy-constrained, the lifetime of network is a major concern especially for applications of WSNs in harsh environments, e.g. military field in a snow-filled border area of two countries where sensors are monitoring chemical activity. Clustering techniques can aid in reducing energy consumption [11]. Thus the system model in the present work considers clustered network architecture based on LEACH (low energy adaptive clustering hierarchy) protocol [11]. Here the nodes organize themselves into local clusters with one node acting as the CH and the rest of the nodes as MNs. Fig. 1
                         illustrates our network architecture by showing nodes arranged in the form of clusters where each cluster consists of MNs controlled by the CH. The CHs are responsible for receiving data from their MNs and after requisite processing transmit the data to the sink. The communication between BS and CH is done using code division multiple access (CDMA). The communication between CH and its MNs uses time division multiple access (TDMA).

This work considers a query-driven [12] application platform where BS or sink generates query messages and broadcasts the query towards the CHs. After receiving the query the CHs check whether the integrity of the query packet received from the BS is preserved. If so, the query packet is accepted, else it is rejected. Before sending the query to the MNs, the CH does registration of the MNs by checking the integrity of the message sent from the MNs. Also the integrity of the query broadcast from the CH is checked by the MNs after they receive the query from the CH. After receiving the query, respective MNs transmit query response to their CHs. The CH aggregates the responses received from its MNs and transmit the aggregated response to the BS.

As mentioned earlier, in applications where WSNs are deployed in harsh, neglected and often adversarial physical environments, it is quite natural that attacker will be of same nature with the sensor nodes as these nodes can easily blend with the other nodes of the network. So, we have considered mote class [13] attackers where adversaries are assumed to own same resources as ordinary sensor nodes. The attack model considers replay attack [14] and attack on basic security properties such as confidentiality and integrity. We assume once the network starts to process a query, no new node can join the network until the query is processed.

In the said application where the network has to perform sensing tasks with trustless surroundings, secure data transmission [15] is thus especially necessary and is demanded in many such practical WSNs. Also, as data processing in WSN is generally distributed in nature, distributed data storage and retrieval [13] have become popular for efficient data management in sensor networks. Hence securing data in storage is also has paramount importance. Therefore, this security scheme aims to secure stored data in nodes and communication between the nodes.

Since, BS interfaces a sensor network to the outside world, the compromise of it can render the entire network useless. For this reason in many works it is considered that BS is trustworthy. Further, we have assumed mote class attacker and it is almost impossible for the attacker to attack BS. Thus, much attention is paid in securing communication to/from the sensor nodes (CH and MN) compared to securing communication from BS.

Our aim is to ensure the following basic properties and to protect against replay attack on the network considering the above mentioned adversary model.


                        Confidentiality: Confidentiality [16] is defined as the property where the transmitted message must make sense only to the intended receiver. Confidentiality is typically achieved by encrypting the plaintext and sending the cipher text to the receiver.


                        Integrity: Integrity [17] means that data must arrive at the receiver exactly as they were sent. There must not be any change during the transmission, neither accidentally nor maliciously.


                        Replay protection: This is the protection against replay attack in which a valid data transmission is maliciously or fraudulently repeated [14].

Unlike conventional cryptography used in applications, e.g. Internet, WSN being a short-lived, energy-starved network, neither can afford complex computation which needs huge energy consumption of the nodes nor it is required to be as robust as uncrackable within its relatively wide lifespan (as its lifespan is short). Moreover bit operation-based computations for securing [18] and for lowering transmission cost [19] is a known mechanism in WSN applications to make the schemes light-weight. Only thing important here is to ensure robustness as per the requirement.

In this background a secured query processing scheme in WSN is proposed which is a modified version of our preliminary scheme SQPS [4]. The scheme, i.e., modified secure query processing scheme (MSQPS) is extended by providing security to all phases of communication. Moreover, during communication between CH and MNs in implementing confidentiality, unlike SQPS, the key (B) which is confiscated at transmitting node is not transmitted over wireless medium but again computed in receiving nodes. This reduces key cracking probability [2] (described in Section 5) on transmission and makes the securing mechanism more robust. Precisely the registration phase of SQPS is extended in MSQPS by securing communications from BS to CH in addition to registering MNs by the respective CHs. This extended registration phase forms query phase. Similarly, query response phase of SQPS is extended by adding security on communication from CH to BS. The entire modified SQPS has two phases as follows: query phase and query response phase. The activities in query phase occur in two different places- one between BS and CH and the other between CH and MN. So, the query phase has in turn two sub-phases: query phase (BS–CH) and query phase (CH–MN). The query phase (CH–MN) again involves three sub-phases: registration phase (CH–MN), registration response phase (MN–CH) and query forwarding phase (CH–MN). The query response phase has also two different sub-phases as follows: query response phase (MN–CH) and query response phase (CH–BS).

This phase has two sub-phases, i.e. query phase (BS–CH) and query phase (CH–MN).

This phase is used for authenticating the query message broadcast from the BS towards the CHs. Before sending a query, the BS initiates the session by broadcasting the present time-stamp 
                              
                                 
                                    
                                       T
                                    
                                    
                                       BS
                                       _
                                       present
                                    
                                 
                              
                            (12 bits) towards all CHs at time (t
                           −2). The BS broadcasts the query in encrypted form at (t
                           −1). The 8 bits query (Q) is encrypted in four steps comprising of XOR, complement, swap and concatenate operations. The query (Q) is XORed with 
                              
                                 
                                    
                                       T
                                    
                                    
                                       BS
                                       _
                                       present
                                    
                                    
                                       ′
                                    
                                 
                              
                            where 
                              
                                 
                                    
                                       T
                                    
                                    
                                       BS
                                       _
                                       present
                                    
                                    
                                       ′
                                    
                                 
                              
                            is 8 bits from most significant bit (MSB) of 
                              
                                 
                                    
                                       T
                                    
                                    
                                       BS
                                       _
                                       present
                                    
                                 
                              
                           . The result (QE) of the previous operation is complemented 
                              
                                 (
                                 
                                    
                                       
                                          
                                             Q
                                          
                                          
                                             E
                                          
                                       
                                    
                                    
                                       ‾
                                    
                                 
                                 )
                              
                           . Finally, 4 bits from MSB of Q are swapped with 4 bits from least significant bit (LSB) of 
                              
                                 
                                    
                                       
                                          
                                             Q
                                          
                                          
                                             E
                                          
                                       
                                    
                                    
                                       ‾
                                    
                                 
                              
                            and Q is concatenated with 
                              
                                 
                                    
                                       
                                          
                                             Q
                                          
                                          
                                             E
                                          
                                       
                                    
                                    
                                       ‾
                                    
                                 
                              
                            to form the encrypted query packet 
                              
                                 (
                                 
                                    
                                       Q
                                    
                                    
                                       E
                                    
                                    
                                       ″
                                    
                                 
                                 )
                              
                           .

After receiving the 16 bits 
                              
                                 
                                    
                                       Q
                                    
                                    
                                       E
                                    
                                    
                                       ″
                                    
                                 
                              
                           , the CH performs decryption in three steps. Step 1 involves swapping, splitting and computing Q, 
                              
                                 
                                    
                                       
                                          
                                             Q
                                          
                                          
                                             E
                                          
                                       
                                    
                                    
                                       ‾
                                    
                                 
                              
                           . In step 2, 
                              
                                 
                                    
                                       
                                          
                                             Q
                                          
                                          
                                             E
                                          
                                       
                                    
                                    
                                       ‾
                                    
                                 
                              
                            is complemented to form QE. Finally, Q and QE are XORed to obtain 
                              
                                 
                                    
                                       T
                                    
                                    
                                       BS
                                       _
                                       present
                                    
                                    
                                       ′
                                    
                                 
                              
                           . If 
                              
                                 
                                    
                                       T
                                    
                                    
                                       BS
                                       _
                                       present
                                    
                                    
                                       ′
                                    
                                 
                              
                            is equal to 
                              
                                 
                                    
                                       T
                                    
                                    
                                       BS
                                       _
                                       present
                                    
                                 
                              
                            stored in CH, it can be inferred that message from BS is authentic. Both the BS and CH store the present time stamp 
                              
                                 
                                    
                                       T
                                    
                                    
                                       BS
                                       _
                                       present
                                    
                                 
                              
                            (12 bits). Encryption is done by the BS for achieving confidentiality. If it is successfully decrypted by the CH with the help of the same key as used at the sender side, confidentiality is ensured. Also if the CH finds the timestamp obtained after decryption is same as the timestamp stored in the CH, it is inferred that integrity is maintained.

Considering mote class attacker, the probability of attacking sensor nodes including CHs and MNs is higher than attacking the high-end node, i.e., BS. So, communication between BS and CH is encrypted by simple key made from timestamp. However, encrypted data is further processed through obfuscation to strengthen robustness. Further, considering vulnerability of attack on sensor nodes in all communication between CH and MNs, the key is neither transmitted over air nor pre-deployed resulting in reducing the risk of key capturing during transmission or through getting access to the stored data of the nodes by the adversary. This is described in the following sections.

In conventional cryptography, key length is considered relatively large and solutions are kept as complex keeping in mind that even if it is used in real life, e.g. networking, it should be robust enough so that it cannot be cracked within the application’s lifetime. However, as mentioned earlier the present solution is targeted for short-lived energy-constrained WSN. Here neither the network can afford complex computation which needs huge energy consumption of the nodes nor it is required to be as robust as uncrackable within its relatively wide lifespan (as its lifespan is short). Keeping this in mind short length keys are used for all communication involving CH and MN. This section describes the three sub-phases viz. registration phase (CH–MN), registration response phase (MN–CH) and query forwarding phase (CH–MN).

The registration phase (CH–MN) is used for authenticating the registration packet received by the MNs from the CH. At first, the CH initiates the session with the MNs by sending the current timestamp referred to as registration timestamp (T
                              reg) of 12 bits. The registration packet (R) is encrypted using a key B1 after which obfuscation operations involving XOR, extraction, shift and concatenation are done. The CH broadcast encrypted registration packet (S) towards the MNs and also sends the time 
                                 
                                    (
                                    
                                       
                                          T
                                       
                                       
                                          CH
                                          _
                                          present
                                       
                                    
                                    )
                                 
                               of broadcasting of registration packet to the BS. The registration packet (S) is decrypted by the MNs using the same key B1 followed by split, extraction, shift and XOR operations. The XOR operation results in 
                                 
                                    
                                       
                                          T
                                       
                                       
                                          reg
                                       
                                       
                                          ′
                                       
                                    
                                 
                               and if 
                                 
                                    
                                       
                                          T
                                       
                                       
                                          reg
                                       
                                       
                                          ′
                                       
                                    
                                 
                               matches with the extracted 8 bits from MSB of T
                              reg stored in MN, it can be inferred that the message that has come from CH is authentic, thereby ensuring integrity. Moreover encryption is done for achieving confidentiality. Successful decryption of the cipher text by the MN with the help of the same key used at the CH side ensures confidentiality. At the end of this phase CH and MNs store the registration timestamp (T
                              reg) of 12 bits≈2 bytes.

Once the decryption of S at MNs is over, the registration packet R is obtained. Now each MN further encrypts the 8 bits registration packet (R) and transmits the 2-tuple registration response (RR) packet using its designated time slot (TDMA) as mentioned in Section 3. The RR packet is transmitted in the respective time slot of the MN. It is to be noted that unlike 3-tuple RR packet in SQPS, the RR packet in MSQPS is 2-tuple and due to this reduction in packet size communication overhead is reduced. On receiving the registration response packet from each MN, the CH decrypts the packet that involves the same operations as in encryption using the key B2. Based on the output of this process it verifies the integrity of the received message. As encryption is done confidentiality is maintained.

In SQPS, the key is directly sent to the CH along with the RR packet whereas in MSQPS, the CH calculates the key B2 from the RR packet by performing the said operations. This makes MSQPS more secure in terms of key cracking.

The BS stores the time-stamp 
                                 
                                    
                                       
                                          T
                                       
                                       
                                          CH
                                          _
                                          present
                                       
                                    
                                 
                               and an additional time-stamp 
                                 
                                    
                                       
                                          T
                                       
                                       
                                          CH
                                          _
                                          previous
                                       
                                    
                                 
                               for future use where 
                                 
                                    
                                       
                                          T
                                       
                                       
                                          CH
                                          _
                                          previous
                                       
                                    
                                 
                               is set to null initially. The size of the data stored for each registered MN at CH is 6 bytes. Considering n number of MNs, the total data stored in all MNs is 6n bytes. Here 5-tuple data is stored in CH for each MN, whereas in SQPS 6-tuple data is stored in CH for every MN. The CH also stores the registration time-stamp (T
                              reg)≈2 bytes, so the total data stored in CH is (6n
                              +2) bytes. Once the registration phase gets over, the MN stores 2-tuple (node-id, 
                                 
                                    
                                       
                                          T
                                       
                                       
                                          MN
                                          _
                                          present
                                       
                                    
                                 
                              ) data, where 
                                 
                                    
                                       
                                          T
                                       
                                       
                                          MN
                                          _
                                          present
                                       
                                    
                                 
                               is time-stamp with which the message from MN is authenticated and gets its node-id. The size of the data stored at an MN is (6+12)=18 bits≈3 bytes. The MN also stores the registration time-stamp (T
                              reg) of 12 bits≈2 bytes. So the size of data stored is ≈5 bytes.

The query forwarding phase (CH–MN) follows the registration response phase. Once the MNs are registered, CH transmits the query (Q) to the MNs in encrypted form which was broadcast by the BS during the query phase (BS–CH) as described in Section 4.1.1. Similar to registration phase (CH–MN), here also the query (Q) is encrypted using the key B3 that is formed by shift operation. The XOR, extraction, shift and concatenation operations are used for obfuscating the query. The encrypted query packet is decrypted by the MNs using the key B3 in addition to obfuscation operations of XOR, extraction, shift and concatenation. The matching of the two time-stamps (i.e., one stored and the other obtained after decryption) confirms that the query packet received by the MNs is authentic. Similar to the checks for confidentiality and integrity as in registration phase (CH–MN), here also the above mentioned checks are valid as the same encryption and decryption mechanisms are being followed.
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                Algorithm for query phase (CH-MN)
                                             
                                          
                                          
                                             
                                                Begin
                                             
                                          
                                          
                                             // Registration Phase (CH-MN)
                                             
                                          
                                          
                                             // Action executed by CHs
                                          
                                          
                                             
                                                1: CH broadcasts registration time-stamp (Treg) of 12 bits
                                             // Initiates the session, CH and MNs store towards MNs T
                                                reg
                                             
                                          
                                          
                                             
                                                2: obtain X1
                                             
                                             // T
                                                reg XORed with R (R padded with 4 zeroes from MSB)
                                          
                                          
                                             
                                                3: obtain 
                                                   
                                                      
                                                         
                                                            B
                                                         
                                                         
                                                            1
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                             
                                             // Extract 4 bits from LSB of X1
                                             
                                          
                                          
                                             
                                                4: obtain S1
                                             
                                             // Right shift R, 
                                                   
                                                      
                                                         
                                                            B
                                                         
                                                         
                                                            1
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                 times
                                          
                                          
                                             
                                                5: Concatenate X1 with S1
                                             
                                             // 16 bits encrypted registration packet S
                                          
                                          
                                             
                                                6: CH broadcasts 16 bits encrypted registration packet (S) at time t
                                             
                                          
                                          
                                             // Actions executed by MNs
                                          
                                          
                                             
                                                7: On receiving S at time (t+1)
                                          
                                          
                                             
                                                8: for (i=t+1; i<=t+n; i+ +)
                                          
                                          
                                             
                                                9:
                                                 split S into 2 blocks
                                             // X1 = MS block, S1 = LS block
                                          
                                          
                                             
                                                10:
                                                obtain 
                                                   
                                                      
                                                         
                                                            B
                                                         
                                                         
                                                            1
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                             
                                             // Extract 4 bits from the LSB of X1
                                             
                                          
                                          
                                             
                                                11:
                                                obtain R
                                             // Left shift 
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            B
                                                         
                                                         
                                                            1
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                 times
                                          
                                          
                                             
                                                12:
                                                obtain 
                                                   
                                                      
                                                         
                                                            T
                                                         
                                                         
                                                            reg
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                
                                             
                                             // R⊕X1
                                             
                                          
                                          
                                             
                                                13:
                                                if 
                                                   
                                                      
                                                         
                                                            T
                                                         
                                                         
                                                            reg
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                 = (8 bits after extracting 4 bits from MSB of (T
                                                reg)) then
                                             
                                          
                                          
                                             
                                                14:
                                                
                                                accept S
                                             // Integrity is maintained
                                          
                                          
                                             
                                                15: 
                                                
                                                else
                                             
                                          
                                          
                                             
                                                16: 
                                                
                                                reject S
                                          
                                          
                                             
                                                17: 
                                                
                                                end if
                                             
                                          
                                          
                                             
                                                18: end for
                                             
                                          
                                          
                                             // Registration Response Phase (MN-CH)
                                             
                                          
                                          
                                             // Actions executed by MNs
                                          
                                          
                                             
                                                19: for (i=t+n+1; i<=t+2n+1; i++)
                                          
                                          
                                             
                                                20:
                                                 compute 
                                                   
                                                      
                                                         
                                                            B
                                                         
                                                         
                                                            2
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                             
                                             // Encryption at MN
                                          
                                          
                                             
                                                21:
                                                left shift R to obtain S2
                                             
                                             // i
                                                th member node (MNi) encrypts S
                                          
                                          
                                             
                                                22:
                                                generate RRi
                                             
                                             // MNi generates 2-tuple registration response packet, RRi
                                             
                                          
                                          
                                             
                                                23:
                                                send RRi to CH
                                          
                                          
                                             // Actions executed by CH on receiving RRi from MNi
                                             
                                          
                                          
                                             
                                                24:
                                                compute 
                                                   
                                                      
                                                         
                                                            B
                                                         
                                                         
                                                            2
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                             
                                             // 
                                                   
                                                      
                                                         
                                                            B
                                                         
                                                         
                                                            2
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                 is the 4 bits from the LSB of the result obtained by ANDing 
                                                   
                                                      
                                                         
                                                            T
                                                         
                                                         
                                                            
                                                               
                                                                  MN
                                                               
                                                               
                                                                  i
                                                                  _
                                                                  present
                                                               
                                                            
                                                         
                                                      
                                                   
                                                 and binary 7
                                          
                                          
                                             
                                                25:
                                                right shift S2 to obtain S3
                                             
                                             // CH decrypts S2 to obtain S3
                                             
                                          
                                          
                                             
                                                26:
                                                
                                                if S3 = R then
                                             
                                             // Integrity is preserved
                                          
                                          
                                             
                                                27: 
                                                
                                                accept RRi
                                             
                                             // CH accepts registration response packet RRi
                                             
                                          
                                          
                                             
                                                28:
                                                
                                                generate node-id for MNi
                                             
                                          
                                          
                                             
                                                29:
                                                store 5-tuple data
                                             // 5-tuple data: 
                                                   
                                                      (
                                                      node
                                                      -
                                                      
                                                         
                                                            id
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      ,R,
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            T
                                                         
                                                         
                                                            
                                                               
                                                                  MN
                                                               
                                                               
                                                                  i
                                                               
                                                            
                                                            _
                                                            present
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            T
                                                         
                                                         
                                                            
                                                               
                                                                  MN
                                                               
                                                               
                                                                  i
                                                               
                                                            
                                                            _
                                                            previous
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             // Actions executed by MNi
                                             
                                          
                                          
                                             
                                                30:
                                                
                                                store 2-tuple data
                                             // 2-tuple data: R, 
                                                   
                                                      
                                                         
                                                            T
                                                         
                                                         
                                                            
                                                               
                                                                  MN
                                                               
                                                               
                                                                  i
                                                                  _
                                                                  present
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                31:
                                                
                                                else
                                             
                                          
                                          
                                             
                                                32:
                                                reject RRi
                                             
                                          
                                          
                                             
                                                33:
                                                end if
                                             
                                          
                                          
                                             
                                                34: end for
                                             
                                          
                                          
                                             // Query Forwarding Phase (CH-MN)
                                             
                                          
                                          
                                             // Actions executed by CH
                                          
                                          
                                             
                                                35: encrypt the query using 
                                                   
                                                      
                                                         
                                                            B
                                                         
                                                         
                                                            3
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                36: broadcast encrypted query towards the MNs
                                          
                                          
                                             // Action executed by MNi
                                             
                                          
                                          
                                             
                                                37: decrypt the query using 
                                                   
                                                      
                                                         
                                                            B
                                                         
                                                         
                                                            3
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                38: if 
                                                
                                                   
                                                      
                                                         
                                                            T
                                                         
                                                         
                                                            reg
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                 = (8 bits after extracting 4 bits from MSB of (T
                                                reg)) then
                                             
                                          
                                          
                                             
                                                39:
                                                accept the query
                                             // Integrity is maintained
                                          
                                          
                                             
                                                40: else
                                             
                                          
                                          
                                             
                                                41:
                                                reject the query
                                          
                                          
                                             
                                                42: end if
                                             
                                          
                                          
                                             
                                                End
                                             
                                          
                                       
                                    
                                 
                              
                           


                              Algorithmic complexity: The complexity for the query phase (CH–MN) algorithm is O(2(c
                              1
                              ×
                              n)+(c
                              2
                              ×
                              n)), where c
                              1 and c
                              2 are constants, and n is the number of MNs in a cluster.
                                 Proof
                                 The query phase (CH–MN) algorithm consists of three phases. Before deriving the complexity of this algorithm, let us first analyze the complexity of each phase. In registration phase (CH–MN), let us assume that the complexities of computing 
                                       
                                          
                                             
                                                X
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                B
                                             
                                             
                                                1
                                             
                                             
                                                i
                                             
                                          
                                          ,
                                          
                                             
                                                S
                                             
                                             
                                                1
                                             
                                          
                                       
                                    , and concatenating X1 with S1 by the CH are b
                                    1,
                                    b
                                    2,
                                    b
                                    3, and b
                                    4 respectively. Therefore, the complexity of computing these parameters is O(b
                                    1
                                    +
                                    b
                                    2
                                    +
                                    b
                                    3
                                    +
                                    b
                                    4). Further, we assume that the complexities of splitting S1 into two blocks, computing 
                                       
                                          
                                             
                                                B
                                             
                                             
                                                1
                                             
                                             
                                                i
                                             
                                          
                                       
                                    , R, 
                                       
                                          
                                             
                                                T
                                             
                                             
                                                reg
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    , and comparing between 
                                       
                                          
                                             
                                                T
                                             
                                             
                                                reg
                                             
                                             
                                                ′
                                             
                                          
                                       
                                     and 8 bits after extracting 4 bits from MSB of T
                                    reg by MNs are g
                                    1, g
                                    2, g
                                    3, g
                                    4, and g
                                    5 respectively.

The query phase (CH–MN) has one loop and the complexity is O(n
                              ×(g
                              1
                              +
                              g
                              2
                              +
                              g
                              3
                              +
                              g
                              4
                              +
                              g
                              5)). Therefore, the complexity for this phase is O((b
                              1
                              +
                              b
                              2
                              +
                              b
                              3
                              +
                              b
                              4)+(n
                              ×(g
                              1
                              +
                              g
                              2
                              +
                              g
                              3
                              +
                              g
                              4
                              +
                              g
                              5))) or O(c
                              1
                              ×
                              n), where c
                              1
                              =
                              g
                              1
                              +
                              g
                              2
                              +
                              g
                              3
                              +
                              g
                              4
                              +
                              g
                              5.

Similarly, for the registration response phase (MN–CH), let us assume that the complexities of computing 
                                 
                                    
                                       
                                          B
                                       
                                       
                                          2
                                       
                                       
                                          i
                                       
                                    
                                 
                              , S2 and generating RRi by MNs are g
                              6,
                              g
                              7, and g
                              8 respectively. On the contrary, let us assume that the complexity of computing 
                                 
                                    
                                       
                                          B
                                       
                                       
                                          2
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    
                                       
                                          S
                                       
                                       
                                          3
                                       
                                    
                                 
                              , comparing S3 and R, and node id for MNi by the CH are b
                              5,
                              b
                              6,
                              b
                              7, and b
                              8 respectively. All these computations executed by the CH and MNs are finished under for loop. Therefore, the complexity in registration response phase (MN–CH) is O(n
                              ×(g
                              6
                              +
                              g
                              7
                              +
                              g
                              8
                              +
                              b
                              5
                              +
                              b
                              6
                              +
                              b
                              7
                              +
                              b
                              8)) or O(c
                              2
                              ×
                              n) where c
                              2
                              =
                              g
                              6
                              +
                              g
                              7
                              +
                              g
                              8
                              +
                              b
                              5
                              +
                              b
                              6
                              +
                              b
                              7
                              +
                              b
                              8.

In the query forwarding phase (CH–MN), the CH sends the query packet following the same steps as done during the registration phase (CH–MN) and upon receiving the query packet, MNs performs the same steps as it done during the registration phase (CH–MN). If the complexities of computing 
                                 
                                    
                                       
                                          X
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          B
                                       
                                       
                                          3
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    
                                       
                                          S
                                       
                                       
                                          1
                                       
                                    
                                 
                              , and concatenating X1 with S1 by the CH are b
                              1,
                              b
                              2,
                              b
                              3, and b
                              4, therefore, the complexity of computing these parameters is O(b
                              1
                              +
                              b
                              2
                              +
                              b
                              3
                              +
                              b
                              4). While, the complexity of computing the parameters by MNs is O(n
                              ×(g
                              1
                              +
                              g
                              2
                              +
                              g
                              3
                              +
                              g
                              4
                              +
                              g
                              5)) where g
                              1, g
                              2, g
                              3, g
                              4, and g
                              5 are the complexities of the complexities of splitting S1 into two blocks, computing 
                                 
                                    
                                       
                                          B
                                       
                                       
                                          3
                                       
                                       
                                          i
                                       
                                    
                                 
                              , R, 
                                 
                                    
                                       
                                          T
                                       
                                       
                                          reg
                                       
                                       
                                          ′
                                       
                                    
                                 
                               and comparing between 
                                 
                                    
                                       
                                          T
                                       
                                       
                                          reg
                                       
                                       
                                          ′
                                       
                                    
                                 
                               and 8 bits after extracting 4 bits from MSB of T
                              reg respectively. After combining the complexity associated with the CH and MNs is O((b
                              1
                              +
                              b
                              2
                              +
                              b
                              3
                              +
                              b
                              4)+(n
                              ×(g
                              1
                              +
                              g
                              2
                              +
                              g
                              3
                              +
                              g
                              4
                              +
                              g
                              5))) or O(c
                              1
                              ×
                              n), where c
                              1
                              =
                              g
                              1
                              +
                              g
                              2
                              +
                              g
                              3
                              +
                              g
                              4
                              +
                              g
                              5.

From the above discussion, it can be concluded that the complexity for the query phase algorithm (CH–MN) is O(2(c
                              1
                              ×
                              n)+(c
                              2
                              ×
                              n)).


                              Correctness Proof of Algorithm: The requirement to ensure the correctness of the proposed algorithm is to conserve the design goal (Section 3.4). We now give a simple analysis on the correctness of the above algorithm (Section 4.1.2).
                                 Property 1
                                 Confidentiality


                                 The MNs under a CH successfully decrypt the encrypted packet received from the CH with the help of the same key used by the CH and vice versa.

Once T
                                    reg is broadcast by a CH (line 1), the CH computes S1 packet of size 8 bits (line 4) by performing 
                                       
                                          (
                                          
                                             
                                                t
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          …
                                          
                                          ,
                                          
                                             
                                                t
                                             
                                             
                                                12
                                             
                                          
                                          )
                                          ⊕
                                          (
                                          0000
                                          
                                             
                                                r
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          …
                                          
                                          ,
                                          
                                             
                                                r
                                             
                                             
                                                8
                                             
                                          
                                          )
                                       
                                     (line 2) followed by computing 
                                       
                                          
                                             
                                                B
                                             
                                             
                                                1
                                             
                                             
                                                i
                                             
                                          
                                       
                                     and right shifting of R by (decimal equivalent of) 
                                       
                                          
                                             
                                                B
                                             
                                             
                                                1
                                             
                                             
                                                i
                                             
                                          
                                       
                                     times (line 3). The CH broadcasts the encrypted registration packet S by concatenating X1 and S1 (lines 5–6). After receiving S (line 7), each MN under the CH (for loop, lines 8–18) splits S into two blocks (line 9), computes 
                                       
                                          
                                             
                                                B
                                             
                                             
                                                1
                                             
                                             
                                                i
                                             
                                          
                                       
                                     (line 10) and performs the reverse operation (line 11) to retrieve R. Here, reverse operation means that the number of left shifting done by CH on R to compute S1, is the same as the number of right shifting done by each MN to compute R. Since, the number of right shifts performed by CH during encryption is same as the number of left shifts performed by MN decryption on R packet, therefore, each MN can effectively decrypt the encrypted R packet received from CH.

In registration response phase MN–CH (for loop, lines 19–34), each MN encrypts RR packet (line 21) after computing 
                                 
                                    
                                       
                                          B
                                       
                                       
                                          2
                                       
                                       
                                          i
                                       
                                    
                                 
                               (line 20) and encrypted RR packet (line 22) is transmitted to CH (line 23). After receiving RR packet from each MN, CH computes 
                                 
                                    
                                       
                                          B
                                       
                                       
                                          2
                                       
                                       
                                          i
                                       
                                    
                                 
                               (line 24) and performs reverse operation (line 25). Similar to the registration phase, in this phase also same numbers of left and right shift operations are performed to encrypt and decrypt RR packet, hence the CH can correctly decrypt the encrypted RR packet received from MNs.

During query forwarding phase (lines 35–42), it is worth noticing that the CH follows the same technique as done in registration phase for forwarding query packet. Therefore, it can be concluded that all the phases (query phase (CH–MN)) of the proposed scheme ensures the confidentiality.
                                 Property 2
                                 Integrity


                                 The MNs under a CH receive exactly the same packet that was sent by the CH and vice versa.

During registration phase (lines 1–18), each MN retrieves the registration packet 
                                       
                                          (
                                          
                                             
                                                r
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          …
                                          
                                          ,
                                          
                                             
                                                r
                                             
                                             
                                                8
                                             
                                          
                                          )
                                       
                                     by decrypting the S transmitted by CH. Since S is encrypted form of registration packet 
                                       
                                          (
                                          
                                             
                                                r
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          …
                                          
                                          ,
                                          
                                             
                                                r
                                             
                                             
                                                8
                                             
                                          
                                          )
                                       
                                    , therefore, MN receives exactly the same registration packet that was sent by the CH. On the contrary, during registration response phase (lines 19–34), CH retrieves R by decrypting S2 that was encrypted by MN. Therefore, the CH receives the same registration packet that was sent by MNs which ensures integrity of our algorithm.

This phase has two sub-phases – query response phase (MN–CH) and query response phase (CH–BS).

Once the query phase is over, the CH broadcasts the query towards its MNs as mentioned in query forwarding phase (CH–MN). The encrypted query packet is of 16 bits. On receiving the query packet MNs respond to the query by sending query response (QR) packet. To start with, 
                              
                                 
                                    
                                       T
                                    
                                    
                                       MN
                                       _
                                       present
                                    
                                 
                              
                            of the 2-tuple data stored by the MN at query phase (CH–MN) replaces 
                              
                                 
                                    
                                       T
                                    
                                    
                                       MN
                                       _
                                       previous
                                    
                                 
                              
                           . The MN performs encryption with the help of the key B4 along with additional operations of obfuscation such as AND, shift and extraction. The 4-tuple (m, m′, 
                              
                                 
                                    
                                       T
                                    
                                    
                                       MN
                                       _
                                       present
                                    
                                 
                              
                           , 
                              
                                 
                                    
                                       T
                                    
                                    
                                       MN
                                       _
                                       previous
                                    
                                 
                              
                           ) QR packet is generated where, 
                              
                                 
                                    
                                       T
                                    
                                    
                                       MN
                                       _
                                       present
                                    
                                 
                              
                            is the present time stamp when the MN sends the query response packet for the query. On receiving the QR packet, the CH decrypts it using the same key B4 that also involves operations of AND, shift and extraction. Once the CH decrypts the message part of the QR packet, it checks for data integrity and replay attack. If it is found that the decrypted message m″ is same as the original message m, integrity is preserved. The CH compares 
                              
                                 
                                    
                                       T
                                    
                                    
                                       MN
                                       _
                                       present
                                    
                                 
                              
                            stored in it and 
                              
                                 
                                    
                                       T
                                    
                                    
                                       MN
                                       _
                                       previous
                                    
                                 
                              
                            in QR packet. If these two time-stamps are equal, it can be ensured that no replay attack has taken place; otherwise it rejects the packet.
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             Algorithm for query response phase (MN-CH)
                                          
                                       
                                       
                                          
                                             Begin
                                          
                                       
                                       
                                          // Action executed by CH
                                       
                                       
                                          
                                             1: Broadcasts query packet received from BS at time (t+2n+2)
                                       
                                       
                                          // Actions executed by MNs
                                       
                                       
                                          
                                             2: On receiving query packet at time (t+2n+3)
                                       
                                       
                                          
                                             3: for (i= t+2n+3; i<=t+3n+3; i++)
                                       
                                       
                                          
                                             4:
                                             obtain Y
                                          // Obtained by ANDing 
                                                
                                                   
                                                      
                                                         T
                                                      
                                                      
                                                         
                                                            
                                                               MN
                                                            
                                                            
                                                               i
                                                               _
                                                               previous
                                                            
                                                         
                                                      
                                                   
                                                
                                              and binary 7 padded with 9 zeros from MSB
                                       
                                       
                                          
                                             5:
                                             obtain 
                                                
                                                   
                                                      
                                                         B
                                                      
                                                      
                                                         4
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                             
                                          
                                          // Extract 4 bits from MSB of Y
                                       
                                       
                                          
                                             6:
                                             obtain 
                                                
                                                   
                                                      
                                                         m
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             
                                          
                                          // Left shift m
                                             i, 
                                                
                                                   
                                                      
                                                         B
                                                      
                                                      
                                                         4
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                              times
                                       
                                       
                                          
                                             7:
                                             send 4-tuple QRi to CH
                                          // i
                                             th member node sends query response packet QRi to CH
                                       
                                       
                                          // Action executed by CH on receiving QRi
                                          
                                       
                                       
                                          
                                             8:
                                             compute Y′
                                          // Obtained by ANDing 
                                                
                                                   
                                                      
                                                         T
                                                      
                                                      
                                                         
                                                            
                                                               MN
                                                            
                                                            
                                                               i
                                                               _
                                                               present
                                                            
                                                         
                                                      
                                                   
                                                
                                              and binary 7 padded with 9 zeros from MSB
                                       
                                       
                                          
                                             9:
                                             obtain 
                                                
                                                   
                                                      
                                                         B
                                                      
                                                      
                                                         4
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                             
                                          
                                          // Extract 4 bits from MSB of Y′
                                       
                                       
                                          
                                             10:
                                             compute 
                                                
                                                   
                                                      
                                                         m
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         ″
                                                      
                                                   
                                                
                                             
                                          
                                          // Right shift 
                                                
                                                   
                                                      
                                                         m
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             , 
                                                
                                                   
                                                      
                                                         B
                                                      
                                                      
                                                         4
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                              times
                                       
                                       
                                          
                                             11:
                                             if 
                                                
                                                   
                                                      
                                                         m
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         ″
                                                      
                                                   
                                                   =
                                                   
                                                      
                                                         m
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                              
                                             then
                                          
                                          // Check for integrity
                                       
                                       
                                          
                                             12:
                                             accept
                                          // Integrity is maintained
                                       
                                       
                                          
                                             13: else
                                          
                                       
                                       
                                          
                                             14:
                                             
                                             reject QRi
                                          
                                          // Integrity is violated
                                       
                                       
                                          
                                             15: end if
                                          
                                       
                                       
                                          
                                             16: if 
                                             
                                                
                                                   CH
                                                   .
                                                   
                                                      
                                                         T
                                                      
                                                      
                                                         
                                                            
                                                               MN
                                                            
                                                            
                                                               i
                                                               _
                                                               present
                                                            
                                                         
                                                      
                                                   
                                                
                                              = 
                                                
                                                   QR
                                                   .
                                                   
                                                      
                                                         T
                                                      
                                                      
                                                         
                                                            
                                                               MN
                                                            
                                                            
                                                               i
                                                               _
                                                               previous
                                                            
                                                         
                                                      
                                                   
                                                
                                              
                                             then
                                          
                                          // CH compares 
                                                
                                                   
                                                      
                                                         T
                                                      
                                                      
                                                         
                                                            
                                                               MN
                                                            
                                                            
                                                               i
                                                               _
                                                               present
                                                            
                                                         
                                                      
                                                   
                                                
                                              stored in it with 
                                                
                                                   
                                                      
                                                         T
                                                      
                                                      
                                                         
                                                            
                                                               MN
                                                            
                                                            
                                                               i
                                                               _
                                                               previous
                                                            
                                                         
                                                      
                                                   
                                                
                                              in QRi
                                          
                                       
                                       
                                          
                                             17:
                                             
                                             accept QRi
                                          
                                          // No replay attack is detected
                                       
                                       
                                          
                                             18.
                                             
                                             update its (CH’s) stored data
                                          // Replaces R by mi, S2 by 
                                                
                                                   
                                                      
                                                         m
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             , corresponding to 
                                                
                                                   
                                                      
                                                         MN
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         T
                                                      
                                                      
                                                         
                                                            
                                                               MN
                                                            
                                                            
                                                               i
                                                               _
                                                               previous
                                                            
                                                         
                                                      
                                                   
                                                
                                              by 
                                                
                                                   
                                                      
                                                         T
                                                      
                                                      
                                                         
                                                            
                                                               MN
                                                            
                                                            
                                                               i
                                                               _
                                                               present
                                                            
                                                         
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         T
                                                      
                                                      
                                                         
                                                            
                                                               MN
                                                            
                                                            
                                                               i
                                                               _
                                                               present
                                                            
                                                         
                                                      
                                                   
                                                
                                              by 
                                                
                                                   
                                                      
                                                         T
                                                      
                                                      
                                                         
                                                            
                                                               MN
                                                            
                                                            
                                                               i
                                                               _
                                                               present
                                                            
                                                         
                                                      
                                                   
                                                
                                              of QRi
                                          
                                       
                                       
                                          
                                             19: else
                                          
                                       
                                       
                                          
                                             20:
                                             
                                             reject QRi
                                          
                                          // CH rejects query response packet QRi
                                          
                                       
                                       
                                          
                                             21: end if
                                          
                                       
                                       
                                          
                                             22: end for
                                          
                                       
                                       
                                          
                                             End
                                          
                                       
                                    
                                 
                              
                           
                        


                           Algorithmic complexity: The complexity for the query response phase (MN–CH) algorithm is O(c
                           3
                           ×
                           n), where c
                           3 is a constant, and n is the number of MNs in a cluster.
                              Proof
                              In query response phase (MN–CH) algorithm, let us assume that the complexities of computing Y, 
                                    
                                       
                                          
                                             B
                                          
                                          
                                             4
                                          
                                          
                                             i
                                          
                                       
                                    
                                 , and 
                                    
                                       
                                          
                                             m
                                          
                                          
                                             i
                                          
                                          
                                             ′
                                          
                                       
                                    
                                  by MNs are g
                                 9,
                                 g
                                 10, and g
                                 11 respectively. Also, let us assume that the complexities of computing 
                                    
                                       
                                          
                                             Y
                                          
                                          
                                             ′
                                          
                                       
                                       ,
                                       
                                          
                                             B
                                          
                                          
                                             4
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             m
                                          
                                          
                                             i
                                          
                                          
                                             ″
                                          
                                       
                                    
                                 , comparing 
                                    
                                       
                                          
                                             m
                                          
                                          
                                             i
                                          
                                          
                                             ′
                                          
                                       
                                    
                                  and 
                                    
                                       
                                          
                                             m
                                          
                                          
                                             i
                                          
                                          
                                             ″
                                          
                                       
                                    
                                 , and comparing 
                                    
                                       CH
                                       ·
                                       
                                          
                                             T
                                          
                                          
                                             
                                                
                                                   MN
                                                
                                                
                                                   i
                                                   _
                                                   present
                                                
                                             
                                          
                                       
                                    
                                  and 
                                    
                                       QR
                                       ·
                                       
                                          
                                             T
                                          
                                          
                                             
                                                
                                                   MN
                                                
                                                
                                                   i
                                                   _
                                                   previous
                                                
                                             
                                          
                                       
                                    
                                  by the CH are b
                                 9,
                                 b
                                 10,
                                 b
                                 11,
                                 b
                                 12, and b
                                 13 respectively. All these computations executed by the CH and MNs are finished under for loop. Therefore, the complexity in query response phase (MN–CH) algorithm is O(n
                                 ×(g
                                 9
                                 +
                                 g
                                 10
                                 +
                                 g
                                 11
                                 +
                                 b
                                 9
                                 +
                                 b
                                 10
                                 +
                                 b
                                 11
                                 +
                                 b
                                 12
                                 +
                                 b
                                 13)) or O(c
                                 3
                                 ×
                                 n) where c
                                 3
                                 =
                                 g
                                 9
                                 +
                                 g
                                 10
                                 +
                                 g
                                 11
                                 +
                                 b
                                 9
                                 +
                                 b
                                 10
                                 +
                                 b
                                 11
                                 +
                                 b
                                 12
                                 +
                                 b
                                 13.


                           Correctness Proof of Algorithm: Similar to the algorithm proposed in Section 4.1.2, if the algorithm proposed in Section 4.2.1 conserves the design goal (Section 3.4), then it ensures the correctness. Now, we give a simple analysis on the correctness of the above algorithm (Section 4.2.1).
                              Property 1
                              Confidentiality


                              The CH in a cluster successfully decrypts the encrypted packet received from the MNs with the help of the same key used by the MNs.

Since the steps performed for encryption (lines 4–6) and decryption (lines 8–10) is similar to the steps performed during query phase, therefore, summarily it can be concluded that CH can successfully decrypt the encrypted RR packet received from MNs.

The CH in a cluster receives exactly the same packet that was sent by the MNs under the CH.

In query response phase, each MN transmits the encrypted query response packet to the CH; upon receiving the packet, CH performs the decryption operation. As the CH successfully decrypts the encrypted query response, thus, it ensures that the received packet is exactly the same packet that was sent by the MNs.

At any point of time, the packet received by a CH is current/recent packet.

The query response packet transmitted by each MN to CH is a 4-tuple packet where one attribute is 
                                    
                                       
                                          
                                             T
                                          
                                          
                                             
                                                
                                                   MN
                                                
                                                
                                                   i
                                                   _
                                                   previous
                                                
                                             
                                          
                                       
                                    
                                 . After receiving QRi packet from each MN, the CH compares 
                                    
                                       
                                          
                                             T
                                          
                                          
                                             
                                                
                                                   MN
                                                
                                                
                                                   i
                                                   _
                                                   present
                                                
                                             
                                          
                                       
                                    
                                  stored in it with 
                                    
                                       
                                          
                                             T
                                          
                                          
                                             
                                                
                                                   MN
                                                
                                                
                                                   i
                                                   _
                                                   previous
                                                
                                             
                                          
                                       
                                    
                                  in QRi (line 16). Each successful check by the CH guarantees that the received QRi packet is current/recent.

On receiving query responses from the MNs, the CH aggregates the data. The aggregation is done by retrieving the value of m from the records corresponding to every node-id and applying aggregate function depending on the requirement of the application domain. Now a 3-tuple (m_aggregate, 
                              
                                 
                                    
                                       T
                                    
                                    
                                       CH
                                       _
                                       present
                                    
                                 
                                 ,
                                 
                                    
                                       T
                                    
                                    
                                       CH
                                       _
                                       previous
                                    
                                 
                              
                           ) data is formed at CH as query response from CH to BS 
                              
                                 (
                                 
                                    
                                       QR
                                    
                                    
                                       CH
                                       –
                                       BS
                                    
                                 
                                 )
                              
                            where 
                              
                                 
                                    
                                       T
                                    
                                    
                                       CH
                                       _
                                       previous
                                    
                                 
                              
                            is replaced by 
                              
                                 
                                    
                                       T
                                    
                                    
                                       CH
                                       _
                                       present
                                    
                                 
                              
                            stored at CH during query phase (CH–MN) and 
                              
                                 
                                    
                                       T
                                    
                                    
                                       CH
                                       _
                                       present
                                    
                                 
                              
                            is replaced by the present time-stamp. The aggregated data m_aggregate is of size 8 bits and 
                              
                                 
                                    
                                       T
                                    
                                    
                                       CH
                                       _
                                       present
                                    
                                 
                              
                           , 
                              
                                 
                                    
                                       T
                                    
                                    
                                       CH
                                       _
                                       previous
                                    
                                 
                              
                            are both 12 bits. So the query response formed at CH is of size=(8+12+12)=4 bytes.

The BS, on receiving the query response from the CH, verifies whether the received response is recent, i.e. it checks for replay attack in CH–BS communication. If no replay attack is found, the BS accepts the packet; otherwise the packet is rejected. If the BS accepts the packet, necessary update is performed on the data in BS. The 
                              
                                 
                                    
                                       T
                                    
                                    
                                       CH
                                       _
                                       previous
                                    
                                 
                              
                            is now replaced by 
                              
                                 
                                    
                                       T
                                    
                                    
                                       CH
                                       _
                                       present
                                    
                                 
                              
                            stored in the BS (registration phase (CH–MN) Section 4.1.2) and 
                              
                                 
                                    
                                       T
                                    
                                    
                                       CH
                                       _
                                       present
                                    
                                 
                              
                            is replaced by 
                              
                                 
                                    
                                       T
                                    
                                    
                                       CH
                                       _
                                       present
                                    
                                 
                              
                            in 
                              
                                 
                                    
                                       QR
                                    
                                    
                                       CH
                                       –
                                       BS
                                    
                                 
                              
                           . This phase did not exist in SQPS where BS can check whether the response received from CH has been replayed or not. So replay protection is provided which is an added advantage of MSQPS over SQPS. With the help of two attributes 
                              
                                 
                                    
                                       T
                                    
                                    
                                       CH
                                       _
                                       present
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       T
                                    
                                    
                                       CH
                                       _
                                       previous
                                    
                                 
                              
                            stored at BS corresponding to each CH, replay attack is detected. The BS compares 
                              
                                 
                                    
                                       T
                                    
                                    
                                       CH
                                       _
                                       present
                                    
                                 
                              
                            stored in it and the 
                              
                                 
                                    
                                       T
                                    
                                    
                                       CH
                                       _
                                       previous
                                    
                                 
                              
                            in 
                              
                                 
                                    
                                       QR
                                    
                                    
                                       CH
                                       –
                                       BS
                                    
                                 
                              
                            and if these are found equal, then it is confirmed that there is no replay attack. As the query response phase (CH–BS) is the final phase of query answering, there is no need to store data in any of the nodes in this phase.

In a cryptographic security solution, key is a major parameter of concern. In this scheme the same key is used for encryption and decryption of the data packets and therefore it is a symmetric key cryptography [2] scheme. Further, conventionally the key used in the network is either distributed among the nodes prior to deployment or is exchanged among the nodes through packet transmission [20]. However, the most vulnerable part of our query processing scheme involving sensor nodes only (communication between CH and MN) does not follow any of these two mechanisms directly. Here the key is computed afresh by the nodes every time a query is answered with the help of partial information of the packet received by them thereby preventing malicious node from getting the key even if it gets hold of any packet being exchanged between the nodes. In other words, there is zero probability for any malicious node to decipher the key from the captured packet. The operation of computing the key at the receiver end is done in both query phase (CH–MN) and the query response phase (MN–CH).

The effectiveness of the proposed security scheme (MSQPS) is evaluated through qualitative and quantitative analyses. Results of the proposed scheme MSQPS are compared with one state-of-the-art scheme SNEP [7] and our earlier scheme SQPS [4].

This section summarily presents the performance of the scheme in terms of security analysis followed by overheads analysis.

Security analysis of MSQPS scheme is done using two parameters viz. cracking probability and cracking time [21]. In this scheme, query and/or the key may be cracked by malicious nodes. There are two modes of cracking. In one mode, a malicious node may crack the message while being transmitted. In the other mode, it may capture the nodes (CH/MN) and extract the message. However, in case of query, as it is not stored in any node and therefore cracking by capturing a node is not possible. Further, in case of key, as message is never being transmitted and hence cracking during transmission is also not possible. Here by cracking probability we mean the probability of obtaining the message either when it is transmitted or when it is stored. By cracking time we mean how much time an adversary needs to crack a message after attack. If it is proved that this time surpasses the time when the key is actually being used (either during transmission or during its stay in a node), it can be claimed that obtaining the key is not of any use and therefore is not a matter of concern. We define the two evaluating parameters as follows:
                              
                                 –
                                 
                                    Cracking probability: It is defined as the probability of retrieving the message (after attack) while it is being transmitted or stored in a node.


                                    Cracking time: It is defined as the time required for obtaining the message after attack while the message is being transmitted or stored in a node.

Alternatively, by these two parameters we measure the robustness of our scheme in achieving confidentiality and integrity.

As a query is sent through two sub-phases (BS–CH) and (CH–MN) of query phase, the query cracking probability for each of these sub-phases is calculated below.

In case of query as message, as mentioned above, calculation of cracking probability while the query is only being transmitted is relevant. The size of the encrypted query packet 
                                    
                                       (
                                       
                                          
                                             Q
                                          
                                          
                                             E
                                          
                                          
                                             ″
                                          
                                       
                                       )
                                    
                                  sent from BS to CH consists of 16 bits, where the query (Q) of 8 bits is present in encrypted form. So, the number of possible combinations: 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             8
                                          
                                          
                                             
                                                
                                                   Q
                                                
                                                
                                                   E
                                                
                                                
                                                   ″
                                                
                                             
                                          
                                       
                                       
                                          
                                             2
                                          
                                          
                                             j
                                          
                                       
                                       =
                                       1.3
                                       ×
                                       
                                          
                                             10
                                          
                                          
                                             5
                                          
                                       
                                    
                                 , where 
                                    
                                       
                                          
                                             Q
                                          
                                          
                                             E
                                          
                                          
                                             ″
                                          
                                       
                                       =
                                       16
                                    
                                 . So, the query cracking probability (QCP) from the data in the query packet: 
                                    
                                       QCP
                                       =
                                       1
                                       /
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             8
                                          
                                          
                                             
                                                
                                                   Q
                                                
                                                
                                                   E
                                                
                                                
                                                   ″
                                                
                                             
                                          
                                       
                                       
                                          
                                             2
                                          
                                          
                                             j
                                          
                                       
                                       =
                                       7.62
                                       ×
                                       
                                          
                                             10
                                          
                                          
                                             -
                                             6
                                          
                                       
                                    
                                 .

In query phase (CH–MN), the query of 16 bits is sent to the MNs in encrypted form. So, query cracking probability in query phase (CH–MN) is also 7.62×10−6 as above. As the communication of each CH with the BS is through CDMA, where the nodes possess unique codes, therefore calculation of cracking time is not relevant in case of query response phase (CH–BS).

In case of key as message, as mentioned above, computation of cracking probability while the key is only stored in a node is relevant. Here cracking time is also relevant. The necessary calculations for cracking probability and cracking time are given below.


                                 From CH: Considering the size of data stored in CH as 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             DS
                                             –
                                             CH
                                          
                                       
                                    
                                 , the number of possible combinations: 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             3
                                          
                                          
                                             
                                                
                                                   S
                                                
                                                
                                                   DS
                                                   –
                                                   CH
                                                
                                             
                                             -
                                             24
                                          
                                       
                                       
                                          
                                             2
                                          
                                          
                                             j
                                          
                                       
                                       =
                                       33.55
                                       ×
                                       
                                          
                                             10
                                          
                                          
                                             6
                                          
                                       
                                    
                                 . The size of data stored at CH is 48 bits (Section 4.2.1). Therefore for average cases, the adversary tries 48/2=24 times to be successful. So, j varies up to 24 of 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             DS
                                             –
                                             CH
                                          
                                       
                                    
                                 .

The number of computations performed to crack: 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             3
                                          
                                          
                                             
                                                
                                                   S
                                                
                                                
                                                   DS
                                                   –
                                                   CH
                                                
                                             
                                          
                                       
                                       (
                                       j
                                       -
                                       1
                                       )
                                       =
                                       297
                                    
                                 , where 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             DS
                                             –
                                             CH
                                          
                                       
                                       =
                                       24
                                    
                                 .

So, the key cracking probability from stored data at CH: 
                                    
                                       
                                          
                                             KCP
                                          
                                          
                                             CH
                                          
                                       
                                       =
                                       1
                                       /
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             3
                                          
                                          
                                             
                                                
                                                   S
                                                
                                                
                                                   DS
                                                   –
                                                   CH
                                                
                                             
                                          
                                       
                                       
                                          
                                             2
                                          
                                          
                                             j
                                          
                                       
                                       =
                                       2.98
                                       ×
                                       
                                          
                                             10
                                          
                                          
                                             -
                                             8
                                          
                                       
                                    
                                 .


                                 From MN: Considering the size of data stored in MN as 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             DS
                                             –
                                             MN
                                          
                                       
                                    
                                 , the number of possible combinations: 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             3
                                          
                                          
                                             
                                                
                                                   S
                                                
                                                
                                                   DS
                                                   –
                                                   MN
                                                
                                             
                                             -
                                             15
                                          
                                       
                                       
                                          
                                             2
                                          
                                          
                                             j
                                          
                                       
                                       =
                                       65.52
                                       ×
                                       
                                          
                                             10
                                          
                                          
                                             3
                                          
                                       
                                    
                                  where 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             DS
                                             –
                                             MN
                                          
                                       
                                       =
                                       30
                                    
                                 . The size of data stored at MN is 30 bits (Section 4.1.2). Therefore for average cases, the adversary tries 30/2=15 times to be successful. So, j varies up to 15 of 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             DS
                                             –
                                             MN
                                          
                                       
                                    
                                 .

The number of computations performed to crack: 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             3
                                          
                                          
                                             
                                                
                                                   S
                                                
                                                
                                                   DS
                                                   –
                                                   MN
                                                
                                             
                                          
                                       
                                       (
                                       j
                                       -
                                       1
                                       )
                                       =
                                       
                                          
                                             10
                                          
                                          
                                             4
                                          
                                       
                                    
                                 , where 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             DS
                                             –
                                             MN
                                          
                                       
                                       =
                                       15
                                    
                                 .

So, the key cracking probability from stored data at MN: 
                                    
                                       
                                          
                                             KCP
                                          
                                          
                                             MN
                                          
                                       
                                       =
                                       1
                                       /
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             3
                                          
                                          
                                             
                                                
                                                   S
                                                
                                                
                                                   DS
                                                   –
                                                   MN
                                                
                                             
                                          
                                       
                                       
                                          
                                             2
                                          
                                          
                                             j
                                          
                                       
                                       =
                                       15.26
                                       ×
                                       
                                          
                                             10
                                          
                                          
                                             -
                                             6
                                          
                                       
                                    
                                 .

From the definition earlier, cracking time is computed as the time duration between time of attack and time of obtaining the required message by the attacker.

Let the total available bandwidth is BW bits/s, maximum packet size is p bits, and broadcast time by CH is T
                                 B ms. So, duration of one TDMA time slot is p/BW s.


                                 From CH: The key computation time (T
                                 c) is computed as follows:
                                    
                                       
                                          
                                             
                                                T
                                             
                                             
                                                c
                                             
                                          
                                          =
                                          
                                             
                                                
                                                   
                                                      
                                                         C
                                                      
                                                      
                                                         t
                                                      
                                                   
                                                   ×
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     ∑
                                                                  
                                                                  
                                                                     j
                                                                     =
                                                                     3
                                                                  
                                                                  
                                                                     
                                                                        
                                                                           S
                                                                        
                                                                        
                                                                           DS
                                                                           –
                                                                           CH
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                            (
                                                            j
                                                            -
                                                            1
                                                            )
                                                         
                                                      
                                                   
                                                   ×
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     ∑
                                                                  
                                                                  
                                                                     j
                                                                     =
                                                                     3
                                                                  
                                                                  
                                                                     
                                                                        
                                                                           S
                                                                        
                                                                        
                                                                           DS
                                                                           –
                                                                           CH
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                            
                                                               
                                                                  2
                                                               
                                                               
                                                                  j
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          =
                                          
                                             
                                                
                                                   
                                                      
                                                         C
                                                      
                                                      
                                                         t
                                                      
                                                   
                                                   ×
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     ∑
                                                                  
                                                                  
                                                                     j
                                                                     =
                                                                     3
                                                                  
                                                                  
                                                                     
                                                                        
                                                                           S
                                                                        
                                                                        
                                                                           DS
                                                                           –
                                                                           CH
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                            (
                                                            j
                                                            -
                                                            1
                                                            )
                                                            
                                                               
                                                                  2
                                                               
                                                               
                                                                  j
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          ,
                                       
                                    
                                 where C
                                 t is one clock cycle time of mica2 motes and its value is 0.125μs.
                                    
                                       (1)
                                       
                                          
                                             
                                                T
                                             
                                             
                                                c
                                             
                                          
                                          =
                                          (
                                          0.125
                                          ×
                                          433.3
                                          ×
                                          
                                             
                                                10
                                             
                                             
                                                9
                                             
                                          
                                          )
                                          
                                          μ
                                          s
                                          =
                                          54.16
                                          ×
                                          
                                             
                                                10
                                             
                                             
                                                9
                                             
                                          
                                          
                                          μ
                                          s.
                                       
                                    
                                 
                              


                                 From MN: Further, we compute key computation time T
                                 c as follows:
                                    
                                       
                                          
                                             
                                                T
                                             
                                             
                                                c
                                             
                                          
                                          =
                                          
                                             
                                                
                                                   
                                                      
                                                         C
                                                      
                                                      
                                                         t
                                                      
                                                   
                                                   ×
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     ∑
                                                                  
                                                                  
                                                                     j
                                                                     =
                                                                     3
                                                                  
                                                                  
                                                                     
                                                                        
                                                                           S
                                                                        
                                                                        
                                                                           DS
                                                                           –
                                                                           MN
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                            (
                                                            j
                                                            -
                                                            1
                                                            )
                                                         
                                                      
                                                   
                                                   ×
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     ∑
                                                                  
                                                                  
                                                                     j
                                                                     =
                                                                     3
                                                                  
                                                                  
                                                                     
                                                                        
                                                                           S
                                                                        
                                                                        
                                                                           DS
                                                                           –
                                                                           MN
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                            
                                                               
                                                                  2
                                                               
                                                               
                                                                  j
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          =
                                          
                                             
                                                
                                                   
                                                      
                                                         C
                                                      
                                                      
                                                         t
                                                         ×
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        
                                                                           ∑
                                                                        
                                                                        
                                                                           j
                                                                           =
                                                                           3
                                                                        
                                                                        
                                                                           
                                                                              
                                                                                 S
                                                                              
                                                                              
                                                                                 DS
                                                                                 –
                                                                                 MN
                                                                              
                                                                           
                                                                        
                                                                     
                                                                  
                                                                  (
                                                                  j
                                                                  -
                                                                  1
                                                                  )
                                                                  
                                                                     
                                                                        2
                                                                     
                                                                     
                                                                        j
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          ,
                                       
                                    
                                 
                                 
                                    
                                       (2)
                                       
                                          
                                             
                                                T
                                             
                                             
                                                c
                                             
                                          
                                          =
                                          (
                                          0.125
                                          ×
                                          6814.08
                                          ×
                                          
                                             
                                                10
                                             
                                             
                                                3
                                             
                                          
                                          )
                                          
                                          μ
                                          s
                                          =
                                          851.76
                                          ×
                                          
                                             
                                                10
                                             
                                             
                                                3
                                             
                                          
                                          
                                          μ
                                          s.
                                       
                                    
                                 
                              

In view of the fact that cracking time is meaningful only when the adversary starts cracking and finishes it within the same phase (query/query response). We define this time as meaningful time T
                                 m 
                                 [2] which is calculated as follows:
                                    
                                       
                                          
                                             
                                                T
                                             
                                             
                                                m
                                             
                                          
                                          =
                                          (
                                          n
                                          -
                                          x
                                          )
                                          ×
                                          p
                                          +
                                          
                                             
                                                T
                                             
                                             
                                                B
                                             
                                          
                                          +
                                          (
                                          x
                                          -
                                          1
                                          )
                                          ×
                                          p
                                          /
                                          BW,
                                       
                                    
                                 where n is the number of MNs in a cluster and x is the MN which uses xth TDMA time-slot.

After completion of the phase, the cracked key will be of no use. Now from Eqs. (1) and (2), the above computations illustrate that irrespective of type of the nodes (CH or MN), if the nodes are compromised, time required to compute the key for malicious node is always greater than the meaningful time and hence the key will be of no use.

In this section the overhead in terms of storage, computation and communication of MSQPS are computed. The overheads are measured for one communication cycle. We define one communication cycle as the time elapsed between a query sent by the sink and the corresponding response received at the sink. Here query phases (BS–CH, CH–MN) followed by query response phases (MN–CH, CH–BS) makes a communication cycle. Storage overhead is measured in terms of memory requirement for storing the data. Also computation and communication overheads are measured in terms of energy requirement for processing total data received and energy consumed for transmission/reception of data respectively. Overheads analysis is performed considering mica2 motes [22] as sensor nodes.

In query phase (BS–CH) (Section 4.1.1), CH stores 12 bits 
                                 
                                    
                                       
                                          T
                                       
                                       
                                          BS
                                          _
                                          present
                                       
                                    
                                    ≈
                                    2
                                 
                               bytes of data. Also in query phase (CH–MN), the CH stores registration time-stamp (T
                              reg) of 12 bits≈2 bytes. In query phase (CH–MN), the CH stores (Section 4.1.2) 5-tuple data (6 bytes) for each MN. So, in query phase the CH stores 6n bytes considering n number of MNs associated with it, 2 bytes for 
                                 
                                    
                                       
                                          T
                                       
                                       
                                          BS
                                          _
                                          present
                                       
                                    
                                 
                               and 2 bytes for T
                              reg. Hence, total storage for CH=(6n
                              +4) bytes. Similar to the query phase (CH–MN), in query response phase (MN–CH) the same (6n
                              +2) bytes of data is updated (Section 4.2.1) at CH.

Therefore, storage overhead at
                                 
                                    (3)
                                    
                                       CH
                                       =
                                       (
                                       6
                                       n
                                       +
                                       4
                                       )
                                       bytes.
                                    
                                 
                              
                           

Further, in query phase (CH–MN), an MN, on receiving its node-id from the CH, stores (Section 4.1.2) 2-tuple data (size 3 bytes approx.). It also stores T
                              reg of 12 bits≈2 bytes.

Therefore, total storage overhead at
                                 
                                    (4)
                                    
                                       MNs
                                       =
                                       5
                                       n
                                       
                                       bytes.
                                    
                                 
                              
                           

According to mica2 specifications [22] execution of 1 addition instruction takes 3nJ and AND/OR takes 2nJ. Considering XOR operation requires energy as AND/OR operation and the other operations, e.g., swapping, complement, shifting, extraction, etc. require as addition, the following calculations are done for evaluating computational overhead.

In this phase (Section 5.1.1), MNs are not involved. So the overhead is measured only for CHs. So, computation overhead for this phase is:
                                    
                                       (5)
                                       
                                          (
                                          3
                                          +
                                          3
                                          +
                                          2
                                          +
                                          3
                                          )
                                          
                                          nJ
                                          =
                                          11
                                          
                                          nJ.
                                       
                                    
                                 
                              

This phase involves both types of nodes and computation overheads of both types of nodes are given below:


                                 For a CH: For encryption (XOR, extraction, shift, concatenation) at CH is:
                                    
                                       (6)
                                       
                                          (
                                          2
                                          +
                                          3
                                          +
                                          3
                                          ×
                                          8
                                          +
                                          3
                                          )
                                          
                                          nJ
                                          =
                                          32
                                          
                                          nJ.
                                       
                                    
                                 
                              

For decryption (AND, extraction, shift, comparison) at CH is:
                                    
                                       (7)
                                       
                                          (
                                          2
                                          +
                                          3
                                          +
                                          3
                                          ×
                                          8
                                          +
                                          3
                                          )
                                          
                                          nJ
                                          =
                                          32
                                          
                                          nJ.
                                       
                                    
                                 
                              


                                 For an MN: For decryption (split, extraction, shift, XOR, comparison) at MN is:
                                    
                                       (8)
                                       
                                          (
                                          2
                                          ×
                                          2
                                          +
                                          2
                                          +
                                          3
                                          ×
                                          8
                                          +
                                          3
                                          +
                                          3
                                          )
                                          
                                          nJ
                                          =
                                          36
                                          
                                          nJ.
                                       
                                    
                                 
                              

Also, during this phase, the MN performs the following three tasks for encryption of the registration response. Therefore, computation overhead for MN is:
                                    
                                       (9)
                                       
                                          (
                                          2
                                          +
                                          3
                                          +
                                          3
                                          ×
                                          8
                                          )
                                          
                                          nJ
                                          =
                                          29
                                          
                                          nJ.
                                       
                                    
                                 
                              

As a result, query phase (CH–MN) incurs following computational overhead (6)+(7)+(8)+(9):
                                    
                                       (10)
                                       
                                          (
                                          32
                                          +
                                          32
                                          +
                                          36
                                          +
                                          29
                                          )
                                          
                                          nJ
                                          =
                                          129
                                          
                                          nJ.
                                       
                                    
                                 
                              

In this phase (Section 4.2.1), computation overhead is incurred by the nodes is as follows:


                                 For a CH: For decryption (AND, shift, comparison) at CH is:
                                    
                                       (11)
                                       
                                          (
                                          2
                                          +
                                          3
                                          ×
                                          8
                                          +
                                          3
                                          )
                                          
                                          nJ
                                          =
                                          29
                                          
                                          nJ.
                                       
                                    
                                 
                              


                                 For an MN: During this phase the MN encrypts the response it has to send to the CH. Hence, computation overhead for encryption (AND, extraction, shift) at an MN is:
                                    
                                       (12)
                                       
                                          (
                                          2
                                          +
                                          3
                                          +
                                          (
                                          3
                                          ×
                                          8
                                          )
                                          )
                                          
                                          nJ
                                          =
                                          29
                                          
                                          nJ.
                                       
                                    
                                 
                              

Therefore, query response phase (MN–CH) incurs following computational overhead:
                                    
                                       (13)
                                       
                                          (
                                          29
                                          +
                                          29
                                          )
                                          =
                                          58
                                          
                                          nJ.
                                       
                                    
                                 
                              

In this phase (Section 4.2.2), after receiving responses from l number of MNs, the CH performs aggregation using the average aggregation function [23], where the average value of the responses is calculated. The computation overhead for aggregating (summation, division) at a CH:
                                    
                                       (14)
                                       
                                          (
                                          6
                                          l
                                          +
                                          3
                                          )
                                          
                                          nJ.
                                       
                                    
                                 
                              

Hence, the total computation overhead for securing communication in one communication cycle:
                                    
                                       (15)
                                       
                                          (
                                          5
                                          )
                                          +
                                          (
                                          10
                                          )
                                          +
                                          (
                                          13
                                          )
                                          +
                                          (
                                          14
                                          )
                                          =
                                          (
                                          11
                                          +
                                          129
                                          +
                                          58
                                          +
                                          6
                                          l
                                          +
                                          3
                                          )
                                          
                                          nJ
                                          =
                                          (
                                          201
                                          +
                                          6
                                          l
                                          )
                                          
                                          nJ.
                                       
                                    
                                 
                              

Considering energy consumption for transmitting one byte of data is 16.25μJ and receiving one byte of data is 12.25μJ for a mica2 mote, the communication overheads of the scheme for query phase and query-response phases are evaluated below:


                                 For a CH: The CH consumes energy for two tasks (receiving broadcast, query):
                                    
                                       (16)
                                       
                                          (
                                          12.25
                                          ×
                                          2
                                          +
                                          12.25
                                          ×
                                          1
                                          )
                                          
                                          μ
                                          J
                                          =
                                          36.75
                                          
                                          μ
                                          J.
                                       
                                    
                                 
                              

In this phase both the CH and MNs consume energy. So, the details of energy consumption for both types of nodes are given below:


                                 For a CH: The CH consumes energy for five tasks (3 broadcast, 1 reception, 1 transmission). Hence, total energy consumed by the CH:
                                    
                                       (17)
                                       
                                          (
                                          16.25
                                          ×
                                          2
                                          +
                                          16.25
                                          ×
                                          2
                                          +
                                          16.25
                                          ×
                                          2
                                          +
                                          12.25
                                          ×
                                          3
                                          ×
                                          n
                                          +
                                          16.25
                                          ×
                                          n
                                          )
                                          
                                          μ
                                          J
                                          =
                                          (
                                          97.5
                                          +
                                          53
                                          n
                                          )
                                          
                                          μ
                                          J.
                                       
                                    
                                 
                              


                                 For an MN: Similarly the n numbers of MNs associated with the CH consume energy for four different tasks (3 receptions, 1 transmission). Total energy consumed by n MNs:
                                    
                                       (18)
                                       
                                          (
                                          12.25
                                          ×
                                          n
                                          +
                                          12.25
                                          ×
                                          2
                                          ×
                                          n
                                          +
                                          16.25
                                          ×
                                          3
                                          ×
                                          n
                                          +
                                          12.25
                                          ×
                                          n
                                          )
                                          
                                          μ
                                          J
                                          =
                                          97.75
                                          n
                                          
                                          μ
                                          J.
                                       
                                    
                                 
                              

The CH consumes energy for two tasks (1 broadcast, 1 reception): 16.25μJ and 12.25×5l
                                 μJ.

Further, the n numbers of MNs associated with the CH consume energy for receiving the query packet whereas l numbers of MNs consume energy for transmitting the QR packet (Section 4.2.1). These two tasks consume 12.25n
                                 μJ and 16.25×5l
                                 μJ respectively.

So, in this phase total energy consumed by the CH:
                                    
                                       (19)
                                       
                                          (
                                          16.25
                                          +
                                          12.25
                                          ×
                                          5
                                          l
                                          )
                                          
                                          μ
                                          J
                                          =
                                          (
                                          16.25
                                          +
                                          61.25
                                          l
                                          )
                                          
                                          μ
                                          J,
                                       
                                    
                                 and total energy consumed by n MNs:
                                    
                                       (20)
                                       
                                          (
                                          12.25
                                          n
                                          +
                                          16.25
                                          ×
                                          5
                                          l
                                          )
                                          
                                          μ
                                          J
                                          =
                                          (
                                          12.25
                                          n
                                          +
                                          81.25
                                          l
                                          )
                                          
                                          μ
                                          J.
                                       
                                    
                                 
                              

Here a CH consumes energy for transmitting the query response packet to the BS (Section 4.2.2). The size of the query response packet transmitted to the BS by the CH is 4 bytes. Therefore, in query response phase (CH–BS) energy consumed by the CH:
                                    
                                       (21)
                                       
                                          (
                                          16.25
                                          ×
                                          4
                                          )
                                          
                                          μ
                                          J
                                          =
                                          65
                                          
                                          μ
                                          J.
                                       
                                    
                                 
                              

So, the transmission energy consumption of the CH considering the four phases (using Eqs. (16), (17), (20), and (22)):
                                    
                                       (22)
                                       
                                          (
                                          36.75
                                          +
                                          97.5
                                          +
                                          53
                                          n
                                          +
                                          16.25
                                          +
                                          61.25
                                          l
                                          +
                                          65
                                          )
                                          
                                          μ
                                          J
                                          =
                                          (
                                          215.5
                                          +
                                          53
                                          n
                                          +
                                          61.25
                                          l
                                          )
                                          
                                          μ
                                          J.
                                       
                                    
                                 
                              

Similarly, the receiving energy consumption of MNs for both the phases (using Eqs. (19) and (21)):
                                    
                                       (23)
                                       
                                          (
                                          97.75
                                          n
                                          +
                                          12.25
                                          n
                                          +
                                          81.25
                                          l
                                          )
                                          
                                          μ
                                          J
                                          =
                                          (
                                          110
                                          n
                                          +
                                          81.25
                                          l
                                          )
                                          
                                          μ
                                          J.
                                       
                                    
                                 
                              

Therefore, the total communication overhead, including consumptions for CH and MNs (using Eqs. (23) and (24)):
                                    
                                       (24)
                                       
                                          (
                                          215.5
                                          +
                                          53
                                          n
                                          +
                                          61.25
                                          l
                                          +
                                          110
                                          n
                                          +
                                          81.25
                                          l
                                          )
                                          
                                          μ
                                          J
                                          =
                                          (
                                          215.5
                                          +
                                          163
                                          n
                                          +
                                          142.5
                                          l
                                          )
                                          
                                          μ
                                          J.
                                       
                                    
                                 
                              

In this section we have compared MSQPS with one competing scheme SNEP [7] with the help of an example. We have also considered the previous version SQPS [4] for comparison. All the measurements are considered for one communication cycle which is defined earlier in this section.

Let us consider a network with 600 (N) nodes. In MSQPS and SQPS, we consider 30 clusters where each cluster has 20 nodes (1 CH and 19 MNs). Here, we have considered on an average half of the 30 clusters, i.e., 15 are participating in network operation at any point of time. We have also considered that out of 19 MNs in a cluster, 10 MNs (value of l) are responding. For all the three schemes, the maximum packet generation rate 
                              
                                 (
                                 
                                    
                                       g
                                    
                                    
                                       max
                                    
                                 
                                 )
                              
                            is 3μs for each node against every query.

For SNEP, length of packet 
                              
                                 (
                                 
                                    
                                       L
                                    
                                    
                                       SNEP
                                    
                                 
                                 )
                              
                            is 1403 bits, where the length of the payload 
                              
                                 (
                                 
                                    
                                       L
                                    
                                    
                                       payload
                                    
                                 
                                 )
                              
                            is 192 bits. The block sizes 
                              
                                 (
                                 
                                    
                                       B
                                    
                                    
                                       RC
                                       5
                                    
                                 
                                 )
                              
                            used in encryption/decryption algorithm RC5 and message digest MD5 
                              
                                 (
                                 
                                    
                                       B
                                    
                                    
                                       MD
                                       5
                                    
                                 
                                 )
                              
                            are 128 bits and 512 bits respectively. Number of clock cycles required for encryption (E)/decryption (D) using RC5 algorithm is 1952 and for the message digest (HMAC_MD5) is 392. The counter value 
                              
                                 (
                                 
                                    
                                       c
                                    
                                    
                                       max
                                    
                                 
                                 )
                              
                            stored at every node for replay attack detection is 1023 bits while symmetric key is 2 bytes. Now considering the above example we compute storage, computation and communication overheads for all the three schemes and results are presented in Table 1
                           . The overheads for SNEP, SQPS and MSQPS are calculated and presented in Table 1. In case of SNEP and SQPS, the calculation is done as per the works [7,4] respectively whereas the calculation on MSQPS is done as per Section 5.1.2.

From Table 1, primarily if we compare MSQPS with SQPS in terms of energy consumption, we observe the net gain (considering both computation and communication) of MSQPS over SQPS is 11%. Alternatively, considering initial energy of each of the nodes as 2J (Table 2
                           ), the improvement of communication overhead, i.e., (1.295−1.08)=0.215J≈10.7% of initial energy is significant. Further, we observe that for both SQPS and MSQPS the computation and communication overheads are less than that of SNEP, which is advantageous for resource-constrained sensor networks. However, the storage overhead is marginally higher in case of SQPS and MSQPS than SNEP and that is affordable in currently available motes [5]. Hence, our scheme MSQPS provides energy saving security solution at the cost of marginally higher storage overheads compared to the two schemes SNEP and SQPS.

The effectiveness of the proposed security scheme reported in the earlier section is evaluated through simulation.

The simulation is performed using MATLAB (version 7.1). As mentioned earlier, simulation results of our scheme MSQPS are compared with one existing scheme namely SNEP [7] and also with one of our previously reported scheme’s namely SQPS [4] for analyzing the improvement achieved. For simplicity we assume the following: (i) nodes are random uniformly deployed within a network area and (ii) nodes have the same energy.

During implementation of all the above mentioned schemes, we have deployed 300–600 nodes in the network and number of malicious nodes is varied from 5 to 100. Extensive simulation has been performed and average results of 100 independent runs have been taken while plotting the simulation graphs.

In order to measure the performance of the scheme, authentication rate, data freshness and packet delivery ratio have been considered as performance metrics. Authentication rate is used for indicating whether message integrity has been preserved. Data freshness is considered as the yardstick for indicating whether replay attack has occurred and is measured in query response phase (MN–CH). Packet delivery ratio is a measure of network performance indicating the number of packets delivered and number of packets actually received in presence of attackers. The three metrics are formally defined below:


                           Authentication rate (%): It is defined as the number of authenticated messages received by a CH out of the total number of messages sent towards the CH in one communication cycle. It is evaluated as follows:
                              
                                 
                                    Authentication rate
                                    =
                                    
                                       
                                          Number of authenticated messages received by a CH
                                       
                                       
                                          Total number of messages sent towards the CH
                                       
                                    
                                    ×
                                    100
                                    .
                                 
                              
                           
                        


                           Data freshness (%): It is defined [24] as the percentage of number of packets received by a CH containing current data out of the total number of packets sent by the MNs during one communication cycle. So, data freshness is for query response phase (MN–CH) only. It is evaluated as follows:
                              
                                 
                                    Data freshness
                                    
                                    (
                                    %
                                    )
                                    =
                                    
                                       
                                          Number of packets received by a CH containing current data
                                       
                                       
                                          Total number of packets sent by the MNs
                                       
                                    
                                    ×
                                    100
                                    .
                                 
                              
                           
                        


                           Packet delivery ratio: It is defined [25] as the total number of packets received by a CH out of the total number of packets sent by the MNs during one communication cycle (Section 5.1.2). It is evaluated as follows:
                              
                                 
                                    Packet delivery ratio
                                    =
                                    
                                       
                                          Number of packets received by a cluster head
                                       
                                       
                                          Total number of packets sent towards the cluster head
                                       
                                    
                                    .
                                 
                              
                           
                        

The relevant parameter values for running the simulation are listed below in Table 2.

Three sets of experiments are conducted based on the above mentioned performance metrics for comparing the performance of the scheme MSQPS with the two competing schemes SQPS [4] and SNEP [7]. In the comparison average results of 100 independent runs are taken while plotting the results.

SNEP is used for securing node-to-node communication. It also provides basic security features and replay protection. The basic security features include confidentiality and two-party data authentication where it employs RC5 based symmetric cryptography for maintaining confidentiality and MAC based authentication for data authentication. For details of SQPS, which is a preliminary version of the present work MSQPS, we refer the work [4].


                              Fig. 2
                               presents the results of authentication rate of received messages. It is observed that for all the three competing schemes message authentication rate decreases with increase in malicious nodes in the network. In MSQPS, in presence of 25 malicious nodes the average authentication rate is 97.05% whereas its values are 90.33% and 89.01% for 50 and 100 malicious nodes respectively. It is due to the fact that as the number of malicious node increases, the number of attempts made by them to send unauthenticated data increases resulting in decrease of message authentication rate.

We observe from Fig. 2(a–c) that the authentication rate is the lowest in SNEP followed by SQPS and MSQPS. This is substantiated by the results that show average authentication rate decreases by 6.92% in MSQPS, 9.17% in SQPS and 12.61% in SNEP with increase in malicious nodes from 25 to 50. Also, average authentication rate decreases by 8.28% in MSQPS, 10.97% in SQPS and 15.32% in SNEP with increase in malicious nodes from 25 to 100. Therefore, from the results of authentication rate we can conclude that MSQPS is more efficient in ensuring better message integrity compared to SQPS and SNEP as authentication rate is an indicator of message integrity.


                              Fig. 3
                               presents the results of data freshness. It is observed that for all the three competing schemes data freshness decreases with increase in malicious nodes in the network. In MSQPS, in presence of 25 malicious nodes the average data freshness is 97.56% whereas its values are 95.5% and 92.72% for 50 and 100 malicious nodes respectively. It is due to the fact that as the number of malicious node increases, the number of attempts made by them to send data repeatedly increases resulting in decrease of number of received packets containing current data.

We observe from Fig. 3(a–c) that the data freshness is the lowest in SNEP followed by SQPS and MSQPS. We also observe that the results of SNEP and SQPS intersect in all the three plots at a certain point. The intersecting points are at 60, 18, 10s in Fig. 3(a–c) respectively. This signifies that at the beginning SNEP is better than SQPS, but over time SQPS outperforms SNEP. However, the plot of MSQPS never intersects with others’ performances thereby proving its superiority over the other two schemes. Alternatively SNEP performs well initially but after a period of time a sharp decrease in data freshness is observed in it whereas the remaining two schemes MSQPS and SQPS show steady decrease in data freshness over a longer period of time. This is substantiated by the results that show average data freshness decreases by 2.11% in MSQPS, 2.31% in SQPS and 8.36% in SNEP with increase in malicious nodes from 25 to 50. So, from the results of data freshness we can conclude that MSQPS is more efficient in detecting replay attacks compared to SQPS and SNEP as data freshness is an indicator of replay attack.


                              Fig. 4
                               shows packet delivery ratio for varying number of malicious nodes. During simulation 400 nodes are deployed that also include malicious nodes. The malicious nodes steal some of the TDMA slots for sending fake data thereby keeping the query response phase (MN–CH) busy resulting in decrease of packet delivery ratio. Further, we observe that the slope of the curve in MSQPS is steady compared to SNEP and SQPS. In MSQPS, packet delivery ratio is about 3% more than SQPS and 9.29% more than SNEP for up to 25 numbers of malicious nodes. For 25–85 number of malicious nodes packet delivery ratio in MSQPS is about 16.72% and 39.37% more than SQPS and SNEP respectively. This onwards these values are 41.25% and 56.41%. Summarily, it can be said that overall packet delivery ratio in MSQPS is 20.32% more than SQPS and 35.02% more than SNEP for all sets of values of malicious nodes.

The objective of the present work is to propose a light-weight scheme for securing query processing in wireless sensor network with clustered architecture. Specifically the work enhances security features at every step of communication so as to make the network more robust in defending against attacks such as replay. Further, for all communication between CH and MNs the key is neither transmitted over air nor pre-deployed in the nodes. This eliminates the probability of gaining knowledge about key by adversaries. The key is generated with the help of some computations that are lightweight in nature. Both qualitative and quantitative analyses of the scheme have been done and results are compared with two competing schemes including the previous version of the present scheme. Qualitative analysis consists of security and overhead analysis. Through security analysis we have measured the achievement of our scheme in providing confidentiality and integrity. The overhead analysis is done by evaluating the overheads of storage, computation and communication and comparative results show significant reduction in computation and communication overheads at the cost of marginal increase of storage overhead. Finally in quantitative analysis performance of the scheme is measured using authentication rate, data freshness and packet delivery ratio primarily to show our scheme’s competence in defending replay attack. In both the analysis comparative results show the present scheme is more efficient than the competing schemes.

However, in view of the importance of cluster architecture and the algorithmic dependencies on cluster, we are considering to extend our scheme in future work so that it works independent of architecture. Moreover, the solution may be made more realistic by considering more rich attack model and including the remaining basic security properties.

@&#REFERENCES@&#

