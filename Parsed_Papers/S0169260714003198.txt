@&#MAIN-TITLE@&#Scheduling prioritized patients in emergency department laboratories

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A semi-online patient scheduling problem in the pathology laboratory is studied.


                        
                        
                           
                           The problem is formulated as a semi-online hybrid shop scheduling problem.


                        
                        
                           
                           A genetic algorithm is developed for solving the problem.


                        
                        
                           
                           Several experiments are conducted to evaluate the effectiveness of the approach.


                        
                        
                           
                           The approach reduces waiting time of patients and improves operations efficiency.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Health care management

Patients scheduling

Emergency department laboratory

Triage

Genetic algorithm

@&#ABSTRACT@&#


               
               
                  This research focuses on scheduling patients in emergency department laboratories according to the priority of patients’ treatments, determined by the triage factor. The objective is to minimize the total waiting time of patients in the emergency department laboratories with emphasis on patients with severe conditions. The problem is formulated as a flexible open shop scheduling problem and a mixed integer linear programming model is proposed. A genetic algorithm (GA) is developed for solving the problem. Then, the response surface methodology is applied for tuning the GA parameters. The algorithm is tested on a set of real data from an emergency department. Simulation results show that the proposed algorithm can significantly improve the efficiency of the emergency department by reducing the total waiting time of prioritized patients.
               
            

@&#INTRODUCTION@&#

Accurate and quick treatment of patients is the most important aim of the health care systems [1], especially at emergency departments, as such departments are dealing with life and death situations on a daily basis, an inefficient patient treatment procedure can end up in pernicious results. After shifting the patients to emergency department, their initial information is taken by a nurse and then, they are categorized according to the severity of their conditions in order to determine their treatment procedure. Some patients may need to go to emergency laboratories to take some medical tests. Scheduling and coordinating the patients in the emergency laboratories in an efficient manner has a major role in improving the performance of the emergency department and providing a more reliable system. In this way, the priority of the patients determined by a triage factor becomes important. Triage is the process by which the urgency of the patient condition is determined. The assessment of the patients’ medical needs is usually performed by a triage officer using an established plan or system which consists of 5 levels [2,3]. For each level of the triage factor system, a related weight in form of special number is assigned to a patient by an expert who takes the information about the severity of each patient health condition; the higher the weight is, the most severe the patient health condition is. The aim of using triage is to protect endangered human lives by granting priority to the most urgent patients with immediate needs while paying enough attention to other patients in order to attain the most overall outcome of the available resources [4].

In this research, and as a real case study, an emergency department of a hospital is studied, which uses the five-level triage system. The aim of this study is to improve the efficiency of the emergency department by minimizing the total waiting time of prioritized patients in the emergency department laboratories. Since the environment of emergency department is based on accidental entrance of patients who suffer from an accident or are in a critical state, for some patients who need medical tests at laboratories, the tests do not usually require any predecessor action (such as fasting before taking tests, etc.). Additionally, at most laboratories, there is no predetermined route of tests for patients’ tests. Hence, the emergency department patients scheduling at laboratories can be formulated as an open shop scheduling problem. Open shop scheduling problems mainly consist of processing n jobs on m machines without any pre-determined sequence of operations. Moreover, in real world situations, in most of the production floors and even in laboratories, we seldom see just one machine (place) for processing one job. While classical open shop scheduling models commonly consider only one machine at each stage for processing a job, in flexible open shop scheduling models, there may be more than one machine at each stage to increase the throughput and capacity of the shop floor, to balance the speed of the stages, to either eliminate or to reduce the impact of bottleneck stages on the overall shop efficiency [5]. The laboratories we consider can have parallel places or multiple staff for doing the same test. The objective of scheduling patients in the emergency department laboratories is to minimize the total waiting time of the patients with emphasis on their triage factor which leads to minimizing total weighted completion time of jobs in a flexible open shop scheduling problem.

Since open shop scheduling problems are categorized as NP-hard problems [6,7], there is no exact method which can be used for solving real-sized problems in a reasonable amount of time. In this research, a genetic algorithm (GA) is proposed as a solution approach. Response surface methodology as an efficient tool is employed to optimize the GA parameters. The algorithm is then tested on a set of real data collected from an emergency department to show the efficiency and superiority of the proposed method.

The remainder of this of this paper is organized as follows. The related literature review is provided in Section 2. The mathematical model is presented in Section 3. Section 4 describes the proposed genetic algorithm. In Section 5, the efficiency of the proposed approach is investigated and finally, Section 6 draws some conclusions from this study.

@&#LITERATURE REVIEW@&#

In recent years, health care systems scheduling has caught a great deal of attention from the operations management community. Previous research in this area can be categorized into two main groups: patient scheduling and resource (e.g. staff) scheduling. Patient scheduling is recognized to have a major role on the performance of the health care system by reducing the waiting time of the patients and facilitating consecutive treatments without interruption [8]. Demeester et al. [9] have proposed a hybrid tabu search algorithm for minimizing the weighted sum of the total penalty incurred for assigning patients to un-preferred rooms and the number of transfers considering medical needs of the patients as well as their preferences. Min and Yih [10] have proposed a stochastic dynamic programming model for scheduling patients in a surgical facility with limited capacity, taking into account patients’ priority. Tai and Williams [11] have modeled the patient unpunctuality in appointment driven outpatient clinics by a constructed F3 distribution, taking into consideration various patient behavior patterns. The aim of the proposed model is to minimize the total waiting time of patients and the doctors. Fiegl and Pontow [12] have developed an algorithm for scheduling pick-up and delivery (PD) tasks in hospitals in order to minimize the average weighted flow time. They have modeled the problem by using the methods of graph theory. Alexopoulos et al. [13] have modeled and simulated the stream of patients arriving at a community clinic. They have proposed a nonhomogeneous Poisson process to model the random patients’ arrivals and an unbounded Johnson distribution for patients’ tardiness. Chien et al. [14] have modeled the problem of rehabilitation patient scheduling as a hybrid shop scheduling, and developed an evolutionary approach based on genetic algorithm to solve the problem. The objective is to increase the service quality by reducing patient waiting time and therapy equipment utilization. Petrovic et al. [15] have presented a multi-objective optimization algorithm for scheduling radiotherapy treatments for categorized cancer patients. The objectives of the proposed model are minimization of average patients’ waiting times and minimization of average length of breaches of waiting time targets. Turkcan et al. [16] have used a constraint-based approach for developing sequential appointment scheduling with service criteria and some other criteria such as expectation and variance of patients’ waiting times, queue length, and over time. The proposed measure is the minimization of the difference between maximum and minimum expected waiting time of patients, and the number of patients at the beginning of each slot. Kiris et al. [1] have developed a knowledge-based reactive scheduling system for emergency departments, considering patients priorities, arrival times, flow time, and doctors work load, for the aim of determining the patients who have higher priorities initially, and then minimizing their waiting times. Pennathur et al. [17] have presented an elective model of patient-tracking system simulator which combines a realistic model of emergency department and patient events with a configurable patient-tracking system display. Adan et al. [18] have developed a two-stage planning procedure for master planning of elective and emergency patients under stochastic demand and capacitated resources. They have applied a goal programming approach to minimize the deviations of the resources consumption to the target levels of resources utilization in order to obtain a tactical plan. Lu et al. [19] proposed an adaptive clinical treatment processes mechanism through recommendations, which determines appropriate treatment plans for particular patients. Each treatment plan is indexed by a set of significant patient features. In some other papers like Meyer et al. [20], the importance of utilizing an efficient data management system is stressed, and for this aim, a complex data model is developed and implemented using oracle database in high availability cluster mode in order to integrate different types of participant-related data. Demir et al. [21], focused on emergency readmissions, and by utilizing a multilevel transition modeling approach, profiled the hospitals according to their patients’ emergency readmissions.

Some studies have been devoted to resource scheduling in the context of health care system scheduling. Chern et al. [22] have investigated the health examination scheduling problem taking into account the limitations such as the sequence and continuity of the examination procedure. They have developed an efficient heuristic algorithm to solve the problem with the objective of minimizing the waiting time of examinees and doctors. Liu et al. [23] have proposed a heuristic algorithm to solve an operating room scheduling problem with open scheduling strategy with the objective of maximizing the operating rooms efficiency and minimizing the overtime cost. Aickelin et al. [24] have developed a genetic algorithm to solve a nurse rostering problem using an indirect coding based on permutations of the nurses. Fei et al. [25] have developed a set-programming model for designing a weekly surgery schedule in an operating theater, where both operating rooms and places in the recovery room are assumed to be multifunctional. The proposed model minimizes the utilization of the operating rooms, the overtime cost in the operating theater, and the unexpected idle time between surgical cases. Vermeulenet al. [26] have proposed an adaptive approach to allocate the resource capacity to patient groups and find the optimal resource openings hours. Topaloglu and Ozkarahan [27] have developed a mixed-integer programming model for scheduling residents’ duty hours, considering the on-call night, day-off, rest period, and total work-hours. Pham and Klinkert [28] have developed a new surgical case scheduling approach using an extension of the job shop scheduling problem for the aim of allocating hospital resources to individual surgical cases and deciding on the time to perform the surgeries. Gutjahr and Rauner [29] have proposed an ant colony optimization approach applied to nurse scheduling problem, considering a variety of constraints regarding working date and time, working patterns, nurses qualifications, nurses’ and hospitals’ preferences, as well as costs. Fei et al. [30] have proposed a tactical planning model by a column-generation-based heuristic procedure, for an endoscopy center composed of two specialized operating rooms for one week, with the objective of minimizing the utilization of the operating room and minimizing the cost of overtime. Topaloglu [31] has presented a goal programming model which takes into account hard and soft constraints for a monthly planning horizon in order to reduce the negative impact on shift workers, physiologically, psychologically, and socially. Cebrea et al. [32] have developed an agent-based modeling and simulation to design a decision support system for the operation of health care emergency departments. Yang et al. [33] have analyzed the prediction model of patients’ demand in the emergency department using data mining, classification, and a decision tree. They have developed an anticipation model for dispatching medical personnel in different departments. Yeh and Lin [34] have proposed a simulation model to cover the complete flow for the patient through the emergency department and then have applied a genetic algorithm to find a near-optimal nurse schedule with the objective of minimizing the patients’ waiting time. Table 1
                      provides a summary of the most related research on patient scheduling available in the literature.

As mentioned before, the nature of scheduling patients in emergency department laboratories is considerably similar to the case of open shop scheduling problems (there is no predetermined order for doing tests at laboratories for each patient). Formulating the patient scheduling problem as a generalized flexible open shop scheduling problem makes it possible to use well-known methods that have been successfully applied to solve shop scheduling problems. However, to the best of our knowledge, this approach has not been applied to the context of patients scheduling in emergency department laboratories. In addition, the flexible open shop problem has not been studied extensively even in manufacturing environments, giving it an interest in its own right.

In this section, an MILP model is proposed to formulate the problem of scheduling patients at emergency department laboratories. In the proposed model, each laboratory is considered as a stage, each patient as a job and each place (staff) at a laboratory as a machine. In each stage, there is restricted number of parallel identical machines. It is supposed that the triage factor of each patient (job) and the required tests are known and there is no precedence constraint between tests. Additionally, each patient does not necessarily realize a test at each stage which means that the processing times on some stages can be null for some jobs. Hence, the patients scheduling problem can be formulated as a generalized flexible open shop problem.
                        Parameters


                        
                           n
                        
                        
                           number of patients

number of stages (laboratories)

number of parallel machines (places) at stage (laboratory) j
                           

set of stages (laboratories) at which patient i has to do medical tests

processing time of patient i at stage (laboratory) j
                           

an arbitrary large positive number

patients i, k
                              ∈{1, 2, 3, ..., n}

stages (laboratories) j, l
                              ∈{1, 2, 3, …, m}

machines (places) r
                              ∈{1, 2, 3, …, mj}

1 if patient i goes to stage (laboratory) j prior to stage (laboratory) l, and 0 otherwise, ∀i, (j
                              ∈
                              Ni)

1 if patient i precedes patient k in stage (laboratory) j, and 0 otherwise, ∀i, k, (j
                              ∈
                              Ni
                              ∩
                              Ni)

1 if patient i at stage (laboratory) j takes medical test on machine (place) r, and 0 otherwise

completion time of patient i at stage (laboratory) j
                           

completion time of patient i
                           

triage coefficient of patient i
                           


                        
                           
                              (1)
                              
                                 
                                    min
                                    
                                       ∑
                                       
                                          i
                                          =
                                          1
                                       
                                       n
                                    
                                    
                                       
                                          w
                                          i
                                       
                                       *
                                    
                                    
                                       f
                                       i
                                    
                                 
                              
                           
                        
                     

Eq. (1) is the objective function which aims to minimize the total weighted completion time of all patients.
                           
                              (2)
                              
                                 
                                    
                                       C
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    ≥
                                    
                                       P
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    ∀
                                    i
                                    ,
                                       
                                    j
                                    ∈
                                    
                                       N
                                       i
                                    
                                 
                              
                           
                        
                     

Eq. (2) assures that the completion time of each patient's operation is greater than its processing time at each stage (laboratory).
                           
                              (3)
                              
                                 
                                    
                                       C
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    ≥
                                    
                                       C
                                       
                                          i
                                          ,
                                          l
                                       
                                    
                                    +
                                    
                                       P
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    −
                                    M
                                    *
                                    (
                                    1
                                    −
                                    
                                       X
                                       
                                          i
                                          ,
                                          j
                                          ,
                                          l
                                       
                                    
                                    )
                                    ∀
                                    i
                                    ,
                                       
                                    (
                                    j
                                    ,
                                    l
                                    ∈
                                    
                                       N
                                       i
                                    
                                    )
                                    ,
                                     
                                    l
                                    >
                                    j
                                 
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    
                                       C
                                       
                                          i
                                          ,
                                          l
                                       
                                    
                                    ≥
                                    
                                       C
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    +
                                    
                                       P
                                       
                                          i
                                          ,
                                          l
                                       
                                    
                                    −
                                    M
                                    *
                                    
                                       X
                                       
                                          i
                                          ,
                                          j
                                          ,
                                          l
                                       
                                    
                                    ∀
                                    i
                                    ,
                                    (
                                    j
                                    ,
                                    l
                                    ∈
                                    
                                       N
                                       i
                                    
                                    )
                                    ,
                                       
                                    l
                                    >
                                    j
                                 
                              
                           
                        
                     

Eqs. (3) and (4) indicate that a patient can take at most one medical test at a time.
                           
                              
                                 
                                    
                                       C
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    ≥
                                    
                                       C
                                       
                                          k
                                          ,
                                          j
                                       
                                    
                                    +
                                    
                                       P
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    −
                                    M
                                    *
                                    (
                                    1
                                    −
                                    
                                       Y
                                       
                                          i
                                          ,
                                          j
                                          ,
                                          k
                                       
                                    
                                    )
                                    −
                                    M
                                    *
                                    (
                                    2
                                    −
                                    
                                       Z
                                       
                                          i
                                          ,
                                          j
                                          ,
                                          r
                                       
                                    
                                    −
                                    
                                       Z
                                       
                                          k
                                          ,
                                          j
                                          ,
                                          r
                                       
                                    
                                    )
                                 
                              
                           
                        
                        
                           
                              (5)
                              
                                 
                                    ∀
                                    i
                                    ,
                                    k
                                    ,
                                    r
                                    ,
                                    (
                                    j
                                    ∈
                                    
                                       N
                                       i
                                    
                                    ∩
                                    
                                       N
                                       k
                                    
                                    )
                                    ,
                                       
                                    k
                                    >
                                    i
                                 
                              
                           
                        
                     


                        C
                        
                           k,j
                        
                        ≥
                        C
                        
                           i,j
                        
                        +
                        P
                        
                           k,j
                        
                        −
                        M
                        *
                        Y
                        
                           i,j,k
                        
                        −
                        M
                        *(2−
                        Z
                        
                           i,j,r
                        
                        −
                        Z
                        
                           k,j,r
                        )
                           
                              (6)
                              
                                 
                                    ∀
                                    i
                                    ,
                                    k
                                    ,
                                    r
                                    ,
                                    (
                                    j
                                    ∈
                                    
                                       N
                                       i
                                    
                                    ∩
                                    
                                       N
                                       k
                                    
                                    )
                                    ,
                                       
                                    k
                                    >
                                    1
                                 
                              
                           
                        
                     

Constraints (5) and (6) impose that each machine (place or staff) can only serve one patient at a time.
                           
                              (7)
                              
                                 
                                    
                                       ∑
                                       
                                          r
                                          =
                                          1
                                       
                                       
                                          
                                             m
                                             j
                                          
                                       
                                    
                                    
                                       
                                          Z
                                          
                                             i
                                             ,
                                             j
                                             ,
                                             r
                                          
                                       
                                       =
                                       1
                                    
                                     
                                    ∀
                                    i
                                    ,
                                    (
                                    j
                                    ∈
                                    
                                       N
                                       i
                                    
                                    )
                                 
                              
                           
                        
                     

Eq. (7) assigns each patient to only one machine (place or staff) at each stage (laboratory).
                           
                              (8)
                              
                                 
                                    
                                       f
                                       i
                                    
                                    ≥
                                    
                                       C
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                     
                                    ∀
                                    i
                                    ,
                                    (
                                    j
                                    ∈
                                    
                                       N
                                       i
                                    
                                    )
                                 
                              
                           
                        
                     

Eq. (8) deals with the completion time of patients.
                           
                              (9)
                              
                                 
                                    
                                       X
                                       
                                          i
                                          ,
                                          j
                                          ,
                                          l
                                       
                                    
                                    ∈
                                    {
                                    1,0
                                    }
                                     
                                    ∀
                                    i
                                    ,
                                    (
                                    j
                                    ,
                                    l
                                    ∈
                                    
                                       N
                                       i
                                    
                                    )
                                 
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    
                                       Y
                                       
                                          i
                                          ,
                                          j
                                          ,
                                          k
                                       
                                    
                                    ∈
                                    {
                                    1,0
                                    }
                                     
                                    ∀
                                    i
                                    ,
                                    k
                                    ,
                                    (
                                    j
                                    ∈
                                    
                                       N
                                       i
                                    
                                    ∩
                                    
                                       N
                                       k
                                    
                                    )
                                 
                              
                           
                        
                        
                           
                              (11)
                              
                                 
                                    
                                       Z
                                       
                                          i
                                          ,
                                          j
                                          ,
                                          r
                                       
                                    
                                    ∈
                                    {
                                    1,0
                                    }
                                     
                                    ∀
                                    i
                                    ,
                                    r
                                    ,
                                    (
                                    j
                                    ∈
                                    
                                       N
                                       i
                                    
                                    ∩
                                    
                                       N
                                       k
                                    
                                    )
                                 
                              
                           
                        
                     

Eqs. (9)–(11) define the decision variables.

@&#METHODOLOGY@&#

As the open shop scheduling problems are NP-hard for more than three machines [6,7], real-sized problems involve complex shape of search space and cannot be solved exactly within a reasonable amount of time. General search methods such as GAs have been shown to be applicable for efficient exploration when search space is complicated. GAs are the family of computational methods inspired by evolution and the principle of “survival of the fittest”. These algorithms encode a potential solution to a simple chromosome-like data structure and apply recombination operators to these structures so as to preserve critical information. GAs have been applied widely to solve combinatorial optimization problems to find optimal or suboptimal solutions. The general structure of the proposed GA is described as follows:
                        
                           
                              
                              
                              
                                 
                                    
                                       Step 1
                                    
                                    (Initialization) Generate a set of random solutions for the initial population.
                                 
                                 
                                    
                                       Step 2
                                    
                                    (Evaluation) Calculate the fitness function value for each individual.
                                 
                                 
                                    
                                       Step 3
                                    
                                    (Crossover) Apply crossover operation to a predetermined percent of individuals selected from the population.
                                 
                                 
                                    
                                       Step 4
                                    
                                    (Mutation) Apply mutation operator to a predetermined percent of individuals selected from the population.
                                 
                                 
                                    
                                       Step 5
                                    
                                    (Survivor selection) Apply selection operator to the population together with the newly generated individuals to build the population of the next generation.
                                 
                                 
                                    
                                       Step 6
                                    
                                    (Termination) Repeat Steps 2 to 5 till the termination criterion is satisfied.
                                 
                              
                           
                        
                     
                  


                     Fig. 1
                      presents the overall overview of the proposed GA.

One of the most important steps in designing a genetic algorithm is the way by which the structure of the chromosomes is represented and then inferred. In the proposed algorithm, an operation-based representation is used which encodes a schedule as an ordered sequence of operations. Each gene stands for an operation, and each chromosome is a permutation of integers from 1 to the total number of operations to be scheduled. The actual schedule then will be obtained from the given chromosome. Fig. 2
                         represents the main structure of the chromosome explained earlier for an example which consists of 5 patients to be scheduled in 3 laboratories. If all patients go to all laboratories, a total of 15 operations are needed, while in this example, we consider patients totally go for 10 medical tests, and the rest of 5 operations need processing time of 0 for related patients. In the proposed algorithm for each parallel place, as well as each patient, a list of gaps, that is a list of idle time intervals, is determined. This list will be updated by allocating an operation to a machine (place). For this aim, starting from the first operation in the chromosome, each operation is allocated to the earliest available position regarding the gaps on its corresponding stage (laboratory) and patient. This procedure will result in an active schedule. In an active schedule, it is not possible to start an operation any earlier without delaying another operation [35].

Crossover is a critical feature of GAs which leads to effective combination of chromosomes to produce offspring. The single point crossover accompanied by repair procedure is used in the proposed GA. Given two parent chromosomes, a crossover point is randomly chosen over the length of chromosome and then the genes of the parents beyond that point are swapped. However, the resulted offspring may be infeasible. In a feasible solution, each operation has to appear just once in the chromosome. In order to ensure the feasibility of the acquired chromosome, the following procedure is used:
                           
                              
                                 
                                 
                                 
                                    
                                       
                                          Step 1
                                       
                                       Set Ω
                                          ←
                                          Φ and N
                                          
                                             ij
                                           as the number of repetition of operation O
                                          
                                             ij
                                           in the chromosome.
                                    
                                    
                                       
                                          Step 2
                                       
                                       
                                          
                                             For
                                           each operation O
                                          
                                             ij
                                           
                                          
                                             do
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                          
                                             If N
                                          
                                             ij
                                          
                                          >1, randomly select one of the genes that contains O
                                          
                                             ij
                                           and set zero in all other genes containing the same operation.
                                    
                                    
                                       
                                       
                                          
                                          
                                             If N
                                          
                                             ij
                                          
                                          =1, add operation O
                                          
                                             ij
                                           to Ω.
                                    
                                    
                                       
                                          Step 3
                                       
                                       
                                          
                                             While Ω
                                          ≠
                                          Φ do
                                          
                                       
                                    
                                    
                                       
                                       
                                          Assign 
                                             
                                                
                                                   
                                                      O
                                                      ′
                                                   
                                                   
                                                      i
                                                      j
                                                   
                                                
                                                ∈
                                                Ω
                                             
                                           to one of the genes randomly selected from the zero-valued genes and eliminate 
                                             
                                                
                                                   
                                                      O
                                                      ′
                                                   
                                                   
                                                      i
                                                      j
                                                   
                                                
                                             
                                           from Ω.
                                    
                                 
                              
                           
                        
                     

Mutation is a genetic operator which preserves the diversity of one generation of population to the next by creating subtle changes in the chromosome. In the proposed GA, the swap mutation is employed in which two genes over the length of the chromosome are randomly selected and their values are interchanged.

Roulette wheel selection mechanism stochastically chooses the most appropriate individuals to be sent to the next generation. This approach is a fitness proportional selection in which a new population is selected with respect to the probability distribution based on the fitness values. The competency of each individual to be selected is determined by its fitting value. In other words, the best fitted individuals have higher chance in the selection mechanism. For more clarification, consider the following chromosomes related to an identical example for which a total of 5 operations need to be scheduled, in Fig. 3
                        . For such chromosomes, the active schedule results in determination of each patient completion time, and by multiplying each patient's completion time to his triage factor the fitness function value is easily calculated. The second chromosome results in a better (less) fitness value and hence has a higher chance to be selected for the next generation.

Due to complex interactions among GA parameters, tuning the parameters is a complicated task in GA implementation. In this paper, response surface methodology (RSM), as a powerful experimental approach, is applied to set the parameters. Introduced by Box and Wilson [36], RSM is a powerful tool which explores the relationships between several explanatory variables and one or more response variables. It provides an understanding of how the independent variables affect the response, determines possible interrelationship among the independent variables, and generates a mathematical model which describes the processes [37]. The relation between the response variable y and independent variables x
                        
                           i
                         is shown by the following equation [38].
                           
                              
                                 
                                    y
                                    =
                                    f
                                    (
                                    
                                       x
                                       1
                                    
                                    ,
                                    
                                       x
                                       2
                                    
                                    ,
                                    …
                                    )
                                    +
                                    ε
                                 
                              
                           
                        where ɛ represents the value of error which has been observed for the response y.

The first step in RSM is estimating the functional relationship between response and other variables using a first-order model as follow [38]:
                           
                              
                                 
                                    y
                                    =
                                    
                                       α
                                       0
                                    
                                    +
                                    
                                       α
                                       1
                                    
                                    
                                       x
                                       1
                                    
                                    +
                                    
                                       α
                                       2
                                    
                                    
                                       x
                                       2
                                    
                                    +
                                    ⋯
                                    +
                                    
                                       α
                                       n
                                    
                                    
                                       x
                                       n
                                    
                                    +
                                    ε
                                 
                              
                           
                        
                     

While the curvature test is not significant, the response is improved by moving along the direction of maximum decrease (for the minimization problem). Then, the response surface is estimated by a second-order model as follow to find the optimum point [38].
                           
                              
                                 
                                    y
                                    =
                                    
                                       α
                                       0
                                    
                                    +
                                    
                                       ∑
                                       
                                          i
                                          =
                                          1
                                       
                                       n
                                    
                                    
                                       
                                          α
                                          i
                                       
                                       
                                          x
                                          i
                                       
                                    
                                    +
                                    
                                       ∑
                                       
                                          i
                                          =
                                          1
                                       
                                       n
                                    
                                    
                                       
                                          α
                                          
                                             i
                                             i
                                          
                                       
                                       
                                          x
                                          i
                                          2
                                       
                                    
                                    +
                                    
                                       ∑
                                       
                                          i
                                          <
                                          j
                                       
                                    
                                    
                                       ∑
                                       
                                          
                                             α
                                             
                                                i
                                                j
                                             
                                          
                                          
                                             x
                                             i
                                          
                                          
                                             x
                                             j
                                          
                                          +
                                          ε
                                       
                                    
                                 
                              
                           
                        
                     

The stepwise procedure for applying RSM is as follows:
                           
                              
                                 
                                 
                                 
                                 
                                    
                                       
                                          Step 1
                                       
                                       Determine independent parameters and their preliminary levels.
                                    
                                    
                                       
                                          Step 2
                                       
                                       Select the appropriate experimental design and predict the model equation as follows:
                                    
                                    
                                       
                                       2.1
                                       Run the proposed algorithm around center point and set a first-order model. If curvature test is significant, set a second-order model and go to Step 3.
                                    
                                    
                                       
                                       2.2
                                       Move sequentially along the direction of maximum decrease in response. When the response starts to get worse, stop and set the last point as center, go to (2.1).
                                    
                                    
                                       
                                          Step 3
                                       
                                       Determine the optimum point and check it.
                                    
                                 
                              
                           
                        
                     

In order to ensure the stability of experiments, the average value obtained over 10 runs of the algorithm as the response [15]. GA parameters including population size, crossover rate, mutation rate and number of generations are considered as independent variables. Based on the abovementioned procedure, RSM is applied on different problems to determine the optimum parameters of GA. Results are shown in Table 2
                        .

The computational experiments are conducted in two main parts. First, the effectiveness of the proposed algorithm and the validation of the proposed model are investigated. Then, the proposed approach is implemented on a real emergency department to evaluate its performance and applicability.

In order to evaluate the performance of the algorithm, 10 randomly generated problem instances with different sizes are solved using the proposed GA and results are compared to those obtained by branch and bound (B&B) method in LINGO 11.0 software. B&B is a general algorithm for finding optimal solutions of various optimization problems, and also a base for various heuristics, and hence be utilized for exactly solving problems, as possible. Table 3
                         represents the data related to test problems as well as the results obtained by B&B and the proposed algorithm. Solution gap is measured by the mean percentage difference from the solution obtained by B&B. In large-scaled problems (i.e. problems with more than 14 patients) the LINGO program has been interrupted after 10h (in order to reach to a fairly desirable upper bound solution for further comparison with the proposed GA), and the best solution has been reported. For these problem instances, the solution found by B&B provides an upper bound on the objective value.

As can be seen from Table 3, for the first eight test problems the solutions obtained by the proposed algorithm are close to those obtained by the B&B and for the problem instances 9 and 10 the proposed algorithm is remarkably better than B&B. Solution gaps are low and never exceed 3.21%. According to the run times, the proposed algorithm is capable of finding near-optimal solutions in a reasonable amount of time for the test problems.

In order to evaluate the performance of the proposed approach, it has been implemented on a real emergency department. The emergency department studied in this research uses five-level triage system to prioritize patients and the patients are then dispatched arbitrarily to relevant laboratories based on their triage factor determined by triage technicians and emergency doctors. Hence, in the current system, the priority of patients for doing a specific test is based on their triage factor and for patients with the same triage factors, the priority is based on their arrival time. In the emergency department studied in this research, there are six main groups of laboratories including radiology, magnetic resonance imaging (MRI), computed tomography (CT) scan, hematology, urinalysis and stool, and electrocardiography (ECG) in each of which some specific tests are done. Each laboratory has parallel places for doing tests, which means that there may be more than just one place or multiple staff for doing the same medical test at each laboratory. Data related to the emergency department laboratories are summarized in Table 4
                        .

According to the data recorded in the emergency department under study, the arrival time and the number of patients during 5 days are scrutinized and the exponential distribution function with the mean of 9min is best fitted to the arrival time of the patients and hence is used as the basis for patients’ entrance in simulation calculations. Based on the empirical data collected from the laboratory and using the actual triage factors in the emergency department recordings, the actual system is simulated in MATLAB, in which, patients are shifted arbitrarily from one laboratory to another to do their medical test, while in each laboratory, in line patients are prioritized based on their triage factor with no concern about minimizing the objective of the model presented earlier. In order to show the dominancy of the proposed approach, results obtained by the proposed approach are compared to the current actual system simulation. Total weighted completion time of patients in the actual system is calculated for 10 different days, using simulation. Table 5
                         shows the total weighted completion times of patients obtained by the actual system and the proposed approach.

As can be seen from Table 5, the proposed approach performs far better than the current actual system in terms of total weighted completion time of patients. Additionally, a paired t-test (H
                        0
                        :
                        μ
                        1
                        =
                        μ
                        2) is conducted to compare objective function values of the proposed approach and the actual system. The results of t-test are summarized in Table 6
                        . Results show the statistical superiority of the proposed approach to the actual system at significance level of 0.05.

In order to make sure that the utilized simulation properly reflects the actual system, Table 7
                         compares the weighted completion time of the simulation with the same data extracted from the emergency department recordings (as the actual recorded data in 10 test problem presented in Table 5 just contained the patients finish time, each patients triage factor is multiplied by its related completion time in order to better compare the simulation and actual operating system). According to the T-test presented in Table 8
                        , there is no specific difference between the two populations, which ensures that the simulation utilized well represents the actual system.

As discussed earlier, the proposed model along with the proposed solution method, can well address the real case scheduling problem of prioritized patients in such a way that their total waiting time be minimized considering their severity of health condition. This scheduling method reschedules the patients’ medical tests every time a new patient enters the emergency laboratories, in order to make sure a patient with higher severity condition is prioritized the most. Hence, for better applying the proposed scheduling model in real world emergency departments, the proposed scheduling method needs a reliable information system to well address the scheduling problem with desirable results. It also needs a sufficient amount of training for scheduling staff (e.g. triage nurses who take patients initial information and then determine their triage factor, and also staff who can properly enter the data when needed) in order to make sure the model and the proposed solution method operate properly.

@&#CONCLUSIONS@&#

In this research, a novel approach has been presented for scheduling patients at emergency department laboratories considering triage factor. The scheduling of patients has been modeled as a flexible open shop scheduling problem and a mixed integer linear programming model has been developed with the objective of minimizing the total weighted completion time of patients. The aim of the proposed approach is to grant higher priority to the most urgent patients (i.e. patients with higher triage factor) while achieving the most overall outcome of the resources by paying enough attention to other patients. A genetic algorithm (GA) has been proposed to solve the problem and its performance has been enhanced by optimizing the parameters using response surface methodology. In order to show the superiority of the proposed approach, it has been applied to a real emergency department. A comprehensive computer simulation of the application case has been implemented. Simulation experiments reveal that the proposed approach improves the performance of scheduling patients in the emergency department and makes efficient use of available resources.

@&#ACKNOWLEDGEMENTS@&#

The authors are grateful for the valuable comments and suggestion from the respected reviewers. Their valuable comments and suggestions have enhanced the strength and significance of our paper. This study was supported by a grant from University of Tehran (Grant No. 8106013/1/15). The authors are grateful for the support provided by the College of Engineering, University of Tehran, Iran.

@&#REFERENCES@&#

