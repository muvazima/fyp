@&#MAIN-TITLE@&#Dynamic sequencing and cut consolidation for the parallel hybrid-cut nested L-shaped method

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We present acceleration techniques for the nested L-shaped method.


                        
                        
                           
                           Cut consolidation reduces average solution time by 38% on 48 problems.


                        
                        
                           
                           Dynamic sequencing reduces average solution time by more than 12% on 42 problems.


                        
                        
                           
                           We present a parallelized, COIN-OR based implementation of the algorithm.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Stochastic programming

Nested L-shaped method

Sequencing protocols

Cut consolidation

@&#ABSTRACT@&#


               
               
                  The nested L-shaped method is used to solve two- and multi-stage linear stochastic programs with recourse, which can have integer variables on the first stage. In this paper we present and evaluate a cut consolidation technique and a dynamic sequencing protocol to accelerate the solution process. Furthermore, we present a parallelized implementation of the algorithm, which is developed within the COIN-OR framework. We show on a test set of 51 two-stage and 42 multi-stage problems, that both of the developed techniques lead to significant speed ups in computation time.
               
            

@&#INTRODUCTION@&#

Many real world applications can be modeled as a multi-stage stochastic program with recourse, e.g. in applications from supply chain planning, electricity and finance (cf. Wallace and Ziemba, 2005). An algorithm to solve two-stage stochastic linear programs with discrete and finite distributions is the L-shaped method developed by Van Slyke and Wets (1969) which is an adaption of Benders decomposition (cf. Benders, 1962) to two-stage recourse problems. It can be used in a nested application to solve multi-stage stochastic programs with recourse (cf. Birge, 1985). The algorithmic improvement of the L-shaped method is highly relevant and ongoing research. Recent achievements include a variant of the algorithm with aggregated cuts introduced by Trukhanov et al. (2010) and the generation of tighter feasibility cuts (see Aranburu et al., 2012). Zverovich et al. (2012) compare alternative variantes of the L-shaped method, namely, a regularized version based on work of Ruszczyński (1986) and the level decomposition method developed by Fábián and Szőke (2006). They find that regularized versions outperform non-reguralized versions on many of their test models.

In this paper we propose further algorithmic techniques that can improve the performance of the parallel nested L-shaped method and its variants. The nested L-shaped algorithm can decide at every stage other then the first or the last in which direction it should push information. Information is pushed up the tree by feasibility or optimality cuts to the ancestor problems. The solution to the current problem can be passed down the tree to form new right hand sides for the successor problems. The algorithm decides where to push the information according to a tree-traversing strategy, a so called sequencing protocol. Several studies showed that the sequencing protocol itself has an impact on the solution time (cf. Gassmann, 1990; Morton, 1996; Altenstedt, 2003). We propose a new dynamic sequencing protocol that leads to faster solution times compared with the well known sequencing protocols FastForwardFastBack and ∊-FastBack.

Depending on the level of cut aggregation, a certain number of cuts is added to the subproblems at every iteration of the algorithm. Especially for the multi-cut case (see Birge and Louveaux, 1988) this can become prohibitive in both memory usage and solution time. An approach to reduce the computational burden is the removal of previously added cuts. Ruszczyński and Shapiro (2003) showed, that there is no easy way to keep the number of cuts bounded. However, they also point out, that it is possible to delete inactive cuts, when the objective value of the master problem strictly increases. We suggest a cut removal strategy that not only removes inactive cuts, but retains an aggregated cut so that not all information contained in the removed cuts is lost. Our results show that the removal of old and inactive cuts can lead to shorter solution times on many problems. Furthermore, we investigate the extension of the cut aggregation technique recently employed by Trukhanov et al. (2010) for the two-stage case to the multi-stage case. We evaluate the mentioned techniques using our own parallel implementation of the nested L-shaped method that is partly based upon and embedded into the COIN-OR project (see Lougee-Heimer, 2003).

The remainder of the paper is organized as follows. Section 2 describes a basic variant of the nested L-shaped method. Our new sequencing protocol and cut consolidation techniques are presented in Section 3. The parallel implementation is explained in Section 4. In Section 5 we evaluate the presented techniques and implementation based on a computational study. We conclude with a brief summary of our main results and an outlook on future research opportunities in Section 6.

This paper is focussed on two- and multi-stage stochastic programs with recourse and discrete and finite distributions. For a general introduction to stochastic programming see Birge and Louveaux (2011) and Shapiro et al. (2009) and for an overview of applications and implemented solution algorithms see Wallace and Ziemba (2005) and Kall and Mayer (2010), respectively. In order to fix our notation and as an introduction for the non-expert we start with describing a basic version of the nested Benders decomposition algorithm.

Every multi-stage stochastic program with recourse with discrete and finite distributions is represented by a scenario tree with a certain number of stages T. A tree node is denoted by its stage t,
                     t
                     ∈{0, …, T
                     −1} and an index i,
                     i
                     ∈{0, …, K
                     
                        t
                     
                     −1} with K
                     
                        t
                      denoting the number of nodes at stage t. The parent node is denoted with a(i, t) whereas the set of children of a node are denoted with d(i, t). Every node (t, i) has an overall probability 
                        
                           
                              
                                 p
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                        
                     . The probabilities must be chosen such that 
                        
                           
                              
                                 ∑
                              
                              
                                 i
                                 =
                                 0
                              
                              
                                 
                                    
                                       K
                                    
                                    
                                       t
                                    
                                 
                                 -
                                 1
                              
                           
                           
                              
                                 p
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                           =
                           1
                        
                      holds for every stage t.

We can formulate the multi-stage stochastic program with recourse with discrete and finite distributions as follows:
                        
                           (1)
                           
                              
                                 min
                              
                              
                              
                                 
                                    c
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              +
                              
                                 
                                    Q
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             t
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                              :
                              
                                 
                                    W
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              =
                              
                                 
                                    h
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              -
                              
                                 
                                    T
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    t
                                    -
                                    1
                                 
                                 
                                    a
                                    (
                                    i
                                    ,
                                    t
                                    )
                                 
                              
                              =
                              
                                 min
                              
                              
                              
                                 
                                    c
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              +
                              
                                 
                                    θ
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              :
                              
                                 
                                    W
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              =
                              
                                 
                                    h
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              -
                              
                                 
                                    T
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    t
                                    -
                                    1
                                 
                                 
                                    a
                                    (
                                    i
                                    ,
                                    t
                                    )
                                 
                              
                              ,
                              
                              
                                 
                                    θ
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              ⩾
                              
                                 
                                    Q
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              (
                              
                                 
                                    x
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              )
                              
                              
                                 
                                    l
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              ⩽
                              
                                 
                                    x
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              ⩽
                              
                                 
                                    u
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              ,
                           
                        
                     where
                        
                           (2)
                           
                              
                                 
                                    
                                       
                                          
                                             Q
                                          
                                          
                                             t
                                          
                                          
                                             i
                                          
                                       
                                       (
                                       
                                          
                                             x
                                          
                                          
                                             t
                                          
                                          
                                             i
                                          
                                       
                                       )
                                       ≔
                                    
                                    
                                       
                                          min
                                       
                                       
                                    
                                    
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                ∈
                                                d
                                                (
                                                i
                                                ,
                                                t
                                                )
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            t
                                                            +
                                                            1
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            t
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                      c
                                                   
                                                   
                                                      t
                                                      +
                                                      1
                                                   
                                                   
                                                      j
                                                   
                                                
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      t
                                                      +
                                                      1
                                                   
                                                   
                                                      j
                                                   
                                                
                                                +
                                                
                                                   
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            t
                                                            +
                                                            1
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            p
                                                         
                                                         
                                                            t
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                      Q
                                                   
                                                   
                                                      t
                                                      +
                                                      1
                                                   
                                                   
                                                      j
                                                   
                                                
                                                (
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      t
                                                      +
                                                      1
                                                   
                                                   
                                                      j
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                       s
                                       .
                                       t
                                       .
                                       
                                    
                                    
                                       
                                          
                                             W
                                          
                                          
                                             t
                                             +
                                             1
                                          
                                          
                                             j
                                          
                                       
                                       
                                          
                                             x
                                          
                                          
                                             t
                                             +
                                             1
                                          
                                          
                                             j
                                          
                                       
                                       =
                                       
                                          
                                             h
                                          
                                          
                                             t
                                             +
                                             1
                                          
                                          
                                             j
                                          
                                       
                                       -
                                       
                                          
                                             T
                                          
                                          
                                             t
                                             +
                                             1
                                          
                                          
                                             j
                                          
                                       
                                       
                                          
                                             x
                                          
                                          
                                             t
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                       j
                                       ∈
                                       d
                                       (
                                       i
                                       ,
                                       t
                                       )
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             l
                                          
                                          
                                             t
                                             +
                                             1
                                          
                                          
                                             j
                                          
                                       
                                       ⩽
                                       
                                          
                                             x
                                          
                                          
                                             t
                                             +
                                             1
                                          
                                          
                                             j
                                          
                                       
                                       ⩽
                                       
                                          
                                             u
                                          
                                          
                                             t
                                             +
                                             1
                                          
                                          
                                             j
                                          
                                       
                                       ,
                                       
                                       j
                                       ∈
                                       d
                                       (
                                       i
                                       ,
                                       t
                                       )
                                    
                                 
                              
                           
                        
                     and 
                        
                           
                              
                                 Q
                              
                              
                                 T
                                 -
                                 1
                              
                              
                                 i
                              
                           
                           (
                           ·
                           )
                           =
                           0
                           ,
                           
                           ∀
                           i
                           ∈
                           {
                           0
                           ,
                           …
                           ,
                           
                              
                                 K
                              
                              
                                 T
                                 -
                                 1
                              
                           
                           -
                           1
                           }
                        
                     , for t
                     =0 and i
                     =0 (for t
                     =0, we drop 
                        
                           
                              
                                 T
                              
                              
                                 0
                              
                              
                                 i
                              
                           
                           
                              
                                 x
                              
                              
                                 -
                                 1
                              
                              
                                 a
                                 (
                                 i
                                 ,
                                 0
                                 )
                              
                           
                        
                      from the constraints as there is no prior solution to the first stage). This is a recursive, node-based formulation, where the subscript t denotes the stage and the superscript i denotes the ith node of the scenario tree at stage t. 
                        
                           
                              
                                 x
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                           ∈
                           
                              
                                 R
                              
                              
                                 
                                    
                                       n
                                    
                                    
                                       t
                                    
                                 
                              
                           
                        
                      is the vector of decision variables, 
                        
                           
                              
                                 c
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                           ∈
                           
                              
                                 R
                              
                              
                                 
                                    
                                       n
                                    
                                    
                                       t
                                    
                                 
                              
                           
                        
                      is the cost vector and 
                        
                           
                              
                                 h
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                           ∈
                           
                              
                                 R
                              
                              
                                 
                                    
                                       m
                                    
                                    
                                       t
                                    
                                 
                              
                           
                        
                      is the right-hand side vector, all for nodes i
                     ∈{0, …, K
                     
                        t
                     
                     −1} at stage t. The technology matrices 
                        
                           
                              
                                 T
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                           ∈
                           
                              
                                 R
                              
                              
                                 
                                    
                                       m
                                    
                                    
                                       t
                                    
                                 
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       t
                                       -
                                       1
                                    
                                 
                              
                           
                        
                      of stage t belong to the decision variables of stage t
                     −1, whereas the recourse matrices 
                        
                           
                              
                                 W
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                           ∈
                           
                              
                                 R
                              
                              
                                 
                                    
                                       m
                                    
                                    
                                       t
                                    
                                 
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       t
                                    
                                 
                              
                           
                        
                      belong to the decision variables of the same stage.

The nested Benders decomposition algorithm (see Dempster and Thompson, 1998; Birge and Louveaux, 2011; Gassmann, 1990; Ruszczyński and Shapiro, 2003 for further descriptions) constructs an outer linear approximation 
                        
                           
                              
                                 θ
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                        
                      of the recourse function 
                        
                           
                              
                                 Q
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                           (
                           ·
                           )
                        
                      in consecutive iterations via cutting planes at every node of the scenario tree. To obtain a LP formulation of this approach the restriction 
                        
                           
                              
                                 θ
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                           ⩾
                           
                              
                                 Q
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                           (
                           
                              
                                 x
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                           )
                        
                      is removed from the problem (1) and the approximation term 
                        
                           
                              
                                 θ
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                        
                      is added instead of 
                        
                           
                              
                                 Q
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                           (
                           ·
                           )
                        
                      to the objective function. Subproblems at stage t do no longer rely explicitly on all later stage problems. The cutting planes that bound the approximation variables are optimality cuts. Feasibility cuts restrict the solution set to solutions that are feasible for all subproblems.

The subproblem formulation (1) is hence transformed to the following approximation subproblem:
                        
                           (3)
                           
                              
                                 min
                              
                              
                              
                                 
                                    c
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              +
                              
                                 
                                    θ
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              :
                              
                                 
                                    W
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              =
                              
                                 
                                    h
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              -
                              
                                 
                                    T
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    t
                                    -
                                    1
                                 
                                 
                                    a
                                    (
                                    i
                                    ,
                                    t
                                    )
                                 
                              
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    D
                                 
                                 
                                    t
                                    ,
                                    r
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              ⩾
                              
                                 
                                    d
                                 
                                 
                                    t
                                    ,
                                    r
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                              r
                              ∈
                              {
                              1
                              ,
                              …
                              ,
                              it
                              }
                              ⧹
                              
                                 
                                    F
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              (
                              it
                              )
                           
                        
                     
                     
                        
                           (5)
                           
                              
                                 
                                    E
                                 
                                 
                                    t
                                    ,
                                    s
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              +
                              
                                 
                                    θ
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              ⩾
                              
                                 
                                    e
                                 
                                 
                                    t
                                    ,
                                    s
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                              s
                              ∈
                              
                                 
                                    F
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              (
                              it
                              )
                           
                        
                     
                     
                        
                           (6)
                           
                              
                                 
                                    l
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              ⩽
                              
                                 
                                    x
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              ⩽
                              
                                 
                                    u
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              ,
                           
                        
                     where (5) are the optimality and (4) are the feasibility cuts. 
                        
                           
                              
                                 F
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                           (
                           it
                           )
                        
                      contains all iterations where optimality cuts were added to the current problem, up to the current iteration it.

The single linear approximation 
                        
                           
                              
                                 θ
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                        
                      of the recourse function can be split into up to 
                        
                           
                              
                                 A
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                        
                      approximation terms 
                        
                           
                              
                                 θ
                              
                              
                                 t
                                 ,
                                 k
                              
                              
                                 i
                              
                           
                        
                     , so called aggregates, that form a partition of the descendant node set d(i, t):
                        
                           
                              
                                 
                                    
                                       ⋃
                                    
                                    
                                       k
                                       =
                                       1
                                    
                                    
                                       
                                          
                                             A
                                          
                                          
                                             t
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    S
                                 
                                 
                                    t
                                    ,
                                    k
                                 
                                 
                                    i
                                 
                              
                              =
                              d
                              (
                              i
                              ,
                              t
                              )
                              ,
                              
                              
                                 
                                    S
                                 
                                 
                                    t
                                    ,
                                    k
                                 
                                 
                                    i
                                 
                              
                              ∩
                              
                                 
                                    S
                                 
                                 
                                    t
                                    ,
                                    l
                                 
                                 
                                    i
                                 
                              
                              =
                              ∅
                              ,
                              
                              ∀
                              l
                              
                              ≠
                              
                              k
                           
                        
                     Each partition 
                        
                           
                              
                                 S
                              
                              
                                 t
                                 ,
                                 k
                              
                              
                                 i
                              
                           
                        
                      contains distinct nodes from the descendant node set. The multi-cut method (cf. Birge and Louveaux, 1988) is a special case, where the number of partitions is equal to the number of descendant nodes. In this case each partition consists of exactly one descendant node. If only one partition is used, we have the single-cut method. This notation can thus be used to refer to the hybrid method introduced by Trukhanov et al. (2010) as well as the single and multi-cut methods which are just two special cases of the hybrid method.

The dual formulation of problem (3) is needed to generate the optimality and feasibility cuts. Its formulation is
                        
                           (7)
                           
                              
                                 max
                              
                              
                              
                                 
                                    
                                       
                                          
                                             h
                                          
                                          
                                             t
                                          
                                          
                                             i
                                          
                                       
                                       -
                                       
                                          
                                             T
                                          
                                          
                                             t
                                          
                                          
                                             i
                                          
                                       
                                       
                                          
                                             x
                                          
                                          
                                             t
                                             -
                                             1
                                          
                                          
                                             a
                                             (
                                             i
                                             ,
                                             t
                                             )
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    π
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              +
                              
                                 
                                    d
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    ρ
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              +
                              
                                 
                                    e
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    σ
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              +
                              
                                 
                                    l
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    λ
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              +
                              
                                 
                                    u
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    μ
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                           
                        
                     
                     
                        
                           (8)
                           
                              
                                 
                                    
                                       
                                          
                                             
                                                W
                                             
                                             
                                                t
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    T
                                 
                              
                              
                                 
                                    π
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              +
                              
                                 
                                    
                                       
                                          
                                             
                                                D
                                             
                                             
                                                t
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    T
                                 
                              
                              
                                 
                                    ρ
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              +
                              
                                 
                                    
                                       
                                          
                                             
                                                E
                                             
                                             
                                                t
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    T
                                 
                              
                              
                                 
                                    σ
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              +
                              
                                 
                                    λ
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              +
                              
                                 
                                    μ
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              =
                              
                                 
                                    c
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                           
                        
                     
                     
                        
                           (9)
                           
                              (
                              1
                              
                                 
                                    )
                                 
                                 
                                    T
                                 
                              
                              
                                 
                                    σ
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              =
                              1
                           
                        
                     
                     
                        
                           (10)
                           
                              
                                 
                                    ρ
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              ⩾
                              0
                              ,
                              
                              
                                 
                                    σ
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              ⩾
                              0
                              ,
                              
                              
                                 
                                    λ
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              ⩾
                              0
                              ,
                              
                              
                                 
                                    μ
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              ⩽
                              0
                              ,
                           
                        
                     where 
                        
                           
                              
                                 D
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                        
                      is the matrix that consists of the column vectors 
                        
                           
                              
                                 D
                              
                              
                                 t
                                 ,
                                 r
                              
                              
                                 i
                              
                           
                        
                      and 
                        
                           
                              
                                 E
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                        
                      is the matrix that consists of the column vector 
                        
                           
                              
                                 E
                              
                              
                                 t
                                 ,
                                 s
                              
                              
                                 i
                              
                           
                        
                      for all appropriate r and s. In case a problem has no feasibility or optimality cuts, no dual variables 
                        
                           
                              
                                 ρ
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                        
                      or 
                        
                           
                              
                                 σ
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                        
                      are present in the dual problem. Constraint (9) is the corresponding dual constraint of the 
                        
                           
                              
                                 θ
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                        
                      variable, where 1 denotes a vector of appropriately many ones.

If a subproblem is solved to optimality, it has a primal and dual optimal solution. With dual feasible solutions 
                        
                           
                              
                                 
                                    
                                       
                                          π
                                       
                                       
                                          t
                                          +
                                          1
                                       
                                       
                                          j
                                       
                                    
                                    ,
                                    
                                       
                                          ρ
                                       
                                       
                                          t
                                          +
                                          1
                                       
                                       
                                          j
                                       
                                    
                                    ,
                                    
                                       
                                          σ
                                       
                                       
                                          t
                                          +
                                          1
                                       
                                       
                                          j
                                       
                                    
                                    ,
                                    
                                       
                                          λ
                                       
                                       
                                          t
                                          +
                                          1
                                       
                                       
                                          j
                                       
                                    
                                    ,
                                    
                                       
                                          μ
                                       
                                       
                                          t
                                          +
                                          1
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                           
                        
                      to all the descendants problems of the current node, j
                     ∈
                     d(i, t), we can compute an optimality cut 
                        
                           
                              
                                 E
                              
                              
                                 t
                                 ,
                                 k
                                 ,
                                 s
                              
                              
                                 i
                              
                           
                           
                              
                                 x
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                           +
                           
                              
                                 θ
                              
                              
                                 t
                                 ,
                                 k
                              
                              
                                 i
                              
                           
                           ⩾
                           
                              
                                 e
                              
                              
                                 t
                                 ,
                                 k
                                 ,
                                 it
                              
                              
                                 i
                              
                           
                        
                      where
                        
                           (11)
                           
                              
                                 
                                    E
                                 
                                 
                                    t
                                    ,
                                    k
                                    ,
                                    s
                                 
                                 
                                    i
                                 
                              
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       ∈
                                       
                                          
                                             S
                                          
                                          
                                             t
                                             ,
                                             k
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    
                                       
                                          p
                                       
                                       
                                          t
                                          +
                                          1
                                       
                                       
                                          j
                                       
                                    
                                 
                                 
                                    
                                       
                                          p
                                       
                                       
                                          t
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              
                                 
                                    
                                       
                                          
                                             
                                                π
                                             
                                             
                                                t
                                                +
                                                1
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                 
                                 
                                    T
                                 
                              
                              
                                 
                                    T
                                 
                                 
                                    t
                                    +
                                    1
                                 
                                 
                                    j
                                 
                              
                           
                        
                     
                     
                        
                           (12)
                           
                              
                                 
                                    e
                                 
                                 
                                    t
                                    ,
                                    k
                                    ,
                                    s
                                 
                                 
                                    i
                                 
                              
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       j
                                       ∈
                                       
                                          
                                             S
                                          
                                          
                                             t
                                             ,
                                             k
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    
                                       
                                          p
                                       
                                       
                                          t
                                          +
                                          1
                                       
                                       
                                          j
                                       
                                    
                                 
                                 
                                    
                                       
                                          p
                                       
                                       
                                          t
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         π
                                                      
                                                      
                                                         t
                                                         +
                                                         1
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             T
                                          
                                       
                                       
                                          
                                             h
                                          
                                          
                                             t
                                             +
                                             1
                                          
                                          
                                             j
                                          
                                       
                                       +
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         ρ
                                                      
                                                      
                                                         t
                                                         +
                                                         1
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             T
                                          
                                       
                                       
                                          
                                             d
                                          
                                          
                                             t
                                             +
                                             1
                                          
                                          
                                             j
                                          
                                       
                                       +
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         σ
                                                      
                                                      
                                                         t
                                                         +
                                                         1
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             T
                                          
                                       
                                       
                                          
                                             e
                                          
                                          
                                             t
                                             +
                                             1
                                          
                                          
                                             j
                                          
                                       
                                       +
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         λ
                                                      
                                                      
                                                         t
                                                         +
                                                         1
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             T
                                          
                                       
                                       
                                          
                                             l
                                          
                                          
                                             t
                                             +
                                             1
                                          
                                          
                                             j
                                          
                                       
                                       +
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         μ
                                                      
                                                      
                                                         t
                                                         +
                                                         1
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             T
                                          
                                       
                                       
                                          
                                             u
                                          
                                          
                                             t
                                             +
                                             1
                                          
                                          
                                             j
                                          
                                       
                                    
                                 
                              
                              ,
                           
                        
                     and 
                        
                           
                              
                                 d
                              
                              
                                 t
                                 +
                                 1
                              
                              
                                 j
                              
                           
                        
                      denotes the vector of all feasibility cut right-hand-side values and 
                        
                           
                              
                                 e
                              
                              
                                 t
                                 +
                                 1
                              
                              
                                 j
                              
                           
                        
                      the vector of all optimality cut right-hand-side values, respectively, for problem j at stage t
                     +1. The dual values 
                        
                           
                              
                                 π
                              
                              
                                 t
                                 +
                                 1
                              
                              
                                 j
                              
                           
                        
                      correspond to the original rows of the problem, 
                        
                           
                              
                                 ρ
                              
                              
                                 t
                                 +
                                 1
                              
                              
                                 j
                              
                           
                        
                      to the feasibility cuts and 
                        
                           
                              
                                 σ
                              
                              
                                 t
                                 +
                                 1
                              
                              
                                 j
                              
                           
                        
                      to the optimality cuts. 
                        
                           
                              
                                 λ
                              
                              
                                 t
                                 +
                                 1
                              
                              
                                 j
                              
                           
                        
                      corresponds to the lower bounds of the variables and 
                        
                           
                              
                                 μ
                              
                              
                                 t
                                 +
                                 1
                              
                              
                                 j
                              
                           
                        
                      to the upper bounds of the variables. If a subproblem is infeasible, and the dual is unbounded, a dual ray 
                        
                           
                              
                                 
                                    
                                       
                                          π
                                       
                                       
                                          t
                                          +
                                          1
                                       
                                       
                                          j
                                       
                                    
                                    ,
                                    
                                       
                                          ρ
                                       
                                       
                                          t
                                          +
                                          1
                                       
                                       
                                          j
                                       
                                    
                                    ,
                                    
                                       
                                          σ
                                       
                                       
                                          t
                                          +
                                          1
                                       
                                       
                                          j
                                       
                                    
                                    ,
                                    
                                       
                                          λ
                                       
                                       
                                          t
                                          +
                                          1
                                       
                                       
                                          j
                                       
                                    
                                    ,
                                    
                                       
                                          μ
                                       
                                       
                                          t
                                          +
                                          1
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                           
                        
                      exists for the problem j
                     ∈
                     d(i, t). Using this ray we can then compute a feasibility cut 
                        
                           
                              
                                 D
                              
                              
                                 t
                                 ,
                                 r
                              
                              
                                 i
                              
                           
                           
                              
                                 x
                              
                              
                                 t
                              
                              
                                 i
                              
                           
                           ⩾
                           
                              
                                 d
                              
                              
                                 t
                                 ,
                                 r
                              
                              
                                 i
                              
                           
                        
                     , where
                        
                           (13)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             
                                                D
                                             
                                             
                                                t
                                                ,
                                                r
                                             
                                             
                                                i
                                             
                                          
                                          =
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            π
                                                         
                                                         
                                                            t
                                                            +
                                                            1
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                T
                                             
                                          
                                          
                                             
                                                T
                                             
                                             
                                                t
                                                +
                                                1
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             
                                                d
                                             
                                             
                                                t
                                                ,
                                                r
                                             
                                             
                                                i
                                             
                                          
                                          =
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            π
                                                         
                                                         
                                                            t
                                                            +
                                                            1
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                T
                                             
                                          
                                          
                                             
                                                h
                                             
                                             
                                                t
                                                +
                                                1
                                             
                                             
                                                j
                                             
                                          
                                          +
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            ρ
                                                         
                                                         
                                                            t
                                                            +
                                                            1
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                T
                                             
                                          
                                          
                                             
                                                d
                                             
                                             
                                                t
                                                +
                                                1
                                             
                                             
                                                j
                                             
                                          
                                          +
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            λ
                                                         
                                                         
                                                            t
                                                            +
                                                            1
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                T
                                             
                                          
                                          
                                             
                                                l
                                             
                                             
                                                t
                                                +
                                                1
                                             
                                             
                                                j
                                             
                                          
                                          +
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            μ
                                                         
                                                         
                                                            t
                                                            +
                                                            1
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                T
                                             
                                          
                                          
                                             
                                                u
                                             
                                             
                                                t
                                                +
                                                1
                                             
                                             
                                                j
                                             
                                          
                                          ,
                                       
                                    
                                 
                              
                           
                        
                     and 
                        
                           
                              
                                 D
                              
                              
                                 t
                                 +
                                 1
                              
                              
                                 j
                              
                           
                        
                      and 
                        
                           
                              
                                 d
                              
                              
                                 t
                                 +
                                 1
                              
                              
                                 j
                              
                           
                        
                      defined as above. If the primal subproblem is unbounded, the overall problem is unbounded.

With these definitions we can now formulate the subproblem with cut aggregation P(i, t) for node i at stage t. It can be expressed as
                        
                           (14)
                           
                              
                                 min
                              
                              
                              
                                 
                                    c
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              +
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       k
                                       =
                                       0
                                    
                                    
                                       
                                          
                                             A
                                          
                                          
                                             t
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    θ
                                 
                                 
                                    t
                                    ,
                                    k
                                 
                                 
                                    i
                                 
                              
                              :
                              
                                 
                                    W
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              =
                              
                                 
                                    h
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              -
                              
                                 
                                    T
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    t
                                    -
                                    1
                                 
                                 
                                    a
                                    (
                                    i
                                    ,
                                    t
                                    )
                                 
                              
                           
                        
                     
                     
                        
                           (15)
                           
                              
                                 
                                    D
                                 
                                 
                                    t
                                    ,
                                    r
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              ⩾
                              
                                 
                                    d
                                 
                                 
                                    t
                                    ,
                                    r
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                              r
                              ∈
                              {
                              1
                              ,
                              …
                              ,
                              it
                              }
                              ⧹
                              
                                 
                                    F
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              (
                              it
                              )
                           
                        
                     
                     
                        
                           (16)
                           
                              
                                 
                                    E
                                 
                                 
                                    t
                                    ,
                                    k
                                    ,
                                    s
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              +
                              
                                 
                                    θ
                                 
                                 
                                    t
                                    ,
                                    k
                                 
                                 
                                    i
                                 
                              
                              ⩾
                              
                                 
                                    e
                                 
                                 
                                    t
                                    ,
                                    k
                                    ,
                                    s
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                              s
                              ∈
                              
                                 
                                    F
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              (
                              it
                              )
                              ,
                              
                              k
                              =
                              1
                              ,
                              …
                              ,
                              
                                 
                                    A
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                           
                        
                     
                     
                        
                           (17)
                           
                              
                                 
                                    l
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              ⩽
                              
                                 
                                    x
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              ⩽
                              
                                 
                                    u
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              .
                           
                        
                     If more than one descendant problem is infeasible at a given iteration, it is in principle possible to generate more than one feasibility cut, e.g. one cut for every infeasible node. We formally state the general nested L-shaped method as follow:
                        
                           1.
                           Set t
                              =0, i
                              =0, it
                              =0, lb
                              =−∞, ub
                              =∞, dir
                              =
                              forward. Initialize all θ variables with a coefficient of 0 in the corresponding objective function.

If ∣ub
                              −
                              lb∣<
                              ∊
                              
                                 gap
                               or ∣ub
                              −
                              lb∣/ (∣lb∣+1e
                              −10)<
                              ∊
                              
                                 gap
                              , stop.

Solve problem P(i, t).
                                 
                                    •
                                    If infeasible and t
                                       =0 stop, problem is infeasible.

If infeasible and t
                                       >0 store the dual ray 
                                          
                                             
                                                
                                                   π
                                                
                                                
                                                   t
                                                
                                                
                                                   i
                                                
                                             
                                             ,
                                             
                                             
                                                
                                                   ρ
                                                
                                                
                                                   t
                                                
                                                
                                                   i
                                                
                                             
                                             ,
                                             
                                             
                                                
                                                   σ
                                                
                                                
                                                   t
                                                
                                                
                                                   i
                                                
                                             
                                             ,
                                             
                                             
                                                
                                                   λ
                                                
                                                
                                                   t
                                                
                                                
                                                   i
                                                
                                             
                                             ,
                                             
                                             
                                                
                                                   μ
                                                
                                                
                                                   t
                                                
                                                
                                                   i
                                                
                                             
                                          
                                        and compute a feasibility cut (15) for problem P(a(i, t), t
                                       −1). Set dir
                                       =
                                       backward and go to step 7.

If feasible and t
                                       =0 set lb to the objective value of P(i, t).

If feasible and t
                                       <
                                       T
                                       −1, store the dual values 
                                          
                                             
                                                
                                                   π
                                                
                                                
                                                   t
                                                
                                                
                                                   i
                                                
                                             
                                             ,
                                             
                                             
                                                
                                                   ρ
                                                
                                                
                                                   t
                                                
                                                
                                                   i
                                                
                                             
                                             ,
                                             
                                             
                                                
                                                   σ
                                                
                                                
                                                   t
                                                
                                                
                                                   i
                                                
                                             
                                             ,
                                             
                                             
                                                
                                                   λ
                                                
                                                
                                                   t
                                                
                                                
                                                   i
                                                
                                             
                                             ,
                                             
                                             
                                                
                                                   μ
                                                
                                                
                                                   t
                                                
                                                
                                                   i
                                                
                                             
                                          
                                        and the primal values 
                                          
                                             
                                                
                                                   x
                                                
                                                
                                                   t
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       . If i
                                       <
                                       K
                                       
                                          t
                                       
                                       −1, set i
                                       =
                                       i
                                       +1 and go to step 3. If i
                                       =
                                       K
                                       
                                          t
                                       
                                       −1 set i
                                       =0.

Call sequencing protocol to decide the direction.

For all nodes j
                              ∈
                              d(i, t) and for all partitions 
                                 
                                    k
                                    =
                                    0
                                    ,
                                    …
                                    ,
                                    
                                       
                                          A
                                       
                                       
                                          t
                                          ,
                                          it
                                       
                                       
                                          j
                                       
                                    
                                 
                              
                              
                                 
                                    •
                                    Compute optimality cut coefficients 
                                          
                                             
                                                
                                                   E
                                                
                                                
                                                   t
                                                   -
                                                   1
                                                   ,
                                                   k
                                                   ,
                                                   it
                                                
                                                
                                                   j
                                                
                                             
                                          
                                        
                                       (11) and right hand side values 
                                          
                                             
                                                
                                                   e
                                                
                                                
                                                   t
                                                   -
                                                   1
                                                   ,
                                                   k
                                                   ,
                                                   it
                                                
                                                
                                                   j
                                                
                                             
                                          
                                        
                                       (12) to form an optimality cut (16) for aggregate k and problem P(t
                                       −1, j).

Test if generated cut should be added to the problem. If this is the first optimality cut for this aggregate, set the corresponding objective coefficient to 1.

If i
                                       <
                                       K
                                       
                                          t
                                       
                                       −1, set i
                                       =
                                       i
                                       +1 and go to step 5, else set i
                                       =0.

If t
                              =
                              T
                              −1, compute temporary upper bound temp
                              
                                 ub
                               by summing up 
                                 
                                    
                                       
                                          p
                                       
                                       
                                          
                                             
                                                t
                                             
                                             
                                                ′
                                             
                                          
                                       
                                       
                                          
                                             
                                                i
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                    
                                       
                                          c
                                       
                                       
                                          
                                             
                                                t
                                             
                                             
                                                ′
                                             
                                          
                                       
                                       
                                          
                                             
                                                i
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          
                                             
                                                t
                                             
                                             
                                                ′
                                             
                                          
                                       
                                       
                                          
                                             
                                                i
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                 
                               for 
                                 
                                    
                                       
                                          t
                                       
                                       
                                          ′
                                       
                                    
                                    =
                                    0
                                    ,
                                    …
                                    ,
                                    T
                                    -
                                    1
                                    ,
                                    
                                    
                                       
                                          i
                                       
                                       
                                          ′
                                       
                                    
                                    =
                                    0
                                    ,
                                    …
                                    ,
                                    
                                       
                                          K
                                       
                                       
                                          
                                             
                                                t
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                 
                              . If temp
                              
                                 ub
                              
                              <
                              ub, set ub
                              =
                              temp
                              
                                 ub
                              .

If dir
                              =
                              forward, set t
                              =
                              t
                              +1, else set t
                              =
                              t
                              −1. Go to step 2.

After all problems of a certain stage have been solved, a decision has to be made whether to move back up the tree and thereby give information in the form of optimality or feasibility cuts to the previous stage or to proceed to the next stage with the new solution from the current stage as input which modifies the right-hand-side of the problems at that stage. Sequencing protocols formulate rules for how this decision is made. Sequencing protocols are only needed for multi-stage problems, as there is no choice in which direction to go for the two-stage case.

At the first stage of a multi-stage problem it is only possible to move to the next stage and pass the current solution down the tree. At the last stage it is only possible to solve all the subproblems and generate optimality and/or feasibility cuts for the previous stage. When a subproblem was found to be infeasible at a stage, the algorithm moves back towards the first stage, i.e. the direction is backward. Three common strategies were developed by Gassmann (1990). The first strategy is the Fast-Forward–Fast-Back (FFFB) or Fastpass strategy that goes down the whole tree and back up to the root from there. This is called a full sweep, consisting of a full forward and backward sweep. A forward sweep solves all subproblems from stage 0 to stage T
                        −1. A backward sweep consists of adding cuts to all subproblems at stages T
                        −2 to 0, by solving problems from stage T
                        −2 up to stage 1. This is repeated until the algorithm finishes, i.e. the gap between upper and lower bound is small enough.

The Fast-Forward (FF) strategy tries to move forward or down the tree whenever possible. It only goes up the tree when the current stage is solved to optimality with respect to the current primal information, i.e. the gap between the lower and upper bound at the current stage is less than a small tolerance ∊
                        
                           gap
                        . The Fast-Back (FB) strategy does the opposite, it tries to move back up the tree whenever possible. It only moves down a further stage, if no new optimality cuts can be generated at the current stage or the gap is below an ∊
                        
                           gap
                        . It requires an initialization period because it needs an initial approximation of the recourse function at every stage.

An evaluation conducted by Gassmann (1990) showed that out of the three strategies, the FFFB strategy is the best. Morton (1996) comes to the same conclusion, introducing an ∊-Fast-Back strategy that reached comparable performance. He used the notions of absolute error and discrepancy for a node, which we will define for a stage by summing up the probability weighted node-wise values. In the ∊-Fast-Forward strategy, the algorithm goes back up the tree, when the absolute error is smaller than ∊
                        ·min (∣LB∣, ∣UB∣). The ∊-Fast-Back strategy goes further down the tree, when the discrepancy is smaller than ∊
                        ·min (∣LB∣, ∣UB∣) instead of a fixed ∊
                        
                           gap
                        . The discrepancy for stage t is defined as
                           
                              (18)
                              
                                 Disc
                                 (
                                 t
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          0
                                       
                                       
                                          
                                             
                                                K
                                             
                                             
                                                t
                                             
                                          
                                          -
                                          1
                                       
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       t
                                    
                                    
                                       i
                                    
                                 
                                 ·
                                 
                                    
                                       
                                          
                                             
                                                c
                                             
                                             
                                                t
                                             
                                             
                                                i
                                             
                                          
                                          
                                             
                                                x
                                             
                                             
                                                t
                                             
                                             
                                                i
                                             
                                          
                                          +
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   l
                                                   =
                                                   1
                                                
                                                
                                                   
                                                      
                                                         A
                                                      
                                                      
                                                         t
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                θ
                                             
                                             
                                                t
                                                ,
                                                l
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 -
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          0
                                       
                                       
                                          
                                             
                                                K
                                             
                                             
                                                t
                                                -
                                                1
                                             
                                          
                                          -
                                          1
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          l
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                A
                                             
                                             
                                                t
                                                -
                                                1
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       t
                                       -
                                       1
                                    
                                    
                                       j
                                    
                                 
                                 
                                    
                                       θ
                                    
                                    
                                       t
                                       -
                                       1
                                       ,
                                       l
                                    
                                    
                                       j
                                    
                                 
                                 ,
                              
                           
                        which is the difference between the probability weighted sum of the objective function values for stage t and the probability weighted sum of the approximations of the recourse functions at stage t
                        +1. The absolute error for stage t is defined as
                           
                              (19)
                              
                                 AbsErr
                                 (
                                 t
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          t
                                          +
                                          1
                                       
                                       
                                          T
                                          -
                                          1
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          0
                                       
                                       
                                          
                                             
                                                K
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       j
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       j
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       j
                                    
                                    
                                       i
                                    
                                 
                                 -
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          0
                                       
                                       
                                          
                                             
                                                K
                                             
                                             
                                                t
                                             
                                          
                                          -
                                          1
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          l
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                A
                                             
                                             
                                                t
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       p
                                    
                                    
                                       t
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       θ
                                    
                                    
                                       t
                                       ,
                                       l
                                    
                                    
                                       i
                                    
                                 
                                 ,
                              
                           
                        which is the difference between the probability weighted sum of objective functions of all stages after stage t and the probability weighted sum of the approximations of the recourse functions at stage t. To be able to compute the absolute error for stage t, it has to be solved for all stages t′>
                        t. Hence, it is only possible to compute the absolute error after a full forward sweep or during a backward sweep, whereas the discrepancy can also be computed during a forward sweep.

Another simple strategy, the bouncing strategy introduced by Altenstedt (2003), is to solve the problem up to stage t, for t
                        <
                        T
                        −1, return to the first stage and then do a full iteration. The stage t is also called the bouncing stage, as the algorithm changes direction at that stage. The motivation for this protocol is the observation that the algorithm spends most of the time at later stages, in particular the last one. This is mostly due to the large number of scenarios at the last stage and, then, the large number of subproblems to be solved on this stage. The idea of the bouncing strategy is to perform partial iterations to achieve better solutions to the later stage subproblems and thereby reduce the overall number of major iterations. However, it is not clear which stage is the best bouncing stage a priori.

Our dynamic strategy uses a bouncing stage too, but in a different manner. We declare a stage critical to enforce a full sweep after the algorithm reached this stage. This is done to prevent a cycle to the first stage and back that does not improve the solution much, but costs computation time. The strategy is dynamic because it declares the critical stage after the first full sweep and because the threshold that is used to decide the direction is adapted to the current gap of the algorithm. This is a major advantage over existing strategies which have to be adjusted to specific model instances. The proposed strategy can be summarized as follows:
                           
                              1.
                              Do a full sweep. Repeat until no new feasibility cuts have been generated.

Determine a critical stage ct.

Solve stage 0 problem, set t
                                 =0.

Set t
                                 =
                                 t
                                 +1, go to stage t and solve problems at stage t.

If a problem is infeasible, do a backward sweep and go to step 3.

If Disc(t) is lower than current ForwardThreshold, go to step 7. Otherwise, perform a backward sweep and go to step 3.

If t
                                 =
                                 ct, do a full sweep and go to step 3. Else go to step 4.

The critical stage is determined by the first sweep of the algorithm in which no problem was found infeasible. The wall clock time the algorithm stays in each stage is measured. We calculate the time of all stages and the cumulated one for every stage. If the cumulated time for stage k divided by the overall time is greater than a predefined value, e.g. 0.1, the stage k is declared the critical stage. This critical stage heuristic is used to prevent spending time generating cuts for the first stages without getting new dual information from the last stage.

We do not use an absolute value as ForwardThreshold, but a relative value compared to the absolute value of the current gap between lower and upper bound. Thus the threshold adjusts along with the absolute gap. We propose to set 
                           
                              ForwardThreshold
                              =
                              (
                              UB
                              -
                              LB
                              )
                              /
                              10
                           
                        . In contrast to this setting the ∊-FastBack strategy uses the minimum of ∣LB∣ and ∣UB∣ times ∊ as a threshold. This works fine, until either the lower or upper bound has a value of zero. If this is the case, Disc(t) is usually greater than the threshold, namely zero. The algorithm concludes that it should generate new optimality cuts in a backward sweep to improve the discrepancy. But the threshold remains at zero, so the algorithm does not terminate. We observed this behavior for some of our test set problems, see below.

In each iteration of the algorithm where all subproblems are feasible new optimality cuts are added to the corresponding master problem. In the multi-stage case, this leads to a growing number of cuts in the respective master problems. In the regularized decomposition method (cf. Ruszczyński, 1986) the algorithm keeps only a limited number of cuts, instead of adding new and keeping all old cuts in the problem. It would be preferable with respect to computational efficiency and memory requirements to keep only those cuts in the problem, that are needed to solve the overall problem to optimality. Unfortunately, as the nested Benders algorithm proceeds in generating new cutting planes to approximate the recourse function, there is no reliable rule to determine which cut can be safely removed (cf. Ruszczyński and Świe¸tanowski, 1997). The simple deletion of old inactive cuts can therefore lead to the recomputation of those cuts in later iterations (cf. Ruszczyński and Shapiro, 2003). Trukhanov et al. (2010) note that the removal of cuts only lead to a reduced memory usage, but had no other effect, e.g., on computing time. We propose a method that reduces the number of cuts significantly, but keeps most of the information that was contained in these cuts. In the case of pure multi-cut, we added the following cuts in some previous iteration s to a node i at stage t,
                           
                              
                                 
                                    
                                       E
                                    
                                    
                                       t
                                       ,
                                       k
                                       ,
                                       s
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       t
                                    
                                    
                                       i
                                    
                                 
                                 +
                                 
                                    
                                       θ
                                    
                                    
                                       t
                                       ,
                                       k
                                    
                                    
                                       i
                                    
                                 
                                 ⩾
                                 
                                    
                                       e
                                    
                                    
                                       t
                                       ,
                                       k
                                       ,
                                       s
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 
                                    
                                       A
                                    
                                    
                                       t
                                    
                                    
                                       i
                                    
                                 
                                 .
                              
                           
                        If all these cuts that were generated at the same iteration become redundant, i.e. their corresponding dual values are zero, we can generate a new single cut out of these multiple cuts by just summing up the existing cuts
                           
                              (20)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                A
                                             
                                             
                                                t
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       E
                                    
                                    
                                       t
                                       ,
                                       k
                                       ,
                                       s
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       t
                                    
                                    
                                       i
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                A
                                             
                                             
                                                t
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       θ
                                    
                                    
                                       t
                                       ,
                                       k
                                    
                                    
                                       i
                                    
                                 
                                 ⩾
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                A
                                             
                                             
                                                t
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       e
                                    
                                    
                                       t
                                       ,
                                       k
                                       ,
                                       s
                                    
                                 
                                 .
                              
                           
                        The only difference compared to a common single cut is the sum of aggregate variables 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    k
                                    =
                                    1
                                 
                                 
                                    
                                       
                                          A
                                       
                                       
                                          t
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              
                                 
                                    θ
                                 
                                 
                                    t
                                    ,
                                    k
                                 
                                 
                                    i
                                 
                              
                           
                         instead of a single aggregate variable 
                           
                              
                                 
                                    θ
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                           
                        . We then replace all the cuts in iteration s with the newly generated single cut. Thereby the number of redundant cuts that needs to be stored in the master problem is reduced from as many as 
                           
                              
                                 
                                    A
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                           
                         to one for iteration s. We call this technique cut consolidation. The trade-off between information loss due to aggregation and memory and computing time gains due to smaller problems is evaluated in Section 5.

The decision when to aggregate cuts of one iteration into a single cut is called a cut consolidation scheme. Our scheme is controlled via two threshold values that guide the consolidation. The first threshold value ConsecInactive specifies the number of iterations a cut needs to be consecutively inactive, before it is marked as removable. The second threshold value RelativeActive specifies how many cuts generated at the same iteration must be marked as removable before any cuts are consolidated. In our implementation, we set ConsecInactive
                        =5 and RelativeActive
                        =0.95.

If the scheme is too aggressive towards reducing the number of cuts, this can lead to longer overall solution times as cuts are consolidated that the algorithm needs to bound some aggregate and thus recomputes later on. The following pseudo-code summarizes our cut consolidation scheme, which is performed at each iteration it for every non-leaf node i at stage t in the tree. The variables ic
                        
                           k,s,i,t
                         count for how many consecutive iterations a cut k generated in iteration s is inactive (step 2(a)). These variables have to be initialized with zero before calling the scheme for the first time. If a counter ic
                        
                           k,s,i,t
                         exceeds the threshold ConsecInactive the corresponding cut is marked as removable and the counter num_inac
                        
                           s,i,t
                        , which counts the number of removable cuts which were generated in a certain iteration s, is increased (step 2(b)). If the number of removable cuts exceeds the relative treshold 
                           
                              RelativeActive
                              ·
                              
                                 
                                    A
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                           
                         all the removable cuts generated in iteration s are consolidated (step 3).
                           
                              1.
                              Set num_inac
                                 
                                    s,i,t
                                 
                                 =0 for all 
                                    
                                       s
                                       ∈
                                       
                                          
                                             F
                                          
                                          
                                             t
                                          
                                          
                                             i
                                          
                                       
                                       (
                                       it
                                       )
                                    
                                 .

For all non-aggregated optimality cuts k and all (previous) iterations 
                                    
                                       s
                                       ∈
                                       
                                          
                                             F
                                          
                                          
                                             t
                                          
                                          
                                             i
                                          
                                       
                                       (
                                       it
                                       )
                                    
                                 :
                                    
                                       (a)
                                       If the current dual value of cut k is zero, set ic
                                          
                                             k,s,i,t
                                          
                                          =
                                          ic
                                          
                                             k,s,i,t
                                          
                                          +1. Otherwise, set ic
                                          
                                             k,s,i,t
                                          
                                          =0.

If ic
                                          
                                             k,s,i,t
                                          
                                          >
                                          ConsecInactive set num_inac
                                          
                                             s,i,t
                                          
                                          =
                                          num_inac
                                          
                                             s,i,t
                                          
                                          +1.

For all iterations 
                                    
                                       s
                                       ∈
                                       
                                          
                                             F
                                          
                                          
                                             t
                                          
                                          
                                             i
                                          
                                       
                                       (
                                       it
                                       )
                                    
                                 : If 
                                    
                                       num
                                       _
                                       
                                          
                                             inac
                                          
                                          
                                             s
                                             ,
                                             i
                                             ,
                                             t
                                          
                                       
                                       >
                                       RelativeActive
                                       ·
                                       
                                          
                                             A
                                          
                                          
                                             t
                                          
                                          
                                             i
                                          
                                       
                                    
                                 , aggregate all inactive cuts to a single cut (20). Remove old cuts from problem, add new cut and resolve the problem. Store warm start.


                        Trukhanov et al. (2010) show that for their sample of problems it is preferable to choose an aggregation between pure single- and multi-cut. They note, that “a good level of cut aggregation is not known a priori”. For this reason they devise the adaptive multi aggregation algorithm that decreases the number of aggregates during the computing time of the algorithm. However, in our view the aggregation scheme “Redundancy Threshold” as described in their paper is not applicable to the L-shaped method.

The scheme “Redundancy Threshold” explicitly requires that all optimality cuts corresponding to an aggregate d are redundant, i.e., their dual values are zero. This is emphasized by their suggestion that implementations can be considered where only a fraction of the optimality cuts are required to be redundant (Trukhanov et al., 2010).

The aggregate variables θ
                        
                           d
                         are free variables that are only bounded by optimality cuts. To obtain a finite optimal solution for the problem, at least one optimality cut has to be binding, i.e. it has zero slack, for the aggregate variable θ
                        
                           d
                         to be bounded below. According to the complementary slackness theorem, it is possible that a binding constraint has a corresponding dual variable with value zero, but it is not necessary. In fact the dual constraint (9) for an aggregate variable requires that the sum of all the dual variables that correspond to the optimality cuts for that aggregate has to be one, so at least one dual variable has a value different than zero. Therefore it is not possible for all optimality cuts to be redundant at the same time.

Furthermore, the scheme still requires an a priori setting of the parameter agg
                        −
                        max that specifies the maximal number of scenarios that can get aggregated into a single aggregate. It follows that this value is a bound on the minimal number of aggregates the algorithm should use. For a problem with 1000 scenarios, for instance, a value for agg
                        −
                        max of 10 is equivalent to at least 100 aggregates, as maximal 10 scenarios can be aggregated into one aggregate. This value is determined a priori which does not differ much from the difficulty to find a good value for the number of aggregates in the static method. Trukhanov et al. (2010) conclude that a good value for agg
                        −
                        max lies between 10 and 100. This can be translated to a number of aggregates between 100 and 10 for a problem with 1000 scenarios, for instance. The adaptive algorithm can then adapt dynamically from its starting number of aggregates to the predetermined number of aggregates, but with the advantage to choose the partition of the scenarios dynamically instead of setting it statically a priori. The results from Trukhanov et al. (2010) show that the adaptive approach and the static approach reaches comparable results for equivalent choices of agg
                        −
                        max and a static number of aggregates.

Due to these considerations we did not pursue further strategies for an adaptive algorithm that changes the number of aggregates throughout the algorithm, but we focused on the deletion of old cuts to improve computing times.

@&#IMPLEMENTATION@&#

Our algorithm is implemented in C++ and it is embedded into the COIN-OR project (Lougee-Heimer, 2003), using the Stochastic Modeling Interface (SMI) and the OpenSolverInterface (OSI) in particular. SMI is used to read in problems in the SMPS format (Birge et al., 1987) and to store the scenario tree in memory as well as to query the stored data. OSI provides access to different linear and mixed-integer programming solvers via a common interface. In the remainder of this section we describe further design decisions and parameter settings of our implementation.

A practical issue that arises during implementation is numerical stability of the algorithm. The following tolerances are used in the algorithm and the LP solvers to use. We use a zero tolerance of 10−8, so all values that are smaller than 10−8 are treated as zero. In addition we use a relative gap tolerance ∊
                        
                           gap
                         of 10−6 between upper and lower bound to decide if we can stop the algorithm. If no tolerances are used, the algorithm does not converge well on practical model instances.

The nested L-shaped method lends itself to parallelization, as all the subproblems that have to be solved in a stage are independent of one another and can thus be solved in parallel. Several different parallelization approaches have been proposed in the research literature for different network and computing architectures. Distributed computing techniques were used by (Birge et al., 1996; Dempster and Thompson, 1998; Moritsch et al., 2001). A subtree-wise parallelization, i.e. different nodes in the network process different subtrees, was developed by Birge et al. (1996). According to the authors, this approach works well, but requires “careful attention to processor load balancing”. Another option is to parallelize the task of solving subproblems and let a master node compute the cuts (cf. Dempster and Thompson, 1999). An asynchronous protocol is devised by Moritsch et al. (2001). Vladimirou and Zenios (1999) give an overview over parallel algorithms to solve stochastic programs other than nested Benders decomposition. If a distributed computing environment is used, the communication overhead has to be kept in mind for the design of the algorithm. Our algorithm is suited for single workstation computers with several processor cores and avoids the communication overhead by the use of shared memory.

Let the following notation: the lower bound lb is the objective function value of the first stage problem 
                           
                              
                                 
                                    c
                                 
                                 
                                    0
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    0
                                 
                              
                              +
                              
                                 
                                    ∑
                                 
                                 
                                    k
                                    =
                                    0
                                 
                                 
                                    
                                       
                                          A
                                       
                                       
                                          0
                                       
                                       
                                          0
                                       
                                    
                                 
                              
                              
                                 
                                    θ
                                 
                                 
                                    0
                                    ,
                                    k
                                 
                                 
                                    0
                                 
                              
                           
                        . The upper bound ub is the sum over the weighted objective function values of all nodes 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    t
                                    =
                                    0
                                 
                                 
                                    T
                                    -
                                    1
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    =
                                    0
                                 
                                 
                                    
                                       
                                          K
                                       
                                       
                                          t
                                       
                                    
                                    -
                                    1
                                 
                              
                              
                                 
                                    p
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    c
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    t
                                 
                                 
                                    i
                                 
                              
                           
                        , excluding the approximation terms. We use both an absolute gap ub
                        −
                        lb and a relative gap ∣ub
                        −
                        lb∣/(∣ub∣+1×10−10) as a stopping criterion. Our parallel implementation of the nested Benders algorithm can be described as follows:
                           
                              1.
                              Initialization. Set cs
                                 =0, dir
                                 =
                                 forward, lb
                                 =−∞, ub
                                 =∞. Set up thread-pool.

If absolute or relative gap between lb and ub is smaller than ∊
                                 
                                    gap
                                 , stop.

If cs
                                 =0, set dir
                                 =
                                 forward. If cs
                                 =
                                 T
                                 −1, set dir
                                 =
                                 backward
                              

Iterate over all the nodes i of the current stage cs and add the task HandleSubproblem (i) to the thread-pool. Wait until all tasks are finished.

Call sequencing protocol to determine direction dir.

If no subproblem was infeasible and dir
                                 ==
                                 backward, iterate over all the nodes i of the stage cs
                                 −1 and add the task AggregateOptimalityCut (i) to the thread-pool. Wait until all tasks are finished.

If cs
                                 =0 and no subproblem was infeasible, update lb. If cs
                                 =
                                 T
                                 −1 and no subproblem was infeasible, update ub, if possible.

If a subproblem was infeasible and cs
                                 =0 stop, problem is infeasible. If dir
                                 =
                                 forward set cs
                                 =
                                 cs
                                 +1, else set cs
                                 =
                                 cs
                                 −1. Go to step 1.

In the following we give a description of the subroutines used in the above pseudo-code.

The subroutine HandleSubproblem (i) has the following steps:
                           
                              1.
                              Build the model from stored data or reuse existing LP solver representation if possible.

Load warm start information into solver, if available.

Solve the subproblem.

If the subproblem is feasible, store warm start and necessary data and compute optimality cut coefficients.

If the subproblem is infeasible, and no feasibility cut was generated so far, generate a feasibility cut (15).

If dir
                                 =
                                 forward call CutConsolidation (i)
                              

The subroutine AggregateOptimalityCut (i) has the following steps:
                           
                              1.
                              For each partition of the descendants of node i
                                 
                                    
                                       (a)
                                       Initialize optimality cut coefficients with zero.

For each partition member
                                             
                                                i
                                                Add the already computed optimality cut coefficients.

Add the computed optimality cut (16) to the node, if it is not redundant.

The subroutine CutConsolidation (v) has the following steps:
                           
                              1.
                              Gather data necessary for aggregation scheme.

Let CutConsolidation scheme decide which cuts to consolidate.

Consolidate cuts and remove old cuts from the problem while adding the newly aggregated ones.

Resolve the problem and store optimal basis.

The algorithm benefits from the capabilities of modern solvers to start the LP solution method from a given basis. Two possibilities exist. Either the optimal basis from the previous solve of the subproblem can be used as a warm start for the current solve. Or the optimal basis of another subproblem already solved within this iteration can be used as a warm start. Our experiments show that the superior warm start strategy is problem dependent. The default is to store a warm start for every subproblem.

State-of-the art LP solvers offer three algorithmic choices for the solution of the subproblems, namely the primal simplex algorithm, the dual simplex algorithm and an interior point method. We decided to use the dual simplex algorithm as LP solver because it can be warm started from a previously stored basis. Due to the iterative nature of the nested Benders algorithm that changes subproblems in each iteration by addition of new cuts or new right hand side values, the warm-start capability of the dual simplex solver is of paramount importance.

In order to evaluate our algorithm, we assembled a test set of 51 two-stage and 42 multi-stage problems. An overview of the problems with their main characteristics is given in the appendix in Tables A.2 and A.3, respectively. We included problems from the following test sets (excluding all problems that solve in under 0.2second by the deterministic equivalent solver to prevent outliers):
                           
                              •
                              the POSTS test set (Holmes, 1998) containing two- and multi-stage problems,

the WATSON test set (Consigli and Dempster, 1998) containing multi-stage stochastic linear problems with up to 2688 scenarios and ten stages,

the Slptestset collection (Ariyawansa and Felt, 2004),

some random problems originally created with the generator genslp (Kall and Mayer, 1998) and

an integrated strategic production planning and financial hedging problem (Koberstein et al., 2013).

The problems from the Slptestset collection were also used in the solver study by Zverovich et al. (2012). The Problems 20-term, gbd, LandS, storm and ssn are two-stage problems with a huge number of scenarios, up to 6×1081. Linderoth et al. (2006)
                        
                           1
                           
                              http://pages.cs.wisc.edu/swright/stochastic/sampling/.
                        
                        
                           1
                         solved these problems with a Sample Average Approximation (SAA) method on a cluster. Trukhanov et al. (2010) sampled versions of the 20-term, ssn and storm problems with 1000, 2000 and 3000 scenarios each. We did the same for the sake of comparison. In addition we were able to solve the problems gbd with 625,000 and LandS with 1,000,000 scenarios directly, as they have very small second-stage subproblems, see the results in Table A.4. We confirm the objective function values presented by Linderoth et al. (2006). The random problems are two-stage stochastic linear programs with up to 10,000 scenarios and a relatively dense matrix with up to 10% density. The problems taken from Koberstein et al. (2013) consider location, product allocation, capacity and financial hedging decisions under exchange rate uncertainty. The first-stage contains binary variables, all variables at later stages are continuous.

We conducted our test runs on an Intel i5-750 processor with four cores and 12GB RAM, running on Windows 7 64-bit. If not mentioned otherwise, the algorithm uses all of the four cores. Cplex 12.3 64-bit was employed to solve the linear problems and deterministic equivalent models (DEM). The interior point method (IPM) uses all four threads, whereas the dual simplex can only use one thread, so we chose IPM as the solver for the deterministic equivalent, without crossover. A time limit of three hours was imposed on all solution runs. We use one solver instance for every thread and an additional instance for the first stage problem.

Due to the possibility of setting several parameters, we define a base case algorithm (BC), which uses all cores available, single-cut aggregation, FFFB sequencing protocol, and no cut consolidation. The dual simplex method is used to solve all the subproblems. It uses the warm start capability and stores an optimal basis at every node. If no warm start basis is available for a problem, e.g. in the first iteration, the algorithm uses an optimal basis of another subproblem, if available. The remainder of this section is devided into two parts, the first is devoted to cut consolidation, the second to sequencing protocols.

In this section, we evaluate the cut consolidation strategy described in Section 3.2. In particular, we investigate its interaction with the hybrid algorithm devised by Trukhanov et al. (2010). For this purpose, we compare solution times of five different variants of our implementation of the Benders decomposition algorithm, namely, the base-case multi-cut algorithm (Multi), the base-case multi-cut algorithm with cut consolidation (Multi-CC), the base-case single-cut algorithm (Single), the base-case algorithm with number of aggregates set to 10% of the number of children of the root node (Hybrid) and the same but with cut consolidation (Hybrid-CC). As an additional information, we also include the deterministic equivalent solved with Cplex IPM (DEM). All algorithms were run in parallel mode with four cores.

The results are visualized in Fig. 1
                         as a performance profile introduced by Dolan and Moré (2002) and allow for an easy visual comparison of different solution methods with regard to a given set of test problems. Method A outperforms method B if the A’s graph is strictly above and left of B’s graph. Formally, a performance profile is defined as the distribution function of a performance metric. We measured the computing time t
                        
                           p,m
                         for every method m
                        ∈
                        M and problem p
                        ∈
                        P. The minimal solution time tmin
                        
                           p
                        
                        =min{t
                        
                           p,m
                        : m
                        ∈
                        M} is used as a baseline for comparing the different methods via a performance ratio 
                           
                              
                                 
                                    r
                                 
                                 
                                    p
                                    ,
                                    m
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          t
                                       
                                       
                                          p
                                          ,
                                          m
                                       
                                    
                                 
                                 
                                    
                                       
                                          tmin
                                       
                                       
                                          p
                                       
                                    
                                 
                              
                           
                        . The distribution function for a method is then defined as 
                           
                              
                                 
                                    ρ
                                 
                                 
                                    m
                                 
                              
                              (
                              τ
                              )
                              =
                              
                                 
                                    |
                                    {
                                    p
                                    ∈
                                    P
                                    |
                                    
                                       
                                          r
                                       
                                       
                                          p
                                          ,
                                          m
                                       
                                    
                                    ⩽
                                    τ
                                    }
                                    |
                                 
                                 
                                    |
                                    P
                                    |
                                 
                              
                           
                        . Thus ρ
                        
                           m
                        (τ) denotes the percentage of problems method m can solve within a factor τ of the fastest method for these problems. It clearly shows that cut consolidation leads to a significant improvement in performance. Furthermore, the two hybrid methods outperform the single and multi-cut version of the algorithms, which confirms the results of Trukhanov et al. (2010). Among the hybrid variants the one with cut consolidation (Hybrid-CC) dominates all other methods, i.e., it is able to solve the biggest fraction problems within a certain multiple τ of the best possible solution time for all meaningful τ.

According to Birge (1997) the multi-cut method is more effective than the single-cut method when the number of scenarios is not significantly larger than the number of first stage constraints. Notable exceptions in the test set are the ssn problems. They contain only one first stage row, but the multi-cut method solves these problems much faster. In the computational study of Zverovich et al. (2012) on a similar testset the multi-cut method is used in conjunction with regularization methods. Their results show that the single-cut approach scales better than the multi-cut method. Fábián (2012) argues that the number of cuts needed for convergence for the single-cut method is in general less than the number of cuts needed for the multi-cut method.

On our testset, the single-cut method (Single) outperforms both variants of the multi-cut method (Multi). This can be attributed, in part, to the parallelization of the algorithm. The single-cut method performs the greatest number of iterations compared to the other algorithms. Therefore more problems in the second stage have to be solved, repeatedly. The speed-up of the second stage and cut generation is nearly linear. The single-cut method can thus benefit more from parallelization than the multi-cut method. The effect of parallelization on the relative performance of the single and multi-cut method is presented in Figs. 2 and 3
                        
                        . A detailed tabular presentation of the results is given in the appendix in Table A.4.

In order to investigate the interaction between cut aggregation and consolidation, we conducted further test runs with different fixed number of aggregates on a selected subset of the test problems. Table A.6 displays results for the problem instance rand2_10000, where the effect of the number of aggregates is pronounced, due to the large number of scenarios. BC denotes the base case algorithm without and CC the version with cut consolidation. Again, it can be observed, that cut consolidation reduces the computing times considerably in most cases. Furthermore, it can be observed that cut consolidation is particularly useful for many aggregates, but is already superior for aggregate sizes starting with 50. If a problem is solved with a lower number of aggregates, cuts may get aggregated that the algorithm would have used otherwise. The results show that the usage of cut consolidation eases the ex ante choice of the “right” number of aggregates. The computing times for the problems with cut consolidation do not vary as much compared to the base case algorithm.


                        Fig. 4
                         further details the results of the CC-algorithm from Table A.6 in the appendix. It can be observed that a higher number of aggregates leads to fewer iterations, but not in general to a decrease in overall solution time. The time that is spent in the first stage master problem increases with the number of aggregates as it becomes harder to solve. The time that is spent in the second stage subproblems decreases with the number of aggregates, mostly because the number of iterations decreases. The parallelization effect mentioned above is also present in this case.

We investigate the impact of the threshold variable ConsecInactive for therand2_10000 problem in Fig. 5
                        . The efficacy of cut consolidation depends upon the removal of cuts that are not any more used by the algorithm. If cuts are removed late, the first-stage problem grows bigger and is harder to solve. If cuts are removed early, the algorithm needs more iterations overall. Cut consolidation is influenced by the number of aggregates the algorithm uses, see Fig. 5. For a low number of aggregates, cut consolidation has an adverse effect on the computing time, that is more pronounced when the threshold is small. On the other hand, for a higher number of aggregates, a smaller threshold is advantageous.

In this section, we compare the sequencing strategy presented in Section 3.1 to other existing protocols. Most multi-stage problems in our test set only have up to sixteen child nodes, but one problem has forty child nodes. As in preliminary tests, the use of cut aggregation did not influence the computing time much on our test set, so we set the number of aggregates to only 10% of the average number of child nodes in the scenario tree.


                        Fig. 6
                         shows the performance profile with regards to the 42 multi-stage problems in our test set. The dynamic protocol significantly outperforms all other protocols. To be more specific, it is the fastest protocol on half of the problems and it is able to solve all problems within a τ of three. Overall the FastForwardFastBack protocol is the second best protocol, but in the worst case it is twelve time slower than the best protocal (τ
                        =12). ∊
                        −FF is also able to solve all problems, but is slower than the other two protocols. FB and ∊
                        −FB are both unable to solve the financial hedging problems (Koberstein et al., 2013) in our test suite. The ∊-variants are superior to their non-epsilon variants. The DEM computing times show, that the usage of a specialized solution method for multi-stage stochastic programs is preferable to a general purpose solver. Detailed results on all 42 problems are listed in the appendix in Table A.5.

In Fig. 7
                         we analyse the impact of the dynamic sequencing protocoll for different numbers of scenarios on the strategic network design problems with integrated financial hedging (Koberstein et al., 2013). In this figure, we present computing times only for the single-cut method, as it was the best aggregate choice for these problems. The use of the dynamic sequencing protocol (Dynamic) leads to a significant reduction in computing time for all problem instances, except for the smallest problem with 1024 scenarios and five stages compared with the FFFB method. The ∊
                        −FB and FB protocol cannot be applied to this problem, as the upper bound becomes zero during the solution process which leads to a not-ending algorithm, see Section 3 for a further discussion. With growing number of scenarios, the predominance of the dynamic protocol increases considerably.

We compared our algorithm against the plain use of Cplex for solving DEM by using the barrier method. The dual simplex is not competitive on our test set, as it is not parallelized and can thus not take advantage of the four cores. Selected results are presented in Table 1
                        . Only the instances of one problem class, the 20_term problems, are solved faster with Cplex barrier than with the Parallel nested Benders (PNB) with the Dynamic sequencing protocol and Cut Consolidation enabled. The most significant advantage achieves PNB when solving the mixed-binary first stage SCDP problems. These results confirm that the use of specialized solution methods for stochastic linear programs with recourse is justified for two-stage problems (Zverovich et al., 2012) and for multi-stage problems as opposed to the plain use of a state-of-the-art MIP solver. This holds true especially for problems with a huge number of scenarios since they cannot be solved by plain Cplex due to memory constraints.

In this paper we presented and evaluated a cut consolidation technique and a dynamic sequencing protocol to speed up the solution of two- and multi-stage stochastic programming problems via solution algorithms based on Benders’ decomposition. We showed on a test set of 51 two-stage and 42 multi-stage problems, that both of these techniques lead to significant speed ups in computation time. Contrary to what the literature suggested (Birge and Louveaux, 2011), FastForwardFastBack is not the fastest protocol. The removal of optimality cuts from the problem makes the right choice of an aggregation level less critical. It also speeds up the solution process due to smaller subproblems, contrary to what was previously observed (Trukhanov et al., 2010). In addition it reduces memory requirements. The acceleration techniques presented here can also be useful for sampling methods such as SAA (Kleywegt et al., 2002), as they involve the solution of multi-stage stochastic programs. The effect of cut aggregation on other methods that are based upon Benders decomposition, e.g. regularized decomposition (Ruszczyński, 1986), trust region (Linderoth and Wright, 2003) or level decomposition (Fábián and Szőke, 2006), should also be investigated in the future. It is not yet clear how to choose an ideal number of aggregates for a specific problem a priori. Also the partitioning of the descendant nodes into aggregates can be guided via more sophisticated methods than the static partitioning we used. In any case, a future piece of research would consists of allowing binary variables in any other stage that is not the first one and testing the new approach on cases whose deterministic version have higher dimensions even if the number of scenarios is smaller than the one in test cases used in this work.

@&#ACKNOWLEDGEMENTS@&#

The authors are very grateful to the anonymous referees who gave helpful comments on a previous version of the paper. This research was supported by a grant from the Deutsche Forschungsgemeinschaft (DFG) under Grant No. SU136/8-1.

Problem characteristics are given in Table A.2
                      for two-stage instances and Table A.3
                      for multi-stage instances. Computing times for two-stage problems are given in Table A.4
                     . Computing times for multi-stage problems are given in Table A.5
                     . Detailed computing times for problem instance rand2_10000 are given in Table A.6
                     .

@&#REFERENCES@&#

