@&#MAIN-TITLE@&#A constructive aisle design model for unit-load warehouses with multiple pickup and deposit points

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A constructive warehouse design model and an encoding system are developed.


                        
                        
                           
                           New inspirational aisle designs are proposed for unit-load warehouses.


                        
                        
                           
                           The improved two cross aisle designs offer 5–12% improvement over traditional designs.


                        
                        
                           
                           Traditional aisle designs seem to be a good layout when P&D points are highly dispersed.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Facilities planning and design

Aisle design

Warehouse design

Single-command operation

Layout

Randomized storage

@&#ABSTRACT@&#


               
               
                  We develop a network-based warehouse model of individual pallet locations and their interactions with appropriate cross aisles in order to evaluate the expected travel distance of a given design. The model is constructive in that it uses Particle Swarm Optimization to determine the best angles of cross aisles and picking aisles for multiple, pre-determined pickup and deposit (P&D) points in a unit-load warehouse. Our results suggest that alternative designs offer reduced expected travel distance, but at the expense of increased storage space. The opportunity for benefit also seems to decline as P&D points increase in number and dispersion.
               
            

@&#INTRODUCTION@&#

In global logistics systems, warehousing plays a critical role in ensuring high levels of customer service and overall supply chain performance. Among warehouses in a supply chain network, unit-load receiving and shipping, in which one item or pallet is carried at a time, often makes up a considerable portion of warehouse operations, especially in 3rd-party distribution centers. Among operations costs in a warehouse, labor cost is significant because workers in distribution centers spend their time traveling to store or retrieve items (sometimes traveling empty). Also, because 3rd-party distribution centers pay their forklift drivers for work-hours and bill their customers for two movements (receiving and shipping), reducing travel time and increasing the number of handles per hour are two cornerstones of running a warehouse efficiently and profitably (Bartholdi & Hackman, 2011).

In traditional unit-load warehouses, forklift drivers travel among aisles, where cross aisles are arranged at right angles to parallel picking aisles, to reach a storage location (see Fig. 1
                     ). Because of rectilinear travel paths in traditional warehouses, inserting an orthogonal cross aisle offers no advantage for single-command travel distance to and from a pickup and deposit (P&D) point at the bottom or top of the warehouse (Roodbergen & de Koster, 2001). However, if there is more than one P&D location, and at least one of them is placed on the right or left side of the warehouse, a cross aisle is needed to facilitate travel (see Fig. 1b and c). Additionally, it is not uncommon that warehouses in industry have multiple entry points to access the storage area. For example, one side of the warehouse might have receiving docks and the other shipping docks. Or, receiving and shipping docks might be on each side of the warehouse.


                     Gue, Ivanovic̀, and Meller (2012) applied the idea of non-traditional designs to unit-load warehouses with multiple P&D points on one side. They inserted two angled cross aisles that form “modified Flying-V” and “Inverted-V” designs (Fig. 2
                     ). When P&D points are located at the front of each picking aisle, which is essentially a worst-case scenario, the modified Flying-V design can reduce travel by approximately 3–6%. The Inverted-V offers less than 2% in savings compared to reasonably-sized, equivalent traditional warehouses. Additionally, the authors suggested that if P&D points are concentrated toward the center of the bottom of the warehouse, the benefit of the Flying-V is greater.

Although Gue et al. (2012) considered multiple P&D points for non-traditional aisles, they considered only designs with picking aisles vertical and parallel to each other. By inserting a number of cross aisles, Gue and Meller (2009) and Öztürkoğlu, Gue, and Meller (2012) showed that the expected travel distance between a centrally located P&D point and a storage location can be reduced by as much as 20%, depending on the size of the warehouse. Öztürkoğlu et al. (2012) showed that allowing picking aisles and cross aisles to take any angle provides additional reduction in expected travel distances. In this paper, we take these ideas further to propose new aisle designs for unit-load storage spaces that have multiple access locations. Additionally, whereas Gue et al. (2012) focused on multiple P&D points on only one side of the warehouse, we consider multiple P&D points distributed on one side and on different sides of the warehouse. To produce these designs, we develop a network-based model of the warehouse, which can be encoded as a simple set of real numbers. Our models embed and manipulate this encoding to search a wide range of aisle configurations.

In the next section, we review relevant literature in non-traditional warehouse designs and multiple P&D points in warehouses. In Section 3, we discuss underlying assumptions of a general warehouse network model, which we present in Section 4. Then in Section 5, we discuss our implementation of Particle Swarm Optimization. In Section 6, we introduce new warehouse designs for some specific cases differentiated by the locations of P&D points. In the final section, we summarize our findings.

The first mention of non-orthogonal aisle designs came from Moder and Thornton (1965); Francis (1967a); Francis (1967b); Berry (1968) and White (1972). White (1972) investigated “Euclidean efficiencies” by inserting radial aisles into a continuous warehouse space. Gue and Meller (2009) proposed two non-traditional designs, the Flying-V and the Fishbone. Pohl, Meller, and Gue (2009a) showed that the optimal placement of a “middle” orthogonal cross aisle in traditional designs is slightly beyond the middle for dual-command operations. Pohl, Meller, and Gue (2009b) studied the Fishbone design for dual-command operations (also called task interleaving). They showed that the Fishbone design offers a reduction in expected travel distance compared to several common traditional designs. They also offered a modified Fishbone design for dual-command operations. Pohl, Meller, and Gue (2011) analyzed three traditional designs, as well as Fishbone and Flying-V designs, under turnover-based storage policies and both single- and dual-command operations. Randhawa, McDowell, and Wang (1991) evaluated the performance of a unit-load AS/RS with respect to throughput and waiting time for two different configurations of dual-dock layouts. Yano, Bozer, and Kamoun (1998) discussed decentralized receiving in a manufacturing assembly facility. They developed an optimization-based procedure to determine some variables including multiple access points to the building so as to minimize the cost. Eisenstein (2008) considered dual depots in a discrete line order picking system to minimize required walking distance.

We assume a randomized storage policy as Öztürkoğlu et al. (2012) and Gue and Meller (2009) did, because of its simplicity and popularity in industry, and due to higher utilization of storage locations (Petersen, 1999). With this policy, pallets are stored in the closest-available location, as opposed to reserved locations in a dedicated storage policy. The probability of picking or storing any pallet in the warehouse is the same. For ease of representation, storage locations have a square-shaped footprint, and one pallet length is the adopted measure of distance.

We assume that picking aisles within regions determined by cross aisles are parallel to each other. Picking aisles and cross aisles can take on any angle. Contrary to the model of White (1972), we take into account aisle width and its effect on travel distances. Each picking and cross aisle is assumed to be wide enough for a two-way travel and have a width of 3 pallet locations. We assume standard, single-deep pallet rack, although our model could easily be modified for double-deep rack or deeper lane storage. The model allows for no more than two angled cross aisles because the relative benefit of inserting a new cross aisle on expected travel distance decreases due to increasing space requirement for equal storage capacity. Cross aisles are not allowed to intersect, but they can originate from the same point. This limitation is serious, but is also necessary for computational reasons. As we show in Section 5, the number of cases to consider for non-intersecting cross aisles is already large.

In a warehouse, P&D points could be places that have palletizing or shrink-wrap machines for packing and shipping, or pick lists for workers. All travel is from the P&D points to any location in the warehouse (i.e., there are no zones). Because we study on designs for different locations of multiple P&D points that can be seen in industry, we assume that there are no storage racks along the sides of the warehouse to allow for P&D points along the periphery of the warehouse. We call these available spaces on the periphery of the warehouse “side cross aisles” so that they can facilitate travel between locations. One or some of these available spaces on the periphery might be sometimes needed by building safety codes, especially related to the several fire codes (Health & Safety Executive, 2007; Command, 2012). In unit-load warehouses, the most common put-away and retrieval operations are single- and dual-command operations (Roodbergen & Vis, 2009). Only one unit-load is carried at a time in single-command operation. In dual-command operation, a worker moves a pallet for put-away operation first, then move to another location for retrieving a pallet from another location before come back to the P&D point. In most unit-load warehouses, single-command travel is very common because two of the three dual command operation is single-command (from and back to the P&D point) and replenishment operations are mainly done by single command operation. Therefore, we assume a single-command operation, comprised of travel to a random storage location and back to the P&D point. In the best case, the returning P&D point is selected as the closest point to the visited storage location. However, this requires an efficient warehouse management system to manage assigning workers and storage locations to the appropriate P&D points. Additionally, every warehouse has different policies for use of P&D points. Therefore, in our study, we assume that each P&D point is selected randomly with equal probability, even though our model, which we discussed in Section 5, is capable of handling different flow rates from each P&D point. Because aisles are assumed to be wide enough to allow passing and two-way travel, and workers travel to only one location during their trip, we assume that the possibility of congestion within aisles can be ignored.

The warehouse network model consists of four main modules, which comprise the fundamental classes of a software tool used to generate a warehouse layout and its network, to evaluate the cost of the design, and to search for the parameters that minimize a given cost function.

In this module the warehouse as an entity is defined by the width (W) and depth (D) of the space, the width of the cross and picking aisles (a), the location of P&D points, the number of cross aisles, and the angles of cross and picking aisles in a suitable coordinate system. P&D points are placed along the side cross aisles. A sample design is presented in Fig. 3
                        .

We use the warehouse representation to construct a graph representing the whole warehouse as a network (Fig. 3). The nodes of the network include all of the potential P&D points, all intersections of the aisles, and an access node for each of the storage locations. P&D points are placed on the center lines of the side cross aisles. The network is constructed with non-negative edge lengths representing the distances between connected nodes. An access node for a storage location is placed on the center line of the appropriate picking aisle to provide access to the center of the corresponding storage locations. The edge length for two connected neighbor access nodes, representing storage locations in the same rack, is one pallet (unit) length. Two access nodes on opposite racks, representing opposite storage locations, are connected, and the edge length is zero because they are actually served from the same coordinate.

In this module we calculate the distance between a P&D point and all storage locations by computing the shortest paths with Dijkstra’s algorithm. Dijkstra’s algorithm searches the graph with non-negative edge path costs to find the path from the source node (P&D) to the target node (storage location) with the lowest cost (distance). The worst case running time for the algorithm on a graph with n nodes and m edges is 
                           
                              O
                              (
                              
                                 
                                    n
                                 
                                 
                                    2
                                 
                              
                              )
                           
                         (Golden, 1976).

The expected travel distance to pick an item in a warehouse with k P&D points and n total storage locations is
                           
                              
                                 E
                                 [
                                 C
                                 ]
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          k
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          n
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             d
                                          
                                          
                                             ij
                                          
                                       
                                       
                                          
                                             p
                                          
                                          
                                             i
                                          
                                       
                                    
                                    
                                       n
                                    
                                 
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       kn
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          k
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          n
                                       
                                    
                                 
                                 
                                    
                                       d
                                    
                                    
                                       ij
                                    
                                 
                                 ,
                              
                           
                        where 
                           
                              
                                 
                                    d
                                 
                                 
                                    ij
                                 
                              
                           
                         is the shortest distance between the ith P&D point and the 
                           
                              j
                           
                        th storage location, and 
                           
                              
                                 
                                    p
                                 
                                 
                                    i
                                 
                              
                           
                         is the probability of choosing the ith P&D point. In our model, 
                           
                              
                                 
                                    p
                                 
                                 
                                    i
                                 
                              
                              =
                              1
                              /
                              k
                           
                         because we assume each P&D point is used with the same probability.
                           Proposition 1
                           
                              E[C] is the same as two-way expected travel distance if the returning P&D point is selected randomly with equal probability.
                           

Let I be a set of k P&D points. 
                                 
                                    
                                       
                                          p
                                       
                                       
                                          i
                                       
                                    
                                 
                               is the probability of choosing the ith P&D point as a source node. 
                                 
                                    p
                                    (
                                    r
                                    ∣
                                    i
                                    )
                                 
                               is the probability of choosing the returning P&D point r when the source ith P&D point is known. The expected travel distance to pick an item in this system is
                                 
                                    
                                       E
                                       [
                                       RC
                                       ]
                                       =
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                                =
                                                1
                                             
                                             
                                                k
                                             
                                          
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                r
                                                =
                                                1
                                             
                                             
                                                k
                                             
                                          
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                =
                                                1
                                             
                                             
                                                n
                                             
                                          
                                       
                                       
                                          
                                             1
                                          
                                          
                                             n
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            d
                                                         
                                                         
                                                            ij
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            d
                                                         
                                                         
                                                            rj
                                                         
                                                      
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                             p
                                          
                                          
                                             i
                                          
                                       
                                       p
                                       (
                                       r
                                       ∣
                                       i
                                       )
                                       ,
                                    
                                 
                              where 
                                 
                                    
                                       
                                          p
                                       
                                       
                                          i
                                       
                                    
                                    =
                                    1
                                    /
                                    k
                                 
                               and 
                                 
                                    p
                                    (
                                    r
                                    ∣
                                    i
                                    )
                                    =
                                    1
                                    /
                                    k
                                 
                              , because the returning P&D point might be the same as the source node. Hence, we can write
                                 
                                    
                                       E
                                       [
                                       RC
                                       ]
                                       =
                                       
                                          
                                             1
                                          
                                          
                                             2
                                             nkk
                                          
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                =
                                                1
                                             
                                             
                                                n
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         i
                                                         =
                                                         1
                                                      
                                                      
                                                         k
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         r
                                                         =
                                                         1
                                                      
                                                      
                                                         k
                                                      
                                                   
                                                
                                                
                                                   
                                                      d
                                                   
                                                   
                                                      ij
                                                   
                                                
                                                +
                                                
                                                   
                                                      d
                                                   
                                                   
                                                      rj
                                                   
                                                
                                             
                                          
                                       
                                       =
                                       
                                          
                                             1
                                          
                                          
                                             2
                                             
                                                
                                                   nk
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                =
                                                1
                                             
                                             
                                                n
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         i
                                                         =
                                                         1
                                                      
                                                      
                                                         k
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            
                                                               kd
                                                            
                                                            
                                                               ij
                                                            
                                                         
                                                         +
                                                         
                                                            
                                                               
                                                                  ∑
                                                               
                                                               
                                                                  r
                                                                  =
                                                                  1
                                                               
                                                               
                                                                  k
                                                               
                                                            
                                                         
                                                         
                                                            
                                                               d
                                                            
                                                            
                                                               rj
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       =
                                       
                                          
                                             1
                                          
                                          
                                             2
                                             
                                                
                                                   nk
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                =
                                                1
                                             
                                             
                                                n
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         i
                                                         =
                                                         1
                                                      
                                                      
                                                         k
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            
                                                               kd
                                                            
                                                            
                                                               ij
                                                            
                                                         
                                                         +
                                                         
                                                            
                                                               
                                                                  ∑
                                                               
                                                               
                                                                  i
                                                                  =
                                                                  1
                                                               
                                                               
                                                                  k
                                                               
                                                            
                                                         
                                                         
                                                            
                                                               d
                                                            
                                                            
                                                               ij
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       ,
                                    
                                 
                              where 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          k
                                       
                                    
                                    
                                       
                                          d
                                       
                                       
                                          ij
                                       
                                    
                                    =
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          =
                                          1
                                       
                                       
                                          k
                                       
                                    
                                    
                                       
                                          d
                                       
                                       
                                          rj
                                       
                                    
                                 
                               due to the same probability of visiting P&D points. Finally,
                                 
                                    
                                       E
                                       [
                                       RC
                                       ]
                                       =
                                       
                                          
                                             1
                                          
                                          
                                             2
                                             
                                                
                                                   nk
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                =
                                                1
                                             
                                             
                                                n
                                             
                                          
                                       
                                       
                                          
                                             
                                                k
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         i
                                                         =
                                                         1
                                                      
                                                      
                                                         k
                                                      
                                                   
                                                
                                                
                                                   
                                                      d
                                                   
                                                   
                                                      ij
                                                   
                                                
                                                +
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         i
                                                         =
                                                         1
                                                      
                                                      
                                                         k
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         i
                                                         =
                                                         1
                                                      
                                                      
                                                         k
                                                      
                                                   
                                                
                                                
                                                   
                                                      d
                                                   
                                                   
                                                      ij
                                                   
                                                
                                             
                                          
                                       
                                       =
                                       
                                          
                                             1
                                          
                                          
                                             2
                                             
                                                
                                                   nk
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                =
                                                1
                                             
                                             
                                                n
                                             
                                          
                                       
                                       
                                          
                                             
                                                k
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         i
                                                         =
                                                         1
                                                      
                                                      
                                                         k
                                                      
                                                   
                                                
                                                
                                                   
                                                      d
                                                   
                                                   
                                                      ij
                                                   
                                                
                                                +
                                                k
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         i
                                                         =
                                                         1
                                                      
                                                      
                                                         k
                                                      
                                                   
                                                
                                                
                                                   
                                                      d
                                                   
                                                   
                                                      ij
                                                   
                                                
                                             
                                          
                                       
                                       =
                                       
                                          
                                             2
                                             k
                                          
                                          
                                             2
                                             
                                                
                                                   nk
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                                =
                                                1
                                             
                                             
                                                k
                                             
                                          
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                =
                                                1
                                             
                                             
                                                n
                                             
                                          
                                       
                                       
                                          
                                             d
                                          
                                          
                                             ij
                                          
                                       
                                       =
                                       
                                          
                                             1
                                          
                                          
                                             kn
                                          
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                i
                                                =
                                                1
                                             
                                             
                                                k
                                             
                                          
                                       
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                =
                                                1
                                             
                                             
                                                n
                                             
                                          
                                       
                                       
                                          
                                             d
                                          
                                          
                                             ij
                                          
                                       
                                       ,
                                    
                                 
                              which is equal to E[C]. □

Therefore, in our model we only calculate one-way expected travel distance to pick an item from each P&D point.

We use a Particle Swarm Optimization algorithm to minimize the objective function. We discuss details in the next section.

Because the start and end points of cross aisles can be on any side of the warehouse, there are 12 two cross aisle cases, as we discuss below (see Section 5.1). Considering possible angles of picking aisles in each region results in hundreds of cases. Even though each case can be solved separately, the problem becomes intractable when different start and end points of cross aisles and different locations of P&D points are considered. Additionally, because simply evaluating the cost of a design requires solving multiple one-to-many shortest path problems from multiple P&D points, we cannot derive a closed-form distance expression as an objective function to be minimized. Therefore, we choose a meta-heuristic solution procedure to search for the optimal values of variables that minimize the expected travel distance. Specifically, we use an implementation of Particle Swarm Optimization (PSO).

PSO, which was first introduced to optimize continuous nonlinear functions by Kennedy and Eberhart (1995), is one of the latest swarm intelligence methods inspired by nature. Its development was based on observations of social interaction and communication of flocks of birds and schools of fish. In PSO, each member is called a particle, and each particle searches the multi-dimensional function space with a specific velocity. Two aspects of this initial metaphor, individual learning as a cognitive factor and learning from a social group as a social factor, refer to local and global search, respectively (Dang, Guibadj, & Moukrim, 2013). By individual learning, each particle can memorize its best previous position, called personal best. By learning from a social group, particles share all the information about their personal best points that they have received so far with their neighbor particles. The most common neighborhood topologies used in PSO implementations are Star and Ring Toplogies (Yapicioglu, Smith, & Dozier, 2007). While evey particle is connected to all other particles in the population in Star Topology (global neighborhood), the neighborhood size is limited in a Ring Topology, usually a size of three particles. Particles then move toward their own personal best, and the best particle, called global best, which is the best among all particles in the neighborhood. By using personal and global bests, each particle adjusts the direction and the magnitude of its velocity for movement in the space.

As with other meta-heuristics, PSO is designed to find a unique, possibly optimum solution. Advantages of a basic PSO algorithm include its simple structure, ease of implementation, speed in solving nonlinear, non-differentiable multi-model problems, and robustness (Tasgetiren, Liang, Sevkli, & Gencyilmaz, 2007). Additionally, its ability to handle continuous variables is another advantage for our problem.

We follow three steps to formulate the problem and to search the solution space quickly. The first step is an encoding, which in our case is a simple vector of real numbers representing a warehouse with a number of angled cross aisles and angled picking aisles, as well as a number of P&D locations. There is a one-to-one mapping between a given encoding and a design, which ensures that a manipulated encoding can be translated back into a warehouse design. The elements of the encoding are:
                           
                              •
                              A linear cross aisle is represented with start (S) and end (E) points of its center line, which define its angle in a given suitable coordinate system. A set of cross aisles can be represented as a list of such pairs.

Picking aisles in any resulting region can be represented by their angle 
                                    
                                       0
                                       ⩽
                                       α
                                       ⩽
                                       π
                                    
                                  (measured in radians).

To simplify the encoding, start and end points of a cross aisle are represented by real numbers in a single-dimensional coordinate system (Fig. 4
                        ). The origin is at the upper-left corner and is defined as 0 and 4 in order to make a closed loop for the perimeter of a rectangular warehouse. Lower-left, lower-right and upper-right corners are defined as 1, 2 and 3, respectively. When evaluating the cost of a design, we convert the encoding of the cross aisle to a point (
                           
                              x
                              ,
                              y
                           
                        ) in the coordinate system. Additionally, P&D points are fixed at their given positions in the coordinate system, which are along the side cross aisles that build the perimeter of the warehouse rectangle.

To narrow the search space, some inappropriate cases, such as having the start and end points of a cross aisle on the same side of the warehouse, and duplication (switching the start and end) are forbidden. For the one cross aisle model, there are 6 cases representing the possible orientations of the cross aisle (Fig. 4). Because cases 3, 4 and 6 are symmetric cases of case 1, we consider only cases 1, 2 and 5 as subproblems. In these subproblems, 
                           
                              S
                              ∈
                              [
                              0
                              ,
                              1
                              )
                           
                         and 
                           
                              E
                              ∈
                              (
                              1
                              ,
                              2
                              ]
                              ,
                              
                              S
                              ∈
                              [
                              0
                              ,
                              1
                              )
                           
                         and 
                           
                              E
                              ∈
                              [
                              2
                              ,
                              3
                              ]
                              ,
                              
                              S
                              ∈
                              [
                              1
                              ,
                              2
                              ]
                           
                         and 
                           
                              E
                              ∈
                              [
                              3
                              ,
                              4
                              ]
                           
                        , respectively.

For a warehouse with two non-intersecting cross aisles, there are 34 cases, which can be reduced to 12 due to symmetry (see Fig. 5
                        ). We divide these 12 main cases into 3 subproblems as described in Fig. 6
                         to narrow the search space and to control the movement of the cross aisles. In the two cross aisle model, 
                           
                              
                                 
                                    S
                                 
                                 
                                    1
                                 
                              
                           
                         and 
                           
                              
                                 
                                    E
                                 
                                 
                                    1
                                 
                              
                           
                         are the start and end points of the center line of the first cross aisle, as well as 
                           
                              
                                 
                                    S
                                 
                                 
                                    2
                                 
                              
                           
                         and 
                           
                              
                                 
                                    E
                                 
                                 
                                    2
                                 
                              
                           
                         of the second cross aisle. Because we assume non-intersecting cross aisles, upper and lower limits for start and end points of cross aisles conform to the values in Table 1
                        .

Because the model assumes at most two non-intersecting cross aisles, there are at most three regions (Fig. 7
                        ). Angles 
                           
                              
                                 
                                    α
                                 
                                 
                                    R
                                 
                              
                              ,
                              
                              
                                 
                                    α
                                 
                                 
                                    L
                                 
                              
                           
                         and 
                           
                              
                                 
                                    α
                                 
                                 
                                    C
                                 
                              
                           
                         (if present) represent the angles of picking aisles in the right, left and central regions. For an example, the encoding for a two cross aisle model is 
                           
                              {
                              
                                 
                                    α
                                 
                                 
                                    L
                                 
                              
                              ,
                              
                                 
                                    α
                                 
                                 
                                    C
                                 
                              
                              ,
                              
                                 
                                    α
                                 
                                 
                                    R
                                 
                              
                              ,
                              
                                 
                                    S
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    E
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    S
                                 
                                 
                                    2
                                 
                              
                              ,
                              
                                 
                                    E
                                 
                                 
                                    2
                                 
                              
                              }
                           
                        .

The second step is evaluation, in which we evaluate the performance of a design represented by a specific encoding (a vector of design parameters) on expected travel distance of a pick or stow. For this, we use the graph-based network model of the warehouse discussed in the previous section.

The third step is to search encodings to find the lowest possible expected travel distance 
                           
                              E
                              [
                              C
                              ]
                           
                         for each subproblem in the one and two cross aisle models. For this task, we use the PSO algorithm. Finally, we select the aisle design that has the lowest 
                           
                              E
                              [
                              C
                              ]
                           
                         among solutions of the subproblems with respect to the one and two cross aisle models.

In the simple PSO algorithm, each particle represents a solution that moves toward its previous best position and the global best position found in the population so far. After initializing the parameters and generating the initial population randomly, the algorithm evaluates each particle by the fitness function. After evaluation, each particle is updated with its position, velocity and fitness value. If there is an improvement in its fitness value, it updates its personal best. The best particle in the population is used to update the global best. Next, the velocity of the particle is updated by using its previous velocity, personal best, and the global best to move the particle to a potentially better place in the search space. By doing these steps repeatedly, the algorithm searches the space until it is terminated by a stopping criterion.

The structure of the PSO algorithm is basically the same as the modified PSO by Shi et al. (1988a), Shi and Eberhart (1998b). The basic elements of our algorithm are particles, population, particle velocity, personal best, global best, inertia weights, coefficients and maximum velocity.


                        Population and Subproblem: F is the set of s subproblems, 
                           
                              F
                              =
                              {
                              
                                 
                                    I
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    I
                                 
                                 
                                    2
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    I
                                 
                                 
                                    s
                                 
                              
                              }
                           
                        . 
                           
                              
                                 
                                    I
                                 
                                 
                                    s
                                 
                              
                           
                         is also the set of r particles at iteration 
                           
                              t
                              ,
                              
                              
                                 
                                    I
                                 
                                 
                                    s
                                 
                                 
                                    t
                                 
                              
                              =
                              {
                              
                                 
                                    X
                                 
                                 
                                    1
                                    s
                                 
                                 
                                    t
                                 
                              
                              ,
                              
                                 
                                    X
                                 
                                 
                                    2
                                    s
                                 
                                 
                                    t
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    X
                                 
                                 
                                    rs
                                 
                                 
                                    t
                                 
                              
                              }
                           
                        .


                        Particles: 
                           
                              
                                 
                                    X
                                 
                                 
                                    is
                                 
                                 
                                    t
                                 
                              
                           
                         denotes the ith particle in the 
                           
                              s
                           
                        th subproblem at iteration t. It is represented by d dimensions: 
                           
                              
                                 
                                    X
                                 
                                 
                                    is
                                 
                                 
                                    t
                                 
                              
                              =
                              {
                              
                                 
                                    x
                                 
                                 
                                    is
                                    1
                                 
                                 
                                    t
                                 
                              
                              ,
                              
                                 
                                    x
                                 
                                 
                                    is
                                    2
                                 
                                 
                                    t
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    x
                                 
                                 
                                    isd
                                 
                                 
                                    t
                                 
                              
                              }
                           
                        , where 
                           
                              
                                 
                                    x
                                 
                                 
                                    isd
                                 
                                 
                                    t
                                 
                              
                           
                         is the position or the value of the 
                           
                              d
                           
                        th dimension of the 
                           
                              i
                           
                        th particle in the 
                           
                              s
                           
                        th subproblem. Dimensions can be thought of as model variables or parameters.


                        Velocity of particles: 
                           
                              
                                 
                                    V
                                 
                                 
                                    is
                                 
                                 
                                    t
                                 
                              
                           
                         is the set of d velocities of particle i in the 
                           
                              s
                           
                        th subproblem at iteration 
                           
                              t
                              ,
                              
                              
                                 
                                    V
                                 
                                 
                                    is
                                 
                                 
                                    t
                                 
                              
                              =
                              {
                              
                                 
                                    v
                                 
                                 
                                    is
                                    1
                                 
                                 
                                    t
                                 
                              
                              ,
                              
                                 
                                    v
                                 
                                 
                                    is
                                    2
                                 
                                 
                                    t
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    v
                                 
                                 
                                    isd
                                 
                                 
                                    t
                                 
                              
                              }
                           
                        . Each dimension of each particle moves in the search space with a distance 
                           
                              
                                 
                                    v
                                 
                                 
                                    isd
                                 
                                 
                                    t
                                 
                              
                           
                         at each iteration.


                        Personal best: 
                           
                              
                                 
                                    P
                                 
                                 
                                    is
                                 
                              
                           
                         is the best previous position, which gives the best fitness value of the 
                           
                              i
                           
                        th particle in the 
                           
                              s
                           
                        th subproblem, and 
                           
                              
                                 
                                    P
                                 
                                 
                                    is
                                 
                              
                              =
                              {
                              
                                 
                                    p
                                 
                                 
                                    is
                                    1
                                 
                              
                              ,
                              
                                 
                                    p
                                 
                                 
                                    is
                                    2
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    p
                                 
                                 
                                    isd
                                 
                              
                              }
                           
                         where 
                           
                              
                                 
                                    p
                                 
                                 
                                    isd
                                 
                              
                           
                         is the best value of dimension d of the 
                           
                              i
                           
                        th particle in the 
                           
                              s
                           
                        th subproblem so far.


                        Global best: 
                           
                              
                                 
                                    G
                                 
                                 
                                    s
                                 
                              
                              =
                              {
                              
                                 
                                    g
                                 
                                 
                                    s
                                    1
                                 
                              
                              ,
                              
                                 
                                    g
                                 
                                 
                                    s
                                    2
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    g
                                 
                                 
                                    sd
                                 
                              
                              }
                           
                         is the best particle among all the particles in the 
                           
                              s
                           
                        th subproblem, where 
                           
                              
                                 
                                    g
                                 
                                 
                                    sd
                                 
                              
                           
                         is the best value of dimension d in 
                           
                              
                                 
                                    G
                                 
                                 
                                    s
                                 
                              
                           
                        .


                        Inertia weights: Shi et al. (1988a), Shi and Eberhart (1998b) introduced an inertia weight to the algorithm. It is denoted as w and is used to balance global and local searches. It can be a positive constant or a function of time or iteration. A larger w favors the global search, while a smaller w favors the local.


                        Coefficients and maximum velocity: Coefficients 
                           
                              
                                 
                                    c
                                 
                                 
                                    1
                                 
                              
                           
                         and 
                           
                              
                                 
                                    c
                                 
                                 
                                    2
                                 
                              
                           
                         are the weights for the “cognitive” and “social” parts of the velocity update equation given in (1). To control the explosion of velocities and to provide stability, there are two other mechanisms: maximum velocity 
                           
                              
                                 
                                    V
                                 
                                 
                                    max
                                 
                              
                           
                         and a constriction coefficient (K). For the quality of the search, Shi et al. (1988a) showed the effect of 
                           
                              
                                 
                                    V
                                 
                                 
                                    max
                                 
                              
                           
                         that determines the maximum change one particle can undergo in its positional coordinates during an iteration. Clerc and Kennedy (2002) showed that the following value of K provides rapid convergence:
                           
                              
                                 
                                    
                                       
                                       
                                          
                                             K
                                             =
                                             
                                                
                                                   2
                                                
                                                
                                                   
                                                      
                                                         
                                                            2
                                                            -
                                                            ϕ
                                                            -
                                                            
                                                               
                                                                  
                                                                     
                                                                        ϕ
                                                                     
                                                                     
                                                                        2
                                                                     
                                                                  
                                                                  -
                                                                  4
                                                                  ϕ
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             ,
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             ϕ
                                             =
                                             
                                                
                                                   c
                                                
                                                
                                                   1
                                                
                                             
                                             +
                                             
                                                
                                                   c
                                                
                                                
                                                   2
                                                
                                             
                                             >
                                             4
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Also, 
                           
                              
                                 
                                    r
                                 
                                 
                                    1
                                 
                              
                           
                         and 
                           
                              
                                 
                                    r
                                 
                                 
                                    2
                                 
                              
                           
                         are uniformly distributed random numbers [0,1] that influence the movement toward personal or global best. Particles are updated based on the equations:
                           
                              (1)
                              
                                 
                                    
                                       v
                                    
                                    
                                       isd
                                    
                                    
                                       t
                                    
                                 
                                 =
                                 K
                                 
                                    
                                       
                                          
                                             
                                                w
                                             
                                             
                                                t
                                                -
                                                1
                                             
                                          
                                          
                                             
                                                v
                                             
                                             
                                                isd
                                             
                                             
                                                t
                                                -
                                                1
                                             
                                          
                                          +
                                          
                                             
                                                c
                                             
                                             
                                                1
                                             
                                          
                                          
                                             
                                                r
                                             
                                             
                                                1
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         p
                                                      
                                                      
                                                         isd
                                                      
                                                   
                                                   -
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         isd
                                                      
                                                      
                                                         t
                                                         -
                                                         1
                                                      
                                                   
                                                
                                             
                                          
                                          +
                                          
                                             
                                                c
                                             
                                             
                                                2
                                             
                                          
                                          
                                             
                                                r
                                             
                                             
                                                2
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         g
                                                      
                                                      
                                                         sd
                                                      
                                                   
                                                   -
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         isd
                                                      
                                                      
                                                         t
                                                         -
                                                         1
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 ,
                              
                           
                        
                        
                           
                              (2)
                              
                                 
                                    
                                       x
                                    
                                    
                                       isd
                                    
                                    
                                       t
                                    
                                 
                                 =
                                 
                                    
                                       v
                                    
                                    
                                       isd
                                    
                                    
                                       t
                                    
                                 
                                 +
                                 
                                    
                                       x
                                    
                                    
                                       isd
                                    
                                    
                                       t
                                       -
                                       1
                                    
                                 
                                 .
                              
                           
                        
                     

@&#IMPLEMENTATION DETAILS@&#

In accordance with the one and two cross aisle models, we have 3 subproblems for each model (
                              
                                 s
                                 =
                                 3
                              
                           ). Note that there is no interaction or communication among particles in these different subproblems. Picking aisles can take any angle between the lower bound of 0° and the upper bound of 180°. Because each subproblem is defined by the cases of cross aisles, start and end points of cross aisles in each subproblem can take any real numbers between their lower and upper bounds. However, when variables move out of their boundaries because of their velocities (
                              
                                 
                                    
                                       v
                                    
                                    
                                       isd
                                    
                                 
                              
                           ), we adjust the velocity of particles based on their bounds in addition to 
                              
                                 
                                    
                                       V
                                    
                                    
                                       max
                                    
                                 
                              
                           , so as to keep the variables in bounds. Therefore, the applied velocity of the 
                              
                                 d
                              
                           th dimension for the 
                              
                                 i
                              
                           th particle in the 
                              
                                 s
                              
                           th subproblem (
                              
                                 
                                    
                                       m
                                    
                                    
                                       isd
                                    
                                 
                              
                           ) is used to update the positions of the particle in our algorithm. Generally, 
                              
                                 
                                    
                                       m
                                    
                                    
                                       isd
                                    
                                 
                              
                            is calculated based on the cases shown in Fig. 8
                           , which can be written,
                              
                                 (3)
                                 
                                    
                                       
                                          
                                          
                                             
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      isd
                                                   
                                                   
                                                      t
                                                   
                                                
                                                =
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  -
                                                                  ξ
                                                                  (
                                                                  
                                                                     
                                                                        U
                                                                     
                                                                     
                                                                        d
                                                                     
                                                                  
                                                                  -
                                                                  
                                                                     
                                                                        L
                                                                     
                                                                     
                                                                        d
                                                                     
                                                                  
                                                                  )
                                                                  -
                                                                  (
                                                                  
                                                                     
                                                                        x
                                                                     
                                                                     
                                                                        isd
                                                                     
                                                                     
                                                                        t
                                                                     
                                                                  
                                                                  -
                                                                  
                                                                     
                                                                        U
                                                                     
                                                                     
                                                                        d
                                                                     
                                                                  
                                                                  )
                                                                  ,
                                                               
                                                               
                                                                  if Case
                                                                  
                                                                  1
                                                                  
                                                                  or
                                                                  
                                                                  5
                                                                  
                                                                  or
                                                                  
                                                                  6
                                                                  
                                                                  occurs
                                                               
                                                            
                                                            
                                                               
                                                                  ξ
                                                                  (
                                                                  
                                                                     
                                                                        U
                                                                     
                                                                     
                                                                        d
                                                                     
                                                                  
                                                                  -
                                                                  
                                                                     
                                                                        x
                                                                     
                                                                     
                                                                        isd
                                                                     
                                                                     
                                                                        t
                                                                     
                                                                  
                                                                  )
                                                                  ,
                                                               
                                                               
                                                                  if Case
                                                                  
                                                                  2
                                                                  
                                                                  occurs
                                                               
                                                            
                                                            
                                                               
                                                                  ξ
                                                                  (
                                                                  
                                                                     
                                                                        U
                                                                     
                                                                     
                                                                        d
                                                                     
                                                                  
                                                                  -
                                                                  
                                                                     
                                                                        L
                                                                     
                                                                     
                                                                        d
                                                                     
                                                                  
                                                                  )
                                                                  +
                                                                  (
                                                                  
                                                                     
                                                                        L
                                                                     
                                                                     
                                                                        d
                                                                     
                                                                  
                                                                  -
                                                                  
                                                                     
                                                                        x
                                                                     
                                                                     
                                                                        isd
                                                                     
                                                                     
                                                                        t
                                                                     
                                                                  
                                                                  )
                                                                  ,
                                                               
                                                               
                                                                  if Case
                                                                  
                                                                  3
                                                                  
                                                                  or
                                                                  
                                                                  4
                                                                  
                                                                  or
                                                                  
                                                                  8
                                                                  
                                                                  occurs
                                                               
                                                            
                                                            
                                                               
                                                                  -
                                                                  ξ
                                                                  (
                                                                  
                                                                     
                                                                        x
                                                                     
                                                                     
                                                                        isd
                                                                     
                                                                     
                                                                        t
                                                                     
                                                                  
                                                                  -
                                                                  
                                                                     
                                                                        L
                                                                     
                                                                     
                                                                        d
                                                                     
                                                                  
                                                                  )
                                                                  ,
                                                               
                                                               
                                                                  if Case
                                                                  
                                                                  7
                                                                  
                                                                  occurs
                                                               
                                                            
                                                            
                                                               
                                                                  -
                                                                  
                                                                     
                                                                        V
                                                                     
                                                                     
                                                                        max
                                                                     
                                                                  
                                                                  ,
                                                               
                                                               
                                                                  otherwise if
                                                                  
                                                                  
                                                                     
                                                                        v
                                                                     
                                                                     
                                                                        isd
                                                                     
                                                                     
                                                                        t
                                                                     
                                                                  
                                                                  <
                                                                  -
                                                                  
                                                                     
                                                                        V
                                                                     
                                                                     
                                                                        max
                                                                     
                                                                  
                                                               
                                                            
                                                            
                                                               
                                                                  
                                                                     
                                                                        V
                                                                     
                                                                     
                                                                        max
                                                                     
                                                                  
                                                                  ,
                                                               
                                                               
                                                                  otherwise if
                                                                  
                                                                  
                                                                     
                                                                        V
                                                                     
                                                                     
                                                                        max
                                                                     
                                                                  
                                                                  <
                                                                  
                                                                     
                                                                        v
                                                                     
                                                                     
                                                                        isd
                                                                     
                                                                     
                                                                        t
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                             
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      isd
                                                   
                                                   
                                                      t
                                                   
                                                
                                                =
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      isd
                                                   
                                                   
                                                      t
                                                   
                                                
                                                +
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      isd
                                                   
                                                   
                                                      t
                                                      -
                                                      1
                                                   
                                                
                                                ,
                                             
                                          
                                       
                                    
                                 
                              
                           where 
                              
                                 
                                    
                                       L
                                    
                                    
                                       d
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       U
                                    
                                    
                                       d
                                    
                                 
                              
                            are lower and upper bounds of the 
                              
                                 d
                              
                           th dimension, respectively. Parameter 
                              
                                 ξ
                              
                            is a uniformly distributed random variable between [0,1] that specifies the magnitude of the movement toward the specified bound. Therefore, in the repair process of moving variables back to their boundaries, we do not limit 
                              
                                 
                                    
                                       m
                                    
                                    
                                       isd
                                    
                                 
                              
                            with 
                              
                                 
                                    
                                       V
                                    
                                    
                                       max
                                    
                                 
                              
                           . Additionally, we set 
                              
                                 
                                    
                                       V
                                    
                                    
                                       max
                                    
                                 
                              
                            equal to one third of the length of a side of the warehouse in a single-dimensional coordinate system, which allows enough space for exploration, but not so much that particles do not converge (Kennedy, 2007).

In the encoding of the two cross aisle model, dimensions corresponding to the start and end points of cross aisles move according to the rule: 
                              
                                 
                                    
                                       S
                                    
                                    
                                       1
                                    
                                 
                              
                            moves first, 
                              
                                 
                                    
                                       S
                                    
                                    
                                       2
                                    
                                 
                              
                            second, 
                              
                                 
                                    
                                       E
                                    
                                    
                                       2
                                    
                                 
                              
                            third and 
                              
                                 
                                    
                                       E
                                    
                                    
                                       1
                                    
                                 
                              
                            last. Thus, we can maintain their movement within the limits defined in Table 1 using 
                              
                                 
                                    
                                       m
                                    
                                    
                                       isd
                                    
                                 
                              
                           . For example, as soon as 
                              
                                 
                                    
                                       S
                                    
                                    
                                       1
                                    
                                 
                              
                            moves, if it moves to a lower value than the current value of 
                              
                                 
                                    
                                       S
                                    
                                    
                                       2
                                    
                                 
                              
                            in subProblem 1 for the two cross aisle model, then the movement of 
                              
                                 
                                    
                                       S
                                    
                                    
                                       2
                                    
                                 
                              
                            might be adjusted based on cases 1 or 5 in Fig. 8 because of its upperbound (
                              
                                 
                                    
                                       S
                                    
                                    
                                       1
                                    
                                 
                              
                           ) defined to avoid intersection of cross aisles.

After moving cross aisles with an applied distance 
                              
                                 
                                    
                                       m
                                    
                                    
                                       isd
                                    
                                    
                                       t
                                    
                                 
                              
                           , cross aisles might get so close to each other that there is not enough space for having storage locations in a region between cross aisles because of the aisle width. If this happens, we select the most appropriate cross aisle that has more available space to be moved away from the other cross aisle. We assign 
                              
                                 λ
                              
                           , which equals 
                              
                                 
                                    
                                       V
                                    
                                    
                                       max
                                    
                                 
                              
                            in our algorithm, to the velocity of the selected cross aisle’s start and end points and move them away by recalculating 
                              
                                 
                                    
                                       m
                                    
                                    
                                       isd
                                    
                                    
                                       t
                                    
                                 
                              
                           . Thus, the repair function is used to separate cross aisles from each other so that we can have reasonable warehouse designs for the two cross aisle model. To expedite the search, the repair function and recalculating 
                              
                                 
                                    
                                       m
                                    
                                    
                                       isd
                                    
                                 
                              
                            are performed before the exact pallet locations in a warehouse design and the network are constructed.

We define inertia weight as a linear function of the number of iterations: 
                              
                                 
                                    
                                       w
                                    
                                    
                                       t
                                    
                                 
                                 =
                                 (
                                 -
                                 t
                                 /
                                 k
                                 )
                                 +
                                 q
                              
                           , where t is the iteration number, q is the allowable maximum value of 
                              
                                 
                                    
                                       w
                                    
                                    
                                       t
                                    
                                 
                              
                           , and k determines the minimum value of 
                              
                                 
                                    
                                       w
                                    
                                    
                                       t
                                    
                                 
                              
                           . In our algorithm, we chose 
                              
                                 q
                                 =
                                 1.2
                              
                            in order to increase global search at the beginning of the iterations and then reduced it to around 0.8 at the end, because Shi et al. (1988a) mentioned that PSO has the best chance of finding the global optimum when 
                              
                                 0.8
                                 <
                                 w
                                 <
                                 1.2
                              
                           . Clerc and Kennedy (2002) recommended that 
                              
                                 
                                    
                                       c
                                    
                                    
                                       1
                                    
                                 
                                 +
                                 
                                    
                                       c
                                    
                                    
                                       2
                                    
                                 
                                 =
                                 4.1
                              
                           , so we select 
                              
                                 
                                    
                                       c
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 
                                    
                                       c
                                    
                                    
                                       2
                                    
                                 
                                 =
                                 2.05
                              
                           .

As a termination criterion, we use both the total number of iterations and the number of iterations for which the global best solution for each subproblem was not improved. The algorithm runs until both limits are exceeded. If the solutions were not be improved in the previous 100 iterations, we terminate the search after 1000 iterations. Hence, the model performs more global search (
                              
                                 w
                                 >
                                 1.0
                              
                           ) in the first 500 iterations. Then, local search outweighs global search in the next 500 or more iterations by lowering w if there is an improvement.


                           Hongfei and Jianqing (2010) contend that the number of particles and the number of iterations are inversely related. Engelbrecht (2007) suggests that swarm sizes of 10–30 particles, sometimes even fewer than 10, give optimal solutions in numerical studies for typical problems. We use 21 particles, but allocate them among the subproblems such that each subproblem has 7 particles, with no interaction among particles in different subproblems. Pseudo-code for the PSO algorithm is in Appendix A.

To validate the PSO algorithm, we applied it to a warehouse for which we know the optimal solution is the Chevron design (Öztürkoğlu et al., 2012)—a single, centrally located P&D point and one cross aisle. The warehouse has a width of 100 and depth of 50 units. The PSO algorithm stopped after 1000 iterations because there was no improvement in the last 100 iterations. As expected, the model proposed a design that looks like the Chevron, but the picking aisles were slightly different from the optimal angles in the Chevron. The angle of the picking aisles in the right region was approximately 44.4°, instead of 45° as in the Chevron, and therefore the expected travel distance to pick an item is greater than the Chevron (approximately 0.2%). The difference can be explained by noting that the model tends to change aisle angles slightly so that it cuts off costly locations while not sacrificing too many good locations in order to reduce the average distance in a discrete warehouse design (see Fig. 9
                     ).

In this section, we look for optimal aisle structures for warehouse designs with different locations of P&D points. Fig. 10
                      shows the representation of the locations of the P&D points for four different design problems. These problems are nominal, in the sense that they are intended to explore optimal designs for different flow patterns, rather than represent actual industrial problems. Nevertheless, the solutions to these problems do suggest the potential benefit of alternative aisle designs for actual industrial problems.

In order to see if there is any difference in orientation of aisles as the warehouse size changes, we search for the best aisle angles in these design problems for different warehouse sizes. Because of the increasing computational effort as the size of the warehouse increases, we choose three different warehouse sizes, which we call small, medium and large warehouses. Each has a 2:1 width-to-depth ratio. The small warehouse is equivalent to a 19-aisle width traditional design, with a width of 100 and depth of 50 pallet units. The medium warehouse is equivalent to a 29-aisle width traditional design with a width of 150 and depth of 75 units. The largest is equivalent to a 39 aisle-width traditional design that has a width of 200 and depth of 100 pallet units. We insert one and two angled cross aisles into these warehouses with multiple P&D points as defined in Fig. 10.

For each size of warehouse and design configuration, we make five runs and choose the best solution. We begin by solving the problem for the equivalent warehouse footprint in order to determine the best angles. Because the improved designs include inserted cross aisles, they provide less storage capacity than an equivalent traditional design. Therefore, we use the best angles and expand the warehouse space while approximately preserving the aisle structure and shape ratio, so that they provide approximately the same storage capacity as an equivalent traditional design. We then compare them with respect to the improvement in expected travel distance to pick an item, and with respect to the additional space requirement to provide capacity approximately equal to the traditional design. We take Layout A as the basis for comparison in design problems A and C, because of its high storage capacity and allowance of direct travel from both of the P&D points located in these design problems. In design problems B and D, Layout A is not a good basis for comparison because it does not allow direct travel from the P&D locations to the storage area, as do Layouts B and C. We choose Layout C because Layout B requires slightly more space than Layout C due to the longer (horizontal) cross aisle for square-half warehouses. For ease of discussion, we also describe angles of aisles only for a medium warehouse in each design problem.

In design problem A we locate two P&D points at the 
                           
                              1
                              /
                              3
                           
                         and 
                           
                              2
                              /
                              3
                           
                         point of the top side of the warehouse in accordance with the main cases of the one and two cross aisle models. Expected travel distances and the number of storage locations in Layout A for small, medium and large warehouses are shown in Table 2
                        . We look for the best aisle designs with one and two inserted cross aisles for this problem and compare them with these results.

The improved aisle designs proposed by the model (results are transformed to a symmetric case for better understanding of the aisle angles and representing the actual problem in Fig. 10) are shown in Fig. 11
                        . We call these “Design A1” and “Design A2.” In Design A1, the cross aisle originates from the left P&D point to slightly below the upper-right corner with angle 
                           
                              β
                              ≈
                           
                         36°. The model also seems to select one of the P&D points and originates the cross aisle from that P&D point. The angles of the picking aisles in the right (
                           
                              
                                 
                                    α
                                 
                                 
                                    R
                                 
                              
                           
                        ) and left (
                           
                              
                                 
                                    α
                                 
                                 
                                    L
                                 
                              
                           
                        ) regions are 88° and 117° respectively (see Table B.8 in Appendix B for details). 
                           
                              
                                 
                                    α
                                 
                                 
                                    R
                                 
                              
                           
                         is slightly angled to reduce the expected travel distance to the right region from the left P&D point, in two ways: (1) it presents slightly better travel paths than rectilinear travel, and (2) it reduces the number of storage locations due to the angled aisles. 
                           
                              
                                 
                                    α
                                 
                                 
                                    R
                                 
                              
                           
                         also improves travel from the right P&D point to some storage locations in the right region; however, it also slightly worsens travel for some other locations in the same region. For example, only travel to the right side of the right P&D point has a slightly better travel than rectilinear. Travel from the left P&D point to the left region has a better travel path than rectilinear travel because the difference in the 
                           
                              
                                 
                                    α
                                 
                                 
                                    L
                                 
                              
                           
                         and 
                           
                              β
                           
                         is less than 90°. Travel from the right P&D point to the left region is also slightly improved for most storage locations in that region. For this travel, the picking aisles in the right region are used as cross aisles in order to provide the shortest paths to the farthest locations from the right P&D point.


                        Tables in Appendix B show the best solutions obtained in each run for small, medium and large warehouses. For medium, equally capacitated warehouses, Design A1 offers 5.6% savings in expected travel distance, but requires a 8.9% larger space as compared to Layout A (see Fig. 12
                        a).

Design A2 is an approximately symmetric design with respect to a vertical axis through the center of the warehouse. Angles of the picking aisles in the right (
                           
                              
                                 
                                    α
                                 
                                 
                                    R
                                 
                              
                           
                        ), left (
                           
                              
                                 
                                    α
                                 
                                 
                                    L
                                 
                              
                           
                        ) and central (
                           
                              
                                 
                                    α
                                 
                                 
                                    C
                                 
                              
                           
                        ) regions are approximately 53°, 128° and 180°, respectively (see details in Table B.11 in Appendix). Because there are two P&D points and two inserted cross aisles, the model originates each cross aisle from each P&D point in order to facilitate travel to the storage locations from both of the P&D points equally. The cross aisles also intersect at the middle of the top side of the warehouse so that: (1) they create fishbone-like travel in the central region with an appropriate angle of picking aisles and (2) they can increase the right and left storage areas where they present a better travel path than rectilinear. Therefore, travel from both P&D points is better than rectilinear travel. Design A2 offers an 11% improvement in travel, but requires a 9.5% larger space compared to an equally capacitated, medium Layout A (see Fig. 12b).


                        Gue et al. (2012) considered multiple P&D points at the bottom of the warehouse in a Flying-V design. The Flying-V has two nonlinear cross aisle segments that are symmetric with respect to a vertical axis passing through the central P&D point. In order to compare Design A2 with the Flying-V, we slightly modify the cross aisles in the Flying-V to be linear because our model can only accommodate linear cross aisles. To find the points of intersection on the cross aisles and the sides of the warehouse, we used a central P&D point and a manual local search to find the best point (see Table B.13 in Appendix for details). Then, we insert two P&D points at the 
                           
                              1
                              /
                              3
                           
                         and 
                           
                              2
                              /
                              3
                           
                         point of the bottom in order to compare with Design A2. Fig. 13
                        a shows the modified Flying-V with linear cross aisles that is generated by the warehouse representation module in our tool. For equally capacitated warehouses, Fig. 13b shows the percent improvement in expected travel distance of Design A2 and the modified Flying-V compared to the equivalent traditional design.

In design problem B, P&D locations are placed in the middle of the top and the left sides of the warehouse in accordance with the main cases of the one and two cross aisle models. The model results are then transformed to a symmetric case for better understanding of the aisle angles and representing the actual problem in Fig. 10. With the appropriate locations of P&D points, the performance of Layout C in small, medium and large warehouses is shown in Table 3
                        .

The improved design with one inserted cross aisle (Design B1) is shown in Fig. 14
                        a. The cross aisle originates from the bottom P&D point and intersects with the top side of the warehouse with an angle of approximately 123°. The model seems to save some pallet locations closer to the left P&D point by placing the cross aisle farther away from the upper-left corner. Picking aisles in the right region form approximately a right angle with the cross aisle, resulting in improved travel from the left P&D point to the right storage area, while the worst travel path from the bottom P&D point to the right is still rectilinear travel. The angle of the picking aisles in the left region is approximately 180°. Therefore, while the travel from the bottom P&D point to the left region enjoys fishbone-like travel, the worst travel path from the left P&D point to the left storage area is still rectilinear travel. The solution balances the improvement in travel paths from both of the P&D points, such that there is a rectilinear travel path for some storage locations and an improved path for other locations. See Table C.14 in Appendix C for details. Design B1 offers improvement of 1.4% for an equally capacitated, medium warehouse, and it requires 5.3% additional warehouse space (Table C.16, Fig. 15
                        a).

A design with two inserted cross aisles (Design B2) is shown in Fig. 14b. Table C.17 in Appendix C shows the lowest expected travel distances obtained by the heuristic model in each run. The angles of the picking aisles in the right (
                           
                              
                                 
                                    α
                                 
                                 
                                    R
                                 
                              
                           
                        ) and left (
                           
                              
                                 
                                    α
                                 
                                 
                                    L
                                 
                              
                           
                        ) regions are approximately 74° and 8°. The angle of the picking aisles in the central (
                           
                              
                                 
                                    α
                                 
                                 
                                    C
                                 
                              
                           
                        ) region is approximately 135° so that it forms a right angle with the cross aisle originated from the bottom P&D point. Thus, (1) while travel from the bottom P&D point to some portion of the central storage area is improved, travel to the other portion requires a rectilinear travel and (2) travel from the left P&D point to the central region is slightly improved. On the other hand, for travel from the left P&D point to the right region and travel from the bottom P&D point to the left region, central picking aisles provide shortest paths to the farthest locations from the P&D points. Table C.18 in Appendix C gives details.

Design B2 offers 6.1% improvement in expected travel distance, but requires an impressive 14.4% increase in space. Fig. 15b shows the performance of Design B2 over equally capacitated Layout C, and Table C.19 shows the design parameters in details for the expanded Design B2.

In this section we locate one P&D point at the center of the bottom and top sides of the warehouse. The performance of Layout A for this P&D point configuration is shown in Table 4
                        .

The improved aisle design with one cross aisle (Design C1) is shown in Fig. 16
                        a. The cross aisle originates from the bottom P&D point through the upper-right corner with an angle of approximately 45°. The angles of the picking aisles on the right and left sides of the cross aisle are approximately 165° and 98°, respectively (see D.21 in Appendix D for details). Because our model calculates the shortest travel path to storage locations, there are two potential travel paths to reach the right storage area from the bottom P&D point: (1) travel along the angled cross aisle, then into the appropriate picking aisle, (2) travel along the bottom cross aisle and appropriate picking aisle. Hence, there is an indifference point in each picking aisle that has the same travel distance from both travel paths (Gue & Meller, 2009).

Design C1 offers 2.9% improvement in expected travel distance, but requires 8.2% more space than a medium Layout A. The performance measures of Design C1 for equally capacitated warehouses are plotted in Fig. 17
                        a; details are in Table D.22 in Appendix D.


                        Fig. 16b shows the improved aisle design (Design C2) with two inserted cross aisles. As we would expect, a cross aisle originates from each of the P&D points. The angles of picking aisles in the right (
                           
                              
                                 
                                    α
                                 
                                 
                                    R
                                 
                              
                           
                        ), left (
                           
                              
                                 
                                    α
                                 
                                 
                                    L
                                 
                              
                           
                        ) and central (
                           
                              
                                 
                                    α
                                 
                                 
                                    C
                                 
                              
                           
                        ) regions are consecutively 160°, 161°, and 108°. Details are in Table D.24 in Appendix D.

Travel from the bottom P&D point to the right storage area is the same as in Design C1. Additionally, the angle of picking aisles in the right region seems to facilitate travel from the top P&D point to the right storage area through the picking aisles in the central region. Also, note that the storage locations in the right region are the farthest locations to the top P&D point. Although the model loses some improvement from the bottom P&D point to its closest locations in the right region, it increases the improvement in travel from the top P&D point to these locations with an appropriate angle in the central (
                           
                              
                                 
                                    α
                                 
                                 
                                    C
                                 
                              
                           
                        ) region. Travel to the central region from both of the P&D points is also improved by 
                           
                              
                                 
                                    α
                                 
                                 
                                    C
                                 
                              
                           
                        .


                        Tables D.23 and D.24 in Appendix D show the results for different warehouse sizes. Design C2 with an equal capacity offers a 9.8% improvement in expected travel distance, but requires 11.7% more space than an equivalent, medium Layout A (see Fig. 17b and Table D.25 for details). As expected, Design C2 is significantly better than Design C1 for this choice of P&D points.

In this section we locate four P&D points at the periphery of a unit-load, square-half warehouse. The performance of Layout C for different size warehouses with these P&D points is presented in Table 5
                        .

In Fig. 18a
                        , Design D1 shows the best one cross aisle design for problem D. The angles of picking aisles in the regions below (
                           
                              
                                 
                                    α
                                 
                                 
                                    R
                                 
                              
                           
                        ) and above (
                           
                              
                                 
                                    α
                                 
                                 
                                    L
                                 
                              
                           
                        ) of the cross aisle are approximately 85° and 94°. It seems that these picking aisles are slightly slanted so that the model reduces the expected travel distance by both slightly improving the travel path and mainly by reducing the storage capacity. Design D1 does not offer any savings in expected travel distance over an equally capacitated Layout C because the travel efficiency gained by the angled aisles does not compensate for the increase in travel distances due to the larger warehouse space. The model is essentially “playing tricks” to reduce the objective function value, as we illustrated in Fig. 9. Detailed computational results and design parameters for Design D1 are in Appendix E.

We also investigated a design with two cross aisles for problem D, but the result (Design D2 in Fig. 18b) does not offer any savings in expected travel distance for the same reason Design D1 failed to offer improvement. Fig. 19
                         shows the performance of Design D1 and Design D2 over Layout C.

We ran our experiments on a computer running on 4GB 667MHz RAM and a 2.00GHz Intel Core 2 Duo processor. The average computational time in five runs for small, medium and large warehouses in each design problem is in Table 6
                     . In order to show the robustness of the algorithm, we also present the gap between the highest and the lowest expected travel distances among the best results we obtained in each run for different sizes of warehouses. The gap as a percentage is 100×(the highest 
                        
                           E
                           [
                           C
                           ]
                        
                      – the lowest 
                        
                           E
                           [
                           C
                           ]
                        
                     )/(the lowest 
                        
                           E
                           [
                           C
                           ]
                        
                     ). The best solutions the model produced in each run are relatively close to one other (average gap is about 0.37% with a standard deviation of 0.30%), even though the angles of aisles in these solutions are slightly different due to the randomness of the PSO algorithm.

In our simulations, we observed that the average number of iterations to find the best solution in each run is about 712 with a standard deviation of approximately 96 iterations. There were only two times that the model executed more than 1000 iterations to obtain a better solution.

In our model we use two different repair functions; the first one is for adjusting the velocity of particles in order to avoid intersecting cross aisles and to keep the variables in their boundaries; the second is for separating cross aisles to ensure a reasonable design. We observed that the first repair function is mainly used in two cross aisle models with approximately 30% of the iterations on average. It is used in one cross aisle models for approximately 9% of the iterations on average. We observed that the computationally expensive part of an iteration—almost 99% of the time—is generation of the network and evaluation of the shortest expected travel distance from P&D points to all storage locations. This definitely shows that generation of the warehouse network and computing shortest travel distances to all locations should be improved for design problems in more complex environment than this such as order-picking.

@&#CONCLUSIONS@&#

The main contribution of our work is to show that unit-load warehouses with multiple, highly dispersed P&D points can benefit from alternative aisle designs. For example, in a warehouse with two P&D points at the bottom (representing, say, two stretch-wrap machines), a two cross aisle solution offers 9–12% benefit over a traditional design. For two P&D points on adjacent sides, a new design offers 5–6% benefit. The design problems we have considered in this paper are nominal rather than actual, and are intended to give insight into the potential benefit of non-traditional aisle designs for unit-load warehouses having multiple points of entry and exit.

The results also suggest that the potential benefit of alternative aisle designs depends highly on the number and locations of P&D points. It appears that the greater the number and dispersion of P&D points, the less the opportunity for benefit, which is consistent with the intuition that cross aisles are most effective when they facilitate travel to a “hot spot” of worker activity, such as a stretch-wrap machine or small group of dock doors (Gue et al., 2012). Said another way, adding a cross aisle to facilitate flow to one P&D point almost always disturbs flow to another. The challenge is to add aisles reflecting this tradeoff.

A second contribution is a constructive warehouse design model that could be used by the research and practicing communities to solve their respective problems. The ability to accommodate a highly dispersed collection of P&D points makes the model more general than existing constructive design models (Gue & Meller, 2009; Öztürkoğlu et al., 2012). Although we have focused exclusively on minimizing expected travel distance to a set of equally-important P&D points, the model could be modified to accommodate other objectives.

It is important to note that, with the possible exception of Design D1, none of the designs produced by the model were predicted by the authors’ intuition, and some were pleasantly surprising (A2, B2, and C2, in particular). That the model would produce designs beyond the user’s imagination is strong justification for its utility.

Finally, embedded in the design model is a simple encoding for one- and two-cross aisle warehouses consisting of a simple set of real numbers. This seemingly small contribution was actually an important solution to a previously perplexing design problem—how to represent the physical aisle structure of a warehouse in a way that can be easily manipulated to generate candidate designs. Our use of the encoding to design unit-load warehouses is, we hope, just the first of a collection of papers in warehouse design by the research community.

@&#ACKNOWLEDGEMENTS@&#

This research was supported in part by the National Science Foundation under Grants DMI-0600374 and DMI-0600671. The authors thank Alice Smith of Auburn University for her valuable advice on the use of adaptive optimization techniques.


                     
                        
                           
                              
                              
                                 
                                    Initialize 
                                          
                                             
                                                
                                                   x
                                                
                                                
                                                   isd
                                                
                                             
                                          
                                        randomly between its bounds 
                                          
                                             (
                                             
                                                
                                                   L
                                                
                                                
                                                   d
                                                
                                             
                                             ,
                                             
                                                
                                                   U
                                                
                                                
                                                   d
                                                
                                             
                                             )
                                          
                                       
                                    
                                 
                                 
                                    Initialize 
                                          
                                             
                                                
                                                   v
                                                
                                                
                                                   isd
                                                
                                             
                                          
                                        randomly within 
                                          
                                             [
                                             -
                                             
                                                
                                                   V
                                                
                                                
                                                   max
                                                
                                             
                                             ,
                                             
                                                
                                                   V
                                                
                                                
                                                   max
                                                
                                             
                                             ]
                                          
                                       
                                    
                                 
                                 
                                    Convert encoding of start and end points of cross aisles to 
                                          
                                             (
                                             x
                                             ,
                                             y
                                             )
                                          
                                        points
                                 
                                 
                                    Evaluate the cost of design for 
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   is
                                                
                                             
                                          
                                        by Evaluator module
                                 
                                 
                                    
                                       Do { 
                                          
                                             ∀
                                             s
                                             ∈
                                             F
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       Do { 
                                          
                                             ∀
                                             i
                                             ∈
                                             
                                                
                                                   I
                                                
                                                
                                                   s
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       Find personal best 
                                          
                                             
                                                
                                                   P
                                                
                                                
                                                   is
                                                
                                             
                                          
                                       , and update it, if needed.
                                 
                                 
                                    
                                       
                                       Find global best 
                                          
                                             
                                                
                                                   G
                                                
                                                
                                                   s
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       Calculate 
                                          
                                             
                                                
                                                   v
                                                
                                                
                                                   isd
                                                
                                             
                                          
                                        and 
                                          
                                             
                                                
                                                   m
                                                
                                                
                                                   isd
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       If needed, use repair function to separate cross aisles
                                 
                                 
                                    
                                       
                                       Convert encoding of start and end points of cross aisles to (
                                          
                                             x
                                             ,
                                             y
                                          
                                       ) points
                                 
                                 
                                    
                                       
                                       Update the particle 
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   is
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       Construct pallet locations and the network using appropriate modules
                                 
                                 
                                    
                                       
                                       Evaluate the cost of design for 
                                          
                                             
                                                
                                                   X
                                                
                                                
                                                   is
                                                
                                             
                                          
                                        by Evaluator module
                                 
                                 
                                    
                                       }
                                 
                                 
                                    } Until termination criterion is met.
                                 
                              
                           
                        
                     
                  

Supplementary data associated with this article can be found, in the online version, at http://dx.doi.org/10.1016/j.ejor.2013.12.023.


                     
                        
                           
                        
                     
                  

@&#REFERENCES@&#

