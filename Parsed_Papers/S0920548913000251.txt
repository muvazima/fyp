@&#MAIN-TITLE@&#Improving simulation of wireless networked control systems based on WirelessHART

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We improved the available simulation models of WirelessHART devices.


                        
                        
                           
                           We interfaced the proposed enhanced models with an existing co-simulation tool.


                        
                        
                           
                           Control networks based on WirelessHART can be simulated with more details.


                        
                        
                           
                           The co-simulation of coexistence issues of WirelessHART is now improved.


                        
                        
                           
                           Comparison between WirelessHART and IEEE802.15.4 is possible.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Co-simulation

Wireless industrial communications

Wireless networked control systems

Real-time systems

@&#ABSTRACT@&#


               
               
                  Recently, WirelessHART (2007) and ISA100.11a (2009) have been proposed as communication standard for a wireless fieldbus. However, Wireless Networked Control Systems performances are hard to verify in the real world, since test beds are expensive and difficult to implement.
                  This paper proposes the use of a co-simulation framework based on the interaction of TrueTime, together with a cross layer wireless network simulator based on OMNET++. In particular, OMNET++ models show accurate aspects of network and devices, for improving overall coexistence management.
                  A sample system controlled by a WirelessHART network has been considered; the analysis of the control performance and coexistence immunity of WirelessHART with respect to the traditional IEEE802.15.4, has been done.
               
            

@&#INTRODUCTION@&#

Process and servo control systems are nowadays implemented as networked control systems (NCSs) where control and feedback signals are exchanged among the devices through a network, usually a fieldbus. Traditionally, even in NCS, control algorithms are usually designed supposing an instantaneous information exchange between sensing and actuating elements, while data exchange over networks introduces network time delays and possible packet losses. Such situation could lead to severe and unpredictable degradation on the system performance, depending on the application [1,2]. For this reason, a post design verification phase, typically performed by means of simulations, is needed. In NCS both control algorithms and communication must be simulated. There are several tools purposely designed to estimate performance of communication systems, usually based on discrete event simulator for network protocols and real-time scheduling of controller tasks. On the contrary, system modeling and control algorithm implementations, like ordinary differential equations (ODEs), are based on continuous time simulations. The simulation of NCSs needs to integrate both the “simulation styles” in the so-called co-simulation approach. Executing both network and control system simulations at the same time may improve simulation accuracy, and it also allows to study the interaction between adopted communication and control strategies, thus maximizing overall performance.

Co-simulation is particularly important if wireless NCSs (WNCSs) are considered, since such systems suffer from the lower reliability and non-deterministic behavior of the wireless link [5–7] with respect to the wired counterpart [3,4]. In literature some works related to statistical performance analysis [14–16] and discrete time simulation [17,18] of well-known standard communication protocols for industrial process automation like WirelessHART [11,12] and ISA100.11a are available [13]. However, according to the author's knowledge, a purposely tailored co-simulation tool is still missing.

As better described in the following section, the most known co-simulation tools for (W)NCS are PiccSIM [8,9] and TrueTime [10] together with MATLAB. Unfortunately, these tools are oriented to general purpose application; referring to wireless communication solutions, they fit IEEE802.15.4 and IEEE802.11 very well, but lack details for properly simulating the new wireless fieldbus for industrial process control. The most critical aspects of these protocols are related to the time-keeping synchronization mechanism they use for medium access (i.e. time division multiple access), which is usually not taken into account by available co-simulation tools. Also the wireless channel model is usually simplified; it only takes into account additive white Gaussian noise (AWGN) and thus coexistence with other co-located wireless systems cannot be easily evaluated. It should be highlighted that coexistence is one of the main reasons behind the need of simulation and measuring tools [19–21]. Moreover, specific international standards on coexistence (e.g. IEC6257 family standard) are under approval and further investigations may be needed.

For all these reasons, the aim of this work is to propose a modification of a standard co-simulation framework like TrueTime, introducing a detailed simulation model of WirelessHART written in OMNET++. The result will better match the needs of WNCS co-simulation. As an example, the developed simulation tool has been used to compare the performance of a WirelessHART solution with a reference one, based on a bare IEEE802.15.4 implementation, in presence of a strong interferer (i.e. an IEEE802.11 communication system, chosen due to its wide diffusion in home/office applications).

The paper is organized as follows. In the next section, an overview of the co-simulation for NCS is given, and the proposed approach is introduced. In Section 3 a general introduction to WirelessHART is given, while Sections 4 and 5 resume characteristics of the adopted software tools, i.e. the “TrueTime” package and the OMNET++ “UnibsFramework” [21,22], respectively. These notes are introductory to the description of the co-simulator in Section 6. In Section 7 a control network and a reference scenario are described and some simulation results are discussed. Finally, the conclusions are reported.

In literature there are some works regarding co-simulation for the NCSs analysis. In [23] a co-simulation tool based on MATLAB and OPNET that applies the control mechanism over multi-hop mobile ad-hoc networks (MANETs) and takes care about the time-delay problem and the routing algorithm is described. In [24] a tool that integrates an ns-2 extension for the network simulation and an ODE solver is presented. PiccSIM [8,9] is a co-simulation platform in which Simulink (for the dynamical system simulation) and ns-2 (for the network simulation) can run on the same or on different computers since information between the two environments is based on an UDP/IP exchange. At the moment, there are really few works on the co-simulation of WNCSs. TrueTime [10] is a library for Simulink that supports the simulation of both wired and wireless networks, including IEEE802.11 and IEEE802.15.4. TrueTime is a very interesting tool, thanks to the wide diffusion of Simulink for control systems design, but network simulation occurs by means of black box models that are not under user control and often oversimplify some crucial aspects. Thus TrueTime alone cannot be considered a real co-simulation tool.

However, according to the authors' knowledge, no attempts exist to do co-simulation for WNCSs based on the WirelessHART protocol; the only analysis of such WNCSs can be found in [25] and [26], where an extension of the TrueTime package for the WirelessHART protocol is described. The papers show the strength and the weakness of TrueTime simulation. TrueTime limits are highlighted in the network aspect simulation and protocol implementation. In fact, it only allows the simulation of the physical and MAC (medium access control) layers. While the MAC is distributed among the devices, the physical layer is simulated with a centralized approach. Consequently the physical characteristics of the medium are closely related to the simulated protocol and they can hardly be modified according to the considered scenario. The implementation of the communication protocol is not modular and/or organized according to the ISO–OSI stack, but the node has only mimicked the behavior of the WirelessHART medium access arbitration. In [25] and [26] the presence of the network manager is not considered and therefore algorithms for building and maintaining the network cannot be simulated. More importantly, the considered superframe scheduling is trivial and not adequate for a real scenario. For instance, the presence of joining/advertising and synchronization links is not implemented; also the capability to retransmit a packet is not simulated.

Authors developed the UnibsFramework for wireless network simulation under the OMNET++ environment. It has been realized in order to evaluate the coexistence of different networks operating in the same area, modeling the node behavior as they were implemented with real hardware [21,22] including MAC and timing of commercial transceivers.

For all these reasons, the approach of this paper is to link the originally developed UnibsFramework for WirelessHART together with TrueTime and MATLAB to enhance overall co-simulation capabilities. As a result, TrueTime makes it possible to simulate the timing effect of context switching and interrupts handling in a multi-tasking real-time kernel implementation of the control logic of a node. At the same time, UnibsFramework can accurately simulate the performance of the MAC and the wireless link as it were implemented in a real device (including the transceiver).

The feasibility of the approach will be demonstrated implementing a WNCS based on WirelessHART and considering also the effect of interfering wireless communication systems in the same area.

WirelessHART is the first open-standard wireless technology for process industry. Since it shares the same upper layers of the wired counterpart, the migration from one technology to the other is nearly invisible to the final user, thus preserving the legacy know-how. WirelessHART has been officially approved in September 2007 and many real process plants are using it.

WirelessHART is a low cost, relatively low speed (e.g. compared to WLAN-IEEE802.11) wireless fieldbus. It adopts the IEEE 802.15.4-2006 [27] physical layer and operates in the 2.4GHz ISM radio band using 15 different channels with a gross data-rate of 250kB/s. A WirelessHART network is based on a centralized architecture typically composed of a “network manager”, which has one or more “gateways” (including access points [28]) towards “field devices”. The “network manager” device communicates with the “security manager” entity, which manages authentication and data encryption keys. A typical network is shown in Fig. 1
                     . As depicted, network and security managers are very often embedded into the gateway, representing a single physical entity. Handheld devices are used for commissioning/troubleshooting.

The main features of WirelessHART are: synchronized and secure communications; time division multiple access (TDMA) medium access mechanism supported by channel hopping; and fully-redundant mesh routing [12]. In the following some additional details are given.
                        
                           •
                           Time-keeping synchronization: a “time-keeping” mechanism is provided. At least one node behaves as a time-source, i.e. its local clock determines the network time reference. Each time a frame is received, its time of arrival (timestamp) is noted and the difference from the ideal and the actual arrival time is communicated in the acknowledge reply packet. If the destination is a time-source, this time offset can be used to track the network reference time. In the case of long periods of inactivity, an ad-hoc packet (“keep alive”) is sent to maintain clock drift within the guard time. The standard specification requires a synchronization exchange at least every 30s with a clock uncertainty of 10ppm and a temperature change of 2°C per minute (or less).

Medium access control: the TDMA mechanism is based on 10-ms wide time slots. Each time-slot may host a communication opportunity (i.e. a link) between a source and a destination. Links are organized into a pre-determined repetitive scheduling structure called superframe. In order to counteract interferences, the transmission channel is changed on a message basis by means of channel hopping; if needed, it is also possible to exclude communications over the channels already occupied by means of blacklisting.

Fully-redundant mesh routing: WirelessHART implements path redundancy thanks to “full-mesh” topology; each node may act as a router forwarding the incoming message along a route computed by the network manager. Thanks to the centralized approach, field device complexity is kept low.

Data security: all communications must be encrypted. A preliminary join key (furnished by means of an “out-of-band” device) is used for the binding process; successively, all the transactions are ciphered at both the network and session levels thanks to dynamically changed keys. In particular, the AES 128 encryption mechanism is used. It must be noticed that packet integrity is checked evaluating a “message integrity code” checksum, thus lowering computational time.

The HART Communication Foundation (HCF), as well as other research groups, has provided measurement tools for commissioning and diagnosis of industrial plants [29,30].

The UnibsFramework for wireless network simulation adopts a multi-tier multi-layer approach [31]. The framework is based on the OMNET++ environment and it is made up of hierarchically nested (compound) modules that communicate with each other by exchanging messages. This modular approach has been pursued in order to simulate different protocols with the same hardware or vice versa. A compound module called “node module” describes a single wireless node, as shown in Fig. 2
                     . The protocol tier comprises all the communication protocols; within this tier a traditional multi-layer partitioning has been performed according to the ISO/OSI model; in particular, models of the PHY, MAC, NWK and APP layers have been described. The physical tier represents the underlying hardware, including the RF transceiver and front end; it has been distinguished between protocol primitives (PhyProtocol module) and RF transceiver and analog front end (transceiver and antenna modules). It should be noted that the physical tier of the UnibsFramework is the main improvement to co-simulation of WNCS, with respect to other existing tools.

Tiers are partially interconnected by means of the logic module; for example, the battery module within the physical tier needs to be informed on packets transmission or reception by the protocol tier so that the energy consumption is updated accordingly. All the nodes constituting a network are collected within another compound module. Interactions among different networks may occur by means of two other modules that mimic the backbone link and the shared wireless medium.

In the next subsections, a brief description of the most important parts of the UnibsFramework is given. Again, the description is focused on how the wireless medium, the node clock drift, and power consumption are simulated; they are the most innovative parts in the field of WNCS.

The framework mimics the actual implementation of the protocol stack in a real device based on the use of primitive functions exchanged through service access points. An accurate implementation of the communication protocol allows for a more detailed simulation of protocol aspects. For example it is possible to associate an execution time for each primitive function.

At the moment, three standards are supported by the framework: IEEE 802.15.4; IEEE 802.11b; and WirelessHART. For the IEEE 802.15.4, the (full) physical (including basic ED — energy detection and CCA — clear channel assessment modes 1, 2 and 3) and MAC layer implementations are available for both the coordinator and device entities. The implementation includes the three defined modes: beaconless, beacon enabled and beacon enable with GTS (guaranteed time slot). With regard to the IEEE 802.11b standard, an infrastructured network is considered and the main primitives of the physical and the MAC layers for both the AP (access point) and STA (station) nodes are implemented.

Exploiting the IEEE802.15.4 physical layer model previously described, the upper MAC layer and the network layer for both the network manager and field device entities are implemented for the WirelessHART (network management and time-keeping mechanism included). It must be remembered that the standard defines only the primitives, not the algorithms that exploit/implement such primitives. Some works have been reported in literature underlying the importance of route selection in order to ensure network robustness and availability [32]. Since the aim of this paper is to estimate performance of a WirelessHART network in a well-defined scenario, best routing graphs are already available to the network manager. In this way, the routing algorithm does not affect results, but multi hop networks can be implemented. Similarly, also the link scheduling is pre-assigned. The simulator focuses on coexistence aspects rather than on optimal scheduling even if additional algorithms can be added preserving the framework architecture.

Both the normal behavior of the network and the preliminary building phase can be simulated: configuration of the superframe including the advertise links is integrated in the model. Such unique feature helps in simulating coexistence of several wireless systems in the same area, improving effectiveness of the simulations. This is the case for the coexistence analysis of WirelessHART with the other simulated networks that share the same wireless channel. In addition, as explained in the next sub-section describing the wireless channel, the effect of an IEEE802.11b interferer can be simulated, too.

Since every radio operates on a channel basis, the “Wireless_Channel” module comprises several sub-modules “Ch” each one dedicated to a particular frequency channel, whose aim is to determine which nodes correctly receive the sent packet. Simulation results are greatly affected by the behavior of such sub-models; great attention is paid in order to guarantee adherence to real world experiments preserving the simplicity of the model itself. The WirelessHART physical layer (based on IEEE802.15.4-2006) adopts the M-ary direct sequence spread spectrum (DSSS) modulation; this well known technique joins advantages of DSSS with orthogonal signaling [33]. The processing gain, resulting from the bandwidth expansion given by the DSSS coding, improves the noise immunity at the receiver. In addition, the user signal is sent by means of an M-dimensional set of orthogonal symbols, thus improving symbol detection thanks to their good auto-correlation and poor cross-correlation. Rather than using different M carriers, e.g. as it occurs in M-frequency shift keying (M-FSK), groups of k=log2(M) information bits are mapped into one of M pseudo noise (PN) sequences of chips modulated by an offset-quadrature phase shift keying with half sine pulse shaping (OQPSK-HSS). Obviously, increasing the orthogonality of the PN sequences enhances of the overall performance.

Starting from these assumptions and considering spectral masks of the IEEE802.15.4 and IEEE802.11b radios, the signal to interference noise ratio (SINR), and the packet and the bit error rate (PER and BER, respectively) are derived, following the approach described in [19].

As an example, look at Fig. 4
                        
                        , where the PER is shown as a function of interferer distance and carrier offset. In this case, the level of the signal received by the IEEE802.15.4 node is 10dB above the nominal sensitivity (i.e. −75dBm, which corresponds to a distance between nodes of about 25m with a transmitting power of 0dBm, according to the adopted path loss model), the packet length is L=22 bytes and the interferer IEEE802.11b transmits at 14dBm.

From the simulation point of view, the incoming packet must be preliminarily divided into several periods of stationarity (POS) [34]. A POS is the time interval during which the interference is constant, i.e. the SINR is constant (a collision occurs only if the interfering packet overlaps the user packet in the time and frequency domain). In each POS, the SINR and the BER may be computed. Subsequently, a decider block discards or recognizes the incoming packet. The simplest and fastest way to implement the decider is to compare the actual SINR value against a SINR threshold (Fig. 4): digital modulation exhibits a sort of on/off behavior as a function of the environmental noise [35,36]. In addition, an “error allocation” algorithm is provided; it is based on the knowledge of the BER. In this case the bit error count is obtained by mapping a uniform random number in the range [0–1] via the inverse of the cumulative mass function (CMF) for the bit error count (binomial) distribution. The same algorithm is used, for instance, as a default in the pipeline stage “error allocation” of the OPNET simulator [37]. A pictorial description of the interference estimation process is given in Fig. 3.

As already said, besides WirelessHART the developed wireless channel model supports also systems adopting contention-based medium access strategy, like IEEE802.11 and IEEE802.15.4: when enabled, it performs the selected CCA procedure before it starts transmitting and waits for a backoff delay among successive retransmissions.

Models in the simulator evolve by discrete steps. However, it is crucial for correct results to take into account the behavior of the real clock of a device. A simplified model derived from [38] has been adopted. The timer module calculates deviations from ideal simulation time by means of the relationship reported in Eq. (1):
                           
                              (1)
                              
                                 
                                    Δ
                                    
                                       t
                                       d
                                    
                                    =
                                    Δt
                                    ⋅
                                    
                                       
                                          1
                                          +
                                          
                                             υ
                                             d
                                          
                                       
                                    
                                    +
                                    
                                       X
                                       d
                                    
                                 
                              
                           
                        where Δt is the nominal (ideal) time interval, Δtd is the actual one, υd is the drift and Xd is a stochastic process whose probability density function N(0,σd) takes into account small random fluctuations. The actual timer module is built on the architecture of the Freescale MC13192 [39], but it can be easily adapted to other transceivers [45].

The transceiver module has been designed to effectively simulate the state machine of a real device; in the simplest implementation, four different states have been identified: transmission (TX); reception (RX); idle; and low power (DOZE). Currently the module imitates the architecture of the transceiver MC13192 from Freescale [39], but it can be easily modified to other hardware solutions. Information related to the time spent in different transceiver state is used by the battery module to estimate the power consumption. Obviously, the value of current absorbed from the transceiver depends on the state in which the device is currently located.

The battery remaining capacity [Ah] is computed by means of a very simple linear model:
                           
                              (2)
                              
                                 
                                    C
                                    =
                                    
                                       C
                                       init
                                    
                                    −
                                    
                                       
                                          
                                             ∫
                                             t
                                          
                                          
                                             I
                                             
                                                t
                                             
                                             dt
                                          
                                       
                                    
                                 
                              
                           
                        where Cinit is the initial capacity and I(t) is the overall system consumption. This is only a first order approximation of the behavior of a real battery, since it is assumed that there are no self-discharges and no aging effects. However, more detailed battery models, as those described in [40], can be added.

TrueTime, a MATLAB/Simulink-based simulator for networked and embedded control systems, has been developed at Lund University since 1999 [10] in order to take into account the cyclic nature of controller tasks (e.g. based on programmable logic controller — PLC) and the related latencies. The combination of TrueTime and MATLAB allows simulating task execution and network communication of a WNCS. In particular, the TrueTime kernel block simulates a device node with a generic multitasking real-time kernel, A/D and D/A converters. The TrueTime network block simulates the physical layer and the medium-access layer of various local-area networks. The types of networks supported are ethernet, CSMA/AMP (carrier sense multiple access/arbitration by message priority), round robin (token bus), FDMA (frequency division multiple access), TDMA (time division multiple access), switched ethernet, WLAN (IEEE802.11b) and ZigBee (IEEE802.15.4). However, only the medium access is simulated (in particular collisions due to packet temporal superposition), and it is limited to a node belonging to the same network. Such blocks cannot be modified by the user and must be used as they are.

The approach proposed in this paper combines the UnibsFramework with TrueTime and MATLAB for improving the co-simulation of real WNCSs adding simulation details on the wireless communications and the dynamics of the environment. According to the authors' knowledge, it is the first time that a traditional discrete time simulator based on OMNET++ has been used in conjunction with the TrueTime environment.

The TrueTime–UnibsFramework co-simulation architecture is shown in Fig. 5
                     . The two tools run on the same computer and execute in parallel and interactively, sharing the same simulation time (i.e. environments are synchronized). The connection between them is built using the IPC (inter process communications) Unix/Linux shared memory mechanism [41]. Through this mechanism, TrueTime creates a memory area which UnibsFramework can access and/or modify. Both environments have their own simulation time and a time synchronization mechanism must be implemented. The TrueTime environment dictates how the network evolves (i.e. it holds the reference time) and the OMNET++ counterpart handles delays imposed by wireless data exchanges. A emaphore is used in order to ensure data consistency.

For each device of the plant control network (sensor, controller, and actuator) there is a Simulink model and a UnibsFramework node. The Simulink devices read and write buffers that are MATLAB workspace variables. The “OMNET++ interface” block synchronizes the data reading and data writing from the buffer device from/to the shared memory. On the other hand, the “MATLAB/TrueTime interface” block within the UnibsFramework continuously polls the semaphore which regulates the access to shared memory. Every time a new data should be transmitted, the MATLAB/TrueTime interface block passes it to the sender device and the wireless communication is simulated in the OMNET++ framework. If the data arrives at the destination node, the interface block is responsible for passing it, through the shared memory, to the corresponding Simulink device at the right time.

The aim of the simulations described in the following is to demonstrate the feasibility of the proposed co-simulation approach. In particular, a WNCS based on WirelessHART is evaluated in different environmental scenarios and in the presence of other interfering wireless systems adopting IEEE802.11b. In order to foresee further applications of the proposed framework, the same WNCS has been implemented using the widely accepted IEEE802.15.4 standard and results have been compared.

WirelessHART has been designed for industrial process automation; many examples of control loop can be inspired by real systems. However in this paper, in order to maintain a direct comparison with previous work in the literature, the reference control network is inspired to the one described in the paper [26], without losing generality. The considered setup is simple, but allows showing advantages of the proposed approach with respect to works present in literature [25,26].

The control network (Fig. 6a and b) consists of a simple DC servomotor system composed of a sensor (tachometer), a controller and an actuator (servo amplifier). In this system there is only one control loop in which the controller processes the information received from the sensor and compares it to the reference signal. Finally, the process value is sent to the actuator device. The sensor to controller (feedback link) and controller to actuator (control link) communications are provided by a four-node WirelessHART network. Other than the sensor, controller and actuator devices, there is also a node embedding network and security manager functions. The physical link with the network is established thanks to an access point (AP) embedded in this block.

With respect to the approach described in [26], some improvements in the WirelessHART network model are proposed. A more realistic superframe has been considered. The whole protocol stack is simulated and information exchange occurs at the application level. Links for retransmission are added to mitigate the effect of interference, which usually has a bursty nature (i.e. it is localized in time). Since it is supported by the proposed model, the timekeeping mechanism of the protocol is explicitly taken into account and communication links dedicated to the node synchronization have been added.

The DC motor has been modeled with a stable first order transfer function:
                           
                              (3)
                              
                                 
                                    G
                                    
                                       s
                                    
                                    =
                                    
                                       K
                                       
                                          1
                                          +
                                          s
                                          τ
                                       
                                    
                                    =
                                    
                                       0.25
                                       
                                          1
                                          +
                                          2
                                          s
                                       
                                    
                                 
                              
                           
                        where K and τ are the motor torque and time constant, respectively. The simulations are carried out using a proportional–integral (PI) controller, commonly used in industrial networks, whose continuous-time parameterization is shown in the next equation:
                           
                              (4)
                              
                                 
                                    C
                                    
                                       s
                                    
                                    =
                                    Kc
                                    +
                                    Kc
                                    /
                                    s
                                    Ti
                                 
                              
                           
                        where Kc and Kc/Ti are the proportional and integral gain, respectively. The chosen parameters for the digital PI controller are Kc=3 and Ti=1.65.

The WirelessHART protocol imposes each device to handle at least 16 different superframes (each one consisting of 10-ms timeslots) in order to satisfy different bandwidth requirements; in particular one superframe is always enabled while additional superframes can be enabled or disabled. As stated before, the proof-of-concept simulation described in the following aims to prove the proposed co-simulation approach and verifies the capability of the WirelessHART protocol to handle (slow) control loops. For this reason, instead of implementing a set of multiple superframes for data and control messages, which could improve power efficiency but doesn't modify the traffic over the air, a simpler scheduling has been chosen. In particular, communication takes place within a single 1s wide superframe.

The timeslots and task scheduling are shown in Fig. 6c, where “C” means the controller, and “S” and “A” refer to sensor and actuator, respectively. It must be remembered that a communication between a source and a sink can occur only if a “communication link” (i.e. a communication opportunity among “radio neighbors”) has been preliminarily established. Each link generally consists of a MAC layer data packet and a subsequent MAC layer acknowledgment (ACK) packet. In addition, each link has associated its own RF channel sequence, in order to exploit all the available bandwidth (channel hopping). From the application level point of view, WirelessHART is a master–slave protocol based on commands; the master is defined as a device that initiates communication activity by sending a request, while the slave is a device that initiates communication activity by sending a response. In the considered scenario the controller “C” acts as a master, while the sensor “S” and the actuator “A” are slaves. The feedback connection is implemented by means of command 1, while the control connection exploits command 79. Thus four data packets each followed by an ACK are needed to complete a cycle. The command 1 request is 44B (1.4ms at 250kbps) long while the response is 49B (1.6ms at 250kbps) long. The command 79 request is 52B (1.7ms at 250kbps) long while the response is 52B (1.7ms at 250kbps) long.

At the beginning of the superframe (0ms in Fig. 6c), the sensor device reads the process output and stores it in its buffer. This measurement is sent to the controller by means of the “S-C Req” and “S-C Res” communication links (feedback connection, look at Fig. 6b). The controller calculates the corresponding action imposed by the control law and sends its value to the actuator by means of the “C-A Req” and “C-A Res” communication links (control connection, look at Fig. 6b). Finally, the actuator acts on the process after 500ms from the sensor reading (system dead-time of 500ms).

In Fig. 6c, it is also shown that the “JOIN” communication link is used in the network creation by the network manager (via the advertise packet). The “DISK” communication link can be used to perform neighbor discovery operations. The controller, the sensor and the actuator are all network devices of the considered simulation test bed. Nodes must be somehow synchronized with the time reference hosted by the network manager. The “time keeping” mechanism is performed at least every 30s, as imposed by the standard, via the three synchronization links “S syncro” for the sensor, “C syncro” for the controller and “A syncro” for the actuator, as indicated in [12]. Additional communication links (not shown in Fig. 6c for the sake of simplicity) are provided within the superframe to allow packet retransmissions in the event of packet losses.

The adopted figure of merit is the ability to track the reference signal, which is a square wave with 50% duty cycle and a 60s period time.

First of all, the control system has been simulated supposing that information among devices is transferred instantly. This case is equivalent to a simulation where only the TrueTime environment is used and neither the UnibsFramework nor the wireless channel is activated. The process output (the speed of the servo motor) is plotted in arbitrary units against the reference signal in Fig. 7
                        . Obviously, the system is stable and the delay is only due to the inertia of the (first order) system.

Subsequently, the performance of the wireless network control system implemented by means of WirelessHART is evaluated. In particular, the control system is tested with the presence of a WLAN (IEEE 802.11b at 11Mbps) interferer. The cases were studied with a desired signal power at the receiver node of 10dBm above the minimum sensitivity and a single IEEE 802.11b interfering link. The geometrical model of the simulation is shown in Fig. 8
                        ; nodes are arranged in a symmetrical fashion, so that both the sensor and the actuator are affected by the interferer (i.e. the WLAN station) in the same way; the WLAN access point is located so that it does not affect the WirelessHART transmission.

With regard to timing, all the nodes are synchronized with the network manager and each one has a random drift chosen within the interval [−10–10] ppm, as imposed by the WirelessHART standard. Additional simulations have been carried out also with a ±40ppm drift, as required by the less restrictive specs of IEEE802.15.4 [27]. Since the WirelessHART standard does not specify a synchronization algorithm, but only requires the respect of a [−1–1] ms guard time window in the transmission of a frame, a simple PI (proportional and integral) servo clock satisfying such requirement has been modeled. This choice implies that frames are always sent in time and their loss is only due to collisions.

The simulations are carried out varying the distance between the affected network and the interfering node, and varying the traffic load of the interfering node. The distance varies in three discrete steps: 4m, 10m and 80m: using the approach described in Section 4.2. the resulting average SINR at the WirelessHART receiver is −32dB, −23dB, and +7dB respectively. The latter value (80m, 7dB) represents an ideal condition: no collisions occur, since an incoming packet is discarded if the SINR falls below 5dB [36]. The WLAN communication occurs in the first non-overlapping channel centered around 2412MHz, as shown in Fig. 9
                        .

In this work, the interfering WLAN uses the energy detection method (CCA mode 1) to determine the channel state rather than the carrier detection method (CCA mode 2), so that the interfering network is able to “hear” the affected network and vice versa. On the contrary, the WirelessHART links use all the available channels (i.e. from channel 11, centered on 2405MHz, to channel 25, centered on 2475MHz, since the channel 26 is not used in WirelessHART) and the CCA mode 2 is disabled (even if it is supported by the model).

All the simulation parameters are resumed in Table 1
                        . It must be underlined that, instead of using a simple variable duty cycle for the interfering network traffic (i.e. the active part of a repetitive traffic cycle represents the interfering signal) as in [42], the considered system reproduces a true WLAN data exchange. For example, for each packet CCA operation, acknowledge reply and timing characteristic of the IEEE802.11b standard are considered.

With regard to the traffic load, two different average throughput values are considered: 512kB/s and 1024kB/s. These values are chosen to simulate a realistically high and a worst case channel occupation by the WLAN interferer: for instance, as reported in [43], the exchange of a large file across a WLAN link between an FTP client and an FTP server reaches an average channel utilization rate of about 56%. Such a scenario has been also considered for WLAN in industrial environments, where it is usually adopted as a substitute of (wired) ethernet links. In particular, WLAN is likely to be part of the plant backbone in the so called manufacturing zone, thus transferring a (relative) high amount of data due to aggregation. In order to replicate these characteristics, the simulated WLAN traffic is periodically generated and distributed into sub-period intervals of 100ms, as shown in Fig. 10
                        . In the case of a 512kB/s average throughput, 50 packets are transmitted in each 100ms sub-period. In order to avoid an interference pattern correlation between the control network and WLAN communications, a random offset uniformly distributed in the range [−5–5] ms is added between consecutive sub-periods. The transmission of 50 data packets (each one with a length at the physical level of 1024bytes) requires about 46ms, while less than 10ms is needed to send 50 ACK packets (each one with a length at the physical level of 38bytes); consequently, the net channel utilization is ≈56% in each sub-period. The rest of the time is spent in performing the CCA operation, and in waiting for interframe gap expiration (the protocol stack processing delay is ignored).

For the 1024kB/s traffic load, the approach is the same but 100 data packets without acknowledgment are transmitted in each 100ms sub-period. Thus the channel occupation rate is about 92%, i.e. the interferer is always present.

In Fig. 11
                         simulation results are resumed. As expected, when the interferer distance is 80m, the control networks behave just like in the ideal conditions (compare with Fig. 7).

The results shown in Fig. 11 demonstrate that it is possible to use WirelessHART for closed-loop process control, as also suggested by some preliminary on the field experiments described in literature [44]. The time keeping capabilities of the network have been confirmed, since no effects arise from clock drift with the simple PI servo clock implemented, but great attention must be paid to interferences. Despite the simplifications assumed in the proposed interference model, that doesn't take into account second order effects like multipath fading, noise from machinery and equipment, and non-line of sight, it has been shown that a WLAN node close to the WNCS may completely destroy lower power WirelessHART signals. The proposed proof-of-concept simulation highlights advantages of the proposed co-simulator, which can be easily modified in order to take into account the effects of several intentional or unintentional interfering radiators, allowing for an optimized control design oriented to coexistence management.

In order to prove the flexibility of the proposed approach, a comparison with other commercial available solutions has been carried out. The WirelessHART implementation has been also compared with a beaconless IEEE802.15.4 network (with CCA mode 1 and up to three possible retransmissions), as shown in Fig. 12
                         for an interferer distance of 10m. The IEEE802.15.4 control network transmits on channel 11, centered on 2405MHz (Fig. 9). In this case, the fixed RF channel assignment of a IEEE802.15.4 network leads to worse performance of the controlled system with respect to WirelessHART which uses the channel hopping.

As an additional feature of the proposed co-simulation approach, the power consumption of the radio interface of the network nodes can be obtained. The UnibsFramework models have been loaded with the parameters of the MC13192 transceiver, as obtained from [45]. In order to correctly compare the two solutions, only the consumption related to the process data exchange is considered. The results (Table 2
                        ) show that WirelessHART has higher power consumption than the used IEEE802.15.4 system in any case. The reason is the greater packet size and the guard times imposed by TDMA. However, the better performance of the controlled system obtained by WirelessHART with respect to IEEE802.15.4 fully justifies the use of WirelessHART in process control automation (despite the consumption).

@&#CONCLUSIONS@&#

This paper proposes an improvement to co-simulation framework for WNCS. In particular, an original, accurate, simulation model of WirelessHART written in OMNET++ has been added to a standard co-simulation tool like TrueTime/MATLAB. The resulting framework joins advantages deriving from the adoption of continuous time simulator for complex systems modeling together with accurate wireless fieldbus device simulation obtained with discrete time simulator. The details of the simulation are scalable and can include details on the physical level, as well as power consumption of radio interface based on model of existing transceivers. Analysis of interfering networks can be carried out, greatly improving the coexistence management according to IEC62657.

In order to show the feasibility of the proposed approach, a WNCS system based on WirelessHART and including PI control loop (servo motor) has been simulated in the presence of an IEEE802.11 interferer. The proposed approach can also be useful for comparison of different WNCS implementations, as demonstrated by the simulation of a sample comparison between WirelessHART and IEEE802.15.4 solutions. In conclusion, the proposed co-simulation approach can be profitably used since the designing phase of a new plant.

@&#ACKNOWLEDGMENT@&#

The research activities of this paper have been co-funded by the PRIN 2008 project “Methodologies and measurement techniques for spatio-temporal localization in wireless sensor networks,” grant no. 2008TK5B55, and the PRIN 2009 project “New generation hybrid networks in measurement and industrial automation applications — characterization and wired/wireless performance measurement,” grant no. 2009ZTT5N4. Authors would like to thank Ing. Ivan Lancini, Dr. C.M. De Dominicis and Dr. Francesco Venturini for their useful discussions and for helping in the UnibsFramework implementation.

@&#REFERENCES@&#

