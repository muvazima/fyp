@&#MAIN-TITLE@&#Tool path planning of hole-making operations in ejector plate of injection mould using modified shuffled frog leaping algorithm

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Tool travel and tool switch scheduling are major issues in optimization of hole-making operations.


                        
                        
                           
                           Many industrial applications such as moulds, engine block, automotive parts etc. requires machining of number of holes.


                        
                        
                           
                           It is necessary to achieve a correct sequence of hole-making operations to minimize tool travel and tool switch and finally to minimize total processing cost.


                        
                        
                           
                           In the present work, we have attempted an industrial application example of ejector plate of injection mould using shuffled frog leaping algorithm and modified shuffled frog leaping algorithm.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Hole-making operations

Shuffled frog leaping algorithm

Modified shuffled frog leaping algorithm

Injection mould

Ejector plate

@&#ABSTRACT@&#


               
               
                  Optimization of hole-making operations in manufacturing industry plays a vital role. Tool travel and tool switch planning are the two major issues in hole-making operations. Many industrial applications such as moulds, dies, engine block, automotive parts etc. requires machining of large number of holes. Large number of machining operations like drilling, enlargement or tapping/reaming are required to achieve the final size of individual hole, which gives rise to number of possible sequences to complete hole-making operations on the part depending upon the location of hole and tool sequence to be followed. It is necessary to find the optimal sequence of operations which minimizes the total processing cost of hole-making operations. In this work, therefore an attempt is made to reduce the total processing cost of hole-making operations by applying relatively new optimization algorithms known as shuffled frog leaping algorithm and proposed modified shuffled frog leaping algorithm for the determination of optimal sequence of hole-making operations. An industrial application example of ejector plate of injection mould is considered in this work to demonstrate the proposed approach. The obtained results by the shuffled frog leaping algorithm and proposed modified shuffled frog leaping algorithm are compared with each other. It is seen from the obtained results that the results of proposed modified shuffled frog leaping algorithm are superior to those obtained using shuffled frog leaping algorithm.
               
            

New position of frog

Previous position of frog

Random number values between 0 to 1

Position of best frog among the memeplexes

Position of worst frog among the memeplexes

Position of global best frog in search space which best among all frogs.

Inertia weight

Search acceleration factor with positive values

Search acceleration factor with positive values

The total holes to be machined in the part

are the co-ordinates of point d
                     

are the co-ordinates of point e
                     

Non-productive tool travel time required for moving tool from the point d to the

in rectilinear direction

Tool type index in ascending order according to the tool diameters, d=1,…,D
                     

Hole index, e=1,…,E f=1,…,E
                     

ndex for the last tool to be used on hole e
                     

Combined tool and machining costs when tool type d is used on hole e.
                     

Cost per unit tool switch time

Cost per unit non-productive traveling time

he total operations required for hole d., d=1,2,…,D
                     


                        m
                        1+m
                        2+…+ m
                        
                           D
                        , the total of operations in the part

The tool required for operation e of hole d.

The tool travel time for traveling from hole d to hole d’
                     

The time required for switching the tool T
                        
                           d’e’
                         when tool T
                        
                           de
                         is in spindle

1 if operation e of hole d is machined in position f of operation order, otherwise 0, where

1,2,…,D, e=1,2,…, m
                        
                           i
                        , f=1,2,…, M
                     

1 if T
                        
                           de
                        ≠T
                        
                           d’e’
                        , otherwise 0

@&#INTRODUCTION@&#

Mould carries large number of holes of various sizes. In hole-making operations of mould, to achieve the final size of each hole may require different machining operations like drilling with pilot tool, enlargement or tapping/reaming depending upon requirement of diameter, surface finish and depth of cut. Machining of hole or holes may require tool or combination of tools to achieve the final size diameter of hole. E.g. for hole H3 shown in 
                     Fig. 1, may require one of {T1, T2, T3}, {T1, T3}, {T2, T3}, and {T3} tools to obtain the final size. Various combinations of tools for individual hole to achieve the desired size of hole has impact on optimum cutting speeds, tool switch time and tool travel time [19].

In machining processes, it takes more machining time for tool switching and table movement from one position to another. To reduce the tool travel, the spindle is not moved till desired hole is completely machined by various tools which increases the tool switch time and cost. On the other side to reduce tool switch time, the same tool may be used for all drilling operations of same size which in turn increases the tool travel time and cost. Typically 70% of total time in manufacturing processes is spent on tool and part movements [27]. Luong and Spedding [25] presented the process planning in hole-making operations by developing a generic knowledge based methodology. Kolahan and Liang [19] report a tabu-search (TS) technique to reduce the total machining cost of hole-making operations of application example of plastic injection mould. Three components of total machining cost namely tooling and machining cost, non-productive tool travel cost and tool switching cost were considered for the optimization of hole-making operations. Alam et al. [1] presented the case study of injection moulds with the aim of achieving minimum total processing time of machining using genetic algorithm (GA) and compared GA results with simulated annealing (SA). Qudeiri and Hidehiko [34] used genetic algorithm to obtain concise cutting tool path for machine operations. Liyun [22] presented the process planning optimization by using an genetic simulated annealing algorithm.

Guo et al. [10] modeled a complicated operation sequencing process and applied modified particle swarm optimization (PSO) algorithm on case study of three prismatic parts and compared the results of PSO with GA. Guo et al. [11] presented a case study of five-axis prismatic parts for sequencing the operations using modified particle swarm optimization approach.

Ghaiebi and Solimanpur [9] presented a case study by application of the ant colony optimization (ACO) algorithm for achieving optimal path of machining holes in a typical industrial part. Six bench mark problems were attempted in order to validate the performance of their ACO algorithm and compared ACO results with dynamic programming (DP). Oscar et al. [32] presented a methodology to generate optimal sequences of G commands to minimize the manufacturing time of computer numerical control machine (CNC) using ACO. Liu et al. [21] used ACO algorithm for process planning optimization of hole-making operations of a case study with objective to minimize non-productive tool time and tool switching time. Kiani et al. [18] used ant colony algorithm to achieve the optimal sequence of operations that gives concise cutting trajectory in computer numerical control machine. Narooei et al. [28] used ACO algorithm for optimizing the tool path i.e. to minimize non-productive tool travel of case study involving multiple holes. Simulation of machining operation is considered similar to traveling salesmen problem (TSP). Jiang et al. [16] compared the performance of ant colony optimization, genetic algorithm and the common sequence method for replugging tour planning of seedling transplanter. Results obtained using ACO and GA were more suitable than common sequence method.

Hsieh et al. [12] investigated the optimal sequence of hole-making operations by minimizing the non-productive tool travel time and tool switch time, in which various tools were required to obtain the desired size of hole on part using immune based evolutionary approach (IA) and compared its results with ACO and PSO. Tamjidy and Shahla [38] presented an evolutionary algorithm to reduce the tool travel and tool switching time during hole-making operations based on geographic classification of biological organism. Performance of their proposed algorithm was validated based on test functions adopted from in literature. Nassehi et al. [29] used evolutionary algorithms for generation and sequence optimization of tool path for case study on milling. Ismail [15] used firefly algorithm (FA) to reduce non-productive tool travel time in PCB holes drilling process. Srivatsava [37] presented firefly algorithm for achieving optimal test sequence generation. Marinakis and Marinaki [26] used bumble bees mating optimization algorithm for the open vehicle routing problem i.e. to reduce vehicle travel distance. Two benchmark problems were considered in order to validate their proposed algorithm. Lim et al. [20] used cuckoo search (CS) algorithm for optimization of sequence in PCB holes drilling process. Apart from this work, Begon˜a et al. [3] evaluated a monitoring method, based on internal signals from spindle torque, to detect non-desired burr formation during drilling operations. David et al. [5] presented experimental analysis of hole-making using ball helical milling on titanium alloys.

It is understood from the literature discussed here that most of the researchers have worked in the area of minimization of non-productive tool travel time and tool switching time. Kolahan and Liang [19] has considered three elements of total processing costs, tooling and machining cost, non-productive tool travel cost and tool switching cost.

It is also found in the literature related to this area that the non-traditional optimization methods such as tabu search, genetic algorithm, particle swarm optimization, ant colony algorithm, immune algorithm, cuckoo search, firefly algorithm, bumble bees mating optimization algorithm and biogeography based optimization (BBO) algorithm etc. has been used to solve the problem of optimization of hole-making operations. Tabu search that uses only one solution can easily neglect some promising areas of the search space also they may not find optimal solution or exact solution. Most widely used advanced optimization technique is the genetic algorithm. Genetic algorithm gives near optimal solution for complex problems [35]. Also GA requires more parameters [6]. In ACO algorithm, convergence is slow due to pheromone evaporation and CPU time requirement is more [6]. Immune based evolutionary approach requires more parameters. PSO algorithm was usually found to perform better than other algorithms in terms of success rate and solution quality [6]. Problem solving success of the cuckoo search and differential evolution algorithms are relatively better than the PSO [4]. Basic cuckoo search algorithm may easily fall into local optimum solution [13].

Firefly algorithm (FA) has limitations like it gets trapped into several local optima. Also FA does not memorize or remember any history of better situation for each firefly [33]. Honey bees mating optimization algorithm may miss the optimum and provide a near optimum solution in a limited runtime period [30]. Biogeography-based optimization (BBO) is poor in exploiting the solutions. Also there is no provision for selecting the best members from each generation [2].

It is necessary to use non-traditional optimization algorithm which is robust and gives correct solution for complex problems [35]. Hence in this work attempt is made to minimize the total processing cost of hole-making operations of ejector plate of injection mould of a completely new application example, which consists of three elements of costs namely tooling and machining cost, non-productive tool travel cost and tool switching cost using shuffled frog leaping algorithm [6,8] and proposed modified shuffled frog leaping algorithm.

Ejector plate is member in injection mould assembly which pushes the ejector pins. It is mounted on the ejector retainer plate to form the ejector unit. Main function of ejector plate is to prevent the shrinkage of element. Next section discuss about the SFLA algorithm.

Shuffled frog leaping algorithm is a meta-heuristic optimization technique, originated by Eusuff and Lansey, which is similar to the conduct of a group of frogs while searching for the maximum amount of food site [8]. Shuffled frog leaping algorithm consists of random frogs called ‘population’ which are further divided into different parts called ‘memeplexes’. Individual frog carries out two search mechanisms called local and global search mechanisms to get optimum solution. Through these two mechanisms behavior of individual frog is influenced by neighboring frog to obtain the best solution. Thereafter the frog population is shuffled. Local and global search mechanisms were carried out until convergence criteria are achieved [23,24].

Shuffled frog leaping algorithm can be used for discrete optimization problems [8]. It has been successfully applied to several engineering optimization problems such as economic load dispatch problem [36], multiobjective optimal power flow [31], project management [7], and traveling salesman problem [23].

The most well-known benefit of Shuffled frog leaping algorithm is its fast convergence speed [6]. The Shuffled frog leaping algorithm combines the advantages of the both the genetic-based memetic algorithm (MA) and the social behavior-based PSO algorithm [14,17].

Flowchart of shuffled frog leaping algorithm is as shown in 
                     Fig. 2.

The various steps in shuffled frog leaping algorithms are as follows [8]:
                        
                           1.
                           Generate virtual frog randomly called population ‘p’.

Evaluate the fitness of population ‘p’.

Sort the population ‘p’ in descending order.

Partition the population ‘p’ in ‘m’ memeplexes.

Frogs i is expressed as X
                              i=(X
                              i1, X
                              i2, …..X
                              is) where ‘S’ represents number of variables.

Identify the worst frog X
                              w and best frog X
                              b within each memeplexes.

Identify the global best frog X
                              g in entire population ‘p’.

Apply the local search for new positions (X
                              
                                 i+1
                              ) by following (Eqs. (1) and 2).
                                 
                                    (1)
                                    
                                       
                                          
                                             
                                                X
                                             
                                             
                                                i
                                                +
                                                1
                                             
                                          
                                          =
                                          
                                             
                                                X
                                             
                                             
                                                i
                                             
                                          
                                          +
                                          r
                                          ×
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                b
                                             
                                          
                                          −
                                          
                                             
                                                X
                                             
                                             
                                                w
                                             
                                          
                                          )
                                       
                                    
                                 
                              
                           

If fitness of new frog generated by above Eq. (1) better than previous frog then replace it with new frog.

If not, apply the Eq. (2) to obtain better position

If fitness of new frog generated by above Eq. (2) better than previous frog then replace it with new frog, else replace the worst frog randomly.

The local search and the shuffling processes continue until convergence criteria are satisfied.

Modified shuffled frog leaping algorithm is discussed in next section.

In order to widen the search capability and overcome premature convergence, the local search mechanism is modified in existing shuffled frog leaping algorithm is discussed in this section. Flowchart for modified shuffled frog leaping algorithm is similar to the flowchart of shuffled frog leaping algorithm except local search Eq. (3) and global search Eq. (4), which is discussed in following steps of mSFLA.

The various steps in modified shuffled frog leaping algorithms are as follows:
                        
                           1.
                           Generate virtual frog randomly called population ‘p’.

Estimate the fitness of population.

Group the population in descending manner.

Divide the population in ‘m’ memeplexes.

Frogs ‘i’ is expressed as X
                              i=(X
                              i1, X
                              i2, …..X
                              is) where ‘S’ stands for number of variables.

Select the worst frog X
                              w and best frog X
                              b within each memeplexes.

Select the global best frog X
                              g in entire population.

Apply the local search for new generations by following (Eqs. (3) and 4)
                              
                                 
                                    (3)
                                    
                                       
                                          
                                             
                                                X
                                             
                                             
                                                i
                                                +
                                                1
                                             
                                          
                                          =
                                          w
                                          ×
                                          
                                             
                                                X
                                             
                                             
                                                i
                                             
                                          
                                          +
                                          
                                             
                                                C
                                             
                                             
                                                1
                                             
                                          
                                          ×
                                          r
                                          ×
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                b
                                             
                                          
                                          −
                                          
                                             
                                                X
                                             
                                             
                                                w
                                             
                                          
                                          )
                                       
                                    
                                 
                              
                           

Weight factor ‘w’ is introduced on right hand side of Eq. (3) in order to widen the search capability and to avoid premature convergence. Similarly ‘w’ is introduced in right side of Eq. (4) below. If fitness of new frog generated by above Eq. (3) better than previous frog then replace it with new frog.

When the difference between worst frog Xw and best frog Xb becomes small, change in frog Xw׳s position will be very small, hence it might stuck in local optimum and results into premature convergence. To avoid such event, in right hand side of Eq. (3) search acceleration factor with positive values C1 is introduced [7]. Similarly C2 is introduced in right hand side of Eq. (4).

If not, apply the Eq. (4)
                              
                                 
                                    (4)
                                    
                                       
                                          
                                             
                                                X
                                             
                                             
                                                i
                                                +
                                                1
                                             
                                          
                                          =
                                          w
                                          ×
                                          
                                             
                                                X
                                             
                                             
                                                i
                                             
                                          
                                          +
                                          
                                             
                                                C
                                             
                                             
                                                2
                                             
                                          
                                          ×
                                          r
                                          ×
                                          (
                                          
                                             
                                                X
                                             
                                             
                                                g
                                             
                                          
                                          −
                                          
                                             
                                                X
                                             
                                             
                                                w
                                             
                                          
                                          )
                                       
                                    
                                 
                              
                           

These factors C
                              1, C
                              2and w are positive constant values.

If fitness of new frog generated by above (Eqs. (3) and 4) better than previous frog then replace it with new frog, else replace the worst frog randomly.

The local search and the shuffling processes continued until convergence criteria are satisfied. Next section discuss about the optimization model used for hole-making operations.

In order to minimize the total processing cost of hole-making operation, the following optimization model is formulated based on analysis given by Kolahan and Liang [19] and Ghaiebi and Solimanpur [9] considering following components of total cost:

Tool travel cost is the cost of moving the tool from its previous location to the current drilling position. Tool travel cost is proportional to the non-productive traveling distance required for the spindle to move between two drilling locations.

It is assumed that, at a time, two axis drill press can travel only in one direction and a rectilinear distance function is used in this paper [9]. The non-productive tool travel time required for moving tool from the point d to the point e in rectilinear direction is given by
                           
                              (5)
                              
                                 
                                    
                                       
                                          l
                                       
                                       
                                          d
                                          e
                                       
                                    
                                    =
                                    
                                       |
                                       
                                          
                                             
                                                x
                                             
                                             
                                                d
                                             
                                          
                                          −
                                          
                                             
                                                x
                                             
                                             
                                                e
                                             
                                          
                                          
                                             |
                                             +
                                             |
                                          
                                          
                                             
                                                y
                                             
                                             
                                                d
                                             
                                          
                                          −
                                          
                                             
                                                y
                                             
                                             
                                                e
                                             
                                          
                                       
                                       |
                                    
                                 
                              
                           
                        
                     

It occurs whenever a different tool is used for the next operation. If tool type required for operation is not available on the spindle, then the required tool must be loaded on the spindle prior to performing operation.

Tool cost includes the new tool cost and the cost of machine down time required to replace the tool. Machining cost comprises the operating cost and the machine overhead cost. Depth of cut, feed rate, and cutting speeds affect tool and machining costs. The actual combined tooling and machining costs when tool type d is used on hole e can be expressed as C
                        
                           de
                         
                        [19]. Mathematical model is as below:

Minimize
                           
                              (6)
                              
                                 
                                    
                                       ∑
                                       
                                          d
                                          =
                                          1
                                       
                                       D
                                    
                                    
                                       
                                          ∑
                                          
                                             e
                                             =
                                             1
                                          
                                          
                                             
                                                
                                                   m
                                                
                                                
                                                   d
                                                
                                             
                                          
                                       
                                       
                                          
                                             ∑
                                             
                                                
                                                   
                                                      
                                                         
                                                            d
                                                            ′
                                                            =
                                                            1
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            d
                                                            ′
                                                            ≠
                                                            1
                                                         
                                                      
                                                   
                                                
                                             
                                             D
                                          
                                          
                                             
                                                ∑
                                                
                                                   e
                                                   ′
                                                   =
                                                   1
                                                
                                                
                                                   
                                                      
                                                         m
                                                      
                                                      
                                                         d
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   ∑
                                                   
                                                      f
                                                      =
                                                      1
                                                   
                                                   
                                                      M
                                                      −
                                                      1
                                                   
                                                
                                                
                                                   b
                                                   *
                                                   
                                                      
                                                         l
                                                      
                                                      
                                                         d
                                                         e
                                                      
                                                   
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         d
                                                         e
                                                         f
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          d
                                          ′
                                          e
                                          ′
                                          f
                                          +
                                          1
                                       
                                    
                                    +
                                    
                                       ∑
                                       
                                          d
                                          =
                                          1
                                       
                                       D
                                    
                                    
                                       
                                          ∑
                                          
                                             e
                                             =
                                             1
                                          
                                          
                                             
                                                
                                                   m
                                                
                                                
                                                   d
                                                
                                             
                                          
                                       
                                       
                                          
                                             ∑
                                             
                                                d
                                                ′
                                                =
                                                1
                                             
                                             D
                                          
                                          
                                             
                                                ∑
                                                
                                                   e
                                                   ′
                                                   =
                                                   1
                                                
                                                
                                                   
                                                      
                                                         m
                                                      
                                                      
                                                         d
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   ∑
                                                   
                                                      j
                                                      =
                                                      1
                                                   
                                                   
                                                      M
                                                      −
                                                      1
                                                   
                                                
                                                
                                                   a
                                                   *
                                                   
                                                      
                                                         S
                                                      
                                                      
                                                         d
                                                         e
                                                         ,
                                                         d
                                                         ′
                                                         e
                                                         ′
                                                      
                                                   
                                                   δ
                                                   (
                                                   
                                                      
                                                         T
                                                      
                                                      
                                                         d
                                                         e
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         T
                                                      
                                                      
                                                         d
                                                         ′
                                                         e
                                                         ′
                                                      
                                                   
                                                   )
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         d
                                                         e
                                                         f
                                                      
                                                   
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         d
                                                         ′
                                                         e
                                                         ′
                                                         f
                                                         +
                                                         1
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    +
                                    
                                       
                                          C
                                       
                                       
                                          d
                                          e
                                       
                                    
                                 
                              
                           
                        
                     

Subject to
                           
                              (7)
                              
                                 
                                    
                                       ∑
                                       
                                          f
                                          =
                                          1
                                       
                                       
                                          M
                                          −
                                          1
                                       
                                    
                                    
                                       
                                          
                                             x
                                          
                                          
                                             d
                                             e
                                             f
                                          
                                       
                                       =
                                       1
                                       ,
                                       d
                                       =
                                       1
                                       ,
                                       2
                                       ,
                                       …
                                       .
                                       .
                                       ,
                                       D
                                       ,
                                       e
                                       =
                                       1
                                       ,
                                       2
                                       ,
                                       …
                                       .
                                       .
                                       
                                          
                                             m
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       ∑
                                       
                                          d
                                          =
                                          1
                                       
                                       D
                                    
                                    
                                       
                                          ∑
                                          
                                             e
                                             =
                                             1
                                          
                                          
                                             
                                                
                                                   m
                                                
                                                
                                                   d
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                x
                                             
                                             
                                                d
                                                e
                                                f
                                             
                                          
                                          =
                                          1
                                          ,
                                          f
                                          =
                                          1
                                          ,
                                          2
                                          ,
                                          …
                                          .
                                          ,
                                          M
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          d
                                          e
                                          f
                                       
                                    
                                    ≤
                                    
                                       ∑
                                       
                                          f
                                          ′
                                          =
                                          f
                                          +
                                          1
                                       
                                       M
                                    
                                    
                                       
                                          
                                             x
                                          
                                          
                                             d
                                             ,
                                             e
                                             +
                                             1
                                             ,
                                             f
                                             ′
                                          
                                       
                                    
                                    ,
                                    d
                                    =
                                    1
                                    ,
                                    2
                                    ,
                                    …
                                    .
                                    .
                                    ,
                                    D
                                    ,
                                    e
                                    =
                                    1
                                    ,
                                    2
                                    ,
                                    …
                                    .
                                    .
                                    
                                       
                                          m
                                       
                                       
                                          i
                                       
                                    
                                    −
                                    1
                                 
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          d
                                          e
                                          f
                                       
                                    
                                    ∈
                                    {
                                    0
                                    ,
                                    1
                                    )
                                    ,
                                    ∀
                                    d
                                    ,
                                    e
                                    ,
                                    f
                                 
                              
                           
                        
                     

The shuffled frog leaping algorithm and modified shuffled frog leaping algorithm were coded as per mathematical modal given in Section 4 in order to obtain the optimal path of drilling the holes for a part shown in 
                     
                     Figs. 3 and 4 using code blocks C++ and run on a windows 8 PC with Intel core i3 CPU @ 1.90GHz. Data required for calculating the tool travel time which is discussed in Section 4 is shown in Fig. 3. Fig. 4 shows the identification numbers for various holes on application example. Application example shown in Fig. 3 consists of total 15 holes which require carry out total 47 hole-making operations such as drilling, enlargement and reaming to finish the part. The details of tool diameters are given in 
                     Table 1. Whenever a different tool is required for machining of a particular hole, the tool switch time is taken as 2s for CNC machine.


                     
                     Table 2 presents combinations of tools required for machining of individual hole of application example presented in this section. For example, for machining of Ø25 hole shown in Fig. 3 requires tool 1, 3, 4, 5 and 6 tools as given in Table 1. Thickness of industrial application example is 80mm.

@&#RESULTS AND DISCUSSION@&#

In this section obtained results of optimization of shuffled frog leaping algorithm and modified shuffled frog leaping algorithm for the application example discussed in Section 5 are given in 
                     
                     Tables 3 and 4 as per the mathematical model given Section 4.

Considering tool information given in Table 1 and tool switch times for whenever different tool is required for machining is taken 2s. Results obtained using shuffled frog leaping algorithm and modified shuffled frog leaping algorithm are discussed below:

Frog population=100

Quantity of memeplexes=10

Quantity of sub frogs=10

Number of iterations=100

With above parameters of shuffled frog leaping algorithm (Section 6.1) an optimal sequence hole-making operation of industrial application mould given in Table 4.


                        Table 3 gives best possible sequence using shuffled frog leaping algorithm having optimum values of airtime of 2.083min and tool switch time of 1.29min.


                        C
                        1=1.0,


                        C
                        2=0.95,


                        w=0.95,

Frog population=100

Quantity of memeplexes=10

Quantity of sub frogs=10

Number of iterations=100

With above parameters of modified shuffled frog leaping algorithm (Section 6.2) an optimal sequence hole-making operation of industrial application mould given in Table 4.


                        Table 4 gives best possible sequence using modified shuffled frog leaping algorithm having optimum values of airtime of 1.75min and tool switch time of 1.2min.

For the above parameter setting and obtained results of optimal sequence using SFLA and modified SFLA, the results of optimization of total processing cost of hole-making operations for the application example mentioned in Section 5 are as given in 
                        Table 5. It is calculated as per the mathematical model given Section 4.

Process parameter assumed for this application example are, a=Rs.25/min and b=Rs.25/min.

Tooling and machining cost for all hole-making operations=Rs.338.

@&#CONCLUSION@&#

Optimization of hole-making operations involves a large number of possible sequences to complete hole-making operations on the part depending on location of hole and tool sequence to be followed. To achieve this, proper determination operations sequence which minimizes the total non productive time and tool switching time of hole-making operations is essential. This paper presents recently developed shuffled frog leaping algorithm and proposed modified shuffled frog leaping algorithm and are applied on an application example to reduce the total machining cost hole-making operations. The obtained results using shuffled frog leaping algorithm and modified shuffled frog leaping algorithm are compared with each other. It is observed that the results of optimization for total processing cost using modified shuffled frog leaping algorithm in 100 generations are 3% superior to shuffled frog leaping algorithm. Tooling and machining cost of hole-making operations of this application example will remain same, only tool travel and tool switch time is crucial. Results of optimization of tool travel and tool switch cost only, achieved by modified shuffled frog leaping algorithm in 100 generations are 13% superior to those obtained using shuffled frog leaping algorithm for application example discussed in Section 5. The improvement of tool travel and tool switch cost obtained by using modified shuffled frog leaping algorithm is thus significant and clearly indicates the potential of this method to solve real life problems related to hole making for various industrial applications.

@&#REFERENCES@&#

