@&#MAIN-TITLE@&#A model for tracing cross-referenced statement validity

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           The research models dependencies among cross-referenced statements with a three-valued logic model.


                        
                        
                           
                           Open World Assumption, Closed World Assumption and Stub Assumption are applied to evaluate cross-referenced statements.


                        
                        
                           
                           False dead-locks can be derived with the proposed approach.


                        
                        
                           
                           Fixpoint proof is given for the proposed approach.


                        
                        
                           
                           The overall orchestration helps to spot inconsistencies and incompleteness among requirements, implementations and tests.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Interoperability

Conformance testing

Global validity

Fixed point

@&#ABSTRACT@&#


               
               
                  Big Data Era brings global digital infrastructure collaboration built on the emerging standards. Given the complexity and dynamics of each specification, corresponding implementations need to undergo sufficient verification and validation procedures. Significant efforts have been invested into conformance testing of individual requirements, for example, by using formal, semi-formal or informal approaches. Less works have been accomplished, however, on the overall orchestration assessment so as to ensure global validity of conformance statements. For example, cyclic dependencies among conformance statements of a service under test may lead to inappropriate conclusions on the assessment outcome. In this study, a dependency model based on three-valued logic and fixed point theory to address dependency issues among cross-referenced statements is presented, so as to provide effective support to global digital infrastructure collaboration.
               
            

@&#INTRODUCTION@&#

In Big Data Era, traditional computer-based communication becomes more widespread and users begin to experiment with newer sensor-based communication, such as Imote2 sensor networks and Geo-Processing Workflows. To improve interoperability and archive a better global digital infrastructure collaboration. A variety of standards on networking, human–computer interaction, artificial intelligence and etc. are produced in varying degrees of maturity and maintained or supported by standardization bodies, such as IEEE, ISO, W3C, OGC, and IETF. These specifications may complement, overlap, and compete with each other. A conformance statement asserts the conformance of a specific requirement by testing a given service component implementation. It is often authored as a result of the related conformance testing. A potential user of the implementation can consult the conformance statements to determine if it meets his or her requirements. However, the complexity of web services and the interrelationships and dependencies among the standards establishes additional problems; one of them, which is addressed in this work, is related to dependencies between conformance statements. Such dependencies often exist already within one specification against which a service is to be assessed. Moreover, specifications themselves often refer to other specifications — either because some pre-existing specification is used, like in the case of relying on standards, or because the specification on hand is modularized into different documents between which, consequently, logical relationships exist. Three similar dependency relationships are defined by Belguidoum and Dagnat [8] with mandatory, optional or negative forms. However, the work does not mention the overall orchestration assessment so as to ensure global validity of cross-referenced statements. Obviously, a statement can only be fully trusted if its dependencies are known to be true; otherwise the orchestration assessment of these statements would lead to inappropriate conclusions.

Following a three-valued logic, three possible statement statuses, namely T, F, and U, are distinguished. The statement state is unknown before testing and true, false, or unknown after test execution. Accordingly, statement in three-valued logic (STL) is proposed to address dependency issues among these statements; among the goals is to allow collecting feedback for improving specification, test suites and implementations. The remaining parts of this paper are organized as follows: Section 2 introduces related research, Section 3 provides the formalized dependency model based on three-valued logic expressions, Section 4 proves the global validity evaluation approach, and Section 5 summarizes this paper and discusses the future.

Traditionally, conformance testing investigates whether a product or system adheres to properties defined, for example, in some standards. Two-valued logic provides truth values indicating true and false results. On the overall orchestration of conformance statements so as to ensure global validity of the results, traditional schedule approaches in graph theory or Dependency Structure Matrix [27] (DSM) help in mapping the dependency relationships. The graph traversal helps in evaluating the statement in proper order. Among them, several works have been done on ordering the cycles in none-singleton strongly connected components (NSSs). For example, Kung et al. [22] selects a random dependency to break cycles, and Le Traon et al. [23], Tai and Daniel [28], Hewett et al. [20] and Briand et al. [9] deploy their removal strategies according to the number of incoming edges and the number of outgoing edges. Kraft et al. [21] remove the edges according to its dependency weight function. However, these serializations lose the dependency information of the removal nodes. These may introduce inappropriate conclusions in the orchestration assessment of the global validity of cross-referenced statements. Similar dependency analysis [14] is studied based on truth maintenance systems (TMS) in the 80s and early 90s, for instance by Goodwin [18,19], to establish the stability of such networks. These approaches are based on Boolean TMSs and negation is included. However, the cases in which logically dependent relationships occur in three-valued logic are not considered. For example, Kleene's three-valued logic [15,16] provides such expressiveness by adding a third value for a specific semantic other than true or false. Although a map of such dependency relationships between conjunctions, negations and implications that extend the Boolean one is presented [17], how to address the corresponding evaluation schedule containing strongly connected components (SCC) remains open. Without proper evaluation schedules, the results tend to be undecidable.

Logical conjunction (“and”) and disjunction (“or”) operators are used to distinguish statements. An atomic statement (AS) is a logic statement which cannot be broken down into smaller statements; a composite statement (CS) is a logic statement having two or more statements connected by logical conjunction (“∧”) and disjunction (“∨”) operators. Syntactically, a logical expression is represented by this grammar:
                           
                              
                                 
                                    
                                       
                                          A
                                          S
                                          :
                                          "
                                          T
                                          "
                                          |
                                          "
                                          F
                                          "
                                          |
                                          "
                                          U
                                          "
                                       
                                    
                                    
                                       
                                          OP
                                          :
                                          "
                                          ∧
                                          "
                                          |
                                          "
                                          ∨
                                          "
                                       
                                    
                                    
                                       
                                          S
                                          :
                                          A
                                          S
                                          |
                                          S
                                          
                                          OP
                                          
                                          S
                                          |
                                          "
                                          
                                             
                                                "
                                                S
                                                "
                                             
                                          
                                          "
                                          .
                                       
                                    
                                 
                              
                           
                        
                     

Kleene's logic [16] is used to evaluate these expressions. In Kleene's logic, a conjunction produces a value of T if both of its operands are T, an F if one of its operands is F, and otherwise U. Disjunction delivers a value of T if one of its operands is T, an F if both of its operands are F, and otherwise a U.

Kleene uses the Open World Assumption (OWA) approach to evaluate logic expressions [15]. OWA states that the truth value of a statement that is not included in itself or inferred from the knowledge explicitly recorded in the expression shall be considered unknown.

Besides the evaluation in OWA, Closed World Assumption (CWA) has already been used a lot to evaluate knowledge representation statements within some given system [11]. CWA is the assumption that any statement that is not known to be true is false. Yet another case in software testing is distinguished: frequently there are test stubs which simulate the behavior of the dependent test modules. In this case, the dependent test modules are always assumed to be true when their truth evaluation results are not available. This is called a Stub Assumption (SA); the dependent statement is true under a SA.

Three assumptions are distinguished on unknown features (Table 1
                        ): Open World Assumption (OWA), Closed World Assumption (CWA), and Stub Assumption (SA). Accordingly, the truth table of the logic operations for Kleene's logic is extended with CWA and SA, see Table 2
                        .

The model based on the directed graph is developed for tracing dependencies among statements. The model starts with a directed dependency graph G
                        =(V,E). The vertex set V contains statements as vertices, the edge set E consists of dependencies; an edge e
                        =(s
                        1,s
                        2) denotes that vertex s
                        1 depends on vertex s
                        2. s
                        2 is said to be a direct successor of s
                        1 while s
                        1 is said to be a direct predecessor of s
                        2. Generally, if a path in G is made up one or more successive edges leading from vertex s
                        1 to vertex s
                        2, then s
                        2 is said to be a successor of s
                        1 and s
                        1 is said to be a predecessor of s
                        2. If there is a path from s
                        1 to s
                        2 and also a return path from s
                        2 to s
                        1, then s
                        1 and s
                        2 are strongly connected. A strongly-connected component (SCC) [10] is a maximal strongly-connected subgraph of G. SCC decomposition is a partition of the set of vertices.

A statement is evaluated according to its direct successors. The form is listed as below:
                           
                              a.
                              
                                 P
                                 →
                                 Q
                              


                                 P (Hypothesis stated)


                                 Q (Conclusion given).

For example, statement s
                        1 depends on s
                        2 and s
                        3 and (s
                        4 or s
                        5), its corresponding dependencies are shown in Fig. 1
                        . In this case, s
                        2 and s
                        3 and (s
                        4 or s
                        5) is P and s
                        1 is Q.

Dependencies among statements may introduce deadlocks. For example, let us assume that statement s
                        1 depends on s
                        2 and s
                        3, s
                        3 depends on s
                        4 and s
                        4 depends on s
                        1. This means that s
                        1, s
                        3 and s
                        4 are strongly-connected as shown in Fig. 2
                        .

The cycle introduces a deadlock in the evaluation. However, not all the deadlock is completely dead.

A node's truth value may be determined by parts of its dependencies. For example, F
                        ∧
                        exp will always return F even if the truth value of exp is unknown. If such a node is in a circle the node can be disentangled. For example, see Fig. 2, if s
                        2
                        =
                        F, the rest truth values can be derived. This deadlock is a false deadlock.

A possible truth list (PTL) is used to represent the list of possible truth values for a given statement. A possible truth result expression (PTRE) is a logical expression having two or more PTLs connected by logical conjunction (“∧”) and disjunction (“∨”) operators. Syntactically, the grammar is given as below:
                           
                              
                                 
                                    
                                       
                                          P
                                          T
                                          L
                                          :
                                          "
                                          T
                                          "
                                          |
                                          "
                                          U
                                          "
                                          |
                                          "
                                          F
                                          "
                                          |
                                          "
                                          T
                                          ,
                                          U
                                          "
                                          |
                                          "
                                          U
                                          ,
                                          F
                                          "
                                          |
                                          "
                                          T
                                          ,
                                          U
                                          ,
                                          F
                                          "
                                          |
                                          "
                                          T
                                          ,
                                          F
                                          "
                                          |
                                          "
                                          
                                             
                                                "
                                                P
                                                T
                                                L
                                                "
                                             
                                          
                                          "
                                       
                                    
                                    
                                       
                                          CDOP
                                          :
                                          "
                                          ∧
                                          "
                                          |
                                          "
                                          ∨
                                          "
                                       
                                    
                                    
                                       
                                          PTRE
                                          :
                                          P
                                          T
                                          L
                                          |
                                          "
                                          
                                             
                                                "
                                                PTRE
                                                "
                                             
                                          
                                          "
                                          CDOP
                                          "
                                          
                                             
                                                "
                                                PTRE
                                                "
                                             
                                          
                                          "
                                          .
                                       
                                    
                                 
                              
                           
                        
                     

If the possible truth list cardinality l
                        =1, the truth value of the node can be derived directly. A false deadlock contains at least one such node. Below are the PTL truth tables under open world assumption (see Table 3
                        ), closed world assumption (see Table 4
                        ) and stubbed assumption (see Table 5
                        ).
                        
                     

Based on graph theory and the three-valued logic, taking into account open world assumption (OWA), closed world assumption (CWA) and stub assumption (SA), the research proves that the serialized evaluation is stable if not further input is available and fixed logical assumption strategy is adopted.

Below concepts are distinguished to prove the fixed point. An evaluation action is an evaluation of a statement according to its logical expression. An evaluation step is a sequential or concurrent execution of a set of evaluation actions of a graph; a concurrent evaluation is an evaluation step, which consists of a set of concurrent evaluation actions of a graph; a sequential evaluation is an evaluation step, which consists of a set of sequential evaluation actions of a graph; an evaluation process is a recursive evaluation step. When s
                        1,
                        s
                        2,…, and s
                        
                           n
                         are statements, a
                        1,
                        a
                        2,… , and a
                        
                           n
                         are the corresponding evaluation actions of these statements, x
                        1,
                        x
                        2,…, and x
                        
                           n
                         are truth values of these statements. A evaluation step is denoted as f
                        
                           step
                        
                        :
                        E
                        →
                        E, where e
                        ∈
                        E and e
                        =(x
                        1,
                        x
                        2,…,
                        x
                        
                           n
                        ). The process is terminable if there exists a fixed point such that e
                        =
                        f
                        
                           step
                        (e); the evaluation schedule of a terminable process is a terminable schedule, otherwise, it is an interminable schedule.

Three confidence levels, which are T (true), U (unknown) and F (false), respectively correspond to three decreasing confidence degrees. An ordering relation of confidence is denoted as x
                        1
                        >
                        x
                        2. Consequently, the confidence precedence order is defined as T
                        >
                        U
                        >
                        F. Each evaluation action, according to its logical expression, is order preserving with respect to certain constrains. The proof is as below:
                           
                              •
                              Conjunction: a
                                 ≤
                                 b implies f
                                 
                                    conj
                                 (a)≤
                                 f
                                 
                                    conj
                                 (b), where f
                                 
                                    conj
                                 (x) is a conjunction clause that contains any occurrence of variable x, with the others hold constant;

Disjunction: a
                                 ≤
                                 b implies f
                                 
                                    disj
                                 (a)≤
                                 f
                                 
                                    disj
                                 (b), where f
                                 
                                    disj
                                 (x) is a disjunction clause that contains any occurrence of variable x, with the others hold constant;

Disjunctive Normal Form (DNF) [26]: a
                                 ≤
                                 b implies f
                                 
                                    DNF
                                 (a)≤
                                 f
                                 
                                    DNF
                                 (b), where f
                                 
                                    DNF
                                 (x) is a disjunction of conjunctive clauses that contains any occurrence of variable x, with the others hold constant;

Any logical expression that can be represented in DNF, satisfies the order preserving property. Hence, each evaluation action is order preserving. An evaluation action, which contains a set of variables, is order preserving:
                           
                              •
                              DNF: e
                                 1
                                 ≤
                                 e
                                 2 implies f
                                 
                                    DNF
                                 (e
                                 1)≤
                                 f
                                 
                                    DNF
                                 (e
                                 2), where e
                                 ∈
                                 E, e
                                 =(x
                                 1,
                                 x
                                 2,…,
                                 x
                                 
                                    n
                                 ) and f
                                 
                                    DNF
                                 (e) is a conjunction clause that contains any occurrence of variables x
                                 1,
                                 x
                                 2,… and x
                                 
                                    n
                                 .

If xi
                         is a statement evaluation result and e is the evaluation result of the evaluation step f
                        
                           step
                        
                        :
                        E
                        →
                        E, where e
                        ∈
                        E and e
                        =(x
                        1,
                        x
                        2,…,
                        x
                        
                           n
                        ), the set of all inputs E is a complete lattice. A complete lattice [12] is a partially-ordered set in which all subsets have both a supremum and an infimum. This proof is:
                           
                              •
                              Firstly, the research proves that E is partially ordered along the confidence precedence relation:
                                    
                                       ○
                                       
                                          Reflexivity, (x
                                          1,
                                          x
                                          2,…,
                                          x
                                          
                                             n
                                          )≥(x
                                          1,
                                          x
                                          2,…,
                                          x
                                          
                                             n
                                          ), where x
                                          i is the truth value of statement si
                                          ;


                                          Antisymmetry, if (x
                                          1,
                                          x
                                          2,…,
                                          x
                                          
                                             n
                                          )≥(y
                                          1,
                                          y
                                          2,…,
                                          y
                                          
                                             n
                                          ) and (y
                                          1,
                                          y
                                          2,…,
                                          y
                                          
                                             n
                                          )≥(x
                                          1,
                                          x
                                          2,…,
                                          x
                                          
                                             n
                                          ), (x
                                          1,
                                          x
                                          2,…,
                                          x
                                          
                                             n
                                          )=(y
                                          1,
                                          y
                                          2,…,
                                          y
                                          
                                             n
                                          ), where xi
                                           and yi
                                           is are corresponding truth values of statement si
                                          ;


                                          Transitivity, if (x
                                          1,
                                          x
                                          2,…,
                                          x
                                          
                                             n
                                          )≥(y
                                          1,
                                          y
                                          2,…,
                                          y
                                          
                                             n
                                          ) and (y
                                          1,
                                          y
                                          2,…,
                                          y
                                          
                                             n
                                          )≥(z
                                          1,
                                          z
                                          2,…,
                                          z
                                          
                                             n
                                          ), (x
                                          1,
                                          x
                                          2,…,
                                          x
                                          
                                             n
                                          )≥(z
                                          1,
                                          z
                                          2,…,
                                          z
                                          
                                             n
                                          ), where xi
                                          , yi
                                           and zi
                                           are the corresponding truth values of statement si
                                          .

Secondly, the research proves that each subset T of the partially-ordered set E has both a supremum and an infimum:
                                    
                                       ○
                                       If t is an element of T, 
                                             
                                                t
                                                j
                                             
                                             =
                                             
                                                
                                                   
                                                      x
                                                      1
                                                      
                                                         t
                                                         j
                                                      
                                                   
                                                   ,
                                                   
                                                      x
                                                      2
                                                      
                                                         t
                                                         j
                                                      
                                                   
                                                   ,
                                                   
                                                   …
                                                   ,
                                                   
                                                      x
                                                      n
                                                      
                                                         t
                                                         j
                                                      
                                                   
                                                
                                             
                                          ; 
                                             
                                                x
                                                i
                                                
                                                   t
                                                   j
                                                
                                             
                                           is the truth value of statement s
                                             i
                                           of evaluation t
                                          
                                             j
                                          ;
                                             
                                                
                                                   
                                                      
                                                         
                                                            T
                                                            =
                                                            
                                                            
                                                               
                                                                  
                                                                     t
                                                                     1
                                                                  
                                                                  ,
                                                                  
                                                                     t
                                                                     2
                                                                  
                                                                  ,
                                                                  
                                                                  …
                                                                  ,
                                                                  
                                                                     t
                                                                     m
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            =
                                                            
                                                               
                                                                  
                                                                     
                                                                        x
                                                                        1
                                                                        
                                                                           t
                                                                           1
                                                                        
                                                                     
                                                                     ,
                                                                     
                                                                        x
                                                                        2
                                                                        
                                                                           t
                                                                           1
                                                                        
                                                                     
                                                                     ,
                                                                     
                                                                     …
                                                                     ,
                                                                     
                                                                        x
                                                                        n
                                                                        
                                                                           t
                                                                           1
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     x
                                                                     1
                                                                     
                                                                        t
                                                                        2
                                                                     
                                                                  
                                                                  ,
                                                                  
                                                                     x
                                                                     2
                                                                     
                                                                        t
                                                                        2
                                                                     
                                                                  
                                                                  ,
                                                                  
                                                                  …
                                                                  ,
                                                                  
                                                                     x
                                                                     n
                                                                     
                                                                        t
                                                                        2
                                                                     
                                                                  
                                                               
                                                            
                                                            ,
                                                         
                                                      
                                                      
                                                         
                                                            …
                                                            ,
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        x
                                                                        1
                                                                        
                                                                           t
                                                                           m
                                                                        
                                                                     
                                                                     ,
                                                                     
                                                                        x
                                                                        2
                                                                        
                                                                           t
                                                                           m
                                                                        
                                                                     
                                                                     ,
                                                                     
                                                                     …
                                                                     ,
                                                                     
                                                                        x
                                                                        n
                                                                        
                                                                           t
                                                                           m
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                            ;
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       


                                          
                                             low
                                             
                                             
                                                
                                                   
                                                      x
                                                      i
                                                      
                                                         t
                                                         1
                                                      
                                                   
                                                   ,
                                                   
                                                      x
                                                      i
                                                      
                                                         t
                                                         2
                                                      
                                                   
                                                   ,
                                                   
                                                   …
                                                   ,
                                                   
                                                      x
                                                      i
                                                      
                                                         t
                                                         m
                                                      
                                                   
                                                
                                             
                                           is a lower bounder of xi
                                          ;the lower bounder of T is
                                             
                                                
                                                   
                                                      
                                                         
                                                            ρ
                                                            =
                                                            
                                                               
                                                                  low
                                                                  
                                                                     
                                                                        
                                                                           x
                                                                           1
                                                                           
                                                                              t
                                                                              1
                                                                           
                                                                        
                                                                        ,
                                                                        
                                                                           x
                                                                           1
                                                                           
                                                                              t
                                                                              2
                                                                           
                                                                        
                                                                        ,
                                                                        
                                                                        …
                                                                        ,
                                                                        
                                                                           x
                                                                           i
                                                                           
                                                                              t
                                                                              m
                                                                           
                                                                        
                                                                     
                                                                  
                                                                  ,
                                                               
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            low
                                                            
                                                               
                                                                  
                                                                     x
                                                                     2
                                                                     
                                                                        t
                                                                        1
                                                                     
                                                                  
                                                                  ,
                                                                  
                                                                     x
                                                                     2
                                                                     
                                                                        t
                                                                        2
                                                                     
                                                                  
                                                                  ,
                                                                  
                                                                  …
                                                                  ,
                                                                  
                                                                     x
                                                                     2
                                                                     
                                                                        t
                                                                        m
                                                                     
                                                                  
                                                               
                                                            
                                                            ,
                                                         
                                                      
                                                      
                                                         
                                                            
                                                            …
                                                            ,
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               
                                                                  low
                                                                  
                                                                     
                                                                        
                                                                           x
                                                                           n
                                                                           
                                                                              t
                                                                              1
                                                                           
                                                                        
                                                                        ,
                                                                        
                                                                           x
                                                                           n
                                                                           
                                                                              t
                                                                              2
                                                                           
                                                                        
                                                                        ,
                                                                        
                                                                        …
                                                                        ,
                                                                        
                                                                           x
                                                                           n
                                                                           
                                                                              t
                                                                              m
                                                                           
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                            .
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       

Then, the following results are derived:
                                             
                                                1.
                                                ∀
                                                   t(ρ
                                                   ≤
                                                   t)

∀
                                                   e(∀
                                                   t(e
                                                   ≤
                                                   t)→
                                                   e
                                                   ≤
                                                   ρ)), where e is an element of E;


                                                   infimum(T)=
                                                   ρ.

Similarly, below results are derived:
                                             
                                                
                                                   
                                                      
                                                         
                                                            supremum
                                                            
                                                               T
                                                            
                                                            
                                                            =
                                                            
                                                            
                                                               
                                                                  high
                                                                  
                                                                     
                                                                        x
                                                                        1
                                                                        
                                                                           t
                                                                           1
                                                                        
                                                                     
                                                                     
                                                                        x
                                                                        1
                                                                        
                                                                           t
                                                                           2
                                                                        
                                                                     
                                                                     …
                                                                     
                                                                        x
                                                                        i
                                                                        
                                                                           t
                                                                           m
                                                                        
                                                                     
                                                                  
                                                                  ,
                                                               
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            high
                                                            
                                                            
                                                               
                                                                  x
                                                                  2
                                                                  
                                                                     t
                                                                     1
                                                                  
                                                               
                                                               
                                                                  x
                                                                  2
                                                                  
                                                                     t
                                                                     2
                                                                  
                                                               
                                                               …
                                                               
                                                                  x
                                                                  2
                                                                  
                                                                     t
                                                                     m
                                                                  
                                                               
                                                            
                                                            ,
                                                         
                                                      
                                                      
                                                         
                                                            
                                                            …
                                                            ,
                                                         
                                                      
                                                      
                                                         
                                                            high
                                                            
                                                            
                                                               
                                                                  
                                                                     x
                                                                     n
                                                                     
                                                                        t
                                                                        1
                                                                     
                                                                  
                                                                  
                                                                     x
                                                                     n
                                                                     
                                                                        t
                                                                        2
                                                                     
                                                                  
                                                                  …
                                                                  
                                                                     x
                                                                     n
                                                                     
                                                                        t
                                                                        m
                                                                     
                                                                  
                                                               
                                                            
                                                            .
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       

Therefore, each subset T of the partially-ordered set E has both a supremum and an infimum.

Therefore, E is a complete lattice.

The Knaster–Tarski theorem [13] states that there is a set of fixed points of f in E if E is a complete lattice and f
                        :
                        E
                        →
                        E is an order preserving function. A fixed point of f in E is denoted as e
                        =
                        f(e).

Not all evaluation steps are order preserving. There are cases, however, of oscillating results. Specifically, these are discussed below.

A concurrent evaluation simultaneously executes several evaluation actions in an evaluation step. However, a concurrent evaluation is not always an order preserving function due to the simultaneous evaluation of both the dependency and its dependents. A reverse evaluation result of a statement may change the results of its dependents. This may result in oscillation results in SCC; such as the example shown in Table 6. Oscillation is the repetitive variation among different results. Oscillation results will result in an interminable evaluation process.

A sequential evaluation sequentially executes several evaluation actions in one evaluation step. However, a sequential evaluation is not always an order preserving function when there is an improper evaluation order, in which a statement evaluation is scheduled prior to its dependencies. This may also result in oscillation results; such as the example shown in Table 7.

A serialized sequence is a sequential evaluation in proper order, which schedules each dependency prior to its dependents. A graph can either be a directed acyclic graph (DAG), a SCC, or a directed graph with SCC. For a SCC, if there is only one path from each node to every other node without crossing itself, the component is a simple SCC (SSCC); otherwise, it is a complex SCC (CSCC). In a serialized sequence, the evaluation is an order preserving function. The proof is:
                              
                                 (1)
                                 For a directed acyclic graph (DAG), a topological sorting [33] avoids an improper evaluation sequence; such an evaluation result is stable and can be derived in one evaluation step. The evaluation step can be equivalently defined as a sequence of functions as:
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         f
                                                         :
                                                         
                                                            x
                                                            1
                                                         
                                                         →
                                                         
                                                            x
                                                            2
                                                         
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         f
                                                         :
                                                         
                                                            
                                                               x
                                                               1
                                                            
                                                            
                                                               x
                                                               2
                                                            
                                                         
                                                         →
                                                         
                                                            x
                                                            3
                                                         
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         …
                                                      
                                                   
                                                   
                                                      
                                                         f
                                                         :
                                                         
                                                            
                                                               x
                                                               1
                                                            
                                                            
                                                               x
                                                               2
                                                            
                                                            …
                                                            
                                                               x
                                                               
                                                                  n
                                                                  −
                                                                  1
                                                               
                                                            
                                                         
                                                         →
                                                         
                                                            x
                                                            n
                                                         
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    where s
                                    1,
                                    s
                                    2,…, and s
                                    
                                       n
                                     are topological sorted statements, x
                                    1,
                                    x
                                    2,…, and x
                                    
                                       n
                                     are truth values of these statements, x
                                    1 is the initial input.

The below results are derived:
                                       
                                          1.
                                          Each evaluation action is order preserving; therefore, f is order preserving because each evaluation action feeds its result to its next action and shares the same order preserving property;

If the fixed point derivation function is defined as f
                                             
                                                fixpoint
                                             
                                             :
                                             x
                                             1
                                             →
                                             P, where x
                                             1 is the initial input and P is the fixed point, the function is order preserving.

For a SSCC, each node has the only path to its dependent, therefore, the deadlock can be disentangled and ordered by initiating one of its nodes. The deadlock initiation is an action that values one of the nodes with one of its possible truth values. If e
                                    
                                       i
                                     is an evaluation step, the evaluation step can be equivalently defined as a sequence of functions as:
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            f
                                                            
                                                               e
                                                               i
                                                            
                                                         
                                                         :
                                                         
                                                            
                                                               x
                                                               1
                                                               
                                                                  e
                                                                  i
                                                               
                                                            
                                                         
                                                         →
                                                         
                                                            x
                                                            2
                                                            
                                                               e
                                                               i
                                                            
                                                         
                                                         
                                                         
                                                            
                                                               i
                                                               ≥
                                                               1
                                                            
                                                         
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            f
                                                            
                                                               e
                                                               i
                                                            
                                                         
                                                         :
                                                         
                                                            
                                                               x
                                                               1
                                                               
                                                                  e
                                                                  i
                                                               
                                                            
                                                            
                                                               x
                                                               2
                                                               
                                                                  e
                                                                  i
                                                               
                                                            
                                                         
                                                         →
                                                         
                                                            x
                                                            3
                                                            
                                                               e
                                                               i
                                                            
                                                         
                                                         
                                                         
                                                            
                                                               i
                                                               ≥
                                                               1
                                                            
                                                         
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         …
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            f
                                                            
                                                               e
                                                               i
                                                            
                                                         
                                                         :
                                                         
                                                            
                                                               x
                                                               1
                                                               
                                                                  e
                                                                  i
                                                               
                                                            
                                                            
                                                               x
                                                               2
                                                               
                                                                  e
                                                                  i
                                                               
                                                            
                                                            …
                                                            
                                                               x
                                                               
                                                                  n
                                                                  −
                                                                  1
                                                               
                                                               
                                                                  e
                                                                  i
                                                               
                                                            
                                                         
                                                         →
                                                         
                                                            x
                                                            n
                                                            
                                                               e
                                                               i
                                                            
                                                         
                                                         
                                                         
                                                            
                                                               i
                                                               ≥
                                                               1
                                                            
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            f
                                                            
                                                               e
                                                               i
                                                            
                                                         
                                                         :
                                                         
                                                            
                                                               x
                                                               2
                                                               
                                                                  e
                                                                  i
                                                               
                                                            
                                                            
                                                               x
                                                               3
                                                               
                                                                  e
                                                                  i
                                                               
                                                            
                                                            …
                                                            
                                                               x
                                                               n
                                                               
                                                                  e
                                                                  i
                                                               
                                                            
                                                         
                                                         →
                                                         
                                                            x
                                                            1
                                                            
                                                               e
                                                               i
                                                            
                                                         
                                                         
                                                         
                                                            
                                                               i
                                                               >
                                                               1
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    where s
                                    1,
                                    s
                                    2,…, and s
                                    
                                       n
                                     are topological sorted statements, x
                                    1,
                                    x
                                    2,…, and x
                                    
                                       n
                                     are truth values of these statements, and 
                                       
                                          x
                                          1
                                          
                                             e
                                             1
                                          
                                       
                                     is the initial input of s
                                    1.

The below results are derived:
                                       
                                          1.
                                          Each evaluation action is order preserving; therefore, 
                                                
                                                   f
                                                   
                                                      e
                                                      i
                                                   
                                                
                                              is order preserving because each evaluation action feeds its result to its next action and share the same order preserving property;

If the fixed point derivation is defined as a function 
                                                
                                                   f
                                                   fixpoint
                                                
                                                :
                                                
                                                   x
                                                   1
                                                   
                                                      e
                                                      1
                                                   
                                                
                                                →
                                                P
                                             , where 
                                                
                                                   x
                                                   1
                                                   
                                                      e
                                                      1
                                                   
                                                
                                              is the initial input and P is the fixed point, the function is order preserving.


                                             
                                                
                                                   x
                                                   1
                                                   
                                                      e
                                                      1
                                                   
                                                
                                                ∈
                                                
                                                   T
                                                   U
                                                   F
                                                
                                             ; hence, e
                                             =
                                             f
                                             
                                                step
                                             (e) can be derived in three steps, where e
                                             =(x
                                             1,
                                             x
                                             2,…,
                                             x
                                             
                                                n
                                             ).

For a CSCC, not all the node has only one path to its dependent, therefore, the deadlock can be disentangled and ordered by initiating one of its nodes and condensing the rest SCCs to atomic nodes. This makes a directed acyclic graph (DAG).

When s
                           1
                           ',
                           s
                           2
                           ',…, and s
                           
                              m
                           
                           ' are the derived nodes, including the initial node s
                           1
                           ', e
                           1
                           ',
                           e
                           2
                           ', e
                           3
                           ', … are evaluation steps, 
                              
                                 x
                                 1
                                 
                                    '
                                    
                                       e
                                       i
                                       '
                                    
                                 
                              
                              ,
                              
                                 x
                                 2
                                 
                                    '
                                    
                                       e
                                       i
                                       '
                                    
                                 
                              
                              ,
                              
                              …
                              ,
                            and 
                              
                                 x
                                 m
                                 
                                    '
                                    
                                       e
                                       i
                                       '
                                    
                                 
                              
                            are the corresponding evaluation results, a evaluation step, which consists of a set of evaluation actions of these nodes, can be equivalently defined as a sequence of functions as below:
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   f
                                                   
                                                      e
                                                      i
                                                      '
                                                   
                                                
                                                :
                                                
                                                   
                                                      x
                                                      1
                                                      
                                                         '
                                                         
                                                            e
                                                            i
                                                            '
                                                         
                                                      
                                                   
                                                
                                                →
                                                
                                                   x
                                                   2
                                                   
                                                      '
                                                      
                                                         e
                                                         i
                                                         '
                                                      
                                                   
                                                
                                                
                                                
                                                   
                                                      i
                                                      ≥
                                                      1
                                                   
                                                
                                                
                                             
                                          
                                          
                                             
                                                
                                                   f
                                                   
                                                      e
                                                      i
                                                      '
                                                   
                                                
                                                :
                                                
                                                   
                                                      x
                                                      
                                                         '
                                                         1
                                                         
                                                            e
                                                            i
                                                            '
                                                         
                                                      
                                                      ,
                                                      
                                                         x
                                                         2
                                                         
                                                            e
                                                            i
                                                            '
                                                         
                                                      
                                                   
                                                
                                                →
                                                
                                                   x
                                                   3
                                                   
                                                      '
                                                      
                                                         e
                                                         i
                                                         '
                                                      
                                                   
                                                
                                                
                                                
                                                   
                                                      i
                                                      ≥
                                                      1
                                                   
                                                
                                                
                                             
                                          
                                          
                                             
                                                …
                                             
                                          
                                          
                                             
                                                
                                                   f
                                                   
                                                      e
                                                      i
                                                      '
                                                   
                                                
                                                :
                                                
                                                   
                                                      
                                                         x
                                                         1
                                                         
                                                            '
                                                            
                                                               e
                                                               i
                                                               '
                                                            
                                                         
                                                      
                                                      ,
                                                      
                                                         x
                                                         2
                                                         
                                                            '
                                                            
                                                               e
                                                               i
                                                               '
                                                            
                                                         
                                                      
                                                      ,
                                                      …
                                                      ,
                                                      x
                                                      
                                                         '
                                                         
                                                            m
                                                            −
                                                            1
                                                         
                                                         
                                                            e
                                                            i
                                                            '
                                                         
                                                      
                                                   
                                                
                                                →
                                                x
                                                
                                                   '
                                                   m
                                                   
                                                      e
                                                      i
                                                      '
                                                   
                                                
                                                
                                                
                                                   
                                                      i
                                                      ≥
                                                      1
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   f
                                                   
                                                      e
                                                      i
                                                      '
                                                   
                                                
                                                :
                                                
                                                   
                                                      x
                                                      2
                                                      
                                                         '
                                                         
                                                            e
                                                            i
                                                            '
                                                         
                                                      
                                                   
                                                   
                                                      x
                                                      3
                                                      
                                                         '
                                                         
                                                            e
                                                            i
                                                            '
                                                         
                                                      
                                                   
                                                   …
                                                   
                                                      x
                                                      m
                                                      
                                                         '
                                                         
                                                            e
                                                            i
                                                            '
                                                         
                                                      
                                                   
                                                
                                                →
                                                
                                                   x
                                                   1
                                                   
                                                      '
                                                      
                                                         e
                                                         i
                                                         '
                                                      
                                                   
                                                
                                                
                                                
                                                   
                                                      i
                                                      >
                                                      1
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           where 
                              
                                 x
                                 1
                                 
                                    '
                                    
                                       e
                                       1
                                       '
                                    
                                 
                              
                            is the initial input of s
                           1
                           '. If each node evaluation action is order preserving, the below results are derived:
                              
                                 1.
                                 
                                    
                                       
                                          f
                                          
                                             e
                                             i
                                             '
                                          
                                       
                                     is order preserving because each evaluation action feeds its result to its next action and shares the same order preserving property;

If the fixed point derivation is defined as a function 
                                       
                                          f
                                          fixpoint
                                       
                                       :
                                       
                                          x
                                          1
                                          
                                             '
                                             
                                                e
                                                1
                                                '
                                             
                                          
                                       
                                       →
                                       P
                                    , where 
                                       
                                          x
                                          1
                                          
                                             '
                                             
                                                e
                                                1
                                                '
                                             
                                          
                                       
                                     is the initial input and P is the fixed point, the function is order preserving;


                                    
                                       
                                          x
                                          1
                                          
                                             '
                                             
                                                e
                                                1
                                                '
                                             
                                          
                                       
                                       ∈
                                       
                                          T
                                          U
                                          F
                                       
                                    ; hence, e′=
                                    f
                                    
                                       step
                                    (e′) can be derived in three steps, where e′=(x
                                    1
                                    ',
                                    x
                                    2
                                    ', …, x
                                    
                                       m
                                    
                                    ').

If a derived node is a condensed deadlock, further initialization is needed to disentangle the deadlock. The evaluation of a derived node s
                           
                              j
                           
                           ' is defined as 
                              
                                 f
                                 
                                    e
                                    i
                                    '
                                 
                              
                              :
                              
                                 
                                    x
                                    1
                                    
                                       '
                                       
                                          e
                                          i
                                          '
                                       
                                    
                                 
                                 
                                    x
                                    2
                                    
                                       '
                                       
                                          e
                                          i
                                          '
                                       
                                    
                                 
                                 …
                                 
                                    x
                                    
                                       j
                                       −
                                       1
                                    
                                    
                                       '
                                       
                                          e
                                          i
                                          '
                                       
                                    
                                 
                                 
                                    x
                                    1
                                    
                                       '
                                       '
                                       
                                          x
                                          j
                                          '
                                       
                                    
                                 
                              
                              →
                              
                                 x
                                 j
                                 
                                    '
                                    
                                       e
                                       i
                                       '
                                    
                                 
                              
                              
                              
                                 
                                    i
                                    ≥
                                    1
                                    ,
                                    
                                    m
                                    ≥
                                    j
                                    >
                                    1
                                 
                              
                           , where 
                              
                                 x
                                 1
                                 
                                    '
                                    '
                                    
                                       x
                                       j
                                       '
                                    
                                 
                              
                            is the initial input of s
                           
                              j
                           
                           ' on one of its condensed nodes. Normally, the initiation is not needed if the node is atomic. However, it does not change the evaluation result. For simplicity, the initiation is used in each node for the proof. Then, the evaluation step can be equivalently defined as a sequence of functions as:
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   f
                                                   
                                                      e
                                                      i
                                                      '
                                                   
                                                
                                                :
                                                
                                                   
                                                      x
                                                      1
                                                      
                                                         '
                                                         
                                                            e
                                                            i
                                                            '
                                                         
                                                      
                                                   
                                                   
                                                      x
                                                      1
                                                      
                                                         '
                                                         '
                                                         
                                                            x
                                                            2
                                                            '
                                                         
                                                      
                                                   
                                                
                                                →
                                                
                                                   x
                                                   2
                                                   
                                                      '
                                                      
                                                         e
                                                         i
                                                         '
                                                      
                                                   
                                                
                                                
                                                
                                                   
                                                      i
                                                      ≥
                                                      1
                                                   
                                                
                                                
                                             
                                          
                                          
                                             
                                                
                                                   f
                                                   
                                                      e
                                                      i
                                                      '
                                                   
                                                
                                                :
                                                
                                                   
                                                      x
                                                      
                                                         '
                                                         1
                                                         
                                                            e
                                                            i
                                                            '
                                                         
                                                      
                                                      ,
                                                      
                                                         x
                                                         2
                                                         
                                                            '
                                                            
                                                               e
                                                               i
                                                               '
                                                            
                                                         
                                                      
                                                      ,
                                                      
                                                         x
                                                         1
                                                         
                                                            '
                                                            '
                                                            
                                                               x
                                                               3
                                                               '
                                                            
                                                         
                                                      
                                                   
                                                
                                                →
                                                
                                                   x
                                                   3
                                                   
                                                      '
                                                      
                                                         e
                                                         i
                                                         '
                                                      
                                                   
                                                
                                                
                                                
                                                   
                                                      i
                                                      ≥
                                                      1
                                                   
                                                
                                                
                                             
                                          
                                          
                                             
                                                …
                                             
                                          
                                          
                                             
                                                
                                                   f
                                                   
                                                      e
                                                      i
                                                      '
                                                   
                                                
                                                :
                                                
                                                   
                                                      
                                                         x
                                                         1
                                                         
                                                            '
                                                            
                                                               e
                                                               i
                                                               '
                                                            
                                                         
                                                      
                                                      ,
                                                      
                                                         x
                                                         2
                                                         
                                                            '
                                                            
                                                               e
                                                               i
                                                               '
                                                            
                                                         
                                                      
                                                      ,
                                                      …
                                                      ,
                                                      x
                                                      
                                                         '
                                                         
                                                            m
                                                            −
                                                            1
                                                         
                                                         
                                                            e
                                                            i
                                                            '
                                                         
                                                      
                                                      ,
                                                      
                                                         x
                                                         1
                                                         
                                                            '
                                                            '
                                                            
                                                               x
                                                               m
                                                               '
                                                            
                                                         
                                                      
                                                   
                                                
                                                →
                                                x
                                                
                                                   '
                                                   m
                                                   
                                                      e
                                                      i
                                                      '
                                                   
                                                
                                                
                                                
                                                   
                                                      i
                                                      ≥
                                                      1
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   f
                                                   
                                                      e
                                                      i
                                                      '
                                                   
                                                
                                                :
                                                
                                                   
                                                      x
                                                      2
                                                      
                                                         '
                                                         
                                                            e
                                                            i
                                                            '
                                                         
                                                      
                                                   
                                                   
                                                      x
                                                      3
                                                      
                                                         '
                                                         
                                                            e
                                                            i
                                                            '
                                                         
                                                      
                                                   
                                                   …
                                                   
                                                      x
                                                      m
                                                      
                                                         '
                                                         
                                                            e
                                                            i
                                                            '
                                                         
                                                      
                                                   
                                                
                                                →
                                                
                                                   x
                                                   1
                                                   
                                                      '
                                                      
                                                         e
                                                         i
                                                         '
                                                      
                                                   
                                                
                                                
                                                
                                                   
                                                      i
                                                      >
                                                      1
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           where 
                              
                                 x
                                 1
                                 
                                    '
                                    
                                       e
                                       1
                                       '
                                    
                                 
                              
                            is the initial input of s
                           1
                           '. If the evaluation of each derived node is order preserving, the below results are derived:
                              
                                 1.
                                 
                                    
                                       
                                          f
                                          
                                             e
                                             i
                                             '
                                          
                                       
                                     is order preserving because each evaluation action feeds its result to its next action and shares the same order preserving property;

If the fixed point derivation is defined as a function 
                                       
                                          f
                                          fixpoint
                                       
                                       :
                                       
                                          x
                                          1
                                          
                                             '
                                             
                                                e
                                                1
                                                '
                                             
                                          
                                       
                                       →
                                       P
                                    , where 
                                       
                                          x
                                          1
                                          
                                             '
                                             
                                                e
                                                1
                                                '
                                             
                                          
                                       
                                     is the initial input and P is the fixed point, the function is order preserving;


                                    
                                       
                                          x
                                          1
                                          
                                             '
                                             
                                                e
                                                1
                                                '
                                             
                                          
                                       
                                       ∈
                                       
                                          T
                                          U
                                          F
                                       
                                    ; hence, e′=
                                    f
                                    
                                       step
                                    (e′) can be derived in three steps, where e′=(x
                                    1
                                    ',
                                    x
                                    2
                                    ',…,
                                    x
                                    
                                       m
                                    
                                    ').

According to (1), if node s
                              j
                           
                           ' is an atomic node, its evaluation result can be directly derived from 
                              
                                 x
                                 1
                                 
                                    '
                                    
                                       e
                                       i
                                       '
                                    
                                 
                              
                              ,
                              
                                 x
                                 2
                                 
                                    '
                                    
                                       e
                                       i
                                       '
                                    
                                 
                              
                              ,
                              …
                              ,
                            and 
                              
                                 x
                                 
                                    j
                                    −
                                    1
                                 
                                 
                                    '
                                    
                                       e
                                       i
                                       '
                                    
                                 
                              
                           . According to (2), if the node is a SSCC, its evaluation result, which is initialized by 
                              
                                 x
                                 1
                                 
                                    '
                                    '
                                    
                                       x
                                       j
                                       '
                                    
                                 
                              
                           , can be derived by 
                              
                                 f
                                 fixpoint
                              
                              :
                              
                                 x
                                 1
                                 
                                    '
                                    '
                                    
                                       x
                                       j
                                       '
                                    
                                 
                              
                              →
                              P
                           . According to (3), if the node is a CSCC, further initialization, disentanglement and condensation are needed. These need to be recursively repeated until only atomic nodes or SSCC can be found. Hence, the final result can be derived in finite steps.

The SCC initiation may be on different nodes. The input of the initiated node is valued according to the adopted logical assumption. When the PTL cardinality does not equal one, the initiation is not unique. According to f
                           
                              fixpoint
                           
                           :
                           x
                           1
                           →
                           P, the fixed point may not be the same for different inputs.

Several standardization bodies, such as ISO, OGC, W3C, and IETF are involved in the field of geographic information standardization. To support interoperable geo-enabled web, corresponding communication protocols, information models and etc. need to be coherent by reusing standardized modules of each other. Although these standards are designed to be independent with each other, the standards are always not self-contained [24]. There are dependencies among each other on different granularities, such as scopes, requirements, terms and versions [31]. To better illustrate the problem, OGC WCS 2.0 standard series [3] is used as a study case. WCS 2.0 follow a core and extensions mechanism [32] to enhance interoperability and harmony between complex spatial information and services. The core [4] specifies the basic data/metadata retrieval requirements based on unified coverage model while extensions define additional requirements which are coherent with the core. To successfully retrieve the data in a specific encoding, at least one protocol is required. The specified protocols are based on IETF HTTP [5–7]. Furthermore, the result is required to be provided in a way that is conformant with the unified coverage model [2]. This coverage model, which is encoded in W3C XML, is a machine-orient model that follows abstract ISO models [2]. As a whole, WCS 2.0 standard series depends on the specifications of OGC, W3C, and IETF. Moreover, there are circle dependencies among the service modules, for example, the core needs at least one protocol extension and the core shall follow the core.

Conformance testing programs are set up to determine whether a product or system meets the requirements of the specified standard. Theoretically, the testing result needs to be based on all connected specifications. It would be easy to evaluate the overall result if there is a testing result for each specification. However, not all standards are directly testable or have official tests. OGC abstract specifications, which are ISO Standards, are provided in rather theoretical ways, hence, not testable unless corresponding practical implementation standards are specified, such as the GMLCOV, which is a practical implementation of the abstract ISO models. The extensions on CRS and interoperation and etc. [3] are still on the production process, hence, it takes some time to make the corresponding tests be officially available. Furthermore, overall orchestration of testing results brings new certification problems. OGC Compliance and Interoperability Testing Initiative (CITE) [34] provides its testing via Test, Evaluation, And Measurement (TEAM) Engine and the Compliance Test Language (CTL) [25]. W3C Open Web Platform Testing Plan [35] provides its testing via W3C Conformance Test Framework [36]. The cross certification at the organization level would need deep communication and trust among the organizations.

Logic assumptions are referred to in the standardization process. Each WCS 2.0 specification document contains an Annex with an Abstract Test Suite (ATS) consisting of one test specification for each requirement. These tests are formulated abstractly in the sense that they only give a high-level description; a concrete Executable Test Suite (ETS), which is developed in OGC CTL, represents the executable counterpart of the ATS. The ETS follows a black box testing approach. This approach tests the interface of the service by sending service requests and checks the results. Each test only checks the specific characters of the targeted services according to ATS, with the others stubbed to be true.

The core provides the semantic of the communication without touching the syntax in different encodings. It needs at least one protocol extension for the communication. Currently, there are 3 protocol extensions, specifically, HTTP KVP [5], XML POST [6], and SOAP [7]. There may be other protocols in the future due to the evolvement of the IT industry. RESTFul is one of the forthcoming protocols for the coverage delivery although there is no official test available for the moment. Hence, the conformance statement on the requirement of protocol extensions is recommended to follow OWA assumption, leaving the unknown to be unknown.

Beyond the adopted coverage model in the core, additional domain-specific metadata, semantics and ontologies, which are unknown to the model, are treated as unknown object unless specific standards are referenced. For example, in Earth Observation community, EO-WCS [1] services deliver their coverage by combing EO metadata [29] according to ISO EO model [30].

In the context of the WCS 2.0, there are strict requirements, in which unknown is not accepted. To avoid undecidable problems, especially, the service orchestration, a subsetting on an unknown coverage axes shall not return a valid result, which will cause an unpredictable service chain.

@&#CONCLUSIONS@&#

The research has investigated on evaluating conformance statements against complex specifications consisting of requirements with manifold interrelationships dependencies between them. This research contributes to schedule the conformance statement evaluation with a directed dependency graph. This is based on a three-valued logic properly taking into account Closed World Assumption (CWA), Open World Assumption (OWA) and Stub Assumption (SA). Based on fixed point theory, the research has shown that oscillation results exist under improver evaluation schedules. Via proper initiation on deadlocks, a stable result can be derived with sequential evaluation in proper order.

The overall orchestration helps to spot inconsistencies and incompleteness among requirements, implementations and tests. The study example is geo service standardization, concretely: geo raster services based on OGC WCS 2.0. The theoretical results described in this contribution form the basis for the generation of the concrete Executable Test Suite (ETS) which becomes the official conformance test suite of WCS in OGC's Compliance and Interoperability Testing Initiative (CITE) program.

However, these results transcend geospatial service testing and allow improved and more efficient Web service testing in general based on specifications which make their interdependencies explicit. From this perspective, this research also considers the question of how to craft specifications – and, hence, standards – in a way which eases rigid testing.

@&#ACKNOWLEDGMENT@&#

This work is supported by the National Natural Science Foundation of China (41401454), Defense Industrial Technology Development Program, European Space Agency (ESA) HMA-FO, EU FP7 EarthServer (283610), and Foundation of Fujian Educational Committee (JA14063).

@&#REFERENCES@&#

