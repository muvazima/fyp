@&#MAIN-TITLE@&#Frequency optimization in public transportation systems: Formulation and metaheuristic approach

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We propose a new MILP formulation; it computes the global optimum for small cases.


                        
                        
                           
                           Improvements over travel time of around 3% are obtained for a small real case.


                        
                        
                           
                           We propose a metaheuristic to solve large-sized cases.


                        
                        
                           
                           The metaheuristic is applied to a larger real case, comprising more than 130 lines.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Transportation

Bus frequency optimization

Mixed integer linear programming

Tabu Search

@&#ABSTRACT@&#


               
               
                  We study the transit frequency optimization problem, which aims to determine the time interval between subsequent buses for a set of public transportation lines given by their itineraries, i.e., sequences of stops and street sections. The solution should satisfy a given origin–destination demand and a constraint on the available fleet of buses. We propose a new mixed integer linear programming (MILP) formulation for an already existing model, originally formulated as a nonlinear bilevel one. The proposed formulation is able to solve to optimality real small-sized instances of the problem using MILP techniques. For solving larger instances we propose a metaheuristic which accuracy is estimated by comparing against exact results (when possible). Both exact and approximated approaches are tested by using existing cases, including a real one related to a small-city which public transportation system comprises 13 lines. The magnitude of the improvement of that system obtained by applying the proposed methodologies, is comparable with the improvements reported in the literature, related to other real systems. Also, we investigate the applicability of the metaheuristic to a larger-sized real case, comprising more than 130 lines.
               
            

@&#INTRODUCTION@&#

When designing a public transportation system, the planners take decisions that impact in the cost of the system, which is determined by the monetary cost of operation and fares, and the travel time of the users. In systems based on buses, the literature identifies five stages for designing a public transportation system (Ceder & Wilson, 1986): route network design, frequency setting, timetable design, fleet assignment and crew assignment. In real systems, usually these stages are performed sequentially, where decisions taken at a given stage influence decisions taken at subsequent stages. Also, these decisions are taken for different planning horizons, whether the context of the planning is strategic (long term), tactical (medium term) or operational (short term).

The frequency setting problem implies to determine the time interval between subsequent buses on the lines, based on their itinerary (sequence of street segments and bus stops) and the demand given by an origin–destination matrix. During the strategic planning of a public transportation system (in particular, when designing the itinerary of the lines, i.e. the route network), a preliminary setting of frequencies is needed. Also, during the tactical planning it is necessary to adjust the frequencies to demand variations along different seasons of the year or time of day, or as response to changes in the route network design (Desaulniers & Hickman, 2007). The frequencies impact both on the users (waiting time, capacity of the lines) and also in the operators (operational cost determined strongly by the size of the required fleet).

The frequency setting problem has been approached in the literature as an optimization problem, where usually the objective function states the minimization of the overall travel time of the users (walking, on-board and waiting), under a fleet size constraint as well as other infrastructure and policy constraints (Constantin & Florian, 1995; Han & Wilson, 1982; Schéele, 1981). Since frequency optimization models should include measures relative to the performance of the systems from the viewpoint of the users (typically the waiting time), they should include a sub-model of the behavior of the users with respect to a set of bus lines. Such a model, known as assignment sub-model, usually has a complex formulation and solution method, specially when the influence of the bus capacity is considered in the modeling of the user behavior. That complexity determines an important part of the overall complexity of the frequency optimization model. Moreover, the validity of an assignment model for public transportation, in most cases depends on the real context where it is applied.

The existing studies concerning frequency optimization usually involve nonlinear models which are solved approximately (Constantin & Florian, 1995; Schéele, 1981). The nonlinearity arises from the fact that the waiting time is inversely proportional to the frequencies; also, the modeling of the interaction among different lines results in nonlinear expressions. The existing models consider assignment sub-models exhibiting different degrees of realism. The cases used to test the methodologies range from small-sized and fictitious cases to medium-sized cases related to real cities comprising up to 100 lines approximately (Constantin & Florian, 1995; Yu, Yang, & Yao, 2010).

Taking into account this state of the art (more widely discussed in Section 2), in this work we contribute in two specific directions:
                        
                           •
                           We propose a mixed integer linear programming (MILP) formulation for an already existing frequency optimization model (Constantin & Florian, 1995). Given the nature of the proposed formulation, it can be solved exactly by using a commercial MILP solver. Moreover, it includes an assignment sub-model (Spiess & Florian, 1989) that is widely accepted in the literature.

With the aim of solving large-sized instances of the problem (systems comprising more than 100 lines), we propose a metaheuristic which accuracy (in the sense of distance to optimum) is estimated by comparing against results produced by the exact model (when possible, i.e. for the smaller instances).

Concerning the first contribution, we note that no method existing in the literature is able to find solutions with proven (global) optimality. This is particularly important in the transit frequency optimization problem, since the improvements reported over user’s travel time of current solutions are relatively small (Constantin & Florian, 1995; Yu et al., 2010). Therefore, given the heuristic nature of existing solution methods, it remains unclear whether is possible to improve the results even more.

Our metaheuristic is able to find solutions which accuracy is estimated (when possible) by comparing against exact solutions. To the best of our knowledge, this is the first published approximated method which results are validated against optimal ones using a real case. The metaheuristic produces results in relatively short time and it includes routines which execute in polynomial time (with respect to the number of lines, size of the underlying graph model and density of the origin–destination matrix), so it is suitable to be applied for solving larger cases.

The models and algorithms proposed in this work are applied to real cases and fictitious ones, which illustrate their applications.

The structure of the article is as follows. Section 2 presents a literature review while Section 3 contains a description of the mathematical model and the proposed mathematical formulation. Section 4 describes the metaheuristic proposed to solve the problem approximately while Section 5 presents numerical results of both exact and approximated methods over different test cases. Finally, Section 6 comments conclusions and further work.

@&#LITERATURE REVIEW@&#

In this section we provide a review of representative studies in the field of frequency optimization for public transportation systems. Almost all models are formulated in terms of a graph which nodes represent bus stops, centroids (fictitious points where the demand of a given zone is assumed to be concentrated) or endpoints of a section of line’s itinerary. The arcs represent either a section of a line’s itinerary, a walking trajectory (between centroids and stops) or a specific event or action, like waiting for a line or performing a transfer between different lines. Moreover, typically it is assumed that the demand between different zones of the city (represented by centroids) is given in the form of an origin–destination (OD) matrix; each element different from zero of this matrix is called OD pair. It is worth mentioning that different levels of detail of the graph model mentioned above can be found in the literature.

The model proposed in (Schéele, 1981) states the minimization of the walking and on-board travel time plus the waiting time. A constraint imposes an upper limit on the fleet size. The behavior of the users is implicitly embedded into the model: given an OD pair, its demand is divided among the different lines according to an entropy and a bus capacity constraint. The formulation has a nonconvex objective function and linear or convex constraints. The solution algorithm computes an approximated solution by refining a set of frequencies according to a descent strategy. The methodology is tested with a case relative to the city of Linköping (Sweden), with 6 lines and 38 zones.

In (Han & Wilson, 1982) a model is proposed to set frequencies on heavily utilized lines. Therefore the objective function states the minimization of the occupancy level at the most heavily loaded point on any route in the system. The constraint set includes upper limits on the fleet size and the capacity of the buses. The assignment sub-model is represented by a nonexplicit constraint which encodes the hypothesis concerning the user behavior: passengers give preference to lines that lead to destination directly (i.e. without transfers), although they imply higher travel time. Besides this rule, the demand corresponding to a given OD pair is distributed among the different lines following the frequency-share rule (Chriqui & Robillard, 1975). A two stage heuristic is proposed to solve the model: first, a base allocation procedure (which iteratively corrects passenger flows and line frequencies) is performed in order to find a lower bound for the bus capacity constraint; second, a surplus allocation procedure solves a problem with only linear constraints. Although the methodology was proposed to be applied to the city of Cairo (Egypt), only an illustrative case comprising 6 nodes and 3 routes is shown.

The frequency optimization problem is stated in (Constantin & Florian, 1995) as a nonlinear bilevel problem. In this model, the upper level represents the planner who wants to ensure minimal overall travel time and fleet size feasibility. The lower level represents the users who act by minimizing the travel time, according to the optimal strategies assignment model (Spiess & Florian, 1989). Therefore, the objective functions of both levels have the same expression. The model is solved approximately by an iterative algorithm based on a gradient descent which uses specific properties of the problem. The methodology is tested by using cases related to the cities of Stockholm (Sweden), Winnipeg (Canada) and Portland (U.S.A.), comprising 38, 67 and 115 lines respectively.

In (Gao, Sun, & Shan, 2004) a multi-objective model is proposed, which seeks to minimize the overall travel time of the users and the operational cost of the operators (assumed to be linearly proportional to the frequencies). The salient characteristic of this work is the internalization of the congestion in the behavior of the users. For a given set of frequencies, the assignment model proposed in (de Cea & Fernández, 1993) is applied, which distributes the demand according to the effective frequencies. The proposed approximate solution method starts with an initial set of frequencies, which is successively improved by a sensitivity analysis procedure. The methodology is tested by using a very small illustrative example comprising 4 nodes and 4 lines.

More recently, Yu et al. (2010) propose a genetic algorithm for bus frequency optimization. To the best of our knowledge, this is the first application of metaheuristics to this problem. The optimization model considers the minimization of the on-board and waiting time, subject to a fleet size constraint. The behavior of the users is modeled by using the optimal strategies assignment model (Spiess & Florian, 1989). The approximate solution method uses an integer encoding of frequencies and genetic operators which redistribute the available fleet among the different lines of the system. The methodologies are tested with an illustrative small-sized case and with a case related to the city of Dalian (China) comprising 3,004 bus stops and 89 lines.

The latest references to transit frequency optimization can be found in (dell’Olio, Ibeas, & Ruisánchez, 2012; Ruisánchez, dell’Olio, & Ibeas, 2012), where a bilevel model is proposed. The upper level seeks to improve an overall cost function by varying frequencies and bus sizes; both Hooke-Jeeves algorithm and Tabu Search are used as heuristic search. The lower level problem solves the capacity constrained assignment problem formulated by de Cea and Fernández (1993). The authors test the methodologies by using the case of the city of Santander (Spain), comprising 15 bus lines. Also, in (Szeto & Wu, 2011) the frequency optimization is solved heuristically as part of the transit network design problem and tested with a suburban residential area in Hong Kong comprising 10 lines.

As a summary, we can say that although different models for frequency optimization have been proposed in the literature, they have very similar objective functions and constraints. Slight variations are observed in the hypothesis assumed by most of the assignment sub-models considered. The bus capacity is mostly added as a constraint enforced by the planner, who should ensure sufficient capacity on the lines that the users desire to use. On the other hand, Gao et al. (2004), dell’Olio et al. (2012); Ruisánchez et al. (2012) model the effect of the bus capacity in the user behavior, by means of a congested assignment sub-model. To the best of our knowledge, no study discusses formally the conditions under which a specific treatment of the bus capacity should be applied. All solution methods are approximated; some of them are driven by the mathematical formulation while others are purely heuristics. Finally, the largest test cases used are relative to cities comprising approximately 100 lines.

Our model is mostly based on the one proposed by Constantin and Florian (1995). This model has an explicit formulation based on the optimal strategies assignment model (Spiess & Florian, 1989) whose properties have been largely discussed in the literature. These characteristics enable a detailed discussion at the levels of mathematical structure, computational tractability as well as model realism. Moreover, the frequency optimization model of Constantin and Florian (1995) neither has an exact solution method nor has an approximate one validated against exact results.

Our contribution with respect to the reference study is a linearization which allows to avoid the bilevel structure under certain conditions and enables to apply MILP techniques to solve the model to optimality. We remark that the nonlinear bilevel structure of the formulation proposed by Constantin and Florian (1995) makes the problem very difficult to solve; no standard solution method exists to solve such a formulation.

In order to present the model, first we explain the representation of the lines, the demand and the user behavior. Next, we present the proposed linearization and the model for frequency optimization. To ease the reading of the formulations, a glossary of the main symbols used is provided in Table 1
                     .

We consider a public transportation system with supply and demand components. On the supply side, we have the lines which itineraries are defined in terms of existing bus stops and street segments; their frequencies will be determined by the optimization model. On the demand side, we have the users that need to perform trips between different points of the city; also, given a set of lines, the users should decide how to perform such trips using those lines.

We represent the supply side as a directed graph 
                           
                              G
                              =
                              (
                              N
                              ,
                              A
                              )
                           
                         where the set N includes nodes which represent bus stops and endpoints of street segments for each line (
                           
                              
                                 
                                    N
                                 
                                 
                                    P
                                 
                              
                           
                         and 
                           
                              
                                 
                                    N
                                 
                                 
                                    S
                                 
                              
                           
                         respectively, such that 
                           
                              N
                              =
                              
                                 
                                    N
                                 
                                 
                                    P
                                 
                              
                              ∪
                              
                                 
                                    N
                                 
                                 
                                    S
                                 
                              
                           
                        ). The arcs between nodes of 
                           
                              
                                 
                                    N
                                 
                                 
                                    S
                                 
                              
                           
                         are called travel arcs (set 
                           
                              
                                 
                                    A
                                 
                                 
                                    T
                                 
                              
                           
                        ). They represent the movement of the buses (and the passengers on-board) along the street, which elapses in a nonnegative fixed travel time 
                           
                              
                                 
                                    c
                                 
                                 
                                    a
                                 
                              
                              ,
                              a
                              ∈
                              
                                 
                                    A
                                 
                                 
                                    T
                                 
                              
                           
                        . Arcs which go from 
                           
                              
                                 
                                    N
                                 
                                 
                                    P
                                 
                              
                           
                         to 
                           
                              
                                 
                                    N
                                 
                                 
                                    S
                                 
                              
                           
                         are called boarding arcs (set 
                           
                              
                                 
                                    A
                                 
                                 
                                    B
                                 
                              
                           
                        ); conversely, arcs from 
                           
                              
                                 
                                    N
                                 
                                 
                                    S
                                 
                              
                           
                         to 
                           
                              
                                 
                                    N
                                 
                                 
                                    P
                                 
                              
                           
                         are called alighting arcs (set 
                           
                              
                                 
                                    A
                                 
                                 
                                    L
                                 
                              
                           
                        ). These sets are such that 
                           
                              A
                              =
                              
                                 
                                    A
                                 
                                 
                                    T
                                 
                              
                              ∪
                              
                                 
                                    A
                                 
                                 
                                    B
                                 
                              
                              ∪
                              
                                 
                                    A
                                 
                                 
                                    L
                                 
                              
                           
                        . Fig. 1
                         illustrates the structure of the graph G. Based on this model, we consider a given set of lines L, where each line has either a forward and a backward itinerary or a single circular itinerary. An itinerary is a sequence of adjacent travel arcs. For any line 
                           
                              l
                              ∈
                              L
                           
                         we consider that the concatenation of its itineraries (or its single itinerary if it is circular) forms a closed cycle, therefore we can express its round-trip time as 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    a
                                    ∈
                                    l
                                 
                              
                              
                                 
                                    c
                                 
                                 
                                    a
                                 
                              
                           
                        .

For sake of simplicity we assume that the demand is generated (both produced and attracted) in the bus stops. A more detailed modeling would include centroid nodes representing zones and walking arcs connecting such centroids with bus stops. Including these elements do not change the nature of the formulations discussed in this work. We represent the demand as a set of OD pairs K such that 
                           
                              
                                 
                                    O
                                 
                                 
                                    k
                                 
                              
                              ,
                              
                              
                                 
                                    D
                                 
                                 
                                    k
                                 
                              
                              ∈
                              
                                 
                                    N
                                 
                                 
                                    P
                                 
                              
                           
                         are origin and destination respectively of OD pair 
                           
                              k
                              ∈
                              K
                           
                         and the nonnegative value 
                           
                              
                                 
                                    δ
                                 
                                 
                                    k
                                 
                              
                           
                         represents its corresponding amount of trips (persons per time unit) in a given time horizon.

For representing the user behavior, we should consider an assignment sub-model. It states the way in which the users move themselves from their origins to their destinations, using a given set of public transportation lines. It is necessary to compute the performance of the system, namely the waiting time and occupancy of buses experienced by the users. Note that decisions of the users depends on the line frequencies; since they are decision variables of our overall optimization model, the assignment sub-model is a very relevant component.

We consider the assignment model proposed in (Spiess & Florian, 1989), called optimal strategies. A strategy is defined as a set of rules that when applied, enables the user to reach his destination. In terms of the graph G and for a given OD pair k, a strategy can be seen as a subset of arcs in A which represents all the lines that the user identifies a priori, for traveling from 
                           
                              
                                 
                                    O
                                 
                                 
                                    k
                                 
                              
                           
                         to 
                           
                              
                                 
                                    D
                                 
                                 
                                    k
                                 
                              
                           
                        . The model assumes that a given user selects the strategy that minimizes his total travel time. To do this, he will select a priori (i.e., before leaving the place where the trip is originated) a set of attractive lines among all the possible lines that connect its origin and destination bus stops (even including transfers). In this process, the passenger considers information related to the on-board travel time of all the lines of the system (given by the cost of the travel arcs in G); he also knows the frequency of all lines, needed to compute the waiting time. While waiting at the bus stop, the user will take the first bus passing by that stop, belonging to the set of attractive lines determined a priori. A strategy is optimal if it minimizes the total expected travel time.

Core assumptions of an assignment model are those which define the computation of the waiting time and the selection of lines by the users. As commonly accepted in the literature (Desaulniers & Hickman, 2007), the waiting time of a passenger waiting on a stop for a set of lines 
                           
                              R
                              =
                              {
                              
                                 
                                    r
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    r
                                 
                                 
                                    m
                                 
                              
                              }
                           
                         with corresponding frequencies 
                           
                              F
                              =
                              {
                              
                                 
                                    f
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    f
                                 
                                 
                                    m
                                 
                              
                              }
                           
                         can be modeled with a random variable of mean value 
                           
                              E
                              (
                              tw
                              )
                              =
                              β
                              /
                              
                                 
                                    ∑
                                 
                                 
                                    
                                       
                                          r
                                       
                                       
                                          i
                                       
                                    
                                    ∈
                                    R
                                 
                              
                              
                              
                                 
                                    f
                                 
                                 
                                    i
                                 
                              
                           
                        , where 
                           
                              β
                           
                         is a parameter which depends on assumptions concerning service regularity. Moreover, assuming that the passengers take the first bus arriving at the stop (among the buses that perform routes of the set R), the probability of using the route 
                           
                              
                                 
                                    r
                                 
                                 
                                    i
                                 
                              
                           
                         is 
                           
                              
                                 
                                    P
                                 
                                 
                                    i
                                 
                              
                              =
                              
                                 
                                    f
                                 
                                 
                                    i
                                 
                              
                              /
                              
                                 
                                    ∑
                                 
                                 
                                    
                                       
                                          r
                                       
                                       
                                          j
                                       
                                    
                                    ∈
                                    R
                                 
                              
                              
                              
                                 
                                    f
                                 
                                 
                                    j
                                 
                              
                           
                        , which is known as the frequency share rule.

Upon introducing variables 
                           
                              
                                 
                                    V
                                 
                                 
                                    n
                                 
                              
                           
                         (flow on node n) and 
                           
                              
                                 
                                    x
                                 
                                 
                                    a
                                 
                              
                           
                         (a binary variable that indicates whether arc a belongs to the optimal strategy), the assignment problem can be formulated as a travel time minimization one where the objective function includes the waiting time expression 
                           
                              1
                              /
                              
                                 
                                    ∑
                                 
                                 
                                    a
                                    ∈
                                    
                                       
                                          A
                                       
                                       
                                          n
                                       
                                       
                                          +
                                       
                                    
                                 
                              
                              
                                 
                                    f
                                 
                                 
                                    a
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    a
                                 
                              
                           
                         and the frequency share rule takes the form 
                           
                              
                                 
                                    v
                                 
                                 
                                    a
                                 
                              
                              =
                              
                                 
                                    V
                                 
                                 
                                    n
                                 
                              
                              
                                 
                                    f
                                 
                                 
                                    a
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    a
                                 
                              
                              /
                              
                                 
                                    ∑
                                 
                                 
                                    
                                       
                                          a
                                       
                                       
                                          ′
                                       
                                    
                                    ∈
                                    
                                       
                                          A
                                       
                                       
                                          n
                                       
                                       
                                          +
                                       
                                    
                                 
                              
                              
                                 
                                    f
                                 
                                 
                                    
                                       
                                          a
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    
                                       
                                          a
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                        , where 
                           
                              
                                 
                                    v
                                 
                                 
                                    a
                                 
                              
                           
                         is the amount of demand flowing through arc 
                           
                              a
                              ∈
                              A
                              ,
                              
                                 
                                    A
                                 
                                 
                                    n
                                 
                                 
                                    +
                                 
                              
                           
                         are the outgoing arcs from node n and 
                           
                              
                                 
                                    f
                                 
                                 
                                    a
                                 
                              
                           
                         is the frequency (buses per time unit) of the line corresponding to the boarding arc a. That optimization problem includes nonlinear expressions and binary variables; we refer to its original publication (Spiess & Florian, 1989) for the complete details. In the context of this study, it is relevant to take into account that by means of a change of variables and considerations about the feasible space of the resulting model, the authors of the original study simplify the model. Thus, by introducing variable 
                           
                              
                                 
                                    w
                                 
                                 
                                    n
                                 
                              
                              =
                              
                                 
                                    V
                                 
                                 
                                    n
                                 
                              
                              /
                              
                                 
                                    ∑
                                 
                                 
                                    a
                                    ∈
                                    
                                       
                                          A
                                       
                                       
                                          n
                                       
                                       
                                          +
                                       
                                    
                                 
                              
                              
                                 
                                    f
                                 
                                 
                                    a
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    a
                                 
                              
                           
                         and eliminating variable 
                           
                              
                                 
                                    x
                                 
                                 
                                    a
                                 
                              
                           
                        , the assignment model can be reformulated as follows, for a single OD pair (implicit in the notation):
                           
                              (1)
                              
                                 
                                    
                                       
                                          min
                                       
                                       
                                          v
                                          ,
                                          w
                                       
                                    
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          A
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       a
                                    
                                 
                                 
                                    
                                       v
                                    
                                    
                                       a
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          n
                                          ∈
                                          
                                             
                                                N
                                             
                                             
                                                P
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       w
                                    
                                    
                                       n
                                    
                                 
                                 ,
                              
                           
                        
                        
                           
                              (2)
                              
                                 s
                                 .
                                 t
                                 .
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          
                                             
                                                A
                                             
                                             
                                                n
                                             
                                             
                                                +
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       v
                                    
                                    
                                       a
                                    
                                 
                                 -
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          
                                             
                                                A
                                             
                                             
                                                n
                                             
                                             
                                                -
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       v
                                    
                                    
                                       a
                                    
                                 
                                 =
                                 
                                    
                                       b
                                    
                                    
                                       n
                                    
                                 
                                 
                                 ∀
                                 n
                                 ∈
                                 N
                                 ,
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       v
                                    
                                    
                                       a
                                    
                                 
                                 ⩽
                                 
                                    
                                       f
                                    
                                    
                                       a
                                    
                                 
                                 
                                    
                                       w
                                    
                                    
                                       n
                                    
                                 
                                 
                                 ∀
                                 n
                                 ∈
                                 
                                    
                                       N
                                    
                                    
                                       P
                                    
                                 
                                 ,
                                 
                                 a
                                 ∈
                                 
                                    
                                       A
                                    
                                    
                                       n
                                    
                                    
                                       +
                                    
                                 
                                 ,
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    
                                       v
                                    
                                    
                                       a
                                    
                                 
                                 ⩾
                                 0
                                 
                                 ∀
                                 a
                                 ∈
                                 A
                                 ,
                              
                           
                        where 
                           
                              
                                 
                                    w
                                 
                                 
                                    n
                                 
                              
                           
                         is the waiting time multiplied by the amount of demand at node 
                           
                              n
                              ∈
                              
                                 
                                    N
                                 
                                 
                                    P
                                 
                              
                              ,
                              
                              
                                 
                                    A
                                 
                                 
                                    n
                                 
                                 
                                    -
                                 
                              
                           
                         are incoming arcs to node n and 
                           
                              
                                 
                                    b
                                 
                                 
                                    n
                                 
                              
                           
                         is a value equal to 
                           
                              
                                 
                                    δ
                                 
                                 
                                    k
                                 
                              
                           
                         if 
                           
                              n
                              =
                              
                                 
                                    O
                                 
                                 
                                    k
                                 
                              
                              ,
                              
                              -
                              
                                 
                                    δ
                                 
                                 
                                    k
                                 
                              
                           
                         if 
                           
                              n
                              =
                              
                                 
                                    D
                                 
                                 
                                    k
                                 
                              
                           
                         and 0 otherwise.

Formulation (1)–(4) states that users behave in order to minimize the sum of on-board travel time and waiting time. Constraint (2) states flow conservation, meaning that the whole demand should be able to reach destination. In constraint (3), 
                           
                              
                                 
                                    v
                                 
                                 
                                    a
                                 
                              
                           
                         is zero if arc a is not part of the optimal strategy, while for arcs included in the optimal solution, the constraint verifies with equality, restoring the frequency share rule expression.

This formulation is linear and closely resembles a shortest path problem. The difference is that objective function (1) includes a term which represents waiting at nodes and constraint (3) represents the splitting of demand among the attractive lines that pass by a given stop and lead to destination. Because of that constraint, the solution of the assignment problem is not a single path on the graph, instead it is a hyperpath (Nguyen & Pallottino, 1988) which represents different trajectories from origin to destination.

Our model for frequency optimization is based on the one proposed by Constantin and Florian (1995), which has a nonlinear bilevel formulation. The key difference of our proposal is the introduction of an auxiliary structure of the underlying graph, which allows to obtain a linear formulation that under certain conditions has a single-level structure.

We define a discretization of the domain of frequencies by means of a given set 
                           
                              Θ
                              =
                              {
                              
                                 
                                    θ
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              
                                 
                                    θ
                                 
                                 
                                    m
                                 
                              
                              }
                           
                        , where each element 
                           
                              
                                 
                                    θ
                                 
                                 
                                    i
                                 
                              
                           
                         is a nonnegative value representing a possible value for the frequency of any line. A feasible setting of frequencies should set a value from 
                           
                              Θ
                           
                         to each line 
                           
                              l
                              ∈
                              L
                           
                        . Moreover, we define a new structure for G where each line passing by a given stop has one boarding arc for each value of 
                           
                              Θ
                           
                        . Fig. 2
                         illustrates such structure for the example of Fig. 1 and for an instance of 
                           
                              Θ
                           
                         having 3 frequencies. Note that by discretizing the domain of frequencies, we introduce a loss of precision. On the other hand, in real systems it is convenient to consider a reduced set of frequency values, due to service coordination and fleet management issues. We resume this discussion in Section 5.3.2.

Then we introduce a binary variable 
                           
                              
                                 
                                    y
                                 
                                 
                                    lf
                                 
                              
                           
                         which takes value 1 if frequency 
                           
                              
                                 
                                    θ
                                 
                                 
                                    f
                                 
                              
                           
                         is set to line l. Based on these definitions and the assignment sub-model stated by (1)–(4) we formulate the frequency optimization model as (5)–(12) where B is an upper limit on the fleet size, 
                           
                              f
                              (
                              a
                              )
                           
                         denotes the index in 
                           
                              Θ
                           
                         of the frequency which represents arc a and 
                           
                              l
                              (
                              a
                              )
                           
                         denotes the line corresponding to that arc. Note that we have added index k to indicate the corresponding OD pair.

Formulation (5)–(12) expresses simultaneously decisions of the planner regarding the setting of frequencies (variable y), as well as the corresponding decisions of the passengers regarding flow assignment (variables v and w). Note that although the objective function does not include variable y, constraints (6) and (7) bound its possible values; among them, the model will select those which minimize v and w according to constraints which involve such variables. Arc flow values v are minimized in the objective function, subject to flow conservation (8) and arc (i.e. frequency) availability (10). Waiting time w is also minimized in the objective function, while constraint (9) acts as lower bound to its value.
                           
                              (5)
                              
                                 
                                    
                                       
                                          min
                                       
                                       
                                          y
                                          ,
                                          v
                                          ,
                                          w
                                       
                                    
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          ∈
                                          K
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   a
                                                   ∈
                                                   A
                                                
                                             
                                          
                                          
                                             
                                                c
                                             
                                             
                                                a
                                             
                                          
                                          
                                             
                                                v
                                             
                                             
                                                ak
                                             
                                          
                                          +
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   n
                                                   ∈
                                                   
                                                      
                                                         N
                                                      
                                                      
                                                         P
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                w
                                             
                                             
                                                nk
                                             
                                          
                                       
                                    
                                 
                                 ,
                              
                           
                        
                        
                           
                              (6)
                              
                                 s
                                 .
                                 t
                                 .
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          l
                                          ∈
                                          L
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          f
                                          ∈
                                          1
                                          …
                                          m
                                       
                                    
                                 
                                 
                                    
                                       θ
                                    
                                    
                                       f
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       lf
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          l
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       a
                                    
                                 
                                 ⩽
                                 B
                                 ,
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          f
                                          ∈
                                          1
                                          …
                                          m
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       lf
                                    
                                 
                                 =
                                 1
                                 
                                 ∀
                                 l
                                 ∈
                                 L
                                 ,
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          
                                             
                                                A
                                             
                                             
                                                n
                                             
                                             
                                                +
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       v
                                    
                                    
                                       ak
                                    
                                 
                                 -
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          a
                                          ∈
                                          
                                             
                                                A
                                             
                                             
                                                n
                                             
                                             
                                                -
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       v
                                    
                                    
                                       ak
                                    
                                 
                                 =
                                 
                                    
                                       b
                                    
                                    
                                       nk
                                    
                                 
                                 
                                 ∀
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 k
                                 ∈
                                 K
                                 ,
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       v
                                    
                                    
                                       ak
                                    
                                 
                                 ⩽
                                 
                                    
                                       θ
                                    
                                    
                                       f
                                       (
                                       a
                                       )
                                    
                                 
                                 
                                    
                                       w
                                    
                                    
                                       nk
                                    
                                 
                                 
                                 ∀
                                 n
                                 ∈
                                 
                                    
                                       N
                                    
                                    
                                       P
                                    
                                 
                                 ,
                                 
                                 a
                                 ∈
                                 
                                    
                                       A
                                    
                                    
                                       n
                                    
                                    
                                       +
                                    
                                 
                                 ,
                                 
                                 k
                                 ∈
                                 K
                                 ,
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    
                                       v
                                    
                                    
                                       ak
                                    
                                 
                                 ⩽
                                 
                                    
                                       δ
                                    
                                    
                                       k
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       l
                                       (
                                       a
                                       )
                                       f
                                       (
                                       a
                                       )
                                    
                                 
                                 
                                 ∀
                                 a
                                 ∈
                                 
                                    
                                       A
                                    
                                    
                                       B
                                    
                                 
                                 ,
                                 
                                 k
                                 ∈
                                 K
                                 ,
                              
                           
                        
                        
                           
                              (11)
                              
                                 
                                    
                                       v
                                    
                                    
                                       ak
                                    
                                 
                                 ⩾
                                 0
                                 
                                 ∀
                                 a
                                 ∈
                                 A
                                 ,
                                 
                                 k
                                 ∈
                                 K
                                 ,
                              
                           
                        
                        
                           
                              (12)
                              
                                 
                                    
                                       y
                                    
                                    
                                       lf
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 ∀
                                 l
                                 ∈
                                 L
                                 ,
                                 
                                 f
                                 ∈
                                 1
                                 …
                                 m
                                 .
                              
                           
                        
                     

Observe that for a given setting of frequencies to lines (fixed value of y) which respects constraints (6) and (7), the resulting linear problem represents 
                           
                              |
                              K
                              |
                           
                         independent assignment problems as stated by (1)–(4). Constraint (9) involves a fixed frequency while constraint (10) is redundant for 
                           
                              
                                 
                                    y
                                 
                                 
                                    l
                                    (
                                    a
                                    )
                                    f
                                    (
                                    a
                                    )
                                 
                              
                              =
                              1
                           
                        ; therefore, in absence of other constraints involving variables v and w, the proposed mixed integer single-level formulation is equivalent (restricted to a discretization) to the nonlinear bilevel formulation proposed in (Constantin & Florian, 1995).

The transformations proposed in this work, change the original source of complexity of the problem to a different one. While the original formulation is nonlinear bilevel (for which no standard solution method exists) the proposed one is mixed integer linear (for which exact solution methods are available). The main source of complexity of the proposed formulation is the existence of binary variables; moreover, the discretization of the domain of frequencies enlarges the set of boarding arcs (and the corresponding number of variables v) to a factor equals to the size of the set 
                           
                              Θ
                           
                         of possible frequencies.

Although the proposed MILP formulation enables to compute optimal solutions to the frequency optimization problem, large-sized instances are expected to be hard to solve. Note that by introducing the discretization of the domain of frequencies, we turn the problem into a combinatorial one which search space has (in the worst case) an exponential size 
                        
                           |
                           Θ
                           
                              
                                 |
                              
                              
                                 |
                                 L
                                 |
                              
                           
                        
                     .

In order to cope with this complexity, we propose a metaheuristic approach based on Tabu Search (Glover, 1989). The method is based on a local search in the space of frequencies (decisions of the planner), while the variables representing decisions of the users are computed by calling the assignment sub-model (1)–(4). In order to avoid getting trapped in local optima, we apply tabu concepts to the base local search mechanism. The search strategy is based in operators which incorporate knowledge about the real problem. Then, a descent method is naturally defined by the successively application of those operators. Special mechanisms of Tabu Search are applied to avoid many invocations to the assignment sub-model (which may be computationally costly). Note that a population based metaheuristic (like Genetic Algorithms) should require a similar mechanism, since the process of each generation entails the evaluation of many individuals.

In the following, we present the main concepts involved in the proposed methaeuristic.

The local procedure is a search that uses an operation called move to define the neighborhood of any given solution (Glover & Laguna, 1998). Our solution is represented by an array of indexes to the set of frequencies 
                           
                              Θ
                           
                        . Each place in the array represents a line of the public transportation system, and its value represents the frequency of that line. We assume that the set of possible frequencies is ordered from lowest (
                           
                              
                                 
                                    θ
                                 
                                 
                                    1
                                 
                              
                           
                        ) to highest (
                           
                              
                                 
                                    θ
                                 
                                 
                                    m
                                 
                              
                           
                        ) value. In this way, a line increases (decreases) its frequency when it changes to the next highest (lowest) value in 
                           
                              Θ
                           
                        . Let us observe that a decrease of a line frequency in a solution, always makes it less attractive (from the user point of view) or in the best case equal. On the contrary, an increase of a line frequency in a solution makes it more attractive or at least equal. The move operation that defines the neighborhood structure is then a compound change on a couple of line frequencies of the solution, one increase and one decrease change. With this basic operation, each solution has 
                           
                              |
                              L
                              |
                              ×
                              (
                              |
                              L
                              |
                              -
                              1
                              )
                           
                         neighbor solutions when the frequency of every line can decrease or increase.

Tabu Search is a metaheuristic that guides a local procedure to explore the solution space beyond local optimality (Glover & Laguna, 1998). In order to do that, the search may accept moves which worsen the current solution and may avoid moves which were performed recently. One of the main components of Tabu Search is its use of memory. Our work focuses on the short term memory strategies.

We use the most common type of short term memory, namely, recency based memory (Glover & Laguna, 1998). A tabu list called TabuStart records the last iteration when each line changed its frequency. Let suppose that TestDec and TestInc correspond to the lines that will increase and decrease their frequencies respectively. We will say that the move 
                              
                                 (
                                 TestDec
                                 ,
                                 TestInc
                                 )
                              
                            is tabu active if 
                              
                                 Iter
                                 ⩽
                                 TabuStart
                                 (
                                 TestDec
                                 )
                                 +
                                 Tenure
                              
                            or 
                              
                                 Iter
                                 ⩽
                                 TabuStart
                                 (
                                 TestInc
                                 )
                                 +
                                 Tenure
                              
                           . In this expression, Iter indicates the current iteration number while Tenure indicates the number of iterations where a move remains tabu active. In general terms, the search mechanism usually avoids moves which are tabu active. However, when the number of non-tabu active moves is small, additional mechanisms are adopted, among them aspiration criteria.

Aspiration criteria are introduced to determine when tabu activation rules can be overridden (Glover & Laguna, 1998). In our context, given that the computation of the objective value of a solution is costly (since it entails an invocation to the passenger assignment sub-model), only neighbor solutions without tabu active status on any of their line frequencies are evaluated. When the possible number of neighbor solutions obtained exclusively by means of non-tabu active moves (estimated as the product of the number of lines that can increase and those that can decrease their frequencies) is beyond a minimum threshold 
                              
                                 
                                    
                                       N
                                    
                                    
                                       min
                                    
                                 
                              
                            (a parameter of the algorithm), the aspiration criterion implemented removes the tabu active status of the line frequencies with lowest 
                              
                                 TabuStart
                                 (
                                 TestX
                                 )
                                 +
                                 Tenure
                              
                            (where X corresponds to Dec or Inc) until reaching the minimum number of neighbors stated by 
                              
                                 
                                    
                                       N
                                    
                                    
                                       min
                                    
                                 
                              
                           . This is known as aspiration by default.

As a systematical way to explore the neighbor solutions, we implement the aspiration plus strategy (Glover & Laguna, 1998). It explores a number plus of solutions after finding a solution which objective value improves an aspiration value. To keep bounded the number of neighbor solutions to visit, the strategy uses two values that indicate the minimum and maximum number of solutions to explore (parameters Min and Max respectively). More specifically, if the aspiration value is reached or surpassed during the exploration of the 
                              
                                 i
                                 th
                              
                            neighbor, then the search explores:
                              
                                 1.
                                 
                                    
                                       
                                          i
                                          +
                                          plus
                                       
                                     neighbors if 
                                       
                                          Min
                                          ⩽
                                          i
                                          +
                                          plus
                                          ⩽
                                          Max
                                       
                                    ,


                                    Min neighbors if 
                                       
                                          i
                                          +
                                          plus
                                          <
                                          Min
                                       
                                    , or


                                    Max neighbors if 
                                       
                                          Max
                                          <
                                          i
                                          +
                                          plus
                                       
                                    .

The candidate neighbors resulting from the application of the strategy explained above, are evaluated in random order.

In order to evaluate each neighbor solution, we implemented the label-setting algorithm proposed in (Spiess & Florian, 1989) which solves the assignment model formulated by (1)–(4). In general terms, the algorithm is very similar to the shortest path label-setting algorithm (Ahuja, Magnanti, & Orlin, 1993); the main difference is that besides the consideration of arc costs, it takes into account the frequencies in common lines, which split the flow and therefore generates the hyperpath structure in the solution.

Concerning the constraints of the optimization model, instead of discarding solutions which violate the fleet size upper limit constraint (6), we allow infeasible solutions and guide the search by penalizing the extra buses. An estimation of the influence of buses with respect to the total time of the users (calculated as the objective value divided by the number of buses of the solution) is used to penalize the amount of buses which surpasses the available fleet size.

In this section we report on numerical results obtained from the application of the exact model explained in Section 3 and the approximated solution method presented in Section 4. We use three test cases:
                        
                           1.
                           The case of Mandl (1980), which represents a small city. Its graph comprises 15 nodes and 21 undirected edges. Since no route network is associated with this case, we generated a network according to the purpose of our specific study. The OD matrix comprises 172 OD pairs, which is a very high value with respect to the number of nodes.

The case of the city of Rivera, Uruguay (Mauttone & Urquhart, 2009). Its graph comprises 84 nodes and 143 undirected edges, while its OD matrix has 378 OD pairs which represent the demand in a time horizon of 12hours. We consider a set of lines representing the public transportation system of the city which operated when the case was built (year 2003); there are 11 lines with forward and backward itineraries and 2 circular lines.

A case corresponding to Montevideo, capital city of Uruguay. Its underlying graph has 4945 nodes and 14,672 edges, representing a transit system having 133 bus routes. Origin–destination data was randomly generated (both OD location and amount of trips), trying to maintain realistic characteristics; thus, the case includes 7425 OD pairs evenly distributed along the city.

In the first two cases, the elements of the graph are given in a high level of aggregation; therefore, we consider that each node is a potential endpoint of section of itinerary as well as a bus stop (see Fig. 3
                     (a)). For the case of Mandl, we configured a set of possible values of frequencies as 
                        
                           Θ
                           =
                           {
                           1
                           /
                           60
                           ,
                           1
                           /
                           50
                           ,
                           1
                           /
                           40
                           ,
                           1
                           /
                           30
                           ,
                           1
                           /
                           20
                           ,
                           1
                           /
                           10
                           ,
                           1
                           /
                           5
                           ,
                           1
                           /
                           2
                           }
                        
                      and we generated a set of 7 lines with symmetrical forward and backward itineraries using the Pair Insertion Algorithm (Mauttone & Urquhart, 2009). The upper bound for the fleet size was set to 80, taken from (Baaj & Mahmassani, 1991). For Rivera, we used the frequencies used by the lines of its current system, namely 
                        
                           Θ
                           =
                           {
                           1
                           /
                           60
                           ,
                           1
                           /
                           40
                           ,
                           1
                           /
                           30
                           ,
                           1
                           /
                           20
                           }
                        
                      as well as its resulting value for the fleet size, namely 27.

For the case of Montevideo, we have a very detailed representation of the transit system (built from the published open data
                        1
                        http://www.montevideo.gub.uy/institucional/datos-abiertos/introduccion.
                     
                     
                        1
                     ), including specific stop, centroid nodes and walk arcs (see Fig. 3(b)). The possible frequencies are 
                        
                           Θ
                           =
                           {
                           1
                           /
                           60
                           ,
                           1
                           /
                           40
                           ,
                           1
                           /
                           20
                           ,
                           1
                           /
                           12
                           ,
                           1
                           /
                           6
                           ,
                           1
                           /
                           4
                           ,
                           1
                           /
                           3
                           }
                        
                      and the fleet size is 1500, as indicated by the web page of the municipality. We note that this case was not validated directly with the municipality, unlike of Rivera; a validated representation of the transit system of Montevideo was out of the scope of this work. However, our main purpose is to have a case whose size is comparable with the state of the art in transit frequency optimization, having real characteristics as much as possible.

Both cases of Rivera and Montevideo present overlapping routes, specially in the city downtown. This is particularly relevant to the model adopted in this work, where the frequency share rule plays an important role, concerning both realism and complexity.

The MILP model was implemented in AMPL and solved by using CPLEX 12.2 in a Core-i7 computer with 16GB of RAM; only the Mandl and Rivera cases were run, since the computational requirements for running the CPLEX model with the Montevideo case exceeded our available resources. The metaheuristic was implemented in C++ and run in a Core-i5 machine with 8GB of RAM. Given the different experimental platforms used, the execution times are not directly comparable. However, a direct comparison of different methods is not the concern of this study. Execution times are reported mainly to show the feasibility (or not) of application of each proposed methodologies.


                        Table 2
                         shows the objective values (overall users’ travel time) of the exact and approximated methods (
                           
                              
                                 
                                    O
                                 
                                 
                                    e
                                 
                              
                           
                         and 
                           
                              
                                 
                                    O
                                 
                                 
                                    a
                                 
                              
                           
                         respectively), as well as the percentage of improvement (
                           
                              
                                 
                                    I
                                 
                                 
                                    e
                                 
                              
                           
                         and 
                           
                              
                                 
                                    I
                                 
                                 
                                    a
                                 
                              
                           
                         respectively) with respect to the objective value of the current system (only for Rivera). It also shows the execution time (in seconds) as 
                           
                              
                                 
                                    T
                                 
                                 
                                    e
                                 
                              
                           
                         and 
                           
                              
                                 
                                    T
                                 
                                 
                                    a
                                 
                              
                           
                         respectively, and the relative MIP gap of the exact method as 
                           
                              
                                 
                                    G
                                 
                                 
                                    e
                                 
                              
                           
                         (a value computed and reported by CPLEX, representing the relative distance between the best integer solution found and a lower bound). The exact model was stopped either after finding the global optimum or when an imposed time limit was reached. The metaheuristic was stopped either after a maximum number of total iterations or a maximum number of no improvement iterations.

From Table 2 we can observe that objective values obtained by the exact model and the approximated algorithm are very similar for both test cases. In order to obtain results for Rivera with the exact model, we imposed a time limit of 48hours (
                           
                              †
                           
                        ), after which we obtained a feasible solution with a 18% relative MIP gap. We note that the resulting MILP model comprises 1,097,080 variables and 2,321,750 constraints, therefore it is expected to be hard to solve to optimality within a relatively short time. Moreover, we observed a very slow progress of the solution improvement in the linear solver, after reaching the best solution found relatively early in the execution; this might be caused by degeneracy or numerical issues introduced by the nature of the data. Anyway, we note that the optimal solution for Mandl has a gap of 19% with respect to the optimal solution of its linear relaxation (a trivial lower bound); therefore, we could infer that the solution obtained for Rivera (which has a relative MIP gap of 18%) is not very far from the optimum.

This experiment shows that (a) the proposed MILP implementation is able to compute the global optimum for a small-sized case and (b) it is capable of improving the quality of an existing system of a real small-sized city. As a reference, we note that the improvement of the solution method proposed in (Constantin & Florian, 1995) with respect to the existing system, ranges from 1.2% to 5.0% over different test cases. Finally, we note that the proposed metaheuristic also produces good solutions in a very short time.

In this section, we look at the solutions found by both exact and approximated methods for the case of Rivera. Table 3
                         shows the ordinal in 
                           
                              Θ
                           
                         of the frequencies of each line, for the existing system, the exact and the approximated solutions. We can observe that while the exact method changed the frequencies of 6 out of the 13 lines, the approximated one changed 9. While the former increased the frequency of 3 lines and decreased the other 3, the latter increased 4 frequencies and decreased 5. If we look only at the frequencies suggested by our proposed methodologies, we can observe that 5 out of the 13 lines exhibit different results, although in all cases, the difference is not greater than one (the frequencies are contiguous in 
                           
                              Θ
                           
                         and therefore they are similar).

It is worth noting that the frequencies suggested by our models and algorithms do not consider a constraint on the maximum waiting time. For this reason, since the suggested solutions represent a redistribution of the available resources (fleet of buses) among the users of the system, some specific OD pairs may result disadvantaged, as it is the case of those who are captive to the last two lines.

In order to have more quantitative elements regarding the behavior and possibilities of application of the proposed formulation and solution method, we performed the three following experiments: assuming that users do not perform transfers, sensitivity to the set 
                           
                              Θ
                           
                         of possible frequencies and sensitivity to the initial solution.

In the city of Rivera, the users of the public transportation system rarely perform transfers between different lines. This is due to the fact that they have to pay for each line that they use. Moreover, both line itineraries and demand pattern have a radial structure, where the city downtown concentrates the starting points of almost all lines. Therefore, the demand is somehow well served directly, i.e. without need of transfers. According to this observation, we implemented a modified coding of the graph G, which excludes the possibility of transfers. This alternative coding turns the model easier to solve, in comparison with the model explained in Section 3.1.


                           Table 4
                            shows the same information as Table 2, for the model explained above applied to the case of Rivera. We can observe that in this experiment, the model could be solved to optimality in much less time. Moreover, the metaheuristic found a solution exhibiting an objective value very close to the global optimum. We should note that the alternative coding for the graph G used to obtain the results of this experiment, is not efficient for applying the exact MILP formulation when including the possibility of transfers.

These results show that under certain hypothesis (which are valid in the context stated in this section), the model can be solved to optimality, when applied to a real small-sized case.

Since the MILP formulation is based on a discretization of the domain of frequencies, the results are expected to be sensitive to the instance of the set 
                              
                                 Θ
                              
                            given as input to the model. Also, the size of 
                              
                                 Θ
                              
                            greatly impacts in the size of the graph model and therefore in the size of the resulting MILP model, which impacts the execution time.

In this experiment, we compare results obtained from different sets of possible frequencies for the case of Rivera, using the model without transfers explained in Section 5.3.1 (in order to be able to take as reference the global optimal value of Table 4). Table 5
                            shows objective values O and corresponding execution times T for both exact and approximated approaches. The first line correspond to the results already reported in Section 5.3.1, using the frequencies of the existing system. The second line adds two higher frequencies (1/10 and 1/5) to the previous set. We can observe that the objective values are the same. We observed that none of the new frequencies added to 
                              
                                 Θ
                              
                            are used in the optimal solution. Since those frequencies are relatively high, assigning one of them to any line would imply decreasing the frequencies in several other lines. This result also suggests that the maximum frequency used in the lines of Rivera (1/20minutes) is a reasonable value given the available fleet of buses. In the third line, we configure the set 
                              
                                 Θ
                              
                            with a relatively high number of frequencies, covering the range 
                              
                                 [
                                 1
                                 /
                                 60
                                 ,
                                 1
                                 /
                                 5
                                 ]
                              
                            with values spaced every 5minutes. In this case the model grew considerably and the objective value obtained after 48hours of execution (with a 2.3% relative MIP gap) is a bit smaller (less than 1%) than the value of the first and second lines of the table.

This experiment shows that when changing the set of possible frequencies 
                              
                                 Θ
                              
                            (to a set of similar values), while objective values do not change considerably, execution times of the exact model increase proportionally to the size of 
                              
                                 Θ
                              
                           . The execution time of the approximated method is not sensitive to the variations of 
                              
                                 Θ
                              
                            in this experiment. Concerning the practical application of the model, we may assume that the size of 
                              
                                 Θ
                              
                            cannot grow to an arbitrary high value, therefore we can expect that execution times are kept bounded.

Our current version of the metaheuristic uses a simple way for setting the initial solution: it sets the same value of frequency to all lines. However, the specific frequency is a parameter of the algorithm and some preliminary experiments have shown that the results are sensitive to this frequency. Taking into account this observation, we run the algorithm for the case of Mandl, starting with all lines having the 4th frequency of the set 
                              
                                 Θ
                              
                            (which has 8 values) and then having the 6th frequency. In the first experiment, the rationale was to set the value of the middle of 
                              
                                 Θ
                              
                            to all lines, in order not to bias the search. The objective value obtained was 187.40, while for the second experiment the value was 140.99. By observing the optimal solution, we note that none of the first 4 frequencies of 
                              
                                 Θ
                              
                            are used. Therefore, the second experiment in fact started by setting the frequency located at the middle of the range of frequencies which are part of the optimal solution. This suggests that (a) different starting solutions lead to relatively different results and (b) information from the optimal solution could be used in order to set the initial frequency. Thus, we may use for example, the information from the optimal solution of the linear relaxation of the exact model (which is easy to solve), for setting the initial frequencies of the lines. This suggests a possible hybridization between both exact and approximated approaches.

In this section, we report and analyze the results of the metaheuristic approach applied to the case of Montevideo. We do not have information about the frequencies of the optimal solution and the current system. Therefore, the main objective of this experiment is to observe (a) the ability of the algorithm to improve an initial (realistic) solution and (b) the execution time needed to reach such improvement. We set the initial solution as the one having the same frequency in all lines and the corresponding value of fleet size being the closest possible to its respective upper bound (1500 buses). In this way, we set to all lines the frequency number 4 from the set 
                           
                              Θ
                           
                         of Montevideo, namely, 1/12; the corresponding fleet size is 1524, which derives in a (slightly) unfeasible solution.

We perform a single run of the algorithm, setting a fixed number of iterations as 500, observing a running time of approximately 90minutes every 10 iterations. The percentage of improvement with respect to the initial solution was 1.7%, observing that many lines of the improved solution have changed their frequencies. Therefore we can conclude that the metaheuristic is able to improve the initial solution, while the improvement is higher according to the increase in the number of local search iterations. Fig. 4
                         shows the progress of the algorithm according to the iteration number. In Fig. 4(a) we can observe that both objective values of the model (given by objective function (5)) and the metaheuristic (given by the penalized objective function as explained in Section 4.3) have several cycles ending with a local improvement. Accordingly, in Fig. 4(b), we can observe that the fleet size oscillates around the maximum value imposed by constraint (6), which is a consequence of the mechanism designed to allow the algorithm searching beyond the feasible space (see Section 4.3).

Finally, we note that the percentage of improvement obtained for Montevideo is lower than the one obtained for Rivera. Anyway, the improvement is still in the range obtained by the study used as reference on this one: 1.2% to 5.0% in (Constantin & Florian, 1995). Concerning execution times, the algorithm has an acceptable performance taking into account the size and degree of detail of the case as well as the purpose of the methodology (strategic and tactical planning).

We have proposed a new formulation and a new solution method to the frequency optimization problem. Based on the model proposed in (Constantin & Florian, 1995), we derived a mixed integer linear programming (MILP) formulation which is equivalent to the bilevel nonlinear one proposed in the original study. The nature of our formulation enables to solve the problem exactly using MILP techniques.

By means of the proposed model, we are able to compute optimal or near optimal solutions (with estimation of its accuracy) for a case relative to a real small-sized city. Although its public transportation system has 13 lines, we obtained improvements of around 3% by applying the model. This shows that even in small cases, there is room for improving the efficiency of the system. Although manual solutions benefit from the experience of the planner, they are not necessarily optimal; therefore, the optimization model may suggest changes that are not obvious or intuitive. Moreover, we note that our percentages of improvement are similar to the ones reported in the literature (Constantin & Florian, 1995).

Since the global optimum of the city of Rivera was not possible to find after a considerable amount of execution time, we devised the need of an alternative solution method. Thus, we proposed a Tabu Search metaheuristic, which results are competitive when compared against the exact model. The approximated method also was tested with a larger and detailed case, showing its ability to improve an initial solution in a reasonable amount of time.

As future work, an interesting research could be the integration of the models studied in this work (which are mainly conceived for the strategic and tactical planning) with operational models. By adopting a more detailed representation of the transit system, operational models may contribute to a more accurate evaluation of the benefits obtained by our methodologies. Note that the percentages of improvement obtained (less than 5%) might be absorbed by the simplifications made in the frequency optimization models. Thus, the inclusion of timetables and schedule-based assignment models (Nuzzolo, 2003) could help to reduce that modeling gap.

Concerning the solution methods, the exact formulation could be improved by incorporating cuts and valid inequalities. On the other hand, the Tabu Search metaheuristic admits some improvements, in particular in the generation of the initial solution (probably through the incorporation of a long term memory). Also, hybrid methods (with other metaheuristics or exact methods) could be considered.

Finally, the assignment sub-model embedded in our formulation for transit frequency optimization, assumes that there is sufficient capacity to carry all the passengers that desire to use any line. But in systems that exhibit high affluence of passengers, this is not always true. System capacity is directly related to frequencies, therefore this is a relevant issue. In the literature, the capacity issue in the context of frequency optimization has been tackled by different approaches, including models where the planner ensures sufficient capacity (Constantin, 1992; Leiva, Muñoz, Giesen, & Larrain, 2010) and models which assume passenger behavior in a congested scenario (Gao et al., 2004). Underlying assumptions of these models have different impacts on the overall system performance. Further discussion would be needed in order to compare these approaches.

@&#ACKNOWLEDGEMENTS@&#

The authors would like to thank to Comisión Sectorial de Investigación Científica of Universidad de la República (CSIC-UDELAR) and to Programa de Desarrollo de las Ciencias Básicas (PEDECIBA) for the financial support. We also thank two anonymous referees, whose comments have improved the paper significantly.

@&#REFERENCES@&#

