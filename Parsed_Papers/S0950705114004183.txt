@&#MAIN-TITLE@&#Hybrid multiple objective artificial bee colony with differential evolution for the time–cost–quality tradeoff problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           This study presents a novel hybrid multiple optimization algorithm MOABCDE.


                        
                        
                           
                           Hybrid operation is utilized to balance exploration and exploitation capability.


                        
                        
                           
                           MOABCDE is applied to solve time cost quality tradeoff problem.


                        
                        
                           
                           The model performance is demonstrated in the experimental result.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Multi-objective analysis

Artificial bee colony

Differential evolution

Time–cost–quality tradeoff

Construction management

@&#ABSTRACT@&#


               
               
                  Time, cost, and quality are three important but often conflicting factors that must be optimally balanced during the planning and management of construction projects. Tradeoff optimization among these three factors within the project scope is necessary to maximize overall project success. In this paper, the MOABCDE-TCQT, a new hybrid multiple objective evolutionary algorithm that is based on hybridization of artificial bee colony and differential evolution, is proposed to solve time–cost–quality tradeoff problems. The proposed algorithm integrates crossover operations from differential evolution (DE) with the original artificial bee colony (ABC) in order to balance the exploration and exploitation phases of the optimization process. A numerical construction project case study demonstrates the ability of MOABCDE-generated, non-dominated solutions to assist project managers to select an appropriate plan to optimize TCQT, which is an operation that is typically difficult and time-consuming. Comparisons between the MOABCDE and four currently used algorithms, including the non-dominated sorting genetic algorithm (NSGA-II), the multiple objective particle swarm optimization (MOPSO), the multiple objective differential evolution (MODE), and the multiple objective artificial bee colony (MOABC), verify the efficiency and effectiveness of the developed algorithm.
               
            

@&#INTRODUCTION@&#

Planning a schedule that achieves both project deadline and project budget requirements is one of the most difficult tasks in construction management. Moreover, minimizing the time and the cost of construction projects is typically a key determinant of construction company success [1]. Researchers have established numerous models and applied many methods to optimize the time–cost tradeoff (TCQT) problem in the construction industry. Of these methods, evolutionary algorithms have proven relatively more efficient at avoiding local optimization [2–6]. The costs of resources and technologies used in a project are typically associated with work productivity and, thus, project duration. Conversely, higher resource and technology costs are typically associated with shorter project durations. However, shorter project durations and/or costs may decrease the quality of project work, resulting in earlier-than-projected aging/deterioration and higher-than-anticipated maintenance and rehabilitation costs. Therefore, determining the optimal combination of execution methods, construction technologies, and resource utilization plans that minimize time and costs while simultaneously maximizing quality, i.e., the TCQT problem, is crucial for construction planners [7].

Quality is a crucial factor that correlates highly with time and cost factors [8]. Scholars have established various models and methods that attempt to optimize the time–cost–quality tradeoff. Babu and Suresh [9] proposed an initial methodology for studying the TCQT problem using three inter-related linear programming models. Khang and Myint [10] established the validity of this methodology in a trial application on a cement factory construction project. El-Rayes and Kandil [11] used multiple objective evolutionary algorithms in a multi-objective model that they used to search for an optimal resource utilization plan to minimize construction cost and time while maximizing quality. They applied a genetic algorithm (GA) to quantify and consider quality and used the example of a highway construction project to visualize the optimal tradeoffs among the three variables. Zhang and Xing [7] indicated that time, cost, and, especially, quality are difficult to describe precisely. Therefore, they proposed a Pareto-based multi-objective Particle Swarm Optimization (PSO) for the fuzzy TCQT problem. More recently, hybridized evolutionary algorithms have been used successfully to solve the TCQT problem [12,13].

The Artificial Bee Colony (ABC) algorithm is one of the most recently introduced evolutionary methods [14,15]. The ABC is a swarm intelligence-based optimization algorithm inspired by honeybee foraging behavior. With its few parameters, ABC is simple to implement and relatively efficient and robust in comparison to other algorithms. It has been applied successful to solve complex multi-model optimization problems [16]. The ABC seems particularly suited for multi-objective optimization problems mainly because of solution quality and the high speed of convergence that the algorithm presents for single-objective optimization [17]. The ABC algorithm distributes information on food location throughout the entire population of bees. This characteristic makes ABC good at exploration but poor at exploitation and thus inadequate for problems that must apply existing information to find a better solution. Additionally, ABC converges relatively slowly for certain complex issues [18]. Differential Evolution (DE) is currently one of the most popular evolutionary algorithms. DE may be used in a wide variety of highly nonlinear and complex optimization problems. This algorithm is simply structured and easy to use, while demonstrating great robustness and fast convergence in solving single-objective global optimization problems [19]. The ability of DE to provide efficient solutions for complex problems with relatively simple operations has encouraged many researchers to develop MODE-based techniques [20,21].

Although meta-heuristic methods have been proven to have superior features than other traditional methods, they also suffer some limitations. For example, the convergence speed of the ABC algorithm is typically slower than the convergence speeds of representative population-based algorithms such as DE when handling unimodal problems because the ABC cannot utilize the information adequately to determine the most promising search direction [22]. The performance of the original DE algorithm is highly dependent on the mutation and crossover operator. In some cases, it may become easily trapped in the local minimum or converge too slowly [23]. In addition, numerous researchers have found that a skilled combination of two meta-heuristics may be beneficial and perform significantly better than single pure meta-heuristic algorithm in handling real-world and large-scale problems [24,25]. Therefore, hybridization with other algorithms offers the potential to further improve the performances of ABC and DE. The superior performance of hybridized ABC and DE over other algorithms in single and multiple-objective problems have been widely reported and verified [18,26–28]. Despite many reports of impressive hybridized ABC-DE performance in benchmark functions and practical applications, this algorithm has yet to be applied to solving the TCQT problem. Therefore, this paper applies the hybridized ABC-DE algorithm in a model that is designed to solve the TCQT problem.

Based on the above, this study develops the novel, hybrid MOABCDE model to conduct TCQT analysis. This new algorithm follows the same scheme as ABC while incorporating DE operators, which are used to generate new candidate solutions by combining the parent individual and several other individuals of the same population according to a simple formulation. The hybridization balances the exploration, exploitation, and convergence capabilities of the optimization process. Additionally, this new algorithm offers a strategy to balance the tradeoff between local search and global search capabilities and enhances MOABC performance. The objective is to demonstrate that the proposed algorithm attains fast convergence without losing solution diversity on the Pareto front.

The remainder of this paper is organized as follows. In Section 2, the TCQT problem is mathematically formulated. In Section 3, we review briefly the literature related to the establishment of the new optimization model. In Section 4, we present detailed descriptions of the proposed optimization model for the TCQT problem. Section 5 uses a numerical case study and result comparisons to demonstrate the performance of the newly developed model. Finally, some conclusions and suggested directions for future work are presented in Section 6.

In the TCQT problem, a project is represented by the diagram G
                     =(A), which is an activity-on-node network with N activities. These activities are numbered from 0 to N
                     +1 in the project network, where activities 0 and N
                     +1 are “dummy” activities denoting, respectively, the start and finish of the project. P is the set of all paths in the activity-on-node network, starting from activity (0) and ending at activity (N
                     +1). P
                     
                        l
                      is the set of activities contained in path 
                        
                           l
                           ∈
                           P
                        
                     . Each activity 
                        
                           i
                           ∈
                           A
                        
                      is associated with several execution methods. Each method has its time T
                     
                        i
                     , cost C
                     
                        i
                     , and quality Q
                     
                        i
                     . The TCQT problem concentrates mainly on selecting an optimal combination of execution methods for all activities in order to arrive at an optimal compromise among time, cost, and quality for the project. The project time, cost, and quality are quantified as follows:

The first objective, minimization of total project duration, may be expressed as follows:
                           
                              (1)
                              
                                 
                                    
                                       
                                       
                                          
                                             Minimize
                                             
                                             project
                                             
                                             time
                                             
                                             T
                                             =
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      n
                                                      =
                                                      1
                                                   
                                                   
                                                      l
                                                   
                                                
                                             
                                             
                                                
                                                   T
                                                
                                                
                                                   n
                                                
                                                
                                                   
                                                      
                                                         S
                                                      
                                                      
                                                         n
                                                      
                                                   
                                                
                                             
                                             =
                                             
                                                
                                                   Max
                                                
                                                
                                                   ∀
                                                   n
                                                
                                             
                                             (
                                             
                                                
                                                   ES
                                                
                                                
                                                   n
                                                
                                             
                                             +
                                             
                                                
                                                   d
                                                
                                                
                                                   n
                                                
                                             
                                             )
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                                
                                                   ES
                                                
                                                
                                                   n
                                                
                                             
                                             =
                                             
                                                
                                                   
                                                      Maximum
                                                   
                                                   
                                                      all predecessors
                                                      
                                                      m
                                                      
                                                      of
                                                      
                                                      n
                                                   
                                                
                                             
                                             (
                                             
                                                
                                                   ES
                                                
                                                
                                                   m
                                                
                                             
                                             +
                                             
                                                
                                                   d
                                                
                                                
                                                   m
                                                
                                             
                                             )
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    T
                                 
                                 
                                    n
                                 
                                 
                                    
                                       
                                          S
                                       
                                       
                                          n
                                       
                                    
                                 
                              
                           
                         is duration of the activity n
                        {n
                        =1,2,…,
                        l} on the critical path for a specific option of resources (S
                        
                           n
                        ); l is the total number of critical activities on a specific critical path. ES
                        
                           i
                         is the earliest start of activity n, d
                        
                           n
                         is the duration of activity n. In general, project duration is calculated based on precedence constraints and activity duration. The project information determines the precedence constraints and the selection alternatives determine activity duration.

The total cost of a project includes direct costs, indirect costs and tardiness cost. The direct cost (DC) of the project is the sum of the direct costs of all its activities. Indirect costs (IC) are costs proportional to the duration of the project as a whole. In accordance with contract requirements, contractors are often subject to tardiness cost (TC) because of delays in project completion.

The second objective, minimization of total project cost, may be calculated as follows:
                           
                              (2)
                              
                                 Minimize
                                 
                                 project
                                 
                                 cost
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          N
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                DC
                                             
                                             
                                                i
                                             
                                             
                                                
                                                   
                                                      S
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                          
                                          +
                                          
                                             
                                                IC
                                             
                                             
                                                i
                                             
                                             
                                                
                                                   
                                                      S
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                          
                                          +
                                          
                                             
                                                TC
                                             
                                             
                                                i
                                             
                                             
                                                
                                                   
                                                      S
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    DC
                                 
                                 
                                    i
                                 
                                 
                                    
                                       
                                          S
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              ,
                              
                                 
                                    IC
                                 
                                 
                                    i
                                 
                                 
                                    
                                       
                                          S
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              ,
                              
                                 
                                    TC
                                 
                                 
                                    i
                                 
                                 
                                    
                                       
                                          S
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                           
                         is the direct, indirect and tardiness cost of activity i, respectively, for a specific option of execution methods (S
                        
                           n
                        ) and N is the total number of activities.

Since a project comprises various resources such as materials, machines, labor, the overall project quality is determined by each activity’s quality. On the basic of the previous researches [8,12] and the collected data, we define Quality Performance Index (QPI) as the achieved level of the quality goal under the contract in a given period.

We define QPI
                        
                           i
                         as the quality of a single activity as follows:
                           
                              (3)
                              
                                 
                                    
                                       QPI
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       a
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       T
                                    
                                    
                                       i
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 
                                    
                                       b
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       T
                                    
                                    
                                       i
                                    
                                 
                                 +
                                 
                                    
                                       c
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    QPI
                                 
                                 
                                    i
                                 
                              
                              ∈
                              [
                              0
                              ,
                              1
                              ]
                           
                        , i
                        =1,2,…,
                        N, T
                        
                           i
                         is duration of activity i, with T
                        
                           i
                        
                        >0, a
                        
                           i
                        , b
                        
                           i
                        , c
                        
                           i
                         are the coefficients decided by the quadratic function (Fig. 1
                        ). Fig. 1 shows that SD
                        
                           i
                        , BD
                        
                           i
                        , LD
                        
                           i
                         are the shortest duration, best duration, longest duration of activity i.

The third and final objective, is the maximization of project’s overall quality.
                           
                              (4)
                              
                                 Maximize project quality
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          N
                                       
                                    
                                 
                                 (
                                 
                                    
                                       QPI
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 /
                                 N
                              
                           
                        
                     

The scope of this study is limited to a deterministic environment in which decisions are made with deterministic input data from the case study. The assumptions of the case study are that all the objective functions are quantified data and the mean values of the resources are used.

@&#LITERATURE REVIEW@&#

A multiple objective optimization (MOO) problem involves several conflicting objectives and has a set of Pareto optimal solutions. An MOO model considers a vector of decision variables, objective functions, and constraints. Decision makers attempt to minimize (or maximize) the objective functions [29].

A MOO problem may be mathematically formulated as:
                           
                              (5)
                              
                                 
                                    
                                       
                                          min
                                       
                                       
                                          X
                                          ∈
                                          D
                                       
                                    
                                 
                                 
                                 f
                                 (
                                 X
                                 )
                                 =
                                 [
                                 
                                    
                                       f
                                    
                                    
                                       1
                                    
                                 
                                 (
                                 X
                                 )
                                 ,
                                 
                                    
                                       f
                                    
                                    
                                       2
                                    
                                 
                                 (
                                 X
                                 )
                                 ,
                                 …
                                 ,
                                 
                                    
                                       f
                                    
                                    
                                       k
                                    
                                 
                                 (
                                 X
                                 )
                                 ]
                              
                           
                        
                        
                           
                              (6)
                              
                                 s
                                 .
                                 t
                                 .
                                 
                                 
                                    
                                       g
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 X
                                 )
                                 ⩾
                                 0
                                 ;
                                 
                                 i
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 m
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                    
                                       h
                                    
                                    
                                       j
                                    
                                 
                                 (
                                 X
                                 )
                                 =
                                 0
                                 ;
                                 
                                 j
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 p
                              
                           
                        
                        
                           
                              (8)
                              
                                 D
                                 =
                                 {
                                 X
                                 |
                                 g
                                 (
                                 X
                                 )
                                 ⩾
                                 0
                                 ,
                                 h
                                 (
                                 X
                                 )
                                 =
                                 0
                                 }
                              
                           
                        where f(X) is the objective vector, k is the number of objective functions. g
                        
                           i
                        (X) is the set of inequality constraints, and h
                        
                           j
                         (X) is the set of inequality equality constraints. The m and p are the number of inequality and equality constraints, respectively. The solution X(x
                        1,
                        x
                        2,…,
                        x
                        
                           n
                        )
                           T
                         is a vector of n decision variables in feasible region D. The multi-objective optimization problem works to determine those vectors X that yield the optimum values for all the objective functions from the set D of all vectors which satisfy (6) and (7).

Because this problem rarely presents a unique solution, decision makers are expected to choose a solution from among a set of efficient solutions, known collectively as the Pareto. The Pareto dominance is formally defined as follows [30]:

Solution X
                        1(x
                        1.1,
                        x
                        1.2,…,
                        x
                        1.n
                        )
                           T
                         dominates X
                        2(x
                        2.1,
                        x
                        2.2,…,
                        x
                        2.n
                        )
                           T
                         if both the conditions are satisfied:
                           
                              1.
                              
                                 
                                    
                                       ∀
                                       
                                       i
                                       ∈
                                       (
                                       1
                                       ,
                                       2
                                       ,
                                       …
                                       ,
                                       k
                                       )
                                    
                                 : f
                                 
                                    i
                                 (X
                                 1)⩽
                                 f
                                 
                                    i
                                 (X
                                 2). The solution X
                                 1 is no worse than X
                                 2 in attaining all objectives.


                                 
                                    
                                       ∃
                                       
                                       i
                                       ∈
                                       (
                                       1
                                       ,
                                       2
                                       ,
                                       …
                                       ,
                                       k
                                       )
                                    
                                 : f
                                 
                                    i
                                 (X
                                 1)<
                                 f
                                 
                                    i
                                 (X
                                 2). The solution X
                                 1 is strictly better than X
                                 2 in at least one objective.

So, while comparing two different solutions X
                        1 and X
                        2, there are three possibilities of dominance relation between them.
                           
                              •
                              
                                 X
                                 1 dominates X
                                 2.


                                 X
                                 1 is dominated by X
                                 2.


                                 X
                                 1 and X
                                 2 are non-dominated to each other.

A non-dominated solution means that no other solution has been found that dominates it. The set of non-dominated solutions is called the Pareto front.

Using Multiple Objective Evolutionary Algorithms (MOEAs) to analyze MOO problems has attracted increasing attention in recent years. Numerous researchers from several domains of science and engineering have applied MOEAs to solve optimization problems that arise in their own fields [21], including engineering optimization [31], construction management [32,33], scheduling problems [34,35], economic and finance problems [36], and group decision making [29]. New multiple objective optimization algorithms will continue to emerge as MOO problems become more complex.

The ABC algorithm is a recently developed population-based optimization algorithm now widely used to solve multidimensional optimization problems [14]. This swarm-intelligence-based optimization algorithm was inspired by honeybee foraging behavior. ABC incorporates three kinds of honeybees: employed bees, onlooker bees, and scout bees. Food source position indicates a possible optimization problem solution and food source profitability corresponds to the quality of the associated solution (fitness).

The ABC algorithm is an iterative algorithm. It commences the search process by generating NF number of food source positions randomly in D dimensions. NF does not change during the optimization process in the standard ABC algorithm. Eq. (9) was used as our initial population generator. Amount of nectar at each food source position was calculated after all food source positions were generated.
                           
                              (9)
                              
                                 
                                    
                                       X
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       LB
                                    
                                    
                                       j
                                    
                                 
                                 +
                                 rand
                                 [
                                 0
                                 ,
                                 1
                                 ]
                                 ×
                                 (
                                 
                                    
                                       UB
                                    
                                    
                                       j
                                    
                                 
                                 -
                                 
                                    
                                       LB
                                    
                                    
                                       j
                                    
                                 
                                 )
                                 ;
                                 
                                 (
                                 j
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 D
                                 ;
                                 i
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 NP
                                 )
                              
                           
                        where LB
                        
                           j
                         and UB
                        
                           j
                         indicates the lower and upper bound of the ith decision variable; rand[0,1] denotes a uniformly distributed random number between 0 and 1; and X
                        
                           i,j
                         is the ith decision variable (food source position) in the initial population.

Each employed bee chooses a new candidate food source position to update feasible solutions based on the neighborhood of the previously selected food source. A candidate solution U
                        
                           i,j
                         may thus be generated from the old solution X
                        
                           i,j
                         as in Eq. (10). Employed bees are created from the strength of previously discovered sources.
                           
                              (10)
                              
                                 
                                    
                                       U
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       X
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 +
                                 
                                    
                                       ϕ
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 -
                                 
                                    
                                       X
                                    
                                    
                                       k
                                       ,
                                       j
                                    
                                 
                                 )
                              
                           
                        where 
                           
                              {
                              k
                              ,
                              i
                              }
                              ∈
                              {
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              NF
                              }
                           
                         and 
                           
                              k
                              ≠
                              i
                           
                        ; 
                           
                              j
                              ∈
                              {
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              D
                              }
                           
                         are randomly chosen indices; ϕ
                        
                           i,j
                         is a random number in the range [−1,1].

Amount of nectar is used to compare the candidate solution (candidate food source position) with the old solution. The candidate solution will replace the old solution if its food source quality is equal to or better than the latter; otherwise, the old solution is retained. Food source information is shared with onlooker bees when employed bees return to their hive. The information sharing stage of the ABC algorithm generates collective intelligence. Probability value influences the behavior of onlooker bees, which select food sources based on probability. Probability value is calculated as:
                           
                              (11)
                              
                                 
                                    
                                       p
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       fit
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   j
                                                   =
                                                   1
                                                
                                                
                                                   NF
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       fit
                                    
                                    
                                       j
                                    
                                 
                              
                           
                        where fit
                        
                           i
                         is the fitness value of the ith food source.

An onlooker bee chooses a food source depending on the probability value p
                        
                           i
                         associated with that food source. ABC produces an onlooker bee using Eq. (11). After evaluating the source, greedy selection is applied and the onlooker bee either updates the new position by removing or retaining the old solution. The ABC algorithm updates the best food source position after termination of the onlooker bee phase. A new best food source position will replace the old if the former provides an equal or better amount of nectar. Otherwise, the old food source position remains valid.

If food source X
                        
                           i
                         (solution X
                        
                           i
                        ) shows no further improvement through a continuous pre-determined number of cycles, then Eq. (9) is used to replace that food source with a new food source discovered by the scout bee. The optimization process terminates when the user-determined stop criterion is reached. The final optimal solution is available to the user once the optimization process terminates.

DE is a simple population-based, direct-search used to solve global optimization problems [19,37]. The original DE algorithm is described briefly as follows:

Let 
                           
                              S
                              ⊂
                              
                                 
                                    R
                                 
                                 
                                    n
                                 
                              
                           
                         be the search space of the problem under consideration. DE utilizes NP and D-dimensional parameter vectors 
                           
                              
                                 
                                    X
                                 
                                 
                                    i
                                 
                                 
                                    G
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             i
                                             ,
                                             1
                                          
                                          
                                             G
                                          
                                       
                                       ,
                                       
                                          
                                             x
                                          
                                          
                                             i
                                             ,
                                             2
                                          
                                          
                                             G
                                          
                                       
                                       ,
                                       …
                                       ,
                                       
                                          
                                             x
                                          
                                          
                                             i
                                             ,
                                             D
                                          
                                          
                                             G
                                          
                                       
                                    
                                 
                              
                              ,
                              
                              i
                              =
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              NP
                           
                         as a population for each algorithm generation. The initial population is generated randomly and should cover the entire parameter space. At each generation, DE applies the mutation operator and the crossover (recombination) operator to produce one trial vector 
                           
                              
                                 
                                    U
                                 
                                 
                                    i
                                 
                                 
                                    G
                                    +
                                    1
                                 
                              
                           
                         for each target vector 
                           
                              
                                 
                                    X
                                 
                                 
                                    i
                                 
                                 
                                    G
                                 
                              
                           
                        . Then, a selection phase takes place to determine whether the trial vector enters the population of the next generation or not. For each target vector 
                           
                              
                                 
                                    X
                                 
                                 
                                    i
                                 
                                 
                                    G
                                 
                              
                           
                        , a mutant vector 
                           
                              
                                 
                                    V
                                 
                                 
                                    i
                                 
                                 
                                    G
                                    +
                                    1
                                 
                              
                           
                         is determined using the following equation.
                           
                              (12)
                              
                                 
                                    
                                       V
                                    
                                    
                                       i
                                    
                                    
                                       G
                                       +
                                       1
                                    
                                 
                                 =
                                 
                                    
                                       X
                                    
                                    
                                       r
                                       1
                                    
                                    
                                       G
                                    
                                 
                                 +
                                 F
                                 
                                    
                                       
                                          
                                             
                                                X
                                             
                                             
                                                r
                                                2
                                             
                                             
                                                G
                                             
                                          
                                          -
                                          
                                             
                                                X
                                             
                                             
                                                r
                                                3
                                             
                                             
                                                G
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    r
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    r
                                 
                                 
                                    2
                                 
                              
                              ,
                              
                                 
                                    r
                                 
                                 
                                    3
                                 
                              
                              ∈
                              {
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              NP
                              }
                           
                         are randomly selected such that r
                        1
                        ≠
                        r
                        2
                        ≠
                        r
                        3
                        ≠
                        i, and F is a scaling factor such that 
                           
                              F
                              ∈
                              [
                              0
                              ,
                              1
                              ]
                           
                        .

Following the mutation phase, the crossover operator is applied to increase the diversity. For each mutant vector 
                           
                              
                                 
                                    V
                                 
                                 
                                    i
                                 
                                 
                                    G
                                    +
                                    1
                                 
                              
                           
                        , a trial vector 
                           
                              
                                 
                                    U
                                 
                                 
                                    i
                                 
                                 
                                    G
                                    +
                                    1
                                 
                              
                              =
                              {
                              
                                 
                                    u
                                 
                                 
                                    i
                                    ,
                                    1
                                 
                                 
                                    G
                                 
                              
                              ,
                              
                                 
                                    u
                                 
                                 
                                    i
                                    ,
                                    2
                                 
                                 
                                    G
                                    +
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    u
                                 
                                 
                                    i
                                    ,
                                    D
                                 
                                 
                                    G
                                    +
                                    1
                                 
                              
                              }
                           
                         is generated using the following scheme.
                           
                              (13)
                              
                                 
                                    
                                       u
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                    
                                       G
                                       +
                                       1
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         v
                                                      
                                                      
                                                         i
                                                         ,
                                                         j
                                                      
                                                      
                                                         G
                                                         +
                                                         1
                                                      
                                                   
                                                
                                                
                                                   if
                                                   
                                                   (
                                                   
                                                      
                                                         rand
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                   [
                                                   0
                                                   ,
                                                   1
                                                   )
                                                   ⩽
                                                   CR
                                                   
                                                   or
                                                   
                                                   j
                                                   =
                                                   
                                                      
                                                         j
                                                      
                                                      
                                                         rand
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         i
                                                         ,
                                                         j
                                                      
                                                      
                                                         G
                                                      
                                                   
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                 j
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 D
                              
                           
                        
                     


                        CR
                        ⊂[0,1] is a user-defined crossover constant; j
                        
                           rand
                         is a randomly chosen index from {1,2,…,
                        D} that ensures trail vector 
                           
                              
                                 
                                    U
                                 
                                 
                                    i
                                 
                                 
                                    G
                                    +
                                    1
                                 
                              
                           
                         differs from its target 
                           
                              
                                 
                                    X
                                 
                                 
                                    i
                                 
                                 
                                    G
                                 
                              
                           
                         by at least one parameter.

To decide whether the trial vector 
                           
                              
                                 
                                    U
                                 
                                 
                                    i
                                 
                                 
                                    G
                                    +
                                    1
                                 
                              
                           
                         should be a member of the population in the next generation, it is compared to the corresponding target vector 
                           
                              
                                 
                                    X
                                 
                                 
                                    i
                                 
                                 
                                    G
                                 
                              
                           
                         using the greedy criterion. The selection operator is expressed as follows:
                           
                              (14)
                              
                                 
                                    
                                       X
                                    
                                    
                                       i
                                    
                                    
                                       G
                                       +
                                       1
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         U
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         G
                                                         +
                                                         1
                                                      
                                                   
                                                
                                                
                                                   if
                                                   
                                                   f
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  U
                                                               
                                                               
                                                                  i
                                                               
                                                               
                                                                  G
                                                                  +
                                                                  1
                                                               
                                                            
                                                         
                                                      
                                                   
                                                   <
                                                   f
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  X
                                                               
                                                               
                                                                  i
                                                               
                                                               
                                                                  G
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         G
                                                      
                                                   
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Once the memberships of the next generation are selected, the evolutionary cycle of the DE iterates until the specified termination criterion is reached.

Storn and Price [19] introduced the DE in 1997 and Karaboga [38] proposed the ABC in 2005. Many researchers worldwide have used these algorithms in numerous variants of the basic algorithm formats in order to achieve improved performance [20,39]. Some of these variants have been designed to tackle specific applications while others are generalized for numerical optimization. Talbi and Batouche [40] proposed a hybrid approach based on DE and PSO to solve multimodal image registration. Zhang et al. [41] studied the hybridization of the DE and PSO for unconstrained optimization problems. Omkar et al. [42] presented a generic multi-objective approach named the Vector Evaluated Artificial Bee Colony for composite design optimization. Kang et al. [43] combined Rosenbrock’s rotational direction method with the ABC to improve the ABC search capabilities for accurate global optimization. Kiran and Gündüz [44] incorporated the GA crossover operation-based neighbor selection technique for information sharing in the hive of the ABC process to improve local search and exploration of the ABC. In addition, a number of studies [18,45] have examined the hybridization of ABC and DE.

An extensive review of the studies conducted on ABC and DE in the literature indicates that the ABC has powerful global search ability but poor local search ability [46], while the DE has powerful local search ability but poor global search ability [47,48]. To provide powerful global search capability, a diverse population should be maintained during iterations while the population is saturated (exploited) during the iteration that is designed to provide powerful local search capability. Thus, exploration (diversification) and exploitation (intensification) in the algorithms should be balanced to obtain better-quality results for the optimization problems [49]. In this study, combining the best features of the two algorithms ABC and DE balances the local search capabilities and the global search capabilities of the proposed algorithm ABCDE in order to obtain better-quality results.

This section describes the hybrid multiple objective artificial bee colony differential evolution (MOABCDE) algorithm that was designed in this study based on the original ABC [14] and DE algorithms [19] in order to solve the TCQT problem. MOABCDE first creates the population (solutions) that will be exploited in the employed bee phase. Then, the DE crossover-mutation operators are applied to improve the population. Subsequently, a probability vector is calculated according to the qualities of the solutions to select those solutions that will enter the onlooker bee phase. These solutions (bees) analyze the neighborhood of the selected solution and determine the better one. The DE crossover-mutation operators are also applied in this phase. Afterward, the algorithm examines which solutions do not improve the solution and then assigns scout bees to find new solutions to replace these suboptimal solutions. Finally, the best solutions will be kept and exploited by the employed bee phase in the next generation. Fig. 2
                      shows the overall operational architecture of the proposed algorithm. The steps of MOABCDE-TCQT are described as follows:

This study considers the TCQT problem, in which project cost, project duration, and project quality are optimized simultaneously. The model requires project information inputs including activity relationship, activity duration (D
                        
                           i
                        ), activity cost (C
                        
                           i
                        ), activity quality (QPI
                        
                           i
                        ), and execution methods (S
                        
                           n
                        ) for each activity. In addition, the user also must provide parameter settings for the search engine (MOABCDE) such as the value of population size NP, number of decision variables D, number of objective functions M, value of “limit”, value of the mutant constant F, value of the crossover probability constant CR, maximum number of generations G
                        
                           max
                        , the lower bound (LB) and the upper bound (UB) of decision variables. With these inputs, the optimizer conducts calculations to obtain an optimal set of execution methods for all construction project activities. With all the necessary information provided, the model is capable of operating automatically without any human intervention.

Population initialization is the first and the primary task in any evolutionary algorithm. The population in the MOABCDE may be guided toward more promising areas if the initial population is spread as much as possible over the objective function surface. Hence, the NP individuals of the population may be easily generated as Eq. (9).

A candidate solution to the TCQT problems may be represented as a vector with D elements as follows:
                           
                              (15)
                              
                                 X
                                 =
                                 [
                                 
                                    
                                       X
                                    
                                    
                                       i
                                       ,
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       X
                                    
                                    
                                       i
                                       ,
                                       2
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       X
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       X
                                    
                                    
                                       i
                                       ,
                                       D
                                    
                                 
                                 ]
                              
                           
                        where D is the number of decision variables in the problem at hand. It is obvious that D is also the number of activities in the project network. Index i denotes the ith individual in the population. Vector X
                        
                           i,j
                         represents one execution method for activity j. execution method X
                        
                           i,j
                         is an integer number in the range [1,
                        M
                        
                           j
                        ] (j
                        =1 to D), meaning one position from M
                        
                           j
                         execution methods. Because the original ABC operates with real-value variables, a function is employed to convert the execution methods of those activities from real values to integer values within the feasible domain.
                           
                              (16)
                              
                                 
                                    
                                       X
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 =
                                 Ceil
                                 (
                                 rand
                                 [
                                 0
                                 ,
                                 1
                                 ]
                                 ×
                                 UB
                                 (
                                 j
                                 )
                                 )
                              
                           
                        where X
                        
                           i,j
                         is the option of activity j at the individual ith. rand[0,1] denotes a number between 0 and 1 generated by uniformly distributed random and opposition learning techniques. UB(j)=
                        M
                        
                           j
                         represents the number of execution methods for each activity. Ceil is a function to round a real number to the nearest integer greater than or equal to it.

The search engine (MOABCDE) takes into account the results obtained from the scheduling module and the search for an optimal combination of execution methods for each activity. This research used three contradicting objectives. Section 2 describes the formulae for each objective function.

During the optimization process, size of population remains NP. NP best (elite) solutions are selected from the combined population, which mixed of the current and advanced population together. While the “highest fitness value” solution is the best solution in the single objective solution scenario, a two-solutions dominance approach is used in multi-objective scenarios. Thus, the NP solutions in this research are selected using fast non-dominated sorting [30] and the entropy crowding technique [50]. Fig. 3
                         provides an overview of this procedure.

The solutions belonging to the best non-dominated set (Set F
                        1) are selected first. If size of F
                        1 is smaller than NP, the remaining members of the population are chosen from subsequent non-dominated fronts in rank order (F
                        2,
                        F
                        3,…). This procedure is continued until additional sets cannot be accommodated. Assume that F
                        
                           k
                         is the last non-dominated set able to be accommodated. In general, number of solutions in all sets F
                        1 through F
                        
                           k
                         will be greater than NP. In order to use crowding entropy sorting to choose the NP population members needed to select the best solutions, it is necessary to first fill all population slots in descending order of distance.

Once initialized, the DE crossover-mutation operators mutate the population to produce a set of mutant vectors. A mutated vector 
                           
                              
                                 
                                    V
                                 
                                 
                                    i
                                 
                                 
                                    G
                                    +
                                    1
                                 
                              
                           
                         is created using Eq. (12) that corresponds to the target vector 
                           
                              
                                 
                                    X
                                 
                                 
                                    i
                                 
                                 
                                    G
                                 
                              
                           
                        . The crossover operation exchanges components of the target vector and the mutant vector to diversify the current population. In this stage, a new vector called the trial vector, is created using Eq. (13).

Modification of the selection mechanism is the most important task of multi-objective optimization because the careful selection of candidate solutions facilitates the generation of a good Pareto front. This study used a new selection mechanism proposed by Ali, et al. [51]. This mechanism first evaluates the trial vector 
                           
                              
                                 
                                    U
                                 
                                 
                                    i
                                 
                                 
                                    G
                                    +
                                    1
                                 
                              
                           
                         and then compares it with the target vector 
                           
                              
                                 
                                    X
                                 
                                 
                                    i
                                 
                                 
                                    G
                                 
                              
                           
                        . If the trial vector dominates the target solution, it replaces the target solution immediately in the current population and the target solution is moved to another (advanced) population. Otherwise, the new solution (trial solution) is added to the advanced population. The two populations (current and advanced) are combined after each generation. Note that the total size of the combined population is 2NP. However, population size during the optimization process remains NP. Thus, NP solutions are selected based on the same technique presented in the Population selection procedure section.

Employed bees return to their hive and share food-source information with onlooker bees. The information sharing stage of the ABC algorithm generates collective intelligence. The probability value influences the behavior of onlooker bees, which select food sources based on probability. The probability value is calculated as:
                           
                              (17)
                              
                                 
                                    
                                       P
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       0.9
                                    
                                    
                                       ∗
                                    
                                 
                                 Fit
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 /
                                 
                                    max
                                 
                                 (
                                 Fit
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 )
                                 +
                                 0.1
                              
                           
                        where Fit(x
                        
                           i
                        ) is the fitness value of the ith solution (food source). To calculate the fitness value of solution x
                        
                           i
                         in multiple objective context, we adopted a new metric fitness calculation [27]. 
                           
                              (18)
                              
                                 Fit
                                 (
                                 
                                    
                                       X
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   2
                                                
                                                
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   .
                                                   rank
                                                
                                             
                                             +
                                             
                                                
                                                   1
                                                
                                                
                                                   1
                                                   +
                                                   
                                                      
                                                         X
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   .
                                                   ce
                                                
                                             
                                          
                                       
                                    
                                    
                                       -
                                       1
                                    
                                 
                              
                           
                        
                     

To evaluate the fitness of a given solution x
                        
                           i
                        , we need to know the Pareto front to which it belongs (for instance, if it belongs to the first Pareto front, then X
                        
                           i
                        .rank
                        =1). Next, we calculate its crowding entropy value (X
                        
                           i
                        .ce) with respect to the solutions of the same Pareto front, i.e., all solution in with rank
                        =1. The Pareto front class of each solution and its crowding entropy value in the population is determined by the fast non-dominated sorting [30] and the entropy crowding technique [50], respectively.

If solution X
                        
                           i
                         (food source X
                        
                           i
                        ) shows no improvement further through a continuous pre-determined number of cycles (limit), then the food source abandoned by its bee is replaced with a new food source discovered by the scout bee, Eq. (9).

The optimization process terminates when the stopping conditions are met. The user sets the type of these conditions. Maximum generation G
                        
                           max
                         or maximum number of functions evaluations (NFE) may be used as the stopping criterion. This study used the maximum number of generation as stopping condition for the proposed algorithm. When the optimization process terminates, the final set of optimal solutions, called the Pareto front, is presented to the user. Obtaining the entire Pareto front is of great importance because it assists decision makers to evaluate the pros and cons of each potential solution based on qualitative and experience-driven considerations.

This study analyzed a numerical construction project to demonstrate the effectiveness of the proposed MOABCDE in application to the TCQT problem. The obtained results were compared to four approaches used previously in the literature to handle the TCQT problem, including NSGA-II, MOPSO, MODE, and MOABC. The project comprised 60 construction activities, each of which has a number of possible execution methods. Fig. 4
                      shows the precedence relationships of the network. Table 1
                      shows the time, cost, and quality impact associated with each execution method (mode), with an average of 4.68 execution methods for each of the 60 activities, generating multiple billions (4.6860) of possible combinations for completing the entire project. Each possible combination has a unique impact on project performance, which means that decision makers must search a large number of potential solutions to find those that establish an optimal tradeoff/balance among construction project duration, cost, and quality. We used the newly developed multi-objective optimization model to search the many potential solutions.


                        Table 2
                         shows parameter settings for the proposed MOABCDE-TCQT [18,19,51,52]. Thirty independent optimization runs were conducted to avoid randomness. Table 3
                         lists the first 12 non-dominated solutions in descending order of time, cost, quality, and compromised, respectively, along with optimal execution method combinations. Solutions 1, 2, and 3 generated the smallest project duration value, solution 4 generated the smallest values for cost, solution 7 generated the highest values for project quality, and the other solutions struck a balance among the three objectives. Project managers may select the optimal solution for a specific project scenario based on experience, preferences, and specific situation conditions. For instance, if a manager prioritizes time, then solutions 1, 2, and 3 are optimal. If a manager prioritizes budget, then solution 4 is optimal. Solution 7 is optimal if a manager prioritizes project quality. However, if a manager wants to strike a measured balance between the three objectives, then solution 11, for example, provides a centrist solution marked by acceptable project duration (532days), moderate cost (US$ 4,409,675), and moderate project quality (90.081). Fig. 5
                         shows the typical Pareto optimal fronts obtained using the MOABCDE for this case study. These fronts show clearly the relationships among project duration, cost, and quality. This three-dimensional visualization of the tradeoffs may help decision makers evaluate the impact on project performance of the various potential resource-utilization plans.

The non-dominated solutions may also be used to optimize tradeoffs between any two objectives on a two-dimensional plane. Figs. 6–8
                        
                        
                         show the relationship between time and cost, cost and quality, and time and quality, respectively. As shown in the time–cost curve example (Fig. 6), the lower project funding we spend on project correlates with the longer project duration we need to complete project and vice versa. However, Figs. 6–8 may not adequately represent the entire tradeoff surface in the three-dimensional space. In fact, the two-dimensional tradeoff surface, when projected from three to two dimensions, may lose some non-dominated points because there is a hidden dimension that makes these points non-dominated.

We compared MOABCDE performance against NSGA-II [30], MOPSO [4], MOABC and MODE [51] to assess comparative effectiveness. For comparison purposes, all five algorithms used an equal number of function evaluations, had a population size of 300 and a maximum of 500 generations. In NSGA-II, the constant mutant and crossover probability factors were set at 0.5 and 0.9, respectively. In MOPSO, the two learning factors c
                        1, c
                        2 were both chosen at 2, and the inertia factor w is set in range of 0.3–0.7. MOABC, MODE and MOABCDE control parameters remained the same, as stated previously in Table 2. Thirty independent runs were carried out for all experiments.

Multi-objective optimization problem performance measures are more complex than those of single-objective optimization problems. Three issues are normally taken into consideration: (1) convergence to the Pareto optimal set; (2) maintenance of diversity in solutions of the Pareto optimal set; and (3) the maximal distribution bound of the Pareto optimal set [52]. In the literature, the researchers have suggested numerous quality indicators [30,53–55]. These indicators may be classified into three categories based on whether they evaluate: (1) closeness to the Pareto front; (2) the diversity in obtained solutions; or (3) both (1) and (2) [54]. The following describes the three quality indicators used in this research to evaluate, respectively, each of the three issues:
                           
                              1.
                              C-metric (C): C-metric is often used to assess the quality of the true Pareto front of optimized problems [56]. Let S
                                 1, S
                                 2
                                 ⊆
                                 S be two sets of decision solutions. C-metric is defined as the mapping between the ordered pair (S
                                 1,
                                 S
                                 2) and the interval [0,1]:
                                    
                                       (19)
                                       
                                          C
                                          (
                                          
                                             
                                                S
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                S
                                             
                                             
                                                2
                                             
                                          
                                          )
                                          =
                                          
                                             
                                                
                                                   
                                                      
                                                         {
                                                         
                                                            
                                                               a
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         ∈
                                                         
                                                            
                                                               S
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         ;
                                                         
                                                         ∃
                                                         
                                                            
                                                               a
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         ∈
                                                         
                                                            
                                                               S
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         :
                                                         
                                                            
                                                               a
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         ⩽
                                                         
                                                            
                                                               a
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         }
                                                      
                                                   
                                                
                                             
                                             
                                                |
                                                
                                                   
                                                      S
                                                   
                                                   
                                                      2
                                                   
                                                
                                                |
                                             
                                          
                                       
                                    
                                 
                              

The numerator in Eq. (19) denotes that the number of solutions in S
                                 2 is dominated by at least one solution in S
                                 1, and the denominator equals the total solutions in S
                                 2. Provided that C(S
                                 1,
                                 S
                                 2)=1, all solutions in S
                                 2 are dominated by or equal to solutions in S
                                 1. If C(S
                                 1,
                                 S
                                 2)=0, then S
                                 1 covers none of the solutions in S
                                 2. Both C(S
                                 1,
                                 S
                                 2) and C(S
                                 2,
                                 S
                                 1) should be checked in the comparison because the C-metric is not symmetrical in its arguments [57]. Table 4
                                  illustrates the comparative results among five algorithms in terms of the C-metric, where A
                                 1, A
                                 2, A
                                 3, A
                                 4 and A
                                 5 indicate MOABCDE, MODE, MOABC, MOPSO, and NSGA-II, respectively. Results show that MOABCDE dominates more than 16.1% of the MODE solutions, 10.5% of the MOABC solutions, 71.1% of the MOPSO solutions, and 59.4% of the NSGA-II solutions on average.

Spread (SP): This indicator [50] measures the extent of spread achieved among the non-dominated solutions. The mathematical definition of SP may be given as:
                                    
                                       (20)
                                       
                                          SP
                                          =
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   
                                                      k
                                                   
                                                
                                                d
                                                (
                                                
                                                   
                                                      E
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ,
                                                Ω
                                                )
                                                +
                                                
                                                   
                                                      
                                                         ∑
                                                      
                                                      
                                                         X
                                                         ∈
                                                         Ω
                                                      
                                                   
                                                
                                                |
                                                d
                                                (
                                                X
                                                ,
                                                Ω
                                                )
                                                -
                                                
                                                   
                                                      d
                                                   
                                                   
                                                      ¯
                                                   
                                                
                                                |
                                             
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   
                                                      k
                                                   
                                                
                                                d
                                                (
                                                
                                                   
                                                      E
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ,
                                                Ω
                                                )
                                                +
                                                (
                                                |
                                                Ω
                                                |
                                                -
                                                k
                                                )
                                                
                                                   
                                                      d
                                                   
                                                   
                                                      ¯
                                                   
                                                
                                             
                                          
                                       
                                    
                                 where Ω is a set of solutions (E
                                 1,…,
                                 E
                                 
                                    k
                                 ) are k extreme solutions in the set of true Pareto-front PF, k is the number of objectives and d(X,
                                 Ω)=min
                                    Y∈Ω,Y≠X
                                  ∥F(X)−
                                 F(Y)∥ is the minimum Euclidean distance between solution X and its neighboring solutions in the obtained non-dominated Ω set; 
                                    
                                       
                                          
                                             d
                                          
                                          
                                             ¯
                                          
                                       
                                       =
                                       
                                          
                                             1
                                          
                                          
                                             |
                                             Ω
                                             |
                                          
                                       
                                       
                                          
                                             ∑
                                          
                                          
                                             X
                                             ∈
                                             Ω
                                          
                                       
                                       d
                                       (
                                       X
                                       ,
                                       Ω
                                       )
                                    
                                  is the mean value of all d(X,
                                 Ω), ∣Ω∣ is the total solutions in Ω set. A value of zero for this metric indicates that all members of the Pareto optimal set are spaced equidistantly. A smaller value of SP indicates a better distribution and diversity of non-dominated solutions. Table 5
                                  shows a comparison of the spread metric for different algorithms. This supports that the average performance of the MOABCDE is superior to that of the four other algorithms.

Hyper-volume (HV): This indicator calculates the volume (in the objective space) covered by members of a non-dominated set of solutions Ω for a problem that works to minimize all objectives [52,54]. A hypercube v
                                 
                                    i
                                  is constructed for each solution 
                                    
                                       
                                          
                                             X
                                          
                                          
                                             i
                                          
                                       
                                       ∈
                                       Ω
                                    
                                 , with reference point W and the solution X
                                 
                                    i
                                  as the diagonal corners of the hypercube. The reference point may be found simply by constructing a vector of worst objective function values. Thereafter, a union of all hypercubes is found, with the HV of this union calculated as:
                                    
                                       (21)
                                       
                                          HV
                                          =
                                          
                                             
                                                
                                                   ⋃
                                                
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   |
                                                   Ω
                                                   |
                                                
                                             
                                          
                                          
                                             
                                                v
                                             
                                             
                                                i
                                             
                                          
                                       
                                    
                                 
                              

Algorithms with larger HV values are desirable. The HV value of a set of solutions is normalized using a reference set of Pareto optimal solutions with the same reference point. After normalization, the HV values are confined to range [0,1]. Table 6
                                  lists the results for each of the four compared algorithms in terms of HV. From Table 6, we see that the proposed model obtains the largest HV values, which means that the MOABCDE has better convergence and diversity performance than the other four algorithms.

A hypothesis test was performed to further demonstrate the superiority of the MOABCDE over the other approaches. In all indicators, the hypothesis tests only considered the MOABCDE and the best of other approaches. A one-tailed t-test with equal sample sizes and unequal and unknown variances analyzed the following hypothesis tests:

Hypothesis: MOABCDE versus standard MOABC in term of C-metric (Table 4).

H0: There is no difference in the C-metric of the MOABCDE algorithm and that of the MOABC algorithm.

H1: The MOABCDE algorithm is significantly better than the MOABC algorithm.

MOABCDE s
                        1
                        =0.094; MOABC: s
                        2
                        =0.041; n
                        1
                        =
                        n
                        2
                        =
                        n
                        =30;
                           
                              
                                 v
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         s
                                                      
                                                      
                                                         1
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   /
                                                   
                                                      
                                                         n
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                   +
                                                   
                                                      
                                                         s
                                                      
                                                      
                                                         2
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   /
                                                   
                                                      
                                                         n
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             2
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               1
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         /
                                                         
                                                            
                                                               n
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   2
                                                
                                             
                                          
                                          
                                             
                                                
                                                   n
                                                
                                                
                                                   1
                                                
                                             
                                             -
                                             1
                                          
                                       
                                       +
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               2
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         /
                                                         
                                                            
                                                               n
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   2
                                                
                                             
                                          
                                          
                                             
                                                
                                                   n
                                                
                                                
                                                   2
                                                
                                             
                                             -
                                             1
                                          
                                       
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         0.094
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   /
                                                   30
                                                   +
                                                   
                                                      
                                                         0.041
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   /
                                                   30
                                                
                                             
                                          
                                          
                                             2
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               0.094
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         /
                                                         30
                                                      
                                                   
                                                
                                                
                                                   2
                                                
                                             
                                          
                                          
                                             30
                                             -
                                             1
                                          
                                       
                                       +
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               0.041
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         /
                                                         30
                                                      
                                                   
                                                
                                                
                                                   2
                                                
                                             
                                          
                                          
                                             30
                                             -
                                             1
                                          
                                       
                                    
                                 
                                 =
                                 39.5
                                 
                                 (
                                 closest to
                                 
                                 40
                                 )
                              
                           
                        Critical value: with significant level of t-test α
                        =0.05; ν
                        =40; we have t
                        
                           α;ν
                        
                        =
                        t
                        0.05;40
                        =1.684
                           
                              
                                 Statistical test
                                 :
                                 
                                 t
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            ¯
                                                         
                                                      
                                                   
                                                   
                                                      1
                                                   
                                                
                                                -
                                                
                                                   
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            ¯
                                                         
                                                      
                                                   
                                                   
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   s
                                                
                                                
                                                   1
                                                
                                                
                                                   2
                                                
                                             
                                             /
                                             
                                                
                                                   n
                                                
                                                
                                                   1
                                                
                                             
                                             +
                                             
                                                
                                                   s
                                                
                                                
                                                   2
                                                
                                                
                                                   2
                                                
                                             
                                             /
                                             
                                                
                                                   n
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                0.1050
                                                -
                                                0.0334
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   0.094
                                                
                                                
                                                   2
                                                
                                             
                                             /
                                             30
                                             +
                                             
                                                
                                                   0.041
                                                
                                                
                                                   2
                                                
                                             
                                             /
                                             30
                                          
                                       
                                    
                                 
                                 =
                                 3.837
                                 >
                                 1.684
                                 =
                                 
                                    
                                       t
                                    
                                    
                                       0.05
                                       ;
                                       40
                                    
                                 
                              
                           
                        where n is the sample size (number of experimental runs), ν is the degrees of freedom used in the test, 
                           
                              
                                 
                                    s
                                 
                                 
                                    1
                                 
                                 
                                    2
                                 
                              
                           
                         and 
                           
                              
                                 
                                    s
                                 
                                 
                                    2
                                 
                                 
                                    2
                                 
                              
                           
                         are the unbiased estimators of the variances of the two samples (MOABCDE and MOABC). The denominator of t is the standard error of the difference between two means 
                           
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    
                                       
                                          x
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    2
                                 
                              
                           
                         (average).

H0 is rejected because the statistical test value noted above is greater than the critical value, which demonstrates the proposed MOABCDE as statistically superior to the standard MOABC in terms of the C-metric. In the same manner, Table 7
                         shows the results of the hypothesis test between MOABCDE and the best of other approaches in terms of the C-metric (C), Spread (SP) and Hyper-volume (HV):

As shown in Table 7, the proposed algorithm MOABCDE yielded results that were significantly better than other approaches in terms of the C-metric, spread, and hyper-volume (t
                        =3.837>1.684=
                        t
                        
                           α;ν
                        ; t
                        =−2.0348<−1681=−t
                        
                           α;ν
                         and t
                        =2.022>1.688=
                        t
                        
                           α; ν
                        ).

Time, cost, and quality are important and interdependent variables in construction projects. Integrating all goals into the optimization process and pursuing the tradeoffs among these goals represent one approach to improving the overall efficiency and effectiveness of construction projects. This paper developed a hybrid algorithm MOABCDE to solve the TCQT problem for construction projects. This hybrid algorithm makes two important contributions: First, it significantly improves MOABCDE process-convergence speed and solution accuracy by using DE operators in the MOABC scheme. Second, the MOABCDE is more effective and efficient than current, widely used multi-objective evolutionary algorithms, as demonstrated in a numerical construction case study. MOABCDE outperformed the non-dominated sorting genetic algorithm, the multiple objective particle swarm optimization, the multiple objective differential evolution, and the multiple objective artificial bee colony in terms of diversity of characteristics, compromise solutions, and degree of satisfaction.

Results show that the proposed model MOABCDE generates a better Pareto front than current, widely used approaches. The Pareto front generated by MOABCDE provides information that helps construction-project decision makers determine the optimal tradeoff among the three important project considerations of project duration, cost, and quality.

The proposed hybrid multiple objective artificial bee colony with differential evolution is simple, robust, and efficient. It does not impose any limitation on the number of objectives and may be extended to include additional objectives. Further minor modifications of the proposed MOABCDE algorithm hold interesting potential to resolve other multi-objective optimization problems in the field of construction management such as the tradeoffs among performance, cost, and reliability in engineering design work and resource-constrained and resource-leveling in project scheduling activities.

The case study considered quantifiable project performance variables, including time, cost, and, particularly, quality. However, in practice, experts, contractors, engineers, and managers often evaluate performance using linguistic and other imprecise terms due to uncertainties in the environment and subjectivity. Therefore, further study is required to build an optimization model to solve the time–cost–quality tradeoff, which considers aspects of performance that are vague, uncertain, and imprecise. Integrating the current model with other techniques such as fuzzy and stochastic simulation are interesting directions for future research.

@&#REFERENCES@&#

