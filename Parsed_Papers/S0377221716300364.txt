@&#MAIN-TITLE@&#Pro-active real-time routing in applications with multiple request patterns

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Automatic identification of request profiles in an offline step.


                        
                        
                           
                           Generation of stochastic knowledge for all possible request profile combinations.


                        
                        
                           
                           Real-time profile identification and dynamic adaptation of stochastic knowledge.


                        
                        
                           
                           Evaluating the proposed approach using scenarios with different request patterns.


                        
                        
                           
                           Managerial implications for practical parameterization.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Dynamic vehicle routing

Multiple request patterns

Request forecasting

Scenario identification

K-means clustering

@&#ABSTRACT@&#


               
               
                  Recent research reveals that pro-active real-time routing approaches that use stochastic knowledge about future requests can significantly improve solution quality compared to approaches that simply integrate new requests upon arrival. Many of these approaches assume that request arrivals on different days follow an identical pattern. Thus, they define and apply a single profile of past request days to anticipate future request arrivals. In many real-world applications, however, different days may follow different patterns. Moreover, the pattern of the current day may not be known beforehand, and may need to be identified in real-time during the day. In such cases, applying approaches that use a single profile is not promising. In this paper, we propose a new pro-active real-time routing approach that applies multiple profiles. These profiles are generated by grouping together days with a similar pattern of request arrivals. For each combination of identified profiles, stochastic knowledge about future request arrivals is derived in an offline step. During the day, the approach repeatedly evaluates characteristics of request arrivals and selects a suitable combination of profiles. The performance of the new approach is evaluated in computational experiments in direct comparison with a previous approach that applies only a single profile. Computational results show that the proposed approach significantly outperforms the previous one. We analyze further potential for improvement by comparing the approach with an omniscient variant that knows the actual pattern in advance. Based on the results, managerial implications that allow for a practical application of the new approach are provided.
               
            

@&#INTRODUCTION@&#

Dynamic vehicle routing problems (DVRPs, see Psaraftis, 1988; Ghiani, Guerriero, Laporte, & Musmanno, 2003; Eksioglu, Vural, & Reisman, 2009; Pillac, Gendreau, Guéret, & Medaglia, 2013) are vehicle routing problems (VRP, see Toth & Vigo, 2002; Golden, Raghavan, & Wasil, 2008) in which some information is only revealed during the day (see Larsen, Madsen, & Solomon, 2002, 2007). Such information can be new customer requests (for short, requests), vehicle disturbances, or traffic incidents (see Ferrucci, 2013, pp. 59–60). Due to such information changes, the tour plan (for short, the plan) has to be adapted during its execution. In this paper, we focus on new request arrivals.

In the literature, many DVRP approaches that integrate new requests upon arrival can be found (see for example Savelsbergh & Sol, 1998; Gendreau, Guertin, Potvin, & Taillard, 1999; Ichoua, Gendreau, & Potvin, 2000; Ghiani et al., 2003; Giaglis, Minis, Tatarakis, & Zeimpekis, 2004). It has also been shown that using stochastic knowledge about expected future requests allows for considerable improvements in DVRPs (for an overview of corresponding approaches for other routing problems, see Ferrucci (2013, pp. 108–137)). Bertsimas and van Ryzin (1993) study effects of different vehicle dispatching policies on the solution quality. Bent and van Hentenryck (2004b) introduce a sampling-based approach that is extended in Bent and van Hentenryck (2004a, 2004c, 2005, 2007). Further information is provided in van Hentenryck and Bent (2009). In van Hemert and La Poutré (2004), vehicles are relocated to fruitful regions where requests are expected to arrive. Ichoua, Gendreau, and Potvin (2006) extend the approach of Gendreau et al. (1999) so that a vehicle waits at the location of its last request if the probability of new, nearby requests is high. Hvattum, Løkketangen, and Laporte (2006) propose a sample scenario hedging heuristic that uses stochastic knowledge about future requests. In Hvattum, Løkketangen, and Laporte (2007), the authors improve this heuristic by integrating it into a branch-and-regret heuristic. Branchini, Vinícius, and Løkketangen (2009) derive strategic waiting positions based on historical data. Kleywegt, Savelsbergh, and Uyar (2009) analyze a multi-period routing problem and use stochastic knowledge in order to decide about request to period assignments. Ferrucci, Bock, and Gendreau (2013) propose an approach that generates stochastic knowledge from past request data and guides vehicles to request-likely areas when requests are expected there.

All these approaches assume that request arrivals on different days follow an identical request pattern (for short, pattern). In this paper, the term pattern refers to the spatial and temporal structure of request arrivals throughout a day. Since this structure (i.e., the pattern itself) is unknown, it is estimated by stochastic knowledge. As a result, a so-called profile is derived from request data of past days or from assumed distributions. By selecting a set of past days that are assumed to be representative of the spatial and temporal structure of incoming requests, a profile with a specific request arrival structure is generated from these days. All approaches in the literature assume that stochastic knowledge about future request arrivals can be derived by a single profile that adequately maps the existing pattern (see Fig. 1
                     ). Although this profile can map scenarios where request arrival probabilities change spatially and temporally during the day, it is assumed that the same profile is applicable every day. This assumption does not always apply to real-world routing processes. When past request arrivals of many real-world routing processes are analyzed, it can be observed that in each of these processes there are days which seem to follow different patterns. As a consequence, modeling these processes by a single profile may substantially reduce the quality of stochastic knowledge that can be derived. Unfortunately, request arrival patterns in real-world routing processes often depend on various external factors that are unknown or unmeasurable. Hence, it is often impossible to determine an adequate profile which can reliably model future request arrivals of the current day in advance. Thus, a suitable profile or a combination of profiles has to be identified in real-time during the execution of the ongoing transportation process.

In this paper, we propose a pro-active real-time routing approach for DVRPs that can deal with multiple profiles (see Fig. 1). This paper substantially extends the single profile approach of Ferrucci et al. (2013) by making the following contributions:

                        
                           •
                           
                              Automatic identification of profiles. In an offline step, the approach identifies k profiles by applying a k-means algorithm that analyzes available past request data. In order to provide well-defined information for grouping past days into profiles, we propose a distance measure that reflects differences in spatial and temporal request arrivals.


                              Stochastic knowledge generation. Based on the identified profiles, the approach generates appropriate stochastic knowledge for all combinations of identified profiles in a second offline step.


                              Real-time profile identification and dynamic knowledge adaptation. During the day, request arrivals are analyzed. Using the proposed distance measure, profiles that match the current day are identified and appropriate stochastic knowledge is integrated. As the day unfolds, additionally arrived requests are used to re-evaluate the applied profiles and stochastic knowledge is dynamically adapted if necessary. Since this re-evaluation is frequently repeated, previous decisions about integrated stochastic knowledge that are no longer suitable are automatically revoked.


                              Computational evaluation of multiple profiles. In order to assess the performance of the self-adapting application of multiple profiles, new test scenarios containing 2, 3, and 4 patterns per day are generated. Computational results show the superiority of the new approach compared to the previous single profile approach. The results also reveal that the new approach provides robust results if the number of generated profiles k is larger than the number of patterns actually present. Moreover, potential future improvements are analyzed by evaluating the performance of an omniscient variant that knows the correct profile in advance.


                              Managerial implications. In practical applications, the number of existing patterns and, hence, the number of profiles to be generated, is unknown but has to be defined. In order to improve the applicability of the new approach, we propose two methods that support finding suitable values for k.

The remainder of the paper is organized as follows. Section 2 describes the considered routing application. Section 3 illustrates the applied real-time concept. The new forecasting approach that supports multiple profiles is introduced in Section 4. Section 5 describes the applied solution method. Section 6 provides and evaluates computational results. Section 7 closes with an outlook and avenues for future research.

We consider a daily service-oriented distribution process that is controlled in real-time. Requests have a high urgency and almost all of them arrive during the day so that the process is characterized by a high degree of dynamism (see Larsen et al. (2002)). Typical applications of such a scenario are the subsequent delivery of newspapers, which occurs if a subscriber has not received their newspaper due to a delivery failure or thievery (see Bieding, Görtz, & Klose, 2009; Ferrucci et al., 2013) and urgently required repairmen services (see van de Klundert & Wormer, 2010). In such applications, quick service is of utmost importance so that customer satisfaction is attained and market positions are kept and expanded (see Parasuraman, Zeithaml, & Berry, 1985; Zeithaml, Berry, & Parasuraman, 1996).

We model the considered process as a Dynamic Vehicle Routing Problem with Soft Time Window constraints (DVRPSTW): A set of homogeneous vehicles 
                        
                           K
                           =
                           {
                           1
                           ,
                           …
                           ,
                           m
                           }
                        
                      initially located at one depot delivers goods to a set of customers whose requests 
                        
                           R
                           =
                           {
                           1
                           ,
                           …
                           ,
                           n
                           }
                        
                      dynamically arrive during the day. The arrival time of each request i ∈ R is denoted as ai
                     . Requests that arrived up to time point τ define the set of known requests 
                        
                           
                              R
                              τ
                           
                           =
                           
                              {
                              i
                              ∈
                              R
                              |
                              
                                 a
                                 i
                              
                              ≤
                              τ
                              }
                           
                        
                     . The time window of each known request i ∈ R opens at 
                        
                           
                              e
                              i
                           
                           =
                           
                              a
                              i
                           
                        
                      so that the request can be directly serviced. Each request has a service time of 
                        
                           
                              R
                              
                                 s
                                 t
                              
                           
                           =
                           60
                        
                      seconds. Request time windows have a length equal to the maximum allowed response time Rmrt
                      = 3600 seconds. If service begins after this time period, high penalty costs occur. The values of Rmrt
                      and Rst
                      are motivated by practical projects. Specifically, these projects revealed that companies are forced to offer service quality commitments due to stiff competition. In order to maintain customer loyalty, such commitments entail providing service quickly and complying with a maximum response time (known as service level agreements). In these projects, it turned out that the application of Rmrt
                      as a time threshold of one hour together with high penalty costs is effective in avoiding excessive and unacceptable waiting times. By applying these penalty costs, requests that are located outside the city center are also serviced within the given maximum response time limits if possible. The time Rst
                      required at each request is set to one minute, which applies to applications where urgent goods are delivered by handing them over to the customer, e.g., the aforementioned subsequent delivery of newspapers. Note that we neglect loading capacity constraints since it is assumed that enough goods can be directly loaded at the depot and that each vehicle can service every request.

We define the beginning of service at request i by yi
                     . The problem at τ consists of finding the plan that assigns the pending requests 
                        
                           
                              R
                              τ
                              U
                           
                           =
                           
                              {
                              i
                              ∈
                              
                                 R
                                 τ
                              
                              |
                              
                                 y
                                 i
                              
                              >
                              τ
                              }
                           
                        
                      to the vehicles with the minimum objective function value. Apart from known requests, 
                        
                           R
                           τ
                           U
                        
                      comprises so-called dummy customer requests that are used to guide vehicles into request-likely areas. Dummy customer requests (or in short, dummy customers) are derived from generated stochastic knowledge and represent expected future requests. In contrast to real customers, the time window of a dummy customer starts in the future. Each request i is weighted by wi
                      in the objective function. This weight is 1 for real requests and, in case of a dummy customer, it is set to the derived probability that requests will occur in the corresponding request-likely area.

The objective function of the considered transportation processes aims at minimizing total customer inconvenience. It is operationalized by a function of request response times and is defined by

                        
                           
                              
                                 min
                                 z
                                 =
                                 
                                    ∑
                                    
                                       i
                                       ∈
                                       
                                          R
                                          τ
                                          U
                                       
                                    
                                 
                                 
                                    (
                                    
                                       w
                                       i
                                    
                                    ·
                                    
                                       (
                                       
                                          
                                             
                                                F
                                                
                                                   (
                                                   
                                                      t
                                                      i
                                                   
                                                   )
                                                
                                             
                                             ︸
                                          
                                          
                                             
                                             Variable
                                             
                                             inconvenience
                                          
                                       
                                       +
                                       
                                       
                                          
                                             
                                                
                                                   R
                                                   
                                                      p
                                                      e
                                                      n
                                                   
                                                
                                                ·
                                                Θ
                                                
                                                   (
                                                   
                                                      t
                                                      i
                                                   
                                                   −
                                                   
                                                      R
                                                      
                                                         m
                                                         r
                                                         t
                                                      
                                                   
                                                   )
                                                
                                             
                                             ︸
                                          
                                          
                                             Lateness
                                             
                                             inconvenience
                                          
                                       
                                       )
                                    
                                    )
                                 
                                 ,
                              
                           
                        
                     with 
                        
                           
                              t
                              i
                           
                           =
                           
                              y
                              i
                           
                           −
                           
                              e
                              i
                           
                           ,
                           i
                           ∈
                           R
                        
                      and 
                        
                           Θ
                           (
                           x
                           )
                           =
                           1
                        
                      if x > 0 and 0 otherwise. In line with results from marketing literature, F is defined either as a linear (Davis & Maggard, 1990) or quadratic function (Kristensen, Kanji, & Dahlgaard, 1992) as shown in Fig. 2
                     .


                     Linear customer inconvenience (linear2X): 
                        
                           F
                           
                              (
                              
                                 t
                                 i
                              
                              )
                           
                           =
                           
                              1
                              
                                 R
                                 
                                    m
                                    r
                                    t
                                 
                              
                           
                           ·
                           
                              (
                              min
                              
                                 (
                                 
                                    t
                                    i
                                 
                                 ,
                                 
                                    R
                                    
                                       m
                                       r
                                       t
                                    
                                 
                                 )
                              
                              +
                              2
                              ·
                              max
                              
                                 (
                                 0
                                 ,
                                 
                                    t
                                    i
                                 
                                 −
                                 
                                    R
                                    
                                       m
                                       r
                                       t
                                    
                                 
                                 )
                              
                              )
                           
                        
                     . We double the steepness after Rmrt
                      in order to still consider those requests with a high priority.


                     Quadratic customer inconvenience (quadratic): 
                        
                           F
                           
                              (
                              
                                 t
                                 i
                              
                              )
                           
                           =
                           
                              
                                 (
                                 
                                    
                                       t
                                       i
                                    
                                    
                                       R
                                       
                                          m
                                          r
                                          t
                                       
                                    
                                 
                                 )
                              
                              2
                           
                        
                     . Since the steepness increases implicitly, no adaptation is required.

In both cases a response time equal to Rmrt
                      results in a customer inconvenience contribution of 1.0 whereas exceeding Rmrt
                      is penalized by 
                        
                           
                              R
                              
                                 p
                                 e
                                 n
                              
                           
                           =
                           100
                        
                     . Note that the two types of objective functions are introduced as possible variants and can be customized as long as quick service of pending requests is the main objective in the considered application.

Vehicles move on a real road network 
                        
                           
                              R
                              ˜
                           
                           =
                           
                              (
                              
                                 N
                                 ˜
                              
                              ,
                              
                                 A
                                 ˜
                              
                              )
                           
                        
                      with 
                        
                           N
                           ˜
                        
                      and 
                        
                           A
                           ˜
                        
                      denoting its nodes and arcs. The situation at τ is modeled by a digraph that maps all request locations and the depot as well as all vehicle positions. Let 
                        
                           G
                           =
                           (
                           N
                           ,
                           A
                           )
                        
                      be a digraph where 
                        
                           N
                           =
                           {
                           0
                           ,
                           …
                           ,
                           
                              n
                              τ
                           
                           +
                           m
                           }
                        
                      is the set of nodes and 
                        
                           A
                           =
                           (
                           N
                           ×
                           N
                           )
                        
                      the set of arcs. Node 0 corresponds to the depot location and nodes 
                        
                           j
                           =
                           1
                           ,
                           …
                           ,
                           
                              n
                              τ
                           
                        
                      correspond to the pending request locations 
                        
                           R
                           τ
                           U
                        
                      at time τ. Each request and the depot is located at a crossing or road endpoint. Node 
                        
                           
                              (
                              
                                 n
                                 τ
                              
                              +
                              k
                              )
                           
                           ∈
                           
                              N
                              ˜
                           
                        
                      represents the location of vehicle k at τ in the road network. If vehicle k is not at a node at τ but on an arc 
                        
                           
                              a
                              ˜
                           
                           ∈
                           
                              A
                              ˜
                           
                           ,
                        
                     
                     
                        
                           
                              (
                              
                                 n
                                 τ
                              
                              +
                              k
                              )
                           
                           ∈
                           
                              N
                              ˜
                           
                        
                      defines the node that vehicle k will reach at its availability time
                     
                        
                           v
                           
                              k
                              τ
                           
                           
                              δ
                              t
                           
                        
                     . This time point is measured relative to τ and is larger than 0 if the vehicle is busy with traveling or with servicing a request at τ. Value tij
                      is associated with arc (i, j) ∈ A and expresses the shortest time needed for a vehicle to travel from node i to node j.

Vehicle en-route diversion is allowed so that the first request currently assigned to a vehicle tour can be changed if this results in a better solution (see Ichoua et al., 2000; Ferrucci et al., 2013). In our scenario, this is likely to be beneficial since new requests may be serviced very quickly if a vehicle only needs to perform a small detour on its way to its currently assigned first request.

As mentioned above, information about past request arrivals is available. This request data consists of request arrivals of past days, i.e., arrival times as well as the geographical positions of arrived requests. Hence, stochastic knowledge about future requests, that is derived from this data in an offline step, involves uncertainty. Moreover, it does not follow or comprise any prescribed probability distributions that are known to the decision makers in advance. Since this type of data is available in many real-world routing processes, the proposed approach has practical relevance.

In order to deal with request urgency in the considered transportation process, newly arriving requests require an instant adaptation of the executed tour plan by the real-time routing approach. According to the aforementioned problem description, it requires solving an extended VRP which is a generalization of a TSP that is NP-hard in the strong sense (see Garey and Johnson (1979, pp. 211–214)). As any solution method aimed at producing sophisticated plan adaptations cannot be performed in zero time, changes in the ongoing transportation process must be taken into account. That is, plan adaptations produced by the solution method must comply with the decisions made by the transportation process, which is executed concurrently.

For the plan adaptations to be implemented simultaneously with the execution of the transportation process, we apply a concept related to the one proposed by Bock (2010). It provides real-time routing by solving consecutive static problem instances. These instances arise from the ongoing transportation process and are generated at intervals of ta
                      time units each, denoted as anticipation horizons. In each anticipation horizon beginning at time point τ, the system situation at the end of the anticipation horizon at 
                        
                           
                              τ
                              +
                           
                           =
                           τ
                           +
                           
                              t
                              a
                           
                        
                      is estimated by tentatively implementing all activities according to the currently executed plan up to 
                        
                           τ
                           +
                        
                     . This anticipated system situation at 
                        
                           τ
                           +
                        
                      creates the static problem instance at τ. By applying the solution method to this static problem instance until 
                        
                           
                              τ
                              +
                           
                           ,
                        
                      the resulting solution can be directly implemented as the new tour plan at 
                        
                           τ
                           +
                        
                     . New requests arriving in the interval (
                        
                           τ
                           ,
                           
                              τ
                              +
                           
                           
                              ]
                           
                        
                      are buffered until 
                        
                           τ
                           +
                        
                     .

In each anticipation horizon starting at time point τ, the approach stores and maintains three tour plans, namely the relevant plan, the theoretical plan, and the best theoretical plan. The relevant plan 
                        
                           P
                           τ
                           r
                        
                      is in execution until τ. The theoretical plan 
                        
                           P
                           τ
                           t
                        
                      defines the plan that was last generated by the solution method throughout the previous anticipation horizon. The best theoretical plan 
                        
                           P
                           τ
                           
                              b
                              t
                           
                        
                      denotes the plan that was found by the solution method in the previous anticipation horizon.

At τ, new requests that have been buffered during the previous anticipation horizon (denoted by Dτ
                     ) are integrated into all three plans by applying a least cost insertion heuristic. Subsequently, the best resulting plan is selected as the new relevant plan 
                        
                           P
                           τ
                           
                              r
                              *
                           
                        
                     . Note that choosing the best plan out of the three adapted plans increases robustness. We assume that this fast integration and selection can be performed in zero time. Hence, 
                        
                           P
                           τ
                           
                              r
                              *
                           
                        
                      is directly implementable at τ and is executed until the end of the current anticipation horizon at 
                        
                           τ
                           +
                        
                      (see also Fig. 3
                     ).

If the request situation has changed, the anticipation horizon is used to improve the executed tour plan using the solution method which will be described in Section 5. In order to handle the simultaneity of plan optimization and process execution, the problem instance to be optimized at τ is derived from a system snapshot at the end of the anticipation horizon by pre-simulating all activities of 
                        
                           P
                           τ
                           
                              r
                              *
                           
                        
                      for ta
                      time units. The remaining plan is set as the initial theoretical plan 
                        
                           P
                           
                              
                                 τ
                                 +
                              
                           
                           
                              t
                              *
                           
                        
                     . Since 
                        
                           P
                           
                              
                                 τ
                                 +
                              
                           
                           
                              t
                              *
                           
                        
                      contains only decisions taken after 
                        
                           
                              τ
                              +
                           
                           ,
                        
                      all decisions taken by 
                        
                           P
                           τ
                           
                              r
                              *
                           
                        
                      for the current anticipation horizon are executed as planned. Note that the pre-simulation covers all travel time updates of anticipated vehicle positions. Since these activities may consume an amount of time that cannot be considered as zero time, the time used for the pre-simulation is measured by 
                        
                           t
                           τ
                           
                              c
                              a
                              l
                              c
                           
                        
                     . After the pre-simulation is completed at 
                        
                           τ
                           +
                           
                              t
                              τ
                              
                                 c
                                 a
                                 l
                                 c
                              
                           
                           ,
                        
                      the solution method is applied for the remaining time period 
                        
                           
                              t
                              a
                           
                           −
                           
                              t
                              τ
                              
                                 c
                                 a
                                 l
                                 c
                              
                           
                        
                     . The best solution found during the solution process is defined as 
                        
                           P
                           
                              
                                 τ
                                 +
                              
                           
                           
                              b
                              t
                           
                        
                      and the plan examined last as 
                        
                           P
                           
                              
                                 τ
                                 +
                              
                           
                           t
                        
                     . Afterwards, the described concept is repeated at 
                        
                           τ
                           +
                        
                      for the subsequent anticipation horizon.

In this section, we present the new forecasting approach. It analyzes past days and identifies similar spatial and temporal characteristics regarding request arrivals. Days with a similar structure are grouped together and, as a result, appropriate profiles are identified. Each profile is used to generate suitable stochastic knowledge according to the request arrival structure of assigned days. During the current day, the approach has to decide to which of the identified profiles the current day belongs to. This is a challenging task, especially at the beginning of the day, since only little information from a few requests have been observed so far. This may lead to situations where the current day fits more than one profile up to a certain extent. In order to allow for integration of suitable stochastic knowledge in situations where more than one profile is accepted, stochastic knowledge is not only generated for individual profiles but also for all subsets of profiles. During the day, request arrival characteristics are repeatedly analyzed and stochastic knowledge of the subset of currently accepted profiles is integrated. In doing so, integrated stochastic knowledge about the occurrence of future requests is repeatedly adapted during the day. In order to actively guide vehicles to request-likely areas where requests are expected to arrive in the near future, dummy customer requests are integrated as described in Section 2. This is likely to enable an earlier service, which reduces request response times. Furthermore, dummy customers also keep vehicles in these request-likely areas for a specific amount of time. This duration is determined by the sum of expected service and travel time required to fulfill future requests. Note that the integration of stochastic knowledge reduces the number of inefficient tour plan modifications that have to be generated under high time pressure due to unexpected request arrivals. Hence, exploiting derived stochastic knowledge in the depicted way leads to more robust plans that require less substantial modifications before implementation.

We assume that request arrival characteristics of individual days are different but recur over time so that it is reasonable to group days into profiles that map different patterns. Note that the available past request data does not include any information about which day belongs to which pattern or how many patterns exist. Hence, in the first step the proposed approach identifies appropriate profiles and clusters the past days into the identified profiles. In order to avoid distorting effects, profiles with less than five assigned days are ignored. Consequently, the approach filters out outlier days, i.e., days with a rarely occurring pattern. During the day request arrivals are repeatedly analyzed and stochastic knowledge of the currently accepted profiles is integrated. In what follows, we denote the set of currently chosen and applied profiles as active profiles. In order to have appropriate stochastic knowledge directly available for the current set of accepted profiles, we precompute stochastic knowledge for all subsets of identified profiles. For example, if four profiles are identified, this results in 
                           
                              
                                 2
                                 4
                              
                              −
                              1
                              =
                              15
                           
                         possible profile subsets with at least one active profile. For each subset, the days that are assigned to the considered profiles are selected. By examining the selected days, the forecasting approach derives stochastic knowledge for these profiles. Since this process is computationally intensive and only requires past request data but no information about request arrivals of the current day, it is also carried out in an offline step.

For each profile subset, generated stochastic knowledge results in a set of dummy customers. As the day unfolds, characteristics of request arrivals are analyzed and compared to those of the identified profiles. For the subset of profiles accepted at a particular point in time, customized stochastic knowledge is applied by integrating the corresponding dummy customers of this subset. Clearly, narrowing down the number of accepted profiles allows for integrating stochastic knowledge that is more suitable for the current day. As the day evolves, this analysis is repeatedly performed and, if possible, better suited dummy customers are integrated.

In order to group the available nf
                            past days of request data to profiles, a distance measure that rates the similarity of days is defined. Let 
                              
                                 i
                                 ∈
                                 D
                                 =
                                 {
                                 1
                                 …
                                 
                                    n
                                    f
                                 
                                 }
                              
                            denote a day of the past request data. The planning horizon of day i is divided into T time periods with a length of m minutes each. For each time period t ∈ {1..T}, bit
                            defines the geographical position of the barycenter of requests that have arrived on day i in time period t. Moreover, nit
                            represents the number of requests that have arrived on day i in time period t and the average Euclidean distance of these requests to bit
                            is given by 
                              
                                 d
                                 
                                    i
                                    t
                                 
                                 a
                              
                           . In what follows, function d(bi, bj
                           ) gives the Euclidean distance between two barycenters.

The distance measure Δ(i, j) of two days i, j ∈ D corresponds to the sum over all time periods 
                              
                                 1
                                 …
                                 T
                              
                           . It is calculated by:

                              
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                Δ
                                                
                                                   (
                                                   i
                                                   ,
                                                   j
                                                   )
                                                
                                                =
                                                
                                                   Δ
                                                   T
                                                
                                                
                                                   (
                                                   i
                                                   ,
                                                   j
                                                   )
                                                
                                                =
                                                
                                                   ∑
                                                   
                                                      t
                                                      =
                                                      1
                                                   
                                                   T
                                                
                                                
                                                   
                                                      d
                                                      
                                                         
                                                            (
                                                            
                                                               b
                                                               
                                                                  i
                                                                  t
                                                               
                                                            
                                                            ,
                                                            
                                                               b
                                                               
                                                                  j
                                                                  t
                                                               
                                                            
                                                            )
                                                         
                                                         2
                                                      
                                                   
                                                   
                                                      
                                                         (
                                                         
                                                            N
                                                            t
                                                            
                                                               b
                                                               d
                                                            
                                                         
                                                         )
                                                      
                                                      2
                                                   
                                                
                                                +
                                                
                                                   
                                                      
                                                         (
                                                         
                                                            n
                                                            
                                                               i
                                                               t
                                                            
                                                         
                                                         −
                                                         
                                                            n
                                                            
                                                               j
                                                               t
                                                            
                                                         
                                                         )
                                                      
                                                      2
                                                   
                                                   
                                                      
                                                         (
                                                         
                                                            N
                                                            t
                                                            r
                                                         
                                                         )
                                                      
                                                      2
                                                   
                                                
                                                +
                                                
                                                   
                                                      
                                                         (
                                                         
                                                            d
                                                            
                                                               i
                                                               t
                                                            
                                                            a
                                                         
                                                         −
                                                         
                                                            d
                                                            
                                                               j
                                                               t
                                                            
                                                            a
                                                         
                                                         )
                                                      
                                                      2
                                                   
                                                   
                                                      
                                                         (
                                                         
                                                            N
                                                            t
                                                            
                                                               a
                                                               d
                                                            
                                                         
                                                         )
                                                      
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                with
                                                
                                                
                                                
                                                   N
                                                   t
                                                   
                                                      b
                                                      d
                                                   
                                                
                                                
                                                =
                                                
                                                
                                                   
                                                      
                                                         ∑
                                                         
                                                            i
                                                            ,
                                                            j
                                                            ∈
                                                            D
                                                            ,
                                                            i
                                                            ≠
                                                            j
                                                         
                                                      
                                                      d
                                                      
                                                         (
                                                         
                                                            b
                                                            
                                                               i
                                                               t
                                                            
                                                         
                                                         ,
                                                         
                                                            b
                                                            
                                                               i
                                                               j
                                                            
                                                         
                                                         )
                                                      
                                                   
                                                   
                                                      
                                                         n
                                                         f
                                                      
                                                      ·
                                                      
                                                         (
                                                         
                                                            n
                                                            f
                                                         
                                                         
                                                         −
                                                         
                                                         1
                                                         )
                                                      
                                                   
                                                
                                                ,
                                                
                                                
                                                   N
                                                   t
                                                   r
                                                
                                                =
                                                
                                                   
                                                      
                                                         ∑
                                                         
                                                            i
                                                            ∈
                                                            D
                                                         
                                                      
                                                      
                                                         n
                                                         
                                                            i
                                                            t
                                                         
                                                      
                                                   
                                                   
                                                      n
                                                      f
                                                   
                                                
                                                ,
                                                
                                                
                                                   N
                                                   t
                                                   
                                                      a
                                                      d
                                                   
                                                
                                                =
                                                
                                                   
                                                      
                                                         ∑
                                                         
                                                            i
                                                            ∈
                                                            D
                                                         
                                                      
                                                      
                                                         d
                                                         
                                                            i
                                                            t
                                                         
                                                         a
                                                      
                                                   
                                                   
                                                      n
                                                      f
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           For time period t, 
                              
                                 N
                                 t
                                 
                                    b
                                    d
                                 
                              
                            defines the average distance of two barycenters, 
                              
                                 N
                                 t
                                 r
                              
                            the average number of incoming requests, and 
                              
                                 N
                                 t
                                 
                                    a
                                    d
                                 
                              
                            the mean of the average request distances of all days i ∈ D. For each time period, the measure sums up three request characteristics: differences in a) the geographical position of the request barycenter, b) the number of request arrivals, and c) the average distance of requests to the barycenter of days i and j. By squaring computed values, significant differences in individual criteria are emphasized. In order to reduce distorting effects, all time periods and characteristics are equally weighted by normalizing each characteristic using average values.

Using this measure, all days i ∈ D are grouped into k profiles 
                              
                                 P
                                 =
                                 {
                                 1
                                 …
                                 k
                                 }
                              
                            using a k-means algorithm (MacQueen, 1967). Details on how to determine appropriate values for k are discussed in Section 6.5. Each profile j ∈ P consists of the set of assigned days. For profile j, request arrival characteristics are determined by calculating the average value for the individual values of the assigned days. Hence, in addition to comparing two days, Δ(i, j) can also be applied for comparing a day with a profile or two profiles with each other.

The k-means algorithm begins with k initial profiles that are computed by initial values, also denoted as seeds. Appropriate initial seed values are determined using the extension k-means++. It uses sophisticated seeding by considering characteristics of the present days instead of randomly choosing seed values. This leads to faster algorithm convergence and better solution quality (see Arthur & Vassilvitskii, 2007). After initialization, the k-means algorithm assigns day i ∈ D to profile j
                           * with 
                              
                                 Δ
                                 
                                    (
                                    i
                                    ,
                                    
                                       j
                                       *
                                    
                                    )
                                 
                                 =
                                 
                                    min
                                    
                                       j
                                       ∈
                                       P
                                    
                                 
                                 Δ
                                 
                                    (
                                    i
                                    ,
                                    j
                                    )
                                 
                              
                           . Afterwards, request characteristics of profiles are updated and the day to profile assignment process is iteratively repeated until no further changes in the day to profile assignment occur compared to the previous iteration. Since the k-means algorithm works heuristically, we perform it several times and choose the best result with minimum total distance between days and their corresponding profile.

In what follows, we describe how the approach generates stochastic knowledge for each subset of identified profiles.

For each subset of identified profiles, stochastic knowledge is generated by dividing the service area into x · y squared subareas, each of which is divided into segments (see Fig. 4
                           ). Each segment s ∈ S has a squared spatial (DCse
                           ) and a temporal (DCte
                           ) extension. For each s ∈ S, request arrivals are modeled by a time-space Poisson process ps
                           . These processes may vary from segment to segment but are assumed to be constant for days assigned to a profile. As we will describe later on, the approach checks this assumption by two Poisson quality tests and only accepts stochastic knowledge with sufficient quality. The rate parameter λ(ps
                           ) is set to the average number of request arrivals in s over the considered days.

Dividing the service area into small segments often leads to low rate parameter values λ(ps
                           ). In order to allow reliable forecasts, adjacent segments are combined into clusters. Specifically, n time-space Poisson processes 
                              
                                 
                                    p
                                    1
                                 
                                 ,
                                 …
                                 ,
                                 
                                    p
                                    n
                                 
                              
                            can be combined into a new compound time-space Poisson process 
                              
                                 
                                    p
                                    *
                                 
                                 =
                                 
                                    ⋃
                                    
                                       i
                                       =
                                       1
                                    
                                    n
                                 
                                 
                                    p
                                    i
                                 
                                 ,
                              
                            with 
                              
                                 λ
                                 
                                    (
                                    
                                       p
                                       *
                                    
                                    )
                                 
                                 =
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                    
                                    n
                                 
                                 λ
                                 
                                    (
                                    
                                       p
                                       i
                                    
                                    )
                                 
                              
                            until p
                           * obtains a rate parameter that is sufficiently high, thereby justifying the assumption that requests will arrive in the cluster. Segments are combined into clusters by considering three quality criteria:

                              
                                 (i)
                                 Maximum spatial and temporal extensions (DCmse
                                     and DCmte
                                    ) are fulfilled.

The sum of the rate values of assigned segments is at least DCminλ
                                    .

Certain other quality aspects are met (this will be described later on).

Clusters are generated in two phases. In phase I all valid clusters that meet the criteria above are generated (see also Algorithm 1) by evaluating all bases suitable for a chosen DCmse
                           . For example, if DCmse
                            is set to 2 by 2 segments, a base consists of 1, 2, or 4 segments adjacent in space at the same temporal level (see first picture of Fig. 5
                           ) and form a convex cluster ctemp
                            with a temporal height of one segment. This fulfills the first part of criteria (i). In order to fulfill criteria (ii), segments located at the successive temporal level are iteratively added to ctemp
                            (see Fig. 5) until the rate parameter λ(ctemp
                           ) is at least DCminλ
                            or the temporal height of ctemp
                            exceeds DCmte
                           . In the latter case, ctemp
                            is discarded since it violates the second part of criteria (i). Otherwise, further quality aspects of criteria (iii) are checked in two further steps.
                        

In the first step, the barycenter of past requests observed within ctemp
                            is mapped on the road network using the closest node n′. Note that n′ may be positioned on a road with a low speed limit which is undesirable since it might take a long time for a vehicle to reach a main street again. Hence, n′ is relocated to node 
                              
                                 n
                                 
                                    c
                                    
                                       t
                                       e
                                       m
                                       p
                                    
                                 
                              
                            that is located within a maximum travel time radius DCradiusTT
                            of n′ and is connected to a road that has a speed limit greater than or equal to a predefined speed limit. If such a node does not exist, the closest node with highest speed limit is chosen. This node is the location of dummy customer associated with ctemp
                           . If the average travel time 
                              
                                 c
                                 
                                    t
                                    e
                                    m
                                    p
                                 
                                 
                                    a
                                    v
                                    g
                                    T
                                    T
                                 
                              
                            from 
                              
                                 n
                                 
                                    c
                                    
                                       t
                                       e
                                       m
                                       p
                                    
                                 
                              
                            to past requests observed within ctemp
                            exceeds DCmaxAvgTT, ctemp
                            is discarded since the expected detour is too large for an advantageous forecast.

Generating stochastic knowledge for all subsets of identified profiles may lead to situations in which request arrivals in a cluster cannot be adequately modeled by Poisson processes with constant rate parameter. This is the case if there exist profiles with significantly different request arrival characteristics. Hence, in the second step, we analyze the Poisson quality of ctemp
                           . It is checked whether there exist significant deviations between the number of actual request arrivals in ctemp
                            over the assigned days and expected arrivals according to the Poisson distribution with rate parameter λ(ctemp
                           ). This is carried out by Pearson’s Chi-Square Goodness-of-Fit test (cf. Kvam & Vidakovic, 2007, p. 155 et seq.). Results indicate that a type I error of 
                              
                                 α
                                 =
                                 0.40
                              
                            efficiently identifies clusters which do not fulfill this requirement. Moreover, we check the postulate of Poisson processes that request arrivals occur independently of each other (cf. Ross, 2010, p. 313). Request arrival times are discretized minute-wise and uniformity of arrival is checked using the same fitting test. Results show that a type I error of 
                              
                                 α
                                 =
                                 0.20
                              
                            efficiently eliminates unsuitable clusters. After examining all possible clusters, the first phase of the clustering process is completed.

Clusters that fulfill all quality criteria form the set of valid clusters C. After generating all valid clusters, phase II starts. This phase selects non-overlapping clusters from valid ones. For this purpose, an MIP is defined. Let set SC
                            ⊆ S define all segments which are assigned to clusters of the set C. A binary parameter cis
                            is set to 1 if cluster i ∈ C contains segment s ∈ SC
                           . Parameter 
                              
                                 c
                                 i
                                 
                                    s
                                    t
                                    a
                                    r
                                    t
                                 
                              
                            denotes the temporal level at which cluster i starts. The binary decision variable xi
                            is 1 if cluster i ∈ C is selected, 0 otherwise. Parameter M is a big number.

                              
                                 (1)
                                 
                                    
                                       max
                                       z
                                       =
                                       
                                          ∑
                                          
                                             i
                                             ∈
                                             C
                                          
                                       
                                       
                                          (
                                          M
                                          ·
                                          
                                             x
                                             i
                                          
                                          −
                                          
                                             c
                                             i
                                             
                                                s
                                                t
                                                a
                                                r
                                                t
                                             
                                          
                                          ·
                                          
                                             x
                                             i
                                          
                                          )
                                       
                                       
                                       s.t.
                                    
                                 
                              
                           
                           
                              
                                 (2)
                                 
                                    
                                       ∀
                                       s
                                       ∈
                                       
                                          S
                                          C
                                       
                                       :
                                       
                                          ∑
                                          
                                             i
                                             ∈
                                             C
                                          
                                       
                                       
                                          c
                                          
                                             i
                                             s
                                          
                                       
                                       ·
                                       
                                          x
                                          i
                                       
                                       ≤
                                       1
                                    
                                 
                              
                           
                           
                              
                                 (3)
                                 
                                    
                                       
                                          ∑
                                          
                                             i
                                             ∈
                                             C
                                          
                                       
                                       
                                          x
                                          i
                                       
                                       ≤
                                       
                                          C
                                          
                                             m
                                             a
                                             x
                                          
                                       
                                    
                                 
                              
                           
                        

The primary goal of the objective function (1) is the maximization of the number of selected clusters. The secondary goal is to start clusters at the earliest point in time in order to support an earlier service of expected requests. Constraints (2) ensure that all segments are assigned to one selected cluster at most. Constraint (3) imposes a theoretical upper bound on the number of selected clusters. This restriction was defined since it allows the MIP solver to generate tighter bounds. For the computational experiments, this bound is set to 
                              
                                 
                                    C
                                    
                                       m
                                       a
                                       x
                                    
                                 
                                 =
                                 
                                    ⌊
                                    
                                       
                                          
                                             ∑
                                             
                                                s
                                                ∈
                                                
                                                   S
                                                   C
                                                
                                             
                                          
                                          λ
                                          
                                             (
                                             
                                                p
                                                s
                                             
                                             )
                                          
                                       
                                       
                                          D
                                          
                                             C
                                             
                                                m
                                                i
                                                n
                                                λ
                                             
                                          
                                       
                                    
                                    ⌋
                                 
                              
                           .

After solving the MIP, a dummy customer is added for each selected cluster cs
                           . Parameters of the dummy customer are derived as follows. Let PSλ
                           (x) denote the probability mass function (PMF) of the Poisson distribution with parameter λ. Dummy customer i belonging to cs
                            gets the weight 
                              
                                 
                                    w
                                    i
                                 
                                 =
                                 P
                                 
                                    (
                                    X
                                    ≥
                                    1
                                    )
                                 
                                 =
                                 1
                                 −
                                 P
                                 
                                    S
                                    
                                       λ
                                       (
                                       
                                          c
                                          s
                                       
                                       )
                                    
                                 
                                 
                                    (
                                    0
                                    )
                                 
                              
                           . Its service time is set to the amount of time that a vehicle is expected to spend in cs
                            and is defined by 
                              
                                 
                                    s
                                    i
                                 
                                 =
                                 
                                    (
                                    
                                       R
                                       
                                          s
                                          t
                                       
                                    
                                    +
                                    
                                       c
                                       
                                          s
                                       
                                       
                                          a
                                          v
                                          g
                                          T
                                          T
                                       
                                    
                                    )
                                 
                                 ·
                                 λ
                                 
                                    (
                                    
                                       c
                                       s
                                    
                                    )
                                 
                              
                           .

As soon as time τ reaches the beginning of cluster ci
                              , the parameter values of dummy customer i change since its remaining rate parameter decreases with τ. For a static problem instance generated at τ, the rate value is updated to 
                                 
                                    λ
                                    (
                                    
                                       c
                                       i
                                    
                                    ,
                                    
                                       τ
                                       +
                                    
                                    )
                                 
                               with 
                                 
                                    
                                       τ
                                       +
                                    
                                    =
                                    τ
                                    +
                                    
                                       t
                                       a
                                    
                                 
                              . This describes the remaining rate parameter of ci
                               at the end of the anticipation horizon of the considered static problem. Clearly, for each cluster with 
                                 
                                    
                                       c
                                       i
                                       
                                          s
                                          t
                                          a
                                          r
                                          t
                                       
                                    
                                    ≥
                                    
                                       τ
                                       +
                                    
                                    ,
                                 
                               it holds that 
                                 
                                    λ
                                    
                                       (
                                       
                                          c
                                          i
                                       
                                       ,
                                       
                                          τ
                                          +
                                       
                                       )
                                    
                                    =
                                    λ
                                    
                                       (
                                       
                                          c
                                          i
                                       
                                       )
                                    
                                 
                              . For cluster ci
                               the start time of its remaining part at 
                                 
                                    τ
                                    +
                                 
                               is defined as 
                                 
                                    
                                       c
                                       i
                                       
                                          s
                                          t
                                          a
                                          r
                                          t
                                       
                                    
                                    
                                       (
                                       
                                          τ
                                          +
                                       
                                       )
                                    
                                    =
                                    max
                                    
                                       (
                                       
                                          c
                                          i
                                          
                                             s
                                             t
                                             a
                                             r
                                             t
                                          
                                       
                                       ,
                                       
                                          τ
                                          +
                                       
                                       )
                                    
                                 
                              . Based on 
                                 
                                    
                                       τ
                                       +
                                    
                                    ,
                                 
                               parameters of dummy customer i are updated. The time window start ei
                               is set to the expected arrival time of the next request in cluster ci
                               assuming that at least one more request arrives in ci
                              . The service time of dummy customer i is updated to 
                                 
                                    
                                       s
                                       i
                                    
                                    
                                       (
                                       
                                          τ
                                          +
                                       
                                       )
                                    
                                    =
                                    
                                       (
                                       
                                          R
                                          
                                             s
                                             t
                                          
                                       
                                       +
                                       
                                          c
                                          i
                                          
                                             a
                                             v
                                             g
                                             T
                                             T
                                          
                                       
                                       )
                                    
                                    ·
                                    λ
                                    
                                       (
                                       
                                          c
                                          i
                                       
                                       ,
                                       
                                          τ
                                          +
                                       
                                       )
                                    
                                 
                              . Finally, wi
                               is set to the probability at time 
                                 
                                    τ
                                    +
                                 
                               that at least one more request arrives in cluster ci
                              , i.e., we define 
                                 
                                    
                                       w
                                       i
                                    
                                    
                                       (
                                       
                                          τ
                                          +
                                       
                                       )
                                    
                                    =
                                    P
                                    
                                       (
                                       X
                                       ≥
                                       1
                                       )
                                    
                                    =
                                    1
                                    −
                                    P
                                    
                                       S
                                       
                                          λ
                                          (
                                          
                                             c
                                             i
                                          
                                          ,
                                          
                                             τ
                                             +
                                          
                                          )
                                       
                                    
                                    
                                       (
                                       0
                                       )
                                    
                                 
                              . A dummy customer i is removed from 
                                 
                                    R
                                    
                                       
                                          τ
                                          +
                                       
                                    
                                    U
                                 
                               when it becomes unlikely that further requests will arrive in ci
                              . This removal time point is reached when 
                                 
                                    λ
                                    (
                                    
                                       c
                                       i
                                    
                                    ,
                                    
                                       τ
                                       +
                                    
                                    )
                                 
                               becomes smaller than DCλrem
                              . Note that this time point can be calculated for every cluster during the generation of stochastic knowledge before the execution of the routing process.

If a vehicle has currently no further requests, it waits at its current position. If a dummy customer i is scheduled as the next request, a vehicle waits at its current position as long as the remaining time to 
                                 
                                    c
                                    i
                                    
                                       s
                                       t
                                       a
                                       r
                                       t
                                    
                                 
                               is greater than the travel time required to reach dummy customer i. This is done to avoid situations where vehicles arrive too early in remote areas and are, therefore, not available to service pending requests in more central regions.

As mentioned above, stochastic knowledge that is integrated during the execution of the routing process is used to pro-actively guide vehicles into regions where request arrivals are likely in the near future. This knowledge is derived from the past days that are assigned to profiles currently assumed to be suitable for modeling the current day. In order to allow a self-adaptation of the stochastic knowledge during the execution of the routing process, a profile acceptance rule is iteratively applied. In order to gain insight into the arrival pattern of requests that are known up to a given time point of the current day, arrived requests are aggregated into time slices with a length of m minutes each. This time slice length is equal to the one during the profile identification process so that a comparison between the known part of the current day and the previously identified profiles is possible.

For each profile j ∈ P, we define the set of past request days that were assigned to profile j during the profile identification phase as Dj
                        . Using Dj
                        , we denote for profile j the maximum distance of an assigned day up to a time period t by 
                           
                              
                                 Δ
                                 
                                    t
                                    j
                                 
                                 
                                    m
                                    a
                                    x
                                 
                              
                              =
                              
                                 max
                                 
                                    i
                                    ∈
                                    
                                       D
                                       j
                                    
                                 
                              
                              
                                 Δ
                                 t
                              
                              
                                 (
                                 i
                                 ,
                                 j
                                 )
                              
                              ,
                           
                         with Δt
                        (i, j) defining the sum of distance measure values for the periods 1 to t. Furthermore, for each profile j ∈ P, the distance Δt
                        (dc, j) is calculated for the current day dc
                         up to the current time. Each profile j fulfilling 
                           
                              Δ
                              
                                 (
                                 
                                    d
                                    c
                                 
                                 ,
                                 j
                                 )
                              
                              <
                              
                                 Δ
                                 
                                    t
                                    j
                                 
                                 
                                    m
                                    a
                                    x
                                 
                              
                              ·
                              1.2
                           
                         is accepted as a reasonable match for the current day. Note that we use a factor of 1.2 to allow for some additional acceptance tolerance. By evaluating all profiles with this rule, a subset of them is determined forming the updated active profiles. Afterwards, dummy customers that were generated for this subset of active profiles are integrated into the transportation process. Clearly, only dummy customers with a removal time point in the future are integrated. This procedure denoted as standard profile acceptance rule is repeated every m minutes. With each modification of the active profiles, integrated dummy customers are adapted accordingly.

As more information about request arrival characteristics becomes available during the day, it is likely that the subset of accepted profiles is large at the beginning of the day and can be significantly reduced over time. However, if many profiles are accepted at the beginning of the day, the quality of the stochastic knowledge is limited. Therefore, only few dummy customers can be derived with sufficient stochastic reliability. Although the number of dummy customers is likely to increase during the day if a smaller subset of suitable profiles is identified, a quick integration of many dummy customers is likely to increase the efficiency of the stochastic knowledge. In order to support an earlier identification of suitable profiles, an extended profile acceptance rule is proposed. In contrast to the standard rule, which evaluates each profile independently, the extended profile acceptance rule assesses all profiles based on the profile that matches the current day best. With 
                                 
                                    t
                                    ∈
                                    {
                                    1
                                    ,
                                    …
                                    ,
                                    T
                                    }
                                 
                               denoting the current time period during the day, the extended acceptance rule is defined as follows:

                                 
                                    1.
                                    Identify profile j
                                       * with 
                                          
                                             
                                                Δ
                                                t
                                             
                                             
                                                (
                                                
                                                   d
                                                   c
                                                
                                                ,
                                                
                                                   j
                                                   *
                                                
                                                )
                                             
                                             =
                                             
                                                min
                                                
                                                   j
                                                   ∈
                                                   P
                                                
                                             
                                             
                                                Δ
                                                t
                                             
                                             
                                                (
                                                
                                                   d
                                                   c
                                                
                                                ,
                                                j
                                                )
                                             
                                          
                                       .

Calculate 
                                          
                                             
                                                p
                                                t
                                             
                                             =
                                             
                                                
                                                   
                                                      Δ
                                                      t
                                                   
                                                   
                                                      (
                                                      
                                                         d
                                                         c
                                                      
                                                      ,
                                                      
                                                         j
                                                         *
                                                      
                                                      )
                                                   
                                                
                                                
                                                   Δ
                                                   
                                                      t
                                                      
                                                         j
                                                         *
                                                      
                                                   
                                                   
                                                      m
                                                      a
                                                      x
                                                   
                                                
                                             
                                          
                                       .

Accept the subset of profiles 
                                          
                                             {
                                             j
                                             ∈
                                             P
                                             |
                                             Δ
                                             
                                                (
                                                
                                                   d
                                                   c
                                                
                                                ,
                                                j
                                                )
                                             
                                             <
                                             
                                                (
                                                1.5
                                                −
                                                0.05
                                                ·
                                                t
                                                )
                                             
                                             ·
                                             
                                                p
                                                t
                                             
                                             ·
                                             
                                                Δ
                                                
                                                   t
                                                   j
                                                
                                                
                                                   m
                                                   a
                                                   x
                                                
                                             
                                             }
                                          
                                       .

If dc
                               matches a profile well, pt
                               will be small thus further restricting other profiles. Otherwise, pt
                               is large so that the rule also accepts other profiles that might match the current day. Hence, if a profile matches the current day, the acceptance requirements for the other profiles increase significantly. The rule also reduces the acceptance tolerance as the day unfolds. This is due to the fact that with more available data more reliable evaluations can be performed. Preliminary tests have shown that using 
                                 
                                    1.5
                                    −
                                    0.05
                                    ·
                                    t
                                 
                               allows for a reasonable trade-off between profile acceptance tolerance at the beginning of the day and restricting this tolerance when more information about request arrival characteristics becomes available during the day.

In order to enable a direct comparison with the single profile approach proposed by Ferrucci et al. (2013), we apply the same Tabu Search (see Glover, 1989; Glover & Laguna, 1998) procedure for tour plan improvement. During each anticipation horizon starting at τ, this procedure improves the static problem instance for 
                        
                           
                              t
                              a
                           
                           −
                           
                              t
                              τ
                              
                                 c
                                 a
                                 l
                                 c
                              
                           
                        
                      time units with 
                        
                           t
                           τ
                           
                              c
                              a
                              l
                              c
                           
                        
                      denoting the time period required for pre-simulation activities in the anticipation horizon that starts at τ (see Section 3). As shown by various studies (Bock, 2010; Ferrucci et al., 2013; Gendreau et al., 1999; Ichoua et al., 2000), repeatedly applying sophisticated metaheuristics during the execution of the transportation process allows for a fast plan adaptation in order to efficiently handle incoming requests.

The implemented Tabu Search procedure switches between different stages that control the applied neighborhood operators in order to intensify or diversify the search process. If a defined number of iterations sn
                      has been performed on stage n without finding a new best solution, the search process continues on the next stage with a different neighborhood operator. In the proposed solution method, we apply five stages. We set 
                        
                           
                              s
                              1
                           
                           =
                           1
                           ,
                           
                              s
                              2
                           
                           =
                           
                              s
                              3
                           
                           =
                           10
                           ,
                           
                              s
                              4
                           
                           =
                           1000
                           ,
                           
                              s
                              5
                           
                           =
                           5
                        
                     . Defining an appropriate neighborhood operator for each stage allows for an efficient integration of intensification and diversification phases during the search process. If a new best solution is found, the search returns to the first stage. This is also performed if the fifth stage has been completed. Neighborhood operators on lower stages intensify the search in the vicinity of the current solution, whereas higher stages apply more diversifying operators. This setting enables the solution method to automatically adjust the search strategy according to characteristics of the recently examined solutions. At each stage, one of the following neighborhood operators is applied:


                     Stage 1: Within Tour Insertion (WTI). WTI removes a single request and reinserts it at its best position on the same vehicle tour. If the current solution cannot be improved by WTI for any request, no changes are performed on the current solution and the search process is directly continued at the next stage. This operator yields a high intensification of the search process in direct vicinity of a currently considered solution.


                     Stage 2: Relocate (REL). REL works similarly to WTI except that REL evaluates all positions for request reinsertions on the vehicle tours other than the one of the selected request. All requests are evaluated and the best found non-tabu move is implemented.


                     Stage 3: MultiRelocate (MREL). MREL removes n requests where n is randomly drawn out of the interval [2, 3]. These requests are successively reinserted at their least cost positions by considering all possible reinsertion permutations. The n requests are randomly chosen out of the 3 · n requests with the highest objective function value contribution. In MREL, the entire procedure is repeated c times (c is randomly chosen out of the interval [10, 20]). The best non-tabu move is executed.


                     Stage 4: Large Neighborhood Search (LNS). LNS reinserts n requests in the sequence of non-increasing cost contributions where n is set to 
                        
                           max
                           (
                           2
                           ,
                           m
                           ·
                           |
                           
                              R
                              
                                 τ
                                 +
                              
                              U
                           
                           |
                           )
                        
                      and m is randomly drawn out of the interval [0, 0.75]. The n requests are randomly chosen out of the 
                        
                           min
                           (
                           |
                           
                              R
                              
                                 τ
                                 +
                              
                              U
                           
                           |
                           ,
                           n
                           ·
                           1.5
                           )
                        
                      requests with the highest cost contribution. In each iteration, this is repeated c times where c is randomly chosen out of the interval [1, 2]. The best non-tabu move is implemented.


                     Stage 5: Exchange Between Tours (XBT). XBT exchanges two requests of two tours and the best non-tabu move is performed.

A fingerprint of the resulting tour plan is applied as the tabu-active attribute. It is obtained by combining two quickly computable checksums CRC-32 (cf. Moon, 2005, p. 147 et seq.) and Adler-32 (cf. Deutsch & Gailly, 1996). Two tour plans are identified as identical if both checksums are equal. Since preliminary computational experiments show that this allows a reliable identification of tour plans, a tabu state is never revoked.

The initial tour plan is constructed at the beginning of the day by an iterative least cost insertion of all real requests known at this point in time followed by the dummy customers. Dummy customer requests are integrated in sequence of non-decreasing time window start times.

In this section we analyze the performance of the proposed approach. Since the applied real-time approach requires quick generation of suitable routing plans during the anticipation horizons, we evaluated the performance of the applied Tabu Search procedure by solving various static problem instances under restrictive time limits. By comparing the attained results with lower bound values that were generated by the exact approach of Westphal and Krumke (2008), this evaluation underscores the fact that the applied Tabu Search method yields near-optimal or even optimal solutions for all tested instances within 10 seconds. In what follows, we denote the new multiple profile approach as PROACTIVE10-MP and the former approach that uses a single profile as PROACTIVE10-SP. Both approaches utilize the Tabu Search procedure for 10 seconds whenever new requests have arrived in the previous anticipation horizon.

All experiments are conducted on the road network of Dortmund, a medium-sized city in Germany, using a developed discrete-event based simulator and fleet sizes of 8, 10, and 12 vehicles. The region is 22.5 km × 20 km = 450 km2 big. Before the transportation process starts, the initial tour plan is optimized by the Tabu Search approach for 120 seconds. All approaches are implemented in Delphi and the experiments were run on Pentium D 2.8 GHz CPU computers. Suitable dummy customer parameter values were derived in preliminary tests. The extension of each segment is set to 
                           
                              D
                              
                                 C
                                 
                                    s
                                    e
                                 
                              
                              ×
                              D
                              
                                 C
                                 
                                    t
                                    e
                                 
                              
                              
                                 =
                                 (
                                 2.5
                              
                           
                         km x 2.5 km) × 1 minute, DCmse
                         is defined by 2 by 2 segments, and DCmte
                         amounts to 15 minutes (i.e., 15 segments). We set DCradiusTT
                         to 300 seconds and DCmaxAvgTT
                         to 650 seconds. For DCminλ
                        , two values are evaluated: DCminλ
                         ∈ {1.5, 2.0} so that the minimum occurrence probability of at least one request in a cluster amounts to 77.69 percent or 86.47 percent, respectively. By defining 
                           
                              D
                              
                                 C
                                 
                                    λ
                                    r
                                    e
                                    m
                                 
                              
                              =
                              0.5
                              ,
                           
                         dummy customers are removed when the arrival probability of at least one more request becomes less than 39.45 percent.

The structure of all experiments is derived from a real-world application that deals with the subsequent delivery process of newspapers. Using characteristics of this application, each generated pattern of request arrivals consists of 150 requests per day on average that arrive between 6:45 am and 11 am. We divide the service area into 
                           
                              V
                              =
                              18
                           
                         disjunctive squared regions of equal size (denoted as 
                           
                              
                                 r
                                 1
                              
                              ,
                              …
                              ,
                              
                                 r
                                 V
                              
                           
                        ). Note that with regard to size and alignment, these regions are independent of the regions used in the profile identification process in Section 4.1.1. The time period from 6:45 am to 11 am is divided into 
                           
                              W
                              =
                              5
                           
                         time slices 
                           
                              
                                 t
                                 1
                              
                              ,
                              …
                              ,
                              
                                 t
                                 W
                              
                           
                         with a duration of 75, 60, 30, 60, and 30 minutes. Parameter λ(ri, tj
                        ) determines the request arrival rate of a time-space Poisson process in region ri
                         in time slice tj
                        . For time interval tj
                        , the arrival time of the next request is determined using a Poisson process with rate parameter 
                           
                              λ
                              
                                 (
                                 
                                    t
                                    j
                                 
                                 )
                              
                              =
                              
                                 ∑
                                 
                                    i
                                    =
                                    1
                                 
                                 V
                              
                              λ
                              
                                 (
                                 
                                    r
                                    i
                                 
                                 ,
                                 
                                    t
                                    j
                                 
                                 )
                              
                           
                        . The arrival region is determined according to the probability values 
                           
                              p
                              
                                 (
                                 
                                    r
                                    i
                                 
                                 ,
                                 
                                    t
                                    j
                                 
                                 )
                              
                              =
                              λ
                              
                                 (
                                 
                                    r
                                    i
                                 
                                 ,
                                 
                                    t
                                    j
                                 
                                 )
                              
                              /
                              λ
                              
                                 (
                                 
                                    t
                                    j
                                 
                                 )
                              
                           
                        . In this region the location of the new request is uniformly drawn according to time-space Poisson processes. In accordance with the considered application, vehicles start at the depot at 7 am so that over 90 percent of all requests occur dynamically during the day.

In order to evaluate the performance of PROACTIVE10-MP under different conditions, we evaluate three test scenarios comprising 2, 3, and 4 defined patterns of request arrivals denoted as 2p, 3p, and 4p in what follows. For each pattern we choose request arrival probabilities such that the regions with the most requests significantly change throughout the day. As previous studies also suggest, applying derived stochastic knowledge about future requests arrivals in such scenarios is promising. The four patterns differ from each other by individual request arrival probabilities in the 18 squared regions 
                           
                              
                                 r
                                 1
                              
                              ,
                              …
                              ,
                              
                                 r
                                 V
                              
                           
                        . However, note that the expected request arrival rate in each time slice j ∈ W is identical in all patterns. Since the observed number of request arrivals in each time slice is comparable in all patterns, reliably identifying the actual pattern during the day becomes even more difficult.

We generate 60 days for each of the four simulated patterns 
                           
                              
                                 p
                                 1
                              
                              …
                              
                                 p
                                 4
                              
                           
                        . Test scenario 2p contains the days of p
                        1 and p
                        2, scenario 3p days of p
                        1, p
                        2, and p
                        3, and scenario 4p contains the days of all four simulated patterns. Hence, the three scenarios contain 120, 180, and 240 days, respectively. Note that these days are only used in the forecasting process in order to identify profiles and to generate the corresponding stochastic knowledge. In order to provide a realistic benchmark set for the proposed approaches, we perform the computational experiments on additional days generated by the same simulated patterns. Therefore, the computational study only contains days that are not included in the past request data used in the profile identification and forecasting process. For the test scenario 2p, we evaluate 40 additional test instances with 20 days of each pattern, the 3p scenario comprises 39 additional test instances (13 test instances of each pattern), and the 4p test scenario consists of 40 additional test instances with 10 test instances for each pattern. In order to group past days together in an offline step (thus identifying the profiles), we set 
                           
                              m
                              =
                              30
                           
                         minutes so that we obtain 
                           
                              T
                              =
                              8
                           
                         time periods from 7 to 11 am.

Since the actual number of patterns in many real-world applications is unknown, an interesting aspect is to investigate how the proposed approach performs when the number of assumed (and thus generated) profiles defined by k is different from the number of patterns actually present in the considered scenario. In order to evaluate the impact of choosing k lower or higher than the actual number of patterns on the solution quality, we conduct the experiments with values for k from 2 to 6 for each of the three test scenarios. As mentioned above, the k-means algorithm operates heuristically so that it may produce different profiles in multiple runs. For each profile generation setting we execute the k-means algorithm 1000 times and select the best found profile assignment with minimum total distance of days to assigned profiles. This is done in order to increase profile quality.

In what follows, we first evaluate the effects of the two proposed acceptance rules. Afterwards, we directly compare the performance of PROACTIVE10-MP with PROACTIVE10-SP in order to assess the impact of multiple profiles. Moreover, we compare the results of PROACTIVE10-MP with an omniscient variant that precisely knows the simulated pattern of the current day in advance. This variant directly integrates the correct stochastic knowledge that was generated using only past request data days that belong to the pattern of the current day.


                        Figs. 6
                         and 7
                         illustrate the impact of the extended profile acceptance rule (ER) on the profile identification performance in direct comparison with the standard profile acceptance rule (SR). Fig. 6 shows that ER reduces the number of accepted profiles much faster than SR. By applying ER, days with wrongly discarded profiles (containing days of the pattern actually present on the current day) only appear in the first two time intervals and due to iterative adaptation this number quickly reduces to zero. This allows for a fast and reliable identification of the actual profile that models the pattern of request arrivals of the considered day. As Fig. 7 reveals, a faster and more reliable identification of actual profiles results in a significantly increased number of generated dummy customers that can be integrated early into the transportation process. Fig. 7 also shows that increasing the number of assumed profiles k up to the actual number of patterns in the test scenario results in more dummy customers. This leads to the conclusion that the proposed approach can group the existing patterns efficiently into profiles if enough profiles are available. Another interesting result is that a further increase of k does not have negative effects on the number of generated dummy customers. Due to the fact that k is unknown in real-world applications, this robustness is of significant importance. Thus, ER considerably outperforms SR due to a fast generation of reliable stochastic knowledge in real-time. The superiority of applying ER instead of SR for identifying the actual pattern of the day is underscored by analyzing another result. As illustrated in Fig. 7, by applying SR, the number of generated dummy customers significantly increases if one more profile compared to the number of patterns actually present in the corresponding test scenario is used. A detailed analysis showed that the past request data contains a total of four days during which a few requests are expected to arrive in time period to
                         but they do not. Hence, these outlier days possess a large deviation of observed requests in to
                         which significantly increases their distance to the profile they are assigned to. Since all past request data days have to be assigned to the profiles, defining k as equal to the number of actual profiles leads to a significantly increased maximum distance 
                           
                              Δ
                              
                                 t
                                 j
                              
                              
                                 m
                                 a
                                 x
                              
                           
                         for a profile j that comprises outlier days. In such situations, SR becomes less precise since it accepts all profiles j with 
                           
                              Δ
                              
                                 (
                                 
                                    d
                                    c
                                 
                                 ,
                                 j
                                 )
                              
                              <
                              
                                 Δ
                                 
                                    t
                                    j
                                 
                                 
                                    m
                                    a
                                    x
                                 
                              
                              ·
                              1.2
                           
                        . As a consequence, profiles that do not match are still accepted for further time slices in case outlier days are assigned to a profile. However, by setting the number of profiles to 
                           
                              
                                 k
                                 *
                              
                              =
                              k
                              +
                              1
                              ,
                           
                         the profile identification approach assigns the four outlier days to this additional profile. This leads to a significantly smaller 
                           
                              Δ
                              
                                 t
                                 j
                              
                              
                                 m
                                 a
                                 x
                              
                           
                         value for the other identified 
                           
                              
                                 k
                                 *
                              
                              −
                              1
                           
                         profiles thus enabling SR to exclude profiles that poorly match the current day much faster. The fact that one more profile separates outlier days also reveals that the proposed profile identification approach is able to efficiently group days with a similar pattern. In this scenario, the separation of the outlier days compensates for the SR weakness of evaluating each profile individually with regard to the current day. Since SR neglects the fact that the current day matches another profile much better, profiles with a large maximum distance are kept unnecessarily long and hence may prevent the generation of suitable dummy customers. Instead, by using ER, this issue does not occur since ER considers the relative distance position within the best found profile. Thus, using ER, a day that matches one profile well enables quick rejection of other profiles that do not match.

More suitable dummy customers are preferred since we expect this to result in more stochastic knowledge and hence in a better solution quality. This assumption relies on the observation that more stochastic knowledge often enables a more reliable pro-active positioning of vehicles in request-likely areas thus allowing an earlier service of pending requests. In order to evaluate this assumption, we conduct a preliminary study using a fleet of 8 and 10 vehicles and directly compare the solution quality attained by two variants of PROACTIVE10-MP. PROACTIVE10-MP-SR applies SR, while ER is used in PROACTIVE10-MP-ER. According to the objective function (see Section 2), solutions are compared with regard to the number of late requests (primary objective) and variable customer inconvenience (secondary objective). When 8 vehicles are used, PROACTIVE10-MP-ER always reduces the total number of late requests and also reduces the number of instances with late requests in many conducted settings compared to PROACTIVE10-MP-SR. In the 10 and 12 vehicle scenarios, late requests are completely avoided by having more vehicles available.

By analyzing the results that are shown in Table 1
                        , it can be stated that PROACTIVE10-MP-ER outperforms PROACTIVE10-MP-SR for all tested scenarios. Except for the two profile scenario, the largest improvement rates are obtained if the number of assumed profiles k is equal to the number of actually simulated patterns. Compared to SR, ER attains in the 8 vehicle case improvements between 4.4 percent and 9.1 percent for linear2X and between 8 percent and 15.5 percent for the quadratic customer inconvenience function. In the 10 vehicle case, ER attains an average improvement of between 4.8 percent and more than 12 percent for linear2X and between 12.6 percent and 25 percent for the quadratic case. Due to the aforementioned effects of outlier days, these improvement rates often decrease by further increasing k. Moreover, the limited fleet size in the 8 vehicle scenario slightly reduces the positive impact of stochastic knowledge on the solution quality (and hence the effect of using ER instead of SR) since vehicles are more busy with newly arriving requests, making it less possible to pro-actively guide them to request-likely areas. However, ER still outperforms SR for all simulated settings considerably.

The results underscore our assumption that an increased number of suitable dummy customers allow for improving the solution quality. Due to these significant improvements attained by ER, we solely use PROACTIVE10-MP-ER in what follows.

In this section, we evaluate the impact of applying multiple profiles to the test scenarios compared to the application of a single profile. We directly compare the results of PROACTIVE10-MP and PROACTIVE10-SP with each other. Before evaluating the attained solution quality, we compare the number of dummy customers generated by both approaches.

As can be seen in Fig. 9, PROACTIVE10-MP generates significantly more dummy customers than PROACTIVE10-SP if the actual number of patterns in the test scenario increases. As mentioned in Section 4, in order to generate reliable stochastic knowledge, PROACTIVE10-SP checks whether request arrivals in potential clusters fulfill a specific Poisson quality. Since the generated patterns have significantly different request arrivals, request arrival characteristics of different patterns interfere with each other. Hence, only few request-likely areas fulfill the required Poisson quality so that PROACTIVE10-SP can only produce few high-quality dummy customers. This effect becomes stronger when more patterns exist in a test scenario. In contrast to this, PROACTIVE10-MP groups past days with a similar pattern into one profile. This removes interfering effects of different patterns and allows for deriving separate stochastic knowledge for each profile. It turned out that for PROACTIVE10-SP the number of generated dummy customers is very low for 
                           
                              D
                              
                                 C
                                 
                                    m
                                    i
                                    n
                                    λ
                                 
                              
                              =
                              1.5
                           
                         or 2.0. In order to generate a sufficient number of dummy customers also for PROACTIVE10-SP, we additionally evaluate a lower minimum quality value 
                           
                              D
                              
                                 C
                                 
                                    m
                                    i
                                    n
                                    λ
                                 
                              
                              =
                              1.0
                           
                        . This value requires a reduced minimum probability of at least 63.21 percent for a request arrival in order to generate a dummy customer. Preliminary results showed that PROACTIVE10-SP with 
                           
                              D
                              
                                 C
                                 
                                    m
                                    i
                                    n
                                    λ
                                 
                              
                              =
                              1.0
                           
                         always attains the best results out of the three evaluated settings so that we use dummy customers generated with this setting in what follows.


                        Table 2
                         illustrates the percentage of improvement attained by PROACTIVE10-MP compared to PROACTIVE10-SP with 
                           
                              D
                              
                                 C
                                 
                                    m
                                    i
                                    n
                                    λ
                                 
                              
                              =
                              1.0
                           
                        . The results show that PROACTIVE10-MP considerably outperforms PROACTIVE10-SP for all tested scenarios. In line with the results of Section 6.2, these improvements can be explained by considering that PROACTIVE10-MP derives more appropriate stochastic knowledge about future request arrivals which enables an improved pro-active utilization of vehicles. Hence, requests can be serviced earlier, leading to a higher solution quality. The advantage of using multiple profiles in PROACTIVE10-MP is best revealed by considering the significantly increased improvement rates for each number of actual patterns p in the corresponding test scenario while enlarging k from the minimum tested value 2 up to p. These improvements make clear that with each additional profile, PROACTIVE10-MP can better identify and group existing patterns into individual profiles. Thus, the number of derivable dummy customers increases considerably. This is also illustrated in Fig. 8
                        
                        . Moreover, increasing k beyond the actual number of patterns leads to comparable improvements in almost all cases. We conclude that PROACTIVE10-MP provides robust results. Since k is not given in real-world applications, this robustness allows an overestimation (within a reasonable range) of the number of assumed patterns compared to the actual number of existing patterns. By comparing the results of Table 2 with Fig. 8, there is some evidence that differences in the computational results, in scenarios where k is larger than the actual number of patterns, can be explained on the basis of the number of generated dummy customers. For example, in test instances with three patterns, choosing 
                           
                              k
                              =
                              5
                           
                         generates a higher number of dummy customers in the first time periods. This contributes to additional improvements. Nevertheless, it is reasonable for k not to be significantly higher than the actual number of patterns since higher k values lead to less days assigned to each identified profile which might again deteriorate robustness and derivable knowledge.

When a larger fleet size is used and vehicles are less utilized, further improvements can be attained by additionally integrating less reliable dummy customers. This can be observed from the fact that in these scenarios the best results were more often achieved using 
                           
                              D
                              
                                 C
                                 
                                    m
                                    i
                                    n
                                    λ
                                 
                              
                              =
                              1.5
                           
                         instead of 2.0. As a consequence, the derived stochastic knowledge has an increased impact on the overall performance of the routing processes. Hence, the proposed approaches that derive better stochastic knowledge by using multiple profiles outperform even more single profile approaches in scenarios with larger fleet sizes.

We analyze potential future improvements attainable by identifying the correct profile faster during the day, for example by further improving the acceptance rule. Alternatively, this also applies to applications in which a suitable profile can be determined in advance due to external influences on request arrival patterns which may depend on the weather, season, or day of the week. Note that also in such applications the approach contributes by initially identifying the profile and validating this choice during the day. For this purpose, we compare the results of PROACTIVE10-MP with an artificial omniscient variant PROACTIVE10-MP-A that reliably knows the actual profile in advance. Hence, PROACTIVE10-MP-A can directly integrate the best available stochastic knowledge since the approach derives this knowledge from the set of days that were created by the same pattern that was used to generate the current day. This analysis is based on the value of information defined by Mitrovic-Minic, Krishnamurti, and Laporte (2004). In order to measure the additional improvements attained if the correct profile can be instantly identified at the beginning of the day, we compare the results of PROACTIVE10-MP-A with the results that were attained by applying PROACTIVE10-MP with the correct k-value. In the 8 vehicle case, PROACTIVE10-MP-A always generates less late customers than PROACTIVE10-MP. As in the previous evaluation, no late customers occur in the 10 and 12 vehicle scenarios so that we only compare attained variable customer inconvenience in what follows.

The results in Table 3
                         reveal that in the 8 vehicle case with two patterns, the improvement attained by PROACTIVE10-MP-A is the lowest. This can be explained by the fact that PROACTIVE10-MP needs to only remove one profile, which is quickly achieved, in order to obtain stochastic knowledge that is identical with PROACTIVE10-MP-A. With larger fleet sizes the gap also becomes larger in the two pattern scenario. One explanation for this is that although the correct profile can still be identified reasonably fast (since only one profile needs to be removed), this time can be efficiently used by PROACTIVE10-MP-A. During this time, the available vehicles can be utilized based on the stochastic knowledge provided by the dummy customers that are integrated directly at the start when PROACTIVE10-MP-A is used. If the number of profiles increases, so does the time required to identify the correct profile. This increase in time is a result of the complexity involved in quickly excluding the additional profiles. This exclusion requires more request arrival information that can only be gathered after more requests have arrived. This is also illustrated in Fig. 10
                         where it can be seen that although the number of dummy customers generated for each scenario is comparable after some time periods, PROACTIVE10-MP requires more time to identify the actual profile. This results in less dummy customers integrated in the first time periods. This shows that further improvement of the acceptance rule as well as other parts of the approach, such as the profile identification approach, can additionally increase the attained solution quality.

The computational study reveals that the use of multiple profiles for deriving stochastic knowledge is promising if request arrivals follow different patterns in the considered application. In comparison to a variant that applies a single profile, significant improvements could be attained. Detailed analyses of the measured results show that the more patterns a considered application possesses the higher the improvements by applying multiple profiles if enough profiles are predetermined. In this case, generated stochastic knowledge makes it possible to separate days with different request arrival structures from each other. Thus, the different patterns are less likely to interfere with each other and future request arrivals can be forecasted more reliably. An advantage is that more dummy customers that match the actual request situation can be integrated into the tour plan.

The computational experiments also reveal that the number of generated profiles k does not need to exactly match the number of patterns actually present in the considered application as long as k is larger or equal to this number. In contrast, a smaller number results in mixing different patterns within one profile. This causes interfering effects within the profiles that significantly reduce the efficiency of the approach. On the other hand, before the transportation process is executed, the multiple profile approach has to generate the stochastic knowledge for 
                           
                              
                                 2
                                 k
                              
                              −
                              1
                           
                         combinations of profiles. Therefore, choosing k significantly above the number of actual existing patterns may lead to a substantially increased computational effort and less days per profile. For this reason, it is desirable to choose a value of k that is as small as possible though large enough to enable different pattern characteristics of the past request data to be grouped into separate profiles.

A practical application of the proposed multiple profiles approach requires a pragmatic way of defining a suitable value for k. For this purpose, we present the following procedure: We set 
                           
                              
                                 k
                                 ˜
                              
                              =
                              1
                           
                         and iteratively increase 
                           
                              k
                              ˜
                           
                         by 1 if any of the following two criteria does not apply:

                           
                              •
                              Criterion 1: Profile similarity. Let P be the set of profiles generated by applying k-means clustering with 
                                    
                                       k
                                       =
                                       
                                          k
                                          ˜
                                       
                                       +
                                       1
                                    
                                 . We calculate the minimum distance between two profiles as 
                                    
                                       
                                          Δ
                                          
                                             
                                                k
                                                ˜
                                             
                                             +
                                             1
                                          
                                          
                                             m
                                             i
                                             n
                                          
                                       
                                       =
                                       
                                          min
                                          
                                             i
                                             ,
                                             j
                                             ∈
                                             P
                                             ,
                                             i
                                             ≠
                                             j
                                          
                                       
                                       
                                          Δ
                                          (
                                          i
                                          ,
                                          j
                                          )
                                       
                                    
                                  and compare it with 
                                    
                                       Δ
                                       
                                          k
                                          ˜
                                       
                                       
                                          m
                                          i
                                          n
                                       
                                    
                                 . If 
                                    
                                       Δ
                                       
                                          
                                             k
                                             ˜
                                          
                                          +
                                          1
                                       
                                       
                                          m
                                          i
                                          n
                                       
                                    
                                  is significantly smaller than 
                                    
                                       
                                          Δ
                                          
                                             k
                                             ˜
                                          
                                          
                                             m
                                             i
                                             n
                                          
                                       
                                       ,
                                    
                                  this is a strong indicator that days previously assigned to one profile were split into two profiles without attaining additional insight. Moreover, we check whether the number of days that are assigned to profiles other than the two with minimal distance remains almost constant from 
                                    
                                       k
                                       ˜
                                    
                                  to 
                                    
                                       
                                          k
                                          ˜
                                       
                                       +
                                       1
                                    
                                 . If this additionally applies, we conclude that using 
                                    
                                       k
                                       ˜
                                    
                                  profiles is a suitable choice.

Criterion 2: Quality of stochastic knowledge. As observed in the computational results, the number of generated dummy customers is a strong indicator for the quality of the stochastic knowledge. Since each dummy customer has to fulfill defined quality requirements, more dummy customers indicate that days assigned to a profile are likely to have similar request arrival characteristics. This hints at a good day-to-profile assignment. As a consequence, if 
                                    
                                       
                                          k
                                          ˜
                                       
                                       +
                                       1
                                    
                                  does not lead to a larger number of generated dummy customers in any time slice, k seems to be a good fit. An illustrated comparison of different values for k according to the number of generated dummy customers is depicted in Fig. 8.

In order to avoid myopic decisions, these rules can be slightly extended by additionally checking values of k beyond the identified value 
                           
                              k
                              ˜
                           
                        . In the computational results for instance, this rule extension could be useful in identifying 
                           
                              k
                              =
                              5
                           
                         as the best setting for the three pattern test scenario 3p (see Table 2).

Furthermore, for a real-world application recent days have to be integrated into the existing stochastic knowledge so that identified profiles have to be updated regularly. One possibility is to re-run the profile identification process daily. Alternatively, identified profiles are updated only after a predetermined time period has elapsed or if recent days have significant distances to existing profiles. If the latter does not apply, recent days are directly inserted into one of the existing profiles. This reduces computational effort since only the stochastic knowledge of profile combinations containing the changed profiles needs to be updated.

This paper introduces and validates a new pro-active real-time routing approach that is able to identify different patterns in past request data in order to derive useful stochastic knowledge about future request arrivals. By grouping similar days into profiles during an offline step, interfering effects of different patterns that may reduce reliable request forecasts can be eliminated. For all possible combinations of identified profiles suitable dummy customers are generated in order to pro-actively guide vehicles into request-likely areas. During the day, request arrivals are repeatedly analyzed in real-time in order to decide which profile combination is suitable for mapping the request arrival structure of the ongoing day. Depending on this combination, corresponding stochastic knowledge in form of generated dummy customers is integrated. By repeating the analysis of request arrival characteristics in short time intervals, stochastic knowledge is often adapted thus integrating only dummy customers that are likely to fit the current day. Since the number of assumed profiles k has to be generated beforehand, practical ways to determine k are proposed. In doing so, profile identification and stochastic knowledge generation can be efficiently supported so that the approach can be applied to many real-world applications.

Computational results show that by using multiple profiles the approach is able to significantly improve the solution quality compared to a former variant that uses a single profile. The multiple profile approach can attain significant improvements since the single profile variant cannot identify individual request arrival characteristics of different patterns. This is underscored by the fact that attained improvements become more significant when more patterns exist in the considered application. The performance of the multiple profiles approach depends on fast identification of the profiles that actually fit the pattern of the current day. For this purpose, two acceptance rules are designed and evaluated by computational experiments. The evaluation of an omniscient variant shows that additional improvements can be attained if the actual profile is more quickly determined, for example by an improved profile acceptance rule or if external observable influences that determine the actual profile can be revealed.

@&#FUTURE WORK@&#

Since the attained results are promising, there are various possibilities for future research. One avenue for future research is related to improvements of the profile identification process. For example, the detection of outlier days in the past data can be extended. In doing so, days with request characteristics that occur only once in the data can be filtered out before the profile identification process starts. Another direction of research deals with developing alternative real-time rules for faster or more reliable profile acceptance. For this purpose, additional request characteristics can be integrated. For example, detecting and considering seasonal trends with regard to the number of request arrivals in the past data can be used. This will lead to better assignment of days to profiles even when request arrival rates change over time. This can further improve the quality of the derived stochastic knowledge. Another avenue for future research deals with the integration of geographical information that is available in the road network into the process of generating stochastic knowledge. Specifically, an adequate handling of natural barriers (e.g., rivers or channels) requires future extension of the segment and cluster generation process which can increase the applicability of the approach in geographical areas with such characteristics. Moreover, the approach can be extended to other types of real-time routing problems, such as dynamic pickup and delivery problems.

@&#REFERENCES@&#

