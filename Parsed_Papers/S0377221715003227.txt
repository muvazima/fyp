@&#MAIN-TITLE@&#A biased random-key genetic algorithm for the unequal area facility layout problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A BRKGA for the unequal area facility layout problem is presented.


                        
                        
                           
                           A novel facility placement procedure is developed.


                        
                        
                           
                           A hybrid BRKGA and LP is used to solve the constrained problem.


                        
                        
                           
                           The approach improved the best known solution values for 19 literature datasets.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Facilities planning and design

Facility layout

Biased random-key genetic algorithms

Random-keys

@&#ABSTRACT@&#


               
               
                  This paper presents a biased random-key genetic algorithm (BRKGA) for the unequal area facility layout problem (UA-FLP) where a set of rectangular facilities with given area requirements has to be placed, without overlapping, on a rectangular floor space. The objective is to find the location and the dimensions of the facilities such that the sum of the weighted distances between the centroids of the facilities is minimized. A hybrid approach combining a BRKGA, to determine the order of placement and the dimensions of each facility, a novel placement strategy, to position each facility, and a linear programming model, to fine-tune the solutions, is developed. The proposed approach is tested on 100 random datasets and 28 of benchmark datasets taken from the literature and compared with 21 other benchmark approaches. The quality of the approach was validated by the improvement of the best known solutions for 19 of the 28 extensively studied benchmark datasets.
               
            

@&#INTRODUCTION@&#

The facility layout design problem (FLP) is a challenging non-linear combinatorial optimization problem encountered in many service and manufacturing organizations. The problem has been extensively studied in the literature and good reviews can be found in Kusiak and Heragu (1987) and Meller and Gau (1996).

The variant of the FLP we focus on in this paper was originally formulated by Armour and Buffa (1963) and involves determining the most cost-effective arrangement of a given number of rectangular facilities with unequal area requirements within a given rectangular floor space. This problem is denoted as UA-FLP. The objective of the problem is to minimize the cost associated with the interactions between facilities (the cost of material-handling flows). This cost is commonly represented by the sum of the products (over all facility pairs) of the weighted rectilinear distance and the material-handling flow between the centroids. The constraints of the problem include facility area requirements and shape restrictions, as well as assuring that the facilities do not overlap and are located within the boundary of the space floor.

The UA-FLP is NP-hard since it is a generalization of the quadratic assignment problem (QAP), where the optimization is carried over a finite set of possible facility locations. The QAP was shown to be NP-hard by Sahni and Gonzalez (1976). Various methods and procedures have been proposed to solve the FLP and can be classified into:

                        
                           •
                           
                              Exact procedures - Montreuil (1991) proposed one of the first MIP formulations of the FLP on the continuous plane. The model includes disjunctive constraints to prevent facility overlaps and bounded perimeter constraints to enforce specified facility area and shape requirements. The largest problem instance solved optimally by Montreuil’s original formulation had six facilities. Meller, Narayanan, and Vance (1998) used valid inequalities to tighten Montreuil’s formulation and were able to optimally solve problems with up to eight facilities. Sherali, Fraticelli, and Meller (2003) used a polyhedral outer approximation to the facility area to improve the model of Meller et al. (1998) and solved a nine-facility problem optimally. Castillo and Westerlund (2005) developed an ε-accurate approximation. However, the largest problem solved had only nine facilities. By reformulating the FLP with the sequence-pair representation of Murata, Fujiyoshi, Nakatake, and Kajitani (1996), Meller, Chen, and Sherali (2007) were able to solve problems with up to 11 facilities. Konak, Kulturel-Konak, Norman, and Smith (2006) modeled the facility area constraints exactly using a set of linear constraints derived from the structure of the flexible bay structure representation. They report solving problems having up to 14 facilities. Banerjee, Montreuil, Moodie, and Kashyap (1992), Montreuil, Venkatadri, and Ratliff (1993), and Banerjee, Zhou, and Montreuil (1997) used design skeletons to reduce the complexity of MIP formulations for the FLP. Lacksonen (1997) fixed the orientations of obvious facility pairs using a pre-processing heuristic.


                              Heuristics and meta-heuristics – Tam and Li (1991) proposed a hierarchical approach that employs a divide-and-conquer strategy consisting of three phases: (1) cluster analysis, (2) initial layout, and (3) layout refinement. The cluster analysis generates a hierarchical structure of the layout. The second phase produces an initial layout of each cluster which is subsequently refined in the third phase. Langevin, Montreuil, and Riopel (1994) developed a heuristic approach based on the MIP model of Montreuil (1991) to solve spine layout problems. Kado (1996) developed six types of genetic algorithms using a slicing-tree structure representation. Garces-Perez, Schoenefeld, and Wainwright (1996) proposed a multi-purpose genetic programming kernel to generate slicing trees that are converted into candidate solutions. Schnecke and Vornberger (1997) introduced a genetic algorithm with a tree-structured genotype representation and hybrid problem-specific operators. Dunker, Radons, and Westkämper (2003) developed a coevolutionary approach that improved mutation and crossover operators and clustered the facilities into groups. Scholz, Petrick, and Domschke (2009) proposed a tabu search algorithm with a slicing-tree representation and incorporated a bounding curve for solving fixed and flexible facilities in UA-FLPs. Their tabu search incorporated four types of neighborhood moves to find better solutions. Komarudin and Wong (2010) proposed an ant system to solve the UA-FLP using a slicing-tree representation and several types of local search to improve its search performance. Wong and Komarudin (2010) developed an ant system algorithm for solving UA-FLPs using an improved flexible bay structure representation called modified-FBS (mFBS). McKendall Jr and Hakobyan (2010) introduced an approach which uses a boundary search construction technique that places facilities along the boundaries of already placed facilities. The solution is improved using a tabu search. Kulturel-Konak and Konak (2011b) use an ant colony optimization approach which uses a flexible bay structure representation. Kulturel-Konak and Konak (2011a) produced a hybrid particle swarm optimization and local search approach using a relaxed flexible bay structure (RFBS). Kulturel-Konak and Konak (2014) proposed a hybrid simulated annealing and MIP algorithm for the cyclic facility layout problem which can be applied to various facility layout problems including the UA-FLP. A large-scale hybrid simulated annealing algorithm (LS-HSA) is proposed to solve the formulated problem and shown to be effective and versatile as it can be applied to various facility layout problems.


                              Matheuristics – Gau and Meller (1999) proposed an algorithm that iterates between a genetic algorithm with a slicing-tree representation and a mixed-integer program with a subset of the binary variables set via the genetic algorithm. Montreuil, Brotherton, Ouazzani, and Nourelfath (2004) put together an algorithm based on ant colony optimization (ACO) and the zone-based MIP (Montreuil, Brotherton, & Marcotte, 2002) where the ACO-based heuristic searches for assignments of facilities to zones, and then the zone-based MIP is used to determine the detailed layout, including the input/output points of the facilities. Liu and Meller (2007) proposed a GA combining the sequence-pair representation (Murata et al., 1996) with the MIP model of Sherali et al. (2003). For a given sequence-pair, the corresponding layout is determined in this hybrid approach using the linear programming (LP) relaxation of the MIP model. Bozer and Wang (2012) introduced a hybrid approach based on a new representation called the graph-pair representation. The graph-pair representation encodes the relative locations of the facilities and the shape and a uses an LP to determine the exact location of each facility. A simulated annealing algorithm is used to search for new layouts based on the graph-pair representation. Recently, Kulturel-Konak and Konak (2013) proposed a hybrid genetic algorithm and linear programming approach to solve the UA-FLP which uses a new encoding scheme, called location/shape and which represents the relative facility positions based on the centroids and orientations of the facilities. After the relative facilities positions are set by the GA, the actual facility locations and shapes are determined by solving an LP problem.

Our contribution to solve the UA-FLP is a matheuristic which consists of a biased random-key genetic algorithm (BRKGA) with a decoder which combines a novel placement strategy and a linear programming model to fine-tune the solutions.

The remainder of the paper is organized as follows. Section 2 presents a formal model of the UA-FLP. Section 3 introduces the new approach, describing the BRKGA in detail, the novel placement strategy, and the fitness function. Finally, in Section 4, we report on computational experiments, and in Section 5 we make concluding remarks.

Let N be the number of rectangular facilities of unequal areas to be placed, without any overlap, on a rectangular floor space with dimensions (W, H) along the X- and Y-axes, respectively. Each facility i = 1, …, N is defined by its dimensions along the horizontal and vertical axis (wi, hi
                     ), its area Ai
                      = wi
                      × hi
                     , and the maximum aspect ratio, R
                     max, which due to practical reasons imposes the maximum permissible ratio between its longest and shortest dimensions, i.e., R
                     max ≥ max{wi, hi
                     }/min{wi, hi
                     } ≥ 1.

A layout is defined by the coordinates of the centroid (xi, yi
                     ) and the horizontal (wi
                     ) and vertical (hi
                     ) dimensions of each facility i. The cost function to be minimized is

                        
                           
                              
                                 Cost
                                 =
                                 
                                    
                                       ∑
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          i
                                          =
                                          N
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                          ∑
                                          
                                             j
                                             =
                                             1
                                          
                                          
                                             j
                                             =
                                             N
                                          
                                       
                                    
                                 
                                 
                                    c
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 
                                 
                                    f
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 
                                 
                                    d
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                              
                           
                        
                     where f
                     
                        i, j
                      represents the flow between facilities i and j (we assume that f
                     
                        i, i
                      = 0), c
                     
                        i, j
                      is the cost per unit distance between i and j, and d
                     
                        i, j
                      is the distance between the centroids of facilities i and j. The distance d
                     
                        i, j
                      can be defined according to one of the following distance norms:

                        
                           •
                           Rectilinear distance (R): d
                              
                                 i, j
                               = |xi
                               − xj
                              | + |yi
                               − yj
                              |;

Euclidean distance (E): 
                                 
                                    
                                       d
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                (
                                                
                                                   x
                                                   i
                                                
                                                −
                                                
                                                   x
                                                   j
                                                
                                                )
                                             
                                             2
                                          
                                          +
                                          
                                             
                                                (
                                                
                                                   y
                                                   i
                                                
                                                −
                                                
                                                   y
                                                   j
                                                
                                                )
                                             
                                             2
                                          
                                       
                                    
                                 
                              ;

Squared Euclidean distance (SE): d
                              
                                 i, j
                               = (xi
                               − xj
                              )2 + (yi
                               − yj
                              )2.

Since most real-world layout problems make use of the rectilinear distance norm, we will model the problem using this distance norm. In practice the dimensions of the floor space and the area of the facilities are usually not hard constraints and can accommodate small variations. To be able to include this flexibility when searching for a solution we will add to our model the variables △wi
                      and △hi
                      to represent, respectively, the amount that each facility i exceeds the horizontal and vertical dimensions (W, H) and include a term in the objective function to penalize this excess.

The problem can be cast in an intuitive way in the form of a nonlinear mixed integer programming model, FLP-NMIP. In the model we will use the following additional notation:

                        
                           
                              Pi,j,Qi,j
                               =
                           Binary variables used to model the non-overlapping constraints:

                                 
                                    •
                                    if (P
                                       
                                          i, j
                                       , Q
                                       
                                          i, j
                                       ) is equal to (0, 0) then facility i is forced to the right of j;

if (P
                                       
                                          i, j
                                       , Q
                                       
                                          i, j
                                       ) is equal to (1, 0) then facility i is forced to the left of j;

if (P
                                       
                                          i, j
                                       , Q
                                       
                                          i, j
                                       ) is equal to (0, 1) then facility i is forced to the above of j;

if (P
                                       
                                          i, j
                                       , Q
                                       
                                          i, j
                                       ) is equal to (1, 0) then facility i is forced to the below of j.

Parameters defining upper bounds on the horizontal and vertical distance between any two facilities, respectively.

Variables representing the distances between the facilities i and j along the X- and Y-axes, respectively.

Constant used to penalize the solutions for exceeding the floor space dimensions. The value of this constant should be chosen according to the available flexibility to accommodate small variations in the dimensions of the floor space. If no variations are allowed, then 
                                 
                                    M
                                    =
                                    ∞
                                 
                              .

A nonlinear integer programming model of the facility layout problem is given in (2)–(15). The objective function (2) minimizes the total cost using the appropriate distance norm. Constraints (3)–(4) define the horizontal and vertical dimensions of the facility according to the area and maximum allowed ratio. Constraints (5)–(8) impose the non-overlapping constraints by forcing the facilities to be separated horizontally and/or vertically. Constraints (9)–(10) force each facility to be within the horizontal and vertical limits of the floor space, respectively. Constraints (11)–(14) define the distances between all pairs of facilities (i, j) according to the rectilinear norm distance function. Finally, constraints (15) define the domains for the different variables.

In the model FLP-NMIP constraints (3) are non-linear resulting in a hard-to-solve model. However, Castillo and Westerlund (2005) developed a linear approximation based on a cutting plane representation of the actual area constraint that guarantees that, at optimality, the final area of each facility is within an ε% error of the required area regardless of the aspect ratio of the facilities. To linearize the model and make it easier to solve, we replace the non-convex and hyperbolic area constraints (3) and the aspect ratio constraints 4 with the ε-accurate representation:

                        
                           (1)
                           
                              
                                 −
                                 
                                    h
                                    i
                                 
                                 −
                                 
                                    
                                       A
                                       i
                                    
                                    
                                       
                                          w
                                          ¯
                                       
                                       
                                          i
                                          ,
                                          k
                                       
                                       2
                                    
                                 
                                 
                                    w
                                    i
                                 
                                 ≤
                                 2
                                 
                                    
                                       A
                                       i
                                    
                                    
                                       
                                          w
                                          ¯
                                       
                                       
                                          i
                                          ,
                                          k
                                       
                                    
                                 
                                 ,
                                 
                                 k
                                 =
                                 0
                                 ,
                                 …
                                 ,
                                 
                                    C
                                    i
                                 
                                 ,
                                 
                                 ∀
                                 
                                 i
                              
                           
                        
                     where 
                        
                           
                              w
                              ¯
                           
                           
                              i
                              ,
                              k
                           
                        
                      corresponds to the tangent points of the cutting planes on the real curve and Ci
                      is the total number of points being used in the approximation according to the chosen ε% error value. The resulting model with constraints (1) replacing constraints (3) will be denoted as FLP-MIP.

                        
                           (2)
                           
                              
                                 
                                    
                                       
                                          (
                                          
                                             FLP
                                             -
                                             NMIP
                                          
                                          )
                                          ,
                                          
                                          Minimize
                                          
                                          Cost
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          
                                             
                                                ∑
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   i
                                                   =
                                                   N
                                                
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                   ∑
                                                   
                                                      j
                                                      =
                                                      1
                                                   
                                                   
                                                      j
                                                      =
                                                      N
                                                   
                                                
                                             
                                          
                                          
                                             c
                                             
                                                i
                                                ,
                                                j
                                             
                                          
                                          
                                          
                                             f
                                             
                                                i
                                                ,
                                                j
                                             
                                          
                                          
                                          
                                             (
                                             
                                                d
                                                
                                                   i
                                                   ,
                                                   j
                                                
                                                x
                                             
                                             +
                                             
                                                d
                                                
                                                   i
                                                   ,
                                                   j
                                                
                                                x
                                             
                                             )
                                          
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          +
                                          
                                          M
                                          
                                          
                                             
                                                ∑
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   i
                                                   =
                                                   N
                                                
                                             
                                          
                                          
                                             (
                                             ▵
                                             
                                                w
                                                i
                                             
                                             +
                                             ▵
                                             
                                                h
                                                i
                                             
                                             )
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                  


                     Subject to:
                  


                     Facility aspect constraints
                     
                        
                           (3)
                           
                              
                                 
                                    w
                                    i
                                 
                                 ×
                                 
                                    h
                                    i
                                 
                                 =
                                 
                                    A
                                    i
                                 
                                 
                                 ∀
                                 
                                 i
                              
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    1
                                    
                                       R
                                       max
                                    
                                 
                                 ≤
                                 
                                    
                                       w
                                       i
                                    
                                    
                                       h
                                       i
                                    
                                 
                                 ≤
                                 
                                    R
                                    max
                                 
                                 
                                 ∀
                                 
                                 i
                              
                           
                        
                     
                     Non-overlapping constraints
                     
                        
                           (5)
                           
                              
                                 
                                    x
                                    i
                                 
                                 −
                                 
                                    x
                                    j
                                 
                                 +
                                 
                                    M
                                    x
                                 
                                 
                                    (
                                    
                                       P
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    +
                                    
                                       Q
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    )
                                 
                                 ≥
                                 
                                    
                                       
                                          w
                                          i
                                       
                                       +
                                       
                                          w
                                          j
                                       
                                    
                                    2
                                 
                                 
                                    
                                    ∀
                                    
                                    i
                                    ,
                                    j
                                    
                                    |
                                    
                                    j
                                    >
                                    i
                                 
                              
                           
                        
                     
                     
                        
                           (6)
                           
                              
                                 
                                    x
                                    j
                                 
                                 −
                                 
                                    x
                                    i
                                 
                                 +
                                 
                                    M
                                    x
                                 
                                 
                                    (
                                    1
                                    −
                                    
                                       P
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    +
                                    
                                       Q
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    )
                                 
                                 ≥
                                 
                                    
                                       
                                          w
                                          i
                                       
                                       +
                                       
                                          w
                                          j
                                       
                                    
                                    2
                                 
                                 
                                    
                                    ∀
                                    
                                    i
                                    ,
                                    j
                                    
                                    |
                                    
                                    j
                                    >
                                    i
                                 
                              
                           
                        
                     
                     
                        
                           (7)
                           
                              
                                 
                                    y
                                    i
                                 
                                 −
                                 
                                    y
                                    j
                                 
                                 +
                                 
                                    M
                                    y
                                 
                                 
                                    (
                                    1
                                    +
                                    
                                       P
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    −
                                    
                                       Q
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    )
                                 
                                 ≥
                                 
                                    
                                       
                                          h
                                          i
                                       
                                       +
                                       
                                          h
                                          j
                                       
                                    
                                    2
                                 
                                 
                                    
                                    ∀
                                    
                                    i
                                    ,
                                    j
                                    
                                    |
                                    
                                    j
                                    >
                                    i
                                 
                              
                           
                        
                     
                     
                        
                           (8)
                           
                              
                                 
                                    y
                                    j
                                 
                                 −
                                 
                                    y
                                    i
                                 
                                 +
                                 
                                    M
                                    y
                                 
                                 
                                    (
                                    2
                                    −
                                    
                                       P
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    −
                                    
                                       Q
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    )
                                 
                                 ≥
                                 
                                    
                                       
                                          h
                                          i
                                       
                                       +
                                       
                                          h
                                          j
                                       
                                    
                                    2
                                 
                                 
                                    
                                    ∀
                                    
                                    i
                                    ,
                                    j
                                    
                                    |
                                    
                                    j
                                    >
                                    i
                                 
                              
                           
                        
                     
                     Floor space constraints
                     
                        
                           (9)
                           
                              
                                 
                                    
                                       w
                                       i
                                    
                                    2
                                 
                                 ≤
                                 
                                    x
                                    i
                                 
                                 ≤
                                 W
                                 −
                                 
                                    
                                       w
                                       i
                                    
                                    2
                                 
                                 +
                                 ▵
                                 
                                    w
                                    i
                                 
                                 
                                 ∀
                                 
                                 i
                              
                           
                        
                     
                     
                        
                           (10)
                           
                              
                                 
                                 
                                 
                                    
                                       h
                                       i
                                    
                                    2
                                 
                                 ≤
                                 
                                    y
                                    i
                                 
                                 ≤
                                 H
                                 −
                                 
                                 
                                    
                                       h
                                       i
                                    
                                    2
                                 
                                 
                                 +
                                 ▵
                                 
                                    h
                                    i
                                 
                                 
                                 ∀
                                 
                                 i
                              
                           
                        
                     
                  


                     Distance constraints
                     
                        
                           (11)
                           
                              
                                 
                                    x
                                    i
                                 
                                 −
                                 
                                    x
                                    j
                                 
                                 ≤
                                 
                                    d
                                    
                                       i
                                       ,
                                       j
                                    
                                    x
                                 
                                 
                                    
                                    ∀
                                    
                                    i
                                    ,
                                    j
                                    
                                    |
                                    
                                    j
                                    >
                                    i
                                 
                              
                           
                        
                     
                     
                        
                           (12)
                           
                              
                                 
                                    x
                                    j
                                 
                                 −
                                 
                                    x
                                    i
                                 
                                 ≤
                                 
                                    d
                                    
                                       i
                                       ,
                                       j
                                    
                                    x
                                 
                                 
                                    
                                    ∀
                                    
                                    i
                                    ,
                                    j
                                    
                                    |
                                    
                                    j
                                    >
                                    i
                                 
                              
                           
                        
                     
                     
                        
                           (13)
                           
                              
                                 
                                    y
                                    i
                                 
                                 −
                                 
                                    y
                                    j
                                 
                                 ≤
                                 
                                    d
                                    
                                       i
                                       ,
                                       j
                                    
                                    y
                                 
                                 
                                    
                                    ∀
                                    
                                    i
                                    ,
                                    j
                                    
                                    |
                                    
                                    j
                                    >
                                    i
                                 
                              
                           
                        
                     
                     
                        
                           (14)
                           
                              
                                 
                                    y
                                    j
                                 
                                 −
                                 
                                    y
                                    i
                                 
                                 ≤
                                 
                                    d
                                    
                                       i
                                       ,
                                       j
                                    
                                    y
                                 
                                 
                                    
                                    ∀
                                    
                                    i
                                    ,
                                    j
                                    
                                    |
                                    
                                    j
                                    >
                                    i
                                 
                              
                           
                        
                     
                  


                     Domain constraints
                     
                        
                           (15)
                           
                              
                                 
                                    x
                                    i
                                 
                                 ,
                                 
                                    y
                                    i
                                 
                                 ,
                                 
                                    w
                                    i
                                 
                                 ,
                                 
                                    h
                                    i
                                 
                                 ,
                                 
                                    d
                                    
                                       i
                                       ,
                                       j
                                    
                                    x
                                 
                                 ,
                                 
                                    d
                                    
                                       i
                                       ,
                                       j
                                    
                                    x
                                 
                                 ≥
                                 0
                                 
                                 ∀
                                 
                                 i
                                 
                                 
                                    and
                                 
                                 
                                 
                                    P
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 ,
                                 
                                 
                                    Q
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 ∈
                                 
                                    {
                                    0
                                    ,
                                    1
                                    }
                                 
                                 
                                    
                                    ∀
                                    
                                    i
                                    ,
                                    j
                                    
                                    |
                                    
                                    j
                                    >
                                    i
                                 
                              
                           
                        
                     
                  

The mixed integer model FLP-MIP developed above is still computationally difficult and fails to provide optimal or even near-optimal solutions on real-size problems due to the large number of binary variables. To overcome this problem we developed a new solution methodology, which combines a biased random-key genetic algorithm with a novel placement strategy. In the next section we describe the new methodology.

We begin this section with an overview of the proposed solution methodology. This is followed by a discussion of the biased random-key genetic algorithm, including detailed descriptions of the solution encoding and decoding, evolutionary process, and novel placement strategy.

We will first describe the algorithm for the case where the dimensions of the floor space are unconstrained (i.e., we do not take into account Eqs. (9) and (10)). Later in Section 4.2 we extend the approach to the constrained case.

@&#OVERVIEW@&#

The new approach is based on a constructive heuristic algorithm which places the facilities, one at a time, on the rectangular floor space. To avoid overlapping of the facilities, we propose a novel placement strategy which uses the concept of empty maximal-spaces, as described in Lai and Chan (1997), and a novel, very efficient, placement procedure to position a facility within a given empty maximal space. The new approach combines a biased random-key genetic algorithm and the novel placement strategy.

The role of the genetic algorithm is to evolve the encoded parameters, or chromosomes, that represent the facility placement sequence (FPS), the vector of facility aspect ratios (FAR), and the position of the first facility (x
                        first, y
                        first). The vectors of encoded parameters are decoded using a novel placement strategy which results in the placement of each facility. For each chromosome, the following phases are applied to decode the chromosome:

                           
                              1.
                              
                                 Facility placement sequence decoder: This first phase decodes part of the chromosome into the FPS, i.e., the sequence in which the facilities are placed on the floor space.


                                 Facility aspect ratio decoder: The second phase decodes part of the chromosome into the FAR, i.e., the vector of facility aspect ratios.
                              


                                 Position of the first facility decoder: The third phase decodes part of the chromosome into the coordinates (x
                                 first, y
                                 first) of the first facility to be placed on the floor space.


                                 Placement strategy: The fourth phase makes use of FPS, FAR, and(x
                                 first, y
                                 first) defined in Phases 1, 2, and 3, respectively, and places all the facilities on the floor space using the novel placement strategy.


                                 Fitness evaluation: The final phase computes the fitness of the solution obtained in Phase 4 (a measure of quality of the facility placement) using Eq. (2).


                        Fig. 1
                         illustrates the sequence of steps applied to each chromosome generated by the BRKGA.

The remainder of this section describes the genetic algorithm, the decoding procedure, and the placement strategy in detail.

Genetic algorithms with random keys, or random-key genetic algorithms (RKGA), for solving sequencing problems were introduced in Bean (1994). In a RKGA, chromosomes are represented as vectors of randomly-generated real numbers in the interval [0, 1]. A decoder is a deterministic algorithm that takes as input a chromosome and associates with it a solution of the combinatorial optimization problem for which an objective value or fitness can be computed.

In a RKGA evolves a population of random-key vectors over a number of generations (iterations). The initial population is made up of p vectors of r random keys. Each component of the solution vector, or random key, is generated independently at random in the real interval [0, 1]. After the fitness of each individual is computed by the decoder in generation g, the population is partitioned into two groups of individuals: a small group of pe elite individuals, i.e. those with the best fitness values, and the remaining set of p − pe non-elite individuals. To evolve the population of generation g, a new generation (g + 1) of individuals is produced. All elite individuals of the population of generation g are copied without modification to the population of generation g + 1. RKGAs implement mutation by introducing mutants into the population. A mutant is a vector of random keys generated in the same way that an element of the initial population is generated. Its role is similar to that of mutation in other genetic algorithms (Goldberg, 1989), i.e. to introduce noise into the population and avoid convergence of the entire population to a local optimum. At each generation, a small number pm
                         of mutants is introduced into the population. With pe
                         + pm
                         individuals accounted for in population g + 1, p − pe
                         − pm
                         additional individuals need to be generated to complete the p individuals that make up population g + 1. This is done by producing p − pe
                         − pm
                         offspring solutions through the process of mating or crossover.

A biased random-key genetic algorithm (Gonçalves & Resende, 2011), or simply BRKGA, differs from a RKGA in the way parents are selected for mating and how mating is carried out. While in the RKGA of Bean (1994) both parents are selected at random from the entire current population, in a BRKGA each element is generated combining a parent selected at random from the elite partition in the current population and one from the rest of the population. Repetition in the selection of a mate is allowed and therefore an individual can produce more than one offspring in the same generation. As in a RKGA, parametrized uniform crossover (Spears & Dejong, 1991) is used to implement mating in a BRKGA. Let ρe
                         be the probability that an offspring inherits the vector component of its elite parent. Recall that r denotes the number of components in the solution vector of an individual. For i = 1, …, r, the i-th component c(i) of the offspring vector c takes on the value of the i-th component e(i) of the elite parent e with probability ρe
                         and the value of the i-th component 
                           
                              
                                 e
                                 ¯
                              
                              
                                 (
                                 i
                                 )
                              
                           
                         of the non-elite parent 
                           
                              e
                              ¯
                           
                         with probability 1 − ρe
                        . While in a BRKGA 
                           
                              
                                 ρ
                                 e
                              
                              >
                              
                                 1
                                 2
                              
                              ,
                           
                         in a RKGA this is not necessarily the case.

When the next population is complete, i.e. when it has p individuals, fitness values are computed for all of the newly created random-key vectors and the population is partitioned into elite and non-elite individuals to start a new generation.

A BRKGA searches the solution space of the combinatorial optimization problem indirectly by searching the continuous r-dimensional hypercube, using the decoder to map solutions in the hypercube to solutions in the solution space of the combinatorial optimization problem where the fitness is evaluated.

To specify a biased random-key genetic algorithm, we simply need to specify its parameters, how solutions are encoded and decoded, and how their corresponding fitness values are computed. We specify our algorithm next by first showing how the facility placement problem is encoded and then decoded into a solution and how their fitness evaluation is computed.

A chromosome encodes a solution to the problem as a vector of random keys. In a direct representation, a chromosome represents a solution of the original problem and is called genotype, while in an indirect representation it does not. In an indirect representation, special procedures are needed to extract a solution, or phenotype, from it. In the present context, solutions will be represented indirectly by parameters that are later used by a decoding procedure to obtain a solution. To obtain the phenotype we use the decoding procedures described in Section 3.3.3.

Each solution chromosome is made of 2N + 2 genes as depicted in Fig. 2
                           , where N is the number of facilities to be laid out. The first N genes are used to obtain the facility placing sequence (FPS), genes N + 1 to 2N are used to obtain the vector of facility aspect ratios(FAR), and genes 2N + 1 and 2N + 2 are used to obtain the coordinates (x
                           first, y
                           first) of the first facility to be placed. The placement procedure, described in Section 3.3.3, makes use of FPS, FAR, and (x
                           first, y
                           first) to construct a solution from the chromosome.

The decoding (mapping) of the first N genes of each chromosome into a FPS is accomplished by sorting the key values of the genes in increasing order. The indices of the sorted keys correspond to the sequence in which facilities will be laid out. Fig. 3
                            shows an example of the decoding process for the FPS. There are eight facilities in this example. Sorting the eight random keys in increasing order produces the following FPS = (5, 8, 3, 1, 4, 2, 6, 7).

The decoding of the vector of facility aspect ratios (FAR) is accomplished for i = 1,…, N, using the following expression:

                              
                                 (16)
                                 
                                    
                                       
                                          
                                             
                                                FAR
                                                i
                                             
                                             =
                                             
                                                1
                                                
                                                   R
                                                   max
                                                
                                             
                                             +
                                             g
                                             e
                                             n
                                             
                                                e
                                                i
                                             
                                             ×
                                             
                                                (
                                                
                                                   R
                                                   max
                                                
                                                −
                                                
                                                   1
                                                   
                                                      R
                                                      max
                                                   
                                                
                                                )
                                             
                                          
                                       
                                       .
                                    
                                 
                              
                           
                        

Since 
                              
                                 
                                    
                                       
                                          
                                             FAR
                                             i
                                          
                                          =
                                          
                                             
                                                w
                                                i
                                             
                                             
                                                h
                                                i
                                             
                                          
                                       
                                    
                                 
                                 ,
                              
                            the dimensions of each facility i can now be computed as

                              
                                 (17)
                                 
                                    
                                       
                                          
                                             
                                                w
                                                i
                                             
                                             =
                                             
                                                
                                                   
                                                      A
                                                      i
                                                   
                                                   ×
                                                   
                                                      FAR
                                                      i
                                                   
                                                
                                             
                                          
                                       
                                       
                                       ,
                                    
                                 
                              
                           and

                              
                                 (18)
                                 
                                    
                                       
                                          
                                             
                                                h
                                                i
                                             
                                             =
                                             
                                                A
                                                i
                                             
                                             /
                                             
                                                w
                                                i
                                             
                                          
                                       
                                       .
                                    
                                 
                              
                           
                        

The first facility to be laid out is defined by the FPS and is denoted asFPS1. Its coordinates, i.e. (x
                           first, y
                           first) are decoded as:

                              
                                 (19)
                                 
                                    
                                       
                                          x
                                          first
                                       
                                       =
                                       
                                          
                                             w
                                             i
                                          
                                          2
                                       
                                       +
                                       g
                                       e
                                       n
                                       
                                          e
                                          
                                             
                                             2
                                             N
                                             +
                                             1
                                          
                                       
                                       ×
                                       
                                          (
                                          W
                                          −
                                          
                                             w
                                             i
                                          
                                          )
                                       
                                       ,
                                    
                                 
                              
                           
                           
                              
                                 (20)
                                 
                                    
                                       
                                          y
                                          first
                                       
                                       =
                                       
                                          
                                             h
                                             i
                                          
                                          2
                                       
                                       +
                                       g
                                       e
                                       n
                                       
                                          e
                                          
                                             
                                             2
                                             N
                                             +
                                             2
                                          
                                       
                                       ×
                                       
                                          (
                                          H
                                          −
                                          
                                             h
                                             i
                                          
                                          )
                                       
                                       .
                                    
                                 
                              
                           
                        

FPS, FAR, and (x
                           first, y
                           first) are used later by the placement procedure to construct a layout with all the facilities placed on the floor space.

To evolve the solutions, the evolutionary process needs a measure of the solution fitness, or quality. A natural fitness function for this type of problem is the layout cost defined as

                              
                                 
                                    
                                       Cost
                                       =
                                       
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             
                                                i
                                                =
                                                N
                                             
                                          
                                       
                                       
                                          
                                             
                                             
                                             
                                                ∑
                                                
                                                   j
                                                   =
                                                   1
                                                
                                                
                                                   j
                                                   =
                                                   N
                                                
                                             
                                          
                                       
                                       
                                          c
                                          
                                             i
                                             ,
                                             j
                                          
                                       
                                       
                                       
                                          f
                                          
                                             i
                                             ,
                                             j
                                          
                                       
                                       
                                       
                                          d
                                          
                                             i
                                             ,
                                             j
                                          
                                       
                                       +
                                       
                                       M
                                       
                                       
                                          
                                             ∑
                                             
                                                i
                                                =
                                                1
                                             
                                             
                                                i
                                                =
                                                N
                                             
                                          
                                       
                                       
                                          (
                                          ▵
                                          
                                             w
                                             i
                                          
                                          +
                                          ▵
                                          
                                             h
                                             i
                                          
                                          )
                                       
                                       ,
                                    
                                 
                              
                           where, as defined above, c
                           
                              i, j
                            and f
                           
                              i, j
                            are respectively, the cost per distance unit and the flow between facilities i and j, and d
                           
                              i, j
                            is the distance according to the appropriate norm. The second term in the fitness corresponds to the penalty for exceeding the dimensions of the floor space. Note that when the dimensions of the floor space are unconstrained the value of the penalty term will be equal to zero, i.e., M = 0.

In the next sections we describe the main components of the placement strategy.

While trying to place a facility on the floor space we use a list S of empty maximal-spaces (EMSs), i.e., largest empty rectangular spaces available on the floor space. An empty maximal-space s is represented by its vertices with minimum and maximum coordinates (
                              
                                 min
                                 _
                                 
                                    x
                                    s
                                 
                                 ,
                                 
                                 min
                                 _
                                 
                                    y
                                    s
                                 
                              
                            and 
                              
                                 max
                                 _
                                 
                                    x
                                    s
                                 
                                 ,
                                 
                                 max
                                 _
                                 
                                    y
                                    s
                                 
                                 ,
                              
                            respectively). When searching for a place to position a facility, we need to consider only the available EMSs where the facility being placed fits. This way, we guarantee that there will be no overlap between facilities. To generate and keep track of the EMSs, we make use of the difference process (DP), developed by Lai and Chan (1997). Fig. 4
                            depicts an example of the application of the DP process. In the example, we assume that we have two facilities to be placed on the floor space. Since the floor space is initially empty, we only have the empty maximal-space EMS
                           0 which is the entire floor space (see Fig. 4a). After placing facility 1 in EMS
                           0 we update the list S of available empty maximal-spaces so we can try to place facility 2. Fig. 4b shows the four newly generated EMSs. Facility 2 is placed in EMS2 and the DP process results in the six EMSs shown in Fig. 4c. Every time a facility is placed on the floor space, we reapply the DP process to update list S before we place the next facility.

In the unconstrained case we assume that the floor space can include all the facilities laid out horizontally or vertically at their maximum horizontal or vertical dimensions, i.e.,

                              
                                 
                                    
                                       
                                          
                                             
                                                EMS
                                                0
                                             
                                             =
                                             
                                                (
                                                0
                                                
                                                ,
                                                
                                                0
                                                ,
                                                
                                                
                                                   ∑
                                                   i
                                                
                                                
                                                   
                                                      
                                                         A
                                                         i
                                                      
                                                      ×
                                                      
                                                         R
                                                         max
                                                      
                                                   
                                                
                                                
                                                ,
                                                
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                            i
                                                         
                                                         
                                                            
                                                               
                                                                  A
                                                                  i
                                                               
                                                               ×
                                                               
                                                                  R
                                                                  
                                                                     m
                                                                     a
                                                                     x
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                                )
                                             
                                          
                                       
                                       .
                                    
                                 
                              
                           
                        

When attempting to place a facility i on the floor space we want the facility to have the least cost with respect to the facilities already laid out. To achieve this we solve the following problem for every available empty maximal-space s and all facilities k ∈ K already placed on the floor space:

                              
                                 (21)
                                 
                                    
                                       
                                          (
                                          
                                             FLP
                                             _
                                             EMS
                                          
                                          )
                                       
                                       
                                       
                                          M
                                          i
                                          n
                                          i
                                          m
                                          i
                                          z
                                          e
                                       
                                       
                                       Cost
                                       
                                          (
                                          i
                                          )
                                       
                                       =
                                       
                                          
                                             ∑
                                             
                                                k
                                                ∈
                                                K
                                             
                                          
                                       
                                       
                                          c
                                          
                                             i
                                             ,
                                             k
                                          
                                       
                                       
                                       
                                          f
                                          
                                             i
                                             ,
                                             k
                                          
                                       
                                       
                                       
                                          d
                                          
                                             i
                                             ,
                                             k
                                          
                                       
                                    
                                 
                              
                           
                           Subject to:

                              
                                 (22)
                                 
                                    
                                       min
                                       _
                                       
                                          x
                                          s
                                       
                                       +
                                       
                                          
                                             w
                                             i
                                          
                                          2
                                       
                                       ≤
                                       
                                          x
                                          i
                                       
                                       ≤
                                       max
                                       _
                                       
                                          x
                                          s
                                       
                                       −
                                       
                                          
                                             w
                                             
                                                
                                                i
                                             
                                          
                                          2
                                       
                                       ,
                                    
                                 
                              
                           
                           
                              
                                 (23)
                                 
                                    
                                       min
                                       _
                                       y
                                       
                                          
                                          s
                                       
                                       +
                                       
                                          
                                             h
                                             i
                                          
                                          2
                                       
                                       ≤
                                       
                                          y
                                          i
                                       
                                       ≤
                                       min
                                       _
                                       
                                          y
                                          s
                                       
                                       −
                                       
                                          
                                             h
                                             i
                                          
                                          2
                                       
                                       .
                                    
                                 
                              
                           
                        

Note that we solve FLP_EMS only for empty maximal-spaces in which facility i fits.

FLP_EMS has a non-linear objective function (21) and the variables xi, yi
                            are subject only to box constraints (22) and (23). This problem can be solved with the non-monotone spectral projected gradient method proposed in Birgin, Martínez, and Raydan (2000) (FORTRAN source code in http://www.ime.usp.br/~egbirgin/tango/codes.php#spg). However, we developed a new more efficient surrogate approach. The new approach starts by computing the unconstrained optimal (i.e., without the box constraints), denoted by UO (details on how to compute UO for the three distance norms can be found in Heragu (1997)). Next, facility i is tentatively positioned at the geometric center of the EMS s, i.e., at the point

                              
                                 
                                    
                                       
                                          
                                             (
                                             
                                                
                                                   min
                                                   _
                                                   
                                                      x
                                                      s
                                                   
                                                   +
                                                   max
                                                   _
                                                   
                                                      x
                                                      s
                                                   
                                                
                                                2
                                             
                                             
                                             ,
                                             
                                             
                                                
                                                   min
                                                   _
                                                   
                                                      y
                                                      s
                                                   
                                                   +
                                                   max
                                                   _
                                                   
                                                      y
                                                      s
                                                   
                                                
                                                2
                                             
                                             )
                                          
                                       
                                       .
                                    
                                 
                              
                           
                        

The final position of facility i is obtained by moving its centroid as close as possible to UO without leaving the boundaries of the EMSs. We first try to get as close as possible to UO by moving vertically and then by moving horizontally (or vice-versa). Fig. 5
                            illustrates this approach for two empty maximal spaces.

In some cases there is no flow between the facility i being placed and all the other facilities k ∈ K already placed on the floor space, i.e., f
                           
                              i, k
                            = 0  ∀ k ∈ K. When this occurs we consider UO to be equal to the geometric center of all laid-out facilities, i.e.,

                              
                                 
                                    
                                       
                                          (
                                          U
                                          
                                             O
                                             x
                                          
                                          
                                          ,
                                          
                                          U
                                          
                                             O
                                             y
                                          
                                          )
                                       
                                       =
                                       
                                          (
                                          
                                             1
                                             
                                                |
                                                K
                                                |
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      k
                                                      ∈
                                                      K
                                                   
                                                
                                             
                                          
                                          
                                             x
                                             k
                                          
                                          
                                          ,
                                          
                                          
                                             1
                                             
                                                |
                                                K
                                                |
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      k
                                                      ∈
                                                      K
                                                   
                                                
                                             
                                          
                                          
                                             y
                                             k
                                          
                                          )
                                       
                                       .
                                    
                                 
                              
                           
                        

From this point on we will denote by 
                              
                                 
                                    FLP
                                    _
                                    EMS
                                 
                                 (
                                 i
                                 ,
                                 
                                 s
                                 ,
                                 
                                 x
                                 ,
                                 
                                 y
                                 )
                              
                            the procedure that determines the minimum-cost position (x, y) of facility i in EMS.

The placement procedure follows a sequential process which places a single facility at each stage. The procedure combines FPS, FAR, and (x
                           first, y
                           first) evolved by the BRKGA. Each stage is comprised of four
                            main steps:

                              
                                 1.
                                 Facility selection;

Computation of the facility aspect ratio and its dimensions;

Facility placement;

State information update.

Pseudo-code of the placement procedure is given in Fig. 6. The facility selection at stage i chooses for placement the facility in the ith position of the FPS (line 4 of the pseudo-code). The facility dimensions are defined by the ith position of the FAR (line 5). The facility placement is carried out in lines 6–18. The coordinates of the first facility placed are defined in line 16 while the coordinates of the other facilities are defined in lines 7–14 of the pseudo-code. The facility placement is carried out in line 18. The final step, state information update, consists in updating the list of empty maximal spaces, according to the facility being placed and the corresponding coordinates, usingthe DP procedure (line 19 of the pseudo-code).

Our first approach to extend the algorithm for the case where the dimensions of the floor space are constrained was to use BRKGA with a large value assigned to the penalty constant M, i.e.,

                           
                              
                                 
                                    M
                                    =
                                    
                                       (
                                       W
                                       +
                                       H
                                       )
                                    
                                    
                                    
                                       
                                          ∑
                                          
                                             i
                                             =
                                             1
                                          
                                          
                                             i
                                             =
                                             N
                                          
                                       
                                    
                                    
                                       
                                          
                                          
                                          
                                             ∑
                                             
                                                j
                                                =
                                                1
                                             
                                             
                                                j
                                                =
                                                N
                                             
                                          
                                       
                                    
                                    
                                    
                                       f
                                       
                                          i
                                          ,
                                          j
                                       
                                    
                                    .
                                 
                              
                           
                        
                     

This approach works quite well, for all the three distance norms presented above when the area of the floor space exceeds the sum of the areas of the facilities by more than about 25%. However, when the area of the floor space is close to the sum of the areas of the facilities, the quality of the solution worsens significantly and most of the time no feasible solution can be found. To overcome this problem, we developed a new hybrid matheuristic approach, denoted by BRKGA-LP, to solve problems with floor space constraints. In the hybrid BRKGA-LP approach, the BRKGA produces unconstrained solutions defining the relative locations of facilities in the floor space. The relative locations are then used to define the separation constraints of the FLP-MIP model transforming it into a linear program, denoted by FLP-LP. The solution of the FLP-LP determines the new locations and dimensions of all the facilities that may improve the BRKGA solution.

The constrained approach, BRKGA-LP, can be described for each chromosome by the following steps:

                           
                              1.
                              Solve the problem with BRKGA, the unconstrained approach. In this case and after some experimentation we came to the conclusion that limiting the unconstrained floor space to 1.7 times of the real horizontal and vertical dimensions of the floor space produces better results, when solving in the next step the FLP-LP, than if the two dimensions where both unconstrained, i.e., were very large. Therefore, when solving the unconstrained problem we use a floor space with dimensions (1.7 × W, 1.7 × H), as shown in Fig. 7a. Let S
                                 BRKGA be the solution produced by the BRKGA in this step. Note that sometimes, due to the limitations of the floor dimensions, it is not possible to position all the facilities in the floor space. In that case we consider the fitness of the solution S
                                 BRKGA to be equal to ∞ and skip Steps 2 and 3.
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                              

Based on the solution S
                                 BRKGA obtained in the previous step, formulate the corresponding linear model FLP-LP(S
                                 BRKGA), where the non-overlapping constraints (5), (6), (7), and (8) in the FLP-MIP model are replaced by a single constraint defined according to S
                                 BRKGA. The single separating constraint that will replace the original separating constraints in the FLP-MIP model can be determined as follows. Let 
                                    
                                       D
                                       i
                                       s
                                       
                                          W
                                          
                                             i
                                             ,
                                             j
                                          
                                       
                                       =
                                       
                                          |
                                          
                                             x
                                             i
                                          
                                          −
                                          
                                             x
                                             j
                                          
                                          |
                                       
                                       −
                                       
                                          
                                             w
                                             i
                                          
                                          2
                                       
                                       −
                                       
                                          
                                             w
                                             j
                                          
                                          2
                                       
                                    
                                  and 
                                    
                                       D
                                       i
                                       s
                                       t
                                       
                                          H
                                          
                                             i
                                             ,
                                             j
                                          
                                       
                                       =
                                       
                                          |
                                          
                                             y
                                             i
                                          
                                          −
                                          
                                             y
                                             j
                                          
                                          |
                                       
                                       −
                                       
                                          
                                             h
                                             i
                                          
                                          2
                                       
                                       −
                                       
                                          
                                             h
                                             j
                                          
                                          2
                                       
                                    
                                  be, respectively, the horizontal and vertical distances separating facilities i and j. If DistW
                                 
                                    i, j
                                  ≥ DistH
                                 
                                    i, j
                                 , then separate facilities i and j horizontally. If xi
                                  ≤ xj
                                 , use constraint 
                                    
                                       
                                          x
                                          i
                                       
                                       +
                                       
                                          
                                             w
                                             i
                                          
                                          2
                                       
                                       +
                                       
                                          
                                             w
                                             j
                                          
                                          2
                                       
                                       ≤
                                       
                                          x
                                          j
                                       
                                    
                                 . Otherwise, use 
                                    
                                       
                                          x
                                          j
                                       
                                       +
                                       
                                          
                                             w
                                             i
                                          
                                          2
                                       
                                       +
                                       
                                          
                                             w
                                             j
                                          
                                          2
                                       
                                       ≤
                                       
                                          x
                                          i
                                       
                                    
                                 . If DistW
                                 
                                    i, j
                                  < DistH
                                 
                                    i, j
                                 , then separate facilities i and j vertically. If yi
                                  ≤ yj
                                  use constraint 
                                    
                                       
                                          y
                                          i
                                       
                                       +
                                       
                                          
                                             h
                                             i
                                          
                                          2
                                       
                                       +
                                       
                                          
                                             h
                                             j
                                          
                                          2
                                       
                                       ≤
                                       
                                          y
                                          j
                                       
                                    
                                 . Otherwise, use 
                                    
                                       
                                          y
                                          j
                                       
                                       +
                                       
                                          
                                             h
                                             i
                                          
                                          2
                                       
                                       +
                                       
                                          
                                             h
                                             j
                                          
                                          2
                                       
                                       ≤
                                       
                                          y
                                          i
                                       
                                    
                                 . Note that this way of defining the constraint guarantees that we will always obtain a feasible solution in terms of the relative position and dimensions of the facilities.

Solve FLP-LP(S
                                 BRKGA) to try to improve the solution S
                                 BRKGA by using new locations and dimensions for all facilities. Fig. 7b depicts a possible improved solution obtained by FLP-LP(S
                                 BRKGA) for the BRKGA solution presented in Fig. 7a.

Since solving FLP-LP(S
                        BRKGA) is computationally expensive we only carry on to Steps 2 and 3 if the solution S
                        BRKGA seems promising. A solution is considered promising if the following two conditions are satisfied:

                           
                              1.
                              The area of the facilities outside the real floor space dimensions is smaller than 45% of the real floor space, i.e.,

                                    
                                       
                                          
                                             Area
                                             
                                             of
                                             
                                             the
                                             
                                             facilities
                                             
                                             outside
                                             
                                             of
                                             
                                             the
                                             
                                             real
                                             
                                             floor
                                             
                                             space
                                             
                                             ≤
                                             
                                             0.45
                                             
                                             ×
                                             
                                             W
                                             
                                             ×
                                             
                                             H
                                             .
                                          
                                       
                                    
                                 
                              

The cost of the solution S
                                 BRKGA is at most 40% above the cost of the best solution found so far in the solution process. At the beginning of the solution process the cost of the best solution is equal to ∞.

To evaluate the performance and the capabilities of our BRKGA and BRKGA-LP algorithms, we performed a series of computational experiments. The numerical experiments were conducted on a computer with an Intel Xeon E5-2630 @2.30GHz CPU and 16 GB of physical memory running the Linux operating system with Fedora release 18. BRKGA and BRKGA-LP were coded in C++ and the linear programs were solved with GUROBI OPTIMIZER version 5.5.

Two different types of FLPs were investigated. In the unconstrained case, we consider problems in which the dimensions of the floor space are allowed to be determined by the optimization algorithm. In the constrained case, we consider problems with given dimensions for the final layout.

The next subsections report the details of the experiments and the results obtained by the approaches proposed in this paper.

The parameters of the BRKGA were configured based on our past experience with genetic algorithms using the same evolutionary strategy (see, Gonçalves and Almeida (2002), Ericsson, Resende, and Pardalos (2002), Gonçalves and Resende (2004), Gonçalves, Mendes, and Resende (2005), Mendes, Gonçalves, and Resende (2009), Gonçalves, Mendes, and Resende (2009), Gonçalves, Resende, and Mendes (2011), Gonçalves and Sousa (2011), Gonçalves and Resende (2012), Fontes and Gonçalves (2013), Gonçalves and Resende (2013), Gonçalves and Resende (2014), Gonçalves, Resende, and Costa (2014a) and Gonçalves, Resende, and F. (2014b)). Experience has shown that good results can be obtained with the values of pe, pm
                        , and crossover probability (ρe
                        ) listed in Table 1.

For population size we obtained good results by indexing population size to the size of the problem, i.e., use small populations for small problems and larger populations for larger problems. The configuration shown in Table 2 was held constant for all problem instances in the experiments. The experimental results demonstrate that this configuration not only provides high-quality solutions, but it is also very robust.

As mentioned above for the unconstrained case, the dimensions of the floor space are free and are determined by the optimization algorithm. Additionally, note that the unconstrained approach can be used with any of the distance measures (R-Rectilinear, E-Euclidean and SE-Squared Euclidean).

To compare the performance of the BRKGA with other approaches for the unconstrained case, we used 16 datasets from the literature and 100 randomly generated datasets which were constructed in such a way that the optimal solution is known. We do that in order to measure, in absolute terms, the deviation from the optimal values. A summary of the datasets used is presented
                            in Table 3.

We compare the unconstrained version of the BRKGA with the approaches listed in Table 4.

@&#EXPERIMENTAL RESULTS@&#

In Tables 5, 6, and 7 we report the best cost and average times obtained over ten runs of BRKGA for all datasets. For the other approaches we also report the best cost. Even though the computational times reported by the other approaches might not be comparable we report them if they are available.

In Table 5 we evaluate the performance of BRKGA on the datasets TL05 to TL30. As can be seen in column %Imp, BRKGA improved the best solution for six out of the eight datasets. The improvements vary from 1.4% for TL08 to 25% for TL30. For dataset TL06 GA-TSG ranks first and BRKGA ranks second while for dataset TL15 HA-C ranks first and BRKGA second. It is clear that overall the BRKGA has the best performance in terms of solution quality.

In Table 6 we evaluate the performance of BRKGA on the datasets L020 to L125B and Dunker62. The best cost values of VIP-PLANOPT on datasets L020 to L125B are obtained from the 2010 demo version while the times are taken from the user manual of the 2006 version since they are not reported elsewhere. The values for the cost and CPU times for dataset Dunker62 are taken from McKendall Jr and Hakobyan (2010). As can be seen in column %Imp., BRKGA improved the best solution for all eight datasets. The improvements vary from 1.86% for L020 to 11.05% for L125A. It is clear that, overall, the BRKGA-based approach has the best performance in terms of solution quality. In terms of computational times, the BRKGA solves all the datasets in less than 2 min.

To study the absolute error of layouts produced by BRKGA we generated 100 datasets with known optimal solution (ten datasets with 10, 20, 30, 40, 50, 60, 70, 70, 80, 90, and 100 facilities each, respectively). In Table 7 we report on the average and maximum percentage deviation from optimal, %DO
                           avg and %DO
                           max, (over all the datasets having the same number of facilities) of the best cost of BRKGA over 10 runs. Additionally, we also include the average deviation from optimal solution value obtained by GUROBI when solving the FLP-MIP model for a maximum of 3600 CPU seconds. The times for the BRKGA correspond to the total time for ten BRKGA runs.

The results in Table 7 show that BRKGA performs quite well in terms of absolute deviation from optimal. From 10 to 40 facilities the %DO
                           avg and %DO
                           max equal zero. For datasets having between 50 and 100 facilities, the value of %DO
                           avg increases from 0.11% to 7.36% while the value of %DO
                           max increases from 1.12% to 10.97%. The relative performance of BRKGA when compared to GUROBI with the FLP-MIP model is also good both in terms of CPU time and solution quality. Note that as the number of facilities increases the quality of the solutions found by GUROBI with FLP-MIP decreases, e.g., for datasets with 100 facilities GUROBI has a %DO
                           avg value equal to 101.78% while for BRKGA this value is only 7.36%.

The final solutions generated by BRKGA for datasets TL05, TL06, TL07, TL 08, TL12, TL15, TL20, TL30, L020, L028, L050, L075, L100, L125A, L125B and Dunker62 are shown in Figs. 8–15.

As mentioned
                        
                        
                        
                         above, the dimensions of the floor space in the constrained case are fixed and are given as input. Additionally, note that the constrained approach can be only be used for the rectilinear distance measure (R).

The performance
                            of the BRKGA-LP approach for the constrained case is investigated using a comprehensive set of test problems from the literature. Table 8 summarizes the parameters of the datasets. These datasets were chosen because of their variety in size (from seven up to 35 facilities) and because they are frequently used in the literature to benchmark alternative approaches for solving the FLP.

Some authors have relaxed the dimensions of the facilities, or of the floor space, or both, when conducting the computational experiments. Although, in practice, adjusting dataset input parameters to find practical solutions is acceptable, modifying the datasets parameters makes it difficult to benchmark alternative approaches. BRKGA-LP finds feasible solutions for all datasets without modifying the original dataset parameters. Therefore, the BRKGA-LP will only be compared against previous approaches which use the original dataset parameters. Table 9 lists the approaches used for comparison with BRKGA-LP. We included approaches which do not impose any additional constraints in the solutions sought (Castillo and Westerlund (2005), Castillo, Westerlund, Emet, and Westerlund (2005), Liu and Meller (2007) and Kulturel-Konak and Konak (2013)) and the other approaches based on zone-based layouts, slicing-tree representation, and flexible bay structure representation which impose additional limitations in the search domain. The first group of approaches require longer computational times since they have a larger search domain but usually find better solutions. The second group of approaches takes less computing times due to the reduced search domain but usually generate worse solutions (with higher cost).

@&#EXPERIMENTAL RESULTS@&#

The BRKGA-LP approach approximates the facility areas by tangential supports (see Eq. (1)) which tends to produce solutions with smaller facility areas than the actual area requirements. However, the area approximation quality can be increased by increasing the number of tangential supports (△) at the expense of an increase in computational effort. To evaluate the area approximation error incurred for each facility, we use the average percent area approximation error (%E
                           avg) and the maximum percent area approximation error (%E
                           max) metrics (as proposed in Castillo and Westerlund (2005) and Kulturel-Konak and Konak (2013)). These are defined, respectively, as:

                              
                                 
                                    
                                       %
                                       
                                          E
                                          avg
                                       
                                       =
                                       
                                          
                                             
                                                
                                                   100
                                                   %
                                                
                                                N
                                             
                                             
                                                
                                                   
                                                   
                                                   
                                                      
                                                         ∑
                                                         
                                                            i
                                                            =
                                                            1
                                                         
                                                         N
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   |
                                                   
                                                      A
                                                      i
                                                   
                                                   −
                                                   
                                                      w
                                                      i
                                                   
                                                   
                                                      h
                                                      i
                                                   
                                                   |
                                                
                                                
                                                   A
                                                   i
                                                
                                             
                                          
                                       
                                       ,
                                    
                                 
                              
                           
                           
                              
                                 
                                    
                                       %
                                       
                                          E
                                          max
                                       
                                       =
                                       100
                                       %
                                       
                                          
                                             
                                          
                                          
                                             
                                                max
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      i
                                                      =
                                                      1
                                                      ,
                                                      …
                                                      ,
                                                      N
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                             {
                                             
                                                
                                                   |
                                                   
                                                      A
                                                      i
                                                   
                                                   −
                                                   
                                                      w
                                                      i
                                                   
                                                   
                                                      h
                                                      i
                                                   
                                                   |
                                                
                                                
                                                   A
                                                   i
                                                
                                             
                                             }
                                          
                                       
                                       .
                                    
                                 
                              
                           
                        

The solution process of the BRKGA-LP uses a strategy similar to the one implemented by Kulturel-Konak and Konak (2013) in their GA-LP approach, i.e., we used Δ = 25 to obtain a solution and after the last generation is complete we solve the best solution found again using Δ = 100 to ensure that area approximation error is negligible. Consequently, the best solutions reported in this paper for the BRKGA-LP approach have a facility area approximation error either equal
                           
                           
                            to 0% or very close to 0%. Tables 10 and 12 present the experimental results, respectively, for the datasets O7 to O9 and F10 to SC35. For all the best found solutions we report %E
                           avg and %E
                           max. As can be observed, the largest value of %E
                           max was 0.0095 %, which for a facility with an area of 100 units corresponds to a negligible reduction of only 0.0095 units.


                           Table 10 reports the best cost solutions found by BRKGA-LP, over 10 runs, and six other approaches from the literature for datasets O7 to O9. Even though the computational times reported by the other approaches might not be comparable, we report them, if available, in Table 11.

The best costs obtained by BRKGA-LP are very similar to those of the other approaches. The best solutions reported in Table 10 vary only slightly; this may be due to different approximations of the area of facilities (e.g., Castillo and Westerlund (2005) reports the best values but has a %E
                           max equal to 0.05, 0.15 and 0.30, respectively, for O7, O8 and O9, while BRKGA-LP has %E
                           max values equal to 0.0030, 0.0012, and 0040 which are at least one order of magnitude smaller).

As can be observed in Table 11 the computational times of BRKGA-LP and STaST are small and similar and vary from 4.3 s to 12.77 s. However, the other approaches run in computational times that are between 115 and 6676 times greater than those of BRKGA-LP.

The final solutions generated by BRKGA-LP for datasets O7-O9 are shown in the appendix in Figs. 16
                            and 17
                           .


                           Table 12 reports the cost for the best solutions found by BRKGA-LP, over 10 runs, and ten other approaches from the literature for datasets F10 to SC35. Even though the computational times reported by the other approaches might not be comparable we report them, if available, in Table 13.

As can be observed in Table 12 the layout costs obtained by BRKGA-LP, with the exception of those for dataset SC30, are better than or equal to (less than 0.1% deviation) the best found costs reported by any other approach in this study. BRKGA-LP improved the best known solution costs for datasets VC10, BA14, TAM20, TAM30, and SC35 by, 0.21%, 1.24%, 0.89%, 1.42%, and 2.03%, respectively. Given that these datasets have been extensively studied in the literature, the improvements over the previously best-known solutions are significant. Also, given the small area approximation errors for these datasets, we believe that the achieved improvements cannot be attributed to the area
                           
                           
                            approximation.

The computational times reported in Table 13 show that BRKGA-LP takes significantly less computing time when compared with the similar approaches MIP-MINLP, GA-SP-MIP, GA-LP, and SA-MIP. However, the approaches using a smaller search domain with slicing trees or flexible bays, like PSO-RFBS(of Kulturel-Konak & Konak (2011a)) and ACO-LS-FSB (of Kulturel-Konak & Konak (2011b)) use significantly less computing time but generate solutions with higher layout costs.

The final solutions generated by BRKGA-LP for datasets F10 to SC35 are shown in Figures 17, 18, 19, 20, and 21.

In this paper we present a biased random-key genetic algorithm (BRKGA) for the unequal area facility layout problem where a set of rectangular facilities with a given area requirements have to be placed, without overlapping, on a rectangular floor space, so as to minimize the quadratic cost of products of inter-facility flows and inter-facility distances. The hybrid approach combines a BRKGA, to determine the order of placement and the dimensions of each facility, a novel placement strategy, to position each facility, and a linear programming model, to fine-tune the solutions. The unconstrained version of the approach generates high-quality solutions in relatively small computing times. The constrained version of the algorithm, BRKGA-LP, uses the solutions generated by BRKGA and tries to improves them in terms of cost and feasibility using a linear programming model. The approach is tested on 100 random datasets and 28 benchmark datasets taken from the literature and compared against 21 other solution approaches proposed in the literature. The unconstrained version BRKGA improved the best known solutions for 14 of the 16 benchmark datasets while the constrained version BRKGA-LP improved the best known solutions for 5 of the 12 extensively studied benchmark datasets.

@&#ACKNOWLEDGMENTS@&#

This work has been partially supported by projects PTDC/EGE-GES/117692/2010 and NORTE-07-0124-FEDER-000057 funded by the North Portugal Regional Operational Programme (ON.2 – O Novo Norte), under the National Strategic Reference Framework (NSRF), through the European Regional Development Fund (ERDF) and the Programme COMPETE, and by national funds, through the Portuguese funding agency, Fundação para a Ciência e a Tecnologia (FCT). The work of Mauricio G.C. Resende was done while he was employ ed by AT&T Labs Research in Middletown, New Jersey, U.S.A.

@&#REFERENCES@&#

