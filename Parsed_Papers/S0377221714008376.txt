@&#MAIN-TITLE@&#An exact solution algorithm for maximizing the fleet availability of a unit of aircraft subject to flight and maintenance requirements

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We present an integer programming model for maximizing the fleet availability of a unit of aircraft.


                        
                        
                           
                           We develop an exact solution algorithm for solving this model.


                        
                        
                           
                           We present results evaluating the performance of this algorithm.


                        
                        
                           
                           This algorithm solves realistic problems much faster than two optimization software packages.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Mixed integer programming

Fleet availability

Flight and Maintenance Planning

Exact solution algorithm

Valid inequalities

@&#ABSTRACT@&#


               
               
                  We address the Flight and Maintenance Planning (FMP) problem, i.e., the problem of deciding which available aircraft to fly and for how long, and which grounded aircraft to perform maintenance operations on in a group of aircraft that comprise a unit. The aim is to maximize the unit fleet availability over a multi-period planning horizon, while also ensuring that certain flight and maintenance requirements are satisfied. Heuristic approaches that are used in practice to solve the FMP problem often perform poorly, generating solutions that are far from the optimum. On the other hand, the exact optimization models that have been developed to tackle the problem handle small problems effectively, but tend to be computationally inefficient for larger problems, such as the ones that arise in practice. With these in mind, we develop an exact solution algorithm for the FMP problem, which is capable of identifying the optimal solution of considerably large realistic problems in reasonable computational times. The algorithm solves suitable relaxations of the original problem, utilizing valid cuts that guide the search towards the optimal solution. We present extensive experimental results, which demonstrate that the algorithm's performance on realistic problems is superior to that of two popular commercial optimization software packages, whereas the opposite is true for a class of problems with special characteristics that deviate considerably from those of realistic problems. The important conclusion of this research is that the proposed algorithm, complemented by generic optimization software, can handle effectively a large variety of FMP problem instances.
               
            

@&#INTRODUCTION@&#

Flight and Maintenance Planning (FMP) is an important decision making problem arising on the operational level of numerous types of mission fleets, involving military or fire-fighting aircraft, rescue choppers, etc. The objective is to maximize the fleet availability of a unit of mission aircraft over a multi-period planning horizon, while also ensuring that certain flight and maintenance requirements are satisfied. Simple heuristic techniques that are used in practice to solve the FMP problem often perform poorly, generating solutions that are far from the optimum. On the other hand, the exact optimization models that have been developed to tackle the problem handle small problems effectively, but tend to be computationally inefficient for larger problems, such as the ones that arise in practice, forcing researchers to resort to heuristics for solving them.

To overcome these obstacles, in this work we develop an exact solution algorithm for the FMP problem, which is capable of identifying the optimal solution of considerably large realistic problems in very reasonable computational times. Initially, the algorithm obtains a valid upper bound on the optimal fleet availability by solving a simplified relaxation of the original problem. In subsequent iterations, this bound is gradually reduced, until a feasible solution is identified. Solutions encountered along the search procedure that do not qualify for feasibility and therefore cannot be optimal are excluded from further consideration through the addition of suitable valid inequalities (cuts). The algorithm terminates when the first feasible solution that attains the current fleet availability bound is identified, which, naturally, comprises the optimal solution of the problem.

A preliminary version of this paper was presented at an international conference (Gavranis & Kozanidis, 2013). With respect to that work, this paper presents additional theoretical findings, further algorithmic details, and considerably more extensive computational results. Its remainder is structured as follows. In Section 2 we summarize the related literature and we present a mixed integer linear programming (MILP) formulation for the FMP problem in Section 3. In Section 4 we develop the proposed solution algorithm, and in Section 5 we present experimental results evaluating its computational performance. In Section 6 we discuss some interesting model extensions, and in Section 7 we summarize this work and we point to promising directions for future research.

@&#LITERATURE REVIEW@&#

Numerous problems dealing with the optimization of aircraft operations have been investigated in the past. In this section, we review the related literature, focusing mostly on works that address military related applications. First, we review works in the general field of military aircraft maintenance. Then, we turn our attention to papers that employ special purpose techniques in order to address the problem of scheduling military aircraft for maintenance inspections and mission assignments. We conclude with a review of the papers which are directly related to the problem that we address.

The increasing importance of effective military aircraft maintenance was recently recognized by the Operations Research and Management Science community (Horner, 2006). The 2006 Franz Edelman INFORMS Award for outstanding operations research and management science practice was bestowed on Warner Robins Air Logistics Center (WR-ALC). WR-ALC, located in Georgia, U.S., is responsible for the repair, modification and overhaul of various mission aircraft of the U.S. Air Force, such as the F-15 Eagle and Strike Eagle, the C-130 Hercules models, the C-5 Galaxy, the C-17 Globemaster III, as well as their respective avionics system components. Working with Realization Technologies and faculty from the University of Tennessee, WR-ALC used an operations research technique called Critical Chain to reduce the number of C-5 aircraft undergoing repair and overhaul in the depot from twelve to seven in just eight months. As a direct consequence, the time required to repair and overhaul the C-5 aircraft was reduced by 33 percent.


Several published works address the problem of assigning a group of available aircraft to missions and repair activities, so as to establish a high level of unit readiness. This is the case with the work of Safaei, Banjevic, and Jardine (2011), who develop a mixed integer optimization model to formulate the problem of workforce-constrained maintenance scheduling for a fleet of military aircraft. The goal is to maximize the aircraft that can be assigned to missions under maintenance scheduling and workforce availability constraints. The model utilizes a network flow structure in order to simulate the flow of aircraft between missions, the hangar and the repair shop, and is solved with generic optimization software. In a recent related work, Bajestani and Beck (2013) address a dynamic repair shop scheduling problem that takes into consideration flight requirements, aircraft failures, as well as maintenance related capacity constraints. The goal is to assign aircraft to flights and schedule repair jobs, so as to maximize the coverage of the unit flight requirements. The authors accommodate the stochasticity that the problem exhibits by decomposing it into smaller static sub-problems, and propose several alternative solution methodologies, including mixed integer programming, constraint programming, logic-based Benders decomposition, and heuristics.

The U.S. Department of the Army has released a Field Manual on Army Aviation Maintenance, which describes a practical “sliding scale scheduling” or “aircraft flowchart” graphical tool for scheduling aircraft for phase/periodic inspection and deciding which aircraft should fly in certain missions (US DoA, 2000). In a relatively recent work, Rosenzweig, Domitrović, and Bubić (2010) develop a MILP to formulate the sliding scale method for deciding the aircraft flight times. This model minimizes the penalty associated with the deviation of the aircraft flight times from their diagonal target values, but does not consider the maintenance requirements and the impact that they can have on the fleet availability of the unit. The authors solve the model with generic optimization software and illustrate its application on a small fleet of training aircraft. Utilizing the aircraft flowchart, Kozanidis, Gavranis, and Kostarelou (2012) develop a mixed integer nonlinear optimization model and a solution algorithm that accommodate a single-period planning horizon for the FMP problem. In contrast, the solution algorithm that we develop in this work accommodates a multi-period framework.

Although FMP is an important decision making problem encountered in several diversified areas, the relevant published research is rather limited. Sgaslik (1994) introduces a decision support system for maintenance planning and mission assignment of a helicopter fleet that partitions the master problem into two sub-problems which are solved separately. The first sub-problem is called the Yearly Planning Model (YPM). The YPM assigns helicopters to inspections and exercises, while also providing their maintenance schedule and their flight hour distribution. The second model is called the Short Term Planning Model (STPM). The STPM takes as input the maintenance schedule produced by the YPM and returns the helicopters’ mission assignments. The author develops two elastic mixed integer programs to formulate these two sub-problems and solves them using standard optimization software. The YPM minimizes the cost associated with the violation of some of the problem's constraints (e.g., those referring to the required flight time, the maintenance capacity and the flight time of each individual aircraft), while also maintaining a given lower bound on the fleet availability.


                     Pippin (1998) develops a MILP and a quadratic program for the FMP problem, which try to find a flight hour allocation that ensures a steady-state sequence of aircraft into phase maintenance. Both these models minimize the cost associated with the deviations of the individual aircraft residual flight times from their diagonal line target values, but neither of them incorporates the apparent difficulties introduced by the maintenance aspect of the problem. Kozanidis (2009) proposes a multi-objective MILP model for the FMP problem that maximizes the minimum aircraft and flight time availability of the wing (main unit) and of the squadrons (sub-units) that comprise it. This work was extended by Kozanidis, Liberopoulos, and Pitsilkas (2010) through the development of a single objective optimization model that adopts one out of these objectives and incorporates the remaining ones through suitable constraints. Due to the computational complexity of the aforementioned models, the authors resort to heuristics for solving them (Kozanidis, Gavranis, & Liberopoulos, 2014).

Finally, Cho (2011) develops a MILP to model the FMP problem. The proposed formulation generates a daily flight and maintenance plan that distributes the maintenance workload evenly across the planning horizon. The main difference that this model exhibits with respect to the one that we address in the current work is that it uses different definitions for the objective function and for the flight requirements of the unit. With respect to the former, that model minimizes the maximum number of aircraft in maintenance at any given time in order to smoothen the variability of the maintenance demand over time. With respect to the latter, it translates the original flight load requirements into specific flight assignments, which are successively assigned to the aircraft of the unit. The author also considers a two-stage formulation that disaggregates the problem in order to determine the flight and maintenance decisions separately. All the decisions related to either the flight or the maintenance schedule are made in the first stage, while the remaining ones are determined in the second one. Both the single and the two stage models are solved with generic optimization software, although a discussion that proposes equivalent alternative formulations and potential heuristic solution approaches is also included.

We consider a fleet (typically, a combat wing), comprised of several aircraft. In order to retain the readiness of the unit at a high level, the unit command issues at the beginning of each planning horizon suitable flight requirements, which determine the total flight time that must be fulfilled by the aircraft of the unit in each associated time period. These requirements are also referred to as flight load in the related military literature.

We define the residual flight time of each individual aircraft as the total remaining time that this aircraft can fly until it has to undergo a scheduled maintenance check. This time is also referred to as bank time in the related military literature (US DoA, 2000). The residual flight time of an aircraft is positive if and only if this aircraft is available to fly. Similarly, we define the residual maintenance time of each individual aircraft as the total remaining time that this aircraft needs in order to complete its maintenance service. The residual maintenance time of an aircraft is positive if and only if this aircraft is undergoing a maintenance check and is therefore not available to fly.

For the maintenance needs of the unit, there exists a station responsible for providing service to the aircraft of the unit. This station has certain space (also referred to as dock space) and time capacity capabilities. Given the flight requirements of the unit, and the physical constraints that stem from the capacity of the maintenance station, the aim of the FMP problem is to issue a flight and maintenance plan for each individual aircraft, so that the unit readiness to respond to external threats is maximized. The FMP problem refers mainly to the intermediate level scheduled maintenance, also called phased maintenance, which is a time consuming activity that may lead to extended grounding of the aircraft, and, as a consequence, affect adversely the unit fleet availability.

Having presented the formal definition of the FMP problem, we present next a MILP model for its formulation. This model adopts the following mathematical notation:


                     
                        Sets


                        
                           N:
                        
                           set of unit aircraft.

number of time periods in the planning horizon,

flight requirements of time period t (flight load),

time capacity of the maintenance station in time period t,

space capacity of the maintenance station (dock space),

residual flight time of an aircraft immediately after it exits the maintenance station (phase),

residual maintenance time of an aircraft immediately after it enters the maintenance station,

state (0/1) of aircraft n at the first period of the planning horizon,

residual flight time of aircraft n at the first period of the planning horizon,

residual maintenance time of aircraft n at the first period of the planning horizon,

maximum flight time of an aircraft in a single time period,

lower bound on the residual flight time of an available aircraft,

lower bound on the residual maintenance time of a grounded aircraft,

a sufficiently large number.

binary decision variable that takes the value 1 if aircraft n is available in time period t, and 0 otherwise,

residual flight time of aircraft n at the beginning of time period t (bank time),

flight time of aircraft n in time period t,

residual maintenance time of aircraft n at the beginning of time period t,

maintenance time of aircraft n in time period t,

binary decision variable that takes the value 1 if aircraft n exits the maintenance station at the beginning of time period t, and 0 otherwise,

binary decision variable that takes the value 1 if aircraft n enters the maintenance station for service at the beginning of time period t, and 0 otherwise,

auxiliary binary decision variables.

Utilizing this notation, the FMP problem is formulated as follows:

                        
                           (1)
                           
                              
                                 
                                    Max
                                    
                                    CFA
                                    =
                                 
                                 
                                    ∑
                                    
                                       t
                                       =
                                       2
                                    
                                    
                                       T
                                       +
                                       1
                                    
                                 
                                 
                                    
                                       ∑
                                       
                                          n
                                          ∈
                                          N
                                       
                                    
                                    
                                       y
                                       
                                          n
                                          ,
                                          t
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (2)
                           
                              
                                 s
                                 
                                    .
                                    t
                                 
                                 .
                                 
                                 
                                    
                                       
                                          y
                                          n
                                       
                                    
                                    
                                       ,
                                       t
                                       +
                                       1
                                    
                                 
                                 =
                                 
                                    y
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 −
                                 
                                    x
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 +
                                 Y
                                 
                                    d
                                    
                                       n
                                       ,
                                       t
                                       +
                                       1
                                    
                                 
                                 ,
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (3)
                           
                              
                                 
                                    d
                                    
                                       n
                                       ,
                                       t
                                       +
                                       1
                                    
                                 
                                 ≥
                                 
                                    a
                                    
                                       n
                                       ,
                                       t
                                       +
                                       1
                                    
                                 
                                 −
                                 
                                    a
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ,
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    a
                                    
                                       n
                                       ,
                                       t
                                       +
                                       1
                                    
                                 
                                 −
                                 
                                    a
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 +
                                 1.1
                                 
                                    (
                                    
                                       1
                                       −
                                       
                                          d
                                          
                                             n
                                             ,
                                             t
                                             +
                                             1
                                          
                                       
                                    
                                    )
                                 
                                 ≥
                                 0.1
                                 ,
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (5)
                           
                              
                                 
                                    g
                                    
                                       n
                                       ,
                                       t
                                       +
                                       1
                                    
                                 
                                 =
                                 
                                    g
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 −
                                 
                                    h
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 +
                                 G
                                 
                                    f
                                    
                                       n
                                       ,
                                       t
                                       +
                                       1
                                    
                                 
                                 ,
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (6)
                           
                              
                                 
                                    f
                                    
                                       n
                                       ,
                                       t
                                       +
                                       1
                                    
                                 
                                 ≥
                                 
                                    a
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 −
                                 
                                    a
                                    
                                       n
                                       ,
                                       t
                                       +
                                       1
                                    
                                 
                                 ,
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (7)
                           
                              
                                 
                                    a
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 −
                                 
                                    a
                                    
                                       n
                                       ,
                                       t
                                       +
                                       1
                                    
                                 
                                 +
                                 1.1
                                 
                                    (
                                    
                                       1
                                       −
                                       
                                          f
                                          
                                             n
                                             ,
                                             t
                                             +
                                             1
                                          
                                       
                                    
                                    )
                                 
                                 ≥
                                 0.1
                                 ,
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (8)
                           
                              
                                 
                                    ∑
                                    
                                       n
                                       ∈
                                       N
                                    
                                 
                                 
                                    x
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 =
                                 
                                    S
                                    t
                                 
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (9)
                           
                              
                                 
                                    ∑
                                    
                                       n
                                       ∈
                                       N
                                    
                                 
                                 
                                    h
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ≤
                                 
                                    B
                                    t
                                 
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (10)
                           
                              
                                 
                                    ∑
                                    
                                       n
                                       ∈
                                       N
                                    
                                 
                                 
                                    (
                                    1
                                    −
                                    
                                       a
                                       
                                          n
                                          ,
                                          t
                                       
                                    
                                    )
                                    ≤
                                    C
                                 
                                 ,
                                 
                                 t
                                 =
                                 2
                                 ,
                                 …
                                 ,
                                 T
                                 +
                                 1
                              
                           
                        
                     
                     
                        
                           (11)
                           
                              
                                 
                                    B
                                    t
                                 
                                 ≤
                                 
                                    ∑
                                    
                                       n
                                       ∈
                                       N
                                    
                                 
                                 
                                    h
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 +
                                 K
                                 
                                    (
                                    1
                                    −
                                    
                                       q
                                       t
                                    
                                    )
                                 
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (12)
                           
                              
                                 
                                    ∑
                                    
                                       n
                                       ∈
                                       N
                                    
                                 
                                 
                                    g
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ≤
                                 
                                    ∑
                                    
                                       n
                                       ∈
                                       N
                                    
                                 
                                 
                                    h
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 +
                                 K
                                 
                                    q
                                    t
                                 
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (13)
                           
                              
                                 
                                    y
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 +
                                 K
                                 
                                    p
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ≤
                                 K
                                 ,
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (14)
                           
                              
                                 
                                    a
                                    
                                       n
                                       ,
                                       t
                                       +
                                       1
                                    
                                 
                                 ≤
                                 
                                    (
                                    
                                       
                                          y
                                          
                                             n
                                             ,
                                             t
                                          
                                       
                                       −
                                       
                                          x
                                          
                                             n
                                             ,
                                             t
                                          
                                       
                                    
                                    )
                                 
                                 K
                                 +
                                 K
                                 
                                    p
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ,
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (15)
                           
                              
                                 
                                    g
                                    
                                       n
                                       t
                                    
                                 
                                 +
                                 K
                                 
                                    r
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ≤
                                 K
                                 ,
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (16)
                           
                              
                                 1
                                 −
                                 
                                    a
                                    
                                       n
                                       ,
                                       t
                                       +
                                       1
                                    
                                 
                                 ≤
                                 
                                    (
                                    
                                       
                                          g
                                          
                                             n
                                             ,
                                             t
                                          
                                       
                                       −
                                       
                                          h
                                          
                                             n
                                             ,
                                             t
                                          
                                       
                                    
                                    )
                                 
                                 K
                                 +
                                 K
                                 
                                    r
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ,
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (17)
                           
                              
                                 
                                    y
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ≤
                                 Y
                                 
                                    a
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ,
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 2
                                 ,
                                 …
                                 ,
                                 T
                                 +
                                 1
                              
                           
                        
                     
                     
                        
                           (18)
                           
                              
                                 
                                    g
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ≤
                                 G
                                 
                                    (
                                    
                                       1
                                       −
                                       
                                          a
                                          
                                             n
                                             ,
                                             t
                                          
                                       
                                    
                                    )
                                 
                                 ,
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 2
                                 ,
                                 …
                                 ,
                                 T
                                 +
                                 1
                              
                           
                        
                     
                     
                        
                           (19)
                           
                              
                                 
                                    x
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ≤
                                 
                                    X
                                    
                                       m
                                       a
                                       x
                                    
                                 
                                 
                                    a
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ,
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (20)
                           
                              
                                 
                                    y
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ≥
                                 
                                    Y
                                    
                                       m
                                       i
                                       n
                                    
                                 
                                 
                                    a
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ,
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 2
                                 ,
                                 …
                                 ,
                                 T
                                 +
                                 1
                              
                           
                        
                     
                     
                        
                           (21)
                           
                              
                                 
                                    g
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ≥
                                 
                                    G
                                    
                                       m
                                       i
                                       n
                                    
                                 
                                 
                                    (
                                    
                                       1
                                       −
                                       
                                          a
                                          
                                             n
                                             ,
                                             t
                                          
                                       
                                    
                                    )
                                 
                                 ,
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 2
                                 ,
                                 …
                                 ,
                                 T
                                 +
                                 1
                              
                           
                        
                     
                     
                        
                           (22)
                           
                              
                                 
                                    x
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ≤
                                 
                                    y
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ,
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (23)
                           
                              
                                 
                                    h
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ≤
                                 
                                    g
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ,
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (24)
                           
                              
                                 
                                    a
                                    
                                       n
                                       ,
                                       1
                                    
                                 
                                 =
                                 A
                                 
                                    1
                                    n
                                 
                                 ,
                                 
                                 n
                                 ∈
                                 N
                              
                           
                        
                     
                     
                        
                           (25)
                           
                              
                                 
                                    y
                                    
                                       n
                                       ,
                                       1
                                    
                                 
                                 =
                                 Y
                                 
                                    1
                                    n
                                 
                                 ,
                                 
                                 n
                                 ∈
                                 N
                              
                           
                        
                     
                     
                        
                           (26)
                           
                              
                                 
                                    g
                                    
                                       n
                                       ,
                                       1
                                    
                                 
                                 =
                                 G
                                 
                                    1
                                    n
                                 
                                 ,
                                 
                                 n
                                 ∈
                                 N
                              
                           
                        
                     
                     
                        
                           (27)
                           
                              
                                 
                                    x
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ,
                                 
                                    h
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ≥
                                 0
                                 ;
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (28)
                           
                              
                                 
                                    y
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ,
                                 
                                    g
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ≥
                                 0
                                 ;
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 2
                                 ,
                                 …
                                 ,
                                 T
                                 +
                                 1
                              
                           
                        
                     
                     
                        
                           (29)
                           
                              
                                 
                                    p
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ,
                                 
                                    r
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ,
                                 
                                    q
                                    t
                                 
                                 binary
                                 ,
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 T
                              
                           
                        
                     
                     
                        
                           (30)
                           
                              
                                 
                                    a
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ,
                                 
                                    d
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 ,
                                 
                                    f
                                    
                                       n
                                       ,
                                       t
                                    
                                 
                                 
                                    binary
                                    ,
                                 
                                 
                                 n
                                 ∈
                                 N
                                 ,
                                 
                                 t
                                 =
                                 2
                                 ,
                                 …
                                 ,
                                 T
                                 +
                                 1
                              
                           
                        
                     
                  

The objective function (1) maximizes the cumulative residual flight time availability (CFA) of the unit over the entire planning horizon, which is expressed as the sum of the individual time period availabilities. There are many alternative model objectives for the problem that we address; therefore, this choice should be made very carefully. We chose to adopt the CFA because it is one of the most representative performance measures that officials use in practice to monitor the effectiveness of a unit, while also being in direct alignment with the general aim of maximizing the unit fleet availability. Additionally, this choice was made because among all the alternative objectives that we considered, the CFA poses by far the most difficulties to a typical optimization solver, as confirmed by the computational results that we present in Section 5.

The availability of the first period is fixed; therefore, it is not included in the objective function. In order to ensure a smooth and continuous application of the model that extends into the future, the expression for the objective also includes the availability of time period T + 1. Constraint set (2) updates the residual flight time of each aircraft at the beginning of the next period, based on its residual flight time at the beginning of the previous period and the time that it flies during that period. Binary variable dn
                     
                     ,
                     
                        t
                      takes the value 1 only when the corresponding aircraft exits the maintenance station at the beginning of time period t. In this case, its residual flight time is reset to Y (also referred to as phase interval). Similarly, constraint set (5) updates the residual maintenance time of each aircraft at the beginning of the next period, based on its residual maintenance time at the beginning of the previous period and the time that it receives maintenance during that period. Binary variable fn
                     
                     ,
                     
                        t
                      takes the value 1 only when the corresponding aircraft enters the maintenance station for service at the beginning of time period t. In this case, its residual maintenance time is reset to G.

Constraint sets (3), (4), (6) and (7) ensure that variables dn
                     
                     ,
                     
                        t
                      and fn
                     
                     ,
                     
                        t
                      take correct values, based on the values of variables an
                     
                     ,
                     
                        t
                     . More specifically, consider the nth aircraft. Then, (an
                     
                     ,
                     
                        t, an
                     
                     ,
                     
                        t+
                     
                     1) can take any of the values (0, 1), (0, 0), (1, 0) and (1, 1), while the difference (an
                     
                     ,
                     
                        t+
                     
                     1 − an
                     
                     ,
                     
                        t
                     ) in each of these cases is equal to 1, 0, −
1 and 0, respectively. Variable dn
                     
                     ,
                     
                        t+
                     
                     1 should take the value 1 when (an
                     
                     ,
                     
                        t, an
                     
                     ,
                     
                        t+
                     
                     1) = 
(0, 1) and this is ensured by constraint set (3). In any other case, dn
                     
                     ,
                     
                        t+
                     
                     1 should be equal to 0 and this is ensured by constraint set (4). Similarly, variable fn
                     
                     ,
                     
                        t+
                     
                     1 should take the value 1 when (an
                     
                     ,
                     
                        t, an
                     
                     ,
                     
                        t+
                     
                     1) = 
(1, 0) and this is ensured by constraint set (6). In any other case, fn
                     
                     ,
                     
                        t+
                     
                     1 should be equal to 0 and this is ensured by constraint set (7).

Constraint set (8) ensures that the flight load requirements of each time period are satisfied, while constraint sets (9) and (10) ensure that the time and space capacity constraints of the maintenance station are not violated in any time period. Constraint sets (11) and (12) ensure that the maintenance station does not remain idle whenever there is at least one aircraft waiting for service. With the introduction of the auxiliary binary variable qt
                     , it is ensured that the total maintenance time provided by the station in time period t will be equal to the minimum between the total time capacity of the station, and the total maintenance requirements in the same period.

Constraint sets (13) and (14) ensure that an aircraft's availability ceases as soon as its residual flight time drops to 0. If yn
                     
                     ,
                     
                        t
                      > 
0, the auxiliary binary decision variable pn
                     
                     ,
                     
                        t
                      in constraint (13) is forced to 0-value. In this case, constraint (14) forces an
                     
                     ,
                     
                        t
                     
                     +1 to 0-value if yn
                     
                     ,
                     
                        t
                      = 
xn
                     
                     ,
                     
                        t
                     , since this implies that the residual flight time of this aircraft drops to 0 at the end of period t. Similarly, constraint sets (15) and (16) ensure that an aircraft becomes available as soon as its residual maintenance time drops to 0. If gn
                     
                     ,
                     
                        t
                      > 
0, the auxiliary binary decision variable rn
                     
                     ,
                     
                        t
                      in constraint (15) is forced to 0-value. In this case, constraint (16) forces an
                     
                     ,
                     
                        t
                     
                     +1 to 1 if gn
                     
                     ,
                     
                        t
                      = 
hn
                     
                     ,
                     
                        t
                     , since this implies that the residual maintenance time of this aircraft drops to 0 at the end of period t.

Constraint set (17) states that the residual flight time of an aircraft cannot exceed Y, and ensures that it is equal to 0 whenever this aircraft is grounded. Similarly, constraint set (18) states that the residual maintenance time of an aircraft cannot exceed G, and ensures that it is equal to 0 whenever this aircraft is available. Constraint set (19) imposes an upper bound on the maximum time that an aircraft can fly during a single time period. Such a restriction is usually present due to technical reasons. Constraint set (20) imposes a lower bound on the residual flight time of each available aircraft, while constraint set (21) imposes a lower bound on the residual maintenance time of each non-available aircraft. These two bounds are mainly introduced to guard against accuracy errors that may arise during the implementation of the model, since they do not allow an aircraft to end up with negligible but positive residual flight or maintenance time.

There exists a rare special case in which constraints (11), (12) and (21) cannot be all satisfied simultaneously. This happens when both 
                        
                           
                              B
                              t
                           
                           <
                           
                              ∑
                              
                                 n
                                 ∈
                                 N
                              
                           
                           
                              g
                              
                                 n
                                 ,
                                 t
                              
                           
                        
                      and, at the same time, utilizing Bt
                      fully by forcing 
                        
                           
                              ∑
                              
                                 n
                                 ∈
                                 N
                              
                           
                           
                              h
                              
                                 n
                                 ,
                                 t
                              
                           
                        
                      to be equal to Bt
                      (the minimum between Bt
                      and 
                        
                           
                              ∑
                              
                                 n
                                 ∈
                                 N
                              
                           
                           
                              g
                              
                                 n
                                 ,
                                 t
                              
                           
                        
                     ), as required by constraints (11) and (12), results inevitably in one or more grounded aircraft with residual maintenance time positive but strictly smaller than Gmin
                      at the end of time period t. For example, if Gmin
                      = 
0.1, B
                     1 = 
0.05 and there is only one grounded aircraft at the beginning of the planning horizon with residual maintenance time equal to 0.1, then the problem is infeasible. This is because there is no feasible way to utilize B
                     1 fully without violating the restriction that the residual maintenance time of every grounded aircraft must be greater or equal to Gmin
                     . A similar situation can arise when the satisfaction of the flight load results in one or more available aircraft with residual flight time strictly smaller than Ymin
                      at the end of the current period. Kozanidis et al. (2012) illustrate how this situation can be handled, both from a practical, as well as from a mathematical point of view. Since these cases are non-realistic, extremely rare and have a negligible practical effect, we ignore them completely in what follows, and we do not resort to the methodology proposed by Kozanidis et al. (2012).

Constraint set (22) ensures that the total time an aircraft flies during a single period does not exceed its residual flight time at the beginning of the same period. Similarly, constraint set (23) ensures that the total time the maintenance crew works on an aircraft during a single period does not exceed the residual maintenance time of this aircraft at the beginning of the same period. Constraint sets (24), (25) and (26) initialize the state of the system at the first period of the planning horizon. When an aircraft has just exited or entered the maintenance station at the first period of the planning horizon, this is directly incorporated in the values of variables yn
                     
                     ,1 or hn
                     
                     ,1; therefore, variables dn
                     
                     ,1 and fn
                     
                     ,1 are never used. Finally, expressions (27), (28) and (29), (30) are the non-negativity and the integrality constraints, respectively.

Parameters Y and G are aircraft-type specific, but remain fixed for all the aircraft of the same type. This is also the case in the problem that we address, justifying the assumption of a uniform Y and G-value for all the aircraft of the unit. Parameter Y is always prescribed by the aircraft manufacturer and is very crucial to the maintenance program for safety reasons. Parameter G reflects the actual time needed for a regular maintenance service of the aircraft. This time is usually constant for aircraft of the same type, since their maintenance consists of performing a fixed sequence of tasks, unless a major failure is discovered during inspection.

The solution algorithm that we develop for the FMP problem utilizes the fact that the CFA of the unit depends solely on the combination of aircraft that enter and exit the maintenance station over the planning horizon, and that the number of such combinations is finite. As a consequence, the domain that is comprised of possible CFA values is a discrete set. Initially, the algorithm identifies a valid upper bound on the optimal CFA, by solving a simplified relaxation of the original problem; then this bound is gradually decreased, until a feasible flight and maintenance plan is found.

It can be shown that if Problem (1)–(30) has one or more optimal solutions, then at least one of them preserves a steady rotation of aircraft into and out of the maintenance station, in non-decreasing order of their residual flight/maintenance times. In practice, no such restriction is present. Aircraft are allowed to enter and exit the maintenance station in any feasible order, while their indices are updated accordingly to represent their resulting relative order. With this in mind, the index representing the relative order of each aircraft at the beginning of the next period should be a decision variable allowed to take any feasible value. Adding this degree of freedom, however, complicates the solution of the problem unnecessarily, without providing any advantage whatsoever; therefore, the algorithm that we develop next adopts the assumption that a steady rotation of aircraft into and out of the maintenance station is preserved.

It is relatively easy to prove that this assumption does not affect the optimal objective of the problem. In fact, a similar result has been proven by Kozanidis et al. (2012) for a related problem that fits into a slightly different context. The proof involves exchanging the actions performed on any two aircraft for which this order is not preserved, so as to reinstate it. This can be done straightforwardly, without altering the optimal objective. Repeating this exchange for all such pairs of aircraft leads to an alternative optimal solution for which this order is preserved, which confirms the validity of this result.

In general, several distinct aircraft combinations can result in the same CFA. Each time one such combination is identified, the algorithm checks whether it is feasible, i.e., whether it can be realized by a feasible flight and maintenance plan. If this check is successful, then the algorithm terminates with the solution determined by this combination being optimal. If not, a suitable cut is added to the model, excluding this combination from further consideration. All the cuts pertaining to the same CFA level remain active for as long as this level remains constant. If, at some point, the currently considered CFA level is proven infeasible (i.e., if it cannot be attained by any feasible aircraft combination), then the search for the optimal solution continues to the next (lower) level from the CFA domain set. This renders the cuts associated with the previous level redundant, which are subsequently suppressed.

To check a particular aircraft combination for feasibility, we utilize the original formulation, after adjusting accordingly the model constraints to force its realization. Alternatively, one could directly utilize Problem (1)–(30) in order to check whether a feasible aircraft combination that attains a particular CFA level exists. As it turns out, however, identifying the candidate aircraft combination first and then checking its feasibility is more efficient, at least for the realistic problems that we test in the current work. This is mainly due to the fact that the model that we utilize in order to perform the initial feasibility check on the identified combination is considerably more simplistic than the original model comprised of (1)–(30). As a result, the former model terminates quite fast, whereas the latter one occasionally requires significant time in order to terminate. Taking also into consideration the fact that the number of combinations that the algorithm encounters in the case of realistic problems is quite small (the related results are presented in Section 5), it is not very surprising that this is the case. On the other hand, when this number increases, the opposite behavior is observed, i.e., it is more efficient to apply the original model directly instead. With this discussion in mind, the following three subsections portray in detail each step of the proposed algorithm, while the last one illustrates its application on a small case study.

As determined by constraint (8), the residual flight time availability of the unit reduces by the associated flight load in each time period of the planning horizon, independently of how this flight load is distributed across the aircraft of the unit. Based on this observation, we claim that, as far as the actions of the maintenance station are concerned, the maximum possible CFA level is attained when the maintenance crew works continuously on the grounded aircraft with the lowest residual maintenance time until its service is completed. To get more insight into why this is true, note that interrupting the service of a grounded aircraft once this has begun may lead to a sub-optimal solution, since it can delay the addition of this aircraft's phase interval to the fleet availability of the unit. This would clearly result in lower CFA, since the number of aircraft exiting the station at any individual time period is more heavily weighted in the objective function than that of any succeeding one. Of course, the service of an aircraft may be spread out over more than one time period if the station's time capacity is not sufficient.

Let ent
                         and ext
                         be the number of aircraft that enter and exit, respectively, the maintenance station at the beginning of time period t (t 
= 
2, … , T + 1), and 
                           
                              c
                              
                                 x
                                 t
                              
                              =
                              
                                 ∑
                                 
                                    k
                                    =
                                    2
                                 
                                 t
                              
                              
                                 e
                                 
                                    x
                                    k
                                 
                              
                           
                         be the cumulative number of aircraft that exit the maintenance station from the beginning of the planning horizon up to time period t (t = 2, … , T + 1). In order to show that a first-in-first-out maintenance policy that serves continuously the aircraft with the lowest residual maintenance time until its service is completed always leads to the optimal solution of the problem, we prove next the following result:

                           Proposition 1
                           
                              Maximizing the objective function of Problem 
                              
                                 (1)
                              –
                                 (30)
                               
                              is equivalent to maximizing
                              
                                 
                                    
                                       ∑
                                       
                                          t
                                          =
                                          2
                                       
                                       
                                          T
                                          +
                                          1
                                       
                                    
                                    
                                       c
                                       
                                          x
                                          t
                                       
                                    
                                 
                              .

For t = 2, … , T + 1, the individual residual flight time availability of the unit in time period t is equal to 
                                 
                                    
                                       ∑
                                       
                                          n
                                          ∈
                                          N
                                       
                                    
                                    
                                       y
                                       
                                          n
                                          ,
                                          1
                                       
                                    
                                    −
                                    
                                       ∑
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          t
                                          −
                                          1
                                       
                                    
                                    
                                       S
                                       k
                                    
                                    +
                                    
                                       ∑
                                       
                                          k
                                          =
                                          2
                                       
                                       t
                                    
                                    
                                       (
                                       Y
                                       e
                                       
                                          x
                                          k
                                       
                                       )
                                    
                                    .
                                 
                               Therefore, the objective function value of Problem (1)–(30) is equal to 
                                 
                                    
                                       ∑
                                       
                                          t
                                          =
                                          2
                                       
                                       
                                          T
                                          +
                                          1
                                       
                                    
                                    
                                       (
                                    
                                    
                                       ∑
                                       
                                          n
                                          ∈
                                          N
                                       
                                    
                                    
                                       y
                                       
                                          n
                                          ,
                                          1
                                       
                                    
                                    −
                                    
                                       ∑
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          t
                                          −
                                          1
                                       
                                    
                                    
                                       S
                                       k
                                    
                                    +
                                    
                                       ∑
                                       
                                          k
                                          =
                                          2
                                       
                                       t
                                    
                                 
                              
                              
                                 
                                    
                                       (
                                       Y
                                       e
                                       
                                          x
                                          k
                                       
                                       )
                                    
                                    
                                       )
                                       
                                       =
                                       
                                       T
                                    
                                    
                                       ∑
                                       
                                          n
                                          ∈
                                          N
                                       
                                    
                                    
                                       y
                                       
                                          n
                                          ,
                                          1
                                       
                                    
                                    
                                    −
                                    
                                    
                                    
                                       ∑
                                       
                                          t
                                          =
                                          1
                                       
                                       T
                                    
                                    
                                       (
                                       
                                          (
                                          T
                                          
                                          −
                                          
                                          t
                                          
                                          +
                                          
                                          1
                                          )
                                       
                                       
                                          S
                                          t
                                       
                                       )
                                    
                                    
                                    +
                                    
                                    
                                    
                                       ∑
                                       
                                          t
                                          =
                                          1
                                       
                                       T
                                    
                                    
                                       (
                                       
                                          (
                                          T
                                          
                                          −
                                          
                                          t
                                          
                                          +
                                          
                                          1
                                          )
                                       
                                       Y
                                       e
                                       
                                          x
                                          
                                             t
                                             
                                             +
                                             
                                             1
                                          
                                       
                                       )
                                    
                                 
                              . The only non-constant term subject to optimization in this expression is the last summation, which is equal to TYex
                              2 + (T − 1)Yex
                              3 + ⋅⋅⋅ + Yex
                              
                                 T + 1 = Y(Tex
                              2 + (T − 1)ex
                              3 + ⋅⋅⋅ + ex
                              
                                 T + 1). Therefore, maximizing the objective function of Problem (1)–(30) is equivalent to maximizing the expression 
                                 
                                    
                                       (
                                       
                                          T
                                          e
                                          
                                             x
                                             2
                                          
                                          +
                                          
                                             (
                                             T
                                             −
                                             1
                                             )
                                          
                                          e
                                          
                                             x
                                             3
                                          
                                          +
                                          ⋯
                                          +
                                          e
                                          
                                             x
                                             
                                                T
                                                +
                                                1
                                             
                                          
                                       
                                       )
                                    
                                    =
                                    
                                       ∑
                                       
                                          t
                                          =
                                          1
                                       
                                       T
                                    
                                    
                                       
                                          (
                                          T
                                          −
                                          t
                                          +
                                          1
                                          )
                                       
                                       e
                                       
                                          x
                                          
                                             t
                                             +
                                             1
                                          
                                       
                                    
                                 
                              . Since 
                                 
                                    
                                       ∑
                                       
                                          t
                                          =
                                          2
                                       
                                       
                                          T
                                          +
                                          1
                                       
                                    
                                    
                                       c
                                       
                                          x
                                          t
                                       
                                    
                                    =
                                    
                                       ∑
                                       
                                          t
                                          =
                                          2
                                       
                                       
                                          T
                                          +
                                          1
                                       
                                    
                                    
                                       (
                                       
                                          
                                             ∑
                                             
                                                k
                                                =
                                                2
                                             
                                             t
                                          
                                          
                                             e
                                             
                                                x
                                                k
                                             
                                          
                                       
                                       )
                                    
                                    =
                                    
                                       ∑
                                       
                                          t
                                          =
                                          1
                                       
                                       T
                                    
                                    
                                       
                                          (
                                          T
                                          −
                                          t
                                          +
                                          1
                                          )
                                       
                                       e
                                       
                                          x
                                          
                                             t
                                             +
                                             1
                                          
                                       
                                    
                                 
                              , the validity of the proposition is established.□

As a consequence of Proposition 1, the following result regarding the optimal policy of the maintenance station is now evident.

                           Corollary 1
                           No other maintenance policy can result in higher objective value for Problem (1)–
(30) than a first-in-first-out policy that always services the grounded aircraft with the lowest residual maintenance time continuously until its service is completed.

The validity of the corollary results directly from the fact that no other maintenance policy can result in larger value for 
                           
                              
                                 ∑
                                 
                                    t
                                    =
                                    2
                                 
                                 
                                    T
                                    +
                                    1
                                 
                              
                              
                                 c
                                 
                                    x
                                    t
                                 
                              
                           
                        . Of course, depending on the particular problem instance, the optimal CFA may also be attainable by another maintenance policy; the important finding that we will utilize in the remainder of this work, however, is that the optimal solution will never be overlooked if this maintenance policy is adopted. If the aircraft with the lowest residual maintenance time is not unique, the particular aircraft selection can be made arbitrarily.

The total number of aircraft that exit the station cannot be larger than the corresponding number that results when the total number of aircraft that enter the maintenance station is the maximum possible. Therefore, to compute a valid upper bound on the optimal CFA, we enforce the maximum possible flow of aircraft into the maintenance station by grounding each available aircraft as early as possible. This ensures that the time capacity of the station will be fully utilized and that the maximum possible number of aircraft maintenance services will be completed as early as possible. To expedite the performance of the algorithm, a small subset of the original model constraints are taken into consideration for the calculation of this bound. This implies that the associated aircraft combination that will be identified will not necessarily be feasible. Of course, a subsequent check that confirms or disproves feasibility is always performed on each such combination.

The following pseudo-code outlines the steps of the procedure for obtaining the valid upper bound on the optimal CFA, and facilitates the establishment of its validity which is proven in Proposition 2. To keep this pseudo-code simple and readable, we utilize the following additional mathematical notation:

                           
                              
                                 Cres
                                 : current number of empty aircraft spots at the maintenance station (residual space capacity),


                                 Bres
                                 : currently unused time capacity of the maintenance station (residual time capacity),


                                 TSt
                                 : cumulative flight load requirements of time periods 1, … , t (by convention, TS
                                 0 = 0),


                                 TS_entt
                                 : cumulative flight load that has been fulfilled by the aircraft that have been grounded in time periods 1, … , t (by convention, TS_ent
                                 0 = 0),


                                 tlastn
                                 : the most recent time period aircraft n exited the maintenance station (by convention, tlastn
                                  = 1 if aircraft n has not exited the maintenance station in the current planning horizon yet),


                                 ylastn
                                 : auxiliary variable that is set equal to Y if tlastn
                                  > 1, and yn
                                 
                                 ,1 otherwise,


                                 flag: auxiliary Boolean variable.


                        Procedure CFA-UB
                     


                        
                           Step 0: Preprocessing
                     


                        order the available/grounded aircraft in non-decreasing order of their residual flight/maintenance times


                        set
                        
                           
                              C
                              F
                              A
                              =
                              T
                              
                                 ∑
                                 
                                    n
                                    ∈
                                    N
                                 
                              
                              
                                 y
                                 
                                    n
                                    ,
                                    1
                                 
                              
                           
                        ; set
                        
                           
                              
                                 C
                                 
                                    r
                                    e
                                    s
                                 
                              
                              =
                              C
                              −
                              
                                 ∑
                                 
                                    n
                                    ∈
                                    N
                                 
                              
                              
                                 (
                                 1
                                 −
                                 
                                    a
                                    
                                       n
                                       ,
                                       1
                                    
                                 
                                 )
                              
                              ;
                           
                         
                        set 
                        TS
                        0 = 0; set 
                        TS_ent
                        0 = 
0;

∀n ∈ N 
                        set 
                        tlastn
                         = 
1;


                        
                           Step 1: Iteration
                     


                        for 
                        t = 
1 to T 
                        do
                     


                        set 
                        TSt
                         = 
TSt
                        
                        −
                        1 + 
St
                        ; set 
                        TS_entt
                         = 
TS_entt
                        
                        −
                        1; set 
                        Bres
                         = 
Bt
                        ; set 
                        ext
                        
                        +1 = 
0;


                        while 
                        Bres
                         > 0 & additional grounded aircraft exist do
                     


                        select the grounded aircraft with the lowest residual maintenance time (if more than one such aircraft exist, select one arbitrarily); let q be the index of this aircraft


                        set 
                        gq
                        
                        ,
                        
                           t
                        
                        +1 = 
gq
                        
                        ,
                        
                           t
                         – 
min(gq
                        
                        ,
                        
                           t, Bres
                        ); set 
                        Bres
                         = 
Bres
                         
- 
min(gq
                        
                        ,
                        
                           t, Bres
                        );


                        if 
                        gq
                        
                        ,
                        
                           t
                        
                        +1 = 
0 then
                     


                        set 
                        ext
                        
                        +1 = 
ext
                        
                        +1 + 
1; set 
                        Cres
                         = 
Cres
                         
+ 
1;


                        remove aircraft with index q from the set of grounded aircraft and add it to the set of aircraft which are available at the beginning of time period t + 1; set 
                        yq
                        
                        ,
                        
                           t
                        
                        +1 
= 
Y; set 
                        tlastq
                         
= 
t + 1


                        end if
                     


                        end while
                     


                        set 
                        CFA 
= 
CFA 
+ 
(T −
 t + 1)Yext
                        
                        +1; set 
                        ent
                        
                        +1 
= 
0; set 
                        flag 
= 
true;


                        while (Cres
                         
> 
0) & additional available aircraft exist & (flag 
= 
true) do
                     


                        select the available aircraft with the lowest residual flight time (if more than one such aircraft exist, select one arbitrarily); let q be the index of this aircraft


                        if (tlastq
                         
> 
1) then set 
                        ylastq
                         
= 
Y; else set 
                        ylastq
                         
= 
yq
                        
                        ,1; end if
                     


                        if (ylastq
                         
> 
Xmax
                         × 
(t −
 tlastq
                         + 1)) or (ylastq
                         
+ 
TS_entt
                         
> 
TSt
                        ) then
                     


                        set 
                        flag 
= 
false;


                        else
                     


                        set 
                        TS_entt
                         
= 
TS_entt
                         
+ 
ylastq
                        ; set 
                        ent
                        
                        +1 
= 
ent
                        
                        +1 
+ 
1; set 
                        Cres
                         
= 
Cres
                         
- 
1;


                        remove aircraft with index q from the set of available aircraft and add it to the set of aircraft which are grounded at the beginning of time period t + 1; set 
                        gq
                        
                        ,
                        
                           t
                        
                        +1 
= 
G;


                        end if
                     


                        end while
                     


                        set 
                        CFA 
= 
CFA 
−
 
(T −
 t + 1)St
                        ;


                        end for
                     

Procedure CFA-UB performs two main actions in each time period t. First, it computes the number of aircraft that will finish their service and exit the station at the end of time period t. This is straightforward, given the complete knowledge of the aircraft that are grounded at the beginning of time period t, and Corollary 1. Next, it examines the available aircraft in non-decreasing order of their residual flight times, and checks which of them can be grounded. The grounding of a particular aircraft is feasible only if the remaining aircraft are sufficient for satisfying the flight load requirements. Variables tlastn
                         and ylastn
                         are crucial for this check. If Xmax
                         = 
50, an aircraft with residual flight time 80 
hours needs at least two time periods in order to enter the maintenance station. Moreover, if Y 
= 
300, an aircraft that has just exited the maintenance station needs at least Y/Xmax
                         
= 
300/50 
= 
6 time periods in order to be grounded for service again.

Procedure CFA-UB interrupts the flight time allocation in a particular time period as soon as the first aircraft that cannot be feasibly grounded at the end of this period is identified, since this implies that no other aircraft can be feasibly grounded either. In the above pseudocode, this is signified by variable flag which is set equal to false whenever this situation is detected. To ensure that no feasible solution is ever overlooked, this check is performed separately for each time period. The key assumption when this is done in time period t is that the residual flight time of each aircraft n is equal to ylastn
                         and that no flight time has been allocated yet to this aircraft in time periods tlastn
                        , … , t.

This way, the flight time allocation is limited only to aircraft for which their earliest grounding time period has been determined, which guards against taking decisions that may turn out to be sub-optimal in future time periods. This is exactly why parameters tlastn
                         and ylastn
                         are introduced in the first place. By maintaining the values of these two variables for each aircraft n, we are able to take into account every feasible flight time allocation to aircraft n in time periods tlastn
                        , … , t, which ensures that no feasible aircraft combination will be overlooked. This enables Procedure CFA-UB to compute the maximum possible number of grounded aircraft that can finish their service in each time period, as well as the maximum possible number of available aircraft that can be grounded for service. The above discussion leads to the following crucial result.

                           Proposition 2
                           
                              Procedure CFA-UB provides a valid upper bound on the optimal objective value (CFA) of Problem
                              
                                 (1)
                              
–

                                 (30)
                              .

As far as the maintenance decisions are involved, Corollary 1 ensures that the computed CFA will be the maximum possible. For each time period, the above procedure computes an upper bound on the maximum possible number of aircraft that can cumulatively enter the maintenance station from the beginning of the planning horizon up to this period, thus maximizing the flow of aircraft into the maintenance station. This implies that the actual number of aircraft that enter the maintenance station for service from the beginning of the planning horizon up to the end of time period t for t = 2, … , T + 1 in the optimal solution of the problem cannot be larger than the corresponding number that results from Procedure CFA-UB. Therefore, the optimal CFA cannot be larger than the one provided by Procedure CFA-UB.□

Besides establishing a valid upper bound on the optimal CFA, Procedure CFA-UB also identifies a particular combination of aircraft that enter and exit the maintenance station in each time period of the planning horizon. In what follows, we call this the nominal combination, independently of whether it is feasible or not. Naturally, the nominal is the first combination that the algorithm checks for full feasibility. The particular details of this procedure are presented in the next sub-section.

Checking a particular aircraft combination for feasibility is trivial. Keeping in mind that the order of aircraft is preserved, the check of whether a particular aircraft combination is feasible reduces to a check of whether there exists a feasible flight and maintenance plan that realizes this combination. This is equivalent to checking the original problem formulation for feasibility after fixing the values of all the discrete decision variables which are determined by this combination, i.e., decision variables an
                        
                        ,
                        
                           t, dn
                        
                        ,
                        
                           t, fn
                        
                        ,
                        
                           t, pn
                        
                        ,
                        
                           t, rn
                        
                        ,
                        
                           t
                        , and qt
                        . This simplifies things considerably, since it eliminates completely the combinatorial nature of the original problem; as a result, the feasibility check is not time-consuming.

Suppose now that a particular aircraft combination is proven infeasible. In order to investigate whether the currently considered CFA level can be attained by a different aircraft combination, we need to add a valid inequality that excludes this combination from further consideration. We augment variables ent
                         and ext
                         with a second index that takes the value 0, 1 or 2, as explained next. The index 0 pertains to the nominal combination, the index 1 pertains to the combination at hand that we want to exclude, while the index 2 pertains to any other aircraft combination yet to be discovered by the algorithm. A suitable cut that excludes the infeasible aircraft combination at hand from further consideration is the following: 
                           
                              
                                 ∑
                                 
                                    t
                                    =
                                    2
                                 
                                 
                                    T
                                    +
                                    1
                                 
                              
                              
                                 
                                    |
                                    e
                                 
                                 
                                    
                                       
                                          n
                                          t
                                       
                                    
                                    
                                       ,
                                       1
                                    
                                 
                                 −
                                 e
                                 
                                    
                                       
                                          n
                                          t
                                       
                                    
                                    
                                       ,
                                       2
                                    
                                 
                                 
                                    |
                                 
                              
                              +
                              
                                 ∑
                                 
                                    t
                                    =
                                    2
                                 
                                 
                                    T
                                    +
                                    1
                                 
                              
                              
                                 
                                    |
                                    e
                                 
                                 
                                    
                                       
                                          x
                                          t
                                       
                                    
                                    
                                       ,
                                       1
                                    
                                 
                                 −
                                 e
                                 
                                    
                                       
                                          x
                                          t
                                       
                                    
                                    
                                       ,
                                       2
                                    
                                 
                                 
                                    |
                                 
                              
                              ≥
                              1
                              .
                           
                         In this expression, ent
                        
                        ,2 and ext
                        
                        ,2 (t = 
2, … , T + 1) are decision variables, whereas ent
                        
                        ,1 and ext
                        
                        ,1 (t 
= 
2, … , T + 1) are parameters with known values. The constraint ensures that the number of aircraft exiting and entering the maintenance station in the next combination that will be discovered by the algorithm will differ from the one at hand in at least one time period. Letting W denote the CFA level that is currently being considered, nat
                        
                        ,
                        
                           i
                         be the number of grounded aircraft in time period t (t = 
2, … , T + 1) in the combination that is being excluded (i = 
1) and in the next combination to be discovered (i = 
2), the following mixed integer formulation can be employed to impose the above cut and provide the next candidate aircraft combination:

                           
                              (31)
                              
                                 
                                    
                                       ∑
                                       
                                          t
                                          =
                                          1
                                       
                                       T
                                    
                                    
                                       (
                                       
                                          (
                                          T
                                          −
                                          t
                                          +
                                          1
                                          )
                                       
                                       e
                                       
                                          x
                                          
                                             t
                                             +
                                             1
                                             ,
                                             2
                                          
                                       
                                       )
                                    
                                    =
                                    
                                       
                                          W
                                          −
                                          T
                                          
                                             ∑
                                             
                                                n
                                                ∈
                                                N
                                             
                                          
                                          
                                             y
                                             
                                                n
                                                ,
                                                1
                                             
                                          
                                          +
                                          
                                             ∑
                                             
                                                t
                                                =
                                                1
                                             
                                             T
                                          
                                          
                                             (
                                             
                                                (
                                                T
                                                −
                                                t
                                                +
                                                1
                                                )
                                             
                                             
                                                S
                                                t
                                             
                                             )
                                          
                                       
                                       Y
                                    
                                 
                              
                           
                        
                        
                           
                              (32)
                              
                                 
                                    
                                       ∑
                                       
                                          k
                                          =
                                          2
                                       
                                       t
                                    
                                    
                                       e
                                       
                                          x
                                          
                                             k
                                             ,
                                             2
                                          
                                       
                                    
                                    ≤
                                    
                                       ∑
                                       
                                          k
                                          =
                                          2
                                       
                                       t
                                    
                                    
                                       e
                                       
                                          x
                                          
                                             k
                                             ,
                                             0
                                          
                                       
                                    
                                    ,
                                    
                                    t
                                    =
                                    2
                                    ,
                                    …
                                    ,
                                    T
                                    +
                                    1
                                 
                              
                           
                        
                        
                           
                              (33)
                              
                                 
                                    
                                       ∑
                                       
                                          k
                                          =
                                          2
                                       
                                       t
                                    
                                    
                                       e
                                       
                                          n
                                          
                                             k
                                             ,
                                             2
                                          
                                       
                                    
                                    ≤
                                    
                                       ∑
                                       
                                          k
                                          =
                                          2
                                       
                                       t
                                    
                                    
                                       e
                                       
                                          n
                                          
                                             k
                                             ,
                                             0
                                          
                                       
                                    
                                    ,
                                    
                                    t
                                    =
                                    2
                                    ,
                                    …
                                    ,
                                    T
                                    +
                                    1
                                 
                              
                           
                        
                        
                           
                              (34)
                              
                                 
                                    n
                                    
                                       a
                                       
                                          t
                                          ,
                                          2
                                       
                                    
                                    =
                                    n
                                    
                                       a
                                       
                                          t
                                          −
                                          1
                                          ,
                                          2
                                       
                                    
                                    +
                                    e
                                    
                                       n
                                       
                                          t
                                          ,
                                          2
                                       
                                    
                                    −
                                    e
                                    
                                       x
                                       
                                          t
                                          ,
                                          2
                                       
                                    
                                    ,
                                    
                                    t
                                    =
                                    2
                                    ,
                                    …
                                    ,
                                    T
                                    +
                                    1
                                 
                              
                           
                        
                        
                           
                              (35)
                              
                                 
                                    n
                                    
                                       a
                                       
                                          t
                                          ,
                                          2
                                       
                                    
                                    ≤
                                    C
                                    ,
                                    
                                    t
                                    =
                                    2
                                    ,
                                    …
                                    ,
                                    T
                                    +
                                    1
                                 
                              
                           
                        
                        
                           
                              (36)
                              
                                 
                                    e
                                    
                                       x
                                       
                                          t
                                          ,
                                          2
                                       
                                    
                                    ≤
                                    n
                                    
                                       a
                                       
                                          t
                                          −
                                          1
                                          ,
                                          2
                                       
                                    
                                    ,
                                    
                                    t
                                    =
                                    2
                                    ,
                                    …
                                    ,
                                    T
                                    +
                                    1
                                 
                              
                           
                        
                        
                           
                              (37)
                              
                                 
                                    
                                       ∑
                                       
                                          t
                                          =
                                          2
                                       
                                       
                                          T
                                          +
                                          1
                                       
                                    
                                    
                                       
                                          |
                                          e
                                       
                                       
                                          
                                             
                                                n
                                                t
                                             
                                          
                                          
                                             ,
                                             1
                                          
                                       
                                       −
                                       e
                                       
                                          
                                             
                                                n
                                                t
                                             
                                          
                                          
                                             ,
                                             2
                                          
                                       
                                       
                                          |
                                       
                                    
                                    +
                                    
                                       ∑
                                       
                                          t
                                          =
                                          2
                                       
                                       
                                          T
                                          +
                                          1
                                       
                                    
                                    
                                       
                                          |
                                          e
                                       
                                       
                                          
                                             
                                                x
                                                t
                                             
                                          
                                          
                                             ,
                                             1
                                          
                                       
                                       −
                                       e
                                       
                                          
                                             
                                                x
                                                t
                                             
                                          
                                          
                                             ,
                                             2
                                          
                                       
                                       
                                          |
                                       
                                    
                                    ≥
                                    1
                                    ,
                                 
                              
                           
                        
                        
                           
                              (38)
                              
                                 
                                    e
                                    
                                       n
                                       
                                          t
                                          ,
                                          2
                                       
                                    
                                    ,
                                    e
                                    
                                       x
                                       
                                          t
                                          ,
                                          2
                                       
                                    
                                    ,
                                    n
                                    
                                       a
                                       
                                          t
                                          ,
                                          2
                                       
                                    
                                    integer
                                    ≥
                                    0
                                    ,
                                    
                                    t
                                    =
                                    2
                                    ,
                                    …
                                    ,
                                    T
                                    +
                                    1
                                 
                              
                           
                        
                     

Constraint (31) fixes the currently considered CFA level. Constraint sets (32) and (33) impose upper bounds on the cumulative number of aircraft that exit and enter the station, respectively, based on the nominal aircraft combination. Constraint set (34) updates the number of grounded aircraft based on the number of aircraft that enter and exit the maintenance station. Constraint set (35) ensures that the space capacity of the maintenance station will not be violated in any time period. Constraint set (36) states that the number of aircraft exiting the station at the beginning of each time period cannot exceed the number of aircraft that were grounded during the previous time period. Constraint (37) is the valid cut that excludes the infeasible combination at hand. Of course, if more than one such combination have been identified, one such cut needs to be added for each of them. Finally, the last constraint set imposes the non-negativity and the integrality of the decision variables.

Consider a particular pair (ent
                        
                        ,2, ent
                        
                        ,1) in the above formulation. The following set of constraints, in which z and u are two auxiliary decision variables and K is a sufficiently large number, eliminates the nonlinearities introduced by the corresponding absolute term in constraint (37):

                           
                              (39)
                              
                                 
                                    e
                                    
                                       n
                                       
                                          t
                                          ,
                                          2
                                       
                                    
                                    −
                                    e
                                    
                                       n
                                       
                                          t
                                          ,
                                          1
                                       
                                    
                                    ≤
                                    z
                                    ≤
                                    e
                                    
                                       n
                                       
                                          t
                                          ,
                                          2
                                       
                                    
                                    −
                                    e
                                    
                                       n
                                       
                                          t
                                          ,
                                          1
                                       
                                    
                                    +
                                    K
                                    u
                                 
                              
                           
                        
                        
                           
                              (40)
                              
                                 
                                    e
                                    
                                       n
                                       
                                          t
                                          ,
                                          1
                                       
                                    
                                    −
                                    e
                                    
                                       n
                                       
                                          t
                                          ,
                                          2
                                       
                                    
                                    ≤
                                    z
                                    ≤
                                    e
                                    
                                       n
                                       
                                          t
                                          ,
                                          1
                                       
                                    
                                    −
                                    e
                                    
                                       n
                                       
                                          t
                                          ,
                                          2
                                       
                                    
                                    +
                                    K
                                    
                                       (
                                       
                                          1
                                          −
                                          u
                                       
                                       )
                                    
                                 
                              
                           
                        
                        
                           
                              (41)
                              
                                 
                                    u
                                    
                                    binary
                                 
                              
                           
                        
                     

Essentially, this set of constraints sets z equal to |ent
                        
                        ,1 −
 
ent
                        
                        ,2|. If ent
                        
                        ,2 > 
ent
                        
                        ,1 then u takes the value 0 and this is determined by constraint (39), while constraint (40) becomes redundant. If ent
                        
                        ,2 < 
ent
                        
                        ,1 then u takes the value 1 and this is determined by constraint (40), while constraint (39) becomes redundant. Of course, both values will work for u if ent
                        
                        ,2 = 
ent
                        
                        ,1. Appending one such constraint set for each pair (ent
                        
                        ,2, ent
                        
                        ,1) and (ext
                        
                        ,2, ext
                        
                        ,1), together with a constraint that sets the sum of auxiliary variables z at least equal to 1 is equivalent to constraint (37), while also preserving the linearity of the formulation.

If the set of constraints (31)–(38) augmented with all the cuts that are currently active is proven infeasible, this is an indication that the currently considered CFA level cannot be attained by any feasible aircraft combination. In order to compute the next lower CFA level that is candidate for optimality, we utilize the same formulation after substituting (31) with an objective that maximizes the expression 
                           
                              
                                 ∑
                                 
                                    t
                                    =
                                    2
                                 
                                 
                                    T
                                    +
                                    1
                                 
                              
                              
                                 (
                                 
                                    
                                       (
                                       T
                                       −
                                       t
                                       +
                                       1
                                       )
                                    
                                    e
                                    
                                       x
                                       
                                          t
                                          ,
                                          2
                                       
                                    
                                 
                                 )
                              
                           
                         subject to an upper bound of 
                           
                              
                                 W
                                 
                                 −
                                 
                                 T
                                 
                                    ∑
                                    
                                       n
                                       ∈
                                       N
                                    
                                 
                                 
                                    y
                                    
                                       n
                                       ,
                                       1
                                    
                                 
                                 +
                                 
                                    ∑
                                    
                                       t
                                       =
                                       1
                                    
                                    T
                                 
                                 
                                    (
                                    
                                       (
                                       T
                                       −
                                       t
                                       +
                                       1
                                       )
                                    
                                    
                                       S
                                       t
                                    
                                    )
                                 
                              
                              Y
                           
                        . The next candidate CFA level is discovered this way, which is fixed using constraint (31), as before. At the same time, all the previous cuts are suppressed because they are rendered redundant.

In this section, we illustrate the application of the proposed algorithm on a small case study. Consider a unit comprising of six aircraft, five of which are available and one of which is grounded at the beginning of the planning horizon. Table 1
                         presents the residual flight/maintenance times of the aircraft at the beginning of the six-period planning horizon, while Table 2
                         presents the flight load requirements and the time capacity of the maintenance station in each time period. In Table 1, bold-style entries denote maintenance times of grounded aircraft and plain-style entries denote flight times of available aircraft. The values of the other problem parameters are G = 320 
hours, Y = 
300 
hours, C = 
3, Xmax
                         = 
50 
hours, Ymin
                         = 
0.1 
hours and Gmin
                         = 
0.1 
hours.

The valid upper bound on the optimal CFA obtained by Procedure CFA-UB is equal to 4923. The associated (nominal) aircraft combination is shown in Table 3.

Next, we check where there exists a feasible solution that realizes this combination. To this end, we fix in the original formulation the values of all the decision variables which are determined by this combination, keeping in mind that the order of aircraft into and out of the maintenance station is preserved. These are the variables an
                        
                        ,
                        
                           t, dn
                        
                        ,
                        
                           t
                         and fn
                        
                        ,
                        
                           t
                         for n = 
1, … , 6 and t 
= 
2, … , 7, pn
                        
                        ,
                        
                           t
                         and rn
                        
                        ,
                        
                           t
                         for n 
= 
1, … , 6 and t 
= 
1, … , 6, as well as several of the variables xn
                        
                        ,
                        
                           t, yn
                        
                        ,
                        
                           t, gn
                        
                        ,
                        
                           t, hn
                        
                        ,
                        
                           t
                         (for example, x
                        1,1 = 
5, x
                        2,1 
= 
38, g
                        6,1 
= 
70, etc.). The user may choose to add only a proper subset of the constraints enforced by the aircraft combination and let the optimization solver deduce the remaining ones, or opt for a tighter formulation by explicitly adding all the implied constraints. For our small example, the inclusion of the above constraints makes the problem infeasible, because the flight load constraints of time periods 5 and 6 are violated. Therefore, we add a valid-cut that excludes this combination, and we utilize the following set of constraints in order to check if the currently considered CFA level (4923) can be attained by another aircraft combination.

                           
                              
                                 
                                    
                                       ∑
                                       
                                          t
                                          =
                                          1
                                       
                                       6
                                    
                                    
                                       (
                                       
                                          (
                                          7
                                          −
                                          t
                                          )
                                       
                                       e
                                       
                                          x
                                          
                                             t
                                             +
                                             1
                                          
                                       
                                       )
                                    
                                    =
                                    10
                                 
                              
                           
                        
                        
                           
                              
                                 
                                    
                                       ∑
                                       
                                          k
                                          =
                                          2
                                       
                                       t
                                    
                                    
                                       e
                                       
                                          x
                                          k
                                       
                                    
                                    ≤
                                    1
                                    ,
                                    
                                    t
                                    =
                                    2
                                    ,
                                    
                                       3
                                       ,
                                       4
                                    
                                 
                              
                           
                        
                        
                           
                              
                                 
                                    
                                       ∑
                                       
                                          k
                                          =
                                          2
                                       
                                       t
                                    
                                    
                                       e
                                       
                                          x
                                          k
                                       
                                    
                                    ≤
                                    2
                                    ,
                                    
                                    t
                                    =
                                    5
                                    ,
                                    6
                                 
                              
                           
                        
                        
                           
                              
                                 
                                    
                                       ∑
                                       
                                          k
                                          =
                                          2
                                       
                                       7
                                    
                                    
                                       e
                                       
                                          x
                                          k
                                       
                                    
                                    ≤
                                    3
                                 
                              
                           
                        
                        
                           
                              
                                 
                                    n
                                    
                                       a
                                       t
                                    
                                    =
                                    n
                                    
                                       a
                                       
                                          t
                                          −
                                          1
                                       
                                    
                                    +
                                    e
                                    
                                       n
                                       t
                                    
                                    −
                                    e
                                    
                                       x
                                       t
                                    
                                    ,
                                    
                                    t
                                    =
                                    2
                                    ,
                                    …
                                    ,
                                    7
                                 
                              
                           
                        
                        
                           
                              
                                 
                                    n
                                    
                                       a
                                       t
                                    
                                    ≤
                                    3
                                    ,
                                    
                                    t
                                    =
                                    2
                                    ,
                                    …
                                    ,
                                    7
                                 
                              
                           
                        
                        
                           
                              
                                 
                                    e
                                    
                                       x
                                       t
                                    
                                    ≤
                                    n
                                    
                                       a
                                       
                                          t
                                          −
                                          1
                                       
                                    
                                    ,
                                    
                                    t
                                    =
                                    2
                                    ,
                                    …
                                    ,
                                    7
                                 
                              
                           
                        
                        
                           
                              
                                 
                                    
                                       
                                          
                                             
                                                |
                                             
                                             
                                                e
                                                
                                                   n
                                                   2
                                                
                                                −
                                                2
                                             
                                             
                                                |
                                             
                                          
                                       
                                       
                                          +
                                       
                                       
                                          
                                             
                                                |
                                             
                                             
                                                e
                                                
                                                   n
                                                   3
                                                
                                                −
                                                0
                                             
                                             
                                                |
                                                +
                                                |
                                             
                                             
                                                e
                                                
                                                   n
                                                   4
                                                
                                                −
                                                0
                                             
                                             
                                                |
                                                +
                                                |
                                             
                                             
                                                e
                                                
                                                   n
                                                   5
                                                
                                                −
                                                1
                                             
                                             
                                                |
                                                +
                                                |
                                             
                                             
                                                e
                                                
                                                   n
                                                   6
                                                
                                                −
                                                1
                                             
                                             
                                                |
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                          +
                                       
                                       
                                          
                                             
                                                |
                                             
                                             
                                                e
                                                
                                                   n
                                                   7
                                                
                                                −
                                                1
                                             
                                             
                                                |
                                                +
                                                |
                                             
                                             
                                                e
                                                
                                                   x
                                                   2
                                                
                                                −
                                                1
                                             
                                             
                                                |
                                                +
                                                |
                                             
                                             
                                                e
                                                
                                                   x
                                                   3
                                                
                                                −
                                                0
                                             
                                             
                                                |
                                                +
                                                |
                                             
                                             
                                                e
                                                
                                                   x
                                                   4
                                                
                                                −
                                                0
                                             
                                             
                                                |
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                          +
                                       
                                       
                                          
                                             
                                                |
                                             
                                             
                                                e
                                                
                                                   x
                                                   5
                                                
                                                −
                                                1
                                             
                                             
                                                |
                                                +
                                                |
                                             
                                             
                                                e
                                                
                                                   x
                                                   6
                                                
                                                −
                                                0
                                             
                                             
                                                |
                                                +
                                                |
                                             
                                             
                                                e
                                                
                                                   x
                                                   7
                                                
                                                −
                                                1
                                             
                                             
                                                |
                                                ≥
                                                1
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              
                                 
                                    e
                                    
                                       n
                                       t
                                    
                                    ,
                                    e
                                    
                                       x
                                       t
                                    
                                    ,
                                    n
                                    
                                       a
                                       t
                                    
                                    
                                    integer
                                    ≥
                                    0
                                    ,
                                    
                                    t
                                    =
                                    2
                                    ,
                                    …
                                    ,
                                    7
                                 
                              
                           
                        
                     

The aircraft combination shown in Table 4
                        
                         is identified next, for which the value of CFA is equal to 4923, as before.

Next, we check whether this aircraft combination can be realized by a feasible flight/maintenance plan. Since it cannot, a new cut is added that excludes it from further consideration. The algorithm continues similarly until the first feasible aircraft combination is identified. This is true for the 12th combination identified, which is the one shown in Table 5
                        . This is the optimal combination, while the optimal CFA is equal to 4923, i.e. equal to the valid upper bound provided by Procedure CFA-UB. The complete optimal solution of the problem is found easily by forcing the realization of this combination in the original model formulation.

In this section, we analyze the computational complexity of the proposed solution algorithm, and we present computational results demonstrating its efficiency. We also compare its performance against that of two popular commercial optimization software packages that can be utilized alternatively for the solution of the problem under consideration. In order to portray the applicability of the proposed solution algorithm and highlight the benefits that can emerge from its practical application, we test the proposed algorithm both on realistic problem instances drawn from the operation of a typical aircraft unit of the Hellenic Air Force (HAF), as well as on large scale random problem instances whose size and parameter values differ significantly from those of typical problems arising in practice.

The computational effort of the proposed solution algorithm comprises of the computational effort required for the calculation of the valid upper bound on the optimal CFA, of the computational effort required for testing the feasibility of the aircraft combinations that are encountered, and of the computational effort required for the addition of the necessary valid inequalities. Let A and NA be the total number of aircraft that are initially available and grounded, respectively, and |N| = A + NA be the total number of aircraft. Regarding the computational effort for the calculation of the valid upper bound on the optimal CFA, the following result is true:

                           Proposition 3
                           
                              The computational effort of Procedure CFA-UB is O(A log(A)) + O(NA log(NA)) + O(T|N|).

The total time required to arrange the available aircraft in non-decreasing order of their residual flight times and the grounded aircraft in non-decreasing order of their residual maintenance times is O(A log(A)) and O(NA log(NA)), respectively. The total time required to initialize the values of variables tlastn
                               is O(|N|). The preprocessing phase of Procedure CFA-UB performs these actions only once. The total time required to compute the maximum cumulative number of aircraft that can enter and exit the maintenance station for each time period is O(|N|). This action is performed once for each time period of the planning horizon. Therefore, the total computational effort of Procedure CFA-UB is O(A log(A)) 
+ 
O(NA log(NA)) 
+ 
O(|N|) 
+ 
O(T|N|) 
= 
O(A log(A)) 
+ 
O(NA log(NA)) 
+ 
O(T|N|).□

Regarding the computational effort required to test the feasibility of a single aircraft combination, with the values of decision variables an
                        
                        ,
                        
                           t, dn
                        
                        ,
                        
                           t, fn
                        
                        ,
                        
                           t, pn
                        
                        ,
                        
                           t, rn
                        
                        ,
                        
                           t
                        , and qt
                         known, the problem defined by (1)–(30) reduces to finding a feasible solution to a system of linear constraints with continuous decision variables. Therefore, its computational complexity is polynomial in the values of parameters |N| and T that define the size of the problem. On the other hand, the total number of aircraft combinations that must be checked in the worst case is exponential in the values of parameters |N|, C, and T. For realistic problems, this is hardly an issue, since the value of T is rather small and remains constant, while C is relatively small as a percentage of |N| (∼10 percent
), making the number of aircraft combinations that the algorithm encounters relatively small. In the next section, we discuss how this exponential behavior can be properly handled should it arise.

The proposed solution algorithm was implemented in C and its performance was compared against that of CPLEX 12.5 (2012) and LINGO 13.0 (2011), two popular commercial optimization software packages. Our computational experiments were performed on an i5-330 @ 3.0 gigahertz
 Intel processor with 16 gigabytes
 system memory. Typical wing configurations of the HAF comprise of 60–80 aircraft, a number that can increase up to 100 aircraft in special cases. Neither CPLEX nor LINGO can handle problems of this size in reasonable time; hence we chose five smaller values (i.e., 10, 15, 20, 25 and 30) for the total number of aircraft that comprise the unit. On the other hand, the proposed solution algorithm is capable of handling considerable larger problems; therefore, we also tested its performance on more challenging problems with |N| = 
50, 100 and 200. The planning horizon was always set equal to six monthly periods, since the flight load of a typical combat unit of the Hellenic Air Force is typically issued over a six-month period. For each of these sizes, we solved 30 random problem instances. Both optimization packages were invoked with default options.

The random generator was specially designed so as to make the generated problems as similar as possible to the realistic ones. The specifics are as follows: although C is equal to approximately 0.1|N| in practice (for a group of 60–80 aircraft, the maintenance hangar can typically accommodate 6–8 aircraft), we set it equal to 0.15|N| rounded to the nearest integer in order to make the generated problem instances more challenging. This is because our computational experience and the complexity analysis of the previous sub-section suggest that, in general, the difficulty of solving a particular problem increases as the value of C increases. The number of initially grounded aircraft, NA, was generated randomly, using a discrete probability function that considered integer values between 0 and C, inclusive. This distribution was negatively skewed, so that larger candidate NA values were assigned higher probabilities. In particular, for x = 0, … , C, the probability that the number of grounded aircraft at the beginning of the planning horizon was equal to x was set equal to 
                           
                              
                                 (
                                 x
                                 +
                                 1
                                 )
                              
                              /
                              
                                 (
                                 
                                    ∑
                                    
                                       x
                                       =
                                       0
                                    
                                    C
                                 
                                 
                                    (
                                    x
                                    +
                                    1
                                    )
                                 
                                 )
                              
                              .
                           
                         Of course, the number of initially available aircraft, A, was always set equal to |N| −
 NA. The residual flight time of each available aircraft at the beginning of the planning horizon was a random number distributed uniformly in the interval [Ymin, Y], while the residual maintenance time of each grounded aircraft at the beginning of the planning horizon was a random number distributed uniformly in the interval [Gmin, G].

For each time period t, St
                         was uniformly distributed in the interval [10|N|, 15|N|], and Bt
                         was uniformly distributed in the interval [15|N|, 20|N|]. This design approximates fairly close the characteristics of realistic problems; the detailed reasons are strictly confidential. Actual values drawn from the real application were used for the other problem parameters, i.e., Y = 
300, G = 
320, Xmax
                         = 
50, Ymin
                         = 
0.1 and Gmin
                         = 
0.1.


                        Table 6
                        
                         presents the average and maximum computational times of the two commercial software packages and our proposed solution algorithm for these realistic problems. More specifically, columns 2 and 3 of this table show the computational times of LINGO, columns 6 and 7 show the computational times of CPLEX with the single-thread option selected, while columns 8 and 9 show the computational times of CPLEX with the multi-thread option selected (this is the default option). Additionally, columns 10 and 11 show the computational times of the proposed solution algorithm when the original formulation (1)–(30) is directly utilized for checking whether a feasible aircraft combination that attains a particular CFA level exists, while columns 12 and 13 show the computational times of this algorithm when this check is performed in two steps (according to the procedure described in Section 4), instead. The results of columns 4 and 5 are explained in the following paragraphs. When the multi-thread option is selected, CPLEX uses all the available threads (4 in the case of the computer that we used for our experiments). The table is incomplete because the commercial solvers are not able to accommodate all the problem sizes within the 8-hour limit that we enforced.

The superiority of the proposed solution algorithm becomes immediately clear, since its computational times are significantly lower than those of both LINGO and CPLEX. As the results of this table demonstrate, the computational savings increase considerably for large scale problem instances, for which the application of the two software packages appears impracticable. The variability of the computational times appears significant for both CPLEX and LINGO, whereas in the case of our algorithm it appears insignificant. An interesting observation is that, naturally, the performance of CPLEX improves considerably when the multi-thread option is selected instead of the single-thread option. This option should always be used with caution, however, since increasing the number of threads being used increases the probability that the computer will run out of memory on a particular problem that may be otherwise solvable when the single-thread option is selected. As far as the two alternative designs for the proposed solution algorithm are concerned, the last four columns demonstrate that, for these particular problems, the performance of the two-step procedure for identifying feasible aircraft combinations appears superior to that of the direct feasibility check that utilizes the original formulation (1)–(30).

While experimenting with alternative solution options, we noticed that the performance of LINGO can improve significantly by introducing additional constraints that impose valid upper bounds on the cumulative number of aircraft that enter and exit the maintenance station from the beginning of the planning horizon up to time period t for t = 2, … , T + 1. Such bounds can be provided by Procedure CFA-UB. Columns 4 and 5 of Table 6 show the computational times of LINGO when these bounds are applied. It becomes evident from these results that the improvement is significant, allowing LINGO to handle considerably larger problems within the predefined time limit. In practice, of course, it does
not make much sense to adopt this procedure by applying partially the proposed algorithm in order to find these bounds, since its full application exhibits even better performance for all the realistic problems on which it was tested. On the other hand, a similar behavior was not detected for CPLEX (probably due to different strategies followed by the underlying algorithmic procedures), and therefore no similar results are reported.

The high efficiency of the proposed solution algorithm can be partially attributed to the fact that the number of aircraft combinations it encounters is rather small. In turn, this implies that the upper bound provided by Procedure UB is tight. In view of this observation, and in an attempt to test the limits of this algorithm, we tried to generate problem instances for which this bound is considerably looser. In particular, since the algorithm starts by grounding each available aircraft as early as possible, we generated special problems for which although it is possible to ground several aircraft during the first time periods of the planning horizon, the optimal decision is to hold them back and ground them after several subsequent time periods. Tables 7 and 8
                         show the data of one problem with such characteristics, for which A = 
10, NA = 
0, T = 
6, G = 
320 
hours, Y = 
300 
hours, C = 
4, Xmax
                         = 
50 
hours, Ymin
                         = 
0.1 
hours and Gmin
                         = 
0.1 
hours. The time capacity of the maintenance station is purposely selected to be larger in the first three time periods so as to enable a large number of service completions during these periods, and smaller in the last three time periods, so as to cause delays in the service completions of those periods.

The application of Procedure CFA-UB on this problem results in one aircraft being grounded during the first two time periods of the planning horizon and provides an upper bound equal to 7210 on the optimal CFA. However, the associated aircraft combination, shown in Table 9
                        , is infeasible. In fact, a CFA equal to 7210 cannot be realized by any feasible combination; in order to obtain a feasible solution to the problem, the first aircraft grounding must not take place before time period 4.

Starting from this one, the proposed algorithm identifies in total 165 infeasible aircraft combinations before reaching the optimal. The number of these combinations for each associated CFA level is shown in Table 10
                        , while the optimal combination that corresponds to a CFA level of 6010 is shown in Table 11
                        .

Looking more closely at the data of this problem, note that if the aircraft with index 1 is grounded at the end of the first period, it cannot exit the maintenance station earlier than the beginning of time period 4. Although the remaining nine aircraft are sufficient for satisfying the flight load requirements of time period 2, all ten aircraft are needed in order to satisfy the flight load requirements of time period 3 (455 
hours), due to the upper bound (50 
hours) on the flight time of each individual aircraft in a single time period. Therefore, the optimal and only feasible decision is to hold back the first aircraft and ground it at the end of time period 3. The algorithm cannot foresee this, and goes on to examine all the aircraft combinations that can possible arise by grounding this aircraft earlier, before identifying the optimal one. Since the number of these combinations is quite large, this has an adverse effect on the algorithm's performance, which deteriorates considerably.

It should be emphasized that this numerical example violates many of the properties that realistic problems exhibit; it is specially designed so as to trouble the proposed solution algorithm as much as possible, and is presented as a reference basis in order to illustrate a case in which the performance of this algorithm is unsatisfactory, as well as the characteristics of a problem for which this situation can arise. The main such characteristic is that there exist one or more aircraft which can be feasibly grounded during the first time periods of the planning horizon, but the optimal decision is to hold them back and ground them after several subsequent time periods.

The fact that the performance of the proposed solution algorithm deteriorates when applied on these non-standard problem instances is confirmed by the results of Table 12. In this table, we present the computational times that this algorithm needs in order to find the optimal solution of problems exhibiting the above characteristic, for various problem sizes (30 problem instances were solved for each such size). The problem instances are not completely random, in that several of their parameter values were selected purposely, so as to ensure the existence of this characteristic. Once this had been ensured, however, the remaining parameters were chosen randomly. In particular, the residual flight times of the aircraft, as well as the flight load and the time capacity of the maintenance station in each time period were selected randomly in similar ranges as those of the problem instances tested in Table 6, under the additional requirement that the optimal CFA level should not be attainable if the first one or two aircraft were grounded before the 4th–5th time period. A trivial trial and error technique was employed in order to achieve that, which simply rejected those random instances for which this was not true. The columns of Table 12 are mainly the same with those of Table 6, the only difference being that no results are reported regarding the application of LINGO after the incorporation of special cuts, since there is no significant advantage from adding such cuts in the case of these non-standard problems.

Besides confirming that the performance of the proposed solution algorithm deteriorates considerably for the non-standard problems, the results of Table 12 also show that the opposite is true for CPLEX and LINGO. This observation is important because it suggests that there does not exist a single solution algorithm that can handle efficiently every possible problem of reasonable size that can arise. Additionally, the above results show that, in the case of the non-standard problems, it is preferable to employ directly the original formulation comprised of (1)–(30) for identifying feasible aircraft combinations that attain a particular CFA level, instead of the two-step procedure which appears superior in the case of the realistic problems. As these results additionally demonstrate, however, the employment of this technique is not even necessary, due to the fact that the performance of CPLEX and LINGO appears superior to that of the proposed solution algorithm, in contrary to what happens in the case of problems with realistic characteristics. Our computational experience suggests that as the actual number of aircraft combinations that the proposed solution algorithm must visit in order to reach the optimal solution increases, the performance of both LINGO and CPLEX improves, whereas that of the proposed solution algorithm deteriorates, and vice versa. In particular, note that, exhibiting superior performance to that of LINGO, CPLEX appears as the most efficient algorithmic solution tool for handling these non-standard problems.

To summarize, for problems with realistic characteristics in which the number of encountered aircraft combinations is quite small, the performance of the proposed algorithm appears superior, whereas for problems with characteristics such as those described above in which this number is considerably larger, the performance of CPLEX/LINGO appears superior. The important conclusion of this analysis is that the proposed algorithm, complemented by generic optimization software such as CPLEX and LINGO, can handle effectively a large variety of FMP problem instances.

In this section, we discuss the applicability of the proposed algorithm on some interesting problem extensions. In particular, we relax the assumption on the strict satisfaction of the flight load requirements, we extend the single-squadron case to the multi-squadron one, and we discuss alternative problem objectives.

Often, the actual problem definition calls for satisfaction of the flight load requirements within some predefined tolerance, instead of the strict satisfaction imposed by constraint (8). When this is the case, constraint set (8) is expressed as follows instead:

                           
                              
                                 
                                    L
                                    
                                       S
                                       t
                                    
                                    ≤
                                    
                                       ∑
                                       
                                          n
                                          ∈
                                          N
                                       
                                    
                                    
                                       x
                                       
                                          n
                                          ,
                                          t
                                       
                                    
                                    ≤
                                    U
                                    
                                       S
                                       t
                                    
                                    ,
                                    
                                    t
                                    =
                                    1
                                    ,
                                    …
                                    ,
                                    T
                                 
                              
                           
                        where L and U are two parameters defining the interval in which the actual total flight time of time period t must lie. For example, when L = 
0.95 and U 
= 
1.05, a maximum deviation of 5 percent
 from the target value of the flight load is allowed in each time period of the planning horizon. The main effect of this modification is that it makes the total flight time of each time period a decision variable instead of a known parameter. Thus, Proposition 1 is no longer valid, and maximizing the CFA becomes equivalent to maximizing the expression 
                           
                              
                                 ∑
                                 
                                    t
                                    =
                                    2
                                 
                                 
                                    T
                                    +
                                    1
                                 
                              
                              
                                 (
                                 c
                                 
                                    x
                                    t
                                 
                                 )
                              
                              −
                              
                                 ∑
                                 
                                    t
                                    =
                                    1
                                 
                                 T
                              
                              
                                 (
                                 
                                    (
                                    T
                                    −
                                    t
                                    +
                                    1
                                    )
                                 
                                 A
                                 
                                    S
                                    t
                                 
                                 )
                              
                              ,
                           
                         where ASt
                         = ∑
                           n ∈ N
                        
                        x
                        
                           n, t
                         is the actual flight time in period t.

This implies that the upper bound on the optimal CFA obtained by Procedure UB is no longer valid. To compute a valid upper bound on the optimal CFA in this case, we can use the value USt
                         as the total flight time of period t for computing the maximum number of aircraft that can enter and exit the maintenance station over the planning horizon, and the value LSt
                         as the total flight time of period t for performing the remaining calculations. The validity of the new bound obtained this way results from the fact that it considers the maximum possible number of aircraft service completions, as well as the minimum possible flight load requirements.

With the new flight load requirement definition, a particular aircraft combination can result in many different CFA levels, depending on the exact value of the total flight time in each time period of the planning horizon. Therefore, in order to search for the optimal solution, the user needs to consider alternative aircraft combinations, verify their feasibility, and check the optimal CFA they result in. This can be accomplished by enforcing the complete aircraft combination using the model formulation of Section 3.

Another interesting problem extension arises when the considered unit is comprised of several sub-units. A typical combat wing of the Hellenic Air Force, for example, is sometimes comprised of 2–3 squadrons. In such cases, there is one maintenance station responsible for the inspection of all the aircraft of the unit, but each squadron is assigned separate flight load requirements. The incorporation of multi-squadron units adds a strong combinatorial component to our model, since distinct cases depending on which squadron an aircraft that enters or exits the maintenance station belongs to need to be distinguished. In turn, this has a significant impact on the computational requirements of the proposed algorithm, as well as on those of CPLEX/LINGO.

Note, however, that instead of considering each of these possible cases separately, we can simply check whether a particular CFA level can be attained by a feasible combination by utilizing the complete constraint set of problem (1)–(30) and letting the solver deduce whether an associated feasible flight and maintenance plan exists. The computational requirements that result when the CFA level is fixed to a particular value are moderate, enabling the solution of realistic problems in satisfactory computational times.

In the military context, the readiness of a unit to respond to external threats is typically expressed as the total number of aircraft that are available to fly (aircraft availability) and as the total residual flight time of all available aircraft (residual flight time availability). Although a certain degree of synergy exists between the two, optimizing one of them may, in some cases, have an adverse effect on the optimization of the other. Moreover, knowing one of the two gives no information about the way that the other is distributed across the individual aircraft.

Another related important decision concerns the question of whether the minimum or the total fleet availability over a given planning horizon should be used as the problem objective. In the former case, the focus is on finding the highest availability level that can be ensured for each time period of the planning horizon, whereas in the latter one, the focus is on finding the highest availability level that can be attained cumulatively over all time periods of the planning horizon, independently of how this varies between individual ones. A common strategy that is often used in practice is to maximize the total fleet availability, while also imposing an acceptable lower bound on the fleet availability of each individual time period.

In the current paper, we consider the cumulative residual flight time availability as the model's objective. As mentioned in Section 3, one of the reasons for doing so is because among all the alternative objectives this is the one that causes the largest computational difficulties to the solution of the optimization model of Section 3. To justify this claim, in Table 13
                         we report the computational requirements of LINGO and CPLEX on the same problem instances as those of Table 6, except that we use the cumulative aircraft availability instead of the cumulative residual flight time availability as the model's objective. Mathematically, this objective is expressed as follows:

                           
                              
                                 
                                    Max
                                    
                                       ∑
                                       
                                          t
                                          =
                                          2
                                       
                                       
                                          T
                                          +
                                          1
                                       
                                    
                                    
                                       
                                          ∑
                                          
                                             n
                                             ∈
                                             N
                                          
                                       
                                       
                                          a
                                          
                                             n
                                             ,
                                             t
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The results of Table 13 confirm that the use of the alternative objective reduces considerably the computational requirements of the two software packages, and suggest that the objective choice is a very crucial decision that has a strong impact on the computational effort needed to find the optimal solution of the problem. A similar behavior is observed when the minimum residual flight time and aircraft availability are used as model objectives, which are expressed as follows:

                           
                              
                                 
                                    
                                       
                                          
                                             Max
                                             
                                             Z
                                          
                                       
                                    
                                    
                                       
                                          
                                             s
                                             
                                                .
                                                t
                                             
                                             .
                                             
                                             Z
                                             ≤
                                             
                                                ∑
                                                
                                                   n
                                                   ∈
                                                   N
                                                
                                             
                                             
                                                y
                                                
                                                   n
                                                   ,
                                                   t
                                                
                                             
                                             ,
                                             
                                             t
                                             
                                                =
                                                2
                                                ,
                                             
                                             …
                                             ,
                                             T
                                             +
                                             1
                                             ,
                                             and
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              
                                 
                                    
                                       
                                          
                                             Max
                                             
                                             Z
                                          
                                       
                                    
                                    
                                       
                                          
                                             s
                                             
                                                .
                                                t
                                             
                                             .
                                             
                                             Z
                                             ≤
                                             
                                                ∑
                                                
                                                   n
                                                   ∈
                                                   N
                                                
                                             
                                             
                                                a
                                                
                                                   n
                                                   ,
                                                   t
                                                
                                             
                                             ,
                                             
                                             t
                                             
                                                =
                                                2
                                                ,
                                             
                                             …
                                             ,
                                             T
                                             +
                                             1
                                             ,
                                             respectively
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The proposed algorithm requires a few modifications in this case, since maximizing the number of aircraft service completions is not necessarily an optimal maintenance strategy. In view of the above important insights, however, we did not pursue these modifications, because the performance of the existing solvers on realistic problems is quite satisfactory, and the potential savings from the implementation of a modification of the above algorithm are uncertain.

Out of the many alternative model objectives, there does not seem to exist a single one that can capture completely all the aspects of the problem under consideration. For example, the CFA is not able to differentiate between solutions with different distribution of the total fleet availability among the time periods of the planning horizon, which is also important since this distribution should be as balanced as possible, too. We believe that the user would have to develop a multi-objective model in order to capture this problem aspect, but we did not pursue this because it would require additional modifications, and would extend the length of this paper beyond the typical standards.

Our particular choice for the model objective was motivated by the observation that, in contrary to this objective, other ones can be handled successfully by commercial optimization software packages such as CPLEX/LINGO. Hence, given also the fact that this objective is quite realistic, we decided to develop a specialized algorithm that handles it in order to fill in this gap. Independently of that, for each typical alternative model objective we believe that it is possible to develop a suitable modification of the proposed algorithm that will be able to solve the problem under consideration. The main design of this algorithm will remain similar to that of the present one (find a valid upper bound on the optimal objective, test the feasibility of aircraft combinations that attain this bound, eliminate infeasible such combinations, update accordingly the upper bound, etc., until the optimal solution is obtained), although the particular details for the implementation of each single step will clearly have to be modified accordingly in each case. We do not claim that the performance of such an algorithm will always be superior to that of commercial optimization software (this cannot be known in advance), but that the development of such an algorithm appears attainable.

In this work, we addressed the FMP problem, i.e., the problem of issuing a joint flight and maintenance plan for a group of aircraft that comprise a unit in order to maximize the unit's fleet availability. Using the cumulative residual flight time availability as the objective, we developed an exact solution algorithm that initially computes a valid upper bound on its optimal value, and then gradually reduces this bound in a stepwise fashion, until a solution that attains it is identified. The performance of the algorithm on realistic problems appears superior to that of two commercial optimization solvers that can be used alternatively for the solution of the problem, whereas the opposite behavior is observed for a class of problems with significantly different characteristics.

The present work points to several promising directions for future research. The deterministic model that we address in this work is a basic building block towards developing a stochastic model that will take into consideration random events, such as unforeseen failures. Future works should be directed towards developing and studying such a model that will incorporate the uncertainty that the problem might exhibit. A recent work in that direction is the paper by Mattila, Virtanen, and Raivio (2008), who use discrete event simulation to model the maintenance of military aircraft in the Finnish Air Force and study its impact on aircraft availability. Finally, an interesting direction for future research is the development of a multi-objective model that will also take into consideration the fact that the unit availability should not only be maximized, but also exhibit low variability between different time periods.

@&#REFERENCES@&#

