@&#MAIN-TITLE@&#glUCModel: A monitoring and modeling system for chronic diseases applied to diabetes

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We have developed a web application for control of chronic diseases: glUCModel.


                        
                        
                           
                           This tool improves the communication and interaction between patients and doctors.


                        
                        
                           
                           glUCModel also includes a recommender system that uses Case Based Reasoning.


                        
                        
                           
                           It also includes an e-learning environment, which provides patients a space to consult information about the illness.


                        
                        
                           
                           Finally, we have integrated a method, based on evolutionary computation, that predicts the future glucose level.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Diabetes

Web applications

Internet

Telemedicine

Self-management

@&#ABSTRACT@&#


               
               
                  Chronic patients must carry out a rigorous control of diverse factors in their lives. Diet, sport activity, medical analysis or blood glucose levels are some of them. This is a hard task, because some of these controls are performed very often, for instance some diabetics measure their glucose levels several times every day, or patients with chronic renal disease, a progressive loss in renal function, should strictly control their blood pressure and diet. In order to facilitate this task to both the patient and the physician, we have developed a web application for chronic diseases control which we have particularized to diabetes. This system, called glUCModel, improves the communication and interaction between patients and doctors, and eventually the quality of life of the former. Through a web application, patients can upload their personal and medical data, which are stored in a centralized database. In this way, doctors can consult this information and have a better control over patient records. glUCModel also presents three novelties in the disease management: a recommender system, an e-learning course and a module for automatic generation of glucose levels model. The recommender system uses Case Based Reasoning. It provides automatic recommendations to the patient, based on the recorded data and physician preferences, to improve their habits and knowledge about the disease. The e-learning course provides patients a space to consult information about the illness, and also to assess their own knowledge about the disease. Blood glucose levels are modeled by means of evolutionary computation, allowing to predict glucose levels using particular features of each patient. glUCModel was developed as a system where a web layer allows the access of the users from any device connected to the Internet, like desktop computers, tablets or mobile phones.
               
            

@&#INTRODUCTION@&#

Chronic patients must carry out a rigorous control of diverse factors in their lives. Diet, sport activity, medical analysis or blood glucose levels are some of them. This is a hard task because some of these controls are performed very often, for instance some diabetics measure their glucose levels several times every day, or patients with chronic renal disease, a progressive loss in renal function, should strictly control their blood pressure and diet.

In addition, currently there is great pressure from various scopes to reduce the costs of health care systems, both public and private. The general reduction of benefits, the fear of job loss, or difficulties in commuting make people with chronic diseases to reduce the number of physical visits to the specialist and sometimes this implies a worse control of these diseases and a consequent acceleration of physical deterioration caused by the disease. But all are not bad news, the expansion of new technologies, the generalization of the use of the Internet and the development of telemedicine applications for both PCs and smartphones, open an avenue for redress this situation and improve the control of chronic diseases without increasing costs. Moreover, telemedicine reduces the number of visits to the specialist and facilitates the health care irrespective of location.

The definition of telemedicine (also called e-health) is different depending on the context and the field of medicine. There is some agreement on a definition as technological systems to facilitate health care. A good definition is made by Van der Heijden et al. in [1]: “Facilitating health care irrespective of location by means of technology”. Oh et al. found up to 51 unique definitions in 2005, with a wide range of themes, but no clear consensus about the meaning of the term eHealth [2]. They identified health and technology as universal themes. Perhaps the best definition is “e-health is a field in the intersection of medical informatics, public health and business, referring to health services and information delivered or enhanced through the Internet and related technologies” made by Eysenbach in [3] and also adopted by Pagliari et al. [4].

Undoubtedly the reader should agree that the most important is not the definition but the resources that should be included on an e-health system. We defend the idea of including not only database systems but also more complex and automatic tools to facilitate the independence of the patient in non-critical situations, allowing a reduction in the number of visits to the hospital and, hence, reducing the costs for the health companies or public health systems.

Nowadays an e-health system should include e-learning systems, recommender systems and modeling tools based on a centralized database. In this way, the work described in this paper covers all those features. We present a telemedicine system consisting on: (1) a database, (2) an environment for e-learning, (3) an automatic recommendation system (both medical and didactical to improve control of the disease) and (4) a system for modeling and predicting parameters. The latter system provides important aspects in controlling the chronic disease using techniques from the field of evolutionary computing. The system takes full accessibility and computational capabilities of current computer systems. Any patient with a chronic disease can benefit from systems like ours. Despite that we adapted the system for diabetes, not only the idea but also the web architecture can be useful for any other chronic disease.

Following other recently published works, we intend to have a tool that allows the patient and the practitioner to establish the degree of interaction and dependency between them. Our tool allows the physician to delegate certain tasks, passing their control to nursing. Our work tries that the electronic device does not limit access to the system capabilities. Therefore, no specific platform device has been developed. In fact, it seems more comfortable to access the education module through a tablet, laptop or desktop computer and, on the other side, data uploading, queries to models, and short tasks are much more practical if they are made from a smartphone. For all these reasons we have implemented the user interface of the system as a web service, which is platform independent.

The on-line architecture allows collecting all the necessary data from patients, which improves the direct communication between the physician and the patient. It also incorporates a case-based recommender, which feeds back an e-learning system. This technology allows updating data in a more simple and friendly way, through the use of smartphones and other similar platforms. In this way the patient will no longer need to keep track of his data (diet, measured glucose, exercise, etc.) during the day, and then write it down when getting home, updating the information immediately after each event. Some of these features are already available, albeit partially, on other systems. However, there are three new elements in our work: the recommender system is connected with an e-learning module; the physician can upgrade the recommender system; and models are automatically customized for each individual patient.

The rest of the paper is structured as follows. Section 2 introduces the Diabetes Mellitus disease. Section 3 shows an overview of glUCModel. Section 4 analyses the structure of the application, and explains the main features of each part. Section 5 introduces a novel method to obtain patient models, which are used to predict the health status of a patient. Section 6 explain different functionalities of the application with an example of use. Finally, Section 7 concludes the paper and explain the ongoing and future work.

Diabetes Mellitus is an illness that affects around 336 million people in the world, causing 4.6 million deaths each year. Therefore, much effort is devoted in improving the diabetics quality of life. Diabetes is a chronic disease characterized by a decrease in insulin production by the pancreas, or by a resistance to the insulin action, increasing the levels of sugar in blood. The cause of this disease is a decrease in insulin production by the pancreas, or the inability of the cells to react to the insulin. Insulin is necessary for glucose to enter in the cells. Thus, this hormone plays an important role in the regulation of the glucose level in the blood (glycemia). Depending of this level, a patient can have normal values or Normoglycemia (values between 70 and 120mg/dl), high glucose level or Hyperglycemia (more than 120mg/dl) or low glucose level or Hypoglycemia (under 70mg/dl).

There are two main different diabetes types:
                        
                           •
                           
                              Diabetes Mellitus type 1 (DM1): Cells do not produce insulin because of an autoimmune process. Currently, requires the person to inject insulin or wear an insulin pump.


                              Diabetes Mellitus type 2 (DM2): Results from insulin resistance, where cells fail to use insulin properly, sometimes combined with an absolute insulin deficiency.

Our system is specially useful for insulin dependent patients both DM1 and DM2, however patients with oral antidiabetic drugs for the prevention of type 2 diabetes can also benefit from glUCModel. It might be useful the education module (except insulin adjustment lessons), the recommender system (with selected information, i.e. hypoglycaemia management, diet, symptoms, etc.) and the use of glUCModel for medical monitoring of their diabetes (analytical, ocular fundus test, notices, etc.).

It is very important for diabetic patients to have a good control of the illness to prevent chronic complications like nephropathy, retinopathy or microangiopathy; in the worst scenario patients can even reach an acute complication such hyperglycemic and hypoglycemic comatose state or die. Thereby, it is fundamental to have a tracing of the parameters affecting diabetes, both by the patient and by the doctor. This tracking affects those principal factors that have great influence in the disease like sport activity, insulin injections, glucose levels or diet.

There have been different approaches to facilitate the diabetes control. However, most of them have been designed only for specific glucometers. For example, many pharmaceutical companies have developed their own application for managing diabetes. Bayern created Glucofacts Deluxe 
                     [5], which exports data from Contour or Breeze glucometers, also owned by Bayern. Abbot developed CoPilot Health Management System 
                     [6], which works with Abbot’s meters, like FreeStyile InsuLinx 
                     [7]. This meter allows us to record glucose levels and insulin doses, and to compute the amount of insulin that must be injected. MenaDiab 
                     [8] was developed by Menarini Industrie Farmaceutiche Reunite, but, as occurs with other companies, it only offers service with its glucometers (in this case, GlucoMen). Instead, MyCareTeam 
                     [9] offers support with for many glucometers, but it is not a free application.

Nowadays there are different mobile applications that carry out a control of the patients lifestyle. OnTrackDiabetes 
                     [10], Glucose Meter 
                     [11], Diabetes Pharma 
                     [12] or Diabetes Hypoglycemia 
                     [13] are only a few of all the available applications. However, most of these applications are only dedicated to the patient, and the physician does not have access to the data. In some of them, patients have the possibility of sending back information by e-mail. Applications like HealthJibe 
                     [14], CVS Caremark 
                     [15], Heart360 Cardiovascular Wellness Center 
                     [16] or Live Healthier 
                     [17] are built over a cloud infrastructure like Microsoft Health Value or the extinct Google Health. Using a cloud storage system, data have less privacy than if applications use their own database.

We can find also some academic and research papers on this topic. Fonda [18] proposes a similar web application using Microsoft Health Value. The author uses gadgets to show the information, but it does not allow the update of the injected insulin. The work by Alhazabi [19] is only focused in Qatar, and on diet and glucose, no more factors are taken into account. Arsand [20] presents a version for smartphones only, so physicians cannot access the data using their personal computers. Moreover, it only provides general tips, without evaluating patient data.

Other efforts are focused on modeling the physiology of diabetes and pharmacokinetics of the glucoregulatory system. Their goal is to have reliable and realistic in silico patients for developing further medical studies. In [21], a non-tracer method for quantifying the insulin sensitivity under normal life conditions was presented and validated against a tracer method in [22]. These works are extended in [23], modeling the mechanisms of glucose transit through the gastrointestinal tract, and later in [24], presenting a whole meal simulation model, involving gastrointestinal tract, liver, kidney, muscle and adipose tissues and beta-cells interactions with the glucose-insulin system. We may also find some approaches based on models that are to be employed in automatic control devices, commonly known as artificial pancreas (AP). After 40years of research, AP is still a challenging problem [25]. However, all these models do not take into account several parameters like physical exercise, stress level, etc. In addition, these models cannot be easily personalized.

To overcome all these limitations, we have developed glUCModel, a web based application designed with funding and sponsorship of the Universidad Complutense de Madrid (UCM), Spain. Its goal is to facilitate the diabetes management. It can be simultaneously used by patients and physicians to treat the disease. Doctors can monitor patient’s records, create recommendations and evaluate the data using the same website. They can consult the patient data at anytime and anywhere. Furthermore, this application includes three important novelties: a recommender system (glUCModel-RS or g-RS for simplicity), an e-learning platform, and a glucose modeling module. g-RS allows us to automatically evaluate patient data and to provide suggestions for improving the control of diabetes and hence, the quality of life of diabetics. A set of e-learning courses offers a fully virtualized educational space with recommendations from g-RS. Moreover, glUCModel includes an Inbox or e-mailing system, where the patient receives the recommendations and messages from both g-RS and the e-learning systems.

gluUCModel is a web application, available in internet [26] with a double purpose: improving the control of diabetes and helping both diabetics and physicians to manage the disease. The requirement was to make glUCModel multi-platform, so that the type of device was not a restriction. To this end, we have tested it in several devices, like smartphones, tablets, laptops or personal computers with different operating systems (Windows, GNU/Linux, iOS), and with different web browsers (Internet Explorer, Google Chrome, Mozilla Firefox, Opera and Safari).


                     Fig. 1
                      shows a global picture of our application. glUCModel is composed of five different modules, that is, a data interface, a database, and the three novel contributions in this field: a recommender system, an e-learning course and the glucose model.
                        
                           1.
                           
                              Data interface: It is the core module of the application, connecting all the modules. It is used to allow diabetics to query and update all necessary data for the control of their illness. On the other hand, physicians can track the evolution of the patient.


                              Database: In the database glUCModel stores the information about users (patients and physicians), medical tests and diabetic measurements (glycemias, sport activities, food intakes, etc.). Furthermore, the recommender system and the e-learning course also store this data here.


                              glUCModel Recommender System (g-RS): The function of g-RS is to evaluate the patient data. With this information, the system creates suggestions about how the diabetic can improve his control about the diabetes and what habits he should modify to improve his quality of life. g-RS includes an Inbox, where the patient receives recommendations in an e-mail message format.


                              E-learning module: A virtual e-learning space where the patient has all the necessary information about diabetes. In this environment, there are documents with theoretical concepts to resolve the patient doubts. It also presents several tools to help on the education, like tests, calendar, forum and glossary.


                              Glucose model module: Supported by evolutionary computation techniques, this module obtains a customized model the each patient’s glucose blood levels using the information available in the database.

Modules are connected following the next scheme: the patients upload data to Database through the data interface. The physicians can review the information using the same data interface. g-RS analyzes this information, and returns suggestions to the patient. Also, the e-learning course is connected to the application to communicate the progress of patients with the tests. When a patient performs a test, g-RS sends to the patient inbox the questions he failed, with the correct answer. The glucose model updates can be either automatically programmed or requested by patients and physicians on demand.

The development of glUCModel was made in collaboration with Hospital Virgen de la Salud, at Toledo (Spain). They contributed in three ways: (1) providing medical information relevant for diabetes tracking, (2) providing the necessary information for the e-learning courses and (3) testing the prototypes on regular basis at their facilities.

In this section, we describe in depth the technical features and main functions of the modules of glUCModel. The first step is to login into the system. In case of a patient, a menu with 3 possibilities is shown: (1) data interface, (2) e-learning course and (3) recommender system.

Data interface is a web interface, developed with Java servlets, which allows us to check and update the information about diabetics. Patients can visualize the appropriate information, and upload not only their medical data, but also a whole set of records which are important for the control of diabetes evolution. To this end, our application offers a framework with six different sections: glycemia level (blood sugar concentration), insulin injected, carbohydrates ingested, sport activities, weight controls and other medical tests. To update their data, patients can choose between two options:
                           
                              •
                              
                                 Automatically: Importing data from a XML file generated by glucometers.


                                 Manually: The data interface offers the possibility for the patient to update his information via any device, as mentioned before.

As an example, we show the possible choices related to manually update glycemia (blood glucose level). There are four different operations (see Fig. 2
                        ):
                           
                              1.
                              
                                 Add glycemia: With this option, the patient performs a new measurement of blood glucose levels, recording its result. To store this measurement, it is necessary that the patient indicates date, hour, moment of day (breakfast, midmorning, lunch, picnic, dinner, post-dinner, other), and value (in mg/dl). Optionally, he can add a comment.


                                 See glycemia: This option shows all the measurements of glucose in the last seven days (at different times of the day). A table appears with this information. If the diabetic wants to see a wider range of time, he must select the Export option.


                                 Import: The diabetic can import glucose values from a file (for example, a file generate by a continuous glucometer) to glUCModel, with the only need of specifying the file path. The application reads the file, and updates the patient’s data. As we explained above, glUCModel allows to import from diverse glucometers, unlike the applications found in the state of the art.


                                 Export: with this option, patients can export all their recorded glycemia measurements (not only from the last seven days), and generate a formatted text file with this information.

There are similar options for the rest of data, although with some particularities:
                           
                              •
                              For the insulin, the user must specify date and hour of injection, moment of the day, insulin type, and number of units.

Regarding food intakes, the patient uploads the date and hour, the day moment, the number of carbohydrates (CH) servings (measured in units of 10 gr. each) and, optionally, some additional observations. Although most food packaging usually include information about the number of calories per 100g or per serving, diabetics use carbohydrates as a measure of intake, since carbohydrates is the main factor affecting glycemia, and is widely used for dose adjustment.

In the case of sport activities, we have designed a scale from 1 to 10 to indicate the level of the exercise. 1 is the lowest level whereas 10 is the highest. Besides the level, the user must introduce the duration of the exercise and complete a remark field explaining the sport activity performed. It is well known that sport activities affect glycemic levels. Besides the level, the user must complete a remark field explaining the sport activity performed.

With respect to the weight, the patient can upload his weight, indicating day of measurement and kilograms. As this factor does not change everyday, the application will use the last measurement uploaded by the patient.

Finally, glUCModel offers the possibility to upload documents containing other medical tests (foot check, eyes check, blood test, etc.). Both the physician and the diabetic can review these tests, resulting in a complete monitoring of the disease.

There are two different options to store the information of the application. The first is to use a cloud DB, where the information is stored on a cloud system. The second option is to use a local DB: the information is stored on the server where the application is running. Currently, the most important cloud DB platform is Microsoft Healt Vault 
                        [27] (MHV). MHV was launched in 2007 and stores medical data of the users. Dossia 
                        [28] is an open-source personal health system. We initially developed the system using the Google Health (GH) database, also based on the cloud. With the GH withdrawn, some months after, we move into a local DB under our own control. It is worth noting that a local database improves the privacy of patients and gives us more flexibility to model the database for our needs.

MySQL was used to create the local DB. The database stores all user’s information, all relevant information mentioned above (glycemias, insulin, intakes, sport activities, weights and medical tests), and the necessary information for the recommender system. The database is connected to the interface. This connection operates in a transparent manner to the users. Both patients and physicians use the data interface to upload and see the data, and the data interface reads or writes in the BD.


                        Fig. 3
                         shows the relational scheme of the glUCModel database. Tables corresponding to Moodle internals were omitted, as well as the fields and datatypes of the displayed tables. Next, we briefly describe each one of the tables and relationships between them:
                           
                              •
                              users: Stores all the personal information about the users like name, surname, address, user login and password for both patients and physicians. In addition, biometric information like height, and birth date is stored for patients.

weights: Given that chronic diseases like diabetes may influence into a persoń weight, this table stores the evolution of the weight of each patient. As indicated by the relationship, many weights are stored for each patient.

medical_test_docs: Reports, test results, and any other medical document are stored here. It allows to upload the scanned document.

food_intakes: Stores the carbohydrates ingested by the patient, date and hour, and any related observation.

physical_activity: Type of exercise, intensity, duration and date are stored for each patient. involved_variables_measures: several variables may be involved in a chronic disease. This table records the measures obtained for these variables. The fields are: patient id, date and hour, value of the measure, variable (glucose or insulin in the case of diabetes), type (variables like insulin may have different types) and observations.

In addition, four tables are needed by the g-RS module, in charge of the case-based reasoning:
                           
                              •
                              recommendations: The set of predefined recommendations is stored in this table.

user_msgs: Stores the messages sent to each user with recommendations from the system. This table links users and recommendations storing the sending date.

training_cases: Stores the parameters of the initial cases for RS.

tracing_cases: Stores the parameters of the cases that the physicians follow.

Recommender Systems (RS) are tools to create suggestions or recommendations on a particular subject. Their function is to evaluate patient data available on the database and to generate recommendations for patients from these data. The mechanism of the recommender system relies upon Case-Based Reasoning (CBR). CBR is a natural way of human reasoning. Unlike other reasoning technologies, it is not based on rules, but cases. RS compares patient data with other cases, finds similarities, and creates new recommendations. It is easiest for physicians to define cases (based on their experience) than generic rules. glUCModel-RS (g-RS) was developed using JColibri [29], an open-source library developed at the Department of Software Engineering and Artificial Intelligence, of Universidad Complutense de Madrid.

We first provide g-RS with some initial knowledge in form of rules, created by the doctors. Physicians create the initial rules with the medical information of former patients with the same disease. Then, when a patient uploads his data on the database and evaluates them, the recommender system compares the information with the initial rules. g-RS automatically creates recommendations of habits for the patient. For example, if a patient has three hyperglycemias after dinner, g-RS recommends to study the topic of hyperglycemia and sends to the patients a message recommending a lighter dinner. These recommendations are sent to the integrated inbox mailing system.

There are two recommendation scenarios (see Figs. 4 and 5
                        
                        ):
                           
                              •
                              
                                 Education: From the patient answers to the initial test, the system recommends some diabetes topics to be studied or reviewed, such as alcohol, food, hypoglycemia, and sport activities.


                                 Monitoring: Depending on the data uploaded by the diabetic about his medical analysis, glucose levels, hyperglycemia, etc., g-RS recommends changes in the patient’s life style, or some topic that the patient should review on the e-learning environment. The monitored factors in this case are: body mass index (BMI), whether or not medical proofs have been done in a period of time, and hypoglycemias and hyperglycemias obtained in the last seven days.

Once the system has been trained with initial cases, it is ready to give recommendations to diabetics. g-RS provides the patient an inbox where the messages are received. These messages are created by the recommender system, and contain the suggestions. The user can read these messages whenever he wants. Our medical team has also defined a set of predefined recommendations. For this purpose we had in the Database a set of variables that store important information. For the sake of space, we show in Table 1
                         the most relevant variables stored in our database.

For instance hyperGAC stores the number of hypoglycemic events before intakes in the last week, hypoGDC the number of hypoglycaemic events after intakes in the last week, and so on. The recommendations may present diverse information, from remembering to do an analytic, to reviewing some themes of the e-learning environment, to visit the medical center, or simply to congratulate the patient because of the good work done. Using those variables the doctor can define new recommendations, with the help of a friendly user interface. Some of the predefined recommendations are explained on Table 2
                        . Figs. 4 and 5 shows the parameters involved on the definition of recommendations.

One of the main novelties presented in this paper is the e-learning system connected to g-RS. E-learning is a method of education virtualized through internet. It allows learning and teaching at any time and in many different locations. We developed our environment in Moodle [30], an open source platform. Our aim is to offer a tool for patients to have all necessary information about diabetes within easy reach.

Anytime and anywhere, a patient can study or review a certain topic. A complete set of subjects is available to the user. The course is divided into eight lessons, listed in Table 3
                        .

Each theme has a pdf file with all the necessary information. In this way diabetics can solve some doubts without visiting their doctor. The appearance of the course once logged is showed in Fig. 6
                        . Currently, the education system is only available in Spanish. The structure of the course is the usual of a Moddle-based environment, with a calendar, news, lessons, exams and other multimedia resources. Although most of the important issues are covered on the initial course, physician are able to include additional lessons or information, such us a Lesson 0 with essential information, warning symptoms and how to proceed on a emergency.

The educational feature is complemented with tests for checking the level of knowledge over a given topic. g-RS verifies the results obtained in the test. If a user has misses, g-RS sends a message with the correct answers to the user inbox. The patient can review it at any time. If the test is completed without errors, the system sends a congratulation message. The patient can read them at any time. Thus, a diabetic can check whether or not he has the necessary formation about diabetes, or if he should study more.

Moreover, there are other useful tools. It includes a glossary with many interesting definitions about diabetes. A forum is also provided to allow patients to help each other exchanging information and insights. The course also offers a calendar with important events.

From the physician point of view, it also is a useful tool. He can see the evolution of the patients about diabetes knowledge, and upload or edit documents, and it is visible for all patients, without needing to inform patients individually.

This module is responsible for building the glucose model of the patient. We Evolutionary Computation (EC) techniques to obtain an equation describing glycemia as a function of a set of parameters. In particular we use a recent version of Genetic Programming (GP) namely Grammatical Evolution (GE). In our case, the grammars will make evolve models, or in short, sets of equations that best fit the profile of each patient. The input to this module is a historical patient data. This data includes the set of measures that can be taken with glUCModel: blood glucose, insulin, physical exercise, intake, etc., in a given period. In turn, these data are divided into two groups. The first group, called training set, is used to obtain the model of the patient by EC, as detailed below. The second group, called test set, is used for model validation.

One of the main advantage of our approximation is the possibility of modeling each individual based on his/her own data, unlike other approximations that work on average models.

EC evolves a set of mathematical expressions consisting of operators and functions as complex as we need to describe the function. As a result of the evolutionary process, an expression that models the glycemia of the patien. In this process, we apply grammatical evolution and, in order to guide the evolution of the model, we manage an objective function that measures the error of the expression with respect to the input data of the training set. The resulting model, individually customized for each patient, is used to forecast the short, medium or long-term glucose level.

Obviously, at the time that the model does not fit well with reality or you have new data, the model gathering process can be started again. In this case, it can evolve previously obtained models, totally random new models, or a mixture of both approaches.

glUCModel includes a module devoted to glucose level modeling. The key point here is that the module provides a customized model of the glucose by applying grammatical evolution on a training data set of glucose, insulin and carbohydrate measures. Next, we describe this process with more detail.

Grammatical Evolution (GE) [31,32] is a grammar-based form of Genetic Programming (GP). Individuals are represented with integer chromosomes that are decoded following the rules of the provided grammar. Hence, each chromosome represents not only the genotype, but also the phenotype of a given individual. Such representation allows the use of the typical selection, crossover and mutation operators, as in classic Genetic Algorithms, evolving the phenotype in the same way as GP operators evolve programs. In summary, we may apply GE to symbolic regression, modeling any chronic disease. Accuracy of the resultant model mostly depends on the available data. Any level of the patient’s body, blood pressure, etc., collected during the illness, may be used as training set for a GE regression.

GE requires the definition of a grammar where the relationship between input variables was drafted, including any possible restriction. Starting with the grammar, the evolution progresses evaluating different candidate models that present differences with the training data. The average of these differences results in the error of the model, which is the objective function that the GE process tries to minimize.

In the case of diabetes, we have considered a general model that includes the following variables: glucose, insulin, carbohydrates and time. Then, the estimated glucose value, denoted as 
                           
                              
                                 
                                    GL
                                 
                                 
                                    ^
                                 
                              
                           
                        , is obtained by using previous estimated glucose values and actual carbohydrates and insulin units. We have assumed this idea following the behavior of the human body. Hence, taking into account that each measure of the variables of the data set was taken in a time k with 
                           
                              1
                              ⩽
                              k
                              ⩽
                              N
                           
                        , a general form of the model should be similar to the following:
                           
                              (1)
                              
                                 
                                    
                                       GL
                                    
                                    
                                       ^
                                    
                                 
                                 (
                                 k
                                 +
                                 1
                                 )
                                 =
                                 f
                                 (
                                 
                                    
                                       GL
                                    
                                    
                                       ^
                                    
                                 
                                 ,
                                 CH
                                 ,
                                 IS
                                 ,
                                 IL
                                 )
                                 ,
                                 
                                 1
                                 ⩽
                                 k
                                 ⩽
                                 N
                              
                           
                        where 
                           
                              
                                 
                                    GL
                                 
                                 
                                    ^
                                 
                              
                              (
                              k
                              +
                              1
                              )
                           
                         is the next estimated glucose value, 
                           
                              
                                 
                                    GL
                                 
                                 
                                    ^
                                 
                              
                           
                         corresponds to previous estimated glucose values, CH corresponds to previously ingested carbohydrates and IS and IL correspond to previously injected insulin for both types, short and long effect.

After many tests, we have defined a grammar that successfully models this behavior and obtains good results for synthetic data generated by the in silico patient simulator AIDA [33].

As an example, we detail the results obtained for an in silico patient called Patient #1. We collected the training set for 24h (96 measures) and run GE with our grammar 30 times. Fig. 7
                         shows the plots of the actual glucose level (blue
                           1
                           For interpretation of color in Fig. 7, the reader is referred to the web version of this article.
                        
                        
                           1
                        ), the best model obtained (red) and the average of the 30 solutions (yellow).

Both best and average solutions have a shape similar to the actual glucose. Moreover, the best solution obtained a percentage average error value of 8.57%. The expression of the best model was the following:
                           
                              
                                 k
                                 +
                                 91.08
                                 +
                                 11.92
                                 -
                                 IS
                                 (
                                 k
                                 -
                                 68
                                 )
                                 +
                                 
                                    
                                       73.80
                                    
                                    
                                       exp
                                       (
                                       
                                          
                                             k
                                          
                                          
                                             08.36
                                          
                                       
                                       -
                                       cos
                                       (
                                       IL
                                       (
                                       k
                                       -
                                       55
                                       )
                                       )
                                       )
                                    
                                 
                                 +
                                 
                                    
                                       k
                                    
                                    
                                       16.92
                                    
                                 
                                 -
                                 
                                    
                                       IL
                                       (
                                       k
                                       -
                                       24
                                       )
                                    
                                    
                                       exp
                                       (
                                       2.56
                                       )
                                    
                                 
                              
                           
                        
                     

In the test phase of this patient, we modified several variables along a day, both carbohydrates and insulin values. As seen in Fig. 8
                        , these variations were not captured by the best and average models. However, the best solution obtained a percentage average error value of 15.67% in the test phase.

We have performed similar tests with five other in silico patients from AIDA simulator. However, for the sake of space, we do not detail in this paper those experiments. Instead, we present a summary of the statistics obtained for the best model found for each patient in the training phase, including Patient #1. Table 4
                         shows these statistics, which are three: average error, successfully predicted hypoglycemias (glucose 
                           
                              ⩽
                           
                        70mg/dl) and successfully predicted hyperglycemias (glucose 
                           
                              ⩾
                           
                        180mg/dl). As can be seen, hypoglycemias are correctly predicted in four out of six patients, whereas for the other two we obtained good percentages. In addition, models successfully predict hyperglycemias over 90% in four out of six patients, with also high percentages for the other two patients.

The test phase for the rest of the in silico patients was performed in a similar way as described for Patient #1. Table 5
                         shows the statistics of this phase. Here we can see that, as expected, the average error is increased. However, the difference with the training phase is under 7.2% in all cases but Patient #5, whose test phase is worse. In addition, the predictions for hypo and hyperglycemias also perform well. Again, hypoglycemias are successfully predicted in four out of six patients, while the other two decrease the precision in less than a 10%. The case for hyperglycemias is different. The models improve the prediction of hyperglycemia for Patient #2 and Patient #5, and the models for Patient #1 and Patient #3 obtain the same percentage as in training. However, the model for Patient #6 is a 7.22% worse. These differences are due to the variations applied in order to generate the test data and the variables included in the extracted models. Despite the fact that the variations were unbiased and followed typical ingestion changes, it turns out that they benefit the models obtained in training.

As seen, predictions in test phase are successful in high percentages, which is very important for a final application of the model generation in real patients. And, as stated before, a deeper analysis of these data and models is out of the scope of this paper.

Therefore, as proven by our results, the GE module fed with the data from a patient is able to produce a glucose model with an average error small enough to provide good future glucose estimations. In addition, given that the database could be updated with new data on a regular basis, the GE can be run each time the model reaches a threshold error, refreshing the glucose expression with a new model better fit to the newest data.

As mentioned above, we have used the same frequency than AIDA (1/15min). The use of smaller frequencies could produce aliasing [34]. Aliasing is produced if the sampling frequency is too small compared to the frequency of the sampled signal. It is also worth noting that our model is completely predictive, i.e., the prediction horizon is 24h because, despite that the model obtains data for the next 15min, it does not use recent real data. On the other hand, the model uses estimated values. In this regard, we are obtaining the maximum error that our predictive model will reach. Our next step consists of incorporating continuous glucose sensors to reduce the prediction horizon and manage real data since the actual moment of prediction. As a result, the general form of the model would be similar to the following:
                           
                              
                                 GL
                                 (
                                 k
                                 +
                                 1
                                 )
                                 =
                                 f
                                 (
                                 GL
                                 ,
                                 CH
                                 ,
                                 IS
                                 ,
                                 IL
                                 )
                                 ;
                                 
                                 1
                                 ⩽
                                 k
                                 ⩽
                                 N
                              
                           
                        where GL corresponds to the glucose value given by the sensor. Thus, given our (relatively) small errors in the full predictive model, the incorporation of a continuous sensor will always improve our current results.

To manage this web application, we created three different user profiles:
                        
                           1.
                           
                              Administrator: is the responsible of creating accounts within the web application. A new user must contact with the administrator, via email, for start using the application. After the necessary approval, the administrator will register the user. This function will be performed by the administration section of the hospital.


                              Physician: One of his functions is to introduce new patients. The specialist can communicate with them, observe their data and their evolution, and train g-RS to give new recommendations, as we have explained in Section 4.3.


                              Patient: The patient can introduce his data and upload medical proofs (see Section 4.1), and receive recommendations related to his life style (see Section 4.3). As well, he has control over his illness without going to the clinic, as the doctor can review his medical data through the application. Patient is associated with the physician that introduced him in the system.

In the following, we describe one example of use. Initially, only the administrator has access to the application, and he can register new physicians only when requested. Next, the doctor has to accept a license agreement to use glUCModel. The knowledge of the g-RS can be fed with new cases provided by the doctors. Using a set of intuitive dialog boxes, doctors may introduce new rules in the database like: If the patient is familiar with diabetes terms like hyperglycemia, hypoglycemia or intensive therapy, but he does not practice exercise, the patient should read units 5 and 6 in Moodle If the glucose levels after breakfast were lower than normal, the patient should read unit 3 and perform tests number 2 and 5. The doctor is able to introduce thousands of rules in this way. Finally a doctor can ask g-RS to generate a given number of recommendations based on the previous rules. The higher the number of rules, the higher the precision of g-RS, mainly because the system can consider a greater number of cases to be compared with patient’s data, resulting in the generation of better suggestions.

Consider for instance that a diabetic is visiting the specialist for the first time after he/she knows is suffering the illness. After the usual initial questionnaire, the physician detects that the patient has a set of characteristics that make him to be a possible candidate for using glUCModel, such as an academic that uses mobile devices on regular basis, and who has several doubts about his disease. After a personal interview, the physician decides he is an appropriate candidate, and registers this patient in the application.

When the patient logs in and accepts the license agreement, he must complete an initial test, to check his knowledge on different topics. Then, g-RS evaluates the data from the test, and makes a set of recommendations. These suggestions are received by the patient in his inbox on g-RS. g-RS carefully checks the knowledge of the patient about emergency situations, symptoms, how to recognize hypoglycemia, acute complications and how to proceed.If necessary, g-RS will send recommendation messages suggesting to review some lessons and/or to visit the medical or nursing specialist. Next, the user can use the interface data, recording his glycemias, insulins, food intakes, sport activities, weight control and medical tests. Every seven days, he can evaluate his data. g-RS analyzes this information, and creates new recommendations on what habits should be improved to have a better control on his illness. The patient can also access to e-learning course with all the functionalities explained above.

On the other hand, the physician is allowed to consult patient data at anytime anywhere. As a result, the doctor is able to control the disease evolution, and avoiding some unnecessary physical interviews with the patients and hence optimizing economical resources. Finally, the GE algorithm is constantly working in background, providing more accurate models as the patients add more data in the database using our web application. These models allows the physician to forecast some parameters like glucose or insulin levels.

With glUCModel, we have developed a web application that provides patients and physicians with an interface to communicate. Diabetics can upload their medical and daily data, such as sport activity, glucose measurements, insulin injected, food, etc. Meanwhile, the doctors can track patients minimizing the number of visits to the clinic. Physicians may observe the glucose levels, and can review the way in which patients control their diabetes. In addition, with g-RS and the Moodle course, the patient has a way to obtain recommendations and information about how he can improve his lifestyle.

glUCModel offers the patient the possibility of recording this information anywhere and anytime. The application can be used from any device with internet access, like a PC, tablet, or smartphone. So, the task is easy for the patient, because he does not have to be at home to upload the data. glUCModel facilitates all this work, allowing a major control of diabetes.

We have integrated a method, based on evolutionary computation, that predicts the future glucose level. We are obtaining models using data introduced by patients in glUCModel like insulin, carbohydrates, sport activity, etc.

In addition we are also incorporating the support of extracting the relevant information about diabetes from other applications. The functionality of these applications is diverse, from calculating the distance realized in a route cycling, to recording the food and calories ingested. glUCModel could record all this information in the local DB.

Finally although glUCModel can be used from any device with internet connection, we plan to include optimized HTML5 modules to further ease the process. Currently, the approval of the ethic committees of Toledo and Alcalá de Henares has been obtained. Thus, our immediate future work consists of evaluating the correct acceptance of the application patients as well as doctors, in both Hospital Virgen de la Salud (Toledo, Spain) and Hospital Universitario Príncipe de Asturias (Alcalá de Henares, Spain).

@&#REFERENCES@&#

