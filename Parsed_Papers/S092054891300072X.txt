@&#MAIN-TITLE@&#M-GREEN: An active queue management mechanism for multi-QoS classes

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We proposes a QoS AQM mechanism, M-GREEN, for multi-QoS classes.


                        
                        
                           
                           It extends the concept of “Random” in RED to “Global Random”.


                        
                        
                           
                           It extends the concept of “Early Detection” in RED to “Early Estimation”.


                        
                        
                           
                           It extends the “linear” concept of RED to an “exponential” one.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Active queue management

Quality of service

Random Early Detection

Global Random Early Estimation for Nipping

@&#ABSTRACT@&#


               
               
                  This paper proposes a QoS active queue management (AQM) mechanism for multi-QoS classes, named as M-GREEN (Global Random Early Estimation for Nipping), which includes the consideration of QoS parameters and provides service differentiation among different flows/classes. M-GREEN extends the concept of “Random” and “Early Detection” in RED to “Global Random” and “Early Estimation,” respectively. Furthermore, M-GREEN extends the “linear” concept of RED to an “exponential” one to enhance the efficiency of AQM. For performance evaluation, extensive numerical cases are employed to compare M-GREEN with some popular AQM schemes and to show the superior performance and characteristics of M-GREEN. Consequently, M-GREEN is a possible way to provide the future multimedia Internet with differential services for different traffic classes of diverse QoS requirements.
               
            

@&#INTRODUCTION@&#

Demand for multimedia services is the inevitable trend in the future. Hence, the Internet of the future will distribute multimedia traffic, which requires diverse quality of service (QoS). Consequently, multimedia distribution poses a challenge to the Internet. The QoS issues and standards about the Internet have been addressed in IntServ [1] and DiffServ [2]. A possible architecture suitable to the current Internet is depicted in Fig. 1 of [3], where the InterServ is applied to LAN (or intranet) and the DiffServ to WAN (or the Internet). Owing to the problem of scalability of IntServ, DiffServ is more suitable for the Internet, at least in the near future. The end-to-end QoS for providing QoS, except the original flow control, e.g. [4], the resource management is the main task [5]. Two control mechanisms are usually employed and studied, i.e., scheduling algorithms for multiple queues, e.g., [6,7], and active queue management (AQM) schemes for a common buffer discussed in this paper.

In the past two decades, many researchers used AQM to improve the performance, e.g., Early Random Drop (ERD) [8,9], Random Early Detection (RED) [8,10] and its variants [11–15], REM [16,17], GREEN [18–20], BLUE [21], AVQ [22], CHOKeW [23] and so on. Control theory is also applied to the AQM, e.g. [3,24,25]. Owing to the popularity of RED, many scholars developed the variants of RED, e.g., [11] used average delay instead of average queue length, LRED [12] used loss ratio, SBAQM [13] used input and output rates, WRED [14] used two sets of parameters of RED, and ARED [15] automatically adapted the parameters of RED. Moreover, BLUE [21] used loss ratio and link utilization jointly; REM (Random Exponential Marking) [16] used rate and queue length jointly; REM (Random Early Marking) [17] based on the PI algorithm [25] and fed the queue occupancy into the PI algorithm to determinate the probability of marking an incoming packet as out, like WRED. Our work GREEN (General Random Early Estimation for Nipping) [19] first introduced the parameters of QoS into the AQM and extended the early detection of RED to early estimation. In this way, GREEN tried to satisfy the QoS requirements of users and to make the nipping decision earlier. Later, two algorithms with the same name GREEN are proposed. The GREEN (Generalized Random Early Evasion Network) [18] improved the fairness by way of estimating the dropping probability. The other GREEN [20] adjusted the rate of congestion notification by the estimated data arrival rate, which in fact is a special case of REM [16]. On the other hand, an AQM with another approach, named AVQ (adaptive virtual queue) [22], regulates the utilization instead of the queue lengths or the average queue lengths in the above AQMs. Furthermore, a novel algorithm named CHOKeW [23] was developed to make a dropping decision by statistics instead of a probability function, which is the general basis of most AQM algorithms. In CHOKeW, the number of packets in the queue is assumed to form an enough statistics. When a packet arrives at the queue, some packets (depending on a weight assigned to the flow of the arrival) are selected from the queue in sequence and the flow id of the arrival is compared with those of the packets selected. When the two ids are matched, both packets are dropped. In this way, CHOKeW can provide the service differentiation. The literatures of AQM are flourishing. We are not able to and do not intend to do a complete survey. Interested readers can refer to some survey papers, e.g., [26,27].

The AQM mechanisms can be roughly classified along two dimensions: when the packet discard decisions are made and what information is used [26]. On the other hand, the authors think that the design issues can be widely considered in detail as follows:
                        
                           1.
                           The network statuses for judging congestion;

The events to trigger the AQM;

The choice of packet (or connection) to be punished;

The punishment of a violated packet, e.g., dropped or marked.

For example, ERD and RED used (average) queue length as the judging criterion and used the event of (average) queue length greater than a certain threshold to trigger the AQM.

This paper proposed the M-GREEN algorithm, which considered multiple QoS classes that are the key factors of the future Internet. According to the popular AQMs in the past and combining our points of view discussed above with the dimensions mentioned in [26], the design issues of an AQM can be divided into two major classes. One is the consideration of “Early or not” and the other is the consideration of “Random or not”. “Early or not” means that the suitable time to execute the selection of a violated packet should be either “before” or “just at” the time of buffer full. It actually integrates the design issues 1 and 2 mentioned above. “Random or not” means that a selected packet should be punished either “randomly” or “surely”. It integrates design issues 3 and 4 mentioned above. If “Early” is used, it cannot avoid using “Random”, because it is unreasonable to surely punish packets when the buffer resource is not yet exhaustive. Unfortunately, it is possible for RED, because the average queue length used in RED may be greater than the maximum threshold even when the buffer is not yet full. A large threshold can be assigned in RED to avoid this phenomenon, but how to assign a suitable value is not an easy task.

Furthermore, although some cell-based AQMs, e.g., EPD (early packet discard) [28], may discard packets “early” and “surely”, they are different from the packet-based schemes in terms of “level”. EPD discards the entire packet surely, if any cell of the packet has been discarded such that the corresponding cells of the packet become useless, even though the buffer is not full (early). EPD operates at the “cell-level”, but the packet-based schemes operate at the “packet-level” and are not suitable for discarding a packet “early” and “surely”. Therefore, it is obvious that “Early” implies “Random” for a packet-based AQM. Similarly, “Random” implies “Early”, because, if the buffer is full, the new packet is dropped surely, and not randomly. Consequently, the combination of “Random” and “Early” is the main stream of AQM. It started from ERD and was enhanced in RED and GREEN.

Therefore, M-GREEN adopted the main stream as that in GREEN [19] and modified the core of nipping probability in GREEN. Especially, M-GREEN provided differential services for different traffic classes with diverse QoS requirements to achieve the target that makes the future multimedia Internet come true.

The rest of the paper is organized as follows. The proposed AQM M-GREEN is described in detail in Section 2. Section 3 evaluates the performance of M-GREEN and provides extensive numerical examples to illustrate the characteristics and the advantages of M-GREEN. Finally, some concluding remarks and future works are given in Section 4.

The philosophy of GREEN [19] is applied to M-GREEN. Furthermore, M-GREEN modified some defects of GREEN, which include the utilization estimation and the entropy probability. Except that, M-GREEN provides the service differentiation by way of the QoS requirement of users and the nipping thresholds. M-GREEN uses Global Random and Early Estimation for Nipping packets just the same as GREEN [19]. GREEN extends the random feature to a global random that considers not only the network statuses but also the QoS requirements. Furthermore, GREEN extends Early Detection to Early Estimation, which uses the variations of network statuses to estimate the future statuses. Using estimation in AQM is first seen in our paper [19] and then in SBAQM [13]. By Early Estimation, GREEN can get the information of network statuses earlier than Early Detection and can speed up the decision-making. Other advantages and naming philosophy of GREEN can be referred to [19].

The following will present the M-GREEN algorithm and show how Global Random and Early Estimation are employed in the algorithm. First the system model and notations are described. The system consists of a common buffer with size K and an output link with bandwidth capacity B. There are M QoS classes in the input traffic and the QoS class-i, i
                        =1, …, M, is described by loss requirement l[i] and delay requirement d[i]. For IntServ, a class contains only one flow, and for DiffServ, a class generally contains more than one flow. The QoS requirements may be specified in the call setup phase for connection-oriented traffic or assigned by the user/ISP (Internet Service Provider) for connectionless traffic. Some details of these issues will be given in the next sub-section. In M-GREEN, the queue length q is compared with the nipping threshold Tn
                        [i], like ERD, but unlike RED. When the queue length is beyond Tn
                        [i], the arriving packet may be nipped according to the nipping probability Pn
                        . The nipping probability function is the quintessence of M-GREEN and is developed from the properties of “Global Random” and “Early Estimation”. The subscript “n” of Tn
                        [i] and Pn
                         stands for “nipping”.

The Global Random property of M-GREEN is exhibited at the components of nipping probability, which consists of not only network statuses (e.g. queue length and link utilization) but also QoS requirements (e.g. delay requirement and loss requirement). The former (network status) was commonly used in AQM, while the latter (QoS requirement) becomes more important in the future Internet. There are three network statuses used in M-GREEN: queue length q, network utilization u, and count of un-nipped packets after the last nip cp
                         
                        [19], where the subscript p stands for “packet.” Combined with the property of “Early Estimation,” the queue length and the utilization evolved to a probability Pe
                         called entropy probability, where “e” stands for “entropy”. The Pe
                         is similar to the initial probability pb
                         in RED and derived later. In order to make the number of packets between two marked packets uniform, the marking probability is derived by taking the count of unmarked packets into account in [8]. This scheme will also be used in M-GREEN. Consequently, there is a term Pt
                         (subscript “t” for “temporary”) that contributes to M-GREEN and is expressed by [8,19]
                        
                           
                              (1)
                              
                                 
                                    
                                       P
                                       t
                                    
                                    =
                                    
                                       P
                                       
                                          e
                                          _
                                          pre
                                       
                                    
                                    /
                                    
                                       
                                          1
                                          −
                                          
                                             c
                                             p
                                          
                                          
                                             P
                                             
                                                e
                                                _
                                                pre
                                             
                                          
                                       
                                    
                                 
                              
                           
                        which is modified from pb
                        
                        /(1 — count pb
                        ) in RED. Note that P
                        
                           e_pre
                         is a re-calculated entropy probability, which comes from the property of Early Estimation (described later). One more thing to clarify is that the philosophy of the expression of notations in this paper uses a subscript to denote different types of the same kind of parameter, e.g., Pn
                         and Pe
                        , and uses brackets to denote different QoS classes of traffic, e.g., d[i] and l[i].

Naturally, to nip a packet or not should depend on QoS criteria. For example, a packet of real-time traffic with delay over its delay requirement should be nipped, because it is invalid even if it arrives at the destination. In this way, the buffer resource and even the bandwidth resource will not be wasted for those invalid packets, then the system goodput (the valid throughput seen by a higher layer) can be increased. Here, M-GREEN considered two QoS parameters: delay requirement and loss requirement [19]. For delay requirement, the queueing delay q/B of the arriving packet will be compared with the delay requirement of the class corresponding to the arriving packet. If the queueing delay q/B is greater than the delay requirement, it means that the delay requirement cannot be satisfied and the arriving packet is nipped. Similarly, for the loss requirement, a hypothetical loss ratio will be compared with the loss requirement. The loss ratio is obtained by a weighted moving average (e.g., [8]) and by assuming that the arriving packet is nipped. If the arriving packet belongs to class-i, then the hypothetical loss ratio for class-i, denoted by Rh
                        [i], is expressed as
                           
                              (2)
                              
                                 
                                    
                                       R
                                       h
                                    
                                    
                                       i
                                    
                                    =
                                    
                                       w
                                       l
                                    
                                    
                                       i
                                    
                                    L
                                    /
                                    
                                       
                                          L
                                          +
                                          
                                             c
                                             u
                                          
                                          
                                             i
                                          
                                       
                                    
                                    +
                                    
                                       
                                          1
                                          −
                                          
                                             w
                                             l
                                          
                                          
                                             i
                                          
                                       
                                    
                                    
                                       R
                                       l
                                    
                                    
                                       i
                                    
                                 
                              
                           
                        where wl
                        [i] is the weight of class-i for obtaining the loss ratio, L is the length of the arriving packet, cu
                        [i] is the count of accumulated amount (in length unit, e.g., byte, so subscript “u” for “unit”) of continuous un-nipped class-i packets, and Rl
                        [i] is the loss ratio at the last drop of packet for class-i. The subscript h of Rh
                        [i] stands for “hypothetical” and subscript l of wl
                        [i] and Rl
                        [i] stands for “loss.” If the loss requirement is greater than or equal to the hypothetical loss ratio, i.e., the loss requirement is still satisfied, then the arriving packet can be nipped if necessary. On the contrary, when the loss requirement cannot be satisfied, the arriving packet should not be nipped if possible. In LRED and BLUE, the loss parameters are also employed in their algorithms, but they are different from that in GREEN. In LRED, the loss ratio is estimated periodically by moving average and employed to calculate the dropping probability, which increases with the increase of loss ratio. In BLUE, the dropping probability increases when a packet drops due to buffer overflow. In M-GREEN, the hypothetical loss ratio is obtained by moving average when a packet arrives at and compared with loss requirement to participate in the nipping (dropping or marking) decision.

Consequently, the nipping probability can be expressed as
                           
                              (3)
                              
                                 
                                    
                                       P
                                       n
                                    
                                    =
                                    max
                                    
                                       
                                          U
                                          
                                             
                                                q
                                                /
                                                B
                                                −
                                                d
                                                
                                                   i
                                                
                                             
                                          
                                          ,
                                          min
                                          
                                             
                                                max
                                                
                                                   
                                                      
                                                         
                                                            (
                                                            −
                                                            1
                                                            )
                                                         
                                                         
                                                            U
                                                            
                                                               
                                                                  p
                                                                  t
                                                               
                                                            
                                                         
                                                      
                                                      ,
                                                      
                                                         P
                                                         t
                                                      
                                                   
                                                
                                                ,
                                                1
                                             
                                          
                                          U
                                          
                                             
                                                l
                                                
                                                   i
                                                
                                                −
                                                
                                                   R
                                                   h
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where U(x) is the unit step function defined as U(x)=0 if x
                        <0 and U(x)=1 if x
                        ≥0. The two unit step functions are arranged to make the nipping probability equal to 1 when the delay requirement is not satisfied (q/B
                        ≥
                        d[i]) or equal to 0 when the delay requirement is met (q/B
                        <
                        d[i]) and the loss requirement is not satisfied (Rh
                        [i]>l[i]). If both requirements are satisfied, the nipping probability depends on the term Pt
                         of Eq. (1), which however may be negative or greater than 1 for some large cp
                        . The same thing did also happen in RED, i.e., pb
                        /(1 — count pb
                        ) may be negative or greater than 1 for some large count. Therefore, M-GREEN assigns Pt
                         to be 1 if Pt
                        
                        >1 or Pt
                        
                        <0, which results in the min–max function in Eq. (3).

The Early Estimation property of M-GREEN is achieved by pre-calculating some parts of the nipping probability function. Those parts make up the entropy probability Pe
                         in Eq. (1), which represents the normalized entropy of a network. If a network is with larger entropy, the arriving packets should be nipped with a larger probability to lower the entropy. The entropy is in terms of the network statuses, including the buffer occupancy and the link utilization. For the purpose of Early Estimation, the entropy will be obtained by estimation. In the aspect of buffer occupancy, a queue length variation Δq is estimated by moving average with weight wq
                         and expressed by
                           
                              (4)
                              
                                 
                                    Δq
                                    ←
                                    
                                       w
                                       q
                                    
                                    
                                       
                                          q
                                          −
                                          
                                             q
                                             pre
                                          
                                       
                                    
                                    +
                                    
                                       
                                          1
                                          −
                                          
                                             w
                                             q
                                          
                                       
                                    
                                    Δq
                                 
                              
                           
                        where qpre
                         is the queue length seen by the previous entering packet. The arrow represents the recursive relation between a new Δq and a previous Δq, like a common use of [8, (1)]. By using
                           
                              (5)
                              
                                 
                                    s
                                    =
                                    max
                                    
                                       
                                          0
                                          ,
                                          K
                                          −
                                          
                                             
                                                q
                                                +
                                                Δq
                                             
                                          
                                       
                                    
                                 
                              
                           
                        to estimate the space left at the next packet entering time, a component 2−⌈sN/K⌉ contributes to Pe
                         to indicate that the nipping probability should be larger, if the (estimated) space left is smaller. The term N is called grid number and is employed to make the effect of exponent of 2 significant. Specifically, because 2−
                           s
                         is still too small for small s to efficiently nip packets and 2−⌈sN/K⌉ is generally larger than 2−
                           s
                        , 2−⌈sN/K⌉ is employed instead of 2−
                           s
                        . For example, when N
                        =20, K
                        =100,000 (bytes), and s
                        =1000 (bytes), we have 2−⌈sN/K⌉
                        =0.5 and 2−
                           s
                        
                        ≈0. The space left can only accommodate one packet more, but the nipping probability is still almost 0 if 2−
                           s
                         is employed. Furthermore, the increasing rate of this component is exponential, rather than linear as pb
                         in RED [8]. Here the exponential function of 2 is used for two merits, which are faster increasing rate and easier implementation. When the queue length increases so as to cause buffer space critical, the increasing rate of an exponential function is faster than that of a linear function and can reduce the congestion faster. Furthermore, the exponent of 2 can be implemented easily by shift registers. A similar concept of exponential function is utilized in REM [16]. However, the marking probability of [16, (4)] is intentionally designed to make the end-to-end marking probability [16, (5)] elegant, which is different from the purpose of Eq. (5).

In the aspect of link utilization, the entropy probability should be larger for larger link utilization in order to nip the arriving packet with larger probability. The link utilization can be found by
                           
                              (6)
                              
                                 
                                    u
                                    =
                                    
                                       L
                                       T
                                    
                                    /
                                    
                                       BT
                                    
                                 
                              
                           
                        where LT
                         is the total length of departure packet in time window T
                        =[A
                        −
                        T, A], and A is the time of an observation point that is the arrival time of an arriving packet. However, in this way, M-GREEN should trace the system state to know when the system is idle or busy and how long the periods are. It induces much complexity, so we develop a method to estimate u recursively when a packet enters into the buffer. The utilization is estimated during the time window T before the departure time, instead of arrival time, of the arriving packet. The estimations of u and LT
                         are done by shifting (advancing) the time window T by the amount of an inter-departure time. In the case that the packet arrives during a busy period, the inter-departure time is the service time of the arriving packet L/B and the shift results in decrease in LT
                         by the amount uB
                        (L
                        /
                        B), so we have
                           
                              (7)
                              
                                 
                                    
                                       L
                                       T
                                    
                                    ←
                                    L
                                    +
                                    
                                       L
                                       T
                                    
                                    −
                                    uB
                                    
                                       
                                          L
                                          /
                                          B
                                       
                                    
                                    =
                                    
                                       L
                                       T
                                    
                                    +
                                    
                                       
                                          1
                                          −
                                          u
                                       
                                    
                                    L
                                    .
                                 
                              
                           
                        
                     

On the other hand, when the packet arrives during an idle period, the shift time is equal to the inter-departure time A
                        +
                        L/B
                        −
                        I, where the start time of the idle period I is the departure time of the previous packet and A
                        +
                        L/B is the departure time of the arriving packet with arrival time A, so we have
                           
                              (8)
                              
                                 
                                    
                                       L
                                       T
                                    
                                    ←
                                    L
                                    +
                                    max
                                    
                                       
                                          0
                                          ,
                                          
                                             L
                                             T
                                          
                                          −
                                          uB
                                          
                                             
                                                A
                                                +
                                                L
                                                /
                                                B
                                                −
                                                I
                                             
                                          
                                       
                                    
                                    =
                                    L
                                    +
                                    max
                                    
                                       
                                          0
                                          ,
                                          
                                             L
                                             T
                                          
                                          −
                                          u
                                          
                                             
                                                AB
                                                +
                                                L
                                                −
                                                IB
                                             
                                          
                                       
                                    
                                    .
                                 
                              
                           
                        
                     

Note that, if the idle period (A
                        −
                        I) is large, the estimated remaining packet length LT
                        
                        −
                        uB
                        (A
                        +
                        L/B
                        −
                        I) may be less than 0. A negative remaining packet length should be avoided, so the max operator is included in Eq. (8).

According to the factors mentioned above, the entropy probability can be expressed by
                           
                              (9)
                              
                                 
                                    
                                       P
                                       e
                                    
                                    =
                                    
                                       
                                          2
                                          
                                             −
                                             
                                                
                                                   sN
                                                   /
                                                   K
                                                
                                             
                                          
                                       
                                    
                                    u
                                    
                                    or
                                    
                                    
                                       P
                                       
                                          e
                                          _
                                          pre
                                       
                                    
                                    =
                                    
                                       
                                          2
                                          
                                             −
                                             
                                                
                                                   sN
                                                   /
                                                   K
                                                
                                             
                                          
                                       
                                    
                                    u
                                    .
                                 
                              
                           
                        
                     

Note that this entropy probability is used for the next arriving packet, so the P
                        
                           e_pre
                        , rather than Pe
                        , is used in Eq. (1). It is the true essence of “Early Estimation,” and it can speed up the decision-making. The core of Eq. (1), i.e., the P
                        
                           e_pre
                        , is ready when a new packet arrives at. The new P
                        
                           e_pre
                        , i.e., the Pe
                        , is calculated in parallel when the arriving packet is entering the buffer, so it will not influence the decision-making at the current time.

The overall M-GREEN algorithm is described in Fig. 1
                        , where nipping a packet means dropping the packet for simplicity. The min–max function in Eq. (3) is implemented by an if-test and Eq. (3) is also implemented by logical comparisons, rather than by functions. Note that, because the loss ratio Rh
                        [i] is hypothetical by assuming that the arriving packet is dropped, Rh
                        [i] will not replace Rl
                        [i] until a packet is really nipped. At the beginning, the initial values of system parameters (wl
                        [i], K, Tn
                        [i], T, B, wq
                        , N) and QoS parameters (l[i], d[i]) are given and the initial values of system variables (cu
                        [i], Rl
                        [i], q, P
                        
                           e_pre
                        , cp
                        , LT
                        , u, I, q pre
                        , Δq) are set to be 0.

In M-GREEN, some system parameters should be configured beforehand. Fortunately, it is not a hard task. First, two weights for moving averages of loss ratios and queue length are needed. This task is the same as those in [8,14,15], where there are no theoretical suggestions and optimal values. However, the numerical results from [19] and from Case 2 in the next section reveal that M-GREEN is stable in a wide range of these two parameters. That is, the values of these parameters can be chosen easily. The second task is to choose the nipping thresholds. It is the parameter to make bandwidth differentiation (Case 6 in the next section). The role of nipping thresholds for different classes is to provide the differentiated service rather than the absolute service, so the setting philosophy is to provide the relative relation and it is easily done to get a good performance (see Case 6). The third task is to set the time window T for estimating utilization. Because it is impossible to use an infinite time window, a large enough T is used instead. Nowadays, the speed of backbone is with the order of Gbps or 108bytes per second, so a time window of 0.1s is large enough. Finally, with regard to the grid number N (Case 1 in the next section), it should be set to make the exponential function (Eq. (9)) work. If N is too large, the early nipping will not work. On the other hand, if it is too small, the early nipping probability will be larger. From our experience, set N to be 20 and to have the nipping probability between 2−20 and 1 is good enough.

Moreover, to provide QoS, the distribution of QoS parameters is an important issue. In the Internet, the end-to-end service provision cannot be obtained just by a distributed QoS mechanism. It needs the cooperation of some kinds of centralized management mechanisms, e.g., call admission control (CAC) and signaling protocols like RSVP [29] or COPS [30]. Although the distribution of QoS parameters is still an open issue, this does not mitigate the importance of QoS AQM. This paper puts focus on the AQM mechanism in a distributed manner, so it will not provide the deep specification of how to get the end-to-end QoS. However, we still provide a possible and simple approach to distribute the end-to-end QoS parameters to the distributed AQM mechanism of every node.

The distribution of QoS parameters depends on the CAC, the signaling protocol, and the routing protocol. To perform a successful distribution needs a complete study on these fields, which is beyond the scope of this paper, so this paper describes this issue from another point of view. We describe the possible approach from two dimensions: the transmission mode and the granularity. There are two transmission modes: the connection-oriented, e.g., TCP, and the connectionless, e.g., UDP, and there are two different granularities: per-flow and per-class. The distribution of QoS parameters for the connection-oriented mode can be done during the call setup phase and is easier than that for the connectionless mode. However, there are still two problems. One comes from the connectionless property of IP, which causes non-fixed paths, and the other is how to share “duties” (loss and delay) among the nodes along the routing path. The first problem may be solved by using a fixed-path routing, e.g., the source routing. It is just a possible solution. The perfect solution still needs further researches. The second problem, duty-sharing, can be done by an easy way to share the duty fairly among the nodes. This should be assisted by fixed-path routing; otherwise it will face another problem that the nodes along the path are not fixed. Another complicated solution involves the IP header. The QoS parameters are recorded in the IP header and are then checked and modified at each node. For example, the delay requirement can be put into the IP header and the AQM mechanism at each node will check whether the delay requirement is satisfied or not. If it is satisfied, the value is modified before the departure of the packet. For the connectionless transmission mode, the task to distribute the QoS parameters is not easy. Two ways can be used: One is, as described above, to put the parameters in the IP header; and the other is to pre-assign the duty-share to a node, then the node can provide some kind of treatment for some kind of traffic. However, they still cannot solve the problem of QoS distribution completely. The perfect solution still needs further study.

From the other dimension — granularity, the per-flow-based is with meticulous granularity and the per-class-based is with coarse granularity. The more meticulous the granularity is, the easier the QoS distribution is. In the per-class-based, the end-to-end QoS requirements may be different for different flows in a same class. Consequently, the per-flow-based can distribute the QoS parameters of a flow exactly, but the per-class-based can only distribute the “common” QoS parameters of the flows in a class, e.g., the minimum, the maximum, or the average value of the QoS parameters of all the flows in a class. In our proposed AQM M-GREEN, a QoS class is relative to a flow for the flow-based and to a class for the class-based.

Another implementation issue is the complexity. Here, M-GREEN is compared with the most popular and the easiest RED to show that the Early Estimation property makes M-GREEN compete with RED at the decision-making instant. When a packet arrives to trigger the decision-making, there are two main differences between the kernels of M-GREEN and RED. The first difference is that M-GREEN needs to calculate the hypothetical loss ratio Rh
                        , while the average queue length is calculated in RED. In M-GREEN, the calculation of Rh
                         needs two additions, one subtraction, two multiplications, and one division. For RED, calculating the average queue length at least needs one logical comparison. If the queue is nonempty, it needs one addition, one subtraction, and two multiplications more. If the queue is empty, it needs two subtractions, one multiplication, a linear function and a power function more. The second difference is that M-GREEN needs to find the nipping probability Pn
                        , while RED needs to find the marking probability pa
                        . To find the nipping probability by Eqs. (3) and (1) in M-GREEN (refer to Fig. 1) needs one subtraction, one multiplication, one division, and four logical comparisons. To find the marking probability in RED [8, p. 401] needs three subtractions, two multiplications, and two divisions. Consequently, RED needs one more addition/subtraction and one more multiplications/divisions for nonempty queue than M-GREEN does; M-GREEN needs three more logical comparisons than RED does. However, RED additionally needs a linear function, a power function, and one more addition/subtraction for empty queue. In a word, M-GREEN that considers multiple QoS classes can compete with RED in terms of complexity. In addition to the computation complexity, the packet classification is needed for M-GREEN. It is easy for DiffServ by way of checking the DSCP (DiffServ code point). For IntServ, the only way is the check of the address–port pair, whose complexity is the same for all AQMs of IntServ.

@&#PERFORMANCE EVALUATION@&#

In order to illustrate the good performance and characteristics of M-GREEN, extensive simulations are conducted and are compared to some well-known AQM schemes: ARED, BLUE, REM, and CHOKeW. There are many AQM schemes, but not all of them are available for us. It is impossible and difficult to collect all of them, so some representative schemes are employed here. Furthermore, because there are no representative and standard topologies that can stand for all the networks, just in order to do the comparison, a popular dumbbell topology shown in Fig. 2
                     
                     [23,24] is employed here. The links between source/destination and router are with link capacity 10Mbps and propagation delay 1ms (some exceptions in Cases 1 and 8). The link capacity between routers is 1Mbps and the propagation delay is 1ms. All the following examples are simulated by ns2, where the default ECN is used, but the default Tahoe is changed to the most popular Reno. The buffer sizes K in routers R
                     1 and R
                     2 are 500 packets and each packet is with fixed size 1kbyte. Each simulation terminates at time 100s.

Except specifying additionally, the parameters in the AQM schemes are as follows. In ARED, minth
                     =100 packets, and automatically maxth
                     =3 minth, maxp depends on queue length, and wq
                      is obtained by [15, (1)]. In REM, ϕ
                     =1.001, α
                     =0.1, γ=0.001, and b*=20, which are the default settings in ns2. In BLUE, δ
                     1
                     =0.0025, δ
                     2
                     =0.00025, and freeze_time=100ms. In CHOKeW, L
                     th
                     =100 packets, L
                     −
                     =125 packets, L
                     +
                     =175 packets, p
                     +
                     =0.002, p
                     −
                     =0.001, and priority weight for each flow is 1. The values of parameters of BLUE and CHOKeW are the same as those in [23]. In M-GREEN, N
                     =20, T
                     =100ms, and Tn
                     [i]=250 packets, wq
                     [i]=0.7, wl
                     [i]=0.7, l[i]=0.01 and d[i]=∞ for all i. Eight cases are presented: Two cases (Cases 1 and 2) present the choice of the parameters N, wq
                     , and wl
                      of M-GREEN used in the following cases; five cases (Cases 3–7) present the general performance of M-GREEN compared with other AQMs; one case (Case 8) presents the unique performance of M-GREEN that considers the parameters of QoS.
                        Case 1
                        Grid number N.


                        
                           Fig. 3
                            shows the overall throughput for M-GREEN when there are 200 TCP flows. Under different grid numbers, the same overall throughput is obtained. It illustrates the adaptive characteristic of M-GREEN. Furthermore, define the fairness index as [23, (3)]
                              
                                 (10)
                                 
                                    
                                       F
                                       =
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                      
                                                         i
                                                         =
                                                         1
                                                      
                                                      M
                                                   
                                                   
                                                      
                                                         g
                                                         i
                                                      
                                                   
                                                
                                             
                                             2
                                          
                                          
                                             M
                                             
                                                
                                                   ∑
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   M
                                                
                                                
                                                   
                                                      g
                                                      i
                                                      2
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           where gi
                            is the throughput of flow i. Fig. 4
                            shows the fairness of M-GREEN for the scenario where four groups, each with 50 TCP flows, are used and each group is with propagation delay 3ms, 30ms, 50ms, 75ms, respectively, between source (destination) and R
                           1
                           (R
                           2). Fig. 4 illustrates that the fairness varies to a small extent when the grid number changes. It seems to be fairer when the grid number is small and the fairness decreases when the grid number increases. The reason may be that a smaller grid number will earlier trigger the sign of congestion to make the flows earlier adapt the rates to have a fair share of bandwidth. Although the optimal value of fairness in Fig. 4 is at N
                           =25, it is reasonable to figure out that the optimal value in fact depends on the simulation scenario. However, the trend is obvious when the grid number changes, so a grid number that is not too large is suitable. In the following cases, the grid number 20 is employed.

In this case, a scenario with 100 TCP flows and 4 UDP flows is conducted to investigate the influences of weights wq
                            and w
                              l
                           . First, wq
                            is investigated and the results are shown in Fig. 5
                           , where the wl
                            of each flow is fixed at 0.7. Next, wl
                            is investigated and the results are shown in Fig. 6
                           , where the wq
                            of each flow is fixed at 0.7. Both figures illustrate that the choice of wq
                            and wl
                            affects insignificantly, so both values are set to be 0.7 in the following to indicate that the recent values get more attention than the history values in Eqs. (2) and (4).

This case demonstrates how the AQM algorithms utilize the link capacity under pure TCP environments. Fig. 7
                            shows the results of throughput for different numbers of TCP flows. Except REM, all the other AQMs almost fully utilize the link capacity, so M-GREEN is as good as others under pure TCP environments.

In this scenario, 10 UDP flows are mixed with TCP flows whose number is changed from 20 to 50. Because CHOKeW will totally suppress the UDP throughput such that the performance curve of CHOKeW is different from others, the results of CHOKeW are plotted separately. Fig. 8
                            shows the TCP and UDP throughputs for CHOKeW, and Figs. 9 and 10
                           
                            show the TCP and UDP throughputs, respectively, for other AQMs, and Fig. 11
                            shows the overall throughputs for all AQMs. In Fig. 11, all the AQMs, except BLUE, fully utilize the link capacity. That is, when the UDP flows join, BLUE wastes some link capacity and on the other hand the waste in REM under pure TCP environment is compensated by the UDP flows. Figs. 9 and 10 illustrate that the characteristics of M-GREEN are good enough when compared with other AQMs. The results in Fig. 8 are well-known from [23] and it is a good characteristic of CHOKeW. Next case will demonstrate that M-GREEN also possesses this good characteristic.

Generally, UDP flows are not TCP-friendly, so TCP flows may starve, when UDP flows join. Hence, a design goal of AQM is to protect TCP flow from starvation. CHOKeW possesses this good characteristic and so does M-GREEN as we will show. In this case, the number of TCP flows is 100 and the number of UDP flows varies from 1 to 10. In CHOKeW, 50 TCP flows are assigned a weight of 1 and the other 50 TCP flows and all UDP flows are assigned a weight of 2. In M-GREEN, the loss requirements are set to be without effect, i.e., loss requirements are equal to 1 for all flows, and the delay requirements of all TCP flows are set to be infinite. Besides, M-GREEN can adapt the parameter delay requirement to provide different degrees of TCP protection, so two delay requirements (2s and 3s) of each UDP flow are employed respectively. From the results in Fig. 12
                           , it is obvious that M-GREEN can provide TCP protection and the delay requirement of UDP flows can adjust the degree of TCP protection.

Bandwidth differentiation is necessary for a network providing differentiated service. CHOKeW can provide bandwidth differentiation. In this case, we will show that M-GREEN can also provide bandwidth differentiation and the differentiation provided by M-GREEN is more obvious than that by CHOKeW. First, Figs. 13 and 14
                           
                            respectively show the results for CHOKeW and M-GREEN with two different priorities. In CHOKeW, the two priorities are implemented by two weights w
                           1
                           =1 and w
                           2
                           =2, and in M-GREEN they are implemented by two nipping thresholds T
                           1
                           =0.4K and T
                           2
                           =0.5K. Both algorithms provide good differentiation for various numbers of TCP flows. Secondly, the results for CHOKeW with three priorities w
                           1
                           =1, w
                           2
                           =1.2, and w
                           3
                           =2 are shown in Fig. 15
                            and those for M-GREEN with three priorities T
                           1
                           =0.3K, T
                           2
                           =0.4K and T
                           3
                           =0.5K are shown in Fig. 16
                           . It can be seen that M-GREEN provides better differentiation than CHOKeW does, especially for a larger number of TCP flows.

A general parameter of performance evaluation is the fairness, whose index is defined by Eq. (10). In this case, all the TCP flows are divided into 4 groups and each group is with propagation delay 3ms, 30ms, 50ms, 75ms, respectively, between source (destination) and R
                           1 (R
                           2). The results of fairness indexes for all AQMs are shown in Fig. 17
                           . Although the fairness index of M-GREEN is not the best of all, it still keeps close to those of other AQMs.

This case is devoted for presenting the special characteristic of M-GREEN with consideration of QoS parameters. In this case, there are 100 TCP flows and 1–10 UDP flows. For each TCP flow, the loss requirement and delay requirement are set to be without effect, i.e., 1 and infinite, respectively. For each UDP flow, the loss requirement is set to be 1 and the delay requirement is set to be 3s. Figs. 18–21
                           
                           
                           
                            show TCP throughput, UDP throughput, UDP goodput, and UDP goodput ratio (=goodput/throughput), respectively. BLUE outperforms M-GREEN in terms of UDP throughput and UDP goodput. However, M-GREEN outperforms BLUE in terms of UDP goodput ratio and TCP throughput. It means BLUE sacrifices TCP packets for valid and invalid UDP packets. In other words, BLUE wastes bandwidth on invalid UDP packets and suppresses well-behaved TCP flows for aggressive UDP flows. The characteristic of ARED is similar to that of BLUE, i.e., with high UDP throughput and goodput. Furthermore, the goodput ratio of ARED is 100%, the same as that of M-GREEN. However, the TCP throughput of ARED is extremely low and is the worst of all. It does not conform to our expectance. We have probed the behavior of ARED further and find that almost no more than 30 packets are in the buffer during almost the simulation time. It causes low utilization of buffer capacity and low TCP throughput. For REM, both TCP throughput and UDP goodput are low, although its UDP throughput is high. It implies that most of the bandwidth is wasted for the invalid UDP packets. The waste of bandwidth of REM is more serious than that of BLUE. For CHOKeW, because of the absolute TCP protection, the UDP throughput and the UDP goodput are almost 0, i.e., almost no valid UDP packets can reach the destination. Note that, the goodput ratio of CHOKeW is defined to be 0 if the goodput is 0 and the goodput is very low even for goodput ratio 1. With regard to M-GREEN, because of the partial TCP protection and the consideration of QoS parameters, all the UDP throughputs (goodputs) are much more than 0 and all the UDP goodput ratios are 100%. In a word, the M-GREEN has the following advantages; unlike the REM/Blue, ARED, and CHOKeW, the M-GREEN would not waste bandwidth for invalid packets, would not starve the well-behaved TCP flows, and would not completely suppress UDP flows, respectively. Consequently, M-GREEN can look after both well-behaved TCP traffic and valid UDP traffic.

In order to distribute the multimedia traffic efficiently, it is necessary to have a QoS control mechanism implemented in the future Internet. This paper proposes an AQM mechanism M-GREEN, which utilizes not only the network statuses but also the QoS requirements. When compared with other AQMs, M-GREEN can compete with others in terms of throughput and fairness. Especially, owing to the concern of QoS parameters, M-GREEN can provide better bandwidth differentiation and a different degree of TCP protection and would not waste resource for invalid traffic. Consequently, M-GREEN is an effective AQM algorithm for the future Internet. Except the excellent characteristics shown in the numerical examples, there is still one more thing implied in those examples. It is the friendliness for engineers. Specifically, engineers are not beset by the setting of system parameters, because the setting is easy as illustrated in Sub-section 2.2 and the corresponding numerical cases.

There is something in AQMs and in M-GREEN that merits further study. First, the parameters of performance evaluation for AQMs need further specifications. For example, to what degree is suitable for TCP protection, how differentiated for bandwidth is needed, and how fair makes customers comfortable, etc. Second, the application and effect of QoS parameters, not only for M-GREEN but also for other AQMs considering QoS, is still an open issue needed to be investigated. Third, the issue of end-to-end QoS provision described in Section 2 can be further studied in detail. However, this paper has initiated a good beginning, so the subsequent researches may follow straightforwardly the philosophy of this paper.

@&#ACKNOWLEDGMENT@&#

The authors would like to thank Dr. Shushan Wen, an author of [23], for the provision of programs of CHOKeW and BLUE. This work could not have been done without our students Huan-Ying Lo and Zhi-Yi Chen, who developed and simulated all the Cases.

@&#REFERENCES@&#

