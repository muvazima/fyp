@&#MAIN-TITLE@&#Models and solution procedures for the resource-constrained project scheduling problem with general temporal constraints and calendars

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We consider the RCPSP with general temporal constraints and break-calendars.


                        
                        
                           
                           A new and powerful time planning method is proposed.


                        
                        
                           
                           Three binary linear model formulations are presented.


                        
                        
                           
                           A priority-rule method and three different versions of a scatter search procedure are developed.


                        
                        
                           
                           We provide a test set and perform an extensive computational study.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Resource-constrained project scheduling problem (RCPSP)

Calendars

Minimum and maximum time lags

Binary linear model formulations

Scatter search

@&#ABSTRACT@&#


               
               
                  In this paper, the resource-constrained project scheduling problem with general temporal constraints is extended by the concept of break-calendars in order to incorporate the possible absence of renewable resources. Three binary linear model formulations are presented that use either start-based or changeover-based or execution-based binary decision variables. In addition, a priority-rule method as well as three different versions of a scatter search procedure are proposed in order to solve the problem heuristically. All exact and heuristic solution procedures use a new and powerful time planning method, which identifies all time- and calendar-feasible start times for activities as well as all corresponding absolute time lags between activities. In a comprehensive performance analysis, small- and medium-scale instances are solved with CPLEX 12.6. Furthermore, large-scale instances of the problem are tackled with scatter search, where the results of the three versions are compared to each other and to the priority-rule method.
               
            

@&#INTRODUCTION@&#

Resource-constrained project scheduling is concerned with the assignment of execution time intervals to activities so that given temporal constraints between activities are satisfied, the prescribed resource capacities are not exceeded, and a given objective, e.g., the project duration, is minimized (see, e.g., Neumann, Schwindt, & Zimmermann, 2003b or Józefowska & Wȩglarz, 2006). Temporal constraints are usually given by simple precedence constraints (the problem is then abbreviated by RCPSP) or by general minimum and maximum time lags (RCPSP/max). Applications of resource-constrained project scheduling can be found, e.g.,

                        
                           •
                           in make-to-order production, where resource-demanding operations, which need to be performed for the manufacturing of customer orders, have to be scheduled (Neumann & Schwindt, 1997),

at software implementations, where resources have to be selected to perform a task, resources are generally multi-skilled, and the time required for completing a task depends on the number of assigned resources (Alba & Chicano, 2007), and

at service centers, where tasks have to be scheduled and assigned to a multi-skilled workforce with heterogeneous efficiencies (Valls, Pérez, & Quintanilla, 2009).

For projects with a short-term planning horizon, breaks like weekends or holidays have to be incorporated, where some of the renewable resources needed are not available. Particularly, the consideration of “break-calendars” (or “calendars”) is necessary for many operative RCPSP-applications in which persons (e.g., employees, teachers, or customers) are involved, i.e., regarding calendars may be useful in the above mentioned applications. In practice, different renewable resources generally have different break-calendars. For example, the employees’ working days per week vary depending on the type of job, the season, or the labor contract. A typical office employee works Monday to Friday, and a possible 4-weeks work plan for a nurse is 6–3–7–3–7–2 (work days and days off mentioned alternately). In contrast to persons, renewable resources like machines or equipment can be treated as always available at a company, since maintenance work can be modeled as separate activities that have to be performed in regular intervals. Thus, no breaks have to be considered in the respective calendars.

For the treatment of weekends or public holidays, it is significant to distinguish between activities that can be interrupted during breaks as well as activities that must be performed without interruption. The first group contains, e.g., assembling, drilling, and cutting processes, or activities of the quality management that must be executed manually in order to maintain a preferred level of quality. The second group contains, e.g., heating, cooling, drying, and pouring processes, or training activities, where staff have to travel over long distances to reach off-site training locations. For some interruptible activities, a start-up phase must be used during which the activity has to be processed without suspending the execution. It is obvious that, e.g., management consultants should not start working at a company on a Friday morning. If their corresponding work plan contains a 5-day week, a start-up phase of two days ensures that a consulting phase only starts on a day between Monday to Thursday. Moreover, activities should only be paused during breaks to guarantee that employees are focused on a small number of activities and do not change frequently between different types of work. Hence, a general preemption of activities at all integer points in time (in addition to break start times) is not acceptable in order to reduce processing errors and guarantee high quality of intermediate and end-products (Coviello, Ichino, & Persico, 2010). Additionally, many machines require skilled staff to operate, so that complex activities can only be performed if both machines and employees are on hand. Since machines are usually blocked by, e.g., components or individual parts during breaks, they must stay engaged even if the personnel is not on site. In order to ensure that the machines are blocked as short as possible, an activity should only be interrupted for the duration of the longest break of the assigned staff. By only allowing interruptions of activities at breaks, an introductory training course (for safety, health, or environmental requirements) must only be considered once and can be included into the processing time of an activity.

Typically, an activity requires several renewable resources for execution. Hence, an “activity calendar” can be obtained on the basis of all calendars of the associated resources. In addition to resources and activities, minimum and maximum time lags between activities may also depend on break-calendars. An example is the delivery of a spare part that has been processed at a plant and must be delivered to another plant for subsequent manufacturing processes. If the delivery can only be performed by a specific less-than-truckload carrier that needs three work days for transportation, then, the “absolute” delivery time may take five days when a weekend is included.

Consequently, the consideration of break-calendars for resources, activities, and time lags, interruptible and non-interruptible activities, resources that are either engaged or released during breaks, and activity start-up phases is highly important and should not be ignored for operative RCPSP-applications. Therefore, the aim of the paper on hand is to incorporate all of the above mentioned features and to develop targeting models and solution procedures.

The remainder of this paper is organized as follows: Section 2 presents related literature of resource-constrained project scheduling problems with general temporal and calendar constraints (RCPSP/max-cal). In Section 3, the proposed RCPSP/max-cal is formally described and an example is given to illustrate the construction of an associated activity-on-node network. Section 4 contains an enhanced approach for finding the set of feasible start times of all activities and all corresponding absolute time lags between activities. In Section 5, three different binary linear model formulations for the RCPSP/max-cal are presented. Section 6 is devoted to solution procedures in order to solve the problem heuristically. The binary models as well as the heuristic methods benefit from the time planning procedure significantly. The results of a comprehensive performance analysis are given in Section 7, where it is shown that many instances with 50 activities can only be solved to optimality if the time planning procedure is incorporated. Finally, conclusions are presented in Section 8.

@&#LITERATURE REVIEW@&#

Scheduling project activities subject to break-calendars (referred to as “calendarization”) has been rarely considered in the literature and no paper includes all of the features presented in the introduction (particularly, resources that are either engaged or released during breaks and start-up phases). The RCPSP/max with a single resource calendar has been introduced by Zhan (1988, 1992), where a model formulation and a time planning procedure are presented and no resource capacity is taken into account. Franck (1999) proposed the calendarization with multiple calendars, however, without considering a start-up phase for activities. Efficient methods for computing earliest and latest start and completion times of activities are devised and priority-rule methods for minimizing the project duration are introduced. Franck, Neumann, and Schwindt (2001a) as well as Neumann et al. (2003b, Section 2.11) described procedures to determine the earliest and latest schedule, where a start-up phase is included. Moreover, the authors sketched how priority-rule methods for the RCPSP/max can be adapted to break-calendars, but all resources stay engaged during interruptions, i.e., a release of resources during breaks is not incorporated. The priority-rule methods presented in Franck (1999), Franck et al. (2001a), and Neumann et al. (2003b, Section 2.11) provide that the time planning method is passed in each iteration, which is computationally inefficient.


                     Schwindt and Trautmann (2000) considered a batch scheduling problem with minimum and maximum time lags between successive production levels, sequence-dependent facility setup times, finite intermediate storages, production breaks, and activity break-calendars. The solution procedure is based on a relaxation, where sequence-dependent setup times, safety stock restrictions, storage and resource capacities are neglected. The method (approximately) solves an industrial problem within a reasonable amount of time. Trautmann (2001) developed an alternative approach to the calendarization of projects, which makes use of calendar-independent start–start, start–end, end–start, and end–end time lags. Cheng, Fowler, Kempf, and Mason (2015) introduced the RCPSP with “non-preemptive activity splitting”, where an activity in process is allowed to pause only when resource levels are temporarily insufficient. Further, the activity must be resumed at the next eligible point in time. The authors examined the differences between RCPSP with no activity splitting, RCPSP with non-preemptive activity splitting, and preemptive RCPSP (which allows activities to be interrupted in any time period and resumed later at no additional cost) in terms of problem settings, mathematical formulations, and optimal solution properties.

In their survey, Hartmann and Briskorn (2010) noted that the calendarization has similarities with the problem involving resource capacities varying with time. However, the main differences of the problem under consideration to the problem with time-dependent resource capacities (RCPSP/t or RCPSP/max-t) are that not only resources but also time lags can depend on calendars and resources may remain engaged during a break. The RCPSP/t with no activity splitting has been discussed, e.g., in Klein (2000a), Bomsdorf and Derigs (2008), as well as Hartmann (2015). Furthermore, the preemptive RCPSP/t has been investigated by Buddhakulsomsiri and Kim (2006, 2007).

A project can be treated as a set V of interacting activities requiring time and renewable resources for their execution. The project in question consists of 
                        
                           n
                           +
                           2
                        
                      activities, numbered from 0 to 
                        
                           n
                           +
                           1
                           ,
                        
                      where fictitious activity 0 represents the project beginning and fictitious activity 
                        
                           n
                           +
                           1
                        
                      the project completion, respectively. Each activity i is associated with a processing time 
                        
                           
                              p
                              i
                           
                           ∈
                           
                              N
                              0
                           
                        
                     . All fictitious activities i with 
                        
                           
                              p
                              i
                           
                           =
                           0
                           ,
                        
                      i.e., activities 0, 
                        
                           n
                           +
                           1
                           ,
                        
                      as well as milestones, are classified into set V f
                      ⊂ V, and all real activities i with pi
                      > 0 are included into set V r
                      ≔ V∖V f
                     . The start time (completion time) of activity i is denoted by 
                        
                           
                              S
                              i
                           
                           ∈
                           
                              N
                              0
                           
                        
                      (
                        
                           
                              C
                              i
                           
                           ∈
                           
                              N
                              0
                           
                        
                     ). We assume that the project on hand is started at time zero, i.e., S
                     0 ≔ 0. The project duration (i.e., the makespan) is given by 
                        
                           S
                           
                              n
                              +
                              1
                           
                        
                     . A vector of start times 
                        
                           S
                           =
                           
                              
                                 (
                                 
                                    S
                                    i
                                 
                                 )
                              
                              
                                 i
                                 =
                                 0
                                 ,
                                 …
                                 ,
                                 n
                                 +
                                 1
                              
                           
                        
                      with Si
                      ≥ 0 and 
                        
                           
                              S
                              0
                           
                           =
                           0
                        
                      is termed a “schedule”.

In practice, minimum and maximum time lags between activities, which result from technological and organizational constraints, are given, and form the temporal constraints of the project. Activities and time lags are depicted by an activity-on-node network N ≔ (V, A; δ), where V represents the set of nodes (i.e., activities), A represents the set of arcs (i.e., time lags) and δ describes the arc weights. For a minimum time lag 
                        
                           
                              d
                              
                                 i
                                 j
                              
                              min
                           
                           ∈
                           
                              N
                              0
                           
                        
                      between activities i and j, an arc ⟨i, j⟩ having weight 
                        
                           
                              δ
                              
                                 i
                                 j
                              
                           
                           :
                           =
                           
                              d
                              
                                 i
                                 j
                              
                              min
                           
                        
                      is introduced, and for a maximum time lag 
                        
                           
                              d
                              
                                 i
                                 j
                              
                              max
                           
                           ∈
                           
                              N
                              0
                           
                           ,
                        
                      a backward arc ⟨j, i⟩ with weight 
                        
                           
                              δ
                              
                                 j
                                 i
                              
                           
                           :
                           =
                           −
                           
                              d
                              
                                 i
                                 j
                              
                              max
                           
                        
                      is inserted into network N. The assumption that the durations and time lags are to be integers is generally satisfied, as time is usually measured in minutes, hours, or days.

If a break appears in the underlying calendar during activity execution, the respective activity must be interrupted for the duration of the break, otherwise, the activity continues without stopping (in contrast to preemptive activities that can be interrupted at any point in time and as long as necessary; cf., Cheng et al., 2015). The set of (break-)interruptible activities is denoted by Vbi
                      ⊂ V and the set of non-interruptible activities by 
                        
                           
                              V
                              
                                 n
                                 i
                              
                           
                           =
                           V
                           ∖
                           
                              V
                              
                                 b
                                 i
                              
                           
                        
                     . Note that an activity i with 
                        
                           
                              p
                              i
                           
                           =
                           0
                        
                      is declared as non-interruptible. For each interruptible activity i, a start-up or training phase 
                        
                           
                              
                                 ɛ
                              
                              i
                           
                           ∈
                           N
                        
                      is prescribed during which i has to be in progress without interruption. For activities i ∈ Vni
                     , we set ε
                        i
                      ≔ pi
                     , i.e., i has to be processed during pi
                      time units without suspending the execution.

In order to schedule activities subject to breaks, we consider a time axis 
                        
                           [
                           0
                           ,
                           
                              d
                              ¯
                           
                           ]
                           ,
                        
                      where 
                        
                           
                              d
                              ¯
                           
                           ∈
                           N
                        
                      is a prescribed maximum project duration which must not be exceeded. A suitable determination of 
                        
                           d
                           ¯
                        
                      is necessary in order to define the time horizon for calendars. In what follows, we proceed on the assumption that the time axis is divided into intervals 
                        
                           
                              [
                              0
                              ,
                              1
                              )
                           
                           ,
                           
                              [
                              1
                              ,
                              2
                              )
                           
                           ,
                           …
                           ,
                           
                              [
                              
                                 d
                                 ¯
                              
                              −
                              1
                              ,
                              
                                 d
                                 ¯
                              
                              )
                           
                        
                     . Activities may only be started (whether at first or after an interruption) at the beginning of such intervals or at time 
                        
                           
                              d
                              ¯
                           
                           ,
                        
                      i.e., at points in time 
                        
                           t
                           ∈
                           T
                           :
                           =
                           {
                           0
                           ,
                           1
                           ,
                           …
                           ,
                           
                              d
                              ¯
                           
                           }
                        
                     . Since pi
                      and δij
                      are integers for all i, j ∈ V, there always exists an optimal solution with integer start times, i.e., 
                        
                           
                              S
                              i
                           
                           ∈
                           
                              {
                              0
                              ,
                              1
                              ,
                              …
                              ,
                              
                                 d
                                 ¯
                              
                              }
                           
                           ,
                           i
                           ∈
                           V
                        
                      (Neumann, Schwindt, & Zimmermann, 2003a, Section 1.3). Let 
                        R
                      be the set of renewable resources available at each point in time, independently of their utilization formerly. Each resource 
                        
                           k
                           ∈
                           R
                        
                      is associated with a limited resource capacity 
                        
                           
                              R
                              k
                           
                           ∈
                           N
                        
                     . Moreover, 
                        
                           
                              r
                              
                                 i
                                 k
                              
                           
                           ∈
                           
                              N
                              0
                           
                        
                      represents the amount of resource k used constantly by activity i ∈ V during an “operating phase”, i.e., a phase consisting of one or more periods in which resource k is engaged by activity i. For fictitious activities j ∈ V f
                     , we set rjk
                      ≔ 0 for all 
                        
                           k
                           ∈
                           R
                        
                     . A resource calendar can be defined as follows:

                        Definition 1
                        A calendar for resource 
                              
                                 k
                                 ∈
                                 R
                              
                            is a step function 
                              
                                 l
                                 a
                                 
                                    Cal
                                    k
                                 
                                 
                                    (
                                    ·
                                    )
                                 
                                 :
                                 
                                    [
                                    0
                                    ,
                                    
                                       d
                                       ¯
                                    
                                    )
                                 
                                 →
                                 
                                    {
                                    0
                                    ,
                                    1
                                    }
                                 
                              
                            continuous from the right at the jump points, where the condition

                              
                                 
                                    
                                       l
                                       a
                                       
                                          Cal
                                          k
                                       
                                       
                                          (
                                          t
                                          )
                                       
                                       :
                                       =
                                       
                                          {
                                          
                                             
                                                
                                                   
                                                      1
                                                      ,
                                                   
                                                
                                                
                                                   
                                                      
                                                         if
                                                         
                                                         period
                                                      
                                                      
                                                      [
                                                      ⌊
                                                      t
                                                      ⌋
                                                      ,
                                                      ⌊
                                                      t
                                                      +
                                                      1
                                                      ⌋
                                                      )
                                                      
                                                      
                                                         is
                                                         
                                                         a
                                                         
                                                         working
                                                         
                                                         period
                                                         
                                                         for
                                                      
                                                      
                                                      k
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      0
                                                      ,
                                                   
                                                
                                                
                                                   
                                                      
                                                         if
                                                         
                                                         period
                                                      
                                                      
                                                      [
                                                      ⌊
                                                      t
                                                      ⌋
                                                      ,
                                                      ⌊
                                                      t
                                                      +
                                                      1
                                                      ⌋
                                                      )
                                                      
                                                      
                                                         is
                                                         
                                                         a
                                                         
                                                         break
                                                         
                                                         period
                                                         
                                                         for
                                                      
                                                      
                                                      k
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           is satisfied.

Based on resource calendars, calendars for each project activity may be determined. The set of resources that is necessary to carry out activity i ∈ V is denoted by 
                        
                           
                              R
                              i
                           
                           :
                           =
                           
                              {
                              k
                              ∈
                              R
                              |
                              
                                 r
                                 
                                    i
                                    k
                                 
                              
                              >
                              0
                              }
                           
                        
                     . An activity calendar 
                        
                           
                              C
                              i
                           
                           
                              (
                              ·
                              )
                           
                           :
                           
                              [
                              0
                              ,
                              
                                 d
                                 ¯
                              
                              )
                           
                           →
                           
                              {
                              0
                              ,
                              1
                              }
                           
                        
                      for activity i can then be specified by

                        
                           
                              
                                 
                                    C
                                    i
                                 
                                 
                                    (
                                    t
                                    )
                                 
                                 :
                                 =
                                 
                                    {
                                    
                                       
                                          
                                             
                                                
                                                   min
                                                   
                                                      k
                                                      ∈
                                                      
                                                         R
                                                         i
                                                      
                                                   
                                                
                                                l
                                                a
                                                
                                                   Cal
                                                   k
                                                
                                                
                                                   (
                                                   t
                                                   )
                                                
                                                ,
                                             
                                          
                                          
                                             
                                                
                                                   if
                                                
                                                
                                                
                                                   R
                                                   i
                                                
                                                ≠
                                                ∅
                                             
                                          
                                       
                                       
                                          
                                             
                                                1
                                                ,
                                             
                                          
                                          
                                             
                                                otherwise
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                  

The execution of activity i ∈ Vbi
                      must be interrupted at times t with 
                        
                           
                              C
                              i
                           
                           
                              (
                              t
                              )
                           
                           =
                           0
                           ,
                        
                      and the execution must be continued at the next point in time τ > t with 
                        
                           
                              C
                              i
                           
                           
                              (
                              τ
                              )
                           
                           =
                           1
                        
                     . Consequently, a non-interruptible activity i ∈ Vni
                      can only be started at a time t ∈ T so that pi
                      working periods follow in the respective activity calendar of i. Thus, the completion time of i ∈ Vni
                      may be determined by 
                        
                           
                              C
                              i
                           
                           
                              (
                              
                                 S
                                 i
                              
                              )
                           
                           :
                           =
                           
                              S
                              i
                           
                           +
                           
                              p
                              i
                           
                           =
                           
                              S
                              i
                           
                           +
                           
                              ∑
                              
                                 t
                                 =
                                 
                                    S
                                    i
                                 
                              
                              
                                 
                                    S
                                    i
                                 
                                 +
                                 
                                    p
                                    i
                                 
                                 −
                                 1
                              
                           
                           
                              C
                              i
                           
                           
                              (
                              t
                              )
                           
                        
                     . In contrast, an interruptible activity i ∈ Vbi
                      may start at all times t ∈ T with 
                        
                           
                              ∑
                              
                                 τ
                                 =
                                 t
                              
                              
                                 t
                                 +
                                 
                                    
                                       ɛ
                                    
                                    i
                                 
                                 −
                                 1
                              
                           
                           
                              C
                              i
                           
                           
                              (
                              τ
                              )
                           
                           =
                           
                              
                                 ɛ
                              
                              i
                           
                           ,
                        
                      and the completion time can be computed by 
                        
                           
                              C
                              i
                           
                           
                              (
                              
                                 S
                                 i
                              
                              )
                           
                           :
                           =
                           min
                           
                              {
                              t
                              ≥
                              
                                 S
                                 i
                              
                              +
                              
                                 p
                                 i
                              
                              |
                              
                                 ∑
                                 
                                    τ
                                    =
                                    
                                       S
                                       i
                                    
                                 
                                 
                                    t
                                    −
                                    1
                                 
                              
                              
                                 C
                                 i
                              
                              
                                 (
                                 τ
                                 )
                              
                              =
                              
                                 p
                                 i
                              
                              }
                           
                        
                     .

A time lag between activities i and j is of type start–start (SS), start–end (SE), end–start (ES), or end–end (EE), and it refers to a time lag calendar which depends on resource set 
                        
                           
                              R
                              
                                 i
                                 j
                              
                           
                           ⊆
                           R
                        
                      (Franck, 1999, Section 3.1). Usually, 
                        
                           R
                           
                              i
                              j
                           
                        
                      is equal to 
                        
                           ∅
                           ,
                           
                              R
                              i
                           
                           ,
                           
                              R
                              j
                           
                           ,
                        
                      or 
                        
                           
                              R
                              i
                           
                           ∪
                           
                              R
                              j
                           
                        
                     . Practical examples are:

                        
                           •
                           Activity j with 
                                 
                                    
                                       p
                                       j
                                    
                                    =
                                    5
                                 
                               must be executed exactly 40 percent before activity i ends. Then, time lags 
                                 
                                    
                                       
                                       
                                          ES
                                       
                                    
                                    
                                       d
                                       
                                          i
                                          j
                                       
                                       min
                                    
                                    =
                                    −
                                    2
                                 
                               and 
                                 
                                    
                                       
                                       
                                          ES
                                       
                                    
                                    
                                       d
                                       
                                          i
                                          j
                                       
                                       max
                                    
                                    =
                                    −
                                    2
                                 
                               need resources 
                                 
                                    
                                       R
                                       j
                                    
                                    ,
                                 
                               i.e., 
                                 
                                    
                                       R
                                       
                                          i
                                          j
                                       
                                    
                                    =
                                    
                                       R
                                       j
                                    
                                 
                              .

Activity j must be started when activity i with 
                                 
                                    
                                       p
                                       i
                                    
                                    =
                                    5
                                 
                               is executed exactly 60 percent. In that case, time lags 
                                 
                                    
                                       
                                       
                                          SS
                                       
                                    
                                    
                                       d
                                       
                                          i
                                          j
                                       
                                       min
                                    
                                    =
                                    3
                                 
                               and 
                                 
                                    
                                       
                                       
                                          SS
                                       
                                    
                                    
                                       d
                                       
                                          i
                                          j
                                       
                                       max
                                    
                                    =
                                    3
                                 
                               involve resources 
                                 
                                    
                                       R
                                       i
                                    
                                    ,
                                 
                               i.e., 
                                 
                                    
                                       R
                                       
                                          i
                                          j
                                       
                                    
                                    =
                                    
                                       R
                                       i
                                    
                                 
                              .

A maximum time lag 
                                 
                                    d
                                    
                                       i
                                       j
                                    
                                    max
                                 
                               exists between activities i and j, and minimum time lags exist between activities i and l, l and m, as well as m and j. Then, 
                                 
                                    d
                                    
                                       i
                                       j
                                    
                                    max
                                 
                               might need resources 
                                 
                                    
                                       R
                                       
                                          i
                                          j
                                       
                                    
                                    =
                                    
                                       R
                                       i
                                    
                                    ∪
                                    
                                       R
                                       l
                                    
                                    ∪
                                    
                                       R
                                       m
                                    
                                    ∪
                                    
                                       R
                                       j
                                    
                                 
                              .

Based on this information, a calendar 
                        
                           
                              C
                              
                                 i
                                 j
                              
                           
                           
                              (
                              ·
                              )
                           
                           :
                           
                              [
                              0
                              ,
                              
                                 d
                                 ¯
                              
                              )
                           
                           →
                           
                              {
                              0
                              ,
                              1
                              }
                           
                        
                      for each time lag between activities i and j may be computed by

                        
                           
                              
                                 
                                    C
                                    
                                       i
                                       j
                                    
                                 
                                 
                                    (
                                    t
                                    )
                                 
                                 :
                                 =
                                 
                                    {
                                    
                                       
                                          
                                             
                                                
                                                   min
                                                   
                                                      k
                                                      ∈
                                                      
                                                         R
                                                         
                                                            i
                                                            j
                                                         
                                                      
                                                   
                                                
                                                l
                                                a
                                                
                                                   Cal
                                                   k
                                                
                                                
                                                   (
                                                   t
                                                   )
                                                
                                                ,
                                             
                                          
                                          
                                             
                                                
                                                   if
                                                
                                                
                                                
                                                   R
                                                   
                                                      i
                                                      j
                                                   
                                                
                                                ≠
                                                ∅
                                             
                                          
                                       
                                       
                                          
                                             
                                                1
                                                ,
                                             
                                          
                                          
                                             
                                                otherwise
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                  

In what follows, we want to concentrate on activity-on-node networks N ≔ (V, A; δ) with start–start time lags. In order to convert end–start, start–end, and end–end time lags into start–start ones, sometimes dummy activities l or l, q, as well as dummy arcs ⟨i, l⟩, ⟨l, j⟩ or ⟨i, l⟩, ⟨l, q⟩, ⟨q, j⟩ have to be inserted (Franck, 1999, Section 3.1). For example, if activity i manufactures a product at a high temperature and the product must be cooled at least three time units before it can be processed further on (in activity j), the end–start time lag between i and j can only be transformed into start–start time lags by introducing a dummy activity that symbolizes the end of activity i or the start of the cooling process, respectively. The different transformation rules are given in Table 1
                     , note that 
                        
                           
                              T
                              ′
                           
                           :
                           =
                           T
                           ∖
                           
                              {
                              
                                 d
                                 ¯
                              
                              }
                           
                        
                     .

In practice, some renewable resources remain engaged during a break of activity i ∈ Vbi
                     , like machines or equipment, and some renewable resources are released during a break, e.g., workers or tools. In order to incorporate this situation (in contrast to Franck et al., 2001a; Neumann et al., 2003b, Section 2.11), parameter 
                        
                           
                              ρ
                              k
                           
                           ,
                           k
                           ∈
                           R
                           ,
                        
                      is used as follows:

                        
                           
                              
                                 
                                    ρ
                                    k
                                 
                                 :
                                 =
                                 
                                    {
                                    
                                       
                                          
                                             
                                                1
                                                ,
                                             
                                          
                                          
                                             
                                                
                                                   if
                                                   
                                                   resource
                                                
                                                
                                                k
                                                
                                                
                                                   stays
                                                   
                                                   engaged
                                                   
                                                   during
                                                   
                                                   an
                                                   
                                                   interruption
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                0
                                                ,
                                             
                                          
                                          
                                             
                                                otherwise
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                  

For a given schedule S, the set V r
                      of real activities that are in execution at time 
                        
                           t
                           ∈
                           [
                           0
                           ,
                           
                              d
                              ¯
                           
                           )
                        
                      is termed the “active set”. The active set is given by

                        
                           
                              
                                 A
                                 
                                    (
                                    S
                                    ,
                                    t
                                    )
                                 
                                 :
                                 =
                                 {
                                 i
                                 ∈
                                 
                                    V
                                    r
                                 
                                 
                                 |
                                 
                                 
                                    S
                                    i
                                 
                                 ≤
                                 t
                                 <
                                 
                                    C
                                    i
                                 
                                 
                                    (
                                    
                                       S
                                       i
                                    
                                    )
                                 
                                 }
                                 ,
                              
                           
                        
                     where each activity i is supposed to be carried out during the half-open time interval [Si, Ci
                     (Si
                     )) (see, e.g., Neumann et al., 2003a). Thus, the resource utilization 
                        
                           
                              r
                              k
                              cal
                           
                           
                              (
                              S
                              ,
                              t
                              )
                           
                        
                      of resource 
                        
                           k
                           ∈
                           R
                        
                      at time t according to schedule S and calendars C
                     
                        i
                     , i ∈ V, can be computed by

                        
                           
                              
                                 
                                    r
                                    k
                                    cal
                                 
                                 
                                    (
                                    S
                                    ,
                                    t
                                    )
                                 
                                 :
                                 =
                                 
                                    ∑
                                    
                                       i
                                       ∈
                                       A
                                       
                                          (
                                          S
                                          ,
                                          t
                                          )
                                       
                                       ∣
                                       
                                          C
                                          i
                                       
                                       
                                          (
                                          t
                                          )
                                       
                                       =
                                       1
                                    
                                 
                                 
                                    r
                                    
                                       i
                                       k
                                    
                                 
                                 +
                                 
                                    ∑
                                    
                                       i
                                       ∈
                                       A
                                       
                                          (
                                          S
                                          ,
                                          t
                                          )
                                       
                                       ∣
                                       
                                          C
                                          i
                                       
                                       
                                          (
                                          t
                                          )
                                       
                                       =
                                       0
                                    
                                 
                                 
                                    r
                                    
                                       i
                                       k
                                    
                                 
                                 
                                 
                                    ρ
                                    k
                                 
                                 .
                              
                           
                        
                     
                  

Function 
                        
                           
                              r
                              k
                              cal
                           
                           
                              (
                              S
                              ,
                              ·
                              )
                           
                        
                      is called the resource profile of resource k. It observes the “operating phases” of all real activities.

The aim of the problem under consideration is to find a schedule so that all time lags, resource capacities, and calendar constraints are satisfied and the project makespan is minimized. Based on Franck (1999, Section 3.1), the following conceptual model for the RCPSP/max-cal can be formulated:

                        
                           (1)
                           
                              
                                 
                                    
                                    
                                       
                                          Minimize
                                          
                                          
                                          
                                             S
                                             
                                                n
                                                +
                                                1
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (2)
                           
                              
                                 
                                    
                                    
                                       
                                          subject
                                          
                                          to
                                       
                                    
                                    
                                       
                                    
                                    
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                t
                                                =
                                                
                                                   S
                                                   i
                                                
                                             
                                             
                                                
                                                   S
                                                   i
                                                
                                                +
                                                
                                                   
                                                      ɛ
                                                   
                                                   i
                                                
                                                −
                                                1
                                             
                                          
                                          
                                             C
                                             i
                                          
                                          
                                             (
                                             t
                                             )
                                          
                                          =
                                          
                                             
                                                ɛ
                                             
                                             i
                                          
                                       
                                    
                                    
                                    
                                       
                                          i
                                          ∈
                                          V
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (3)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                t
                                                =
                                                
                                                   S
                                                   i
                                                
                                             
                                             
                                                
                                                   S
                                                   j
                                                
                                                −
                                                1
                                             
                                          
                                          
                                             C
                                             
                                                i
                                                j
                                             
                                          
                                          
                                             (
                                             t
                                             )
                                          
                                          −
                                          
                                             ∑
                                             
                                                t
                                                =
                                                
                                                   S
                                                   j
                                                
                                             
                                             
                                                
                                                   S
                                                   i
                                                
                                                −
                                                1
                                             
                                          
                                          
                                             C
                                             
                                                i
                                                j
                                             
                                          
                                          
                                             (
                                             t
                                             )
                                          
                                          ≥
                                          
                                             δ
                                             
                                                i
                                                j
                                             
                                          
                                       
                                    
                                    
                                    
                                       
                                          〈
                                          i
                                          ,
                                          j
                                          〉
                                          ∈
                                          A
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             r
                                             k
                                             cal
                                          
                                          
                                             (
                                             S
                                             ,
                                             t
                                             )
                                          
                                          ≤
                                          
                                             R
                                             k
                                          
                                       
                                    
                                    
                                       
                                    
                                    
                                       
                                          k
                                          ∈
                                          R
                                          ,
                                          t
                                          ∈
                                          
                                             T
                                             ′
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (5)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             S
                                             i
                                          
                                          ∈
                                          
                                             {
                                             0
                                             ,
                                             1
                                             ,
                                             ⋯
                                             ,
                                             
                                                d
                                                ¯
                                             
                                             }
                                          
                                       
                                    
                                    
                                       
                                    
                                    
                                       
                                          i
                                          ∈
                                          V
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                  

Objective function (1) represents the makespan, i.e., the start time of the project completion, which is to be minimized. Equalities (2) ensure on the one hand that non-interruptible activities i ∈ Vni
                      are carried out without interruption and on the other hand that interruptible activities i ∈ Vbi
                      are started at the beginning of a working period and observe the start-up phase of ε
                        i
                      time units. Constraints (3) make sure that the temporal constraints are satisfied and inequalities (4) guarantee that the given resource capacities Rk
                      are not exceeded at any time. Finally, constraints (5) describe all possible start times of the activities.

In order to illustrate the construction of an activity-on-node network within calendarization and to demonstrate the properties of a solution, we introduce a practical example. Integrated production and maintenance planning is a task that lots of companies have to deal with (Budai, Dekker, & Nicolai, 2008). In what follows, we consider the production and maintenance planning for a common printing press. The resulting project consists of five real activities and requires four renewable resources (cf. Table 2
                     ).

The associated activity-on-node network as well as the resource calendars are depicted in Fig. 1
                     . Each node i ∈ V is weighted with the processing time pi
                     , the length ε
                        i
                      of the start-up phase, and the resource requirements rik
                     , 
                        
                           k
                           =
                           1
                           ,
                           …
                           ,
                           4
                        
                     . For example, activity 1 (printing order 1) has a processing time of 
                        
                           
                              p
                              1
                           
                           =
                           2
                        
                      days, a start-up phase of 
                        
                           
                              
                                 ɛ
                              
                              1
                           
                           =
                           1
                        
                      day, and needs one machine operator as well as the printing press for its execution (
                        
                           
                              r
                              12
                           
                           =
                           
                              r
                              13
                           
                           =
                           1
                           ,
                        
                     
                     
                        
                           
                              r
                              11
                           
                           =
                           
                              r
                              14
                           
                           =
                           0
                        
                     ). The resource calendar Cal
                     3( · ) of the printing press is always one. Consequently, the activity calendar of printing order 1 equals the resource calendar of the machine operator, i.e., 
                        
                           
                              C
                              1
                           
                           
                              (
                              ·
                              )
                           
                           =
                           l
                           a
                           
                              Cal
                              2
                           
                           
                              (
                              ·
                              )
                           
                        
                     . The maintenance of the printing press (activity 2) requires two external specialists, one machine operator, the printing press, and an electrician. Hence, the resulting activity calendar C
                     2( · ) includes a 5-day working week (on the analogy of 
                        
                           l
                           a
                           
                              Cal
                              k
                           
                           
                              (
                              ·
                              )
                           
                           ,
                           k
                           =
                           1
                           ,
                           2
                        
                     ). Since external specialists should not start an activity on Friday, a start-up phase of 
                        
                           
                              
                                 ɛ
                              
                              2
                           
                           =
                           2
                        
                      days is also included. The test run (activity 3) must be executed without interruptions. Therefore, we set 
                        
                           
                              p
                              3
                           
                           =
                           
                              
                                 ɛ
                              
                              3
                           
                           =
                           2
                        
                     .

Arc ⟨6, 0⟩ displays the planning horizon of 
                        
                           
                              d
                              ¯
                           
                           =
                           21
                        
                      days. Furthermore, release dates of activities 
                        
                           i
                           =
                           1
                           ,
                           2
                           ,
                           5
                        
                      are modeled using arcs ⟨0, i⟩. The test run of the printing press (activity 3) must be started directly after the end of the maintenance work (activity 2), i.e., an end–start time lag with 
                        
                           
                              δ
                              
                                 23
                              
                              ES
                           
                           =
                           0
                        
                      and a start–end time lag with 
                        
                           
                              δ
                              
                                 32
                              
                              SE
                           
                           =
                           0
                        
                      is given (
                        
                           
                              R
                              23
                           
                           =
                           
                              R
                              32
                           
                           =
                           
                              R
                              2
                           
                        
                     ). Using the transformation rules declared in Table 1, we obtain 
                        
                           
                              δ
                              23
                           
                           =
                           5
                        
                      and 
                        
                           
                              δ
                              32
                           
                           =
                           −
                           5
                        
                     . Additionally, printing order 2 (activity 4) is time sensitive and must be scheduled five days after the end of the test run at the latest, i.e., time lag 
                        
                           
                              δ
                              
                                 43
                              
                              SE
                           
                           =
                           −
                           5
                        
                      is required (
                        
                           
                              R
                              43
                           
                           =
                           ∅
                        
                     ). The start–end time lag is converted by introducing a dummy activity 3′ and two start–start time lags 
                        
                           
                              δ
                              
                                 43
                                 ′
                              
                           
                           =
                           −
                           5
                           ,
                           
                              R
                              43
                           
                           =
                           ∅
                           ,
                        
                      and 
                        
                           
                              δ
                              
                                 
                                    3
                                    ′
                                 
                                 3
                              
                           
                           =
                           −
                           2
                           ,
                           
                              R
                              
                                 
                                    3
                                    ′
                                 
                                 3
                              
                           
                           =
                           
                              R
                              3
                           
                        
                     .

The resource profiles of an optimal solution 
                        
                           
                              S
                              *
                           
                           =
                           
                              (
                              0
                              ,
                              11
                              ,
                              2
                              ,
                              9
                              ,
                              11
                              ,
                              15
                              ,
                              5
                              ,
                              18
                              )
                           
                        
                      are given in Fig. 2
                     . During interruptions, the printing press stays engaged while all other resources are released. Moreover, the electrician with a 6-day working week can mount a switchbox (activity 5) on the first Saturday (period [5, 6)) when the maintenance activity is interrupted. Furthermore, the resource profiles visualize the difference between “relative” and “absolute” processing times as well as time lags. All values given in network N are “relative”, because they only include working days (in contrast to “absolute” values that involve non-working and working days). For example, the solution considers an “absolute” processing time of activity 1 which is equal to 4 (
                        
                           ≠
                           
                              p
                              1
                           
                           =
                           2
                        
                     ) and an “absolute” time lag between activities 2 and 3 which is equal to 7 
                        
                           (
                           ≠
                           
                              δ
                              23
                           
                           =
                           5
                           )
                        
                     . The calculation of absolute time lags between start times of activities i, j ∈ V is treated in the following section.

In contrast to procedures presented in the literature, which contain only methods to identify the earliest and latest schedule, the temporal planning described in this section determines all feasible start times of project activities as well as all corresponding “absolute” time lags between activities. Hence, the procedure must only be performed in a preprocessing step and not in all iterations of a solution algorithm.

In order to compute the earliest ESi
                      and latest LSi
                      start times of activity i ∈ V, a modification of the label-correcting algorithm (Ahuja, Magnanti, & Orlin, 1993, Section 5.4) for finding the longest paths in networks can be used. A detailed description of the algorithms for computing the earliest and latest start times is given in Franck et al. (2001a). The authors state a time complexity of this algorithms of 
                        O
                     
                     
                        
                           
                              (
                              |
                              V
                              |
                              
                              |
                              E
                              |
                              
                              (
                              B
                              +
                              1
                              )
                              )
                           
                           ,
                        
                      where B denotes the number of all breaks in all activity and time lag calendars. Since the start times of activities are integers, we are able to restrict the potential start times of activity i to a set of discrete times 
                        
                           
                              U
                              i
                           
                           :
                           =
                           
                              {
                              
                                 ES
                                 i
                              
                              ,
                              …
                              ,
                              
                                 LS
                                 i
                              
                              }
                           
                           ⊆
                           T
                        
                     . However, current set Ui
                      may contain points in time that are infeasible start times for activity i according to the underlying calendar constraints. In order to eliminate these times and insert them in a set Ni, i ∈ V, a novel procedure for temporal planning is shown in Algorithm 1
                     , where dijt
                      denotes the “absolute” time lag or distance, respectively, between activities i, j ∈ V if i starts at time t.

Within the procedure, we first initialize sets Wi
                      ≔ Ui
                      and Ni
                      ≔ ∅. Then, all start times t ∈ Wi
                      are eliminated for which the start-up phase of ε
                        i
                      time units cannot be observed. Afterwards, the lengths of the longest paths between all activities are computed using an enhanced version of the well-known Floyd–Warshall triple algorithm (Ahuja et al., 1993, Section 5.6). Note that the length of the longest path between activities i and j depends on the start times of i and j and the corresponding time lag calendar C
                     
                        ij
                     ( · ). First, the length of the longest path diit
                      from i to i at time t ∈ Wi
                      is set to zero. Then, the current “absolute” time lags or distances, respectively, (include non-working days besides working days) between activities i and j, ⟨i, j⟩ ∈ A, are computed. The absolute time lags are based on t ∈ Wi
                      and are determined so that 
                        
                           t
                           +
                           
                              d
                              
                                 i
                                 j
                                 t
                              
                           
                           ∈
                           
                              W
                              j
                           
                        
                      is satisfied. If ⟨i, j⟩ ∉ A and 
                        
                           i
                           ≠
                           j
                           ,
                        
                      we set 
                        
                           
                              d
                              
                                 i
                                 j
                                 t
                              
                           
                           :
                           =
                           −
                           ∞
                        
                     . The main part of the triple algorithm consists in verifying whether a path from i to j via activity ν exists that is longer than the current longest path from i to j. If the algorithm provides diit
                      > 0 for some i ∈ V and t ∈ Wi
                     , there is a cycle of positive length and t is infeasible. Theorem 1 states that the algorithm returns sets Wi
                     ⊆Ui
                      that contain only feasible (i.e., “calendar-feasible”) start times of activities i, and Ni
                      ⊂ Ui
                      that include all infeasible start times between ESi
                      and LSi
                     .

                        Theorem 1
                        
                           
                              Algorithm 1
                            
                           determines all feasible start times for the project activities with a time complexity of
                           
                              O
                           
                           
                              
                                 
                                    
                                       (
                                       max
                                       (
                                       |
                                       V
                                       |
                                    
                                    3
                                 
                                 
                                 
                                    d
                                    ¯
                                 
                                 
                                 
                                    
                                    3
                                 
                                 
                                    
                                       ,
                                       |
                                       V
                                       |
                                    
                                    4
                                 
                                 
                                 
                                    d
                                    ¯
                                 
                                 
                                 
                                    
                                    2
                                 
                                 
                                    )
                                    )
                                 
                              
                           
                           .
                        

All time points that are transferred from set Wi
                            to set Ni
                            during the execution of the time planning procedure are not feasible, either because of the start-up phase or because of the temporal constraints. Hence, we must only clarify that, after the execution of Algorithm 1, all time points t ∈ Wi
                            are feasible start times for activity i ∈ V. Let t be an element of set Wi
                           . Now, we prove that schedule S with 
                              
                                 
                                    S
                                    j
                                 
                                 =
                                 t
                                 +
                                 
                                    d
                                    
                                       i
                                       j
                                       t
                                    
                                 
                                 ,
                              
                            for all j ∈ V, is a feasible schedule and therefore t is a feasible start time for i. Firstly, condition 
                              
                                 
                                    (
                                    
                                       S
                                       j
                                    
                                    =
                                    t
                                    +
                                    
                                       d
                                       
                                          i
                                          j
                                          t
                                       
                                    
                                    )
                                 
                                 ∈
                                 
                                    W
                                    j
                                 
                              
                            holds for all j ∈ V and 
                              
                                 
                                    ∑
                                    
                                       z
                                       =
                                       
                                          S
                                          j
                                       
                                    
                                    
                                       
                                          S
                                          j
                                       
                                       +
                                       
                                          
                                             ɛ
                                          
                                          j
                                       
                                       −
                                       1
                                    
                                 
                                 
                                    C
                                    j
                                 
                                 
                                    (
                                    z
                                    )
                                 
                                 =
                                 
                                    
                                       ɛ
                                    
                                    j
                                 
                              
                            follows. Secondly, all temporal constraints must be satisfied in S. Let arc ⟨i′, j′⟩ be in set A. With 
                              
                                 
                                    Δ
                                    
                                       
                                          i
                                          ′
                                       
                                       
                                          j
                                          ′
                                       
                                    
                                 
                                 
                                    (
                                    
                                       S
                                       
                                          i
                                          ′
                                       
                                    
                                    )
                                 
                                 :
                                 =
                                 min
                                 
                                    {
                                    t
                                    ∈
                                    T
                                    
                                    |
                                    
                                    
                                       ∑
                                       
                                          z
                                          =
                                          
                                             S
                                             
                                                i
                                                ′
                                             
                                          
                                       
                                       t
                                    
                                    
                                       C
                                       
                                          
                                             i
                                             ′
                                          
                                          
                                             j
                                             ′
                                          
                                       
                                    
                                    
                                       (
                                       z
                                       )
                                    
                                    ≥
                                    
                                       δ
                                       
                                          
                                             i
                                             ′
                                          
                                          
                                             j
                                             ′
                                          
                                       
                                    
                                    }
                                 
                                 −
                                 
                                    S
                                    
                                       i
                                       ′
                                    
                                 
                                 ,
                              
                            the condition 
                              
                                 
                                    S
                                    
                                       j
                                       ′
                                    
                                 
                                 −
                                 
                                    S
                                    
                                       i
                                       ′
                                    
                                 
                                 ≥
                                 
                                    Δ
                                    
                                       
                                          i
                                          ′
                                       
                                       
                                          j
                                          ′
                                       
                                    
                                 
                                 
                                    (
                                    
                                       S
                                       
                                          i
                                          ′
                                       
                                    
                                    )
                                 
                              
                            holds. 
                              
                                 
                                    d
                                    
                                       
                                          i
                                          ′
                                       
                                       
                                          j
                                          ′
                                       
                                       
                                          S
                                          
                                             i
                                             ′
                                          
                                       
                                    
                                 
                                 ≥
                                 
                                    Δ
                                    
                                       
                                          i
                                          ′
                                       
                                       
                                          j
                                          ′
                                       
                                    
                                 
                                 
                                    (
                                    
                                       S
                                       
                                          i
                                          ′
                                       
                                    
                                    )
                                 
                              
                            and 
                              
                                 
                                    d
                                    
                                       i
                                       
                                          j
                                          ′
                                       
                                       t
                                    
                                 
                                 ≥
                                 
                                    d
                                    
                                       i
                                       
                                          i
                                          ′
                                       
                                       t
                                    
                                 
                                 +
                                 
                                    d
                                    
                                       
                                          i
                                          ′
                                       
                                       
                                          j
                                          ′
                                       
                                       
                                          S
                                          
                                             i
                                             ′
                                          
                                       
                                    
                                 
                              
                            are always satisfied after executing Algorithm 1. Therefore, the following estimation can be performed 
                              
                                 
                                    S
                                    
                                       j
                                       ′
                                    
                                 
                                 −
                                 
                                    S
                                    
                                       i
                                       ′
                                    
                                 
                                 =
                                 t
                                 +
                                 
                                    d
                                    
                                       i
                                       
                                          j
                                          ′
                                       
                                       t
                                    
                                 
                                 −
                                 
                                    (
                                    t
                                    +
                                    
                                       d
                                       
                                          i
                                          
                                             i
                                             ′
                                          
                                          t
                                       
                                    
                                    )
                                 
                                 ≥
                                 
                                    d
                                    
                                       i
                                       
                                          i
                                          ′
                                       
                                       t
                                    
                                 
                                 +
                                 
                                    d
                                    
                                       
                                          i
                                          ′
                                       
                                       
                                          j
                                          ′
                                       
                                       
                                          S
                                          
                                             i
                                             ′
                                          
                                       
                                    
                                 
                                 −
                                 
                                    d
                                    
                                       i
                                       
                                          i
                                          ′
                                       
                                       t
                                    
                                 
                                 ≥
                                 
                                    Δ
                                    
                                       
                                          i
                                          ′
                                       
                                       
                                          j
                                          ′
                                       
                                    
                                 
                                 
                                    (
                                    
                                       S
                                       
                                          i
                                          ′
                                       
                                    
                                    )
                                 
                              
                           .

The determination of all dijt
                            at the beginning of the while-loop in Algorithm 1 can be done in 
                              O
                           
                           
                              
                                 
                                    (
                                    
                                       
                                          |
                                          V
                                          |
                                       
                                       2
                                    
                                    
                                    
                                       d
                                       ¯
                                    
                                    
                                    
                                       
                                       2
                                    
                                    )
                                 
                                 ,
                              
                            since in the worst case 
                              
                                 
                                    |
                                 
                                 
                                    W
                                    i
                                 
                                 
                                    |
                                    =
                                 
                                 
                                    d
                                    ¯
                                 
                              
                            holds. The second part of the while-loop runs in 
                              O
                           
                           
                              
                                 (
                                 
                                    
                                       |
                                       V
                                       |
                                    
                                    3
                                 
                                 
                                 
                                    d
                                    ¯
                                 
                                 )
                              
                            and the while-loop is executed at most 
                              O
                           
                           
                              
                                 (
                                 
                                    |
                                    V
                                    |
                                    
                                 
                                 
                                    d
                                    ¯
                                 
                                 )
                              
                            times.□

Besides all feasible start times for the activities, the current matrix 
                        
                           D
                           :
                           =
                           
                              
                                 (
                                 
                                    d
                                    
                                       i
                                       j
                                       t
                                    
                                 
                                 )
                              
                              
                                 i
                                 ,
                                 j
                                 ∈
                                 V
                                 ,
                                 t
                                 ∈
                                 
                                    W
                                    i
                                 
                              
                           
                        
                      of “absolute” time lags is returned by Algorithm 1. Mixed-integer programming formulations profit a lot from the time planning procedure (cf. the performance study in Section 7). Moreover, matrix D enables us to adapt RCPSP/max heuristic procedures directly, without passing the time planning method in each iteration as it is done in Franck (1999), Franck et al. (2001a), and Neumann et al. (2003b, Section 2.11).

In order to illustrate the temporal planning, we consider a project with four real activities and two renewable resources. Activities 0, 2, and 5 are non-interruptible, whereas activities 1, 3, and 4 may be interrupted during breaks, i.e., 
                        
                           
                              V
                              
                                 n
                                 i
                              
                           
                           =
                           
                              {
                              0
                              ,
                              2
                              ,
                              5
                              }
                           
                        
                      and 
                        
                           
                              V
                              
                                 b
                                 i
                              
                           
                           =
                           
                              {
                              1
                              ,
                              3
                              ,
                              4
                              }
                           
                        
                     . The project network N as well as the relevant resource, activity, and time lag calendars are given in Fig. 3
                     .


                     Table 3
                      shows the results of the different phases of Algorithm 1. Particularly, the number of elements in sets 
                        
                           
                              W
                              i
                           
                           ,
                           i
                           =
                           1
                           ,
                           3
                           ,
                           4
                           ,
                        
                      is decreased. The new sets of feasible start times can be used within model formulations and solution procedures. In our performance study, the reduction of sets Wi
                      caused by our time planning procedure will be precisely investigated (cf. Section 7).

In this section, we present three compact binary linear model formulations for the proposed RCPSP/max-cal. All formulations represent extensions of models which have been studied in the literature for the pure RCPSP. The main differences of the models are the representation of solutions. The first formulation applies binary variables that allocate a feasible start time to each activity (cf. Section 5.1). The second model uses binary variables in order to determine if an activity starts at time t or earlier (cf. Section 5.2). Finally, the third formulation is based on binary variables which indicate whether an activity is in execution at time t or not (cf. Section 5.3).

Besides the adapted models, some other formulations for the RCPSP may be found in the literature (see, e.g., Artigues, Koné, Lopez, & Mongeau, 2015). Artigues, Michelon, and Reusser (2003) considered a flow-based formulation that cannot be easily extended to the RCPSP/max-cal, since the transfer of resources at calender-breaks cannot be described. Zapata, Hodge, and Reklaitis (2008), as well as Koné, Artigues, Lopez, and Mongeau (2011), and Artigues et al. (2013) proposed continuous-time formulations based on events. Thereby, start (end) variables 
                        
                           a
                           
                              i
                              e
                           
                           +
                        
                      (
                        
                           a
                           
                              i
                              e
                           
                           −
                        
                     ) which indicate whether activity i starts (ends) at event e and on/off variables 
                        
                           
                              a
                              ¯
                           
                           
                              i
                              e
                           
                        
                      which denote whether activity i is in progress at event e are used. Additionally, continuous event date variables te
                      ≥ 0 are involved that determine the time at which event e occurs. As te
                      represents a decision variable for event e, matrix 
                        
                           D
                           :
                           =
                           
                              
                                 (
                                 
                                    d
                                    
                                       i
                                       j
                                       t
                                    
                                 
                                 )
                              
                              
                                 i
                                 ,
                                 j
                                 ∈
                                 V
                                 ,
                                 t
                                 ∈
                                 
                                    W
                                    i
                                 
                              
                           
                        
                      of absolute time lags as well as completion times Ci
                     (t) of activities i ∈ V cannot be computed in advance. Hence, the event-based formulations are not suitable for the RCPSP/max-cal. Alvarez-Valdés and Tamarit (1993) described a minimal-forbidden-set and Mingozzi, Maniezzo, Ricciardelli, and Bianco (1998) a feasible-subset formulation. Both models could be conditionally stated for the problem under consideration, where a comprehensive preprocessing phase must be passed in order to determine all “forbidden sets” (i.e., sets containing activities which cannot be processed simultaneously due to resource constraints) and all “feasible subsets” (i.e., sets containing activities that can be processed simultaneously without exceeding the resource capacities). In general, the cardinality of both sets and therefore the number of constraints of the corresponding formulations grows exponentially in the number of activities. Furthermore, the different sets have to be generated depending on the underlying points in time, since, e.g., a subset of activities may be resource-feasible at a break, because some activities are interrupted, and infeasible otherwise. Since Brucker and Knust (2012, Section 3.3.2) stated that models with an exponential number of constraints usually cannot be used in practice, we restrict our study to formulations which require only the temporal planning (cf. Section 4) as preprocessing.

Most mathematical formulations for the RCPSP and its variants are adopted from the start-based models presented in Pritsker, Watters, and Wolfe (1969) or Christofides, Alvarez-Valdés, and Tamarit (1987). Thereby, binary decision variables xit
                         are specified for each activity i ∈ V and each time t ∈ Wi
                         as follows:

                           
                              
                                 
                                    
                                       x
                                       
                                          i
                                          t
                                       
                                    
                                    :
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                
                                                   1
                                                   ,
                                                
                                             
                                             
                                                
                                                   
                                                      if
                                                      
                                                      activity
                                                   
                                                   
                                                   i
                                                   
                                                   
                                                      starts
                                                      
                                                      at
                                                      
                                                      time
                                                   
                                                   
                                                   t
                                                
                                             
                                          
                                          
                                             
                                                
                                                   0
                                                   ,
                                                
                                             
                                             
                                                
                                                   otherwise
                                                   .
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Considering sets Wi, Ni
                        , as well as matrix D, the discrete time-based model for the RCPSP/max-cal has the form:

                           
                              (6)
                              
                                 
                                    
                                       
                                       
                                          
                                             Minimize
                                             
                                             
                                             
                                                ∑
                                                
                                                   t
                                                   ∈
                                                   
                                                      W
                                                      
                                                         n
                                                         +
                                                         1
                                                      
                                                   
                                                
                                             
                                             t
                                             
                                             
                                                x
                                                
                                                   n
                                                   +
                                                   1
                                                   ,
                                                   t
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                    
                                       
                                       
                                          
                                             subject
                                             
                                             to
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   t
                                                   ∈
                                                   
                                                      W
                                                      i
                                                   
                                                
                                             
                                             
                                                x
                                                
                                                   i
                                                   t
                                                
                                             
                                             =
                                             1
                                          
                                       
                                       
                                       
                                          
                                             i
                                             ∈
                                             V
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   t
                                                   ∈
                                                   
                                                      W
                                                      j
                                                   
                                                
                                             
                                             t
                                             
                                             
                                                x
                                                
                                                   j
                                                   t
                                                
                                             
                                             ≥
                                             
                                                ∑
                                                
                                                   t
                                                   ∈
                                                   
                                                      W
                                                      i
                                                   
                                                
                                             
                                             
                                                (
                                                t
                                                +
                                                
                                                   d
                                                   
                                                      i
                                                      j
                                                      t
                                                   
                                                
                                                )
                                             
                                             
                                             
                                                x
                                                
                                                   i
                                                   t
                                                
                                             
                                          
                                       
                                       
                                       
                                          
                                             〈
                                             i
                                             ,
                                             j
                                             〉
                                             ∈
                                             A
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   i
                                                   ∈
                                                   
                                                      V
                                                      r
                                                   
                                                
                                             
                                             
                                                r
                                                
                                                   i
                                                   k
                                                
                                             
                                             
                                                ∑
                                                
                                                   τ
                                                   ∈
                                                   
                                                      T
                                                      
                                                         i
                                                         t
                                                      
                                                   
                                                
                                             
                                             
                                                x
                                                
                                                   i
                                                   τ
                                                
                                             
                                             
                                                C
                                                
                                                   i
                                                   t
                                                   k
                                                
                                             
                                             ≤
                                             
                                                R
                                                k
                                             
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                             k
                                             ∈
                                             R
                                             ,
                                             t
                                             ∈
                                             
                                                T
                                                ′
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                x
                                                
                                                   i
                                                   t
                                                
                                             
                                             ∈
                                             
                                                {
                                                0
                                                ,
                                                1
                                                }
                                             
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                             i
                                             ∈
                                             V
                                             ,
                                             t
                                             ∈
                                             
                                                W
                                                i
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The makespan, which is to be minimized in objective function (6), is given by the start time of the project completion. Constraints (7) ensure that each activity receives exactly one start time that is feasible with respect to calendar constraints. Since we are able to compute the start time of activity i from 
                           
                              
                                 S
                                 i
                              
                              =
                              
                                 ∑
                                 
                                    t
                                    ∈
                                    
                                       W
                                       i
                                    
                                 
                              
                              t
                              
                              
                                 x
                                 
                                    i
                                    t
                                 
                              
                              ,
                           
                         inequalities (8) guarantee that the temporal constraints involved will be satisfied. Set

                           
                              (11)
                              
                                 
                                    
                                       T
                                       
                                          i
                                          t
                                       
                                    
                                    :
                                    =
                                    
                                       {
                                       
                                          β
                                          
                                             i
                                             t
                                          
                                       
                                       +
                                       1
                                       ,
                                       
                                          β
                                          
                                             i
                                             t
                                          
                                       
                                       +
                                       2
                                       ,
                                       ⋯
                                       ,
                                       t
                                       }
                                    
                                    ∩
                                    
                                       W
                                       i
                                    
                                 
                              
                           
                        contains all calendar-feasible start times of real activity i ∈ V r
                        , requiring that i is in the active set at time t, i.e.,

                           
                              
                                 
                                    
                                       β
                                       
                                          i
                                          t
                                       
                                    
                                    :
                                    =
                                    max
                                    
                                       {
                                       τ
                                       ∈
                                       
                                          {
                                          0
                                          ,
                                          1
                                          ,
                                          ⋯
                                          ,
                                          t
                                          −
                                          
                                             p
                                             i
                                          
                                          }
                                       
                                       
                                       |
                                       
                                       
                                          ∑
                                          
                                             z
                                             =
                                             τ
                                          
                                          
                                             t
                                             −
                                             1
                                          
                                       
                                       
                                          C
                                          i
                                       
                                       
                                          (
                                          z
                                          )
                                       
                                       ≥
                                       
                                          p
                                          i
                                       
                                       }
                                    
                                    ,
                                 
                              
                           
                        and we set 
                           
                              max
                              ∅
                              :
                              =
                              −
                              1
                           
                        . Moreover, parameter

                           
                              (12)
                              
                                 
                                    
                                       C
                                       
                                          i
                                          t
                                          k
                                       
                                    
                                    :
                                    =
                                    
                                       C
                                       i
                                    
                                    
                                       (
                                       t
                                       )
                                    
                                    +
                                    
                                       ρ
                                       k
                                    
                                    
                                       (
                                       1
                                       −
                                       
                                          C
                                          i
                                       
                                       
                                          (
                                          t
                                          )
                                       
                                       )
                                    
                                 
                              
                           
                        is equal to one if activity i ∈ V r
                         demands resource k at time t, i.e., period 
                           
                              [
                              t
                              ,
                              t
                              +
                              1
                              )
                           
                         is an operating phase for i. Hence, inequalities (9) guarantee that the resource constraints will be met at every point in time. Finally, (10) are the binary constraints on the assignment variables. The start-based formulation incorporates 
                           
                              O
                              (
                              |
                              V
                              
                                 |
                                 2
                              
                              +
                              |
                              R
                              ∥
                              
                                 T
                                 ′
                              
                              |
                              )
                           
                         constraints as well as ∑
                           i ∈ V
                        |Wi
                        | binary decision variables.

In order to obtain a stronger linear programming (LP) relaxation, inequalities (8) can be replaced by the following disaggregated constraints:

                           
                              (13)
                              
                                 
                                    
                                       ∑
                                       
                                          τ
                                          ∈
                                          
                                             W
                                             i
                                          
                                          
                                             
                                             |
                                             
                                             τ
                                             ≤
                                          
                                          
                                             ξ
                                             
                                                i
                                                j
                                                t
                                             
                                          
                                       
                                    
                                    
                                       x
                                       
                                          i
                                          τ
                                       
                                    
                                    −
                                    
                                       ∑
                                       
                                          τ
                                          ∈
                                          
                                             W
                                             j
                                          
                                          
                                             
                                             |
                                             
                                             τ
                                             ≤
                                             t
                                          
                                       
                                    
                                    
                                       x
                                       
                                          j
                                          τ
                                       
                                    
                                    ≥
                                    0
                                    
                                    
                                       〈
                                       i
                                       ,
                                       j
                                       〉
                                    
                                    ∈
                                    A
                                    ,
                                    t
                                    ∈
                                    
                                       W
                                       j
                                    
                                    .
                                 
                              
                           
                        
                     

The idea of formulating disaggregated constraints to improve the LP-relaxation goes back to Christofides et al. (1987). Within (13), parameter

                           
                              (14)
                              
                                 
                                    
                                       ξ
                                       
                                          i
                                          j
                                          t
                                       
                                    
                                    :
                                    =
                                    max
                                    
                                       {
                                       τ
                                       ∈
                                       
                                          W
                                          i
                                       
                                       
                                       |
                                       
                                       τ
                                       +
                                       
                                          d
                                          
                                             i
                                             j
                                             τ
                                          
                                       
                                       ≤
                                       t
                                       }
                                    
                                 
                              
                           
                        equals the largest feasible start time of activity i so that the temporal constraint between activities i and j is satisfied at Sj
                         ≥ t (Artigues et al., 2015).

The changeover-based model has been considered by Sankaran, Bricker, and Juang (1999) and Klein (2000b, Section 3.2) for the RCPSP. The formulation uses binary decision variables yit, i ∈ V, t ∈ Wi
                        , which are defined as follows:

                           
                              
                                 
                                    
                                       y
                                       
                                          i
                                          t
                                       
                                    
                                    :
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                
                                                   1
                                                   ,
                                                
                                             
                                             
                                                
                                                   
                                                      if
                                                      
                                                      activity
                                                   
                                                   
                                                   i
                                                   
                                                   ∈
                                                   V
                                                   
                                                      APTARANORMAL
                                                      
                                                      starts
                                                      
                                                      at
                                                      
                                                      time
                                                   
                                                   
                                                   t
                                                   
                                                      or
                                                      
                                                      earlier
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   0
                                                   ,
                                                
                                             
                                             
                                                otherwise.
                                             
                                          
                                       
                                    
                                 
                              
                           
                        Hence, a feasible solution for activity i consists of a consecutive block of ones usually preceded by a block of zeros. The changeover between two blocks takes place at that point in time in which activity i is started. Since we only consider times t ∈ Wi
                         for each activity i ∈ V, we define

                           
                              
                                 
                                    
                                       ϱ
                                       
                                          i
                                          t
                                       
                                    
                                    :
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                
                                                   max
                                                   {
                                                   τ
                                                   ∈
                                                   
                                                      W
                                                      i
                                                   
                                                   ∣
                                                   τ
                                                   <
                                                   t
                                                   }
                                                   ,
                                                
                                             
                                             
                                                
                                                   
                                                      if
                                                   
                                                   
                                                   t
                                                   >
                                                   
                                                      ES
                                                      i
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      ES
                                                      i
                                                   
                                                   −
                                                   1
                                                   ,
                                                
                                             
                                             
                                                
                                                   
                                                      if
                                                   
                                                   
                                                   t
                                                   =
                                                   
                                                      ES
                                                      i
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        that is equal to the next smaller time τ < t in set Wi
                         or to 
                           
                              
                                 ES
                                 i
                              
                              −
                              1
                           
                        . The changeover-based model can then be formulated by

                           
                              (15)
                              
                                 
                                    
                                       
                                       
                                          
                                             Minimize
                                             
                                             
                                             
                                                ∑
                                                
                                                   t
                                                   ∈
                                                   
                                                      W
                                                      
                                                         n
                                                         +
                                                         1
                                                      
                                                   
                                                
                                             
                                             t
                                             
                                             
                                                (
                                                
                                                   y
                                                   
                                                      n
                                                      +
                                                      1
                                                      ,
                                                      t
                                                   
                                                
                                                −
                                                
                                                   y
                                                   
                                                      n
                                                      +
                                                      1
                                                      ,
                                                      
                                                         ϱ
                                                         
                                                            n
                                                            +
                                                            1
                                                            ,
                                                            t
                                                         
                                                      
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (16)
                              
                                 
                                    
                                       
                                       
                                          
                                             subject
                                             
                                             to
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                                y
                                                
                                                   i
                                                   ,
                                                   
                                                      ES
                                                      i
                                                   
                                                   −
                                                   1
                                                
                                             
                                             =
                                             0
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                             i
                                             ∈
                                             V
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (17)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                y
                                                
                                                   i
                                                   ,
                                                   
                                                      LS
                                                      i
                                                   
                                                
                                             
                                             =
                                             1
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                             i
                                             ∈
                                             V
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (18)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                y
                                                
                                                   i
                                                   ,
                                                   
                                                      ϱ
                                                      
                                                         i
                                                         t
                                                      
                                                   
                                                
                                             
                                             ≤
                                             
                                                y
                                                
                                                   i
                                                   t
                                                
                                             
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                             i
                                             ∈
                                             V
                                             ,
                                             t
                                             ∈
                                             
                                                W
                                                i
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (19)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   t
                                                   ∈
                                                   
                                                      W
                                                      j
                                                   
                                                
                                             
                                             t
                                             
                                             
                                                (
                                                
                                                   y
                                                   
                                                      j
                                                      t
                                                   
                                                
                                                −
                                                
                                                   y
                                                   
                                                      j
                                                      ,
                                                      
                                                         ϱ
                                                         
                                                            j
                                                            t
                                                         
                                                      
                                                   
                                                
                                                )
                                             
                                             ≥
                                             
                                                ∑
                                                
                                                   t
                                                   ∈
                                                   
                                                      W
                                                      i
                                                   
                                                
                                             
                                             
                                                (
                                                t
                                                +
                                                
                                                   d
                                                   
                                                      i
                                                      j
                                                      t
                                                   
                                                
                                                )
                                             
                                             
                                             
                                                (
                                                
                                                   y
                                                   
                                                      i
                                                      t
                                                   
                                                
                                                −
                                                
                                                   y
                                                   
                                                      i
                                                      ,
                                                      
                                                         ϱ
                                                         
                                                            i
                                                            t
                                                         
                                                      
                                                   
                                                
                                                )
                                             
                                          
                                       
                                       
                                       
                                          
                                             〈
                                             i
                                             ,
                                             j
                                             〉
                                             ∈
                                             A
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (20)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   i
                                                   ∈
                                                   
                                                      V
                                                      r
                                                   
                                                
                                             
                                             
                                                r
                                                
                                                   i
                                                   k
                                                
                                             
                                             
                                                ∑
                                                
                                                   τ
                                                   ∈
                                                   
                                                      T
                                                      
                                                         i
                                                         t
                                                      
                                                   
                                                
                                             
                                             
                                                (
                                                
                                                
                                                   y
                                                   
                                                      i
                                                      τ
                                                   
                                                
                                                −
                                                
                                                   y
                                                   
                                                      i
                                                      ,
                                                      
                                                         ϱ
                                                         
                                                            i
                                                            τ
                                                         
                                                      
                                                   
                                                
                                                )
                                             
                                             
                                             
                                                C
                                                
                                                   i
                                                   t
                                                   k
                                                
                                             
                                             ≤
                                             
                                                R
                                                k
                                             
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                             k
                                             ∈
                                             R
                                             ,
                                             t
                                             ∈
                                             
                                                T
                                                ′
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (21)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                y
                                                
                                                   i
                                                   t
                                                
                                             
                                             ∈
                                             
                                                {
                                                0
                                                ,
                                                1
                                                }
                                             
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                             i
                                             ∈
                                             V
                                             ,
                                             t
                                             ∈
                                             
                                                W
                                                i
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Objective function (15) represents the makespan which is to be minimized. Equalities (16) make sure that no activity i starts at time 
                           
                              
                                 ES
                                 i
                              
                              −
                              1
                           
                         or earlier and equalities (17) incorporate that each activity is scheduled. For an activity i, constraints (18) guarantee that all decision variables yiτ
                         with τ ≥ Si
                         are equal to one. Inequalities (19) ensure that the temporal constraints will be satisfied. Resource constraints are given in (20), where it is exploited that activity i is started at time 
                           
                              τ
                              ∈
                              
                                 T
                                 
                                    i
                                    t
                                 
                              
                           
                         and requires resources when parameter Citk
                         is equal to one (cf. conditions (11) and (12)). The last constraints (21) define the binary variables. The model contains 
                           
                              O
                              (
                              |
                              V
                              
                                 |
                                 2
                              
                              +
                              
                                 ∑
                                 
                                    i
                                    ∈
                                    V
                                 
                              
                              |
                              
                                 W
                                 i
                              
                              |
                              +
                              |
                              R
                              ∥
                              
                                 T
                                 ′
                              
                              |
                              )
                           
                         constraints along with ∑
                           i ∈ V
                        |Wi
                        | binary decision variables.

Inequalities (19) can again be replaced by disaggregated constraints as follows:

                           
                              (22)
                              
                                 
                                    
                                       ∑
                                       
                                          τ
                                          ∈
                                          
                                             W
                                             i
                                          
                                          
                                             
                                             |
                                             
                                             τ
                                             ≤
                                          
                                          
                                             ξ
                                             
                                                i
                                                j
                                                t
                                             
                                          
                                       
                                    
                                    
                                    
                                    
                                    
                                    
                                       (
                                       
                                          y
                                          
                                             i
                                             τ
                                          
                                       
                                       −
                                       
                                          y
                                          
                                             i
                                             ,
                                             
                                                ϱ
                                                
                                                   i
                                                   τ
                                                
                                             
                                          
                                       
                                       )
                                    
                                    −
                                    
                                       ∑
                                       
                                          τ
                                          ∈
                                          
                                             W
                                             j
                                          
                                          
                                             
                                             |
                                             
                                             τ
                                             ≤
                                             t
                                          
                                       
                                    
                                    
                                    
                                    
                                    
                                    
                                       (
                                       
                                          y
                                          
                                             j
                                             τ
                                          
                                       
                                       −
                                       
                                          y
                                          
                                             j
                                             ,
                                             
                                                ϱ
                                                
                                                   j
                                                   τ
                                                
                                             
                                          
                                       
                                       )
                                    
                                    ≥
                                    0
                                    
                                    
                                       〈
                                       i
                                       ,
                                       j
                                       〉
                                    
                                    ∈
                                    A
                                    ,
                                    t
                                    ∈
                                    
                                       W
                                       j
                                    
                                    ,
                                 
                              
                           
                        where ξijt
                         is taken directly from condition (14).

The changeover-based and the start-based model can be translated into each other by using the transformations

                           
                              
                                 
                                    
                                       x
                                       
                                          i
                                          t
                                       
                                    
                                    =
                                    
                                       y
                                       
                                          i
                                          t
                                       
                                    
                                    −
                                    
                                       y
                                       
                                          i
                                          ,
                                          
                                             ϱ
                                             
                                                i
                                                t
                                             
                                          
                                       
                                    
                                    
                                    
                                    and
                                    
                                    
                                    
                                       y
                                       
                                          i
                                          t
                                       
                                    
                                    =
                                    
                                       ∑
                                       
                                          τ
                                          ∈
                                          
                                             W
                                             i
                                          
                                          
                                             |
                                             τ
                                             ≤
                                             t
                                          
                                       
                                    
                                    
                                       x
                                       
                                          i
                                          τ
                                       
                                    
                                 
                              
                           
                        for i ∈ V and t ∈ Wi
                        . Thus, the formulations are “equivalent” and the transformation does not change the value of the LP-relaxation. However, the models usually require different solution times within a branch-and-cut approach (cf. Section 7).

The execution-based model has initially been introduced by Kaplan (1988) for the RCPSP with preemption, by Klein (2000b, Section 3.2) for the RCPSP, as well as by Neumann and Morlock (2002, Section 3.7) for the resource leveling problem. The formulation makes use of the fact that real activity i ∈ V r
                         can be executed somewhere during the half-open time interval [ESi, LCi
                        ), where LCi
                         is the latest completion time of activity i, and fictitious activity j ∈ V f
                         has to be scheduled within interval [ESj, LSj
                        ]. Hence, binary decision variables zit
                         are used for all i ∈ V and 
                           
                              t
                              ∈
                              
                                 W
                                 i
                              
                              :
                              =
                              
                                 {
                                 
                                    ES
                                    i
                                 
                                 ,
                                 
                                    ES
                                    i
                                 
                                 +
                                 1
                                 ,
                                 ⋯
                                 ,
                                 max
                                 
                                    {
                                    
                                       LC
                                       i
                                    
                                    −
                                    1
                                    ,
                                    
                                       LS
                                       i
                                    
                                    }
                                 
                                 }
                              
                           
                         in the following way:

                           
                              
                                 
                                    
                                       z
                                       
                                          i
                                          t
                                       
                                    
                                    :
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                
                                                   1
                                                   ,
                                                
                                             
                                             
                                                
                                                   
                                                      if
                                                      
                                                      activity
                                                   
                                                   
                                                   i
                                                   ∈
                                                   V
                                                   
                                                      APTARANORMAL
                                                      
                                                      is
                                                      
                                                      in
                                                      
                                                      execution
                                                      
                                                      at
                                                      
                                                      time
                                                   
                                                   
                                                   t
                                                   ∈
                                                   
                                                      W
                                                      i
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   0
                                                   ,
                                                
                                             
                                             
                                                otherwise.
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

A feasible solution for activity i consists of a block of ones usually preceded and succeeded by a block of zeros. The first switch of blocks occurs at that point in time in which activity i is started and the second switch appears when i is completed, i.e., at time Ci
                        (Si
                        ). The execution-based model for the RCPSP/max-cal can be given by

                           
                              (23)
                              
                                 
                                    
                                       
                                       
                                          
                                             Minimize
                                             
                                             
                                             
                                                ∑
                                                
                                                   t
                                                   ∈
                                                   
                                                      W
                                                      
                                                         n
                                                         +
                                                         1
                                                      
                                                   
                                                
                                             
                                             t
                                             
                                             
                                                z
                                                
                                                   n
                                                   +
                                                   1
                                                   ,
                                                   t
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (24)
                              
                                 
                                    
                                       
                                       
                                          
                                             subject
                                             
                                             to
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                                z
                                                
                                                   i
                                                   ,
                                                   
                                                      ES
                                                      i
                                                   
                                                   −
                                                   1
                                                
                                             
                                             =
                                             0
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                             i
                                             ∈
                                             V
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (25)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   t
                                                   ∈
                                                   
                                                      W
                                                      i
                                                   
                                                
                                             
                                             
                                                z
                                                
                                                   i
                                                   t
                                                
                                             
                                             =
                                             1
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                             i
                                             ∈
                                             
                                                V
                                                f
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (26)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   t
                                                   ∈
                                                   
                                                      N
                                                      i
                                                   
                                                
                                             
                                             
                                                z
                                                
                                                   i
                                                   t
                                                
                                             
                                             =
                                             0
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                             i
                                             ∈
                                             
                                                V
                                                f
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (27)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   t
                                                   ∈
                                                   
                                                      W
                                                      i
                                                   
                                                
                                             
                                             
                                                z
                                                
                                                   i
                                                   t
                                                
                                             
                                             
                                             
                                                C
                                                i
                                             
                                             
                                                (
                                                t
                                                )
                                             
                                             =
                                             
                                                p
                                                i
                                             
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                             i
                                             ∈
                                             
                                                V
                                                r
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (28)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                z
                                                
                                                   i
                                                   t
                                                
                                             
                                             ≤
                                             
                                                z
                                                
                                                   i
                                                   ,
                                                   t
                                                   −
                                                   1
                                                
                                             
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                             i
                                             ∈
                                             
                                                V
                                                r
                                             
                                             ,
                                             t
                                             ∈
                                             
                                                T
                                                i
                                                −
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (29)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                z
                                                
                                                   i
                                                   t
                                                
                                             
                                             ≤
                                             
                                                z
                                                
                                                   i
                                                   ,
                                                   t
                                                   +
                                                   1
                                                
                                             
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                             i
                                             ∈
                                             
                                                V
                                                r
                                             
                                             ,
                                             t
                                             ∈
                                             
                                                T
                                                i
                                                +
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (30)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   τ
                                                   =
                                                   t
                                                
                                                
                                                   
                                                      C
                                                      i
                                                   
                                                   
                                                      (
                                                      t
                                                      )
                                                   
                                                   −
                                                   1
                                                
                                             
                                             
                                                z
                                                
                                                   i
                                                   τ
                                                
                                             
                                             ≥
                                             
                                                (
                                                
                                                   z
                                                   
                                                      i
                                                      t
                                                   
                                                
                                                −
                                                
                                                   z
                                                   
                                                      i
                                                      ,
                                                      t
                                                      −
                                                      1
                                                   
                                                
                                                )
                                             
                                             
                                                (
                                                
                                                   C
                                                   i
                                                
                                                
                                                   (
                                                   t
                                                   )
                                                
                                                −
                                                t
                                                )
                                             
                                          
                                       
                                       
                                       
                                          
                                             i
                                             ∈
                                             
                                                V
                                                r
                                             
                                             ,
                                             t
                                             ∈
                                             
                                                W
                                                i
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (31)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   τ
                                                   ∈
                                                   
                                                      T
                                                      
                                                         i
                                                         j
                                                         t
                                                      
                                                   
                                                
                                             
                                             
                                                z
                                                
                                                   j
                                                   τ
                                                
                                             
                                             
                                             
                                                C
                                                j
                                             
                                             
                                                (
                                                τ
                                                )
                                             
                                             ≥
                                             
                                                (
                                                
                                                   z
                                                   
                                                      i
                                                      t
                                                   
                                                
                                                −
                                                
                                                   z
                                                   
                                                      i
                                                      ,
                                                      t
                                                      −
                                                      1
                                                   
                                                
                                                )
                                             
                                             
                                             max
                                             
                                                (
                                                
                                                   p
                                                   j
                                                
                                                ,
                                                1
                                                )
                                             
                                          
                                       
                                       
                                       
                                          
                                             
                                                〈
                                                i
                                                ,
                                                j
                                                〉
                                             
                                             ∈
                                             A
                                             ,
                                             t
                                             ∈
                                             
                                                W
                                                i
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (32)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   i
                                                   ∈
                                                   
                                                      V
                                                      r
                                                   
                                                   
                                                      |
                                                      t
                                                      ∈
                                                   
                                                   
                                                      W
                                                      i
                                                   
                                                
                                             
                                             
                                                r
                                                
                                                   i
                                                   k
                                                
                                             
                                             
                                             
                                                z
                                                
                                                   i
                                                   t
                                                
                                             
                                             
                                             
                                                C
                                                
                                                   i
                                                   t
                                                   k
                                                
                                             
                                             ≤
                                             
                                                R
                                                k
                                             
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                             k
                                             ∈
                                             R
                                             ,
                                             t
                                             ∈
                                             
                                                T
                                                ′
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (33)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                z
                                                
                                                   i
                                                   t
                                                
                                             
                                             ∈
                                             
                                                {
                                                0
                                                ,
                                                1
                                                }
                                             
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                             i
                                             ∈
                                             V
                                             ,
                                             t
                                             ∈
                                             
                                                W
                                                i
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Objective function (23) represents the makespan which is to be minimized. The first constraints (24) fix the variables 
                           
                              
                                 z
                                 
                                    i
                                    ,
                                    
                                       ES
                                       i
                                    
                                    −
                                    1
                                 
                              
                              ,
                           
                         which are used for a simplified representation of the model. Equalities (25) and (26) guarantee that the fictitious activities are scheduled only once and at feasible start times. Real activity i must be processed exactly pi
                         time units (cf. constraints (27)). Using set 
                           
                              
                                 T
                                 i
                                 −
                              
                              :
                              =
                              
                                 N
                                 i
                              
                              ∪
                              
                                 {
                                 τ
                                 ∈
                                 
                                    {
                                    L
                                    
                                       S
                                       i
                                    
                                    +
                                    1
                                    ,
                                    L
                                    
                                       S
                                       i
                                    
                                    +
                                    2
                                    ,
                                    ⋯
                                    ,
                                    L
                                    
                                       C
                                       i
                                    
                                    −
                                    1
                                    }
                                 
                                 
                                    
                                    |
                                    
                                 
                                 
                                    C
                                    i
                                 
                                 
                                    (
                                    τ
                                    )
                                 
                                 =
                                 0
                                 }
                              
                              ,
                           
                         inequalities (28) ensure that no real activity is started at an infeasible point in time or at a break appearing after the latest start time. Moreover, constraints (29) make sure that the last execution time of real activity i, i.e., 
                           
                              
                                 C
                                 i
                              
                              
                                 (
                                 
                                    S
                                    i
                                 
                                 )
                              
                              −
                              1
                              ,
                           
                         is not positioned in a break period, where 
                           
                              
                                 T
                                 i
                                 +
                              
                              :
                              =
                              
                                 {
                                 τ
                                 ∈
                                 
                                    {
                                    E
                                    
                                       S
                                       i
                                    
                                    +
                                    1
                                    ,
                                    E
                                    
                                       S
                                       i
                                    
                                    +
                                    2
                                    ,
                                    ⋯
                                    ,
                                    L
                                    
                                       C
                                       i
                                    
                                    −
                                    1
                                    }
                                 
                                 
                                    
                                    |
                                    
                                 
                                 
                                    C
                                    i
                                 
                                 
                                    (
                                    τ
                                    )
                                 
                                 =
                                 0
                                 }
                              
                           
                        . Inequalities (30) guarantee that a feasible solution involves only one block of ones for each activity i. Set

                           
                              
                                 
                                    
                                       T
                                       
                                          i
                                          j
                                          t
                                       
                                    
                                    :
                                    =
                                    
                                       {
                                       t
                                       +
                                       
                                          d
                                          
                                             i
                                             j
                                             t
                                          
                                       
                                       ,
                                       t
                                       +
                                       
                                          d
                                          
                                             i
                                             j
                                             t
                                          
                                       
                                       +
                                       1
                                       ,
                                       ⋯
                                       ,
                                       max
                                       
                                          {
                                          
                                             LC
                                             j
                                          
                                          −
                                          1
                                          ,
                                          
                                             LS
                                             j
                                          
                                          }
                                       
                                       }
                                    
                                 
                              
                           
                        contains all points in time in which activity j can be in execution assuming that activity i starts at time t ∈ Wi
                        , i.e., the points in time are feasible according to the temporal constraints. The 
                           
                              max
                              {
                              …
                              }
                           
                        -term is necessary in order to consider fictitious activities with 
                           
                              L
                              
                                 S
                                 j
                              
                              >
                              L
                              
                                 C
                                 j
                              
                              −
                              1
                           
                         as well as real activities with 
                           
                              L
                              
                                 S
                                 j
                              
                              ≤
                              L
                              
                                 C
                                 j
                              
                              −
                              1
                           
                        . The right hand side of (31) receives the value pj
                         (the value 1) if real activity i ∈ V r
                         (fictitious activity i ∈ V f
                        ) starts at time t ∈ Wi
                        . Inequalities (32) guarantee that the resource constraints will be met and (33) are the binary constraints. The model incorporates 
                           
                              O
                              (
                              |
                              V
                              |
                              
                                 ∑
                                 
                                    i
                                    ∈
                                    V
                                 
                              
                              |
                              
                                 W
                                 i
                              
                              |
                              +
                              |
                              
                                 V
                                 r
                              
                              ∥
                              T
                              |
                              +
                              |
                              R
                              ∥
                              
                                 T
                                 ′
                              
                              |
                              )
                           
                         constraints as well as 
                           
                              
                                 ∑
                                 
                                    i
                                    ∈
                                    V
                                 
                              
                              
                                 |
                                 
                                    W
                                    i
                                 
                                 |
                              
                           
                         binary decision variables. Since the execution-based model cannot be translated directly in the start-based (or changeover-based) model having the same value of the LP-relaxation, the models cannot be identified as “equivalent”.

All model formulations (either start- or changeover- or execution-based) can be used to solve small- and medium-scale RCPSP/max-cal instances to optimality (or with a small solution gap within a prescribed time limitation) using a common MIP-solver. In order to generate upper bounds for problem instances or to solve large-scale instances, heuristic solution procedures are required.

Several efficient solution procedures for resource-constrained project scheduling problems are based on schedule generation schemes that fix the start times of project activities iteratively. If the activity to be scheduled next is chosen applying a predefined priority rule, the procedure is named priority-rule method. In Section 6.1, a priority-rule method is introduced that constructs a feasible (i.e., calendar- and resource-feasible) schedule by using the well known “serial” schedule generation scheme (SSGS). In order to generate different solutions, the priority-rule method is further embedded into a multi-start algorithm. In addition, three different versions of a scatter search procedure are proposed in Section 6.2 in order to improve solutions found by the multi-start algorithm.

The following priority-rule method for the RCPSP/max-cal uses a SSGS, where exactly one activity i ∈ V is scheduled in each iteration. In the standard version of the SSGS (Kelly, 1963; Talbot & Patterson, 1978), the earliest and latest start times of all activities are computed in a preprocessing step. Once activity i has been scheduled within the algorithm, the earliest and latest start times of all activities not yet scheduled are updated taking account of δij, i, j ∈ V. Since the time lags depend on calendars within calendarization, a typical updating procedure cannot be used. Therefore, Franck (1999, Section 5.3) performs the whole procedure for determining earliest and latest start times in order to update ES- and LS-values in each iteration. In contrast, the main advantage of the method presented in this section is that the matrix 
                           
                              D
                              :
                              =
                              
                                 
                                    (
                                    
                                       d
                                       
                                          i
                                          j
                                          t
                                       
                                    
                                    )
                                 
                                 
                                    i
                                    ,
                                    j
                                    ∈
                                    V
                                    ,
                                    t
                                    ∈
                                    
                                       W
                                       i
                                    
                                 
                              
                           
                         enables us to return to the standard version and updating procedure of the SSGS (with only a few adaptations), which produces significantly better run times than the Franck (1999) version. In what follows, all parts of our priority-rule method are described in detail.

The completed set Ω⊆V contains all activities that have already received a start time and can be regarded as completed. At the beginning of the priority-rule method, we put S
                        0 ≔ 0 and Ω ≔ {0}. Then, a sequence of feasible “partial” schedules SΩ
                         ≔ (Si
                        )
                           i ∈ Ω
                         is constructed until a feasible schedule S ≔ (Si
                        )
                           i ∈ V
                         is attained. The eligible set 
                           
                              E
                              ⊆
                              V
                              ∖
                              Ω
                           
                         incorporates those activities which are eligible for scheduling. Generally, 
                           E
                         contains all available activities j whose immediate ≺
                           dist
                        –predecessors have already been scheduled, i.e., 
                           
                              E
                              :
                              =
                              {
                              j
                              ∈
                              V
                              ∖
                              Ω
                              
                              |
                              
                              
                                 Pred
                                 
                                    ≺
                                    
                                       d
                                       i
                                       s
                                       t
                                    
                                 
                              
                              
                                 (
                                 j
                                 )
                              
                              ⊆
                              Ω
                              }
                           
                        .

                           Definition 2
                           ≺
                                 dist
                               is an order in node set V. Considering two activities 
                                 
                                    i
                                    ,
                                    j
                                    ∈
                                    V
                                    ,
                                    i
                                    ≠
                                    j
                                    ,
                                 
                               then, condition i≺
                                 dist
                               
                              j holds iff

                                 
                                    •
                                    
                                       dijt
                                        > 0 for all t ∈ Wi
                                        or


                                       dijt
                                        ≥ 0 for all t ∈ Wi
                                        and djit
                                        < 0 for all t ∈ Wj
                                       .

≺
                           dist
                         is a strict order in node set V, where (i, j) is an element of the order iff activity j cannot be started before activity i starts, but activity i can be started before activity j starts.

The activity to be scheduled next is always that activity 
                           
                              j
                              ∈
                              E
                           
                         with best priority value π(j) and lowest index number. Thus, current activity j is chosen as 
                           
                              j
                              :
                              =
                              min
                              {
                              i
                              ∈
                              E
                              
                              |
                              
                              π
                              
                                 (
                                 i
                                 )
                              
                              =
                              
                                 ext
                                 
                                    h
                                    ∈
                                    E
                                 
                              
                              π
                              
                                 (
                                 h
                                 )
                              
                              }
                              ,
                           
                         where ext ∈ {min , max }. A large number of different priority rules have been examined in literature for the RCPSP with and without maximum time lags (see, e.g., Neumann et al., 2003b, Section 2.6). Under preliminary tests, we found out that the priority rules LCT (smallest latest completion time first), i.e., 
                           
                              
                                 ext
                                 
                                    h
                                    ∈
                                    E
                                 
                              
                              π
                              
                                 (
                                 h
                                 )
                              
                              =
                              
                                 min
                                 
                                    h
                                    ∈
                                    E
                                 
                              
                              
                                 LC
                                 h
                              
                              ,
                           
                         and FCT (fewest calendar-feasible start times first), i.e., 
                           
                              
                                 ext
                                 
                                    h
                                    ∈
                                    E
                                 
                              
                              π
                              
                                 (
                                 h
                                 )
                              
                              =
                              
                                 min
                                 
                                    h
                                    ∈
                                    E
                                 
                              
                              
                                 |
                                 
                                    W
                                    h
                                 
                                 |
                              
                              ,
                           
                         are efficient for the RCPSP/max-cal.

Once activity j has been chosen, its earliest calendar- and resource-feasible start time t
                        * ∈ Wj
                         must be determined. The resource profile of partial schedule S
                        
                           Ω, j
                         ≔ (Si
                        )
                           i ∈ Ω ∪ {j} is given by

                           
                              
                                 
                                    
                                       r
                                       k
                                       cal
                                    
                                    
                                       (
                                       
                                          S
                                          
                                             Ω
                                             ,
                                             j
                                          
                                       
                                       
                                       ,
                                       t
                                       )
                                    
                                    :
                                    =
                                    
                                    
                                    
                                    
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          A
                                          
                                             (
                                             
                                                S
                                                
                                                   Ω
                                                   ,
                                                   j
                                                
                                             
                                             
                                             ,
                                             t
                                             )
                                          
                                          ∣
                                          
                                             C
                                             i
                                          
                                          
                                             (
                                             t
                                             )
                                          
                                          =
                                          1
                                       
                                    
                                    
                                       r
                                       
                                          i
                                          k
                                       
                                    
                                    +
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          A
                                          
                                             (
                                             
                                                S
                                                
                                                   Ω
                                                   ,
                                                   j
                                                
                                             
                                             
                                             ,
                                             t
                                             )
                                          
                                          ∣
                                          
                                             C
                                             i
                                          
                                          
                                             (
                                             t
                                             )
                                          
                                          =
                                          0
                                       
                                    
                                    
                                       r
                                       
                                          i
                                          k
                                       
                                    
                                    
                                    
                                       ρ
                                       k
                                    
                                    
                                    
                                    k
                                    ∈
                                    R
                                    ,
                                    t
                                    ∈
                                    
                                       [
                                       0
                                       ,
                                       
                                          d
                                          ¯
                                       
                                       )
                                    
                                 
                              
                           
                        with 
                           
                              A
                              
                                 (
                                 
                                    S
                                    
                                       Ω
                                       ,
                                       j
                                    
                                 
                                 
                                 ,
                                 t
                                 )
                              
                              :
                              =
                              
                                 {
                                 i
                                 ∈
                                 Ω
                                 ∪
                                 
                                    {
                                    j
                                    }
                                 
                                 
                                 |
                                 
                                 
                                    S
                                    i
                                 
                                 ≤
                                 t
                                 <
                                 
                                    C
                                    i
                                 
                                 
                                    (
                                    
                                       S
                                       i
                                    
                                    )
                                 
                                 }
                              
                           
                        . For activity j, time t
                        * can then be set as 
                           
                              
                                 t
                                 *
                              
                              :
                              =
                              min
                              
                                 {
                                 t
                                 ∈
                                 
                                    W
                                    j
                                 
                                 ∣
                                 t
                                 ≥
                                 
                                    ES
                                    
                                       j
                                    
                                    Ω
                                 
                                 
                                 and
                                 
                                 
                                    r
                                    k
                                    cal
                                 
                                 
                                    (
                                    
                                       S
                                       
                                          Ω
                                          ,
                                          j
                                       
                                    
                                    
                                    ,
                                    τ
                                    )
                                 
                                 ≤
                                 
                                    R
                                    k
                                 
                                 
                                 for
                                 
                                 t
                                 ≤
                                 τ
                                 <
                                 
                                    C
                                    j
                                 
                                 
                                    (
                                    t
                                    )
                                 
                                 
                                 and
                                 
                                 all
                                 
                                 k
                                 ∈
                                 R
                                 }
                              
                              ,
                           
                         where min ∅ ≔ ∞. In case t
                        * is larger than the current latest start time of activity j, a so-called unscheduling step is performed. Otherwise, we set Sj
                         ≔ t
                        * and Ω ≔ Ω ∪ {j}.

Earliest and latest start times depend on the completed set and are therefore marked with the superscript Ω. After fixing 
                           
                              
                                 S
                                 j
                              
                              ,
                              j
                              ∈
                              E
                              ,
                           
                         the earliest and latest start times of activities h ∈ V∖Ω must be adapted.

The whole priority-rule method (SSGS and activity choice on the basis of a priority rule) is given in Algorithm 2
                        , where u is the number of unscheduling steps. Moreover, the priority rule is used in a dynamic version, i.e., 
                           
                              π
                              (
                              i
                              )
                              ,
                              i
                              ∈
                              E
                              ,
                           
                         depends on the current partial schedule SΩ
                         and must be computed each time the activity to be scheduled next is selected.

In case that condition 
                           
                              
                                 t
                                 *
                              
                              >
                              
                                 LS
                                 j
                                 Ω
                              
                           
                         is satisfied, the current latest start time 
                           
                              LS
                              j
                              Ω
                           
                         of activity j not yet scheduled must be extended in an unscheduling step (see also Neumann et al., 2003b, Section 2.6). The latest start time of activity j results from the start time of an activity i ∈ Ω minus the length of the longest path from j to i assuming that j starts at time 
                           
                              LS
                              
                                 j
                              
                              Ω
                           
                        . Let 
                           U
                         be the set of all those activities. To increase 
                           
                              
                                 LS
                                 j
                                 Ω
                              
                              ,
                           
                         we unschedule all activities 
                           
                              i
                              ∈
                              U
                           
                        . In addition, we unschedule all activities i ∈ Ω with 
                           
                              
                                 S
                                 i
                              
                              >
                              
                                 min
                                 
                                    h
                                    ∈
                                    U
                                 
                              
                              
                                 S
                                 h
                              
                              ,
                           
                         which due to the right-shift of the activities from set 
                           U
                         may possibly be started earlier. Afterwards, we have to compute the earliest and latest start times for all activities h ∈ V∖Ω again which were valid before scheduling activities 
                           
                              i
                              ∈
                              U
                           
                        . If there is activity zero in set 
                           
                              U
                              ,
                           
                         a maximum number of unscheduling steps is reached, or 
                           
                              
                                 ES
                                 i
                                 Ω
                              
                              >
                              
                                 LS
                                 i
                              
                           
                         holds for an activity 
                           
                              i
                              ∈
                              U
                              ,
                           
                         the generation scheme terminates without a feasible solution. The unscheduling procedure is given in Algorithm 3
                        , where 
                           
                              u
                              ¯
                           
                         describes the maximum number of unscheduling steps.

We demonstrate the priority-rule method by scheduling the project depicted in Fig. 3, for which we have already performed the temporal planning. The resource capacities are 
                           
                              
                                 R
                                 1
                              
                              =
                              2
                           
                         and 
                           
                              
                                 R
                                 2
                              
                              =
                              3
                           
                         and both resources are released during a break (i.e., 
                           
                              
                                 ρ
                                 i
                              
                              =
                              0
                              ,
                              i
                              =
                              1
                              ,
                              2
                           
                        ). Eligible activities are scheduled according to the (dynamic) FCS-rule. Table 4
                         shows the iterations of Algorithm 2, where column “Update” refers to increasing earliest start times or decreasing latest start times after the scheduling of selected activity j at time t
                        *. Moreover, Fig. 4
                         depicts the resource profiles of the solution 
                           
                              S
                              =
                              (
                              0
                              ,
                              3
                              ,
                              8
                              ,
                              7
                              ,
                              9
                              ,
                              15
                              )
                           
                         obtained after running the procedure.

The serial schedule generation scheme is embedded into a multi-start algorithm, where the selection probabilities for activities are determined by using the so-called “regret-based biased random sampling” (Kolisch, 1995, Section 5.3). In each iteration, the selection probability ψi
                         of activity 
                           
                              i
                              ∈
                              E
                           
                         is calculated by

                           
                              
                                 
                                    
                                       ψ
                                       i
                                    
                                    :
                                    =
                                    
                                       
                                          
                                             max
                                             
                                                j
                                                ∈
                                                E
                                             
                                          
                                          
                                             {
                                             π
                                             
                                                (
                                                j
                                                )
                                             
                                             }
                                          
                                          −
                                          π
                                          
                                             (
                                             i
                                             )
                                          
                                          +
                                          1
                                       
                                       
                                          
                                             ∑
                                             
                                                h
                                                ∈
                                                E
                                             
                                          
                                          
                                             (
                                             
                                                max
                                                
                                                   j
                                                   ∈
                                                   E
                                                
                                             
                                             
                                                {
                                                π
                                                
                                                   (
                                                   j
                                                   )
                                                
                                                }
                                             
                                             −
                                             π
                                             
                                                (
                                                h
                                                )
                                             
                                             +
                                             1
                                             )
                                          
                                       
                                    
                                    .
                                 
                              
                           
                        
                     

Therefore, the activity with the smallest priority value for both the LCT- and the FCS-rule obtains the highest selection probability.

Scatter Search is a population-based metaheuristic that constructs solutions by systematically combining solutions of a reference set. The generic scatter search procedure presented in Glover (1977) or Laguna and Martí (2003) is based on five steps. In the first step, an initial population is generated. Then, a reference set 
                           RefSet
                         is chosen that is a repository of “good” and “disperse” solutions (step 2). Subsets are iteratively selected from the reference set (step 3), and the solutions of each selected subset are combined, where good characteristics are considered in order to get new high quality solutions (step 4). Step 5 consists in updating the reference set. Steps 3–5 are iterated with the new reference set until a stopping criterion is met.

In this section, three scatter search versions for the RCPSP/max-cal are described that differ only in steps 3 and 4. The choice of a scatter search procedure for the RCPSP/max-cal has been inspired by the promising results provided by Debels, De Reyck, Leus, and Vanhoucke (2006) and Mahdi Mobini, Rabbani, Amalnik, Razmi, and Rahimi-Vahed (2009) for the basic RCPSP, by Alvarez-Valdés, Crespo, Tamarit, and Villa (2006) for the RCPSP with partially renewable resources, by Ranjbar, De Reyck, and Kianfar (2009) for trade-off problems in project scheduling, and by Vanhoucke (2010) for maximizing the net present value of resource-constrained projects. Particularly for the RCPSP, where a lot of heuristic solution procedures exist, Kolisch and Hartmann (2006) as well as Mahdi Mobini et al. (2009) showed that scatter search is one of the best approaches to generate good solutions. In what follows, each step of our scatter search methodology is described in detail.

The initial population (step 1) is generated by calling 
                           
                              
                                 b
                                 2
                              
                              =
                              
                                 
                                    |
                                    RefSet
                                    |
                                 
                                 2
                              
                           
                         times the multi-start version of the priority-rule method (cf. Algorithm 2). In order to obtain “good” as well as “disperse” solutions, the LCT-, the FCS-, and a “random”-rule (where an activity 
                           
                              i
                              ∈
                              E
                           
                         is selected randomly) are applied in equal properties. For each solution S, a forward-backward procedure is used to improve S (Tormos & Lova, 2001; Valls, Ballestin, & Quintanilla, 2005). Thereby, in a backward pass, the activities are considered from right to left and scheduled at the latest feasible time (i.e., they are shifted to the right). Subsequently, in the forward pass, they are considered from left to right and scheduled at the earliest feasible time (i.e., they are shifted back to the left).

From the initial population, a set of b solutions is selected to form the reference set, RefSet, (step 2). Thereby, b
                        1 “good” solutions are chosen according to the objective function value (i.e., solutions with shortest makespan), and 
                           
                              
                                 b
                                 2
                              
                              =
                              b
                              −
                              
                                 b
                                 1
                              
                           
                         “disperse” solutions are determined according to the distances to good solutions. In order to guarantee diversity in RefSet, a threshold t
                        1 on the minimal distance between each pair of good solutions is introduced. In addition, a threshold t
                        2 is defined to ensure that the subset of disperse solutions contains the best solutions that are sufficiently distant from the good solutions, i.e., 
                           
                              
                                 min
                                 
                                    S
                                    ∈
                                    RefSet
                                    (
                                    
                                       b
                                       1
                                    
                                    )
                                 
                              
                              
                                 {
                                 
                                    1
                                    
                                       n
                                       +
                                       2
                                    
                                 
                                 
                                    ∑
                                    
                                       i
                                       =
                                       0
                                    
                                    
                                       n
                                       +
                                       1
                                    
                                 
                                 
                                    |
                                    
                                       S
                                       i
                                    
                                    −
                                    
                                       S
                                       i
                                       ′
                                    
                                    |
                                 
                                 }
                              
                              >
                              
                                 t
                                 2
                              
                           
                         must hold for each disperse solution S′, where set RefSet(b
                        1) contains all good solutions (Debels et al., 2006). If RefSet incorporates less than b solutions after using the thresholds t
                        1 and t
                        2 to find good and disperse solutions, RefSet is filled up with the best solutions from the initial population that were not considered for RefSet due to t
                        1 and t
                        2. It may happen that b
                        2 runs of the multi-start algorithm (step 1) only produce γ < b feasible and different (with respect to start times) schedules. In this case, the number of solutions in the reference set is reduced to γ (if γ ≥ 4 is satisfied), i.e., b ≔ γ; otherwise step 1 is executed again.

Within subset selection (step 3), we distinguish between three scatter search versions. In the first version, all subsets of two solutions S, S′ ∈ RefSet, 
                           
                              S
                              ≠
                              
                                 S
                                 ′
                              
                              ,
                           
                         are considered, where at least one solution is new, i.e., was generated in the last iteration. The second version takes subsets of three solutions S, S′, S′′ ∈ RefSet, 
                           
                              S
                              ≠
                              
                                 S
                                 ′
                              
                              ≠
                              
                                 S
                                 
                                    ′
                                    ′
                                 
                              
                              ≠
                              S
                              ,
                           
                         into account. In order to ensure that nearly the same number of schedules is generated in each iteration of both versions (see also step 4), we choose 
                           
                              ⌊
                              
                                 b
                                 3
                              
                              ⌋
                           
                         subsets of schedules S′, S′′ ∈ RefSet randomly for each new solution S in RefSet. The third version considers all subsets from the first and second version. If there is no new solution in the current RefSet, all solutions are marked as new.

The combination of solutions (step 4) is performed on the basis of a specific representation. In particular, the representation of a solution is determined by the sequence in which activities i ∈ V∖{0} are scheduled within the SSGS. A vector 
                           
                              [
                              
                                 ϑ
                                 1
                              
                              ,
                              
                                 ϑ
                                 2
                              
                              ,
                              …
                              ,
                              
                                 ϑ
                                 
                                    n
                                    +
                                    1
                                 
                              
                              ]
                           
                         consisting of varying integer numbers, where each number 
                           
                              
                                 ϑ
                                 i
                              
                              ∈
                              
                                 {
                                 1
                                 ,
                                 …
                                 ,
                                 n
                                 +
                                 1
                                 }
                              
                           
                         occurs exactly once, implies that the start time Si
                         of activity i is fixed, after 
                           
                              
                                 ϑ
                                 i
                              
                              −
                              1
                           
                         other activities have been scheduled. For example, vector [4, 3, 1, 2] means that (after setting S
                        0 ≔ 0) activity 3 is scheduled first and then, the start times of activities 4, 2, and 1 are determined consecutively. Since the sequence in which activities are scheduled may vary before and after an unscheduling step, we store the last sequence in the corresponding vector.

In the first version of our scatter search procedure, the current selected subset consists of a pair of solutions which are represented by vectors VM
                         (mother) and VF
                         (father). We obtain a new representation 
                           
                              V
                              
                                 C
                                 1
                              
                           
                         (child) by applying one of the following three crossover operators, which manipulates the vectors of father and mother (see, e.g., Hartmann, 1998; Franck & Selle, 1998). The first crossover operator is an one-point crossover, where we randomly draw a number q from set 
                           
                              {
                              1
                              ,
                              …
                              ,
                              n
                              }
                           
                        . The first q integer numbers of vector VF
                         are transferred directly to new vector 
                           
                              V
                              
                                 C
                                 1
                              
                           
                        . The remaining 
                           
                              n
                              +
                              1
                              −
                              q
                           
                         numbers are taken from vector VM
                        , starting at the first position of the vector and transferring the missing numbers to 
                           
                              V
                              
                                 C
                                 1
                              
                           
                        . The second and the third operators are two-point crossovers, where two numbers q
                        1 and q
                        2 with q
                        1 < q
                        2 are randomly chosen from set 
                           
                              {
                              1
                              ,
                              …
                              ,
                              n
                              }
                           
                        . The first two-point operator assigns the first q
                        1 numbers of VF
                         to new vector 
                           
                              
                                 V
                                 
                                    C
                                    1
                                 
                              
                              ,
                           
                         the next 
                           
                              
                                 q
                                 2
                              
                              −
                              
                                 q
                                 1
                              
                           
                         numbers are taken from VM
                        , where the transfer of numbers is started at the first position of VM
                        , and the remaining numbers are again taken from VF
                        , where the transfer is started at position 
                           
                              
                                 q
                                 1
                              
                              +
                              1
                           
                         of VF
                        . The second two-point operator copies the numbers between positions 
                           
                              
                                 q
                                 1
                              
                              +
                              1
                           
                         and q
                        2 of vector VF
                         directly to the same positions of vector 
                           
                              V
                              
                                 C
                                 1
                              
                           
                        . The remaining positions are filled using vector VM
                        , where the transfer of numbers is started at position 
                           
                              
                                 q
                                 2
                              
                              +
                              1
                           
                        . By changing the roles of mother and father representation, child representation 
                           
                              V
                              
                                 C
                                 2
                              
                           
                         is generated. Within the first version, we use both child representations.

In the second version, the selected subset consists of three solutions which are represented by vectors 
                           
                              V
                              
                                 P
                                 1
                              
                           
                         (parent 1), 
                           
                              V
                              
                                 P
                                 2
                              
                           
                         (parent 2), and 
                           
                              V
                              
                                 P
                                 3
                              
                           
                         (parent 3). We obtain a new representation 
                           
                              V
                              
                                 C
                                 1
                              
                           
                         by applying one of the following three two-point crossover operators. Again, two numbers q
                        1 and q
                        2 with q
                        1 < q
                        2 are randomly chosen from set 
                           
                              {
                              1
                              ,
                              …
                              ,
                              n
                              }
                           
                        . The first crossover for three solutions assigns the first q
                        1 numbers of 
                           
                              V
                              
                                 P
                                 1
                              
                           
                         to new vector 
                           
                              
                                 V
                                 
                                    C
                                    1
                                 
                              
                              ,
                           
                         the next 
                           
                              
                                 q
                                 2
                              
                              −
                              
                                 q
                                 1
                              
                           
                         numbers are taken from 
                           
                              
                                 V
                                 
                                    P
                                    2
                                 
                              
                              ,
                           
                         and the remaining numbers are taken from 
                           
                              
                                 V
                                 
                                    P
                                    3
                                 
                              
                              ,
                           
                         where the transfer is always started at the first position. The second crossover copies the numbers between positions 
                           
                              
                                 q
                                 1
                              
                              +
                              1
                           
                         and q
                        2 of 
                           
                              V
                              
                                 P
                                 1
                              
                           
                         to the same positions of vector 
                           
                              V
                              
                                 C
                                 1
                              
                           
                        . The numbers of positions 
                           
                              
                                 q
                                 2
                              
                              +
                              1
                           
                         to 
                           
                              n
                              +
                              1
                           
                         are taken from 
                           
                              V
                              
                                 P
                                 2
                              
                           
                         starting the transfer at position 
                           
                              
                                 q
                                 1
                              
                              +
                              1
                           
                        . The remaining positions 1 to q
                        1 are filled using vector 
                           
                              
                                 V
                                 
                                    P
                                    3
                                 
                              
                              ,
                           
                         where the transfer is started at position 1. The third crossover copies the numbers between positions 
                           
                              
                                 q
                                 2
                              
                              +
                              1
                           
                         and 
                           
                              n
                              +
                              1
                           
                         of 
                           
                              V
                              
                                 P
                                 1
                              
                           
                         to the same positions of vector 
                           
                              V
                              
                                 C
                                 1
                              
                           
                        . The numbers of positions 1 to q
                        1 are transferred from 
                           
                              V
                              
                                 P
                                 2
                              
                           
                         starting the transfer at position 1 and the remaining positions 
                           
                              
                                 q
                                 1
                              
                              +
                              1
                           
                         to q
                        2 are filled using vector 
                           
                              
                                 V
                                 
                                    P
                                    3
                                 
                              
                              ,
                           
                         where the transfer is started again at position 1. If 
                           
                              V
                              
                                 P
                                 1
                              
                           
                         takes the place of 
                           
                              
                                 V
                                 
                                    P
                                    2
                                 
                              
                              ,
                           
                        
                        
                           
                              V
                              
                                 P
                                 2
                              
                           
                         takes the place of 
                           
                              
                                 V
                                 
                                    P
                                    3
                                 
                              
                              ,
                           
                         and 
                           
                              V
                              
                                 P
                                 3
                              
                           
                         takes the place of 
                           
                              V
                              
                                 P
                                 1
                              
                           
                         in the crossover operators, child 
                           
                              V
                              
                                 C
                                 2
                              
                           
                         is obtained. By shifting the positions of the parents again, child 
                           
                              V
                              
                                 C
                                 3
                              
                           
                         is determined. Within the second version, we consider all three child representations.

In the third version, new representations are specified by using crossover operators of version 1 if the current subset consists of two solutions and crossover operators of version 2 if the current subset consists of three solutions.

In order to evaluate a representation 
                           
                              
                                 V
                                 C
                              
                              :
                              =
                              
                                 [
                                 
                                    ϑ
                                    1
                                 
                                 ,
                                 
                                    ϑ
                                    2
                                 
                                 ,
                                 …
                                 ,
                                 
                                    ϑ
                                    
                                       n
                                       +
                                       1
                                    
                                 
                                 ]
                              
                           
                         and to determine the corresponding schedule S, the SSGS is used again. Thereby, ϑ
                           i
                         serves as priority-rule value of activity i, where an activity with a small priority-rule value is preferred. Thus, activity j to be scheduled next is chosen as 
                           
                              j
                              ∈
                              E
                           
                         for which 
                           
                              π
                              
                                 (
                                 j
                                 )
                              
                              =
                              
                                 min
                                 
                                    h
                                    ∈
                                    E
                                 
                              
                              
                                 ϑ
                                 h
                              
                              .
                           
                         If the SSGS terminates with a feasible solution, the forward-backward procedure is used to improve the solution found. Otherwise, the representation is rejected.

In the reference set update (step 5), all feasible solutions found within the combination procedure as well as solutions currently in reference set RefSet are considered. The new reference set is built by inserting again b
                        1 good as well as 
                           
                              
                                 b
                                 2
                              
                              =
                              b
                              −
                              
                                 b
                                 1
                              
                           
                         disperse solutions as described in step 2. The subset selection, the solution combination, and the reference set update are iterated until Λ ≫ 0 (feasible and infeasible) schedules are determined.

This section covers the results of a comprehensive performance analysis undertaken in order to investigate the performance of the MIP-formulations as well as the heuristic solution procedures devised in Sections 5 and 6. We start by describing the composition and generation of problem instances used for testing the different methods (cf. Section 7.1). CPLEX 12.6 has been used to solve small- and medium-scale instances to optimality. The results of the branch-and-cut methods provided by CPLEX with respect to our three MIP models are compared to each other and to the different heuristic solution procedures (cf. Section 7.2). In addition, the impact of our new time planning procedure is shown. All tests have been performed on an Intel Core i7 CPU 990X with 3.47 gigahertz and 24 gigabyte RAM under Windows 7.

The computational tests have been performed on problem-specific instances derived from the UBO-test set. The test set contains 360 instances with 10, 20, 50, and 100 activities as well as 5 renewable resources, respectively (Franck, Neumann, & Schwindt, 2001b).

The problem instances are generated using control parameters that influence the behaviour of solution procedures (e.g., number of maximum time lags, resource factor, resource strength, and restrictiveness of Thesen; Schwindt, 1998). Particularly, the resource strength (RS), that describes how scarce resources are, affects the run time of our MIP-formulations. The RS-value defines for a specific resource 
                           
                              k
                              ∈
                              R
                           
                         its capacity as

                           
                              
                                 
                                    
                                       R
                                       k
                                    
                                    :
                                    =
                                    
                                       max
                                       
                                          i
                                          ∈
                                          V
                                       
                                    
                                    
                                       {
                                       
                                          r
                                          
                                             i
                                             k
                                          
                                       
                                       }
                                    
                                    +
                                    
                                       ⌈
                                       RS
                                       
                                       
                                       
                                          (
                                          
                                             max
                                             
                                                t
                                                ∈
                                                [
                                                0
                                                ,
                                                
                                                   d
                                                   ¯
                                                
                                                )
                                             
                                          
                                          
                                             {
                                             
                                                r
                                                k
                                             
                                             
                                                (
                                                
                                                   ES
                                                   ˜
                                                
                                                ,
                                                t
                                                )
                                             
                                             }
                                          
                                          −
                                          
                                             max
                                             
                                                i
                                                ∈
                                                V
                                             
                                          
                                          
                                             {
                                             
                                                r
                                                
                                                   i
                                                   k
                                                
                                             
                                             }
                                          
                                          )
                                       
                                       ⌉
                                    
                                    ,
                                 
                              
                           
                        where 
                           
                              
                                 r
                                 k
                              
                              
                                 (
                                 
                                    ES
                                    ˜
                                 
                                 ,
                                 ·
                                 )
                              
                           
                         represents the resource profile of schedule 
                           
                              S
                              =
                              
                                 ES
                                 ˜
                              
                           
                        ; 
                           
                              
                                 ES
                                 ˜
                              
                              i
                           
                         is the earliest start time of activity i without considering calendar constraints (Kolisch & Sprecher, 1996). Each test set with an equal number of real activities obtains RS-values from set {0.1, 0.25, 0.5}. In particular, we set RS ≔ 0.1 for UBO-instances 1–30, RS ≔ 0.25 for UBO-instances 31–60, and RS ≔ 0.5 for UBO-instances 61–90.

Within a planning horizon of 
                           
                              
                                 d
                                 ¯
                              
                              =
                              2
                              
                              
                                 ∑
                                 
                                    i
                                    ∈
                                    V
                                 
                              
                              
                                 p
                                 i
                              
                           
                         time units, three different resource calendars are used: two for workforce or machines requiring personnel, and one for machines constantly in execution. The first calendar can be specified by 5–2–5–2 etc. and the second calendar by 6–1–6–1 etc., where work days and days off are mentioned alternately. The third calendar contains exclusively work days.

For each problem instance, a resource calendar is assigned randomly to each resource. Then, holidays are incorporated in the first two calendars by switching a workday to a holiday with a probability of 3.
                           
                              3
                              ¯
                           
                         percent. In the event that resource 
                           
                              k
                              ∈
                              R
                           
                         obtains the first or the second calendar, we set ρk
                         ≔ 0, otherwise ρk
                         ≔ 1 holds. Using the resource calendars, activity calendars may be determined. If calendar C
                        
                           i
                        ( · ) of real activity i does not contain a time t ∈ T so that pi
                         > 0 working periods follow, activity i is declared as interruptible, i.e., i ∈ Vbi
                        . Furthermore, set Vbi
                         is filled by choosing the other real activities randomly and consecutively as long as a percentage of Ψ ∈ {60 percent, 80 percent} is reached (the resulting test set contains 720 RCPSP/max-cal instances). The activities i ∈ Vbi
                         receive a starting phase of 
                           
                              
                                 
                                    ɛ
                                 
                                 i
                              
                              ∈
                              
                                 {
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 
                                    ⌊
                                    
                                       p
                                       i
                                    
                                    /
                                    4
                                    ⌋
                                 
                                 }
                              
                           
                         time units. Afterwards, all activities that are not yet assigned to set Vbi
                         are inserted in set Vni
                        . In order to obtain a well-defined problem instance, additional time lags 
                           
                              d
                              
                                 i
                                 ,
                                 n
                                 +
                                 1
                              
                              min
                           
                         with 
                           
                              
                                 δ
                                 
                                    i
                                    ,
                                    n
                                    +
                                    1
                                 
                              
                              :
                              =
                              
                                 p
                                 i
                              
                           
                         (if they are missing) are introduced. Moreover, all time lags between activities i and 
                           
                              n
                              +
                              1
                           
                         require resources 
                           
                              
                                 R
                                 
                                    i
                                    ,
                                    n
                                    +
                                    1
                                 
                              
                              :
                              =
                              
                                 R
                                 i
                              
                           
                        . The remaining time lags, say e.g., the time lag between activities i and j, receive a resource set 
                           
                              R
                              
                                 i
                                 j
                              
                           
                         randomly from set 
                           
                              {
                              ∅
                              ,
                              
                                 R
                                 i
                              
                              ,
                              
                                 R
                                 j
                              
                              ,
                              
                                 R
                                 i
                              
                              ∪
                              
                                 R
                                 j
                              
                              }
                           
                        .

In our performance study, we initially considered the three MIP-models presented in Section 5, where the temporal inequalities in the start-based and changeover-based models are formulated by disaggregated constraints. Preliminary tests have shown that models with disaggregated constraints are particularly suitable for the calendarization, since, in contrast to models with aggregated constraints, 8 (18) further instances with 50 activities and 
                           
                              Ψ
                              =
                              60
                              
                              percent
                           
                         (
                           
                              Ψ
                              =
                              80
                              
                              percent
                           
                        ) could be solved to optimality within our computation environment. Hence, we distinguish between models:

                           
                              •
                              M1, start-based model: (6), (7), (9), (10), (13),

M2, changeover-based model: (15)–(18), (20)–(22), and

M3, execution-based model: (23)–(33).

For every instance, an initial solution has been generated by calling 
                           
                              
                                 b
                                 2
                              
                              =
                              
                                 15
                                 2
                              
                           
                         times the multi-start version of the priority-rule method, i.e., the initial population of the scatter search procedure was build, where the LCT-, the FCS-, and the random-rule are used in equal properties. The best solution found was used as a start solution and posted to the CPLEX-solver. Moreover, we have investigated the effectiveness of general CPLEX-cuts during optimization. For all models, mixed-integer rounding (MIR) and generalized upper bound cover (GUB) cuts are added. Since the RCPSP/max-cal is an 
                           NP
                        -hard optimization problem, we cannot expect that a branch-and-cut approach will terminate within a reasonable time limitation, which is why we allow a maximum computation time of 3 hours (unless stated differently), after which the best solution found up to that point is returned.


                        Table 5
                         lists the results for instances with 10 and 20 real activities, where 
                           
                              Ψ
                              =
                              60
                              
                              percent
                              
                              (
                              80
                              
                              percent
                              )
                           
                         of activities are interruptible. The different test sets are given by the names “|V r
                        |-RS” in order to demonstrate the impact of the resource strength. Column “tcpu
                        ” describes the average computation times [seconds] and column “Opt” (“Inf”) displays the number of instances solved to proven optimality (infeasibility) within the time limit. Infeasible instances appear if the resource capacity cannot be observed while considering the combination of time lags and calendars. It is obvious that a large resource strength results in fewer infeasible solutions. Column “Unk” displays the number of instances for which the solvability status is unknown, i.e., neither a feasible schedule is found nor infeasibility is shown.

As expected, all model formulations perform very well for instances involving 10 activities. No superiority of a procedure over another can be ascertained. The average run times are invariably less than one second. However, instances with 
                           
                              RS
                              =
                              0.1
                           
                         (i.e., with scarce resources) have a slightly longer run time than instances with 
                           
                              RS
                              =
                              0.5
                           
                         (i.e., with rather high resource capacities). The results for instances with 20 activities show that instances with 
                           
                              Ψ
                              =
                              80
                              
                              percent
                           
                         are harder to solve than instances with 
                           
                              Ψ
                              =
                              60
                              
                              percent
                           
                        . The difficulty results from a larger number of feasible activity start times, i.e., ∑
                           i ∈ V
                        |Wi
                        | is usually larger if 80 percent of activities are interruptible. In this case, the number of binary decision variables as well as constraints are increased and the solver needs more time for the branching scheme. Furthermore, the execution-based model produces the largest run times, and it proved incapable of terminating the enumerations for all instances; one instance has an unknown solvability status. For instances with the status “unknown”, a run time of 3 hours is included in the calculation of tcpu
                        . The increase in run times is mainly evoked by the fact that the setting of a decision variable 
                           
                              
                                 z
                                 
                                    i
                                    t
                                 
                              
                              ,
                              i
                              ∈
                              V
                              ,
                              t
                              ∈
                              
                                 W
                                 i
                              
                              ,
                           
                         to one does not produce information on other decision variables 
                           
                              
                                 z
                                 
                                    i
                                    
                                       t
                                       ′
                                    
                                 
                              
                              ,
                              
                                 t
                                 ′
                              
                              ≠
                              t
                           
                        . Note that 
                           
                              
                                 x
                                 
                                    i
                                    t
                                 
                              
                              =
                              1
                              ,
                              i
                              ∈
                              V
                              ,
                              t
                              ∈
                              
                                 W
                                 i
                              
                              ,
                           
                         leads to 
                           
                              
                                 x
                                 
                                    i
                                    
                                       t
                                       ′
                                    
                                 
                              
                              =
                              0
                           
                         for all 
                           
                              
                                 t
                                 ′
                              
                              ≠
                              t
                           
                         in the start-based model, and 
                           
                              
                                 y
                                 
                                    i
                                    t
                                 
                              
                              =
                              1
                              ,
                              i
                              ∈
                              V
                              ,
                              t
                              ∈
                              
                                 W
                                 i
                              
                              ,
                           
                         leads to 
                           
                              
                                 y
                                 
                                    i
                                    
                                       t
                                       ′
                                    
                                 
                              
                              =
                              1
                           
                         for all t′ > t in the changeover-based model.

The results for instances with 50 activities are given in Table 6
                        . Column “Feas” shows the number of instances for which a feasible schedule is found whose optimality could not be proven. Furthermore, column “Gap” describes the mean percentage deviation [percent] of the makespan found from the best lower bound. Note that when the optimality of an instance is not proven, tcpu
                         is set to 3 hours. In case of large instances, models M1 and M2 work particularly well. In particular, model M1 produces the best results for instances with 
                           
                              RS
                              =
                              0.1
                           
                         and 
                           
                              Ψ
                              =
                              60
                              
                              percent
                           
                        . Considering instances with RS ∈ {0.1, 0.25} and 
                           
                              Ψ
                              =
                              80
                              
                              percent
                              ,
                           
                         M1 is able to solve two more instances to proven optimality than M2, but two instances remain with an unknown solvability status. For the other instances, model M2 produces the lowest run times and seems to be the best choice. Model M3 yields again the worst performance. The average solution gaps of feasible solved instances are 29.4 percent for the start-based, 15.9 percent for the changeover-based, and 19.1 percent for the execution-based model.

Combining the individual results of all models for the instances with 50 activities, 9 instances remain for which CPLEX was not able to prove the optimality or infeasibility within 3 hours (7 instances could be solved to feasibility with an average gap of 19.92 percent and for 2 instances the solvability status is unknown). In order to solve these 9 instances, we increased the run time limit to 10 hours. Within 10 hours, CPLEX proved infeasibility for one out of two instances whose solvability status was unknown after 3 hours. For only one of seven feasible solved instances, optimality was proven after 10 hours and the average gap of the remaining instances reduces from 19.92 percent to 10.73 percent.

Finally, we tried to solve instances with 100 activities using model M1. Unfortunately, only one sixth of the hardest instances (
                           
                              RS
                              =
                              0.1
                           
                        ) could be solved to proven optimality or infeasibility within 3 hours, and the solvability status for more than half of these instances remains unknown. In order to find out if an increased run time limit of 10 hours could improve the results, we ran CPLEX with model M1 for the first 10 instances of each resource strength value. The reduced test sets are named by “100′-RS”. Regarding the results given in Table 7
                        , it can be summarized that only small improvements can be achieved by running CPLEX with a time limit of 10 hours instead of 3 hours. Therefore, in a next step, we examine whether the usage of the presented heuristic approaches yields a better alternative (than simply increasing the run time limit).

Before we present the outcomes of heuristic solution procedures, the advantages of our new time planning procedure will be emphasized. All model formulations benefit from this temporal planning significantly. In what follows, we focus on the start-based formulation. A start-based MIP-model that considers each point in time 
                           
                              t
                              ∈
                              
                                 U
                                 i
                              
                              :
                              =
                              
                                 {
                                 
                                    ES
                                    i
                                 
                                 ,
                                 …
                                 ,
                                 
                                    LS
                                    i
                                 
                                 }
                              
                           
                         as potential start time of activity i ∈ V (and not set 
                           
                              
                                 W
                                 i
                              
                              ⊆
                              
                                 {
                                 
                                    ES
                                    i
                                 
                                 ,
                                 …
                                 ,
                                 
                                    LS
                                    i
                                 
                                 }
                              
                           
                        ) can be formulated by

                           
                              (34)
                              
                                 
                                    
                                       
                                       
                                          
                                             Minimize
                                             
                                             
                                             
                                                ∑
                                                
                                                   t
                                                   ∈
                                                   
                                                      U
                                                      
                                                         n
                                                         +
                                                         1
                                                      
                                                   
                                                
                                             
                                             t
                                             
                                             
                                                x
                                                
                                                   n
                                                   +
                                                   1
                                                   ,
                                                   t
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (35)
                              
                                 
                                    
                                       
                                       
                                          
                                             subject
                                             
                                             to
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   t
                                                   ∈
                                                   
                                                      U
                                                      i
                                                   
                                                
                                             
                                             
                                                x
                                                
                                                   i
                                                   t
                                                
                                             
                                             =
                                             1
                                          
                                       
                                       
                                       
                                          
                                             i
                                             ∈
                                             V
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (36)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   t
                                                   ∈
                                                   
                                                      U
                                                      i
                                                   
                                                
                                             
                                             
                                                x
                                                
                                                   i
                                                   t
                                                
                                             
                                             
                                                ∑
                                                
                                                   τ
                                                   =
                                                   t
                                                
                                                
                                                   t
                                                   +
                                                   
                                                      
                                                         ɛ
                                                      
                                                      i
                                                   
                                                   −
                                                   1
                                                
                                             
                                             
                                                C
                                                i
                                             
                                             
                                                (
                                                τ
                                                )
                                             
                                             =
                                             
                                                
                                                   ɛ
                                                
                                                i
                                             
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                             i
                                             ∈
                                             
                                                V
                                                r
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (37)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   t
                                                   ∈
                                                   
                                                      U
                                                      i
                                                   
                                                
                                             
                                             
                                                x
                                                
                                                   i
                                                   t
                                                
                                             
                                             
                                                ∑
                                                
                                                   τ
                                                   =
                                                   t
                                                
                                                
                                                   d
                                                   ¯
                                                
                                             
                                             
                                                C
                                                
                                                   i
                                                   j
                                                
                                             
                                             
                                                (
                                                τ
                                                )
                                             
                                             −
                                             
                                                ∑
                                                
                                                   t
                                                   ∈
                                                   
                                                      U
                                                      j
                                                   
                                                
                                             
                                             
                                                x
                                                
                                                   j
                                                   t
                                                
                                             
                                             
                                                ∑
                                                
                                                   τ
                                                   =
                                                   t
                                                
                                                
                                                   d
                                                   ¯
                                                
                                             
                                             
                                                C
                                                
                                                   i
                                                   j
                                                
                                             
                                             
                                                (
                                                τ
                                                )
                                             
                                             ≥
                                             
                                                δ
                                                
                                                   i
                                                   j
                                                
                                             
                                          
                                       
                                       
                                       
                                          
                                             〈
                                             i
                                             ,
                                             j
                                             〉
                                             ∈
                                             A
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (38)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                ∑
                                                
                                                   i
                                                   ∈
                                                   
                                                      V
                                                      r
                                                   
                                                
                                             
                                             
                                                r
                                                
                                                   i
                                                   k
                                                
                                             
                                             
                                                ∑
                                                
                                                   τ
                                                   =
                                                   max
                                                   (
                                                   
                                                      ES
                                                      i
                                                   
                                                   ,
                                                   
                                                      β
                                                      
                                                         i
                                                         t
                                                      
                                                   
                                                   +
                                                   1
                                                   )
                                                
                                                
                                                   min
                                                   (
                                                   
                                                      LS
                                                      i
                                                   
                                                   ,
                                                   t
                                                   )
                                                
                                             
                                             
                                                x
                                                
                                                   i
                                                   τ
                                                
                                             
                                             
                                             
                                                C
                                                
                                                   i
                                                   t
                                                   k
                                                
                                             
                                             ≤
                                             
                                                R
                                                k
                                             
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                             k
                                             ∈
                                             R
                                             ,
                                             t
                                             ∈
                                             
                                                T
                                                ′
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (39)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                x
                                                
                                                   i
                                                   t
                                                
                                             
                                             ∈
                                             
                                                {
                                                0
                                                ,
                                                1
                                                }
                                             
                                          
                                       
                                       
                                          
                                       
                                       
                                          
                                             i
                                             ∈
                                             V
                                             ,
                                             t
                                             ∈
                                             
                                                U
                                                i
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Binary decision variable xit
                        , 
                           
                              i
                              ∈
                              V
                              ,
                              t
                              ∈
                              {
                              E
                              
                                 S
                                 i
                              
                              ,
                              …
                              ,
                              
                                 LS
                                 i
                              
                              }
                              ,
                           
                         is equal to 1 if activity i starts at time t, and 0 otherwise. Equalities (35) guarantee that each activity receives precisely one start time. Constraints (36) ensure that non-interruptible activities are carried out without interruption and interruptible activities observe the start-up phase. Inequalities (37) and (38) make sure that the given temporal as well as resource constraints are satisfied.


                        Table 8
                         shows the results for instances with 50 activities obtained by CPLEX using model M4: (34)–(39). In contrast to the start-based model M1, where the results of the time planning procedure are used, the model M4 solves significant fewer instances to optimality within 3 hours. Additionally, the average run times are very high due to the larger number of binary decision variables and constraints; the model incorporates ∑
                           i ∈ V
                        |Ui
                        | variables as well as 
                           
                              O
                              (
                              |
                              V
                              
                                 |
                                 2
                              
                              +
                              
                                 ∑
                                 
                                    i
                                    ∈
                                    V
                                 
                              
                              |
                              
                                 U
                                 i
                              
                              |
                              +
                              |
                              R
                              ∥
                              
                                 T
                                 ′
                              
                              |
                              )
                           
                         constraints. In particular, M1 is able to solve 23 more instances to proven optimality and for 11 more instances the infeasibility could be shown.

The main differences between M4 and M1 are the underlying sets of possible start times, Ui
                         and Wi
                        ⊆Ui
                        , for activities i ∈ V. The time planning procedure reduces Ui
                         in two steps (starting from the initialization), so that Wi
                         is obtained. In the first step, the start-up phases of activities are considered, and in the second step, the lengths of the longest paths between all activities are computed using the triple algorithm (cf. Algorithm 1). Table 9
                         depicts the average sizes of sets Ui
                         and Wi
                         in the course of the reduction. Thereby, the results are specified for all test sets with 10, 20, 50, and 100 real activities. After the first and the second step, the average reductions [percent] with respect to the initial values are given in brackets.

The average size of sets Ui, i ∈ V, can be decreased by 33.1 percent through the start-up phase and by 34.1 percent through the combination of start-up phase and triple algorithm. Therefore, it makes sense to include only relevant decision variables and constraints in a model and omit the rest of irrelevant variables/constraints.

In order to solve large-scale problem instances with up to 100 activities, the described scatter search methodology can be used. We limited the number of generated schedules (i.e., iterations of the scatter search procedures) in order to obtain a stopping criterion that is independent of the computer platform. Therefore, we generated Λ ∈ {1000, 5000} schedules within our scatter search. Furthermore, we did a parameter tuning on all instances with 50 activities to find suitable values for b
                        1, b
                        2, t
                        1, and t
                        2. Regarding the RCPSP, Debels et al. (2006) applied a parameter tuning for their scatter search procedure and found out that parameter values 
                           
                              
                                 b
                                 1
                              
                              =
                              10
                              ,
                           
                        
                        
                           
                              
                                 b
                                 2
                              
                              =
                              5
                              ,
                           
                        
                        
                           
                              
                                 t
                                 1
                              
                              =
                              1.1
                              ,
                           
                         and 
                           
                              
                                 t
                                 2
                              
                              =
                              2.0
                           
                         lead to the best performance when 5000 schedules were generated. By first fixing 
                           
                              
                                 t
                                 1
                              
                              =
                              1.1
                           
                         and 
                           
                              
                                 t
                                 2
                              
                              =
                              2.0
                           
                         as well as trying different combinations for b
                        1 and b
                        2 (lines 1–4 in Table 10
                        ) we learned that combination 
                           
                              
                                 b
                                 1
                              
                              =
                              10
                              ,
                           
                        
                        
                           
                              
                                 b
                                 2
                              
                              =
                              5
                           
                         also performs best for all of our scatter search versions, since none of the other combinations could find feasible solutions for 153 instances (column “Feas”). The small distinctions in the average deviation from the critical path based lower bound (column “Dev[percent]”) show the robustness of the scatter search procedures. Next, we fixed 
                           
                              
                                 b
                                 1
                              
                              =
                              10
                              ,
                           
                        
                        
                           
                              
                                 b
                                 2
                              
                              =
                              5
                           
                         and tried different values for t
                        1 and t
                        2. Lines 5–7 in Table 10 show that the best parameter combination is 
                           
                              
                                 b
                                 1
                              
                              =
                              10
                              ,
                           
                        
                        
                           
                              
                                 b
                                 2
                              
                              =
                              5
                              ,
                           
                        
                        
                           
                              
                                 t
                                 1
                              
                              =
                              1.2
                              ,
                           
                         and 
                           
                              
                                 t
                                 2
                              
                              =
                              2.2
                           
                         when 5000 schedules are generated. Within the scatter search of Debels et al. (2006), smaller values for b
                        1 and b
                        2 (
                           
                              
                                 b
                                 1
                              
                              =
                              5
                              ,
                           
                        
                        
                           
                              
                                 b
                                 2
                              
                              =
                              3
                           
                        ) lead to the best performance when generating 1000 schedules. The last three lines in Table 10 depict that this behaviour cannot be identified for the scatter search procedures regarded in this paper. In Table 10 not all results are shown but the ones surrounding the parameter values for which our scatter search procedures perform best. In what follows, we fix 
                           
                              
                                 b
                                 1
                              
                              =
                              10
                              ,
                           
                        
                        
                           
                              
                                 b
                                 2
                              
                              =
                              5
                              ,
                           
                        
                        
                           
                              
                                 t
                                 1
                              
                              =
                              1.2
                              ,
                           
                         and 
                           
                              
                                 t
                                 2
                              
                              =
                              2.2
                           
                        . In addition, preliminary tests with the SSGS indicate that 
                           
                              
                                 u
                                 ¯
                              
                              =
                              10
                              ·
                              
                                 
                                    |
                                    V
                                    |
                                 
                                 r
                              
                           
                         is a good choice for the maximum number of unscheduling steps.

When dealing with optimization methods involving some stochasticity, like scatter search, it is interesting to analyze the efficiency of incorporated mechanisms (i.e., the choice of reference set and crossover operators), which hopefully let the algorithm generate near-optimal solutions. For that reason, we compared the results of the three versions of our scatter search not only to each other, but also to the results of the multi-start version of the SSGS (“Multi-Start”). Within Multi-Start, we generated Λ schedules, where the LCT-, the FCS-, and the random-rule are used in equal properties. Tables 11
                        –14
                        
                        
                         summarize the results. Each heuristic algorithm was executed five times for each instance and the best obtained value is applied. As the resource strength and the amount of interruptible activities do not influence the results of scatter search, a further distinction of RS-values and Ψ-values is not necessary. The first version of the scatter search procedure (two solutions are combined) is denoted by “Scatter 1”, the second version (three solutions are combined) is given by “Scatter 2”, and the third version (two and three solutions are combined) is named “Scatter 3”. The best solutions that could be obtained by any of the MIP-models (within the time limit of 3 hours) are summarized in row “MIP”. Column “Schedules” depicts the number of schedules that is generated within each of the heuristic algorithms and column “Feas” shows the number of instances for which a feasible solution could be found. The average deviations from the critical path based lower bounds (column “
                           
                              E
                              
                                 S
                                 
                                    n
                                    +
                                    1
                                 
                              
                           
                        ”) and from the best known solutions (column “BEST”) are presented, where only instances are considered for which a feasible solution could be found by the corresponding algorithm. Column “Avg CPU” gives the average computation times for the algorithms in seconds. The version of the scatter search procedure that performs best with respect to the average deviations from the critical path based lower bounds and from the best known solutions is given in bold type-face.


                        Table 11 shows the results for the instances with 10 real activities. For all instances, except one (two), the optimal solutions could be found by all three versions of the scatter search procedure when 5000 (1000) schedules are generated. The average deviations from the critical path based lower bounds and from the best known solutions are equal for all scatter search versions. The average deviation of MIP from the best known solutions is 0 percent, since all feasible instances with 10 real activities are solved to optimality. For instances with 20 real activities (see Table 12) again all three versions of the scatter search obtain very good results. The results of Scatter 1 are slightly better than the results of the other two versions. The results of Multi-Start are also competitive.


                        Tables 13 and 14 show the results for instances with 50 and 100 real activities, respectively. Since the average deviations from the best known solutions increase in contrast to Tables 11 and 12 when regarding 1000 and 5000 schedules, we ran the three scatter search versions also with 
                           
                              Λ
                              =
                              50
                              ,
                              000
                           
                         schedules as stopping criterion, keeping the parameter values as before. For instances with 50 activities, Scatter 2 obtains the best results (lowest average deviations of the different scatter search versions). If more schedules are generated, the number of feasible solutions increases for all heuristic methods and the average deviations from the best known solutions decreases. None of the heuristic methods found feasible solutions for all instances for which MIP found a feasible solution. When regarding instances with 100 real activities (see Table 14), Scatter 3 gains the best results. Now, all of the heuristic solution procedures perform much better than MIP, i.e., more feasible solutions are obtained and the average deviations from the critical path based lower bounds as well as from the best known solutions are lower even if only 1000 or 5000 schedules are generated.

With regard to Tables 11–14, it can be seen that all three versions of our scatter search procedure provide promising results and that no version dominates all over. Additionally, scatter search outperforms Multi-Start, and increasing the number of generated schedules within each of the scatter search procedures improves the results, i.e., the procedures do not converge to a local optimum too early. Therefore, scatter search is an appropriate metaheuristic to solve large practical instances of the problem under consideration.

In order to show the robustness of our scatter search procedures, we investigate the average, maximum, minimum, and standard deviation from the average of the five obtained solution values for each instance. Since the average standard deviation for test sets with 10 and 20 real activities is always less than 0.5, we concentrate on test sets with 50 and 100 real activities. Table 15
                         summarizes the results, where columns 3–5 give the sum of the average, best, and worst objective function values and the last column indicates the average standard deviation for each scatter search procedure with 1000, 5000, and 50,000 generated schedules. Columns 3–5 show that there are no significant deviations in the objective function values for the 5 runs. Note that the values in columns 3–6 may increase comparing results for 1000, 5000, and 50,000 schedules, because more solutions might be found. This behaviour can be seen, e.g., when regarding Scatter 1 with 1000 and 5000 generated schedules, respectively, 
                           
                              
                                 |
                              
                              
                                 V
                                 r
                              
                              
                                 |
                                 =
                                 100
                                 ,
                              
                           
                         and “
                           ⌀
                         Std dev”. Since the average standard deviations are small for all scatter search procedures, we can say that the dependence on the stochastic elements is quite low and the performance of the procedures is robust.

@&#CONCLUSIONS@&#

In this paper, the resource-constrained project scheduling problem subject to general temporal as well as calendar constraints is treated. In practice, calendars have to be taken into account in order to incorporate that resources, like workers or tools, are not available during breaks, e.g., weekends or holidays. The problem is motivated by several real-life conditions that can be modeled through calendarization. After describing the problem formally, we presented a novel time planning procedure that finds the feasible start times of activities and the longest paths between start times of activities (absolute minimum time lags). The procedure is used in MIP-formulations and solution algorithms. In order to solve the RCPSP/max-cal, either exactly or heuristically, three binary linear model formulations, a priority-rule method, as well as three versions of a scatter search algorithm are presented.

The results of our performance analysis show that many decision variables in MIP-models can be eliminated and run times can be reduced if the time planning procedure is executed in a preprocessing step. In particular, both the start-based and the changeover-based model perform very well; they are able to solve most of the hard instances with 50 activities and 
                        
                           RS
                           =
                           0.1
                        
                     . The execution-based model is found to be of little value as alternative solution approach. In addition, we introduced a priority-rule method that essentially improves existing priority-rule methods for the RCPSP/max-cal. Existing methods are based on determining the earliest and latest start times for all activities not yet scheduled in each iteration. In contrast, our priority-rule method uses the longest path lengths between activities, which are determined in the time planning procedure, in order to update earliest and latest start times. The priority-rule method is extended to a multi-start procedure. Furthermore, three different versions of a scatter search algorithm are developed. Computational results reveal that scatter search is a good choice to solve the problem under consideration, since it finds optimal solutions for nearly all small instances (10 and 20 activities, respectively), it obtains good results in comparison to MIP-models, and it performs better than the priority-rule method.

We believe that the recovery of the RCPSP/max-cal and the introduction of new problem instances can be a starting point for other researchers designing exact and heuristic solution procedures. The best known exact solution method for the RCPSP/max is based on lazy clause generation, which combines constraint programming and boolean satisfiability solving (Schutt, Feydy, Stuckey, & Wallace, 2013, 2015). Therefore, it seems to be promising to consider lazy clause generation in order to solve RCPSP/max-cal instances. Finally, the study of different objectives like resource leveling or resource investment in combination with calendarization is an interesting topic.

@&#ACKNOWLEDGEMENTS@&#

The benchmarks and results, i.e., the best known lower and upper bounds, for the RCPSP/max-cal presented herein may be downloaded from our webpage http://www.wiwi.tu-clausthal.de/abteilungen/unternehmensforschung/forschung/.

@&#REFERENCES@&#

