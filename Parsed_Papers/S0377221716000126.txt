@&#MAIN-TITLE@&#Effective truckload dispatch decision methods with incomplete advance load information

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We study advance load information (ALI) in dynamic pick-up and delivery settings.


                        
                        
                           
                           The study targets small full truckload companies who make up most of the industry.


                        
                        
                           
                           We propose a policy nearing ratios of 90 percent of the static optimal solution's profits.


                        
                        
                           
                           We quantify increases in the ratio if the policy is enhanced by scenario sampling.


                        
                        
                           
                           Increases average 6 percentage points with one day ALI and fall with more ALI.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Transportation

Incomplete advance load information

Multiple scenario approach

Mixed Integer programming

Optimization

@&#ABSTRACT@&#


               
               
                  We investigate the following question of relevance to truckload dispatchers striving for profitable decisions in the context of dynamic pick-up and delivery problems: ``since not all future pick-up/delivery requests are known with certainty (i.e., advance load information (ALI) is incomplete), how effective are alternative methods for guiding those decisions?'' We propose a simple intuitive policy and integrate it into a new two-index mixed integer programming formulation, which we implement using the rolling horizon approach. On average, in one of the practical transportation network settings studied, the proposed policy can, with just second-day ALI, yield an optimality ratio equal to almost 90 percent of profits in the static optimal solution (i.e., the solution with asymptotically complete ALI). We also observe from studying the policy that second-day load information is essential when a carrier operates in a large service area. We enhance the proposed policy by adopting the idea of a multiple scenario approach. With only one-day load information, the enhanced policy improves the ratio of optimality by an average of 6 percentage points. That improvement declines with more ALI. In comparison to other dispatching methods, our proposed policy and the enhanced version we developed were found to be very competitive in terms of solution quality and computational efficiency.
               
            

@&#INTRODUCTION@&#

Two issues loom large for carriers in the truckload industry as they undertake efforts to assure prosperity and survival in the ongoing economic recession: (i) asset repositioning and (ii) driver turnover. Asset repositioning, which has been studied by, e.g., Crainic (2000) and Wieberneit (2008), is due to natural characteristics of truckload transportation networks such as demand dynamism and network imbalance between supply and demand. Ergun, Kuyzu, and Savelsbergh (2007a) reports that empty movement of trucks costs U.S. carriers nearly 165 billion dollars annually. Based on the American Trucking Association (ATA) (2013), the ratio of empty to total mileage is usually higher for small carriers (22 percent) with a sparser network of lanes than larger ones with a more sophisticated lane network (17 percent).

The issue of driver turnover is strongly influenced by drivers’ dissatisfaction with work schedules requiring overly long periods away from home. Studies confirming this fact include Rodriguez and Griffin (1990), Shaw, Delery, Jenkins, and Gupta (1998), Keller (2002), and Suzuki, Crum, and Pautsch (2009). The driver turnover problem is significant (according to the Council of Supply Chain Management Professionals (2006), it can reach 130 percent in a year) and costly: the replacement cost of a driver (e.g., including training and loss of experience) is estimated to be between $2200 and over $20,000 with an average of $8000 (e.g., Rodriguez, Kosir, Lantz, Griffen, & Glatt, 2000). Given the size of the U.S. trucking industry, driver turnover translates to approximately three billion dollars a year (Suzuki et al., 2009).

To address these issues, a commonly used strategy is collaborative transportation (CT); e.g., CT networks such as Nistevo (www.nistevo.com) and Transplace (www.transplace.com). In CT, logistics participants (i.e., shippers/consignees and carriers) collaborate to improve transportation performance; e.g., reduce total transportation costs and driver turnover and increase truck utilization (Ergun, Kuyzu, & Savelsbergh, 2007b). Collaboration could be among transportation clients (e.g., Ergun et al., 2007a), among carriers (e.g., Özener, Ergun, & Savelsbergh, 2011), or between client(s) and carrier(s) (e.g., Bookbinder and Lynn 1986; Tjokroamidjojo, Kutanoglu, & Taylor, 2006; Zolfagharinia and Haughton, 2012) or all the above scenarios.

The focus of this study is the collaboration between a carrier and its clients. One of the least costly methods when freight transportation service clients and carriers collaborate with each other is to communicate timely load information (from clients to carriers). Although sharing advance load information (ALI) can improve the carrier's performance by expanding its knowledge window (KW) into the future (Powell, 1996; Tjokroamidjojo et al., 2006), there is always uncertainty after the KW (Caplice & Sheffi, 2003). In the absence of exact information about future loads beyond the knowledge window, the dispatcher's range of decisions (load acceptance/rejection, load sequencing, etc.) is influenced by the matter of where the truck will be positioned for serving future (unknown) loads. Consider two extreme options open to the dispatcher in deciding which known loads the truck should be assigned to:

                        
                           i.
                           the conservative policy of preferring loads that take the truck close to its home; i.e., to avoid large empty truck repositioning costs to the home base (called deadheading costs in this study) when the truck must eventually return deadhead to the home base.

the more optimistic policy of making truck–load assignments with greater risk of large deadheading costs in the hope that those assignments will put the truck in a better position to access highly profitable future (unknown) loads.

From the above, it is clear that in a given context (load density, radius of service, etc.), and for a given truck at a given instance of time (e.g., current and future truck location vis-à-vis its home base), the following is true: a significant factor in a dispatching policy is the deadhead cost. The dispatcher's dilemma is that the true deadhead costs can be known only a posteriori because it is only later that the exact information such as the locations, pick-up time windows, and trip lengths of future loads becomes known. To tackle the dilemma, we attempt getting a priori signal of the efficacy of a dispatching policy by proposing the concept of a deadhead coefficient Θ (0 ≤ Θ ≤ 1). In essence, the coefficient is only a signal of the extent to which the chosen dispatching policy might affect profits because at the time of decision making, the dispatcher, while knowing the revenue of serving loads and some of the cost components, has no information beyond the last known load to be served. Thus, the dispatcher's decision is directly influenced by the conservatism level of his/her policy, which can be portrayed by what we label as the Θ
                     
                        -dependent profit
                      estimate (π
                     
                        Θ
                     ). We calculate this estimate as:

                        
                           •
                           
                              π
                              
                                 Θ
                              = total revenue − total known cost (including loaded movement and empty repositioning, dwelling, and lateness cost) − Θ× (travel cost from the destination of the last load in the sequence to the home base/depot).

In the above formulation, the dwell cost is calculated based on the time that a vehicle spends idle at the customers’ locations and the penalty (waiting cost) per unit time. And, the lateness is calculated if a load is served after its availability. The basic intuition of the deadhead coefficient is as follows. First, consider using large Θ values for potential end of sequence loads. Those Θ values are associated with more conservative policies in that they raise the attractiveness of such loads with destinations close to the home base. That is, based on the last term in the above expression π
                     
                        Θ
                     , those loads are predicted to have a smaller negative financial impact so they are more likely to be selected over alternatives that are distant from the home base. Conversely, small Θ values lower the negative predicted financial effect of accepting end-of-sequence loads with destinations that are distant from the home base. In other words, the dispatcher will lean towards selecting loads that, despite requiring the truck to be further from the home base, have high values for the excess of revenue over known cost.

A small numerical example is presented in the next section to further clarify the above observations and the process of using the deadhead coefficient to tackle the dispatcher's dilemma of unavailable exact information (i.e., uncertainty) about future loads. As the example illustrates, different Θ values can yield different load selection decisions, and thereby may result in different values of profit. Thus, an obvious question of managerial interest is which Θ value yields the best attainable profit in a given transportation context (e.g., load density, radius of service, trip length, and time windows). Addressing this question is one of this paper's major contributions.

In this study, we focus on three key points. We first develop a flexible dispatching mixed integer program (MIP) model that can incorporate important operational details of trucking companies (e.g., current location of trucks, number of hours that a truck is away from home, previous commitments) to make profitable decisions given different levels of advance load information. Second, a simple policy (based on the deadhead coefficient) is proposed to help dispatchers make load acceptance decisions in dynamic environments. The proposed deadhead coefficient policy is tuned based on different transportation network settings. Finally, the proposed policy is enhanced to improve the solution quality of the dynamic problem at the expense of a longer running time. To achieve the goals of this research, we briefly introduce the idea of the simple policy with one small example in Section 2. Section 3 is devoted to reviewing the related literature for positioning this study among the existing works and highlighting its novelty. In Section 4, the model assumptions, notations, and parameters are defined and the conceptual model is formulated as a mixed integer program. Section 5 explains how experiments are designed for conducting a comprehensive simulation study. In Section 6, the proposed policy is evaluated through simulation results. In Section 7, the proposed policy will be enhanced by applying sample scenario hedging heuristic proposed by Hvattum, Løkketangen, and Laporte (2006) for stochastic dynamic vehicle routing problems. We also examine our proposed policy and its enhanced version against two other dispatching methods. Conclusions and future research directions are provided at the end.

For ease of exposition, we use the case of a single-truck carrier to illustrate how the proposed policy works with different Θ values. An underlying logic of the policy is that trucks not scheduled to serve any loads return to the depot. This policy is intuitive if the dispatcher has access to advance load information (e.g., knowing that there is no request available for the rest of the day). The logic is also sound because the average repositioning is typically shorter from the depot (if it is located at the center) and dwelling cost is much lower at the depot. This is because there is no extra facility usage cost for, say, a driver to dwell at his/her home or at accommodations provided by the carrier (e.g., Challenger Motor Freight's well-equipped rest facility for drivers at its Cambridge depot, more detail about this trucking company can be found at its official website: http://www.challenger.com). We label this policy as 
                        Deadhead Coefficient Policy
                      because its success depends on selecting a proper Θ value. We will also refer to this as the Pure-Θ Policy.

In our illustrative example, the truck is idle at the depot (the driver's home base) at the beginning of the planning horizon, the dispatcher's knowledge window is set to 2 days (48hours), and system information is updated daily. The truck earns $130/hour for serving a load while incurring $60/hour when moving either empty or loaded. Without loss of the generality, dwell and lateness costs are not taken into account to make the example simple enough to follow.


                     Fig. 1
                      depicts how loads are distributed over time and revealed to the dispatcher. In Fig. 1a, the information of loads A, B, C, and D is available at the beginning of day 1 while load E will be realized when the system information is updated at the start of day 2 (Fig. 1b). Fig. 2
                     a represents a 7-city transportation network showing all travelling times that are relevant to the example (depot-city and inter-city). Load E is also shown in Fig. 2a, but it is only known on the second day.

To make this example more manageable, assume that the pick-up times of loads A and B (similarly loads C and D) are so close to each other that serving both of them is not feasible (i.e., applying time windows constraints). Also, a load that is available after another load cannot be served before it (i.e., load C cannot be served before A). Thus, given these restrictions, the dispatcher can only choose from nine possible alternatives at τ = 0. A maximum of two loads can be selected while rejecting all new loads is considered as a valid choice. Table 1
                      shows each alternative (including the sequence of loads and cities), travel time components, the ratio of weighted empty travelling time to the depot (WETTD) from the delivery location of last load, and Θ-dependent profit (π
                     
                        Θ
                     ) for two Θ values. To briefly point out how each entry of this table was calculated, we consider the A–C sequence. In order to serve this load sequence, the truck departs the depot and visits cities 3, 1, and 2, respectively resulting in 22 hours of total loaded movement. The empty movement is 10hours (traveling from the depot to city 3, origin of load A). WETTD is the product of the Θ value and traveling time from the delivery location of the last load (city 2) to the depot. Given the formula in Section 1, 
                        
                           
                              π
                              
                                 0.8
                              
                           
                           =
                           130
                           
                              (
                              22
                              )
                           
                           −
                           60
                           
                              (
                              22
                              +
                              10
                              )
                           
                           −
                           60
                           
                              (
                              0.8
                              ×
                              5
                              )
                           
                           =
                           $
                           700
                        
                     . A similar approach is used to find π
                     0.2 by modifying the Θ value. As we can see from Table 1, different Θ values not only impact the selection of the last load of the sequence but also can change the whole sequence (i.e., sequences B–D and A–C are selected with 
                        
                           Θ
                           =
                           0.2
                        
                      and 0.8, respectively). A conservative policy (
                        
                           Θ
                           =
                           0.8
                        
                     ) results in truck repositioning at city 2, which is closer to the depot compared to a more optimistic policy (
                        
                           Θ
                           =
                           0.2
                        
                     ) in which the truck will end up at city 7 after serving known loads.

The impact of the Θ choice can be further elaborated by moving to the next decision epoch. With 
                        
                           Θ
                           =
                           0.8
                        
                     , the truck will be at city 1 at the beginning of day 2 according to the previously designed plan to serve the A–C sequence (Fig. 2b). With 
                        
                           Θ
                           =
                           0.8
                        
                     , the truck will be at city 1 at the beginning of day 2 according to the previously designed plan to serve the A–C sequence (Fig. 2b). It is important to note that the truck arrives in city 1 at timeτ
                     =22 (hours), but it has to wait for load C to become available (refer to Fig. 1). Given the current commitment (to serve load C) and the truck location, there are only two alternatives whether to accept the new load or not. Note that loads B and D are not taken into account because they were rejected earlier. According to the computational details of Table 2
                      (the last two cells of π
                     Θ), the acceptance of a new load (load E) is not recommended. However, following a similar approach, the policy with 
                        
                           Θ
                           =
                           0.2
                        
                      will schedule load E after load D.

Having a closer look at the behavior of 
                        Deadhead Coefficient Policy
                      in load selections at two decision epochs, two key factors are observed. First, the choice of Θ has direct impact on one of the cost components (which is depicted by the ratio of WETTD to all other movements). This ratio is remarkable and influential with practical advance load information (e.g., 2 days). As an example from Table 1, the ratio for the load sequence B–D is 12 percent if 
                        
                           Θ
                           =
                           0.2
                        
                      but rises to a very substantial 48 percent if 
                        
                           Θ
                           =
                           0.8
                        
                     . Second, this impact is reinforced by an inherent feature of truckload transportation: economy of scope defined in Caplice (2007) as strong cost interdependency between loads (because a truck should be moved from the delivery location of one load to the pickup location of the next one), economy of scope is commonly acknowledged in works on truckload transportation (see, e.g., Berger & Bierwirth, 2010; Chang, 2009; Özener et al., 2011). In our illustrative example, this dependency, which translates to subsequent decisions being affected by earlier load selection decision, is highlighted by the following fact: selecting the load combination B–D (using 
                        
                           Θ
                           =
                           0.2
                        
                     ) leads the subsequent decision to add load E to that combination but, on the other hand, selecting the A–C combination (using 
                        
                           Θ
                           =
                           0.8
                        
                     ) renders load E as an unprofitable addition. As mentioned earlier, our goal is to find a proper Θ value to aid carriers in improving profit over the planning horizon. The impact of Θ on a carrier's profit will be illustrated through extensive numerical experiments.

@&#LITERATURE REVIEW@&#

The present work belongs to two streams of literature: one on full truckload transportation and the other on dynamic vehicle routing problems (DVRPs). Table 3
                      summarizes the relevant studies. Since the problem falls under the category of full truckload transportation, we first position our work in that literature and highlight its novelty. Then, we briefly review the related DVRPs to adopt a solution concept to handle the proposed problem.

Our proposed model is a comprehensive Dynamic Pickup and Delivery Full Truckload Problem (DPDFLP) in which several operational factors in the truckload industry are taken into account. To highlight the novelty of this study, we carefully point out the limitations of relevant truckload studies summarized in Table 3. Although all of these works addressed truckload problems, the key factor that remarkably influences our choice of modeling approach is tour capability (i.e., continuous truckload routes). This becomes less important when the average time of serving a load is very long (between 2 and 4 days) which is the case for large trucking companies working in nationwide or international markets. Powel and colleagues investigated this type of problem, which is simplified to different versions of assignment problems.


                     Powell (1987) extended his previous work (Powell, 1986) on the full truckload transportation problem by presenting the network flow problem. Similar to the former study, each node represents a region at a particular time. Following the same approach, Powell, Sheffi, Nickerson, Butterbaugh, and Atherton (1988) proposed a model called LOADMAP which combines the real-time load assignment with sophisticated future forecasts to maximize the truckload profit and service level. In another work, Powell (1996) proposed a stochastic dynamic load assignment problem formulation. He showed that when some stochastic information about future demand is available, the proposed model outperforms the deterministic one. Powell, Towns, and Marar (2000) took a comprehensive simulation-based approach for tackling dynamic load assignment problems. The approach was to design an offline algorithm for the static version and put it into practice for a dynamic problem when demands were gradually realized as the time elapses. The result suggested that the greedy approach can be superior in the long run compared to the optimal myopic solution with the uncertainty in demands and travel times. Gregory and Powell (2002) modeled a truckload problem using a stochastic dynamic resource allocation approach. They used adaptive dynamic programming with a non-linear approximate function to solve the problem. The result showed that the algorithm based on the proposed approximation produced a near-optimum solution to deterministic problems. Finally, the work by Simao et al. (2009) motivated by Schneider National Inc. (the largest truckload motor carrier in the United States) is the largest scale problem in the literature with over 6000 drivers. Their approximate dynamic programming model handled a great level of detail.

The other stream of relevant full truckload research focuses on smaller trucking companies that view tour capability as essential. These studies used mixed integer programming to formulate the problem and a rolling horizon approach for implementation (e.g., Gronalt, Hartl, & Reimann, 2003; Tjokroamidjojo et al., 2006; Yang, Jaillet, & Mahmassani, 1998
                     , 2004). The defined problem was the same in the studies by Yang et al. (1998, 2004). The objective was to minimize the total cost (including delay, empty movement, and load rejection costs). They used their models to develop tours with the capability of diverting trucks based on the arrival of new information into the system. As defined by Regan, Mahmassani, and Jaillet (1995), diversion is a model capability that can divert a vehicle moving empty toward a pickup point to take another request. However, it is not allowed to divert loaded-moving vehicles while updating the decision. Ichoua, Gendreau, and Potvin (2006) estimated that diversion in dynamic vehicle routing problems improved the system performance by up to 4.3 percent despite its operational difficulty. However, dwelling cost, which is one of the important components of cost structure, was not part of their model. Another limitation of that work is that trucks moved continuously between different cities, which means that a truck may never come back to its home base.

Unlike the previous studies, the work of Gronalt et al. (2003) addressed tour length to force trucks to return home after a predefined interval. The approach was based on generating tours with a very restrictive assumption that there is no limit on the number of available trucks. Their model did not capture the cost of delay and dwelling in designing tours. The proposed policy was also very restrictive in the sense that no loads could be rejected and no trucks could be diverted.


                     Tjokroamidjojo et al. (2006) addressed a full truckload pickup and delivery problem in which dwelling, empty and loaded movements, and delay costs were taken into account. They also investigated how much a trucking company can reduce cost by obtaining additional information further in advance. However, their proposed mathematical model was subject to some limitations. For example, there was no option to reject an upcoming load or divert a truck when new information entered the system. Moreover, similar to Yang et al. (1998, 2004), there was no home base for trucks. Addressing the limitation of related studies, the contributions of this paper are fourfold:

                        
                           •
                           Proposing a new two-index mixed integer programming algorithm which is more efficient compared to three-index formulations in literature (e.g., Keskinocak & Tayur,1998; Tjokroamidjojo et al., 2006). The efficiency of the MIP model is improved by incorporating preprocessing functions, which uses characteristics of the problem.

Among the studies with tour capability, this is the first study of its kind that explicitly considers the notion of a home base (depot) for trucks in designing dispatching rules. This is essential from humanity-related considerations because drivers need to come back home to visit their families regularly. Models not addressing this issue overestimate the capacity of the transportation network. Moreover, the proposed model can handle load rejection, truck diversion, and advance load information.

Designing a simple and intuitive policy that can help carriers to improve their razor-thin profit provided by the transportation network characteristics.

The sampling method concept is adopted from the literature of DVRPs to improve our proposed Pure-Θ Policy. This Pure-Θ Policy and our proposed enhanced version of it are examined against two other dispatching methods.

The last contribution of this work requires us to review the second stream of related literature. As seen from Table 3, modeling the problem as dynamic programming and applying Markov decision processes are used for single DVRPs because they suffer from the curse of dimensionality (Thomas, 2007; Thomas & White, 2004). Approximate dynamic programming is an effective method to overcome the curse of dimensionality in dynamic programming (Powell, Bouzaïene-Ayari, & Simão, 2007). Despite successful implementation of approximate dynamic programming by Schmid (2012), we are not aware of any implementation of the method for a problem with tour making capabilities. The majority of research studies use sampling approach (multiple scenario generation) to solve DVRPs. These studies will be discussed in Section 7 before applying the solution procedure.

As mentioned earlier, the problem under study is called dynamic pickup and delivery with full truckload (DPDFL) consisting of a fixed fleet of trucks in the transportation network. The customers’ demands (loads) are known gradually as time elapses. We retain the literature's standard assumption that each trip is executed without a break. Loads and trucks have their own attributes. The truck attributes are home base, hours away from home, the maximum allowed hours away from home, determined by a carrier or federal department of transportation (for drivers), and the current location. The load attributes are the earliest and latest pickup time, the maximum permissible delay time, the pickup location and the delivery location. Taking all the attributes of loads and trucks into account, the optimal DPDFL solution specifies the carrier's profit maximizing decisions concerning (i) whether to accept or reject new load(s), and (ii) the sequence of accepted loads that each truck will serve. The major assumptions are as follows:

                        
                           •
                           The shipment cost is a linear function of travel time which itself is a linear function of distance. Similar to what is common in the literature (e.g., Powell, 1996; Powell et al., 1988), the gained revenue is proportional to the trip length, i.e., the distance/time between pickup and delivery points.

The length of each tour (i.e., tour time span) has to be less than the maximum hours that a driver can be away from home.

Each truck can handle one load at a time (i.e., full truckload transportation).

Given long haul transportation, loading and unloading times are a negligible part of the total time to serve a load and can therefore be ignored.

There is a hard time-window to serve a load. Thus, a load will be rejected if it cannot be served within the predefined time window.

The depot is the home base of drivers. A truck is returned to the depot if it is not scheduled to serve any loads at that decision epoch. This is a common practice if the dispatcher has access to advance load information (e.g., knowing that there is no request arriving for the rest of the day). The logic is simple because the average repositioning is typically shorter from the depot (if it is located at the center) and dwelling cost is negligible at the driver's home base.

As the model under consideration is a dynamic one, we need to choose an appropriate strategy to handle it in a dynamic environment. As implied from Table 3, the common approach for the problems with the tour-making capability feature is to design a mathematical model for the static version of the problem and implement it in the dynamic context using a rolling horizon approach. For the dynamic implementation, the static version of the model should be run at different decision epochs. Thus, it is crucial that the designed model be comprehensive and flexible enough to consider current loads and trucks attributes at the time of decision making. It is also worthwhile to note that this strategy is equivalent to solving a series of static problems. Although there is no guarantee that solving a series of sub-problems results in higher solution quality, it has been shown that this approach still produces higher quality solutions compared to simple heuristic rules, e.g., assigning the new load to a truck with the lowest marginal cost (Regan et al., 1998; Yang et al., 1998, 2004).

A rolling horizon approach has been widely used in inventory management and production planning (e.g., Bookbinder and Hng, 1986; Anupindi, Morton, & Pentico, 1996; Cheevaprawatdomrong & Smith, 2004). In this approach, three time fences (intervals) are usually defined; namely forecasting interval, re-planning interval and freezing interval. Forecasting interval shows how far in advance information (either deterministic or stochastic) should be included in decision making (Kern and Wei, 1996). The re-planning interval refers to a time interval where modification of previous decision(s) is allowed, whereas no change is permissible during the freezing interval. Interested readers in this area may refer to an extensive review paper by Chand, Hsu, and Sethi (2002).

Using this common dynamic strategy, we formulate a flexible mathematical model for the static version of the problem and re-run it in predefined time intervals as new information arrives. The forecasting interval is equivalent to how far in advance loads information is communicated from transportation clients to a carrier. As mentioned in the literature review, reassignment, re-sequencing, and empty truck diversions are incorporated in our modeling. This means that the designed plan is only frozen for one interval and can be modified in the subsequent decision epochs. Having the dynamic strategy defined, we need to briefly review the common mathematical models. This helps us to use an appropriate method to design an efficient mathematical model.

There are two common ways to formulate a DPDFL problem. The first one uses an extended version of the assignment problem (e.g., assignment with timing constraints) to exploit the problem's characteristics. This is the most common approach in the literature (see Powell et al., 2000; Tjokroamidjojo et al., 2006; Yang et al., 1998,2004). In the second one, the problem can be formulated as a variant of capacitated arc routing problems (CARP) in which each directed arc represents one load with a designated origin and destination. A recent work by Liu, Jiang, Liu, and Chen (2010) and Liu, Jiang, Fung, Chen, and Liu (2010) proposed an integer-programming model to formulate CARP for truckload industries and a quality lower bound. They also developed a heuristic method based on graph theory to solve the proposed model since the exact method is incapable of handling large problem instances. However, they captured neither time windows nor the fleet size of the transportation network for fulfilling demands.

Comparing the different approaches in the literature, the former is shown to be more promising to use because the dimensionality of the model grows quickly in the latter case. Among the related studies, Tjokroamidjojo et al. (2006) used an effective approach to handle DPDFL. The utilized approach consists of two parts, a preprocessing part for time-based restrictions and an assignment problem afterwards. Since time-window restrictions are explicitly handled outside the mathematical model, the approach performs well by reducing the number of constraints and decision variables. Although our approach is similar to Tjokroamidjojo et al. (2006), we must handle some of the time-based constraints inside the MIP because most of the load and truck attributes are determined after solving the model. After developing the model, with the aid of a simple example, we point out the issue of handing all time-based constraints outside the mathematical model.

To formulate the proposed model, notations, parameters, and decision variables are presented below.

                           Notation


                           
                              I
                           
                           
                              set of all available trucks, indexed by i, u
                              

set of loads, indexed by j, k, r
                              

home base of trucks (i.e., the depot)

departure location of load j
                              

destination location of load j
                              

the earliest pick-up time of load j
                              

maximum permissible delay for serving load j
                              

travel time between any two points in the service area. Traveling time between two locations can be described as function of distance

maximum hours that a driver can be away from home

maximum hours left for truck i to be away from its home at the decision epoch

the revenue earned per hour while moving loads

the traveling cost (empty or loaded) per hour of driving

the penalty cost per hour for a truck being idle at any load location (dwelling cost).

the penalty cost per hour for late pickup

time at the decision epoch

a very large positive number.

if load k is served directly by truck i at the first stop, 1 otherwise 0.

if load k is served by truck i through its own depot at the first stop, 1 otherwise 0.

if load k is served immediately after load j, 1 otherwise 0.

if load k is served through the depot after load j, 1 otherwise 0.

if load k is served by truck i after another load, 1 otherwise 0.

arrival time at the pickup location of load k
                              

the remaining allowable time for truck i when it arrives at the pickup location of load k.
                              

The real-time location of each truck is important at each decision epoch because of the problem's dynamic nature. If the current location of truck i is denoted with η
                        i, D(ηi,q) shows the traveling time from the current location of truck i to the location q. If the truck cannot get to the origin location of load j at time αj
                        , it can still pickup that load only if its maximum permissible delay (Uj
                        ) is not violated. However, late pickup is penalized by $l/hour. Thus, it is important to note that, as it implies, lateness is computed with regards to the load's earliest availability. This is a common practice for serving more time-sensitive loads. For example, Logikor Company (a Canadian low asset based third-party logistics provider, http://www.logikor.com) uses a similar approach for delivery of commodities to manufacturing plants operating based on a Just-in-Time Philosophy).

Dwell time is the waiting time experienced by a driver/truck if the truck must wait at the pickup location (i.e., it reaches the pickup location of load j earlier than αj
                        ). Although we consider the same dwell cost for all clients’ locations in this study, the model is flexible enough to address varying dwelling costs across client locations. Still, our study does reflect that dwelling costs at the truck/driver home base is significantly smaller than at client locations. This is because there is no extra facility usage cost for, say, a driver to dwell at his/her home or at accommodations provided by the carrier. This creates an opportunity for trucking companies in dispatching decisions since they can check the feasibility and economical impacts of trucks spending idle time at the depot rather than waiting at the clients’ location. For example, if a specific load will be available the next 2 days and a truck is close to the depot, the truck may be sent first to the depot and then scheduled for dispatching at an appropriate time (i.e., serving the load through the depot). Even though there could be some economical reasons to schedule a load through the depot, we are required to take an important fact into account; that drivers should be returned to their home base (the depot) at some point. That is why decision variables have been introduced to consider the option of serving a load through the depot.

We also consider a single cost parameter for traveling empty or loaded. This is due to the number of load-independent factors that are present regardless of travelling empty or full. There are certain costs that a carrier still incurs that are not overly influenced by the amount of freight being transported. For example, factors such as driver wages, equipment depreciation, administration, compliance and insurance, act as a fixed cost that must be incurred. These costs typically compromise 70 percent of the total cost of driving a truck, while the remaining 30 percent is typically fuel related. Fuel is a unique cost of its own due to the fact that the associated costs do not vary dramatically whether driving empty or full, specifically, an empty truck requires at least three-fourths of the fuel of a fully loaded truck. This is due to cargo-independent factors such as aerodynamic drag, engine losses, and the mass of the empty truck itself (American Transportation Research Institute, 2014; Transport Canada, 2005). Interestingly, tire wear is another cost factor that actually costs more when a truck is driven empty (American Trucking Associations, 2011; Trucking Information, 2009). The above-mentioned factors play a significant role when determining the cost of moving empty or loaded and therefore the operating costs (either empty/loaded) remain fairly stable over the course of movement (Sheffi, 2012).

Since the model is flexible enough to allow reassignment and re-sequencing of loads and diversion of empty moving trucks, the decision made at the previous decision epoch can be modified at the current decision epoch for all the loads which have not received service yet. To acknowledge this assumption, we first define TST(i) as the status of truck i at the decision epoch τ. TST(i) can take three values; 1, −1, 0 meaning truck i is moving loaded, empty (either moving or idle at any location other than the depot), or sitting idle at its own depot, respectively. If truck i is serving load j at the decision epoch τ, it will be available at the later time, 
                           
                              τ
                              +
                              D
                              (
                              
                                 
                                    η
                                    i
                                 
                                 ,
                                 
                                    b
                                    j
                                 
                              
                              )
                           
                         at the destination location of load j (i.e., the diversion is not allowed if a truck is moving loaded). If a truck is idle or empty, TST(i) ≤ 0, then truck i is available for scheduling at time τ at its current location. There is also a need to keep track of load status which is denoted with LST(j). There are five possible load statuses. If load j is being served at the decision epoch, LST(j) is equal to 2. The loads which are accepted, but not yet serviced, (i.e., LST(j) = 1) enter the model for possible reassigning and/or re-sequencing. In order to distinguish new loads (i.e., the loads for which acceptance is not finalized yet) from the current ones (i.e., the loads being served, LST(j) = 2, or waiting to be served, LST(j) = 1), their statuses will be LST(j) = 3. The last two load statuses are defined to ease collecting statistics at the end. The loads which have already been rejected (i.e., LST(j) = 0) and the ones that have already been served (i.e., LST(j) = 4) never enter the model. We also define ST(i,j) as a binary parameter to address the status of a truck and load together. If truck i is serving load j at the decision time, then ST(i,j) takes 1, otherwise 0. Another important time-dependent attribute is the maximum number of hours left for the drivers to return home. Two situations can be considered for them: sitting idle at their home base (i.e., 
                           
                              
                                 n
                                 i
                              
                              =
                              N
                           
                        ) or on duty away from their home (ni
                         < N). It will be explained shortly how these features are incorporated in the proposed model. Since there is no type of uncertainty considered in traveling time, it is enough to pick up loads on time to guarantee their on-time delivery.

As mentioned in Section 4.2, we tackle the static version of problem in two stages beginning with the preprocessing stage. This stage consists of two phases. In the first phase, we show how to compute the necessary pieces of information. Then, in the second phase, it is explained how the generated information is used to solve the proposed mathematical model.

At each decision epoch, trucks and loads have different attributes. Based on their current statuses, the dwelling and lateness duration can be computed. The lateness can occur in two situations: (i) truck i serves load j as the first load; (ii) a truck serves load k after load j.

DL0(i, j): the lateness duration at the load pickup location j if truck i serves load j first. If truck i serves load j directly without visiting the depot, DL0(i, j) is modified as DL0WD(i, j). For TST(i) < 1, 
                              
                                 DL
                                 
                                    0
                                    WD
                                 
                                 
                                    (
                                    
                                       i
                                       ,
                                       j
                                    
                                    )
                                 
                                 =
                                 max
                                 
                                    (
                                    
                                       0
                                       ,
                                       
                                       D
                                       
                                          (
                                          
                                             
                                                η
                                                i
                                             
                                             ,
                                             
                                                a
                                                j
                                             
                                          
                                          )
                                       
                                       +
                                       τ
                                       −
                                       
                                          α
                                          j
                                       
                                    
                                    )
                                 
                              
                           . If the truck is moving loaded, 
                              
                                 TST
                                 (
                                 i
                                 )
                                 =
                                 1
                              
                           , toward the destination of a load (e.g., load k), 
                              
                                 DL
                                 
                                    0
                                    WD
                                 
                                 
                                    (
                                    
                                       i
                                       ,
                                       j
                                    
                                    )
                                 
                                 =
                                 max
                                 
                                    (
                                    
                                       0
                                       ,
                                       
                                       τ
                                       +
                                       D
                                       
                                          (
                                          
                                             
                                                η
                                                i
                                             
                                             ,
                                             
                                                b
                                                k
                                             
                                          
                                          )
                                       
                                       +
                                       D
                                       
                                          (
                                          
                                             
                                                b
                                                k
                                             
                                             ,
                                             
                                                a
                                                j
                                             
                                          
                                          )
                                       
                                       −
                                       
                                          α
                                          j
                                       
                                    
                                    )
                                 
                                 .
                              
                            If truck i serves load j through the depot, DL0(i, j) is modified as DL0TD(i, j). For TST(i) < 1, 
                              
                                 DL
                                 
                                    0
                                    TD
                                 
                                 
                                    (
                                    
                                       i
                                       ,
                                       j
                                    
                                    )
                                 
                                 =
                                 max
                                 
                                    (
                                    
                                       0
                                       ,
                                       
                                       τ
                                       +
                                       D
                                       
                                          (
                                          
                                             
                                                η
                                                i
                                             
                                             ,
                                             h
                                          
                                          )
                                       
                                       +
                                       D
                                       
                                          (
                                          
                                             h
                                             ,
                                             
                                                a
                                                j
                                             
                                          
                                          )
                                       
                                       −
                                       
                                          α
                                          j
                                       
                                    
                                    )
                                 
                              
                            and for a loaded truck (e.g., while serving load k) will be 
                              
                                 DL
                                 
                                    0
                                    TD
                                 
                                 
                                    (
                                    
                                       i
                                       ,
                                       j
                                    
                                    )
                                 
                                 =
                                 max
                                 
                                    (
                                    
                                       0
                                       ,
                                       
                                       τ
                                       +
                                       D
                                       
                                          (
                                          
                                             
                                                η
                                                i
                                             
                                             ,
                                             
                                                b
                                                k
                                             
                                          
                                          )
                                       
                                       +
                                       D
                                       
                                          (
                                          
                                             
                                                b
                                                k
                                             
                                             ,
                                             h
                                          
                                          )
                                       
                                       +
                                       D
                                       
                                          (
                                          
                                             h
                                             ,
                                             
                                                a
                                                j
                                             
                                          
                                          )
                                       
                                       −
                                       
                                          α
                                          j
                                       
                                    
                                    )
                                 
                              
                           .

DL1(j, k): the minimum lateness at the load pickup location k if the same truck serves load k immediately (or through its depot) after load j. Load k will experience some lateness if there is not enough time to reach the pickup location of load k immediately after serving load j. It is denoted with 
                              
                                 DL
                                 
                                    1
                                    WD
                                 
                                 
                                    (
                                    
                                       j
                                       ,
                                       k
                                    
                                    )
                                 
                                 =
                                 max
                                 
                                    (
                                    
                                       0
                                       ,
                                       
                                          (
                                          
                                             
                                                α
                                                j
                                             
                                             +
                                             D
                                             
                                                (
                                                
                                                   
                                                      a
                                                      j
                                                   
                                                   ,
                                                   
                                                      b
                                                      j
                                                   
                                                
                                                )
                                             
                                             +
                                             D
                                             
                                                (
                                                
                                                   
                                                      b
                                                      j
                                                   
                                                   ,
                                                   
                                                      a
                                                      k
                                                   
                                                
                                                )
                                             
                                          
                                          )
                                       
                                       −
                                       
                                          α
                                          k
                                       
                                    
                                    )
                                 
                              
                           . However, the minimum lateness of load k if it is served after load j through the depot will be 
                              
                                 DL
                                 
                                    1
                                    TD
                                 
                                 
                                    (
                                    
                                       j
                                       ,
                                       k
                                    
                                    )
                                 
                                 =
                                 max
                                 
                                    (
                                    
                                       0
                                       ,
                                       
                                          (
                                          
                                             
                                                α
                                                j
                                             
                                             +
                                             D
                                             
                                                (
                                                
                                                   
                                                      a
                                                      j
                                                   
                                                   ,
                                                   
                                                      b
                                                      j
                                                   
                                                
                                                )
                                             
                                             +
                                             D
                                             
                                                (
                                                
                                                   
                                                      b
                                                      j
                                                   
                                                   ,
                                                   h
                                                
                                                )
                                             
                                             +
                                             D
                                             
                                                (
                                                
                                                   h
                                                   ,
                                                   
                                                      a
                                                      k
                                                   
                                                
                                                )
                                             
                                          
                                          )
                                       
                                       −
                                       
                                          α
                                          k
                                       
                                    
                                    )
                                 
                              
                           .

Similar to what is explained for calculating lateness time, truck dwelling might occur in the following cases: (i) truck i serves load j as the first load directly (i.e., without visiting the depot), (ii) a truck serves load k after load j directly.


Dw1(i, j): the dwell time at the load pickup location j if truck i serves load j first given it was heading from the previous load location directly (in the current decision epoch). As we defined the dwell time, this happens if the truck arrives earlier at the load pickup location. For empty trucks,

                              
                                 
                                 TST
                                 (
                                 i
                                 )
                                 =
                                 −
                                 1
                              
                           , 
                              
                                 Dw
                                 1
                                 
                                    (
                                    
                                       i
                                       ,
                                       j
                                    
                                    )
                                 
                                 =
                                 max
                                 
                                    (
                                    
                                       0
                                       ,
                                       
                                          α
                                          j
                                       
                                       
                                          −
                                          (
                                          τ
                                          +
                                          D
                                       
                                       
                                          (
                                          
                                             
                                                η
                                                i
                                             
                                             ,
                                             
                                                a
                                                j
                                             
                                          
                                          )
                                       
                                    
                                    )
                                 
                              
                           . If truck i is moving loaded toward destination k at the decision epoch, similar reasoning leads to dwell time being 
                              
                                 Dw
                                 1
                                 
                                    (
                                    
                                       i
                                       ,
                                       j
                                    
                                    )
                                 
                                 =
                                 max
                                 
                                    (
                                    
                                       0
                                       ,
                                       
                                          α
                                          j
                                       
                                       −
                                       
                                          (
                                          
                                             τ
                                             +
                                             D
                                             
                                                (
                                                
                                                   
                                                      η
                                                      i
                                                   
                                                   ,
                                                   
                                                      b
                                                      k
                                                   
                                                
                                                )
                                             
                                             +
                                             D
                                             
                                                (
                                                
                                                   
                                                      b
                                                      k
                                                   
                                                   ,
                                                   
                                                      a
                                                      j
                                                   
                                                
                                                )
                                             
                                          
                                          )
                                       
                                    
                                    )
                                 
                              
                            in which 
                              
                                 τ
                                 +
                                 D
                                 (
                                 
                                    
                                       η
                                       i
                                    
                                    ,
                                    
                                       b
                                       k
                                    
                                 
                                 )
                              
                            is when truck i is available after completing the service of load k.


Dw2(j, k): the minimum dwell time of a truck at the pickup location of load k if it comes directly after serving load j, 
                              
                                 Dw
                                 2
                                 
                                    (
                                    
                                       j
                                       ,
                                       k
                                    
                                    )
                                 
                                 =
                                 max
                                 
                                    (
                                    
                                       0
                                       ,
                                       
                                          α
                                          k
                                       
                                       −
                                       
                                          (
                                          
                                             
                                                α
                                                j
                                             
                                             +
                                             
                                                U
                                                j
                                             
                                             +
                                             D
                                             
                                                (
                                                
                                                   
                                                      a
                                                      j
                                                   
                                                   ,
                                                   
                                                      b
                                                      j
                                                   
                                                
                                                )
                                             
                                             +
                                             D
                                             
                                                (
                                                
                                                   
                                                      b
                                                      j
                                                   
                                                   ,
                                                   
                                                      a
                                                      k
                                                   
                                                
                                                )
                                             
                                          
                                          )
                                       
                                    
                                    )
                                 
                              
                           .

In this phase, the following three tasks are performed. First, updating all dynamic attributes of trucks (e.g., hours away from home and current truck location) and loads (e.g., a load is waiting to be served or being served). Second, identifying infeasible truck–load and load–load combinations; and finally identifying feasible combinations that cannot be part of the optimal solution. Since the first part is straight forward, only the last two functions of the preprocessing stage are discussed here.

Given the current status of the trucks, we determine whether a particular truck is eligible for serving a certain load. This must be done for all available truck–load combinations. It is trivial that certain truck–load combinations are not feasible if the truck cannot be available at the pickup location of the load without violating the maximum delay. Thus, the following modifications are applied to the decision variables: 
                              
                                 
                                    Y
                                    
                                       i
                                       j
                                    
                                    0
                                 
                                 =
                                 0
                              
                            if DL0WD(i, j) > Uj
                            and 
                              
                                 
                                    Y
                                    
                                       i
                                       j
                                    
                                    1
                                 
                                 =
                                 0
                              
                            if DL0TD(i, j) > U
                           j.

Similar to what is done for truck–load combinations, we examine the feasibility of serving load k immediately (via depot of truck i) after load j. Here, the best-case scenario for load–load combinations is checked for. The best possible case is when load j is served on time so that no delay is carried toward serving load k. It is evident that load k cannot be served directly (or via the depot) after load j when there is not enough time for the truck to be at the load k pick-up location without violating its time window. Thus, the value of some decision variables can be set to zero in the preprocessing stage because if a load combination is not feasible in the best-case scenario, it cannot be feasible at all (i.e., if DL1WD(j, k) > Uk
                            then 
                              
                                 
                                    X
                                    
                                       j
                                       k
                                    
                                    0
                                 
                                 =
                                 0
                              
                            and if DL1TD(j, k) > Uk
                            then 
                              
                                 
                                    X
                                    
                                       j
                                       k
                                    
                                    1
                                 
                                 =
                                 0
                              
                           ). On the other hand, if the minimum lateness is smaller than or equal to the maximum allowable delay of Uk
                           , the combination is not conclusively infeasible. This is extremely important because the decision at this stage is made based on the minimum lateness but not the actual lateness. Therefore, considering different possible assignment decisions, some load combinations with DL1WD(j, k) ≤ Uk
                            or  DL1TD(j, k) ≤ Uk
                            might not be feasible after solving the problem. This exactly explains why we need to have time components in the mathematical model.

We can also identify the truck–load and load–load combinations that could not be part of the optimal solution. Before identifying non-optimal truck–load and load–load assignments, it is shown that if a truck visits the depot before serving a load, the dwelling cost should be zero. This is a trivial property since for every dispatching decision from a depot with dwelling time and cost greater than zero, there exists an alternative decision with a larger profit with dwelling cost equal to zero. This can be attributed to the negligible dwelling cost assumptions at the depot. Thus, a truck is never dispatched from the depot if it has to wait at the pick-up location of a load. To exclude some of the load–truck combinations, it is sufficient to show that they cannot be part of the optimal solution. At optimality, truck i does not serve load j at the first stop directly (i.e., 
                              
                                 
                                    Y
                                    
                                       i
                                       j
                                    
                                    0
                                 
                                 =
                                 0
                              
                           ) if conditions (1) and (2) hold. These conditions simply check if the saving in omitting the corresponding dwelling cost (by visiting the depot) outweighs the extra travelling costs. Satisfying these conditions means that 
                              
                                 Y
                                 
                                    i
                                    j
                                 
                                 0
                              
                            never shows at optimality because not only is it less cost efficient than 
                              
                                 Y
                                 
                                    i
                                    j
                                 
                                 1
                              
                            but it also uses the available hours that a driver can be away from the home base.

                              
                                 (1)
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                w
                                                ×
                                                Dw
                                                1
                                                
                                                   (
                                                   
                                                      i
                                                      ,
                                                      j
                                                   
                                                   )
                                                
                                                ≥
                                                c
                                                ×
                                                
                                                   (
                                                   
                                                      D
                                                      
                                                         (
                                                         
                                                            
                                                               η
                                                               i
                                                            
                                                            ,
                                                            h
                                                         
                                                         )
                                                      
                                                      +
                                                      D
                                                      
                                                         (
                                                         
                                                            h
                                                            ,
                                                            
                                                               a
                                                               j
                                                            
                                                         
                                                         )
                                                      
                                                      −
                                                      D
                                                      
                                                         (
                                                         
                                                            
                                                               η
                                                               i
                                                            
                                                            ,
                                                            
                                                               a
                                                               j
                                                            
                                                         
                                                         )
                                                      
                                                   
                                                   )
                                                
                                                ,
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                TST
                                                (
                                                i
                                                )
                                                =
                                                −
                                                1
                                                ,
                                                
                                                and
                                                
                                                LST
                                                (
                                                j
                                                )
                                                =
                                                1
                                                ,
                                                3
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (2)
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                w
                                                ×
                                                Dw
                                                1
                                                
                                                   (
                                                   
                                                      i
                                                      ,
                                                      j
                                                   
                                                   )
                                                
                                                ≥
                                                c
                                                ×
                                                
                                                   (
                                                   
                                                      D
                                                      
                                                         (
                                                         
                                                            
                                                               b
                                                               k
                                                            
                                                            ,
                                                            h
                                                         
                                                         )
                                                      
                                                      +
                                                      D
                                                      
                                                         (
                                                         
                                                            h
                                                            ,
                                                            
                                                               a
                                                               j
                                                            
                                                         
                                                         )
                                                      
                                                      −
                                                      D
                                                      
                                                         (
                                                         
                                                            
                                                               b
                                                               k
                                                            
                                                            ,
                                                            
                                                               a
                                                               j
                                                            
                                                         
                                                         )
                                                      
                                                   
                                                   )
                                                
                                                ,
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                TST
                                                (
                                                i
                                                )
                                                =
                                                1
                                                ,
                                                
                                                LST
                                                (
                                                k
                                                )
                                                =
                                                2
                                                ,
                                                
                                                and
                                                
                                                LST
                                                (
                                                j
                                                )
                                                =
                                                1
                                                ,
                                                3
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

A similar reasoning is used to exclude some of the load–load combinations. Serving load k directly after load j is not part of optimal solution (i.e., 
                              
                                 
                                    X
                                    
                                       j
                                       k
                                    
                                    0
                                 
                                 =
                                 0
                              
                           ) if condition (3) is satisfied.

                              
                                 (3)
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                w
                                                ×
                                                Dw
                                                2
                                                
                                                   (
                                                   
                                                      j
                                                      ,
                                                      k
                                                   
                                                   )
                                                
                                                ≥
                                                c
                                                ×
                                                
                                                   (
                                                   
                                                      D
                                                      
                                                         (
                                                         
                                                            
                                                               b
                                                               j
                                                            
                                                            ,
                                                            h
                                                         
                                                         )
                                                      
                                                      +
                                                      D
                                                      
                                                         (
                                                         
                                                            h
                                                            ,
                                                            
                                                               a
                                                               k
                                                            
                                                         
                                                         )
                                                      
                                                      −
                                                      D
                                                      
                                                         (
                                                         
                                                            
                                                               b
                                                               j
                                                            
                                                            ,
                                                            
                                                               a
                                                               k
                                                            
                                                         
                                                         )
                                                      
                                                   
                                                   )
                                                
                                                ,
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                LST
                                                
                                                   (
                                                   j
                                                   )
                                                
                                                =
                                                1
                                                ,
                                                3
                                                
                                                and
                                                
                                                LST
                                                
                                                   (
                                                   k
                                                   )
                                                
                                                =
                                                1
                                                ,
                                                3
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

Having defined all parameters and dynamic aspects of the model in the preprocessing stage, it is time to formulate the conceptual model. Before formulating the proposed model, it is important to check which loads enter the model and their notations. As defined earlier, J represents the set of all loads entered in the model. However, we are required to differentiate them in order to have a neat mathematical formulation. To do so, the set of new loads are denoted with 
                           C
                         (LST(j) = 3), the set of accepted loads waiting for service with 
                           N
                         (LST(j) = 1), and the set of loads being served at the decision epoch with 
                           Q
                         (LST(j) = 2). Thus, 
                           
                              J
                              =
                              C
                              ∪
                              
                              N
                              ∪
                              
                              Q
                           
                        . Having the parameters and decision variable defined, the model will be formulated as follows. To have a better understanding of the model, we break it down into smaller components and explain them one by one. The objective function to be maximized is the profit which includes the revenue and the relevant costs. In the following model, there are some non-linear terms in the objective function and constraints that can be easily reformulated into linear terms.

                           
                              •
                              
                                 Revenue; the revenue depends on trip-length of the accepted loads:
                                    
                                       (4)
                                       
                                          
                                             e
                                             
                                                ∑
                                                
                                                   i
                                                   ϵ
                                                   I
                                                
                                             
                                             
                                                
                                                   ∑
                                                   
                                                      k
                                                      ϵ
                                                      C
                                                      ∪
                                                      N
                                                   
                                                
                                                
                                                   D
                                                   
                                                      (
                                                      
                                                         
                                                            a
                                                            k
                                                         
                                                         ,
                                                         
                                                            b
                                                            k
                                                         
                                                      
                                                      )
                                                   
                                                   
                                                      (
                                                      
                                                         
                                                            Y
                                                            
                                                               i
                                                               k
                                                            
                                                            0
                                                         
                                                         +
                                                         
                                                            Y
                                                            
                                                               i
                                                               k
                                                            
                                                            1
                                                         
                                                         +
                                                         
                                                            Z
                                                            
                                                               i
                                                               k
                                                            
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              


                                 Cost of moving loaded trucks;
                                    
                                       (5)
                                       
                                          
                                             c
                                             
                                                ∑
                                                
                                                   i
                                                   ϵ
                                                   I
                                                
                                             
                                             
                                                
                                                   ∑
                                                   
                                                      k
                                                      ϵ
                                                      C
                                                      ∪
                                                      N
                                                   
                                                
                                                
                                                   D
                                                   
                                                      (
                                                      
                                                         
                                                            a
                                                            k
                                                         
                                                         ,
                                                         
                                                            b
                                                            k
                                                         
                                                      
                                                      )
                                                   
                                                   
                                                      (
                                                      
                                                         
                                                            Y
                                                            
                                                               i
                                                               k
                                                            
                                                            0
                                                         
                                                         +
                                                         
                                                            Y
                                                            
                                                               i
                                                               k
                                                            
                                                            1
                                                         
                                                         +
                                                         
                                                            Z
                                                            
                                                               i
                                                               k
                                                            
                                                         
                                                      
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              


                                 Cost of moving empty trucks; empty traveling cost can be a result of moving trucks from the delivery location of one load to the pickup location of the next load:
                                    
                                       (6)
                                       
                                          
                                             c
                                             
                                                ∑
                                                
                                                   k
                                                   ϵ
                                                   C
                                                   ∪
                                                   N
                                                
                                             
                                             
                                                [
                                                
                                                   
                                                      ∑
                                                      
                                                         j
                                                         ϵ
                                                         C
                                                         ∪
                                                         N
                                                      
                                                   
                                                   D
                                                   
                                                      (
                                                      
                                                         
                                                            b
                                                            j
                                                         
                                                         ,
                                                         
                                                            a
                                                            k
                                                         
                                                      
                                                      )
                                                   
                                                   
                                                      X
                                                      
                                                         j
                                                         k
                                                      
                                                      0
                                                   
                                                   +
                                                   
                                                      ∑
                                                      
                                                         j
                                                         ϵ
                                                         C
                                                         ∪
                                                         N
                                                      
                                                   
                                                   
                                                      [
                                                      
                                                         D
                                                         
                                                            (
                                                            
                                                               
                                                                  b
                                                                  j
                                                               
                                                               ,
                                                               h
                                                            
                                                            )
                                                         
                                                         +
                                                         D
                                                         
                                                            (
                                                            
                                                               h
                                                               ,
                                                               
                                                                  a
                                                                  k
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                      ]
                                                   
                                                   
                                                      X
                                                      
                                                         j
                                                         k
                                                      
                                                      1
                                                   
                                                
                                                ]
                                             
                                          
                                       
                                    
                                 
                              

The empty traveling cost occurs for repositioning empty, idle or loaded trucks to the pickup location of the first load in the sequence:

                           
                              (7)
                              
                                 
                                    
                                       
                                       
                                       
                                          
                                             c
                                             
                                                ∑
                                                
                                                   i
                                                   ϵ
                                                   I
                                                   ,
                                                   T
                                                   S
                                                   T
                                                   
                                                      (
                                                      i
                                                      )
                                                   
                                                   <
                                                   1
                                                
                                             
                                             
                                                ∑
                                                
                                                   k
                                                   ϵ
                                                   C
                                                   ∪
                                                   N
                                                
                                             
                                             D
                                             
                                                (
                                                
                                                   
                                                      η
                                                      i
                                                   
                                                   ,
                                                   
                                                      a
                                                      k
                                                   
                                                
                                                )
                                             
                                             
                                                Y
                                                
                                                   i
                                                   k
                                                
                                                0
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             
                                             +
                                             
                                             c
                                             
                                                ∑
                                                
                                                   i
                                                   ϵ
                                                   I
                                                   ,
                                                   T
                                                   S
                                                   T
                                                   
                                                      (
                                                      i
                                                      )
                                                   
                                                   <
                                                   1
                                                
                                             
                                             
                                                
                                                   ∑
                                                   
                                                      k
                                                      ϵ
                                                      C
                                                      ∪
                                                      N
                                                   
                                                
                                                
                                                   
                                                      [
                                                      
                                                         D
                                                         
                                                            (
                                                            
                                                               
                                                                  η
                                                                  i
                                                               
                                                               ,
                                                               h
                                                            
                                                            )
                                                         
                                                         +
                                                         D
                                                         
                                                            (
                                                            
                                                               h
                                                               ,
                                                               
                                                                  a
                                                                  k
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                      ]
                                                   
                                                   
                                                      Y
                                                      
                                                         i
                                                         k
                                                      
                                                      1
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             
                                             +
                                             
                                             c
                                             
                                                ∑
                                                
                                                   i
                                                   ∫
                                                   I
                                                
                                             
                                             
                                                
                                                   ∑
                                                   
                                                      j
                                                      ∈
                                                      Q
                                                      ,
                                                      
                                                      S
                                                      T
                                                      
                                                         (
                                                         
                                                            i
                                                            ,
                                                            j
                                                         
                                                         )
                                                      
                                                      =
                                                      1
                                                   
                                                
                                                
                                                   
                                                      ∑
                                                      
                                                         k
                                                         ∫
                                                         C
                                                         ∪
                                                         N
                                                      
                                                   
                                                   
                                                      D
                                                      
                                                         (
                                                         
                                                            
                                                               b
                                                               j
                                                            
                                                            ,
                                                            
                                                               a
                                                               k
                                                            
                                                         
                                                         )
                                                      
                                                      
                                                         Y
                                                         
                                                            i
                                                            k
                                                         
                                                         0
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             
                                             +
                                             
                                             c
                                             
                                                ∑
                                                
                                                   i
                                                   ∫
                                                   I
                                                
                                             
                                             
                                                
                                                   ∑
                                                   
                                                      j
                                                      ∈
                                                      Q
                                                      ,
                                                      
                                                      S
                                                      T
                                                      
                                                         (
                                                         
                                                            i
                                                            ,
                                                            j
                                                         
                                                         )
                                                      
                                                      =
                                                      1
                                                   
                                                
                                                
                                                   
                                                      ∑
                                                      
                                                         k
                                                         ∫
                                                         C
                                                         ∪
                                                         N
                                                      
                                                   
                                                   
                                                      [
                                                      
                                                         D
                                                         
                                                            (
                                                            
                                                               
                                                                  b
                                                                  j
                                                               
                                                               ,
                                                               h
                                                            
                                                            )
                                                         
                                                         +
                                                         D
                                                         
                                                            (
                                                            
                                                               h
                                                               ,
                                                               
                                                                  a
                                                                  k
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                      ]
                                                   
                                                
                                                
                                                   Y
                                                   
                                                      i
                                                      k
                                                   
                                                   1
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              •
                              The empty traveling also exists in either of following cases. First, the truck is going back to its depot after serving all its assigned loads (in term 8, based on definition of deadhead coefficient policy, travel cost from the destination of the last load in the sequence to the depot is weighted with Θ). Second, a moving truck (i.e., either empty or loaded) is not assigned to any load and so it is heading back to its depot (term 9). If the truck is moving a load (e.g., serving load j), it cannot be diverted based on the predefined assumption (similar to Regan et al., 1995). This means that it continues the movement of load j to its delivery location (bj
                                 ). Then, the empty traveling starts from that location (bj
                                 ) to the depot (h).
                                    
                                       (8)
                                       
                                          
                                             
                                                
                                                
                                                
                                                   
                                                      Θ
                                                      ×
                                                      c
                                                      
                                                         ∑
                                                         
                                                            j
                                                            ϵ
                                                            C
                                                            ∪
                                                            N
                                                         
                                                      
                                                      
                                                         D
                                                         
                                                            (
                                                            
                                                               
                                                                  b
                                                                  j
                                                               
                                                               ,
                                                               h
                                                            
                                                            )
                                                         
                                                      
                                                      
                                                         [
                                                         
                                                            ∑
                                                            
                                                               i
                                                               ϵ
                                                               I
                                                            
                                                         
                                                         
                                                            (
                                                            
                                                               
                                                                  Y
                                                                  
                                                                     i
                                                                     j
                                                                  
                                                                  0
                                                               
                                                               +
                                                               
                                                                  Y
                                                                  
                                                                     i
                                                                     j
                                                                  
                                                                  1
                                                               
                                                            
                                                            )
                                                         
                                                         +
                                                         
                                                            ∑
                                                            
                                                               r
                                                               ϵ
                                                               C
                                                               ∪
                                                               N
                                                            
                                                         
                                                         
                                                            X
                                                            
                                                               r
                                                               j
                                                            
                                                            0
                                                         
                                                         +
                                                         
                                                            X
                                                            
                                                               r
                                                               j
                                                            
                                                            1
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                
                                                
                                                   
                                                      
                                                      
                                                         −
                                                         
                                                         
                                                            ∑
                                                            
                                                               k
                                                               ϵ
                                                               C
                                                               ∪
                                                               N
                                                            
                                                         
                                                         
                                                            X
                                                            
                                                               j
                                                               k
                                                            
                                                            0
                                                         
                                                         +
                                                         
                                                            X
                                                            
                                                               j
                                                               k
                                                            
                                                            1
                                                         
                                                         ]
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       (9)
                                       
                                          
                                             
                                                
                                                
                                                
                                                   
                                                      c
                                                      
                                                         ∑
                                                         
                                                            i
                                                            ϵ
                                                            I
                                                            ,
                                                            S
                                                            T
                                                            
                                                               (
                                                               i
                                                               )
                                                            
                                                            =
                                                            −
                                                            1
                                                         
                                                      
                                                      
                                                         D
                                                         
                                                            (
                                                            
                                                               
                                                                  η
                                                                  i
                                                               
                                                               ,
                                                               h
                                                            
                                                            )
                                                         
                                                      
                                                      
                                                         [
                                                         
                                                            1
                                                            −
                                                            
                                                               ∑
                                                               
                                                                  k
                                                                  ϵ
                                                                  C
                                                                  ∪
                                                                  N
                                                               
                                                            
                                                            
                                                               (
                                                               
                                                                  
                                                                     Y
                                                                     
                                                                        i
                                                                        k
                                                                     
                                                                     0
                                                                  
                                                                  +
                                                                  
                                                                     Y
                                                                     
                                                                        i
                                                                        k
                                                                     
                                                                     1
                                                                  
                                                               
                                                               )
                                                            
                                                         
                                                         ]
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                
                                                
                                                   
                                                      
                                                      +
                                                      c
                                                      
                                                         ∑
                                                         
                                                            i
                                                            ϵ
                                                            I
                                                         
                                                      
                                                      
                                                         
                                                            ∑
                                                            
                                                               j
                                                               ∈
                                                               Q
                                                               ,
                                                               
                                                               S
                                                               T
                                                               (
                                                               
                                                                  i
                                                                  ,
                                                                  j
                                                               
                                                               )
                                                               =
                                                               1
                                                            
                                                         
                                                         
                                                            D
                                                            
                                                               (
                                                               
                                                                  
                                                                     b
                                                                     j
                                                                  
                                                                  ,
                                                                  h
                                                               
                                                               )
                                                            
                                                         
                                                      
                                                      
                                                         [
                                                         
                                                            1
                                                            −
                                                            
                                                               ∑
                                                               
                                                                  k
                                                                  ϵ
                                                                  C
                                                                  ∪
                                                                  N
                                                               
                                                            
                                                            
                                                               (
                                                               
                                                                  
                                                                     Y
                                                                     
                                                                        i
                                                                        k
                                                                     
                                                                     0
                                                                  
                                                                  +
                                                                  
                                                                     Y
                                                                     
                                                                        i
                                                                        k
                                                                     
                                                                     1
                                                                  
                                                               
                                                               )
                                                            
                                                         
                                                         ]
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              


                                 Dwelling cost; this is the cost of waiting at the load pickup location which can occur when the load is either at the beginning of the sequence or after another load directly.
                                    
                                       (10)
                                       
                                          
                                             w
                                             
                                                ∑
                                                
                                                   k
                                                   ϵ
                                                   C
                                                   ∪
                                                   N
                                                
                                             
                                             max
                                             
                                                (
                                                
                                                   0
                                                   ,
                                                   
                                                      α
                                                      k
                                                   
                                                   −
                                                   
                                                      O
                                                      k
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                              


                                 Lateness cost; late service occurs when the truck arrives to the load's pick-up location after its availability. Lateness cost is incurred in all the following situations. A truck (e.g., moving empty, loaded or idle) is scheduled to serve a load directly from its current location, through the truck depot or after another load:
                                    
                                       (11)
                                       
                                          
                                             l
                                             
                                                ∑
                                                
                                                   k
                                                   ϵ
                                                   C
                                                   ∪
                                                   N
                                                
                                             
                                             max
                                             
                                                (
                                                
                                                   0
                                                   ,
                                                   
                                                      O
                                                      k
                                                   
                                                   −
                                                   
                                                      α
                                                      k
                                                   
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                              

Having formulated the objective function, the constraints are introduced as follows. The first and second constraint sets ((12) and (13)) ensure that all previous accepted loads will be served but there is no guarantee to take all new loads.

                           
                              (12)
                              
                                 
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          I
                                       
                                    
                                    
                                       (
                                       
                                          
                                             Y
                                             
                                                i
                                                k
                                             
                                             0
                                          
                                          +
                                          
                                             Y
                                             
                                                i
                                                k
                                             
                                             1
                                          
                                          +
                                          
                                             Z
                                             
                                                i
                                                k
                                             
                                          
                                       
                                       )
                                    
                                    =
                                    1
                                    ,
                                    
                                    k
                                    ∈
                                    N
                                 
                              
                           
                        
                        
                           
                              (13)
                              
                                 
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          I
                                       
                                    
                                    
                                       (
                                       
                                          
                                             Y
                                             
                                                i
                                                k
                                             
                                             0
                                          
                                          +
                                          
                                             Y
                                             
                                                i
                                                k
                                             
                                             1
                                          
                                          +
                                          
                                             Z
                                             
                                                i
                                                k
                                             
                                          
                                       
                                       )
                                    
                                    ≤
                                    1
                                    ,
                                    
                                    k
                                    ∈
                                    C
                                 
                              
                           
                        
                        
                           
                              •
                              A truck can serve at most one load at the beginning of a sequence.

                                    
                                       (14)
                                       
                                          
                                             
                                                ∑
                                                
                                                   k
                                                   ∈
                                                   C
                                                   ∪
                                                   N
                                                
                                             
                                             
                                                (
                                                
                                                   
                                                      Y
                                                      
                                                         i
                                                         k
                                                      
                                                      0
                                                   
                                                   +
                                                   
                                                      Y
                                                      
                                                         i
                                                         k
                                                      
                                                      1
                                                   
                                                
                                                )
                                             
                                             ≤
                                             1
                                             ,
                                             
                                             i
                                             ∈
                                             I
                                          
                                       
                                    
                                 
                              

Each accepted load can have at most one successor.
                                    
                                       (15)
                                       
                                          
                                             
                                                ∑
                                                
                                                   k
                                                   ∈
                                                   C
                                                   ∪
                                                   N
                                                
                                             
                                             
                                                X
                                                
                                                   j
                                                   k
                                                
                                                0
                                             
                                             +
                                             
                                                X
                                                
                                                   j
                                                   k
                                                
                                                1
                                             
                                             ≤
                                             1
                                             ,
                                             
                                             
                                             j
                                             ∈
                                             C
                                             ∪
                                             N
                                          
                                       
                                    
                                 
                              

The next set of constraints (16) ensures that if load k is served after load j, load j is either scheduled to be the first load or placed after another load r.
                                    
                                       (16)
                                       
                                          
                                             
                                                
                                                
                                                
                                                   
                                                      
                                                         ∑
                                                         
                                                            k
                                                            ∈
                                                            C
                                                            ∪
                                                            N
                                                         
                                                      
                                                      
                                                      
                                                         X
                                                         
                                                            j
                                                            k
                                                         
                                                         0
                                                      
                                                      +
                                                      
                                                         X
                                                         
                                                            j
                                                            k
                                                         
                                                         1
                                                      
                                                      −
                                                      
                                                         [
                                                         
                                                            
                                                               ∑
                                                               
                                                                  i
                                                                  ∈
                                                                  I
                                                               
                                                            
                                                            
                                                               Y
                                                               
                                                                  i
                                                                  j
                                                               
                                                               0
                                                            
                                                            +
                                                            
                                                               Y
                                                               
                                                                  i
                                                                  j
                                                               
                                                               1
                                                            
                                                            +
                                                            
                                                               ∑
                                                               
                                                                  r
                                                                  ∈
                                                                  C
                                                                  ∪
                                                                  N
                                                               
                                                            
                                                            
                                                               X
                                                               
                                                                  r
                                                                  j
                                                               
                                                               0
                                                            
                                                            +
                                                            
                                                               X
                                                               
                                                                  r
                                                                  j
                                                               
                                                               1
                                                            
                                                         
                                                         ]
                                                      
                                                      ≤
                                                      0
                                                      ,
                                                   
                                                
                                             
                                             
                                                
                                                
                                                
                                                   
                                                      j
                                                      ∈
                                                      C
                                                      ∪
                                                      N
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              

The constraints (17) ensure that load k can be scheduled after load j if they are visited by the same truck.
                                    
                                       (17)
                                       
                                          
                                             
                                                
                                                
                                                
                                                   
                                                      
                                                         Z
                                                         
                                                            i
                                                            j
                                                         
                                                      
                                                      +
                                                      
                                                         Y
                                                         
                                                            i
                                                            j
                                                         
                                                         0
                                                      
                                                      +
                                                      
                                                         Y
                                                         
                                                            i
                                                            j
                                                         
                                                         1
                                                      
                                                      +
                                                      
                                                         ∑
                                                         
                                                            u
                                                            ∈
                                                            I
                                                            ,
                                                            
                                                            u
                                                            ≠
                                                            i
                                                         
                                                      
                                                      
                                                         (
                                                         
                                                            
                                                               Z
                                                               
                                                                  u
                                                                  k
                                                               
                                                            
                                                            +
                                                            
                                                               Y
                                                               
                                                                  u
                                                                  k
                                                               
                                                               0
                                                            
                                                            +
                                                            
                                                               Y
                                                               
                                                                  u
                                                                  k
                                                               
                                                               1
                                                            
                                                         
                                                         )
                                                      
                                                      ≤
                                                      2
                                                      −
                                                      
                                                         (
                                                         
                                                            
                                                               X
                                                               
                                                                  j
                                                                  k
                                                               
                                                               0
                                                            
                                                            +
                                                            
                                                               X
                                                               
                                                                  j
                                                                  k
                                                               
                                                               1
                                                            
                                                         
                                                         )
                                                      
                                                      ,
                                                   
                                                
                                             
                                             
                                                
                                                
                                                
                                                   
                                                      i
                                                      ∈
                                                      I
                                                      ,
                                                      
                                                      j
                                                      ,
                                                      
                                                      k
                                                      ∈
                                                      C
                                                      ∪
                                                      N
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              

The constraints (18) guarantee that a load is not scheduled at the beginning of a sequence if it is served after another load.
                                    
                                       (18)
                                       
                                          
                                             
                                                ∑
                                                
                                                   j
                                                   ∈
                                                   C
                                                   ∪
                                                   N
                                                
                                             
                                             
                                             
                                                X
                                                
                                                   j
                                                   k
                                                
                                                0
                                             
                                             +
                                             
                                                X
                                                
                                                   j
                                                   k
                                                
                                                1
                                             
                                             =
                                             
                                                ∑
                                                
                                                   i
                                                   ∈
                                                   I
                                                
                                             
                                             
                                                Z
                                                
                                                   i
                                                   k
                                                
                                             
                                             ,
                                             
                                             k
                                             ∈
                                             C
                                             ∪
                                             N
                                          
                                       
                                    
                                 
                              

Constraints (19) ensure that Nik
                                  can only take a positive value if truck i serves load k. Thus, if truck i serves load k, then 
                                    
                                       
                                          ∑
                                          
                                             u
                                             ∈
                                             I
                                          
                                       
                                       
                                          N
                                          
                                             u
                                             k
                                          
                                       
                                       =
                                       
                                          N
                                          
                                             i
                                             k
                                          
                                       
                                    
                                  which is used in constraints (20)–(23).
                                    
                                       (19)
                                       
                                          
                                             
                                                N
                                                
                                                   i
                                                   k
                                                
                                             
                                             ≤
                                             
                                                (
                                                
                                                   
                                                      Z
                                                      
                                                         i
                                                         k
                                                      
                                                   
                                                   +
                                                   
                                                      Y
                                                      
                                                         i
                                                         k
                                                      
                                                      0
                                                   
                                                   +
                                                   
                                                      Y
                                                      
                                                         i
                                                         k
                                                      
                                                      1
                                                   
                                                
                                                )
                                             
                                             H
                                             ,
                                             
                                             k
                                             ∈
                                             C
                                             ∪
                                             N
                                             ,
                                             
                                             i
                                             ∈
                                             I
                                          
                                       
                                    
                                 
                              

Constraints (20) impose an upper bound for Nik
                                  (a driver's allowable time while visiting the first load of the sequence). In this constraint set, 
                                    
                                       M
                                       
                                          i
                                          k
                                       
                                       0
                                    
                                  and 
                                    
                                       M
                                       
                                          i
                                          k
                                       
                                       1
                                    
                                  represent the remaining allowable time for the driver of truck i when serving load k at the beginning of the sequence either directly or through the depot. These two parameters are obtained from the preprocessing stage for all truck–load combinations.
                                    
                                       (20)
                                       
                                          
                                             
                                                
                                                
                                                
                                                   
                                                      
                                                         ∑
                                                         
                                                            i
                                                            ∈
                                                            I
                                                         
                                                      
                                                      
                                                         N
                                                         
                                                            i
                                                            k
                                                         
                                                      
                                                      ≤
                                                      
                                                         ∑
                                                         
                                                            i
                                                            ∈
                                                            I
                                                         
                                                      
                                                      
                                                         (
                                                         
                                                            
                                                               M
                                                               
                                                                  i
                                                                  k
                                                               
                                                               0
                                                            
                                                            
                                                               Y
                                                               
                                                                  i
                                                                  k
                                                               
                                                               0
                                                            
                                                            +
                                                            
                                                               M
                                                               
                                                                  i
                                                                  k
                                                               
                                                               1
                                                            
                                                            
                                                               Y
                                                               
                                                                  i
                                                                  k
                                                               
                                                               1
                                                            
                                                         
                                                         )
                                                      
                                                      +
                                                      
                                                         (
                                                         
                                                            
                                                               ∑
                                                               
                                                                  j
                                                                  ∈
                                                                  C
                                                                  ∪
                                                                  N
                                                               
                                                            
                                                            
                                                               (
                                                               
                                                                  
                                                                     X
                                                                     
                                                                        j
                                                                        k
                                                                     
                                                                     0
                                                                  
                                                                  +
                                                                  
                                                                     X
                                                                     
                                                                        j
                                                                        k
                                                                     
                                                                     1
                                                                  
                                                               
                                                               )
                                                            
                                                         
                                                         )
                                                      
                                                      H
                                                      ,
                                                   
                                                
                                             
                                             
                                                
                                                
                                                
                                                   
                                                      k
                                                      ∈
                                                      C
                                                      ∪
                                                      N
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              

Constraints (21) introduce an upper bound for a driver's allowable time when serving load k immediately after load j. Constraints (22) perform similarly when the driver returns to the depot in-between visits.

                                    
                                       (21)
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         ∑
                                                         
                                                            i
                                                            ∈
                                                            I
                                                         
                                                      
                                                      
                                                         N
                                                         
                                                            i
                                                            k
                                                         
                                                      
                                                   
                                                
                                                
                                                   ≤
                                                
                                                
                                                   
                                                      [
                                                      
                                                      
                                                         
                                                            ∑
                                                            
                                                               i
                                                               ∈
                                                               I
                                                            
                                                         
                                                         
                                                            N
                                                            
                                                               i
                                                               j
                                                            
                                                         
                                                         
                                                         −
                                                         
                                                         
                                                            (
                                                            
                                                               
                                                                  α
                                                                  j
                                                               
                                                               
                                                               −
                                                               
                                                               min
                                                               
                                                                  (
                                                                  
                                                                     
                                                                        O
                                                                        j
                                                                     
                                                                     ,
                                                                     
                                                                        α
                                                                        j
                                                                     
                                                                  
                                                                  )
                                                               
                                                            
                                                            )
                                                         
                                                         
                                                         −
                                                         
                                                         D
                                                         
                                                            (
                                                            
                                                               
                                                                  a
                                                                  j
                                                               
                                                               ,
                                                               
                                                                  b
                                                                  j
                                                               
                                                            
                                                            )
                                                         
                                                         
                                                         −
                                                         
                                                         D
                                                         
                                                            (
                                                            
                                                               
                                                                  b
                                                                  j
                                                               
                                                               ,
                                                               
                                                                  a
                                                                  k
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                      
                                                      ]
                                                   
                                                
                                             
                                             
                                                
                                                
                                                
                                                   
                                                      +
                                                      
                                                      
                                                         (
                                                         
                                                            1
                                                            −
                                                            
                                                               X
                                                               
                                                                  j
                                                                  k
                                                               
                                                               0
                                                            
                                                         
                                                         )
                                                      
                                                      H
                                                      ,
                                                      …
                                                      ,
                                                      j
                                                      ,
                                                      
                                                      k
                                                      ∈
                                                      C
                                                      ∪
                                                      N
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       (22)
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         ∑
                                                         
                                                            i
                                                            ∈
                                                            I
                                                         
                                                      
                                                      
                                                         N
                                                         
                                                            i
                                                            k
                                                         
                                                      
                                                      ≤
                                                      
                                                         [
                                                         
                                                            N
                                                            −
                                                            D
                                                            
                                                               (
                                                               
                                                                  h
                                                                  ,
                                                                  
                                                                     a
                                                                     k
                                                                  
                                                               
                                                               )
                                                            
                                                         
                                                         ]
                                                      
                                                      +
                                                      
                                                         (
                                                         
                                                            1
                                                            −
                                                            
                                                               ∑
                                                               
                                                                  j
                                                                  ∈
                                                                  C
                                                                  ∪
                                                                  N
                                                               
                                                            
                                                            
                                                               X
                                                               
                                                                  j
                                                                  k
                                                               
                                                               1
                                                            
                                                         
                                                         )
                                                      
                                                      
                                                      H
                                                      ,
                                                      
                                                      k
                                                      ∈
                                                      C
                                                      ∪
                                                      N
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              

Constraints (23) guarantee that trucks have enough time to return home when they are at pick-up location of loads.
                                    
                                       (23)
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         ∑
                                                         
                                                            i
                                                            ∈
                                                            I
                                                         
                                                      
                                                      
                                                         N
                                                         
                                                            i
                                                            k
                                                         
                                                      
                                                   
                                                
                                                
                                                   ≥
                                                
                                                
                                                   
                                                      
                                                         α
                                                         k
                                                      
                                                      −
                                                      min
                                                      
                                                         (
                                                         
                                                            
                                                               O
                                                               k
                                                            
                                                            ,
                                                            
                                                               α
                                                               k
                                                            
                                                         
                                                         )
                                                      
                                                      +
                                                      D
                                                      
                                                         (
                                                         
                                                            
                                                               a
                                                               k
                                                            
                                                            ,
                                                            
                                                               b
                                                               k
                                                            
                                                         
                                                         )
                                                      
                                                      +
                                                      D
                                                      
                                                         (
                                                         
                                                            
                                                               b
                                                               k
                                                            
                                                            ,
                                                            h
                                                         
                                                         )
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                
                                                
                                                   
                                                      −
                                                      
                                                      
                                                         (
                                                         
                                                            1
                                                            −
                                                            
                                                               ∑
                                                               
                                                                  i
                                                                  ∈
                                                                  I
                                                               
                                                            
                                                            
                                                               [
                                                               
                                                                  
                                                                     Z
                                                                     
                                                                        i
                                                                        k
                                                                     
                                                                  
                                                                  +
                                                                  
                                                                     Y
                                                                     
                                                                        i
                                                                        k
                                                                     
                                                                     0
                                                                  
                                                                  +
                                                                  
                                                                     Y
                                                                     
                                                                        i
                                                                        k
                                                                     
                                                                     1
                                                                  
                                                               
                                                               ]
                                                            
                                                         
                                                         )
                                                      
                                                      H
                                                   
                                                
                                             
                                             
                                                
                                                
                                                
                                                   
                                                      
                                                      k
                                                      ∈
                                                      C
                                                      ∪
                                                      N
                                                      ,
                                                      
                                                      i
                                                      ∈
                                                      I
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              

Altogether, constraints (24) through (27) ensure that Ok
                                  does not take on an unrealistically large or small value to prevent dwelling or lateness costs. Constraints (24) and (25) apply when a truck is serving one load after another load directly while constraints (26) and (27) are for the case of a truck serving a load at the beginning of a sequence. In constraints (26) and (27), 
                                    
                                       Q
                                       
                                          i
                                          k
                                       
                                       0
                                    
                                  is the earliest time that truck i can be available at the pickup location of load k, which is computed in the preprocessing stage. If truck i is moving loaded (e.g., serving load j) at the decision epoch, 
                                    
                                       
                                          Q
                                          
                                             i
                                             k
                                          
                                          0
                                       
                                       =
                                       τ
                                       +
                                       D
                                       
                                          (
                                          
                                             
                                                η
                                                i
                                             
                                             ,
                                             
                                                b
                                                j
                                             
                                          
                                          )
                                       
                                       +
                                       D
                                       
                                          (
                                          
                                             
                                                b
                                                j
                                             
                                             ,
                                             
                                                a
                                                k
                                             
                                          
                                          )
                                       
                                    
                                 ; otherwise 
                                    
                                       
                                          Q
                                          
                                             i
                                             k
                                          
                                          0
                                       
                                       =
                                       τ
                                       +
                                       D
                                       
                                          (
                                          
                                             
                                                η
                                                i
                                             
                                             ,
                                             
                                                a
                                                k
                                             
                                          
                                          )
                                       
                                    
                                 .
                                    
                                       (24)
                                       
                                          
                                             
                                                
                                                
                                                
                                                   
                                                      
                                                         O
                                                         k
                                                      
                                                      ≥
                                                      D
                                                      
                                                         (
                                                         
                                                            
                                                               a
                                                               j
                                                            
                                                            ,
                                                            
                                                               b
                                                               j
                                                            
                                                         
                                                         )
                                                      
                                                      +
                                                      D
                                                      
                                                         (
                                                         
                                                            
                                                               b
                                                               j
                                                            
                                                            ,
                                                            
                                                               a
                                                               k
                                                            
                                                         
                                                         )
                                                      
                                                      +
                                                      max
                                                      
                                                         (
                                                         
                                                            
                                                               O
                                                               j
                                                            
                                                            ,
                                                            
                                                               α
                                                               j
                                                            
                                                         
                                                         )
                                                      
                                                      +
                                                      
                                                         (
                                                         
                                                            
                                                               X
                                                               
                                                                  j
                                                                  k
                                                               
                                                               0
                                                            
                                                            −
                                                            1
                                                         
                                                         )
                                                      
                                                      H
                                                      ,
                                                   
                                                
                                             
                                             
                                                
                                                
                                                
                                                   
                                                      j
                                                      ,
                                                      k
                                                      ∈
                                                      C
                                                      ∪
                                                      N
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       (25)
                                       
                                          
                                             
                                                
                                                
                                                
                                                   
                                                      
                                                         O
                                                         k
                                                      
                                                      ≤
                                                      D
                                                      
                                                         (
                                                         
                                                            
                                                               a
                                                               j
                                                            
                                                            ,
                                                            
                                                               b
                                                               j
                                                            
                                                         
                                                         )
                                                      
                                                      +
                                                      D
                                                      
                                                         (
                                                         
                                                            
                                                               b
                                                               j
                                                            
                                                            ,
                                                            
                                                               a
                                                               k
                                                            
                                                         
                                                         )
                                                      
                                                      +
                                                      max
                                                      
                                                         (
                                                         
                                                            
                                                               O
                                                               j
                                                            
                                                            ,
                                                            
                                                               α
                                                               j
                                                            
                                                         
                                                         )
                                                      
                                                      +
                                                      
                                                         (
                                                         
                                                            1
                                                            −
                                                            
                                                               X
                                                               
                                                                  j
                                                                  k
                                                               
                                                               0
                                                            
                                                         
                                                         )
                                                      
                                                      H
                                                      ,
                                                   
                                                
                                             
                                             
                                                
                                                
                                                
                                                   
                                                      j
                                                      ,
                                                      k
                                                      ∈
                                                      C
                                                      ∪
                                                      N
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       (26)
                                       
                                          
                                             
                                                O
                                                k
                                             
                                             ≥
                                             
                                                ∑
                                                
                                                   i
                                                   ∫
                                                   I
                                                
                                             
                                             
                                                Q
                                                
                                                   i
                                                   k
                                                
                                                0
                                             
                                             
                                                Y
                                                
                                                   i
                                                   k
                                                
                                                0
                                             
                                             +
                                             
                                                (
                                                
                                                   
                                                      ∑
                                                      
                                                         i
                                                         ∫
                                                         I
                                                      
                                                   
                                                   
                                                      Y
                                                      
                                                         i
                                                         k
                                                      
                                                      0
                                                   
                                                   −
                                                   1
                                                
                                                )
                                             
                                             H
                                             ,
                                             
                                             k
                                             ∈
                                             C
                                             ∪
                                             N
                                          
                                       
                                    
                                 
                                 
                                    
                                       (27)
                                       
                                          
                                             
                                                O
                                                k
                                             
                                             ≤
                                             
                                                ∑
                                                
                                                   i
                                                   ∫
                                                   I
                                                
                                             
                                             
                                                Q
                                                
                                                   i
                                                   k
                                                
                                                0
                                             
                                             
                                                Y
                                                
                                                   i
                                                   k
                                                
                                                0
                                             
                                             +
                                             
                                                (
                                                
                                                   1
                                                   −
                                                   
                                                      ∑
                                                      
                                                         i
                                                         ∫
                                                         I
                                                      
                                                   
                                                   
                                                      Y
                                                      
                                                         i
                                                         k
                                                      
                                                      0
                                                   
                                                
                                                )
                                             
                                             H
                                             ,
                                             
                                             k
                                             ∈
                                             C
                                             ∪
                                             N
                                             ,
                                          
                                       
                                    
                                 
                              

Constraints (28) and (29) ensure that a truck arrives at the pick-up location of load k no sooner than after serving load j and traveling to load k through the depot if such a schedule is implemented. In constraints (28), 
                                    
                                       Q
                                       
                                          i
                                          k
                                       
                                       1
                                    
                                  is the earliest time that truck i can be available at the pickup location of load k if it visits the depot first. If truck i is moving loaded (e.g., serving load j) at the decision epoch, 
                                    
                                       
                                          Q
                                          
                                             i
                                             k
                                          
                                          1
                                       
                                       =
                                       τ
                                       +
                                       D
                                       
                                          (
                                          
                                             
                                                η
                                                i
                                             
                                             ,
                                             
                                                b
                                                j
                                             
                                          
                                          )
                                       
                                       +
                                       D
                                       
                                          (
                                          
                                             
                                                b
                                                j
                                             
                                             ,
                                             h
                                          
                                          )
                                       
                                       +
                                       D
                                       
                                          (
                                          
                                             h
                                             ,
                                             
                                                a
                                                k
                                             
                                          
                                          )
                                       
                                    
                                 ; otherwise 
                                    
                                       
                                          Q
                                          
                                             i
                                             k
                                          
                                          1
                                       
                                       =
                                       τ
                                       +
                                       D
                                       
                                          (
                                          
                                             
                                                η
                                                i
                                             
                                             ,
                                             h
                                          
                                          )
                                       
                                       +
                                       D
                                       
                                          (
                                          
                                             h
                                             ,
                                             
                                                a
                                                k
                                             
                                          
                                          )
                                       
                                    
                                 .
                                    
                                       (28)
                                       
                                          
                                             
                                                O
                                                k
                                             
                                             ≥
                                             
                                                ∑
                                                
                                                   i
                                                   ∫
                                                   I
                                                
                                             
                                             
                                                Q
                                                
                                                   i
                                                   k
                                                
                                                1
                                             
                                             
                                                Y
                                                
                                                   i
                                                   k
                                                
                                                1
                                             
                                             +
                                             
                                                (
                                                
                                                   
                                                      ∑
                                                      
                                                         i
                                                         ∫
                                                         I
                                                      
                                                   
                                                   
                                                      Y
                                                      
                                                         i
                                                         k
                                                      
                                                      1
                                                   
                                                   −
                                                   1
                                                
                                                )
                                             
                                             H
                                             ,
                                             
                                             k
                                             ∈
                                             C
                                             ∪
                                             N
                                          
                                       
                                    
                                 
                                 
                                    
                                       (29)
                                       
                                          
                                             
                                                
                                                   
                                                      O
                                                      k
                                                   
                                                
                                                
                                                   ≥
                                                
                                                
                                                   
                                                      D
                                                      
                                                         (
                                                         
                                                            
                                                               a
                                                               j
                                                            
                                                            ,
                                                            
                                                               b
                                                               j
                                                            
                                                         
                                                         )
                                                      
                                                      +
                                                      D
                                                      
                                                         (
                                                         
                                                            
                                                               b
                                                               j
                                                            
                                                            ,
                                                            h
                                                         
                                                         )
                                                      
                                                      +
                                                      D
                                                      
                                                         (
                                                         
                                                            h
                                                            ,
                                                            
                                                               a
                                                               k
                                                            
                                                         
                                                         )
                                                      
                                                      +
                                                      max
                                                      
                                                         (
                                                         
                                                            
                                                               O
                                                               j
                                                            
                                                            ,
                                                            
                                                               α
                                                               j
                                                            
                                                         
                                                         )
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                
                                                
                                                   
                                                      +
                                                      
                                                      
                                                         (
                                                         
                                                            
                                                               X
                                                               
                                                                  j
                                                                  k
                                                               
                                                               1
                                                            
                                                            −
                                                            1
                                                         
                                                         )
                                                      
                                                      H
                                                      ,
                                                      
                                                      j
                                                      ,
                                                      k
                                                      ∈
                                                      C
                                                      ∪
                                                      N
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              

Constraints (30) guarantee that accepted loads are served without violating the maximum permissible delay.
                                    
                                       (30)
                                       
                                          
                                             
                                                O
                                                k
                                             
                                             ≤
                                             
                                                α
                                                k
                                             
                                             +
                                             
                                                U
                                                k
                                             
                                             ,
                                             
                                             k
                                             ∈
                                             C
                                             ∪
                                             N
                                          
                                       
                                    
                                 
                              

The presented model is for a general case where lateness is allowed for serving loads. If no lateness is allowed, the model can be simplified by eliminating constraints (24)–(30) and modifying the model using the generated information in the preprocessing stage (Appendix A). This approach (i.e., handling time-based constraints outside the mathematical model) is problematic if lateness is allowed. The following example illustrates the potential issue.

We assume a small 10-city example within a circle-shape area with radial travel time of 12hours (cities are randomly selected from a 20×20 grid). It is also assumed that the dwell cost is $25/hour and the traveling cost (empty or loaded) is $60/hour. For ease of exposition, one truck (with no time restriction to go back to the depot) and five loads are taken into account. Fig. 3
                         depicts the transportation network along with travel times and the loads’ earliest and latest departure times. For instance, the travel time to serve load B is 5.4hours, and it can be picked up at city 4 between times 96 and 101 for delivery to city 7. The truck is at coordinate (9, 19) at the time of decision making (time 0). As mentioned earlier, three tasks are performed at the preprocessing stage. After updating the dynamic attributes of trucks and loads, it checks for feasibility of truck–load and load–load assignments. Finally, it identifies those solutions that cannot be part of the optimal solution. The last feature can be easily explained based on the first movement of the truck (which is located in city 5 at time 0). If the first load is accepted, the truck has two options: (1) it can go directly to the pickup location of load A (travel time 8.7hours) and wait for its availability (60 − 8.7 dwell time); (2) it can go to the depot (travel time 10.9hours) and dwell there before heading to city 1 (travel time 10.3hours) for serving the first load. The choice of the second alternative depends on the tradeoff between extra travelling cost (10.3+10.9 − 8.7)×60 and the saving in dwell cost (60 − 8.7)×25. Since the dwell cost saving outweighs the traveling cost increments, the first option is eliminated in the preprocessing stage (i.e., condition (3) is satisfied).

The problem arises if all time-based constraints are handled in the preprocessing stage (using the revised mathematical model in Appendix A). Based on the preprocessing outcome, it is feasible to serve load k directly after load j if k > j. The optimal solution of the integer programming model sends the truck to serve load A (through the depot) and the rest of the loads directly (without visiting the depot) one after another. In Fig. 3, the broken lines show the empty movement of trucks and the solid ones represent the loaded movements. After handling load A through the depot at time 60, the truck moves toward the pickup location of load B and reaches the location too early, so it must wait until time 96. The truck cannot be at the pickup location of load C before time 106.8, but serving that load is still acceptable. This delay directly impacts the time that the truck reaches the origin of load D (time 138.5) when load D is no longer available. In this example, the preprocessing stage fails because it only compares whether two loads can be served immediately one after the other without considering the previous load(s) of that sequence. Based on the preprocessing result, serving load D after load C would be feasible if the pickup time of load 3 is 106. This example illustrates the need for explicitly including time-based constraints into the mathematical model. Since the actual dwell and lateness at each pickup location cannot be computed before solving the model, those terms should be replaced by correct terms representing dwell and lateness costs.

@&#EXPERIMENTAL DESIGN@&#

In this section, we explain how the model's parameters are generated for use in the simulation study to provide useful insights. Our investigation of the academic literature and empirical reports suggested the potential influence of the following factors on a carrier's profitability: radius of service, trip length, load density, advance load information, and time windows. Having a quick look at the recent statistics of ATA (2013), we observe that the truckload market is highly fragmented where almost 90 percent of the carriers are small with six or fewer trucks. The Canadian statistics are very similar to the American ones. Moreover, as mentioned earlier, the smaller companies usually suffer more than big companies with a sophisticated network of lanes. Thus, we concentrate on small companies with six trucks.
                  


                     Radius of service: defined as the furthest distance from the depot that a truckload carrier is willing to carry a load. Two levels are considered for the radius of service: a minimum of 18 hours (driving) and a maximum of 36 hours (driving).
                  


                     Trip length: measured as travel time between a load's origin and destination. The test problems are generated in two categories called short and long trip-length groups. In the former, the majority of loads (80 percent) are shorter than the radius of service while in the latter the majority (80 percent) of loads are longer than the radius.
                  


                     Load density: number of loads entering the system per truck per week. Load density is inversely related to the average length of loads (Powell, 1996), which usually ranges between 2 and 2.5 loads (per truck per week) for large companies with the average load length between 2 and 4 days. Since this study targets small carriers with shorter trip lengths, load density is studied at two levels, 2.5 (low load density) and 5 (high load density) loads per truck per week.
                  


                     Advance load information (ALI): it is called knowledge window (KW) by Tjokroamidjojo et al. (2006) who define it as number of hours that loads’ information is available in advance. Since the trucking industry is identified with excess capacity and a high level of competitiveness, last-minute call for transportation services is very common in the industry. It is also unusual for a shipper to book a load more than 2 or 3 days in advance (Frantzeskakis & Powell, 1990). Thus, acquiring load information very far in advance (e.g., a week or so) does not provide practical managerial insights. That is why we focus our attention on the three ALI/KW levels: 24, 48, and 72 hours.
                  


                     Time windows: Following Tjokroamidjojo et al. (2006), hourly dwelling and lateness costs are set to be $25/hour. The maximum permissible delay for serving customers is examined at two levels: no lateness is allowed, and lateness is permissible in which the maximum lateness is drawn from a discrete uniform distribution with maximum of 5 hours.

The result of the abovementioned five factors at different levels becomes 48 combinations. We tested five replicates of each combination. Each replicate was a randomly generated instance of the experiments’ stochastic conditions (e.g., earliest availability of loads and city locations). We use 240 test problems (five replicates by 48 combinations) in our simulation study. In all conducted numerical experiments, it was assumed that there are 50 cities within an area with a predefined radius of service. The number of cities in the transportation network is referred to as network size. These potential cities are representative of loads’ origins and destinations. This approach is commonly used in the literature. For simulation studies, some authors consider that the shape of the service area is square (e.g., Özener & Ergun, 2008; Yang et al., 2004). To capture the radius of service as one of the transportation network settings, we assumed that the trucking company operates in a circle-shaped area. For each test problem, the parameters are generated as follows:

                        
                           •
                           To generate each load, an origin-destination pair is selected randomly from a 50-city network. The initial location of trucks is also determined by placing them randomly among the 50 cities.

The earliest loads availability is generated from an exponential distribution in which the average inter-arrival time is determined based on load density.

The average operating highway speed is used since the majority of cities are connected to each other via highways. The average operating speed is set to 55 mph, which is typical on U.S. highways (refer to the recent report by the U.S. Department of Energy, 2011).

In the trucking industry where drivers can easily be away from home between 1 and 4 weeks, most carriers try to have the drivers back home every fortnight (Powell, 1996). To be consistent with these statistics, this study sets the maximum number of hours that a driver can be away from home equal to 240 hours.

Fuel cost and driver wages are the major portion of the operational cost. However, there are other miscellaneous cost components such as insurance premiums and maintenance. Given that we consider dwelling and lateness cost separately, it is fair to set the operational cost equal to $1.10/mile (empty/loaded) and revenue to $2.25 per loaded mile. The earned revenue per mile also conforms to the TRANSCORE (provider of intelligent transportation systems) survey in 2011 from 600 small carriers. The 2:1 ratio of revenue to cost is also supported by the work of Gregory and Powell (2002).

The overall length of the planning horizon highly depends on the average speed of the transportation mode. The slower mode of transportation usually requires a longer overall planning horizon. For example, Choong, Cole, and Kutanoglu (2002) considered a 15-day and 30-day planning horizon in empty container management in which a barge was one of the transportation modes. A shorter planning horizon (20-day) was considered in the truckload industry by Tjokroamidjojo et al. (2006), Zolfagharinia and Haughton (2014). Similar to the latter study, we consider a three-week planning horizon with the time interval between two decision epochs equal to 12 hours.

In this section, we first explain how each test problem is handled systematically in a dynamic context. Then, the simulation results are presented and analyzed. We used AIMMS modeling language and Gurobi 5.1 as a solver to run the test problems. The whole algorithm was programmed in MATLAB 2012b and run on a 2.8gigahertz computer. As shown in Fig. 4
                     , the algorithm starts by setting the value of Θ for the deadhead coefficient policy. The clock is set equal to zero and the preprocessing engine is called every 12 hours (the time interval between two decision epochs) to update truck and load status and exclude infeasible assignments and non-optimal assignments. Then, loads with status 1, 2, and 3 are entered into the model. In other words, the loads that have been already delivered and the ones that are far in future (i.e., beyond the KW) do not enter into the model. The next step is to call the solver to solve the proposed MIP model to optimality. After the model is solved, the obtained schedule is implemented up to the next interval and checked for the termination condition (i.e., whether all the loads are considered during the overall planning horizon).

It is important to note that we need to record all the movements of trucks during the planning horizon since diversion of empty trucks is allowed. After the stopping criterion is satisfied, a simple algorithm tracks each truck's contribution to compute the system total profit for the middle 2 weeks of the study. The main reason for collecting data on just the middle 2 weeks is to control the anomalies of beginning and end-of horizon effects. For example, with KW = 72hours, the loads information of the second day must be known before the beginning of planning horizon. Thus, the problem is handled for the entire planning horizon while only the middle 2 weeks statistics (day 4 to day 17) are considered for further analysis in this paper.

As mentioned earlier, the Θ value can vary between 0 and 1. Six values are chosen for Θ: 0, 0.2, 0.4, 0.6, 0.8 and 1. Thus, all 240 generated test problems are solved six times, each time with one Θ value. In order to have a valid comparison, the obtained profit from the proposed policy is normalized by the optimal solution of the static version (when all loads information during the planning horizon is known in advance). Simply put, for each test problem, we divide the obtained profit of the Pure-Θ Policy by the static optimal solution. Because profit depends heavily on characteristics of the transportation network, normalization is essential in assuring fair comparison across different network settings.


                     Table 4
                      provides the averages of optimal profits of static versions along with CPU times (in seconds) and load rejection rates for low load density. Combinations are coded with three letters. The combination code represents radius of service (high/low), trip length (high/low), and load density (high/low), respectively. Some intuitive results can be observed from Table 4. For example, having more high-revenue loads (the majority of loads are long) reduces the rejection rate while increasing the CPU time. Moreover, if lateness is allowed, the profit improvement is higher when trucks operate in a smaller service area (i.e., radius is low).


                     Table 5
                      is similar to Table 4 but for the high load density combinations. Compared to Table 4, the higher load density does not necessarily increase the rejection rate because higher load density improves economy of scope (defined earlier) by lowering empty repositioning, thereby making low revenue loads more profitable. That is why increasing load density lowers the rejection rate when most loads are short. Another interesting observation is that the CPU time depends on the network settings. For example, it takes slightly more than 10 minutes on average to solve LLH coding with no lateness while HHH coding with lateness takes more than 50 hours to be solved to optimality.

The simulation result for the impact of Θ on the normalized profit during the middle 2 weeks period is shown in Fig. 5
                         for the case of low load density. Since the profit is normalized by the static optimal solution (which is usually an unrealistic benchmark), small ratios do not necessarily indicate a low performance of the policy (this will be discussed in the next section). Since the normalized profit does not show a remarkably different behavior to the choice of Θ with-and-without lateness, we first present the obtained results for the test problems with lateness allowed and then point out the differences if delay is not permissible. As a general observation, the policy produces a lower normalized profit if lateness is not allowed. The charts of Fig. 5 can be interpreted as follows.

                           
                              •
                              
                                 Fig. 5
                                 , Chart (a): Low service radius-Low trip length-Low load density (LLL)

Seen from chart (a), a properly tuned deadhead coefficient policy can obtain 80 percent of static optimal profit with 72hours KW. We also observe that the profit is sensitive around the best value of Θ but the sensitivity declines by extending the KW. For example, shifting from the best Θ of 0.8 to a value of 0.6 when lateness is allowed decreases the normalized profit by 9 percentage points (from 68 to 59 percent) for the smallest KW while it only drops by 8 and 5 percentage points for larger KWs.

                           
                              •
                              
                                 Fig. 5
                                 , charts (b): Low service radius-High trip length-Low load density (LHL)

A properly tuned deadhead coefficient policy of 
                           
                              Θ
                              =
                              0.6
                           
                        , yields the highest profit independent of the KW and the lateness option. The obtained normalized profit is the best across all combinations with low load density (almost 90 percent with KW = 72hours). The profit is less sensitive around the best value of Θ when the knowledge window is longer than 24hours. Thus, under this setting, the choice of Θ becomes more important when KW is limited to 1 day. For the no lateness option, it is more crucial to obtain loads information beyond the next day (under 
                           
                              Θ
                              =
                              0.6
                           
                        , the improvement is 16 percentage points, from 73 to 89 percent).

                           
                              •
                              
                                 Fig. 5, charts (c): High service radius-Low trip length-Low load density (HLL)

Unlike the previous combinations, the best Θ value (resulting in the highest profit) depends on KW and is identical for the no lateness option. The best Θ values for 24, 48, and 72hours advance load information are 0.4, 0.6, and 0.8, respectively. This intuition can be explained by looking at the problem from the dispatcher's point of view. Given that the carrier is operating in a large service area, the dispatching policy typically needs to be less conservative to become more profitable when the KW is shorter. The lower level of conservatism helps the carrier to improve load acceptance by taking more risk. Although a smaller Θ is recommended for a shorter KW, the profit will drop remarkably if the selected value is too small (e.g., 
                           
                              Θ
                              =
                              0.2
                           
                        ). The main reason is that most loads are short (low revenue) so taking more risk does not necessarily lead to a higher profit.

                           
                              •
                              
                                 Fig. 5
                                 , charts (d): High service radius-High trip length-Low load density (HHL)

Similar to the HLL combination, the Θ value that produces the highest normalized profit depends on the KW. Using the same approach, the dispatching policy needs to be more optimistic in order to gain more profit when KW becomes smaller. However, unlike the HLL combination, a low value of Θ (e.g., 0.2 or 0) still produces a high profit for short KW (e.g., 24hours) because the dispatching policy tends to be less conservative (smaller Θ) compared to the HLL setting in which a majority of loads are low revenue.


                        Fig. 6
                         depicts the simulation results on the normalized profit for the case of high load density. The charts of this figure are interpreted as follows.

                           
                              •
                              
                                 Fig. 6
                                 , chart (a): Low service radius-Low trip length-How load density (LLH)

If chart (a) of Fig. 5 is compared to chart (a) of Fig. 6, it is easy to explain why a smaller Θ (
                           
                              Θ
                              =
                              0.4
                           
                        ) yields a higher normalized profit. A less conservative dispatching policy makes more profitable choices because the number of incoming loads is higher in the current combination. In the case of no lateness option, the dispatching policy tends to be more conservative because the loads cannot be served even if they are one minute late.

                           
                              •
                              
                                 Fig. 6
                                 , chart (b): Low service radius-High trip length-How load density (LHH)

The normalized profit is insensitive to Θ in the range of 0.4–0.8 regardless of the size of the knowledge window and lateness option. This can be explained from the fact that even if the dispatching policy's level of conservatism leads to different loads selection, there are enough high revenue loads to make almost the same amount of profit. This argument is also valid when the service radius is high (Fig. 5, chart (d)).

                           
                              •
                              
                                 Fig. 6
                                 , chart (c): High service radius-Low trip length-High load density (HLH)

The best Θ value (resulting in the highest profit) depends on KW. The best Θ values for 24, 48, and 72hours advance load information are 0.4, 0.6, and 0.8, respectively. Under this setting, the decision maker with the shorter knowledge window should select a less conservative policy to make more profitable decisions.

We have examined the performance of the algorithm under a variety of network settings. It is interesting to consider the settings often seen in practice.
TRANSCORE
 conducted a carrier benchmark survey on more than 600 for-hire trucking companies in 2011 (www.transcore.com). The majority of surveyed companies (66 percent) were small companies with fewer than six trucks. The average trip length reported was about 900 miles with an average of slightly less than three loads per truck per week. The reported characteristic is very close to the LHL network setting examined in our simulation study. Thus, it is fair to state that the Pure-Θ Policy can produce quality solutions (almost 90 percent of static optimal solution) for a practical transportation network setting.

The benefit of advance load information is briefly discussed under the best choice of Θ. Fig. 7
                        a illustrates the normalized profit for all combinations with low load density. As explained earlier, the coding represents radius of service, trip length, and load density, respectively. For example LLL-24 is where all factors have low values and only first-day load information is available. Some interesting insights can be drawn from this figure. First, the Pure-Θ Policy often performs better when lateness is allowed. Second, the majority of benefit is gained by acquiring the second-day load information. Although access to the third-day load information yields much smaller marginal benefits, it is still worthwhile when the majority of loads are short because it helps the carrier to select more profitable sequence(s) of short loads. However, this small benefit disappears when most loads are high revenue. Finally, access to the second-day load information becomes crucial when the carrier operates in a larger service area (i.e., larger radius of service). This is so because only one-day advance load information is not enough for the dispatcher to position the trucks in a vast area and thus many profitable loads might be lost.

The normalized profit for all combinations with high load density is shown in Fig. 7b. Similar results are obtained from these test problems. At first glance, we can observe that the policy is often more effective when lateness is allowed. There is a benefit from getting advance load information, however, the margin of benefit decreases as KW increases to the third-day load information. Moreover, similar to the low-density case, the second-day load information is very important for carriers that operate in a larger service area. Finally, for carriers that operate in a smaller service area, the benefit of ALI is larger when the majority of loads are short. One possible explanation is that advance load information in such a setting provides a higher level of flexibility for the dispatcher to select and determine a sequence(s) of loads.

Based on the evaluation of the Pure-Θ Policy, we observed its very good performance for one of the most practical transportation settings. For some less practical settings, as mentioned earlier, low optimality ratios cannot be considered with certainty as a low performance of the Pure-Θ Policy. Thus, we take the following two steps for additional analysis. First, the enhanced version of the Pure-Θ Policy is developed based on a widely used approach in the DVRPs literature. Second, the Pure-Θ Policy and its enhanced version are numerically compared with two other dispatching methods to provide a better understanding of their efficiency.

The literature approach we used to enhance the Pure-Θ Policy is the multiple scenario approach, hence we refer to this enhanced version as the MSA-Θ Policy. The multiple scenario approach (also referred to as sampling method) is a widely used approach for incorporating common features of solutions to create a good plan (Pillac, Gendreau, Guéret, & Medaglia, 2013).


                        Bent and Van Hentenryck (2004) proposed the multiple scenario approach (MSA) for partially dynamic vehicle routing problems with stochastic demands. Experimental results show a dramatic improvement compared with the approaches not using stochastic demand information. Ichoua et al. (2006) also proposed a solution method for a dynamic stochastic vehicle routing problem with time windows (VRPTW). Their proposed method, which extended the parallel Tabu search by Gendreau, Guertin, Potvin, and Taillard (1999), benefits from stochastic knowledge of future demand.


                        Hvattum et al. (2006) studied dynamic stochastic vehicle routing problems with time windows. Minimizations of the total traveling distance and the number of used vehicles were considered as the objective functions. They developed a deterministic model for the VRPTW and then extended it to a two-stage stochastic one. Since computing the expected recourse function is extremely hard, a sampling approach called hedging heuristic was proposed. A recent research in the dynamic stochastic context is the study by Schilde, Doerner, and Hartl (2011). They analyzed a daily problem arising in the Austrian Red Cross. The problem of serving patients between their home and hospital was modeled as dial-a-ride with the expected return transport. To solve the problem, they proposed four variants of variable neighborhood search. Only two of the proposed meta-heuristics take the advantage of stochastic demand information.

Since all the multiple scenario approaches in the literature were used for less than truckload problems, the method had to be modified for a proper implementation of our MSA-Θ Policy in truckload situations. Among the available approaches in the literature, the hedging heuristic by Hvattum et al. (2006) deals with multiple period problems, which are closer to the proposed problem in this study. The MSA can improve the deadhead coefficient policy from two aspects: (1) it can suggest a dwelling strategy before returning drivers to the home depot and (2) it can virtually extend the knowledge window of the dispatcher by generating multiple scenarios.

At each decision epoch, based on the predefined knowledge window, new load(s) may enter into the system. Since the dispatcher does not have any information about the loads’ arrivals after the KW, a number of scenarios are generated for an interval (referred to as the scenario interval) beyond the KW of the dispatcher. These loads are generated based on the transportation network characteristics. Since the MSA operates with a number of scenarios, it first needs a consensus function to develop a final plan (called the distinguished plan) to be implemented at each decision epoch. Second, it should decide whether to keep drivers at the delivery location of the last assigned load or return them to the depot. Table 6
                         presents the outer loop of the MSA-Θ Policy while Table 7
                         explains how a distinguished plan is formed at each decision epoch.

Based on the abovementioned points, the MSA has different parameters, which should be set carefully for achieving a quality solution. These parameters are (1) the number of generated scenarios (ω) at each decision epoch, (2) the backhaul (deadhead) coefficient (Θ), (3) scenario interval (δ), (4) acceptance threshold (Ψ), and (5) waiting threshold (Φ). The first parameter is self-explanatory and the second one is the deadhead coefficient discussed when introducing the Pure-Θ Policy. Acceptance threshold (Ψ) is a measure to determine frequently accepted loads in the ω scenarios.

A load is considered frequently accepted if the ratio of scenarios where the load is accepted to all the ω scenarios (we call it as the relative frequency of the selected load) is greater than or equal to Ψ. The scenario interval (δ) is the time interval after the KW for which the algorithm generates future loads (called stochastic loads). Finally, the waiting threshold (Φ) is used to decide whether a truck should wait or return to the depot after serving the last load of the sequence. In a single scenario, scheduling a truck to serve a stochastic load (as the last load) is a direct indication that waiting for future loads is justifiable. Thus in all ω scenarios, one can count the number of scenarios where waiting is the best decision for a truck when it gets to the delivery location of the last load. If the ratio of this number to ω is larger than the waiting threshold (Φ), the recommendation for that truck is to wait. The waiting decision can be changed at the next decision epoch.

The preliminary numerical experiments reveal that increasing the number of scenarios slightly above 25 (e.g., 30 or 40) is not statistically helpful to improve the accuracy of the algorithm. Based on this observation, we set the number of scenarios equal to 25 and tune the other parameters as follows. The values 0.2, 0.5 and 0.8 are considered for each parameter Φ, Ψ, and Θ. They were chosen because preliminary experiments showed that the algorithm is insensitive within ±0.1 of these selected values. The scenario interval (δ) is set to 1, 2, and 3 days. Although the number of parameters was reduced to only four factors with a few levels, the resulting 81 combinations is still large. In order to overcome this issue, we use the idea of orthogonal array in Taguchi method (Taguchi & Yokoyama, 1994). This method is a statistical tool which helps us not only to identify the importance of each parameter but also suggests which combination of parameters result in a higher performance without checking all possibilities. Using Taguchi method, the parameters of MSA are set by checking only nine setting combinations (L9 design). The parameters’ values (Φ = 0.5, Ψ = 0.5, 
                           
                              Θ
                              =
                              0.8
                           
                        ) consistently result in higher performance of the algorithm across different combinations. However, the best choice of scenario interval (δ) depends on how much load information is available at the time of decision making. The δ value decreases when the KW increases, so the values are 1, 2, and 3 days for 72, 48, and 24hours KWs, respectively.

The proposed policies (Pure-Θ and MSA-Θ) are compared with two other dispatching methods. The first one is rooted in practice and used by small trucking companies (called a Practical Policy). The second one is only based on the multiple scenario approach and statistically independent of Θ value (called Pure MSA). Given the distinct features of our problem when compared to other problems reported in the literature (e.g., returning trucks back home on a regular basis), there are limited appropriate policies available.


                        Practical Policy (PP): The steps of this policy are developed according to the Operations and Traffic Department of Logikor Company (introduced earlier). The details of this algorithm are depicted in Table 8
                        . This process is often a manual task in small trucking companies. The dispatcher starts with a truck with the lowest remaining service hours. Then, the loads are visualized on a map and a sequence with the largest positive contribution is assigned to the truck. Although this is a manual process, we improve it by checking all feasible sequences (this is not a computational drawback because of the small number of new loads at each decision time). Finally, the process continues for the remaining trucks. The contribution of each truck is computed based on the earned revenue, moving cost (either empty or loaded), lateness cost, and dwelling cost. Moreover, in order to reduce the attractiveness of isolated locations, a portion of the average empty movement cost from the delivery location of the last load to other pickup locations is deducted from the truck contribution. Use of a similar approach to penalize isolated locations can be found in the literature (e.g., Yang et al., 2004). This portion is almost half of the overall average cost to avoid overestimating the potential cost of the next empty movement. This is to hedge against possible empty movement cost as a result of choosing a particular load.


                        Pure MSA: This policy is MSA-Θ
                        where the scenario interval(δ) is large enough. As explained in Section 2, the Θ coefficient only applies to the cost of the last movement. Although the Θ impact is remarkable with practical knowledge windows (e.g., 2 or 3 days), a larger knowledge window lowers this impact relative to cost of other movements. By applying the statistical analysis, we observed that the Θ impact becomes insignificant if the scenario interval (δ) is set to at least 10 days regardless of the KW choice. Without doubt, Pure MSA is not a computationally efficient method because of a long scenario interval. But, it can be viewed as a proper benchmark because of its solution quality. The other parameters of this policy are tuned with aid of the same previous approach (Taguchi method): 
                           
                              ω
                              =
                              50
                           
                        , Φ = 0.5, and Ψ = 0.5.

As mentioned earlier, the Pure-Θ Policy performs slightly better when lateness is allowed. Thus, we considered combinations without the lateness option to provide sterner test of our proposed methods. Table 9
                         provides information on CPU time and normalized profit (ratio of optimality) for all four dispatching policies under different network settings. Some interesting and intuitive results can be obtained by comparing the Pure-Θ Policy with the MSA-Θ Policy. First, the benefit of scenario generation becomes more important when the dispatcher knowledge window is limited. Thus, with only one-day load information, the MSA-Θ
                        Policy yields a higher normalized profit than the Pure-Θ Policy in almost all factor combinations. Next, while it is true that CPU time increases dramatically compared to the Pure-Θ Policy, the solution times at each decision epoch are still less than 1 minute. Finally, the impact of scenario generation disappears when load density is high, most loads are long, and more than one day ALI is available. It is easy to see that in such a good market, the Pure-Θ Policy brings the same benefit but much faster. Table 9 also shows that, in comparison to the PP, our Pure-Θ Policy yields consistently superior solutions; beyond 24 hours of ALI, the gap is particularly substantial. The Pure MSA Policy is just marginally superior to the MSA-Θ Policy: an average of only 1.2 percentage points with ALI = 24. However, as the table also shows, that small improvement in solution quality comes at a significant computational price. This reinforces the earlier observation that our proposed policies represent a better tradeoff between solution quality and run time. Thus, whether compared to what occurs in practice (the PP) or to a more sophisticated model grounded in the scientific literature (i.e., the Pure MSA Policy), it is clear that the policies we have proposed are very competitive alternatives. Although all the analyses were done for the combinations with no lateness option, the performance of our proposed methods does not change compared to other methods when lateness is allowed.

There are many research studies on long haul transportation dispatching rules that did not address the requirement of drivers and trucks to regularly return to their homes. This overestimates the capacity of the transportation network. Moreover, the majority of them assume that all loads information is available in advance. Thus, many of these models are not suitable to be implemented in a dynamic context. One contribution of this study is that it develops a comprehensive two-index MIP model that is flexible enough to include many operational details and can be implemented in a dynamic environment by using a rolling horizon approach. The two-index MIP is more efficient compared to existing general three-index models in the literature. Using the characteristics of the problem at the preprocessing stage along with the two-index MIP enables us to find the optimal solution of the static problem for small trucking companies.

Another contribution of this research is to develop a policy that can help carriers improve their razor-thin profit. To achieve this goal, a simple policy (deadhead coefficient policy/Pure-Θ Policy) was proposed and its performance evaluated under a wide variety of network settings through the simulation study. Although the static optimal solution is not a realistic bound, it is used as a benchmark to normalize the obtained profit of the Pure-Θ Policy. The policy performs the best (almost 90 percent of static optimal solution) in one of the practical transportation network settings when the second-day load information is available, regardless of whether the lateness option is in effect.

Finally, we incorporated the idea of a multiple scenario approach in hedging heuristic by Hvattum et al. (2006) to improve the Pure-Θ Policy. The MSA-Θ Policy has a more noticeably higher solution quality when the knowledge window is limited. The average ratio of optimality improves from 45.4 to 51.4 percent when only the next day load information is available. The margin of benefit will decrease as the dispatcher knowledge window increases. Moreover, the possible benefit can disappear if a carrier operates in a good market with more than one day ALI. Also, the Pure-Θ Policy and MSA-Θ Policy were compared against two other policies (namely a Practical Policy and the Pure MSA). The numerical experiments show that our proposed policies are competitive dispatching alternatives in terms of solution quality and computational efficiency.

In practice, the home depot is usually close to the area with more demands (loads). Since there is one home depot in our simulation study and loads are uniformly generated within the area of service, it is a reasonable assumption to consider the location of the depot at the center. Finding the optimum location of depot is beyond the scope of this work and can be viewed as a future research direction. Another possible research direction is to address information uncertainty since loads information (e.g., pick-up time or cancellation) may change even after it is received by the carrier. Issues such as truck breakdowns and accidents can also be considered by relaxing the assumption of constant traveling time. Eventually, designing efficient dispatching policies to handle large trucking companies with a few hundred trucks and drivers can be viewed as other interesting extensions.

Supplementary material associated with this article can be found, in the online version, at doi:10.1016/j.ejor.2016.01.006.


                     
                        
                           Image, application 1
                           Image, application 1
                           
                        
                     
                  

@&#REFERENCES@&#

