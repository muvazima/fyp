@&#MAIN-TITLE@&#A simultaneous sample-and-filter strategy for robust multi-structure model fitting

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Proportion of good/bad hypotheses is critical to fitting process.


                        
                        
                           
                           A sample-and-filter strategy for robust multi-structure model fitting.


                        
                        
                           
                           Simultaneously guides the sampling and removes irrelevant hypotheses.


                        
                        
                           
                           Output a small hypothesis set with a high concentration of good hypotheses.


                        
                        
                           
                           Improve the accuracy of mode seeking-based fitting methods.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Robust model fitting

Multiple structures

Guided sampling

Hypothesis filtering

Preference analysis

@&#ABSTRACT@&#


               
               
                  In many robust model fitting methods, obtaining promising hypotheses is critical to the fitting process. However the sampling process unavoidably generates many irrelevant hypotheses, which can be an obstacle for accurate model fitting. In particular, the mode seeking based fitting methods are very sensitive to the proportion of good/bad hypotheses for fitting multi-structure data. To improve hypothesis generation for the mode seeking based fitting methods, we propose a novel sample-and-filter strategy to (1) identify and filter out bad hypotheses on-the-fly, and (2) use the remaining good hypotheses to guide the sampling to further expand the set of good hypotheses. The outcome is a small set of hypotheses with a high concentration of good hypotheses. Compared to other sampling methods, our method yields a significantly large proportion of good hypotheses, which greatly improves the accuracy of the mode seeking-based fitting methods.
               
            

@&#INTRODUCTION@&#

Robust model fitting is required in various computer vision tasks such as the estimation of projective entities from multi-view images [1]. In practice, data are unavoidably contaminated by outliers due to sensing or preprocessing errors. Furthermore multiple instances (or structures [2]) of the geometric model often exist in the data, such as in motion segmentation [3]. This not only raises the outlier rate through pseudo-outliers [4], but also necessitates model selection to detect and estimate multiple structures.

We distinguish two major paradigms among current robust estimators. The first is the so called “hypothesize-and-verify” methods (e.g., RANSAC [5], ASSC [6], pbM-estimator [7]) which repeatedly generate model hypotheses fitted on randomly sampled minimal subsets of the data, and then score the hypotheses using a robust criterion. To fit multiple structures, the inliers corresponding to the fitted structure are removed and the overall process is repeated. The second class of methods is mode seeking-based methods (e.g., Randomized Hough Transform [8], Mean Shift [9]), where each detected mode corresponds to a structure in the data. The mode seeking is accomplished in the parameter space using model hypotheses as samples. More recently, methods which cluster the data by constructing data similarity functions induced by model hypotheses [10,11] have also been proposed. These are also parameter space analysis methods based on using collections of hypotheses to cluster data, and so we include these methods in the second paradigm.

Hypothesis sampling underpins both paradigms, and obtaining a good set of hypotheses is crucial for success. However, the difference in the sampling requirements of the two paradigms has not been generally emphasized. Methods in the first group focus on quickly retrieving a sufficiently good hypothesis which scores highly in the robust criterion; various guided sampling schemes have been proposed to this end [12–15]. Even when invoked under the fit-and-remove procedure (thereby turning an essentially “single dominant model plus outliers” approach into a “multiple models plus outliers” one); within each loop the underlying assumption is that the method is currently searching for only one structure of interest, and the aim of sampling is to recover a single good hypothesis of a genuine structure.

On the other hand, the success of methods in the second group depends on retrieving a large proportion of good hypotheses (from all valid structures) relative to bad hypotheses, such that clusters or modes can be easily detected without being overwhelmed or swamped by bad or irrelevant hypotheses. Contrast this to the first group of methods where the relative proportions of good and bad hypotheses are inconsequential as long as a single good hypothesis (from one of the structures) is produced within reasonable time.

Our aim in this paper is to improve hypothesis sampling for methods in the second group, which has been received comparatively less attention. Conventional guided sampling schemes [12–15] concentrate on rapidly yielding a hypothesis with high scores for methods in the first group, and ignore the danger posed by a large number of bad hypotheses towards mode detection. Moreover, producing these irrelevant hypotheses wastefully consumes large chunks of the time budget.

To optimize hypothesis sampling for mode seeking-based methods, we present a novel sample-and-filter strategy for hypothesis generation. Our strategy aims to provide a hypothesis set with a high concentration of good hypotheses as input to mode seeking-based methods for achieving more accurate results. The basic idea of our strategy (illustrated in Fig. 1
                     )) is to (1) identify and filter out bad hypotheses on-the-fly during sampling, and (2) use the remaining good hypotheses to guide the sampling to further expand the set of good hypotheses. Note that all the above steps are accomplished in the time budget for hypothesis sampling.

A recent guided sampling scheme was proposed for multi-structure data (Multi-GS) [17]. However like other guided sampling schemes it ignores the proportion of bad hypotheses generated. Our work extends and improves Multi-GS in two ways: (1) In [17] the idea of exploiting the correlation of preference of data towards putative hypotheses was proposed. Here we show that a dual preference (i.e., preference of putative hypotheses towards data) is possible and computationally more attractive. (2) We introduce our sample-and-filter strategy based on the above dual preference to actively raise the proportion of good hypotheses generated. This significantly improves the accuracy of mode-seeking based fitting methods, without sacrificing computational efficiency. Initial versions of our work appeared in [18,19] – see the next section for an overview of the relationship to this paper.

The rest of the paper is organized as follows: Section 2 provides a survey of related work. Section 3 introduces basic notions and notations for our two proposed sample-and-filter methods in Sections 4 and 5. Section 6 presents the experimental results and we draw conclusions in Section 7.

@&#RELATED WORK@&#

Many previous methods were proposed to improve hypothesis generation for hypothesize-and-verify fitting methods. Guided-MLESAC [14] exploits the matching scores of correspondences (e.g., obtained by SIFT matching [22]) to calculate the inlier probability, such that the correspondences with higher scores are more likely to be sampled. PROSAC [15] rearranges the order of data being sampled by the matching scores (distance ratio of the best and second match), such that it focuses on sampling the highly scored correspondences at the early stages. The problem with these methods is that scenes with repeated patterns (e.g., similar looking windows on building facades) may cause their failure. Moreover, inliers from different structures are essentially correct correspondences, thus their matching scores can be equally high. As a result, these methods will unwittingly select inliers from different structures into the same minimal subset.

Several methods were proposed to use spatial assumptions for guided sampling. In [20,12], inliers are assumed to be spatially closer to each other, thus they concentrate the sampling on nearby data. SCRAMSAC [21] performs a spatial consistency check to prune the false correspondences prior to the sampling. However, the assumptions of those methods are easily violated on highly contaminated data, since the outliers are unavoidably included in the neighborhood of inliers, and inliers of different structures can also be closer to each other in multi-structure data.

Another existing approach is to sample the data from the best hypothesis generated so far. For example, LO-RANSAC [13] embeds an inner RANSAC procedure, such that the sampling can be focused on the consensus set of the best solution obtained so far. To determine the consensus set, an inlier threshold is often required. Setting the “optimal” inlier threshold for multi-structure data can be difficult as all valid structures may not agree to a single inlier threshold.

Multi-GS [17] was recently proposed to accelerate the hypothesis generation for multi-structure data. Multi-GS computes the conditional sampling weights from the pairwise data similarity. In [17], experimental results have shown that Multi-GS can quickly retrieve and generate more good hypotheses (on all valid structures) than the conventional guided sampling methods [12–15]. However, the proportion of bad hypotheses generated is also ignored in Multi-GS.

We emphasize that our work in this paper is to optimize the hypothesis generation for mode seeking-based fitting methods. In contrast, previous sampling methods emphasize on quickly retrieving a good hypothesis for hypothesize-and-verify fitting methods, and ignore the danger posed by a large number of bad hypotheses generated during the sampling process. As a result, previous guided sampling techniques may not be suitable for model fitting based on mode detection (e.g., Mean Shift [9]) or clustering (e.g., J-Linkage [10]), since clusters or modes can be easily overwhelmed or swamped by a large number of bad hypotheses. We show in Section 6.2 how this affects the accuracy of mode seeking-based model fitting.

This paper proposes two alternative methods to efficiently sample and filter hypotheses (the two are then compared with each other and with competing sampling approaches). Though both of these approaches share a “preference analysis” flavor with Multi-GS, that approach had no hypothesis filtering and is less computationally efficient than the methods proposed here. Our first proposed sample-and-filter method ITKSF (Section 4) is a substantial improvement on, but based upon, that presented in [18]. Our second proposed method DHF (Section 5) is essentially identical to that we presented in [19]. However, unlike the papers in which the ideas of these algorithms first appeared, in this paper we do not provide a final multi-structure fitting stage, preferring instead to emphasize and focus on the issue of hypothesis generation and hypothesis pruning. In addition, we more extensively compare and benchmark these core ideas (including against each other) as isolated components and as components “feeding into” three established mode seeking-based and data clustering-based fitting methods.

In this section, we present basic notions and notations needed for our two sample-and-filter methods (ITKSF in Section 4 and DHF in Section 5). The foundation of our two methods is a preference approach to hypothesis filtering.

A naive approach to hypothesis filtering is to threshold the consensus set size. However, this approach requires prior knowledge of inlier threshold to determine the consensus set, and the minimum number of inliers for thresholding. As we show later, our preference approach does not rely on any prior information about the data.

Previous work [11,17] proposed to use the data preference to hypotheses for fitting multi-structure data and accelerating hypothesis generation. In contrast, our aim is to discover and filter the relatively bad hypotheses. This is achieved by analyzing the data preference as well as the dual preference (i.e., hypothesis preference to data). Moreover, we show in the next two sections that the remaining hypotheses after filtering can be used to further guide the sampling. The output of our sample-and-filter method is a hypothesis set with high concentration of good hypotheses, which facilitates mode seeking methods to more accurately detect the genuine structures in the data.

Let 
                           
                              X
                              =
                              
                                 
                                    {
                                    
                                       
                                          x
                                       
                                       
                                          i
                                       
                                    
                                    }
                                 
                                 
                                    i
                                    =
                                    1
                                 
                                 
                                    N
                                 
                              
                           
                         be a set of N input data and 
                           
                              Θ
                              =
                              
                                 
                                    {
                                    
                                       
                                          θ
                                       
                                       
                                          j
                                       
                                    
                                    }
                                 
                                 
                                    j
                                    =
                                    1
                                 
                                 
                                    M
                                 
                              
                           
                         be a set of M hypotheses (where each hypothesis θ
                        
                           j
                         is usually obtained from a minimal subset of p data: e.g., p
                        =2 for line fitting). Note: to assist the reader in reconciling indices, upper indices will always range over data and lower indices will range over hypotheses. Though the former clashes with the notation for exponents, our use of exponents is rare and will be obvious in context.

For each datum x
                        
                           i
                        , we compute and sort its absolute residuals 
                           
                              [
                              
                                 
                                    r
                                 
                                 
                                    1
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    r
                                 
                                 
                                    2
                                 
                                 
                                    i
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    r
                                 
                                 
                                    M
                                 
                                 
                                    i
                                 
                              
                              ]
                           
                         as measured to M hypotheses, such that 
                           
                              
                                 
                                    r
                                 
                                 
                                    
                                       
                                          κ
                                       
                                       
                                          1
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              ⩽
                              ⋯
                              ⩽
                              
                                 
                                    r
                                 
                                 
                                    
                                       
                                          κ
                                       
                                       
                                          M
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                           
                        . This induces a permutation
                           
                              (1)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       (
                                       i
                                       )
                                    
                                 
                                 =
                                 [
                                 
                                    
                                       κ
                                    
                                    
                                       1
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       κ
                                    
                                    
                                       2
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       κ
                                    
                                    
                                       M
                                    
                                    
                                       i
                                    
                                 
                                 ]
                                 ,
                              
                           
                        which essentially represents the data preference of x
                        
                           i
                         by ranking M hypotheses, i.e., x
                        
                           i
                         is more likely to be an inlier to the hypotheses which have higher rank. Fig. 2
                         depicts an example of data preferences. It shows that inliers from the same structure share very similar data preferences, e.g., both x
                        1 and x
                        2 give higher rank to hypotheses θ
                        6, θ
                        7 and θ
                        8.

Likewise, we can capture the preference of a hypothesis θ
                        
                           j
                         (for data points) by sorting its absolute residuals 
                           
                              [
                              
                                 
                                    r
                                 
                                 
                                    j
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    r
                                 
                                 
                                    j
                                 
                                 
                                    2
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    r
                                 
                                 
                                    j
                                 
                                 
                                    N
                                 
                              
                              ]
                           
                        , such that 
                           
                              
                                 
                                    r
                                 
                                 
                                    j
                                 
                                 
                                    
                                       
                                          λ
                                       
                                       
                                          j
                                       
                                       
                                          1
                                       
                                    
                                 
                              
                              ⩽
                              ⋯
                              ⩽
                              
                                 
                                    r
                                 
                                 
                                    j
                                 
                                 
                                    
                                       
                                          λ
                                       
                                       
                                          j
                                       
                                       
                                          N
                                       
                                    
                                 
                              
                           
                        . The hypothesis preference is encapsulated in the permutation
                           
                              (2)
                              
                                 
                                    
                                       σ
                                    
                                    
                                       (
                                       j
                                       )
                                    
                                 
                                 =
                                 [
                                 
                                    
                                       λ
                                    
                                    
                                       j
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       λ
                                    
                                    
                                       j
                                    
                                    
                                       2
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       λ
                                    
                                    
                                       j
                                    
                                    
                                       N
                                    
                                 
                                 ]
                                 .
                              
                           
                        
                     

For instance, Fig. 3
                         shows that inliers of a hypothesis are more likely to have higher rank (darker dots), and the hypotheses rank the data similarly if they are corresponding to the same structure (left and middle).

In practice, we work with top-k lists rather than full rankings. For each datum x
                        
                           i
                        , we denote the first k elements in its preference τ
                        (i) by 
                           
                              
                                 
                                    τ
                                 
                                 
                                    k
                                 
                                 
                                    (
                                    i
                                    )
                                 
                              
                              =
                              [
                              
                                 
                                    κ
                                 
                                 
                                    1
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    κ
                                 
                                 
                                    2
                                 
                                 
                                    i
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    κ
                                 
                                 
                                    k
                                 
                                 
                                    i
                                 
                              
                              ]
                           
                        , i.e., the k hypotheses most preferred by x
                        
                           i
                        . The top-k list for the preference of a hypothesis is defined analogously. Henceforth we abuse notation by using the same symbol for top-k lists and permutations to avoid a proliferation of symbols but the interpretation should be obvious from the context.

Here, we describe a distance measure that will be used for comparing preferences in our methods. Recall that we work with top-k lists rather than full rankings. To measure “distances” between top-k lists, we employ the Spearman Footrule (SF) distance [23].

Given two top-k lists τ
                        (1) and τ
                        (2), we denote a set of elements contained in τ
                        (1) by D(τ
                        (1)) and the position of the element κ
                        ∈
                        D(τ
                        (1)) in τ
                        (1) by 
                           
                              
                                 
                                    κ
                                 
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          (
                                          1
                                          )
                                       
                                    
                                 
                              
                           
                        , similarly for τ
                        (2). The SF distance between τ
                        (1) and τ
                        (2) is defined as
                           
                              (3)
                              
                                 F
                                 (
                                 
                                    
                                       τ
                                    
                                    
                                       (
                                       1
                                       )
                                    
                                 
                                 ,
                                 
                                    
                                       τ
                                    
                                    
                                       (
                                       2
                                       )
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          κ
                                          ∈
                                          D
                                          (
                                          
                                             
                                                τ
                                             
                                             
                                                (
                                                1
                                                )
                                             
                                          
                                          )
                                          ∪
                                          D
                                          (
                                          
                                             
                                                τ
                                             
                                             
                                                (
                                                2
                                                )
                                             
                                          
                                          )
                                       
                                    
                                 
                                 |
                                 
                                    
                                       κ
                                    
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             (
                                             1
                                             )
                                          
                                       
                                    
                                 
                                 -
                                 
                                    
                                       κ
                                    
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             (
                                             2
                                             )
                                          
                                       
                                    
                                 
                                 |
                                 ,
                              
                           
                        where we use k
                        +1 for 
                           
                              
                                 
                                    κ
                                 
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          (
                                          1
                                          )
                                       
                                    
                                 
                              
                           
                         if κ
                        ∉
                        D(τ
                        (1)), similarly for τ
                        (2).

In this section, we present our first sample-and-filter method for hypothesis generation (namely ITKSF). The basis of ITKSF is a preference-based filtering scheme, which identifies good/bad hypotheses via clustering. We first describe this filtering scheme in Section 4.1, and then show how the identified good hypotheses are used to trigger a conditional sampling scheme in Section 4.2. The overall algorithm of ITKSF is presented in Section 4.3.

Our goal here is to characterize the hypotheses using the correlation of data preferences, and perform clustering to separate good/bad hypotheses. Note: in our previously published version [18] we used the same basic ideas but with an important difference highlighted below.

First, we derive a data similarity measure based on the observation given in Fig. 2 that the inliers of a structure have similar preference to hypotheses. A similarity measure between two data x
                        
                           i
                         and 
                           
                              
                                 
                                    x
                                 
                                 
                                    
                                       
                                          i
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                         is defined as
                           
                              (4)
                              
                                 z
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       x
                                    
                                    
                                       
                                          
                                             i
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 )
                                 =
                                 1
                                 -
                                 
                                    
                                       1
                                    
                                    
                                       k
                                       ×
                                       (
                                       k
                                       +
                                       1
                                       )
                                    
                                 
                                 F
                                 (
                                 
                                    
                                       τ
                                    
                                    
                                       (
                                       i
                                       )
                                    
                                 
                                 ,
                                 
                                    
                                       τ
                                    
                                    
                                       (
                                       
                                          
                                             i
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                    
                                 
                                 )
                                 ,
                              
                           
                        where τ
                        (i) is the top-k preference of x
                        
                           i
                         (Eq. (1)) and F(·,·) is the SF distance (Eq. (3)). Note that 
                           
                              z
                              (
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    x
                                 
                                 
                                    
                                       
                                          i
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              )
                           
                         ranges between 0 and 1. The higher 
                           
                              z
                              (
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    x
                                 
                                 
                                    
                                       
                                          i
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              )
                           
                         means x
                        
                           i
                         and 
                           
                              
                                 
                                    x
                                 
                                 
                                    
                                       
                                          i
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                         are more likely from the same structure (and therefore are not outliers).

To illustrate our ideas, we use the input data shown in Fig. 4
                        (a), and the 8-pt algorithm [1] to randomly generate 1000 hypotheses. Fig. 4(b) shows that the average of similarity values between two data from the same structure is always higher than that from different structures under all possible values of k. This supports the observation in Fig. 2 that inliers from the same structure tends to have strong coherence in their preferences to hypotheses.

Analogously a good hypothesis is expected to include inliers of the same structure in its top preference, and also it should be most preferred by the inliers of the same structure. With the data similarity measure defined as above, we characterize each hypothesis θ
                        
                           j
                         by examining how data rank θ
                        
                           j
                         in their data preferences, and how data are ranked in the hypothesis preference of θ
                        
                           j
                        .

Let Ω
                        
                           j
                        
                        ={i
                        ∈{1,…,
                        N}∣j
                        ∈
                        D(τ
                        (i))} be the indices of data containing hypothesis θ
                        
                           j
                         in their top-k preferences. We construct a two dimensional feature vector [α
                        
                           j
                        ,
                        β
                        
                           j
                        ] for a hypothesis θ
                        
                           j
                        , where α
                        
                           j
                         is the average of similarity values of data in Ω
                        
                           j
                        , i.e.,
                           
                              (5)
                              
                                 
                                    
                                       α
                                    
                                    
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         Ω
                                                      
                                                      
                                                         j
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          
                                             
                                                Ω
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                i
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          
                                             
                                                Ω
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                 
                                 z
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       x
                                    
                                    
                                       
                                          
                                             i
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 )
                                 ,
                              
                           
                        and β
                        
                           j
                         is the average of similarity values of data ranked in the top-h hypothesis preference σ
                        (j) of θ
                        
                           j
                         (Eq. (2)). Note that we allow for a different sized “top” list for hypothesis and data preferences. Specifically, β
                        
                           j
                         is defined as
                           
                              (6)
                              
                                 
                                    
                                       β
                                    
                                    
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       
                                          
                                             
                                                
                                                   D
                                                   (
                                                   
                                                      
                                                         σ
                                                      
                                                      
                                                         (
                                                         j
                                                         )
                                                      
                                                   
                                                   )
                                                
                                             
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          D
                                          (
                                          
                                             
                                                σ
                                             
                                             
                                                (
                                                j
                                                )
                                             
                                          
                                          )
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                i
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          D
                                          (
                                          
                                             
                                                σ
                                             
                                             
                                                (
                                                j
                                                )
                                             
                                          
                                          )
                                       
                                    
                                 
                                 z
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       x
                                    
                                    
                                       
                                          
                                             i
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 )
                                 .
                              
                           
                        Note: α
                        
                           j
                         is the same measure as used in [18], whereas β
                        
                           j
                         is an improved version of the second feature in that paper.

Intuitively, if a hypothesis θ
                        
                           j
                         corresponds to a structure, then Ω
                        
                           j
                         and σ
                        (j) should mostly contain inliers from that structure. As measured by Eq. (4), inliers from the same structure yield higher similarity values, thus a good hypothesis θ
                        
                           j
                         is expected to have high values in both α
                        
                           j
                         and β
                        
                           j
                        . Here we use k-means clustering over a set of feature vectors 
                           
                              
                                 
                                    {
                                    [
                                    
                                       
                                          α
                                       
                                       
                                          j
                                       
                                    
                                    ,
                                    
                                       
                                          β
                                       
                                       
                                          j
                                       
                                    
                                    ]
                                    }
                                 
                                 
                                    j
                                    =
                                    1
                                 
                                 
                                    M
                                 
                              
                           
                         to separate hypotheses into two clusters, and a set 
                           
                              
                                 
                                    Θ
                                 
                                 
                                    ¯
                                 
                              
                           
                         of identified good hypotheses is the hypotheses in the cluster whose center has the larger norm. Fig. 5
                         illustrates the result of this filtering scheme on the data in Fig. 4(a).

The above filtering scheme based on k-means clustering relies on the pairwise similarity of data, thus we can perform conditional sampling similar to Multi-GS [17], i.e., use the data similarity to derive the sampling weights such that inliers from the same structure are more likely to be sampled into a minimal subset. The major drawback in Multi-GS is that the first datum, which triggers the conditional sampling, is randomly selected from X. If the first datum happens to be an outlier, then the subsequent computation for the sampling weights will be wasted. Note: this is also a drawback in our previously published version [18]. To overcome this, we use the identified good hypotheses to guide the selection of the first datum, since they are assumed to be generated from inliers.

We now describe how to obtain the minimal subsamples for generating a new hypothesis 
                           
                              
                                 
                                    θ
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                        . We denote by s
                        
                           u
                         the indices of these samples, i.e., 
                           
                              
                                 
                                    Q
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              =
                              
                                 
                                    {
                                    
                                       
                                          x
                                       
                                       
                                          
                                             
                                                s
                                             
                                             
                                                u
                                             
                                          
                                       
                                    
                                    }
                                 
                                 
                                    u
                                    =
                                    1
                                 
                                 
                                    p
                                 
                              
                              ⊂
                              X
                           
                         is a minimal subset of p data to generate 
                           
                              
                                 
                                    θ
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                        , where s
                        
                           u
                         are indexed by the order in which they are sampled. Given a set 
                           
                              
                                 
                                    Θ
                                 
                                 
                                    ¯
                                 
                              
                           
                         of identified good hypotheses obtained from the above filtering scheme (Section 4.1), we restrict the selection of the first datum 
                           
                              
                                 
                                    x
                                 
                                 
                                    
                                       
                                          s
                                       
                                       
                                          1
                                       
                                    
                                 
                              
                           
                         to be from the set of data which gave rise to 
                           
                              
                                 
                                    Θ
                                 
                                 
                                    ¯
                                 
                              
                           
                        , i.e.,
                           
                              (7)
                              
                                 
                                    
                                       X
                                    
                                    
                                       
                                          
                                             Θ
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ⋃
                                       
                                       
                                          
                                             
                                                θ
                                             
                                             
                                                j
                                             
                                          
                                          ∈
                                          
                                             
                                                Θ
                                             
                                             
                                                ¯
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       Q
                                    
                                    
                                       j
                                    
                                 
                                 ,
                              
                           
                        where Q
                        
                           j
                         is the minimal subset of a hypothesis θ
                        
                           j
                        . Specifically, the first datum 
                           
                              
                                 
                                    x
                                 
                                 
                                    
                                       
                                          s
                                       
                                       
                                          1
                                       
                                    
                                 
                              
                           
                         is selected randomly from 
                           
                              
                                 
                                    X
                                 
                                 
                                    
                                       
                                          Θ
                                       
                                       
                                          ¯
                                       
                                    
                                 
                              
                           
                        .

To sample the subsequent data conditionally, we construct the sampling weights based on previously sampled data in 
                           
                              
                                 
                                    Q
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                        . Assume u
                        −1 data have been selected into 
                           
                              
                                 
                                    Q
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                         so far, now we wish to sample the next datum 
                           
                              
                                 
                                    x
                                 
                                 
                                    
                                       
                                          s
                                       
                                       
                                          u
                                       
                                    
                                 
                              
                           
                        . The conditional sampling weight for each datum x
                        
                           i
                        
                        ∈
                        X is computed by multiplying its similarity values (Eq. (4)) as measured to 
                           
                              {
                              
                                 
                                    x
                                 
                                 
                                    
                                       
                                          s
                                       
                                       
                                          1
                                       
                                    
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    x
                                 
                                 
                                    
                                       
                                          s
                                       
                                       
                                          u
                                          -
                                          1
                                       
                                    
                                 
                              
                              }
                           
                        , i.e.,
                           
                              (8)
                              
                                 W
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 |
                                 
                                    
                                       x
                                    
                                    
                                       
                                          
                                             s
                                          
                                          
                                             1
                                          
                                       
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       x
                                    
                                    
                                       
                                          
                                             s
                                          
                                          
                                             u
                                             -
                                             1
                                          
                                       
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         ∏
                                                      
                                                      
                                                         
                                                            
                                                               i
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         ∈
                                                         {
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         ,
                                                         …
                                                         ,
                                                         
                                                            
                                                               s
                                                            
                                                            
                                                               u
                                                               -
                                                               1
                                                            
                                                         
                                                         }
                                                      
                                                   
                                                   
                                                   z
                                                   (
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         
                                                            
                                                               i
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      
                                                   
                                                   )
                                                
                                                
                                                   if
                                                   
                                                   i
                                                   
                                                   ∉
                                                   
                                                   {
                                                   
                                                      
                                                         s
                                                      
                                                      
                                                         1
                                                      
                                                   
                                                   ,
                                                   …
                                                   ,
                                                   
                                                      
                                                         s
                                                      
                                                      
                                                         u
                                                         -
                                                         1
                                                      
                                                   
                                                   }
                                                
                                             
                                             
                                                
                                                   0
                                                
                                                
                                                   otherwise
                                                   .
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

If 
                           
                              {
                              
                                 
                                    x
                                 
                                 
                                    
                                       
                                          s
                                       
                                       
                                          1
                                       
                                    
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    x
                                 
                                 
                                    
                                       
                                          s
                                       
                                       
                                          u
                                          -
                                          1
                                       
                                    
                                 
                              
                              }
                           
                         are inliers of a structure, this sampling weight encourages the selection of 
                           
                              
                                 
                                    x
                                 
                                 
                                    
                                       
                                          s
                                       
                                       
                                          u
                                       
                                    
                                 
                              
                           
                         being an inlier from the same structure. Note that we set the sampling weight to zero if it has been already selected into 
                           
                              
                                 
                                    Q
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                        . This ensures that 
                           
                              
                                 
                                    Q
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                         contains p distinct data.
                           Algorithm 1
                           ITKSF: Conditional sampling with filtering via clustering.
                                 
                                    
                                       
                                       
                                          
                                             1: Input input data X, desired number of hypotheses M, batch size b, size of a minimal subset p, size of top data preference k, size of top hypothesis preference h
                                             
                                          
                                          
                                             2: Output a set 
                                                   
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ¯
                                                         
                                                      
                                                   
                                                 of good hypotheses
                                          
                                          
                                             3: Let Θ be an empty set for storing the generated hypotheses
                                          
                                          
                                             4: Let 
                                                   
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ¯
                                                         
                                                      
                                                   
                                                 be an empty set for storing the remaining hypotheses after filtering
                                          
                                          
                                             5: for 
                                                j′=1,2,…,
                                                M 
                                                do
                                             
                                          
                                          
                                             6: 
                                                if 
                                                j′<
                                                =
                                                b 
                                                then
                                             
                                          
                                          
                                             7: randomly sample p data from X and store as 
                                                   
                                                      
                                                         
                                                            Q
                                                         
                                                         
                                                            
                                                               
                                                                  j
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             8: 
                                                else
                                             
                                          
                                          
                                             9: sample 
                                                   
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            
                                                               
                                                                  s
                                                               
                                                               
                                                                  1
                                                               
                                                            
                                                         
                                                      
                                                   
                                                 randomly from 
                                                   
                                                      
                                                         
                                                            X
                                                         
                                                         
                                                            
                                                               
                                                                  Θ
                                                               
                                                               
                                                                  ¯
                                                               
                                                            
                                                         
                                                      
                                                   
                                                 (Eq. (7)) and initialize 
                                                   
                                                      
                                                         
                                                            Q
                                                         
                                                         
                                                            
                                                               
                                                                  j
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                      =
                                                      {
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            
                                                               
                                                                  s
                                                               
                                                               
                                                                  1
                                                               
                                                            
                                                         
                                                      
                                                      }
                                                   
                                                
                                             
                                          
                                          
                                             10: 
                                                for 
                                                u
                                                =2,3,…,
                                                p 
                                                do
                                             
                                          
                                          
                                             11: 
                                                sample 
                                                   
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            
                                                               
                                                                  s
                                                               
                                                               
                                                                  u
                                                               
                                                            
                                                         
                                                      
                                                   
                                                 according to the weight 
                                                   
                                                      W
                                                      (
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      |
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            
                                                               
                                                                  s
                                                               
                                                               
                                                                  1
                                                               
                                                            
                                                         
                                                      
                                                      ,
                                                      …
                                                      ,
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            
                                                               
                                                                  s
                                                               
                                                               
                                                                  u
                                                                  -
                                                                  1
                                                               
                                                            
                                                         
                                                      
                                                      )
                                                   
                                                 for all x
                                                
                                                   i
                                                
                                                ∈
                                                X (Eq. (8))
                                          
                                          
                                             12: 
                                                
                                                
                                                   
                                                      
                                                         
                                                            Q
                                                         
                                                         
                                                            
                                                               
                                                                  j
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                      =
                                                      
                                                         
                                                            Q
                                                         
                                                         
                                                            
                                                               
                                                                  j
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                      ∪
                                                      {
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            
                                                               
                                                                  s
                                                               
                                                               
                                                                  u
                                                               
                                                            
                                                         
                                                      
                                                      }
                                                   
                                                
                                             
                                          
                                          
                                             13: 
                                                end for
                                             
                                          
                                          
                                             14: 
                                                end if
                                             
                                          
                                          
                                             15: generate 
                                                   
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            
                                                               
                                                                  j
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                   
                                                 from 
                                                   
                                                      
                                                         
                                                            Q
                                                         
                                                         
                                                            
                                                               
                                                                  j
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                   
                                                 and 
                                                   
                                                      Θ
                                                      =
                                                      Θ
                                                      ∪
                                                      {
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            
                                                               
                                                                  j
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                      }
                                                   
                                                
                                             
                                          
                                          
                                             16: 
                                                if 
                                                j′>
                                                =
                                                b and mod(j′,
                                                b)=
                                                =0 then
                                             
                                          
                                          
                                             17: obtain τ
                                                (i) (Eq. (1)) from sorting the residuals of x
                                                
                                                   i
                                                 as measured to all θ
                                                
                                                   j
                                                
                                                ∈
                                                Θ
                                             
                                          
                                          
                                             18: compute 
                                                   
                                                      z
                                                      (
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            x
                                                         
                                                         
                                                            
                                                               
                                                                  i
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                      )
                                                   
                                                 between all data (Eq. (4))
                                          
                                          
                                             19: 
                                                
                                                   
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ¯
                                                         
                                                      
                                                      =
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ¯
                                                         
                                                      
                                                      ∪
                                                      {
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            
                                                               
                                                                  j
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            -
                                                            b
                                                            +
                                                            1
                                                         
                                                      
                                                      ,
                                                      …
                                                      ,
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            
                                                               
                                                                  j
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                      }
                                                   
                                                
                                             
                                          
                                          
                                             20: construct [α
                                                
                                                   j
                                                ,β
                                                
                                                   j
                                                ] for all 
                                                   
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      ∈
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ¯
                                                         
                                                      
                                                   
                                                 (Eqs. (5) and (6))
                                          
                                          
                                             21: apply k-means clustering on 
                                                   
                                                      {
                                                      [
                                                      
                                                         
                                                            α
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            β
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      ]
                                                      |
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      ∈
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ¯
                                                         
                                                      
                                                      }
                                                   
                                                 to obtain new 
                                                   
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ¯
                                                         
                                                      
                                                   
                                                 (Section 4.1)
                                          
                                          
                                             22: 
                                                end if
                                             
                                          
                                          
                                             23: end for
                                             
                                          
                                          
                                             24: return
                                                
                                                   
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ¯
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

With the filtering scheme in Section 4.1 and the conditional sampling scheme in Section 4.2, we now describe the overall algorithm of ITKSF. The summary of ITKSF (Algorithm 1) is as follows: Given the initial b randomly generated hypotheses, we
                           
                              1.
                              Compare the data preferences to obtain the similarity of two data being inliers from the same structure (Eq. (6)) – see line 17–18 in Algorithm 1.

Use the filtering scheme based on k-means clustering to separate the good/bad hypotheses (Section 4.2, – see line 20–21 in Algorithm 1.

Use the identified good hypotheses to trigger the conditional sampling (Section 4.2, – see line 9–13 in Algorithm 1.


                        Fig. 6
                         depicts an actual run of ITKSF on the data in Fig. 4(a). The displayed data similarity matrix is obtained by setting the ith row and i′th column to 
                           
                              z
                              (
                              
                                 
                                    x
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    x
                                 
                                 
                                    
                                       
                                          i
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              )
                           
                         from Eq. (4). As sampling proceeds, the 3 blocks corresponds to the 3 structures in the data becomes clearer, and the bad hypotheses are progressively removed. It also shows that the number of hypotheses generated from inliers of a structure gradually increases as sampling proceeds. Note that ITKSF requires to recompute the similarity matrix during the sampling process. This operation can be computationally expensive for large N. In [18], we provide an incremental computation to update the similarity values by detecting the alteration of data preferences, instead of recomputing it from scratch. While such a strategy is essential to achieve the speed of ITKSF reported here, it is not one of the two key ideas this paper focuses on, so we refer the reader to [18] for details.

In this section, we present our second sample-and-filter method (namely DHF). The basis of DHF is an alternative preference-approach to hypothesis filtering scheme. Unlike the filtering scheme based on clustering in ITKSF (Section 4.1), the filtering scheme in DHF identifies good hypotheses by assigning a hypothesis to each datum. We first describe this alternative filtering scheme in Section 5.1, and then show how the identified good hypotheses from this alternative filtering scheme are used to further guide the sampling in Section 5.2. The overall algorithm of DHF is presented in Section 5.3.

We now describe an alternative preference-approach to hypothesis filtering. Our goal here is to associate each datum with the most promising hypothesis, and the bad hypotheses are regarded as those with no association to any data. Note: the measures here are the same as presented in [19].

We first derive a hypothesis goodness measure by comparing the hypothesis preferences (Eq. (2)). Fig. 3 shows that hypotheses corresponding to the same structure share similar preference to data. Given two hypothesis θ
                        
                           j
                         and 
                           
                              
                                 
                                    θ
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                        , we measure the correlation of their top-h hypothesis preferences σ
                        (j) and 
                           
                              
                                 
                                    σ
                                 
                                 
                                    (
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                 
                              
                           
                         using the SF distance (Eq. (3)). The distance between θ
                        
                           j
                         and 
                           
                              
                                 
                                    θ
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                           
                         is defined as
                           
                              (9)
                              
                                 d
                                 (
                                 
                                    
                                       θ
                                    
                                    
                                       j
                                    
                                 
                                 ,
                                 
                                    
                                       θ
                                    
                                    
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       h
                                       ×
                                       (
                                       h
                                       +
                                       1
                                       )
                                    
                                 
                                 F
                                 (
                                 
                                    
                                       σ
                                    
                                    
                                       (
                                       j
                                       )
                                    
                                 
                                 ,
                                 
                                    
                                       σ
                                    
                                    
                                       (
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                    
                                 
                                 )
                                 .
                              
                           
                        Note that 
                           
                              d
                              (
                              
                                 
                                    θ
                                 
                                 
                                    j
                                 
                              
                              ,
                              
                                 
                                    θ
                                 
                                 
                                    
                                       
                                          j
                                       
                                       
                                          ′
                                       
                                    
                                 
                              
                              )
                           
                         is between 0 and 1. Fig. 7
                        left) shows that hypotheses generated from inliers of a structure are closer to each other in the preference space, since they share more agreement in their preferences to data.

To score a hypothesis θ
                        
                           j
                        
                        ∈
                        Θ, we apply the Gaussian kernel on the hypothesis preference space to measure how good θ
                        
                           j
                         is compared to other hypotheses in Θ. The goodness of θ
                        
                           j
                         in Θ is measured by
                           
                              (10)
                              
                                 g
                                 (
                                 
                                    
                                       θ
                                    
                                    
                                       j
                                    
                                 
                                 |
                                 Θ
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             
                                                θ
                                             
                                             
                                                
                                                   
                                                      j
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          ∈
                                          Θ
                                       
                                    
                                 
                                 exp
                                 
                                    
                                       
                                          -
                                          d
                                          
                                             
                                                (
                                                
                                                   
                                                      θ
                                                   
                                                   
                                                      j
                                                   
                                                
                                                ,
                                                
                                                   
                                                      θ
                                                   
                                                   
                                                      
                                                         
                                                            j
                                                         
                                                         
                                                            ′
                                                         
                                                      
                                                   
                                                
                                                )
                                             
                                             
                                                2
                                             
                                          
                                          /
                                          2
                                          
                                             
                                                δ
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                 
                                 ,
                              
                           
                        where δ is the bandwidth for the Gaussian kernel. The higher the value of g(θ
                        
                           j
                        ∣Θ), the more promising the hypothesis θ
                        
                           j
                         is.

To establish the association of data and hypotheses, we seek the most promising hypothesis within the k highly ranked hypotheses in each data preference. Given a datum x
                        
                           i
                        , the set of k highly ranked hypotheses in its preference τ
                        (i) (Eq. (1)) is denoted by 
                           
                              
                                 
                                    Θ
                                 
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          (
                                          i
                                          )
                                       
                                    
                                 
                              
                              =
                              {
                              
                                 
                                    θ
                                 
                                 
                                    j
                                 
                              
                              ∈
                              Θ
                              |
                              j
                              ∈
                              D
                              (
                              
                                 
                                    τ
                                 
                                 
                                    (
                                    i
                                    )
                                 
                              
                              )
                              }
                           
                        . We denote by e
                        
                           i
                         the (hypothesis) index of the most promising hypothesis for datum x
                        
                           i
                        . The most promising hypothesis for x
                        
                           i
                         is then defined as
                           
                              (11)
                              
                                 
                                    
                                       θ
                                    
                                    
                                       
                                          
                                             e
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                                 =
                                 
                                    
                                       
                                          arg
                                          
                                          max
                                       
                                       
                                          
                                             
                                                θ
                                             
                                             
                                                j
                                             
                                          
                                          ∈
                                          
                                             
                                                Θ
                                             
                                             
                                                
                                                   
                                                      τ
                                                   
                                                   
                                                      (
                                                      i
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                 g
                                 (
                                 
                                    
                                       θ
                                    
                                    
                                       j
                                    
                                 
                                 |
                                 
                                    
                                       Θ
                                    
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             (
                                             i
                                             )
                                          
                                       
                                    
                                 
                                 )
                                 .
                              
                           
                        
                     

After seeking the most promising hypothesis for each datum, we discard the hypotheses that has no association to any data, and obtain a set 
                           
                              
                                 
                                    Θ
                                 
                                 
                                    ^
                                 
                              
                           
                         of identified good hypotheses, i.e., 
                           
                              
                                 
                                    Θ
                                 
                                 
                                    ^
                                 
                              
                              =
                              {
                              
                                 
                                    θ
                                 
                                 
                                    j
                                 
                              
                              ∈
                              Θ
                              |
                              j
                              ∈
                              {
                              
                                 
                                    e
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    e
                                 
                                 
                                    N
                                 
                              
                              }
                              }
                           
                        .


                        Fig. 7 shows the effect of this filtering scheme on the data in Fig. 4(a). Note that the remaining set of hypotheses after filtering is relatively small compared to the previous filtering scheme (Fig. 5), since there are at most N unique hypotheses associated to all data in X, i.e., 
                           
                              |
                              
                                 
                                    Θ
                                 
                                 
                                    ^
                                 
                              
                              |
                              ⩽
                              N
                           
                        .

In contrast to ITKSF (Section 4), the data similarity is not available here to perform the conditional sampling. However, the data similarity is implicitly captured in the correlation of a data preference and a hypothesis preference. From the above filtering scheme for DHF, the set 
                           
                              
                                 
                                    Θ
                                 
                                 
                                    ^
                                 
                              
                           
                         of identified good hypotheses contains the hypotheses associated to some data. If a hypothesis 
                           
                              
                                 
                                    θ
                                 
                                 
                                    j
                                 
                              
                              ∈
                              
                                 
                                    Θ
                                 
                                 
                                    ^
                                 
                              
                           
                         is associated to an inlier of a structure, then the top preference of θ
                        
                           j
                         should contain mostly the inliers of the same structure (See Fig. 8
                         for examples). Based on this idea, we propose to sample the data by restricting the selection to the highly ranked data in a hypothesis preference. This avoids the explicit computation of data similarity as in the previous section, thus it achieves significant computational saving.

Given a set 
                           
                              
                                 
                                    Θ
                                 
                                 
                                    ^
                                 
                              
                           
                         of promising hypotheses obtained from the above filtering scheme in Section 5.1, we first sample a hypothesis from 
                           
                              
                                 
                                    Θ
                                 
                                 
                                    ^
                                 
                              
                           
                         using the hypothesis goodness measure (Eq. (10)). The sampling weight of each hypothesis 
                           
                              
                                 
                                    θ
                                 
                                 
                                    j
                                 
                              
                              ∈
                              
                                 
                                    Θ
                                 
                                 
                                    ^
                                 
                              
                           
                         is defined as
                           
                              (12)
                              
                                 
                                    
                                       
                                          max
                                       
                                       
                                          
                                             
                                                θ
                                             
                                             
                                                
                                                   
                                                      j
                                                   
                                                   
                                                      ′
                                                   
                                                
                                             
                                          
                                          ∈
                                          
                                             
                                                Θ
                                             
                                             
                                                ^
                                             
                                          
                                       
                                    
                                 
                                 
                                 g
                                 (
                                 
                                    
                                       θ
                                    
                                    
                                       
                                          
                                             j
                                          
                                          
                                             ′
                                          
                                       
                                    
                                 
                                 |
                                 
                                    
                                       Θ
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 -
                                 g
                                 (
                                 
                                    
                                       θ
                                    
                                    
                                       j
                                    
                                 
                                 |
                                 
                                    
                                       Θ
                                    
                                    
                                       ^
                                    
                                 
                                 )
                                 .
                              
                           
                        
                     

This ensures that the sampled hypothesis is less promising than other hypotheses in 
                           
                              
                                 
                                    Θ
                                 
                                 
                                    ^
                                 
                              
                           
                        , hence avoiding sampling continuously on the same structure as well as encouraging the discovery of other possible structures in the data. Once a hypothesis θ
                        
                           j
                         is selected from 
                           
                              
                                 
                                    Θ
                                 
                                 
                                    ^
                                 
                              
                           
                        , we construct a minimal subset by randomly selecting p data from its top h preference σ
                        (j) (Eq. (2)).


                        
                           Algorithm 2
                           DHF: Sampling from hypothesis preferences with filtering via association.
                                 
                                    
                                       
                                       
                                          
                                             1: Input input data X, desired number of hypotheses M, batch size b, size of a minimal subset p, size of top data preference k, size of top hypothesis preference h, bandwidth for the Gaussian kernel δ
                                             
                                          
                                          
                                             2: Output a set 
                                                   
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                   
                                                 of good hypotheses
                                          
                                          
                                             3: Let Θ be an empty set for storing the generated hypotheses
                                          
                                          
                                             4: Let 
                                                   
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ¯
                                                         
                                                      
                                                   
                                                 be an empty set for storing the remaining hypotheses after filtering
                                          
                                          
                                             5: for 
                                                j′=1,2,…,
                                                M 
                                                do
                                             
                                          
                                          
                                             6: 
                                                if 
                                                
                                                j′<
                                                =
                                                b 
                                                then
                                             
                                          
                                          
                                             7: 
                                                generate 
                                                   
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            
                                                               
                                                                  j
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                   
                                                 from p randomly sampled data from X
                                             
                                          
                                          
                                             8: 
                                                else
                                             
                                          
                                          
                                             9: 
                                                sample a hypothesis θ
                                                
                                                   j
                                                 from 
                                                   
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                   
                                                 according to Eq. (12)
                                             
                                          
                                          
                                             10: 
                                                randomly sample p data from σ
                                                (j) and generate 
                                                   
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            
                                                               
                                                                  j
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             11: 
                                                end if
                                             
                                          
                                          
                                             12: 
                                                
                                                   
                                                      Θ
                                                      =
                                                      Θ
                                                      ∪
                                                      {
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            
                                                               
                                                                  j
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                      }
                                                   
                                                 and 
                                                   
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                      =
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                      ∪
                                                      {
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            
                                                               
                                                                  j
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                      }
                                                   
                                                
                                             
                                          
                                          
                                             13: obtain 
                                                   
                                                      
                                                         
                                                            σ
                                                         
                                                         
                                                            (
                                                            
                                                               
                                                                  j
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            )
                                                         
                                                      
                                                   
                                                 by sorting the residuals of 
                                                   
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            
                                                               
                                                                  j
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                   
                                                 as measured to all data (Eq. (2))
                                          
                                          
                                             14: compute 
                                                   
                                                      d
                                                      (
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            
                                                               
                                                                  j
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                         
                                                      
                                                      ,
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      )
                                                   
                                                 for all 
                                                   
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      ∈
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                   
                                                 (Eq. (9))
                                          
                                          
                                             15: if 
                                                j′>
                                                =
                                                b and mod(j′,
                                                b)=
                                                =0 then
                                             
                                          
                                          
                                             16: obtain τ
                                                (i) (Eq. (1)) from sorting the residuals of x
                                                
                                                   i
                                                 as measured to all 
                                                   
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      ∈
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             17: 
                                                for 
                                                i
                                                =1,2,…,
                                                N 
                                                do
                                             
                                          
                                          
                                             18: 
                                                compute 
                                                   
                                                      g
                                                      (
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      |
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            
                                                               
                                                                  τ
                                                               
                                                               
                                                                  (
                                                                  i
                                                                  )
                                                               
                                                            
                                                         
                                                      
                                                      )
                                                   
                                                 for all 
                                                   
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      ∈
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            
                                                               
                                                                  τ
                                                               
                                                               
                                                                  (
                                                                  i
                                                                  )
                                                               
                                                            
                                                         
                                                      
                                                   
                                                 and determine 
                                                   
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            
                                                               
                                                                  e
                                                               
                                                               
                                                                  i
                                                               
                                                            
                                                         
                                                      
                                                   
                                                 (Eq. (11))
                                          
                                          
                                             19: 
                                                end for
                                             
                                          
                                          
                                             20: 
                                                
                                                   
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                      =
                                                      {
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      ∈
                                                      Θ
                                                      |
                                                      j
                                                      ∈
                                                      {
                                                      
                                                         
                                                            e
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                      ,
                                                      …
                                                      ,
                                                      
                                                         
                                                            e
                                                         
                                                         
                                                            N
                                                         
                                                      
                                                      }
                                                      }
                                                   
                                                
                                             
                                          
                                          
                                             21: compute 
                                                   
                                                      g
                                                      (
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      |
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                      )
                                                   
                                                 for all 
                                                   
                                                      
                                                         
                                                            θ
                                                         
                                                         
                                                            j
                                                         
                                                      
                                                      ∈
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                   
                                                 (Eq. (10))
                                          
                                          
                                             22: 
                                                end if
                                             
                                          
                                          
                                             23: end for
                                             
                                          
                                          
                                             24: return 
                                                
                                                   
                                                      
                                                         
                                                            Θ
                                                         
                                                         
                                                            ^
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

We now describe the overall algorithm of DHF. The summary of DHF (Algorithm 2) is as follows: Given the initial b randomly generated hypotheses, we
                           
                              1.
                              Use the filtering scheme based on data-hypothesis association to identify good hypotheses (Section 5.1, – see line 16–20 in Algorithm 2.

Compare the hypothesis preferences for scoring the hypotheses (Eq. (10)) – see line 21 in Algorithm 2.

Guide the sampling using the hypothesis preferences of the identified good hypotheses (Section 5.1, – see line 9–10 in Algorithm 2.

These three steps are repeated until the desired number of hypotheses is obtained.


                        Fig. 9
                         depicts an actual run of DHF on the data in Fig. 4(a). As sampling proceeds, DHF aggressively filters the bad hypotheses (generated from impure inlier samples), resulting in 15 bad hypotheses left at iteration 1000.

@&#EXPERIMENTS@&#

We evaluate our proposed sample-and-filter methods (Section 4: ITKSF and Section 5: DHF) on multi-structure homography and fundamental matrix estimation. The experiments are designed to test the sampling accuracy, filtering accuracy and the effect on model fitting accuracy of the methods.

The parameters of ITKSF are as follows: (1) batch size b
                     =100, (2) h
                     =⌈0.1×
                     N⌉ where N is the number of data, and (3) k
                     =⌈0.1×
                     t⌉ where t is the number of hypotheses generated so far. The same settings of b and h are used in DHF, while 
                        
                           k
                           =
                           ⌈
                           0.1
                           ×
                           |
                           
                              
                                 Θ
                              
                              
                                 ^
                              
                           
                           |
                           ⌉
                        
                      and the bandwidth for the Gaussian kernel (in Eq. (10)) δ
                     =0.6. All experiments are run on a machine with 2.53GHz Intel Core 2 Duo processor and 4GB RAM.

We report the filtering accuracy of our proposed methods (ITKSF and DHF), and also compare our sampling accuracy to 4 other methods (Random sampling as in RANSAC [5], Proximity sampling [20,10], PROSAC [15] and Multi-GS [17]). The parameter settings of the competing sampling methods are as follows: for Proximity sampling, the scale parameter (σ as in Eq. (1) in [10]) is set to twice the average of pairwise data distances; for PROSAC, the required matching scores (distance ratios of the best and the second match) are obtained directly from SIFT matching [22] and the parameter T
                        
                           n
                         is set to 2.5×104; for Multi-GS, the window size h is set to 10% of the number of hypotheses generated so far and block size b
                        =100.

The first experiment involves multi-homography estimation using real images (shown in Table 1
                           ). For each pair of images, we obtain the correspondences by SIFT matching [22], and manually identify the true and false correspondences. We use the Direct Linear Transformation [1] to estimate a homography from 4 correspondences, and the symmetric transfer error as the residuals.

The experiment is conducted by running each method with 50 repetitions and 5s time budget for each run. The sampling performance is measured by (1) HIT: CPU time to find the first all-inlier sample on each structure, (2) M: number of generated hypotheses, (3) Structure: number of all-inlier samples on each structure and (4) IS: percentage of all-inlier samples in the set of generated hypotheses. For the filtering performance of our ITKSF and DHF, we evaluate the set of remaining hypotheses after sampling terminates (
                              
                                 
                                    
                                       Θ
                                    
                                    
                                       ¯
                                    
                                 
                              
                            in Algorithm 1 and 
                              
                                 
                                    
                                       Θ
                                    
                                    
                                       ^
                                    
                                 
                              
                            in Algorithm 2) with Structure and IS measures, as well as reporting the number of remaining hypotheses M′ in 
                              
                                 
                                    
                                       Θ
                                    
                                    
                                       ¯
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       Θ
                                    
                                    
                                       ^
                                    
                                 
                              
                           .

The sampling and filtering results are shown in Table 1. On Hall data, PROSAC is fastest to find the first all-inlier sample on each structure, since it is informed by keypoint matching scores. However, PROSAC can easily breakdown if the top ranked correspondences are overwhelmed by a relatively large structure (Symon) or the correspondences of different structures simultaneously give higher matching scores (Johnson), i.e., difficult to obtain only inliers from a single structure. Multi-GS always generates the least number of hypotheses within 5s, due to its expensive computation of the sampling weights. Our ITKSF and DHF generate more hypotheses than Multi-GS, notwithstanding the online filtering of bad hypotheses.

Both Multi-GS and ITKSF derive the conditional sampling weights using data similarity, thus they are more capable than all competing methods in differentiating inliers from different structures. However, ITKSF outperforms Multi-GS in generating a higher proportion of all-inlier samples (IS), since the identified good hypotheses can reliably provide an inlier (as the first datum) to trigger the conditional sampling. Noticeably, DHF is the only method that generates at least 50% all-inlier samples on all test data, due to restricting the sampling on the top highly ranked data of an identified good hypothesis (i.e., contains mostly inliers of a single structure).

For filtering accuracy of the proposed methods, see under “Remaining Hypotheses” in Table 1. DHF always retains a smaller set of hypotheses than ITKSF, since the number of identified good hypotheses is at most N (number of data), and inliers of a structure are more likely associated with a very promising hypothesis corresponding to that structure. Both ITKSF and DHF can effectively filter large amounts of generated bad hypotheses, thus yielding much higher proportion of good hypotheses in the remaining hypothesis set (e.g., DHF returns around 85% of all-inlier samples on Johnson). To this end, the results clearly show the advantage of our sample-and-filter strategy, i.e., they return a very high proportion of good hypotheses. This aspect seems not to have received attention in previous sampling methods. Later in Section 6.2, we show how this enhances the fitting accuracy.

We further evaluate ITKSF and DHF on fundamental matrix estimation using real images (shown in Table 2
                           ). As in the previous experiment, the correspondences of each image pair is obtained by SIFT matching [22], while the ground truth label is determined manually. Here we use the 8-point algorithm [1] to estimate a fundamental matrix and the residuals are computed as Sampson Distance [1]. The time budget for each method is 10s in this experiment.

From Table 2, we can see that Random, Proximity and PROSAC fail disastrously in such higher order geometric model (8 correspondences to form a minimal subset). They generate no more than 1% of all-inlier samples. Among them, Proximity is slightly better (especially on Bread), since the inliers are indeed closer to each other. However, this spatial assumption can be easily violated when outliers or inliers of different structures become neighbors of a structure (Book and Chips). Note that the HIT measure of ITKSF and DHF is comparable to Multi-GS on almost all image pairs.

Similar to the conclusion we drew from Table 1, ITKSF and DHF are more productive than the competing methods in generating a high proportion of all-inlier samples on all image pairs. This demonstrates that the identified good hypotheses during sampling can effectively guide the sampling. DHF is capable of generating more hypotheses than ITKSF within the time budget, since it does not devote expensive computation on the data similarity. Consequently, DHF generates significantly larger number of all-inlier samples than all other methods.


                           Table 2 shows that ITKSF and DHF yields a very high proportion of good hypotheses in the remaining hypothesis set, due to their on-the-fly filtering schemes. Nevertheless, they both successfully retain the good hypotheses corresponding to each structure. Note that DHF is more aggressive in filtering bad hypotheses than ITKSF, thus it always returns almost 90% of all-inlier samples in the remaining set.

We further evaluate our proposed sample-and-filter methods under various outlier rates using Chips in Table 2(c) for fundamental matrix estimation. There are total 81 outliers in Chips, and we gradually increase the number of gross outliers (from 0 to 81 outliers) to obtain a range of outlier rates. The number of inliers on each structure is the same as shown in Table 2(c). For each outlier rate, we run the sampling methods with 10s time budget and 50 repetitions.

The sampling and filtering results are shown in Fig. 10
                           . In Fig. 10(a) and (c), Random and PROSAC fail disastrously due to their deficient ability to sample only inliers from the same structure, i.e., fail to find solutions in all 50 runs and obtains almost 0% of all-inlier samples. Note that Proximity shows an increasing trend as outlier rate increases, since the outliers can possibly become neighbors of the inliers such that the spatial assumption becomes violated. We also observe that DHF and ITKSF often take slightly more time than Multi-GS in finding the first all-inlier sample on each structure. A similar conclusion observed in Tables 1 and 2 can be observed in Fig. 10(b) and (c), i.e., across all outlier rates, the proposed methods (ITKSF and DHF) generate significantly more hypotheses and yields higher proportion of good hypotheses than Multi-GS.

As discussed in Section 6.1, ITKSF and DHF are capable in generating more all-inliers samples than all other methods. Their sampling accuracies however understandably decrease with increasing outlier rates. Due to the sample-and-filter strategy in ITKSF and DHF, they are capable in filtering bad hypotheses, thus their remaining hypothesis sets after sampling terminates contain a very high proportion of all-inlier samples (see dashed lines in Fig. 10(c)). Noticeably, the performance of DHF is less influenced by outlier rates, i.e., around 85–100% of all-inlier samples survive at the end across all outlier rates.

In practice, the structure sizes can be unbalanced, i.e., a disproportionately large/small structure exists in the data. We examine the performance of proposed methods on the unbalanced data shown in Table 3
                           . There are a total of 205 data, which gives the inlier ratio 22%, 34% and 7% for structure 1, 2, and 3 respectively.

We run ITKSF and DHF for 50 repetitions with 10s time budget, and the results are reported in Table 3. As expected, ITKSF and DHF tend to generate more all-inlier samples on the larger structure (structure 1 and 2) than that on the smallest structure (structure 3). ITKSF performs slightly better, i.e., found few all-inlier samples on structure 3. However, none of these inlier sets survive from the hypothesis filtering in ITKSF. In conclusion, the proposed methods suffer the same limitation as in most of the existing sampling methods, i.e., incapable in handling severely unbalanced data.

In the previous section, we have shown that our proposed sample-and-filter methods output a small hypothesis set with a high concentration of good hypotheses. Here we investigate how our proposed sample-and-filter methods can improve the estimation results of the existing mode seeking-based fitting method (MeanShift [9]) and data clustering-based fitting methods (J-Linkage [10] and KF [11]). We use all test image pairs shown in Tables 1 and 2 for this experiment.

In this experiment, we compare the fitting result of using various sampling methods (Random, Multi-GS as well as our proposed ITKSF and DHF) with MeanShift/J-Linkage/KF. Each sampling method is given a time budget (5s for homography estimation and 10s for fundamental matrix estimation) to generate the hypotheses for parameter estimation using the above-mentioned fitting methods with a given ground truth number of structures ℓ. The parameter settings of the chosen fitting methods are as follows: for MeanShift, we tune the kernel bandwidth such that it outputs ℓmodel instances; for J-Linkage, the required inlier threshold is set to the average of maximum inlier residuals on each structure, and we only select the largest ℓdata clusters; for KF, the step size for data similarity measure is set to 10% of the number of hypotheses and we tune the parameters in the structure merging scheme of KF such that it outputs ℓ model instances. Finally, we use the estimated parameters to dichotomize the inliers and outliers, as well as to label the structure membership of the estimated inliers to compute the segmentation error, i.e., percentage of misclassified data. Using the ground truth label of each datum, the inlier threshold for dichotomizing inliers/outliers is set to the average of maximum inlier residuals on each structure.

We first look at MeanShift fitting performance with various sampling methods, including our proposed methods. As shown in previous section, ITKSF and DHF return a very high proportion of good hypothesis set, due to the on-the-fly hypothesis filtering. We can see from Fig. 11
                            (top), they both lead to MeanShift yielding a lower segmentation error than when Random and Multi-GS are used instead, particularly for estimating fundamental matrices. For example, on ToyA in Fig. 11 (top left), MeanShift with ITKSF and DHF obtains around 30% and 25% segmentation errors respectively, while MeanShift with Multi-GS obtains 50%. The results clearly show that MeanShift is sensitive to the proportion fof good/bad hypotheses, since the detected modes in the parameter space are easily overwhelmed by the bad hypotheses. Although Multi-GS generates more all-inlier samples than Random (as shown in previous section), using it with MeanShift may perform as bad as with Random, due to the influence of the bad hypotheses (e.g., NEEM and Car). Example segmentation results of MeanShift with various sampling methods are shown in Fig. 11 (bottom).

J-Linkage results with various sampling methods are shown in Fig. 12
                           . J-Linkage (which does not seek modes in the parameter space) is relatively less affected than MeanShift by the proportion of bad hypotheses. However, J-Linkage uses the hypotheses to derive the distances for data clustering. Without good hypotheses generated from the sampling step, the induced distances can be very noisy, and fail to capture the correlation of inliers from different structures. Hence, Random (used with J-Linkage) always yields the highest segmentation error on all image pairs. From Fig. 12 (top), we can see that J-Linkage with Multi-GS gives comparable performance to when it is combined with ITKSF and DHF, on some image pairs (e.g., Hall and Symon); and performs slightly worse than proposed methods (e.g., Car). The results show that J-Linkage is less sensitive to the proportion of good/bad hypotheses than MeanShift. However, the bad hypotheses may induce inaccurate distances for data clustering. Consequently, outliers/inliers or inliers from different structures may easily cluster together, and refitting a model to each cluster amplifies the error of the estimated parameters. For our sample-and-filter methods, we eliminate the possible influence of bad hypotheses in J-Linkage by an online filtering routine, thus obtaining relatively lower segmentation error than Multi-GS on several image pairs (e.g., Johnson and ToyA). Example segmentation results of J-Linkage with various sampling methods are shown in Fig. 12 (bottom).

We also test our proposed sample-and-filter methods with Kernel Fitting (KF), since our methods share a “preference analysis” flavor with KF. Fig. 13
                            reports the fitting performance of KF with various sampling methods. KF performs clustering over data space, based on the data similarity values induced by counting the common elements in the top preference of data to hypotheses. Although ITKSF and DHF produce a high proportion of good hypotheses in the remaining hypothesis set after sampling terminates (as shown in Tables 1 and 2), they fail to improve the fitting accuracy of KF, i.e., obtains higher segmentation error on almost all image pairs than when KF is used with Multi-GS and Random. In general, an outlier is expected to rank the hypotheses randomly, thus its similarity values to the rest of the data tends to be lower (see data similarity matrices of Random and Multi-GS in Fig. 14
                           ). However, if we have a set of only good hypotheses, outliers essentially give higher rank to the hypotheses that are preferred most by the inliers, i.e., increasing the probability that the top preferences of outliers and inliers share the same elements. From Fig. 14, the induced similarity values between outliers and inliers using ITKSF and DHF are higher than that using Random and Multi-GS. As a result, outliers are clustered with inliers, thus refitting a model to each contaminated cluster leads to higher fitting error.

In this paper, we propose a sample-and-filter strategy, which aim to optimize the hypothesis sampling for the mode seeking-based fitting methods. The proposed strategy simultaneously (1) identifies and filters out bad hypotheses during sampling, and (2) uses the remaining good hypotheses to further expand the set of good hypotheses. The outcome is a small set of hypotheses with a high concentration of good hypotheses. This facilitates the mode seeking-based fitting methods to achieve more accurate results.

Two sample-and-filter algorithms (ITKSF and DHF) are presented in this paper. The experimental results in Section 6 show that the proposed methods can effectively filter a large number of bad hypotheses, and using the remaining good hypotheses for guided sampling is more productive in generating all-inlier samples than the existing sampling methods. In Section 6.1.4, we demonstrate the limitation of proposed methods on unbalanced data, and show that ITKSF performs slightly better than DHF in generating all-inliers sample on the smallest structure. However, sampling on unbalanced data is still a very challenging problem, and many existing sampling methods also suffer from this problem.

The results in Section 6.1 also show that our methods generate a smaller number of hypotheses (within a given time budget) in comparison to conventional sampling methods (e.g., PROSAC) for hypothesize-and-verify methods. This demonstrates that our methods require expensive computation to optimize the sampling for mode-seeking methods, however our methods are significantly more computationally efficient in retrieving all-inlier samples (on all valid structures), especially for heavily contaminated data and higher order geometric models.

Experiments show that our proposed sample-and-filter methods can improve the performance of some existing mode seeking-based (MeanShift) and data clustering-based methods (J-Linkage), as the bad hypotheses are removed before proceeding to the fitting process. The results also indicate that there is no clear “winner” between our two alternative approaches. Moreover, we also show that the proposed methods can fail to improve the fitting methods (particularly with KF which exploits the data preferences to approximate the correlation of data). This suggests that the potential users of our proposed methods will have to experiment before ensuring the improvement of their fitting methods. To date, there are still no methods that can fully solve the multi-structure fitting problem. However, we believe our ideas presented in this paper provide a new insight for anyone attempting to devise a solution based on hypothesis generation.

One of the challenges in multi-structure model fitting is the estimation of the number of structures existed in the data. In the future, we plan to investigate how to accurately determine the number of structures by leveraging the output of the proposed sample-and-filter strategy.

@&#REFERENCES@&#

