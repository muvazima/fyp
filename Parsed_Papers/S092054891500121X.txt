@&#MAIN-TITLE@&#An improved strategic information management plan for medical institutes

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           This proposed methodology can be used to improve the SIM plan.


                        
                        
                           
                           With the proposed SIM plan, software development process is improved.


                        
                        
                           
                           The related software architecture is examined in different models.


                        
                        
                           
                           A real case with the working scenario to verify this proposed SIM plan.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Strategic information management plan

Electronic medical record

Software development

Knowledge engineering and management

Software quality engineering

@&#ABSTRACT@&#


               
               
                  The driving force behind software development of the Electronic Medical Record (EMR) has been gradually changing. Heterogeneous software requirements have emerged, so how to correctly carry out development project has become a complex task. This paper adopts the knowledge engineering and management mechanism, i.e., CommonKADS, and software quality engineering to improve existing strategic information management (SIM) plan as a design methodology to help software implementation for medical institutes. We evaluate the adopting performance by a real case that examines the maturity level of the architecture alignment between the target solution in the proposed SIM plan and the built medical system.
               
            

@&#INTRODUCTION@&#

There exist numerous barriers for software development in the medical sector. Medical sector is a highly professional and time-varying industry, and the types of medical resources are so complicated and difficult to manage. Besides, the technical staff in hospital is the minority and normally does not have enough knowledge and experience of implementing medical software development projects, so many medical institutes frequently cooperate with outsourcing companies. However, the implementation of software development is prone to fail, because some hospital staffs are reluctant and have difficulty to communicate with software developers about vague and dynamic software requirements due to tight schedule and knowledge gaps. Moreover, the development of medical system is often influenced by both internal and external environments. With the highly heterogeneous software requirements, how to develop a successful project of medical system is not easy. In addition, there exists the danger that hospital managers may overlook the interplay between the medical system and organizational performance, if they uncritically trust the promises made by outsourcing companies [10]. Hence, the negative consequences of software development in medical sector occur more frequently than other industries, such as gap between expectations of active users, failure to learn from past projects, and lack of integration. These results indirectly cause poor service quality, waste of medical resources, or even medical malpractice. Rahimi et al. point out that the healthcare environment needs a suitable methodology to develop and evaluate the medical systems [17,18].

Most standards in medical sector focus on specifications of electronic health records (EHR) as follows. BS EN 13606-1 is a European standard that aims to define rigorous and stable architectures for EHR. The openEHR is a health informatics specification for EHR. The Clinical Document Architecture Release 2.0 (CDA R2) addresses universal requirements for exchange and management of structured clinical documents. Even JCAHO, the American oldest and largest standards-setting and accrediting body in the medical sector, has seldom laid great stress on medical software standards. Thus, there are few approaches proposed for effectively managing and developing medical software. The BS EN 12967 presented a framework to describe system views, but it does not provide any details for system development [13].

In general, CMMI for development (CMMI-DEV) and ISO standards for software engineering are popular, because they play a vital role in integrating, regulating, and optimizing the existing practices and fundamental theories for the development of better software products. However, the adopters must follow rigorous and disciplined approaches, emphasize documentation, and take care of each detail during the software development process based on these two categories of standards. Therefore, they are too costly and cumbersome for the medical sector, because the resources and competences of hospital are usually unable to satisfy these requirements. In addition, the most important thing is that these standards lack the flexibility to handle the complicated and changing need from every medical department.

On the other hand, to develop the suitable software architecture [3], enhance the software quality [7], and address the above-mentioned issues, the SIM plan originally proposed to support medical software development is a candidate solution [24]. SIM describes how to organize information management, the tasks of different working groups, and the software requirements from various stakeholders. Namely, it is a blueprint for planning, directing, and monitoring the development of medical system. Furthermore, by producing the suitable information strategies based on the strategic goals of a hospital, it provides guidelines for strategic planning activities to support hospital information management which is crucial for the development of medical systems. However, SIM plan is not yet formalized or mature enough for hospitals. Aiming to improve the existing SIM plan to address software development problems, this study introduces the method of knowledge engineering and management [12] to modify the SIM plan. In this manner, our solution can answer the research question on how the proposed design framework is utilized effectively to improve the software quality of medical system and build the suitable software architecture for satisfying different software requirements of every stakeholder in the medical software development project.

The organization of this paper is as follows. Section 2 presents the related works about the SIM plan and discusses knowledge engineering and management. Section 3 precisely explains the modules of the improved SIM plan and presents the interrelationships. Sections 4 and 5 demonstrate the adopting procedure of the proposed SIM plan of a real case and discuss the results by using the concept of architecture alignment. Finally, Section 6 summarizes implications learned from this study.

To implement the medical software development project, there should be a bridge between the project leader, users, information system staff of hospital, and outsourcing companies to generate comprehensive service level agreement. Thus, a concrete SIM plan, as a communication channel, is needed to assist in determining the project implementation methods and steps. As for the importance of SIM, Winter et al. claimed that without proper strategic planning, it would be a matter of chance if a hospital information system fulfills strategic information goals [25]. However, even if there exist some guidelines of the SIM plan [5,6], most of them are too general and vague to be applied for a specific medical institute. Besides, these guidelines are not concrete enough, so they cannot be directly adopted. Furthermore, these guidelines focus on theoretical background without the support of best practice, so they may not properly guide the inexperienced adopters, and the experiences gained from SIM plan projects cannot be stored and referenced.

Because many medical workflows are very complex, the medical system is knowledge intensive with manifold data sources. To make the SIM plan a formalized and feasible mechanism, knowledge engineering method [21] is adopted. Knowledge engineering method is used to analyze, design, and evaluate the software with resource allocation from multiple aspects. Studer et al. pointed out that the purpose of knowledge engineering is to transform the process of constructing knowledge-based systems from an art into an engineering discipline [20], so it can provide a useful framework to improve the existing SIM plan. Moreover, knowledge management assists in acquiring, creating, representing, and distributing knowledge within and between organizations [8,11]. Extending from knowledge engineering and management, some modeling frameworks have been proposed to handle the aspect of model-based approach.

CommonKADS [19] is a methodology used in the domain of knowledge engineering and management for defining the structure of expertise models. The cornerstone of CommonKADS is knowledge acquisition design system (KADS), and its primary advantage is that knowledge engineers can use a variety of models to guide the knowledge-acquisition process by refining and combining them into a fully specified model. In addition to CommonKADS, Model-based and Incremental Knowledge Engineering (MIKE) [1] emphasizes a formal and executable specification of the expertise model as a result of the knowledge acquisition phase. PROTÉGÉ series [9] exploit the notion of ontology to support users to develop an ontology-based knowledge management system.

In order to choose the most suitable modeling framework, the major characteristics of above-mentioned methods are listed in Table 1
                     . The comparison is based on the purpose-driven framework proposed by Brazier and Wijngaards [4]. Since our purpose is to modify the existing SIM plan as a formal software development mechanism, the selecting criteria should focus on the topics related to software engineering. Therefore, it may not be appropriate to choose an ontology-related modeling framework, PROTÉGÉ series, even though it is useful for developing custom-tailored editing environments to handle semantic web applications. For levels of specification in Table 1, the CommonKADS adopts expertise models to describe enterprise status, but MIKE has no concrete method. It is not easy to use MIKE for inexperienced users. Based on these reasons, we choose CommonKADS as the proposed mechanism for knowledge engineering and management.

This study adopts the concepts of software quality engineering [22] to integrate CommonKADS and the SIM plan for the purpose of correctly guiding the medical system development. The high-level architecture of the proposed SIM plan is carefully designed, and the relationships between the CommonKADS and the modified SIM plan are explained as follows.

The CommonKADS Methodology contains six expertise models: organization model, task model, agent model, knowledge model, communication model, and design model.
                        
                           1.
                           Organization model (OM) handles issues of finding out problems and opportunities, describing focus areas of organization, defining high-level process breakdown, categorizing major knowledge assets, establishing corresponding feasibility, and assessing the impacts of intended action on the organization.

Task model (TM) analyzes business processes; that is, it is used to analyze functions and flows, objective structures, agents, performance and quality, goal and value, resources, knowledge and competencies, and time to control. The model will recursively examine all of the tasks to determine if they need to be further extended.

Agent model (AM) assigns tasks, and an agent can be a human being, a system, or any entity which is capable of carrying out a task. The model describes characteristics of agents, competence of agents, corresponding authorities, related constraints, and communication links between agents for completing a specific task.

Knowledge model (KM) is the most complicated component. It contains three kinds of knowledge: task knowledge, inference knowledge, and domain knowledge. Task knowledge is used to decompose processes and tasks into inferences and relationships. After task knowledge has been defined, inference knowledge is used to present information-processing units of inferences. These inferences then define related knowledge roles which are mapped to the domain knowledge. The domain knowledge is used to define concepts of objects, relationships of indicated rule types, and rules of knowledge bases.

Communication model (CM) contains the transaction description and information exchange specification. It uses a communication plan to describe the relationships between agents and utilities. Within a specific transaction, the communication model defines its identifier with name, communication plan, information objects, involved agents, constraints, and information exchange specification. These parameters in turn are connected to numerous roles of sequential agents, forms, and media of information items. In addition, communication types, contents, and message references are then specified in the detailed level of association.

Design model (DM) suggests use of MVC metaphor to examine the proposed software architecture and target platform. It contains checklists of architecture specification and design for examining the proposed system. Moreover, it builds the CommonKADS reference architecture, list of available environment, checklist of architecture, and predefined mapping to architecture.

A SIM plan includes the following components: summary, introduction, hospital management, information management, current state, assessment, target state, and migration plan.
                        
                           1.
                           The summary component handles issues of motivating the stakeholders to support the SIM plan.

The introduction component presents content of the SIM plan, addresses the encountered problems of current environment, and how the solution organizes the implementation methods and steps.

The hospital management component supports stakeholders to understand vision, mission, goal, hospital characteristic, and organizational structure for improving hospital administration.

The information management component allocates knowledge resources and assigns the corresponding responsibilities. It aligns strategic information goals and principles of the hospital. The reasonable criteria for state analysis and assessment of the existing software architecture are then determined.

The component of current state provides a survey of the existing system. The overall software architecture of the solution is then examined.

The assessment component is used to dig out the vulnerabilities, decide the next actions, and conduct application portfolio management.

The component of target state proposes the detailed software architecture to address the encountered problems and should focus on the enterprise architecture planning. The relationships and communication mechanisms between software components are defined, and the related knowledge sources are specified.

The component of migration plan designs how to achieve target state from current state; that is, changes between current state and target state are monitored by setting up assessment points of software evaluation.

We suggest using the CommonKADS to strengthen the usability of the improved SIM plan. The detailed implementing procedures and sequential relationships between components are depicted in Fig. 1
                     . The description of current state analysis is the basis for top management to identify if the strategies of hospital are well supported by information technology or not. Thus, the target solution which focuses on problems and opportunities portrays the expected performance of the hospital strategic management. Based on the assessment of current state and the image of target state, the implementation solution is then designed with the feasible mechanisms (e.g., software architecture, communication mechanisms, and knowledge items) to achieve the target state.

Organization model, task model, and agent model present the current state of the system. They also describe summary, introduction, hospital management, and information management of a SIM plan. Knowledge model, communication model, and design model present the target state of the proposed system. Moreover, the transformation between current state and target state is monitored by the migration plan. After finishing a system, the feasibility of the existing works is evaluated at different assessment points, and the related tasks are conducted by suitable quality assurance activities. The detailed functions of models are described as follows.

OM-1 points out current problems and opportunities, organizational context with related mission, external factor, strategy, major value driver, and the proposed solution. It defines the scope of summary and introduction components of the SIM plan, since it identifies the problems with corresponding solutions and decides the economical, technical, and project feasibility to select the most promising focus area and solution from the organizational perspective. Because the preparation of a SIM plan needs great efforts, the plan must be approved by top management.

OM-2 handles hospital management of the SIM plan, so the issues regarding structure, process, people, resource, knowledge, and culture of the organization are analyzed. This component describes which units or who undertake which tasks and how these units are integrated in the organization. At this phase, the analyzed processes and knowledge assets are only preliminary results, and the further analysis is conducted by the following components.

In order to handle information management of the SIM plan, processes and knowledge assets need further analyses. OM-3 breaks down processes, and OM-4 defines knowledge assets. To identify the important knowledge assets, the relationships between them and main tasks are listed, and the purposes of these assets are examined. For ensuring processes and knowledge assets interrelating to each other, TM-1 and TM-2 are then used. TM-1 analyzes the important characteristics of specific task and examines the relationships between tasks, knowledge assets, and agents. TM-2 uses the knowledge asset characterization plus identification of bottleneck as contents of a checklist to assess the knowledge asset. Since every task needs an agent to be activated, AM-1 decides which agent carries out which task. The relationships between the specific agent with involved tasks, knowledge assets, and workflow-related characteristics are examined by AM-1.

The above-mentioned components analyze the current state of the SIM plan in order to align strategic information goals to the selected solutions. Ensuring the relationships between the tasks, knowledge assets, and involved agents is important for the following analyses, because it demonstrates what improvement can be realized. By doing these analyses, the feasibility of the solution is enhanced.

In order to define the objective software architecture of solution, the SIM plan uses knowledge model, communication model, and design model to describe the target state. For the knowledge model, it includes task knowledge, inference knowledge, and domain knowledge. The purpose of task knowledge is to define the task goal, task description, and task control. The preliminary tasks analyzed in the OM-3 and TM-1 are further extended to the inferences by the related task methods. Inference knowledge maps the elicited inferences to the dynamic roles and static roles. Domain knowledge defines concepts of objects, relationships of indicated rule types, and rules of knowledge bases. The dynamic roles in the inference knowledge are mapped to the concepts of the domain knowledge, and the static roles are mapped to the rule types of the domain knowledge. Also, the status changes of the static roles are defined in the detailed rules of the knowledge bases.

As for communication model, the transaction description and information exchange specification are used to clarify the corresponding transactions and related flows. The objective of CM-1 is to identify the involved information objects, agents, and constraints. CM-2 is in charge of defining the detailed attributes of involved information objects, agents, and message specifications. The relationships between agents and utilities are also described in the communication plan. Knowledge assets defined in the OM-4 and TM-2 and agents defined in the AM-1 are connected to the corresponding transactions. Besides that, domain objects defined in the domain knowledge are connected to the related transactions as information objects.

DM-1 defines software architecture, and the target platform is elaborated in the DM-2. Also, DM-3 and DM-4 in the CommonKADS Methodology suggest using the MVC metaphor to elicit checklists in order to analyze the target state of SIM plan. Actually, this design pattern is categorized into the following components: controller, view, and application model. The analyzing procedure captures the comments about software architecture level and application level and examines the usability of solution. Software inspection is conducted for ensuring the software quality of target software architecture.

All assessment points should be carefully examined via quality assurance activities to strengthen the usability and applicability of the proposed SIM plan. The modified SIM plan creates assessment points which also align with the concept of software quality engineering. To reach quality assurance, software inspection is a suitable activity adopted in our SIM plan. For software inspection, it includes checklist-based, scenario-based, and abstraction-based. The checklist-based inspection further includes an artifact-based checklist and a property-based checklist. The final step of design model chooses to use artifact-based checklists to examine the software architecture. The property-based checklist is used in formal inspection to review the solution analyzed in the SIM plan. Therefore, the concept of architecture alignment is introduced in the assessment phase. During this phase, the specific quality goal is set up, the suitable quality assurance activity is assigned, and the corresponding evaluation technique is selected to ensure software quality. In this way, migration from current state to the target state can guarantee that the solution is implemented under the control of the migration plan.

We use the last year of a three-year software project supported by the Department of Health (DOH) in Taiwan as a case to explain the adopting procedure of proposed SIM plan. The reasons of using case study are because the contexts, details, and improvements of a medical system are quite difficult to describe without a real case and this DOH project is the only implementation of our proposed method. The DOH is implementing Electronic Medical Record (EMR) based on the Healthcare Information and Management System Society (HIMSS) Analytics™ EMR Adoption Model [16] with seven stages. Generally, medium or large scale medical institutes in Taiwan are on stage four or five, because the closed loop medication administration has already been used by physicians for years. To achieve stage 6, full clinical decision support system and structured templates are needed. For stage 7, fully electronic medical record is necessary.

In this case, the purpose is to develop a Hand-drafting and Picture Management (HDP) system and related functions for a DOH hospital. The HDP system is designed to fully support physicians to make clinic decisions by combining text description, hand-drafted pictures, and examination photos. Because the HDP system is a knowledge intensive product with complicated data sources during a subjective data, objective data, assessment, and treatment plan (SOAP) transaction and the development of the first two years is not effective enough, we adopt the modified SIM plan using expertise models to systematically analyze it for satisfying software requirements.

At first, organization model is used to diagnose the current state. OM-1 as listed in Table 2
                      introduces the summary and introduction components of the SIM plan and discusses the context of problems and opportunities. The context includes the mission, external factors, strategies, and major value drivers. By examining these important issues, the solution is ensured to be a suitable countermeasure.

OM-2 as shown in Fig. 2
                      presents the hospital management of the SIM plan. The involved personnel in project are organized to effectively handle the related issues.

OM-3 as listed in Table 3
                      analyzes the main tasks of the necessary processes, and OM-4 as demonstrated in Table 4
                      indicates the related knowledge assets used in these processes of the HDP system. The tasks of HDP system, as shown in OM-3, include Service Manager, Control Manager, SOAP Manager, and Picture Manager. Besides, the knowledge intensive levels of these tasks are examined in detail. With the assistance of OM-4, the relationships between important knowledge assets and main tasks are connected, and the statuses of these knowledge assets are then examined. The related processes and knowledge assets handle the corresponding information management to analyze the needed processes and related resources. After these works are finished, the manager can monitor the performance of information management in the SIM plan by feasibility analysis.

To complete information management, the details of tasks and knowledge assets are examined by TM-1 (Table 5
                     ) and TM-2 (Table 6
                     ). In addition, AM-1 as shown in Table 7
                      introduces the agent's role in the HDP system, and the attributes of involved workflow are listed to characterize the specific agent. TM-1 focuses on the main tasks of the HDP system: Service Manager, Control Manager, SOAP Manager, and Picture Manager. The important characteristics of specific task are analyzed through TM-1. TM-2 indicates critical knowledge items used in the system, i.e., suite of medical record, template of hand-drafting picture, and model of the suite of medical record, so the data sources of transactions can be examined in detail. The agent depicted by AM-1 will be further used in the communication model.

With the above-mentioned components, the current state of the SIM plan could be carefully analyzed. After the context analysis is finished, the target state of the SIM plan should be further planned. Knowledge model, communication model, and design model are used to complete these works. The migration between two states can be assessed if these models are precise and detailed enough.

Knowledge model includes task knowledge, inference knowledge, and domain knowledge. For task knowledge, the main tasks of the HDP system defined in TM-1 are further decomposed into detailed inferences, and the task methods are used to maintain the relationships between tasks with decomposed inferences. In inference knowledge, all inferences of the HDP system are connected to related dynamic input role, dynamic output role, and static role. As for domain knowledge, the relationships between the concepts of the HDP system are connected by the corresponding rule types, and the knowledge base is used to compose the defined concepts and rule types with working mechanisms. After using task knowledge (Fig. 3
                     ) to decompose tasks to detailed inferences, inference knowledge (Fig. 4
                     ) maps them to concepts, rule types, and knowledge bases of domain knowledge (Fig. 5
                     ) and describes interactions between inferences and roles.

To describe the communication aspects of the target state, communication model is adopted. The SOAP transaction of the HDP system is defined in CM-1 (Table 8
                     ), and the involved information objects, agents, and constraints are examined. Besides, the related information exchange specification and communication plan of the SOAP transaction are recorded. The information exchange specification is defined in CM-2 (Table 9
                     ). The communication type patterns and attributes of messages are analyzed to define message specifications. The sequence diagram describing the communication plan is shown in Fig. 6
                     .

After defining knowledge model and communication model of the target state, the software architecture and target implementation platform of the HDP system as demonstrated in Tables 10–11
                     
                      are established depending on the target solution. The subsystem structure, control model, and subsystem decomposition mechanism are recorded in DM-1. The used software, potential hardware, target hardware, library, programming language, knowledge representation, interaction protocol, and control flow are listed in DM-2.

To implement the assessment points of the proposed SIM plan, the selection guidelines and procedures follow the GQM-paradigm [2] and software requirements of software engineering. First, the quality goals are set up, and a suitable quality model is chosen. Second, the quality assurance activity is designed to fulfill the concerns of quality goal. Third, the suitable evaluation techniques are selected to judge if it fits the specific quality assurance activity based on the software requirements.

Since DM-3 and DM-4 use the MVC metaphor-based checklist, the coverage-based quality assurance activity is chosen. The artifact-based checklists of inspection assess the requirements of the proposed SIM plan instead of the usage-based quality assurance activity. It is due to the fact that 1) controllers are mainly executed by the service manager, and the control manager supports the control mechanism; 2) the aspects of views are primarily categorized into the normal diagnosis and surgical operation, and the HDP system adopts different kinds of printing and displaying formats for different scenarios; and 3) the application model is examined by the aspects of task, task method, inference, inference method, dynamic role, static role, and knowledge base.

As discussed, the property-based checklist of inspection better examines the results of adopting the proposed design framework; hence, the concept of architecture alignment is introduced into the assessment phase.

To ensure that the proposed SIM plan can meet the requirements in this case, we adopted the Delphi method [15] to evaluate the implementation result. Three randomly-chosen physicians and one member of the software-developing team attended this Delphi group to assess the suitability of the proposed SIM plan.

To measure how well the proposed design framework is utilized in the medical software development project, one questionnaire of property-based checklist revised from Luftman [14] was used. During each round, the respondents ranked their answers in a 5-point Likert scale. To reach a consensus, the ranking process was repeated until the results converged. This evaluation was done for every year of the project and we found that the performance is getting much better. The results of last year are listed in Table 12
                     . Each category has its corresponding practices to measure the maturity level of architecture alignment.

The negotiation between IT staff and healthcare staff is fulfilled by holding periodical meetings, but it is still difficult for healthcare staff of hospital to thoroughly understand technical problems. Adopting the proposed SIM plan in the process of software development categorizes technical problems into suitable models. All of the information assets are maintained to satisfy the purposes of organizational learning and enhance the reuse of software architecture in the future.

The primary problem for competency/value measurements is that the selected techniques of solution are mostly decided by IT staff only. By adopting the proposed SIM plan, IT investment can be assessed as to whether it satisfies the continuous improvement. The software modification is easily followed, because the existing models are the benchmarks for further enhancement. Quality assurance activity is conducted by using the checklists of inspection, so the manager can ensure whether the service level agreement is fulfilled.

Even though the organizational maturity of DOH hospital is decent, the service level agreement is still problematic. The problem arises because there is no formal mechanism to handle SIM-related topics for IT projects. Consequently, IT staff directly determines software development methods and tools and ignores the evaluation procedures. The proposed SIM plan can handle the issues between healthcare business and IT strategy planning. In this way, a hospital does not need to establish an IT steering committee and can choose suitable software development methods and tools with target IT budget.

To manage the relationship of healthcare business and IT and maintain a trust style between the corresponding staff, a method enhancing perception and sharing risk is necessary. The proposed SIM plan takes this concern into account and monitors the progresses of the project. Separating software architecture concerns into models of related categories effectively reduces the risks of software development and strategy planning. The migration plan can also be set up, because the current state and target state of the system have been analyzed in detail.

The proposed SIM plan assists in the maintenance of the related information assets for further reuse. Regarding the HDP system, some medical standards must be complied (e.g., HL7 and CDA R2), because they influence the future compatibility and form modularization. Besides, data exchange between software components needs strict integrity, because it involves the patient's safety. As far as software architecture is concerned, separating concerns into expertise models ensures that the important points are all examined according to the principles of knowledge engineering and management. Therefore, the software quality is enhanced.

Since the above-mentioned technical and environmental issues (i.e., software architecture, software quality, and standard) may influence the suitability and applicability of the HDP system, the SIM plan needs to carefully handle them. As well known, changes are critical factors for successful implementation of a system. Using artifact-based and property-based checklists of inspection to conduct quality assurance activity, every change of the system is monitored and controlled in detail. In this way, software quality is assured, and software architecture is easier to satisfy the potential software requirements of future modification.

Lack of a complete project scope usually results from poor communication, because every stakeholder often only considers his/her involving workflow. Hence, to align the strategic goals of information system and principles of top management is necessary for healthcare business and IT strategy planning. As for the implementation procedures, if the detailed mechanisms are not organized clearly, the project often fails. The current state analysis not only describes the actual status of the solution but also designs the organizational structure suitable for implementation of the SIM plan.

Considering the different expected results of stakeholders and whether the adopted techniques are feasible is the major objective of target state analysis. After finishing this analysis, the outsourcing companies of the project can establish service level agreements precisely to avoid conflicts during software implementation and software delivery processes. The cooperation between outsourcing companies is an error-prone operation due to the inseparable relationship between software components. By using knowledge model and communication model, the accountability is enhanced. Final assessments are conducted via checklists of inspection to support project management. During software development, service level is difficult to control because many unexpected software requirements may emerge. To assure a project, assessing the migration results is essential for guiding healthcare business and IT strategy planning.

@&#CONCLUSION@&#

For developing software architecture that can satisfy software quality elicited from practical requirements, a well-designed software development methodology for medical institutes is proposed. This study adopts the method of software quality engineering to integrate CommonKADS and the SIM plan. In this way, the applicability of the proposed SIM plan is improved.

Since software requirements constantly change, modifications must be handled consciously to prevent dead-end software development [23]. Keeping software architecture easily modifiable is inevitable for coping with the future requirements and innovations. By adopting the improved SIM plan, the major advantages are as follows:
                        
                           1.
                           The improved SIM plan categorizes the technical problems into suitable models, making the negotiation between healthcare staff and IT staff smoother. By doing so, the organizational learning and business–IT liaison is enhanced. Even the inexperienced adopters are able to use it to construct the high quality communication channel.

Continuous improvement and quality assurance can be satisfied by assessing IT investment and benchmarking expertise models with the proposed SIM plan. Furthermore, these well-established competency/value measurements will become routine activities and hospital culture.

The viewpoints from healthcare business and IT strategy planning are integrated. Besides, the report channel is enhanced.

This plan separates software architecture concerns into different models. In this way, the feasibility of target solution can be judged and the risk is shared between partners.

The improved SIM plan assists the component-based software development, so software architecture integration is managed in a systematical manner. Since the related information assets are maintained for reuse, continuous improvement of the IT infrastructure is feasible.

It effectively handles the proactive change requirements by articulating expertise models, so an innovative environment is created. Meanwhile, the adopters' experiences are retained to satisfy the purpose of organizational learning.

@&#REFERENCES@&#

