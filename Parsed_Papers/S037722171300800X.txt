@&#MAIN-TITLE@&#A unified solution framework for multi-attribute vehicle routing problems

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A component-based heuristic framework for multi-attribute vehicle routing problems is introduced.


                        
                        
                           
                           Problem-specific attributes are confined into adaptive resolution components in relation to their structure.


                        
                        
                           
                           A general-purpose local search based on partial route concatenations is introduced.


                        
                        
                           
                           A Unified Hybrid Genetic Search (UHGS) with a unified Split algorithm is proposed.


                        
                        
                           
                           UHGS matches or outperforms all current best problem-tailored algorithms on 29 notable VRP variants and 42 benchmark sets.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Vehicle routing

Multiple attributes

General-purpose solver

@&#ABSTRACT@&#


               
               
                  Vehicle routing attributes are extra characteristics and decisions that complement the academic problem formulations and aim to properly account for real-life application needs. Hundreds of methods have been introduced in recent years for specific attributes, but the development of a single, general-purpose algorithm, which is both efficient and applicable to a wide family of variants remains a considerable challenge. Yet, such a development is critical for understanding the proper impact of attributes on resolution approaches, and to answer the needs of actual applications. This paper contributes towards addressing these challenges with a component-based design for heuristics, targeting multi-attribute vehicle routing problems, and an efficient general-purpose solver. The proposed Unified Hybrid Genetic Search metaheuristic relies on problem-independent unified local search, genetic operators, and advanced diversity management methods. Problem specifics are confined to a limited part of the method and are addressed by means of assignment, sequencing, and route-evaluation components, which are automatically selected and adapted and provide the fundamental operators to manage attribute specificities. Extensive computational experiments on 29 prominent vehicle routing variants, 42 benchmark instance sets and overall 1099 instances, demonstrate the remarkable performance of the method which matches or outperforms the current state-of-the-art problem-tailored algorithms. Thus, generality does not necessarily go against efficiency for these problem classes.
               
            

@&#INTRODUCTION@&#

General-purpose solvers for combinatorial optimization are algorithms that can be used to address large classes of problem settings without requiring extensive adaptations, user involvement or expertise. The development of such solvers is critical to the understanding of the impact of problem characteristics on the performance of solution methods, as well as to the capability to efficiently address new problem settings and applications displaying particular sets of characteristic combinations. One thus aims for high-performance general-purpose solvers, achieving a subtle balance between generality of scope and specificity in exploiting particular problem characteristics, to identify high-quality solutions for the broadest set of problem settings possible within limited computation time. Such developments are very challenging. As illustrated by Wolpert (1997), generality may be paid for in terms of performance, while dedicated algorithms cannot address problem variants without extensive adaptation.

We focus on vehicle routing problems (VRPs), one of the major classes of combinatorial optimization problems with an extremely broad range of applications. Real-life settings lead to a very large number of variants born of the requirement to manage a wide variety of characteristics and decisions, called attributes in Vidal, Crainic, Gendreau, and Prins (2013b), to account for the particular customer, vehicle, driver, and network settings and to combine routing considerations with other tactical or strategic choices. The number of VRP attributes that need to be jointly considered is continuously increasing, yielding a considerable variety of Multi-Attribute Vehicle Routing Problems (MAVRPs).

The current state-of-the-art and knowledge does not offer the means to use exact solution methods for combinatorial optimization as general-purpose solvers for MAVRPs. Consequently, literally hundreds of papers were published recently, proposing supposedly different heuristic methods for VRP variants with diverse combinations of sets of attributes. As for the most general vehicle routing metaheuristics proposed in the literature (Cordeau, Gendreau, & Laporte, 1997; Cordeau, Laporte, & Mercier, 2001; Ropke & Pisinger, 2006a; Ropke & Pisinger, 2006b; Subramanian, Uchoa, & Ochi, 2013), they usually address a single difficult compound problem formulation including several variants as special cases, but still require extensive adaptation when the main problem setting is modified. The field thus lacks an efficient general-purpose MAVRP solver, and building one represents a considerable research challenge. Our objective is to address this challenge and propose a component-based heuristic framework and a general-purpose solver providing high performance in terms of solution quality and computational efficiency for a very broad and diverse set of multi-attribute vehicle routing problems. These new contributions may point to promising developments in related fields such as scheduling.

We thus introduce a component-based heuristic solution framework designed in accordance with problem structure and attribute specifics, as well as a Unified Hybrid Genetic Search (UHGS). Any unified method must ultimately account for the specific attributes, objectives, and constraints of the particular problem setting at hand. Yet, to achieve a high level of generality, these problem attributes are confined to restricted adaptive components. Thus, UHGS relies on unified problem-independent procedures: local search, crossover, Split algorithm and diversity management, while problem-specific strategies are restricted to a few modular components which take charge of assignment changes (e.g., of customers to depots or days), enumerations of sequencing alternatives, and route evaluations. These components are self-adapted in relation to the attributes of the problem at hand. Furthermore, to achieve high efficiency during local-improvement procedures, we propose a unified route-evaluation methodology based on information preprocessing on sub-sequences, and move evaluations as a concatenation of known sub-sequences. This framework unifies and extends efficient pre-processing techniques which were previously used for different problems.

Extensive computational experiments demonstrate the remarkable performance of the resulting metaheuristic on the classical VRP as well as on MAVRP with multiple periods, multiple depots, vehicle-site dependencies, soft, multiple, and general time windows, backhauls, cumulative or load-dependent costs, simultaneous or mixed pickup and delivery, fleet mix, time dependency, service site choice, driving and working hours regulations, and many of their combinations. With a single implementation, parameter setting and termination criterion, UHGS matches or outperforms all current problem-tailored methods, from more than 180 articles, on 29 vehicle routing variants, 42 benchmark sets and a total of 1099 problem instances. Hence, it appears that generality does not necessarily impede efficiency for the considered problem classes.

The contributions of this work are the following: (1) A component-based heuristic design is proposed for multi-attribute vehicle routing problems, which efficiently isolates problem-specific adaptations from the generic framework; (2) A unified framework for efficient route evaluations and local search, based on efficient move-evaluation techniques from Kindervater and Savelsbergh (1997), Savelsbergh (1985), Savelsbergh (1992), which builds and exploits information on sub-sequences through concatenation operations to efficiently explore neighborhoods; (3) Unified versions of efficient genetic operators, solution representation, and Split algorithm; (4) A UHGS which addresses a large set of variants with a single implementation and set of parameters, and yields solutions of exceptional quality on prominent VRP variants and benchmark instance sets.

This paper is structured as follows. Section 2 states the problem, reviews the main classes of general-purpose MAVRP solvers, and introduces the proposed component-based heuristic design. Section 3 details the unified local search and route-evaluation operators. Section 4 describes the UHGS. Computational experiments on a wide range of problems are reported in Section 5. Section 6 concludes.

Vehicle routing problems have been studied for more than 50years, serving as support for a vast literature, including numerous surveys (see Andersson, Hoff, Christiansen, Hasle, & Lokketangen, 2010; Gendreau, Potvin, Br√§ysy, Hasle, & Lokketangen, 2008; Vidal et al., 2013b, among others), books (Golden et al., 2008; Toth & Vigo, 2002), and overall more than a thousand dedicated journal articles (Eksioglu, Vural, & Reisman, 2009). The research effort on the topic is still growing today, because of its major economic impact, the large difficulty of many settings, and the considerable variety of attributes combinations encountered in practice.

The classical Capacitated Vehicle Routing Problem (CVRP) can be stated as follows. Let 
                           
                              G
                              =
                              (
                              V
                              ,
                              E
                              )
                           
                         be a complete undirected graph with 
                           
                              ‚à£
                              V
                              ‚à£
                              =
                              n
                              +
                              1
                           
                         vertices, vertex 
                           
                              
                                 
                                    v
                                 
                                 
                                    0
                                 
                              
                              ‚àà
                              V
                           
                         representing a depot, where a fleet of m identical vehicles with capacity Q is based, the other vertices 
                           
                              
                                 
                                    v
                                 
                                 
                                    i
                                 
                              
                              ‚àà
                              V
                              ‚ßπ
                              {
                              
                                 
                                    v
                                 
                                 
                                    0
                                 
                              
                              }
                           
                         for i
                        ‚àà{1, ‚Ä¶, n} representing customers characterized by a demand for q
                        
                           i
                         units of product. Edges 
                           
                              (
                              i
                              ,
                              j
                              )
                              ‚àà
                              E
                           
                         illustrate the possibility to travel from a customer v
                        
                           i
                         to a customer v
                        
                           j
                         for a cost d
                        
                           ij
                         (assimilated to the distance). The CVRP requires designing up to m cycles (vehicle routes) starting and ending at a depot v
                        0 in order to service each customer once.

Many VRP variants with attributes have emerged due to the requirements of practical applications. These particular versions aim at better accounting for customer requirements (e.g., time-dependent service costs, time windows, multiple planning periods), network and vehicle characteristics (multiple depots, congestion, heterogeneous fleet, vehicle-site dependencies), driver needs (working hour regulations, lunch breaks), or at better integrating the decisions in a tactical or strategic planning (inventory or location routing). The large variety of actual settings, characteristics and VRP attributes is addressed by a vast literature. For the sake of conciseness, a detailed literature review on all considered VRP variants is out of scope. Comprehensive surveys can be found in Gendreau et al. (2008), Golden et al. (2008), Andersson et al. (2010), and Vidal et al. (2013b).

As in Vidal et al. (2013b), three main categories of attributes are discerned in this paper. ASSIGN attributes are problem particularities requiring decisions on the assignment of customers to some globally constrained ASSIGN Attribute Resources (AARs), for example, depots, days or vehicle types. Notice that ‚ÄúProfits‚Äù is defined as an ASSIGN attribute. Indeed, VRP with profits lead to an assignment of customers to two mutually exclusive groups, customers selected for service and the ones which are not. Routing costs are in this case dependent upon the AAR. SEQ attributes are problem characteristics that explicitly impact the structure and geometry of the routes such as, backhaul trips, multiple trips, or multi-echelon attributes. Finally, EVAL attributes affect the way routes are evaluated. This latter class of attributes encompasses advanced route costs or feasibility evaluations, as well as the eventual optimization of additional decisions on routes (e.g., service dates, waiting times, packing of objects in the vehicle) when the sequence of visits if fixed. Each family of attributes thus impacts the resolution methodologies in a very different way.

Three main approaches for achieving generality may be identified when analyzing the literature on general-purpose MAVRP solution methods. Rich solvers and modeling and solution frameworks, examined in this subsection, and component-based frameworks, which are the topic of the next one.


                        Rich solvers are designed to address a multi-attribute VRP formulation generalizing several variants associated to subsets of its attributes. Several well-known VRP heuristics are included in this category and are displayed in Table 1
                        : the Unified Tabu Search (UTS; Cordeau et al., 1997; Cordeau et al., 2001; Cordeau & Laporte, 2001; Cordeau & Laporte, 2003; Cordeau, Laporte, & Mercier, 2004), the Adaptive Large Neighborhood Search algorithm (ALNS; Pisinger & Ropke, 2007; Ropke & Pisinger, 2006a; Ropke & Pisinger, 2006b), the Iterated Local Searches of Ibaraki et al. (2005), Ibaraki et al. (2008) and Hashimoto, Ibaraki, Imahori, and Yagiura (2006, 2008) (ILS), and Subramanian et al. (2013) (ILS-SP), the latter being hybridized with integer programming components, and the exact integer programming approach of Baldacci and Mingozzi (2009) and Baldacci, Bartolini, Mingozzi, and Valletta (2011a, 2011b) (IPSP), based on a set partitioning formulation. Keeping in line with the focus of the paper on general-purpose algorithms, the table indicates for each method the largest subset of MAVRPs that was addressed in a single implementation, generally the one from the original paper. Most successful methodologies were extended later onto other variants, but separate developments were generally required. The subset of variants addressed by the general-purpose UHGS methodology we propose is also displayed for comparison purposes.

Hybrid Genetic Algorithms (HGA), with giant-tour solution representations and local search solution enhancements (Prins, 2004), have proven their ability in addressing many MAVRPs (Labadi, Prins, & Reghioui, 2008; Ngueveu, Prins, & Wolfler Calvo, 2010; Prins, 2009; Vidal, Crainic, Gendreau, Lahrichi, & Rei, 2012a), as well as a large class of mixed node and arc routing problem variants (Prins & Bouchenoua, 2005). We did not include them in this classification, however, because no unifying implementation of this class of methods has been proposed up to date, particular hard-coded implementations of solution representation, crossover, Split, and local search procedures being proposed for different MAVRPs. Generalizing these procedures to a wider range of variants is an important challenge that we address in this paper.

Each rich solver included in Table 1 relies on a ‚Äúrich‚Äù multi-attribute VRP formulation, a periodic VRP with time windows (UTS), a pick-up and delivery problem with time windows (ALNS), a VRP with general time windows, time-dependent, and flexible travel-times (ILS), or a heterogeneous pickup-and-delivery problem with time windows (ILS-SP). Yet, relying on such formulations to achieve generality presents two main limitations. First, problems become more intricate and difficult to address as the number of attributes one must consider simultaneously grows. Second, all the features of the general model are still present when particular variants, with less attributes, are considered, resulting in loss of efficiency through wasted computations induced by deactivated attributes and, sometimes, higher complexity for some algorithm components. The methodology we propose avoids these pitfalls.


                        Modeling and solution frameworks seek to capture the general properties of the attributes to transform them into machine-readable components. Thus, the framework of Desaulniers et al. (1998) formulates a number of classes of attributes as resources (e.g., load, distance, time), which are extended to successive customer visits through resource extension functions (REFs) subject to interval constraints. This framework was applied to various crew scheduling and routing problem variants, the resulting formulations being then solved efficiently by column generation (Desaulniers et al., 2005).

It is well known that the performance of many heuristics for MAVRPs is directly linked to the capability of efficiently evaluating new routes produced during the search. Hence, a large body of literature focuses on reducing the complexity of route evaluation in presence of difficult EVAL attributes (Campbell & Savelsbergh, 2004; Garcia, 1996; Kindervater & Savelsbergh, 1997; Savelsbergh, 1985; Savelsbergh, 1992). These approaches share the common characteristic that they develop meaningful information on sub-sequences of successive visits (partial routes) to speed up evaluations of new routes. Using this methodology, time windows, simultaneous pickups and deliveries, and load-dependent costs attributes can be efficiently managed in the course of local searches, leading to notable gains in computational complexity.

Merging these two avenues of research, Irnich (2008b) considered forward and backward extension of resources, as well as the management of generalized resources extension functions on sub-sequences of visits to perform efficient route evaluations. This extended REF methodology was combined with sequential search concepts, leading to a unified solution approach (Irnich, 2008a). Yet, strong properties on REFs inversion and generalization to segments are required for the framework to apply.

Finally, Puranen (2011) introduced a domain model able to express VRP variants and transform them into a routing metamodel workable by optimization methods. The routing metamodel is based on the concepts of actors, activities, resources, and capabilities. It exploits both the concept of resource extension functions, and a generalization called mapping-ordering constraints. The methodology covers the complete resolution process flow, from the domain model, to the routing metamodel and its resolution. However, few computational experiments were presented to demonstrate the capabilities of the approach.

As underlined in this review, a few unifying methodologies have been proposed for multi-attribute VRPs. However, these approaches are limited in the classes, properties and number of attributes they manage. Modeling and solution frameworks (Desaulniers et al., 1998; Irnich, 2008a; Irnich, 2008b; Puranen, 2011) do provide remarkable formalisms for many attributes, but in counterpart require strong properties to be efficiently applied, such as the existence of REFs which are invertible and generalizable to segments.

In this paper, we proposed a component-based heuristic framework designed in accordance with the problem structure. Any general-purpose solver must ultimately account for the specific attributes, objectives, and constraints of the particular problem setting at hand. In our approach, to achieve a high level of generality, the problem attributes are confined to small polymorphic (Meyer, 1997) method components capable of adapting to the problem specifics. We create a library of basic attribute-dependent operators, out of which the algorithm can automatically select the necessary operators in accordance to the problem. Components are designed to offer the possibility to integrate attribute-specific strategies, opening the way to efficient route-evaluation procedures managing meaningful data on sequences.

Some related designs have been used in the combinatorial optimization literature to build general-purpose heuristic solvers or software libraries (e.g., Cahon, Melab, & Talbi, 2004; Fink & Voss, 2003), hyper-heuristics (Burke et al., 2010), and cooperative methods (Crainic & Toulouse, 2010). Component-based heuristic approaches are rare in the VRP literature (Du & Wu, 2001; Gro√´r, Golden, & Wasil, 2010). While polymorphism has been efficiently used to generate adaptable resolution strategies, i.e., configurable metaheuristics or local-search strategies, it has not yet provided the means to address the challenge of the broad variability in problem settings. Moreover, although hyper-heuristics and cooperative methods achieve more robust solving by making several basic methods adapt or cooperate, they are still dependent upon the availability of these basic problem-tailored methods.

We restrict this paper to the VRP class in order to keep the length of the paper within acceptable limits. Similarly to several other combinatorial optimization problems, MAVRPs present a particular structure combining decisions on assignment (and partitioning), sequencing, and fixed-sequence optimization and evaluation. Consequently, we identify three categories of attributes, defined relatively to their impact on the heuristic resolution: ASSIGN attributes requiring the assignment of routes and customers to global resources (depots, days, vehicle types), SEQ attributes determining the structure of the network and the sequences of visits, and EVAL attributes modifying the solution evaluations. We introduce three adaptive components, which account for these attributes, and which fulfill the following tasks:
                           
                              ‚Ä¢
                              
                                 Assignment. Select and check the feasibility of customer and route re-assignments to different ASSIGN attribute resources (day, depot, vehicle type, etc.);


                                 Sequence choice. Generate neighbor solutions with different sequence alternatives with regards to SEQ attributes;


                                 Route evaluations. Evaluate a fixed route and optimize side decisions related to EVAL attributes (timing or loading sub-problems).

We show in the next sections how these components can serve as building blocks for a wide range of general-purpose neighborhood- or population-based metaheuristics for MAVRPs. Section 3 first describes how route-evaluation components can lead to an efficient unified local search, and then Section 4 follows with a description of the proposed Unified Hybrid Genetic Search for MAVRPs.

Designing a general-purpose high-performance local search for MAVRPs is an important research challenge in itself. We therefore introduce first the methodology we propose to address this challenge, before proceeding to the complete UHGS framework. The emphasis is on EVAL attributes, which impact the heuristic resolution during route evaluations, such as loading constraints or timing aspects. In the proposed approach, these problem specifics are confined to route-evaluation components, which are adaptive problem-dependent elements of the methodology to perform route, move-evaluation, and feasibility statements. Since high performance is sought, these components are designed to manage pre-processed information on sub-sequences during move evaluations. We first define these components, proceeding then to the corresponding route-evaluation operators and, finally, to the unified local search method.

The route-evaluation components exploit the fact that any local-search move issued from a bounded number of edge exchanges and node relocations can be assimilated to a recombination of a bounded number of sequence of visits from an incumbent solution (Kindervater & Savelsbergh, 1997; Vidal, Crainic, Gendreau, & Prins, 2011). As illustrated in Fig. 1
                        , an inter-route Relocate move of a sequence of visits [œÉ
                        
                           r
                        (u), ‚Ä¶, œÉ
                        
                           r
                        (v)] next to a visit œÉ
                        
                           r‚Ä≤(w) yields two recombined routes œÅ
                        =[œÉ
                        
                           r
                        (1), ‚Ä¶, œÉ
                        
                           r
                        (u
                        ‚àí1)]‚äï[œÉ
                        
                           r
                        (v
                        +1), ‚Ä¶, œÉ
                        
                           r
                        (‚à£r‚à£)] and œÅ‚Ä≤=[œÉ
                        
                           r‚Ä≤(1), ‚Ä¶, œÉ
                        
                           r‚Ä≤(w)]‚äï[œÉ
                        
                           r
                        (u), ‚Ä¶, œÉ
                        
                           r
                        (v)]‚äï[œÉ
                        
                           r‚Ä≤(w
                        +1), ‚Ä¶, œÉ
                        
                           r‚Ä≤(‚à£r‚Ä≤‚à£)],‚äï denoting the concatenation operator.

We thus introduce in Table 2
                         five operations of route-evaluation components. The first three operations, called INIT(œÉ), FORW(œÉ), and BACK(œÉ) provide the means to initialize and build the re-optimization information on sequences by forward and backward concatenation of single visits, respectively. Within a local search, they can be used during a pre-processing phase to build the information on sub-sequences. The evaluation of new sequences made of a concatenation of several sub-sequences is then performed by using an evaluator, which takes advantage from the previously developed information on sub-sequences. Two evaluators, EVAL2(œÉ
                        1, œÉ
                        2) or EVALN(œÉ
                        1, ‚Ä¶, œÉ
                        
                           n
                        ), are presented. The former considers the concatenation of two segments, while the latter allows for any number of segments. The reasons for designing two different operations relate to the fact that all attributes do not allow for an efficient EVALN operation and thus, in some well-defined settings, the algorithm must rely on EVAL2 and construction operations to perform route evaluations (Section 3.3).

The route-evaluation component provides the basic structure to obtain state-of-the-art local search procedures for all EVAL attributes. It relies on a library of route-evaluation operators, specific to each attribute, which are selected automatically by the method relatively to the problem specification. Route-evaluation operators for different attributes are presented in Section 3.2. A unified local search based on these operators is presented in Section 3.3.

Route-evaluation operators are specific to each attribute, but always respect the five-operations scheme described in Section 3.1. Three cases of attributes arise:
                           
                              ‚Ä¢
                              For the first case, some type of information, including cost characterization, is efficiently computable by induction on the concatenation operation, such that a single equation can serve as the basis for all operations. Such a situation corresponds in the framework of Irnich (2008b) to the case of REFs that are invertible and generalizable to segments. Among the MAVRPs that can be managed in this way, we find the VRP with capacity, distance constraints, backhauls, cumulative costs, hard (eventually multiple) time windows, simultaneous deliveries and pickups, or lunch breaks.

In the second case, which includes soft time windows and time-dependent travel times, among others, the structure of the re-optimization information is more complex and FORW(œÉ) or BACK(œÉ) operations may become more computationally expensive than quick concatenation evaluations. In addition, EVALN may not be available in all cases.

Finally, a more advanced role may be given to the route-evaluation operator for some MAVRPs. These operators can indeed assume the optimization of additional decisions on visit locations within groups of customers (case of the generalized VRP), explicitly determine the break times placement for drivers (VRP with truck driver schedule regulations), or position the objects in the vehicle (VRP with loading constraints). Bi-directional shortest path procedures, tree search methods, or integer programming components are then potentially employed in the operators.

To illustrate the different cases, we now describe route-evaluation operators for several important attributes. Some of these operators are derived from past works and hereby unified in our framework. In addition, new operators are introduced for some other problems, e.g., VRP with cumulative costs, load-dependent costs, simultaneous deliveries and pickups, lunch breaks, service site choices, and hours of service regulations.

The classical CVRP is perhaps the simplest setting for which information preprocessing is frequently used. Indeed, it is natural to manage for each sub-sequence œÉ its partial load Q(œÉ) and partial distance D(œÉ) to speed-up the load constraint checks and distance computations. Eqs. (1) and (2) enable to compute these quantities by induction on the concatenation operation, and provide the means to perform both FORW, BACK and EVALN in O(1) time. It is also worth noting that other globally constrained resources accumulated on arcs or vertices on the routes can be managed in the same way (see Irnich, 2008b).
                              
                                 (1)
                                 
                                    Q
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    Q
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    Q
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                              
                           
                           
                              
                                 (2)
                                 
                                    D
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    D
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    +
                                    D
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                              
                           
                        

The Cumulative VRP (CCVRP) is based on a different objective seeking the minimization of the sum of arrival times to customers. Evaluating the cost of a route subject to some modifications requires more advanced methods than for the classical CVRP, since arrival times to many customers in the route are impacted. Still, evaluations remain manageable in amortized O(1) operations for several families of classical local search neighborhoods (Ngueveu et al., 2010). Vidal et al. (2011) and Silva, Subramanian, Vidal, and Ochi (2012) show that three types of information on sub-sequences are sufficient to efficiently evaluate route costs: the duration D(œÉ) to perform the sequence of visits œÉ, the cumulative cost C(œÉ) when starting at time 0, thus representing the cost of the sequence, and the delay cost W(œÉ) for each unit of time delay in the starting date. For a sequence œÉ
                           0 containing a single vertex, the information can be initialized by setting D(œÉ
                           0)=0 as no travel time is performed, C(œÉ
                           0)=0, and W(œÉ
                           0)=1 when the vertex is a customer, otherwise W(œÉ
                           0)=0. Eqs. (3)‚Äì(5) then enable to compute this information by induction on the concatenation operation, thus allowing to efficiently implement all route-evaluation operations.
                              
                                 (3)
                                 
                                    D
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    D
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    +
                                    D
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                              
                           
                           
                              
                                 (4)
                                 
                                    C
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    C
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    W
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    (
                                    D
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    )
                                    +
                                    C
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                              
                           
                           
                              
                                 (5)
                                 
                                    W
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    W
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    W
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                              
                           
                        

The fuel consumption f
                           
                              ij
                            of a vehicle is estimated in Xiao, Zhao, Kaku, and Xu (2012) to grow linearly with the load q
                           
                              ij
                            on a segment, and thus f
                           
                              ij
                           
                           =(f
                           1
                           q
                           
                              ij
                           
                           +
                           f
                           2)d
                           
                              ij
                           , where f
                           1 represents the fuel cost per mile and unit of load, and f
                           2 stands for the base cost per mile. We propose an efficient evaluation of fuel consumption on a route which involves the computation of cumulated demand Q(œÉ), distance D(œÉ), and the load-factor F(œÉ) (load-times-distance) on sequences. The fuel consumption C(œÉ) can be derived from this information since C(œÉ)=
                           f
                           1
                           F(œÉ)+
                           f
                           2
                           D(œÉ). For a sequence œÉ
                           0 containing a single vertex v
                           
                              i
                           , Q(œÉ
                           0)=
                           q
                           
                              i
                           , D(œÉ
                           0)=0, and F(œÉ
                           0)=0. Furthermore, Eqs. (6)‚Äì(8) enable to compute these values by induction on larger sub-sequences, leading to route evaluations in O(1) time.
                              
                                 (6)
                                 
                                    D
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    D
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    +
                                    D
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                              
                           
                           
                              
                                 (7)
                                 
                                    Q
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    Q
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    Q
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                              
                           
                           
                              
                                 (8)
                                 
                                    F
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    F
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    Q
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    (
                                    D
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    )
                                    +
                                    F
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                              
                           
                        

In the VRP with Backhauls (VRPB), to each customer is either associated a delivery quantity q
                           
                              i
                           
                           ‚â†0 of a product, or a pickup quantity p
                           
                              i
                           
                           ‚â†0 of a different product. The capacity of the vehicle is limited to Q product units. Furthermore, a structural route constraint is imposed, pick-up customers being necessarily serviced at the end of the route, after at least one delivery customer. This structural constraint can be modeled directly in the distance matrix by setting c
                           
                              ij
                           
                           =+‚àû if vertex v
                           
                              i
                            corresponds to a pickup customer and v
                           
                              j
                            is a delivery customer, and by setting the distance from the depot c
                           0j
                           
                           =+‚àû for any pickup customer v
                           
                              j
                           . Evaluating the routes then requires checking the load constraints and summing up the distances. Three types of information are developed on sequences œÉ to that extent: the partial distance D(œÉ), the total delivery quantity 
                              
                                 
                                    
                                       Q
                                    
                                    
                                       
                                          d
                                       
                                    
                                 
                                 (
                                 œÉ
                                 )
                              
                           , and the total pickup quantity 
                              
                                 
                                    
                                       Q
                                    
                                    
                                       
                                          p
                                       
                                    
                                 
                                 (
                                 œÉ
                                 )
                              
                           . Since the two types of products are never jointly in the vehicle because of structural route constraints, checking load feasibility on a sequence involves simply to check whether 
                              
                                 
                                    
                                       Q
                                    
                                    
                                       
                                          d
                                       
                                    
                                 
                                 (
                                 œÉ
                                 )
                                 ‚©Ω
                                 Q
                              
                            and 
                              
                                 
                                    
                                       Q
                                    
                                    
                                       
                                          p
                                       
                                    
                                 
                                 (
                                 œÉ
                                 )
                                 ‚©Ω
                                 Q
                              
                           . Hence, both 
                              
                                 
                                    
                                       Q
                                    
                                    
                                       
                                          d
                                       
                                    
                                 
                                 (
                                 œÉ
                                 )
                              
                            and 
                              
                                 
                                    
                                       Q
                                    
                                    
                                       
                                          p
                                       
                                    
                                 
                                 (
                                 œÉ
                                 )
                              
                            can be independently evaluated as previously described in Eq. (1) to perform route evaluations.

The VRP with simultaneous deliveries and pickups (VRPSDP) also involves two different products to be respectively delivered and picked-up. In contrast with the VRPB, no structural constraint is imposed on the routes, and a vertex can require both a delivery and a pick-up. As the vehicle can now contain both types of products simultaneously, load feasibility must be ensured at each vertex of the trip. To address this case, we introduce a re-optimization method based on three types of information on sub-sequences: 
                              
                                 
                                    
                                       Q
                                    
                                    
                                       
                                          d
                                       
                                    
                                 
                                 (
                                 œÉ
                                 )
                              
                            and 
                              
                                 
                                    
                                       Q
                                    
                                    
                                       
                                          p
                                       
                                    
                                 
                                 (
                                 œÉ
                                 )
                              
                           , the sum of deliveries and pick-ups on the sequence œÉ, respectively, and 
                              
                                 
                                    
                                       Q
                                    
                                    
                                       
                                          max
                                       
                                    
                                 
                                 (
                                 œÉ
                                 )
                              
                           , the maximum load in the vehicle while processing the sequence œÉ when starting with an initial load of 
                              
                                 
                                    
                                       Q
                                    
                                    
                                       
                                          d
                                       
                                    
                                 
                                 (
                                 œÉ
                                 )
                              
                           . These values can be computed by induction on the concatenation operation using Eqs. (9)‚Äì(11), leading to efficient constant time route-evaluation operations.
                              
                                 (9)
                                 
                                    
                                       
                                          Q
                                       
                                       
                                          
                                             p
                                          
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    
                                       
                                          Q
                                       
                                       
                                          
                                             p
                                          
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          Q
                                       
                                       
                                          
                                             p
                                          
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                              
                           
                           
                              
                                 (10)
                                 
                                    
                                       
                                          Q
                                       
                                       
                                          
                                             d
                                          
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    
                                       
                                          Q
                                       
                                       
                                          
                                             d
                                          
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          Q
                                       
                                       
                                          
                                             d
                                          
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                              
                           
                           
                              
                                 (11)
                                 
                                    
                                       
                                          Q
                                       
                                       
                                          
                                             max
                                          
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    max
                                    {
                                    
                                       
                                          Q
                                       
                                       
                                          
                                             max
                                          
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          Q
                                       
                                       
                                          
                                             d
                                          
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    ,
                                    
                                       
                                          Q
                                       
                                       
                                          
                                             max
                                          
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          Q
                                       
                                       
                                          
                                             p
                                          
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    }
                                 
                              
                           
                        

Another variant of VRPSDP has been addressed in Kindervater and Savelsbergh (1997), where a single commodity was considered and products picked-up at a location could be used to service further customers in the route, leading to different equations.

The VRP with hard time windows (VRPTW) imposes interval constraints [e
                           
                              i
                           , l
                           
                              i
                           ] on arrival dates to each customer v
                           
                              i
                           , as well as service durations s
                           
                              i
                            (by default s
                           0
                           =0). Waiting time is allowed on the route. The VRPTW is the first variant on which information on sub-sequences was managed and exploited (Garcia, 1996; Kindervater & Savelsbergh, 1997; Savelsbergh, 1985; Savelsbergh, 1992). These authors proposed to characterize any sub-sequence with four types of information: a feasibility statement F(œÉ), the sum of travel and service times T(œÉ), the earliest possible completion time for the sequence of visits E(œÉ), and the latest feasible starting date L(œÉ). For a sequence œÉ
                           0
                           =(v
                           
                              i
                           ) containing a single vertex, T(œÉ
                           0)=
                           s
                           
                              i
                           , E(œÉ
                           0)=
                           e
                           
                              i
                           
                           +
                           s
                           
                              i
                           , L(œÉ
                           0)=
                           l
                           
                              i
                           , and F(œÉ
                           0)=
                           true. Eqs. (12)‚Äì(15) enable then to compute by induction the information for a concatenation of sequences.
                              
                                 (12)
                                 
                                    T
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    T
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    +
                                    T
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                              
                           
                           
                              
                                 (13)
                                 
                                    E
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    max
                                    {
                                    E
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    +
                                    T
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    ,
                                    E
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    }
                                 
                              
                           
                           
                              
                                 (14)
                                 
                                    L
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    min
                                    {
                                    L
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    ,
                                    L
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    -
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    -
                                    T
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    }
                                 
                              
                           
                           
                              
                                 (15)
                                 
                                    F
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    ‚â°
                                    F
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    ‚àß
                                    F
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    ‚àß
                                    (
                                    E
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    ‚©Ω
                                    L
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    )
                                 
                              
                           
                        

When the departure date of the vehicle is not fixed, starting dates have an influence on the total waiting time on the route. The minimum duration for the route can still be obtained from the previous information as DUR(œÉ)=max{E(œÉ
                           
                              i
                           )‚àí
                           L(œÉ
                           
                              i
                           ), T(œÉ
                           
                              i
                           )}. Route evaluations are thus manageable in O(1) time.

Lunch breaks appear in several real-life applications (Bostel, Dejax, Guez, & Tricoire, 2008; Sahoo, Kim, Kim, Kraas, & Popov, 2005), but have been the focus of only moderate attention in the literature. Let the VRPTW with lunch breaks (VRPTWLB) be defined as a VRPTW variant such that for any non-empty route a single break of duration 
                              
                                 
                                    
                                       s
                                    
                                    
                                       
                                          lb
                                       
                                    
                                 
                              
                            must be taken between 
                              
                                 [
                                 
                                    
                                       e
                                    
                                    
                                       
                                          lb
                                       
                                    
                                 
                                 ,
                                 
                                    
                                       l
                                    
                                    
                                       
                                          lb
                                       
                                    
                                 
                                 ]
                              
                            at one dedicated location 
                              
                                 
                                    
                                       v
                                    
                                    
                                       
                                          lb
                                       
                                    
                                 
                              
                            chosen in a set of potential locations 
                              
                                 
                                    
                                       V
                                    
                                    
                                       
                                          lb
                                       
                                    
                                 
                              
                           . Let also the variant with flexible breaks (VRPTWFB) represent the case where the location of the break is unconstrained. In the following, we introduce route-evaluation operators to account for lunch placement choices in the VRPTWFB.

Any sub-sequence œÉ can be characterized by two sets of information: a data set T(œÉ), E(œÉ), L(œÉ), F(œÉ), characterizing the time windows as in Eqs. (12)‚Äì(15) when no break has been taken in the sub-sequence, and another data set T‚Ä≤(œÉ), E‚Ä≤(œÉ), L‚Ä≤(œÉ), F‚Ä≤(œÉ), characterizing the case where a break is taken somewhere between the first and the last visit of œÉ. By definition, 
                              
                                 T
                                 ‚Ä≤
                                 (
                                 œÉ
                                 )
                                 =
                                 T
                                 (
                                 œÉ
                                 )
                                 +
                                 
                                    
                                       s
                                    
                                    
                                       
                                          lb
                                       
                                    
                                 
                              
                            for any œÉ. Initially, for a sequence œÉ
                           0
                           =(v
                           
                              i
                           ) containing a single vertex, T(œÉ
                           0)=
                           s
                           
                              i
                           , E(œÉ
                           0)=
                           e
                           
                              i
                           
                           +
                           s
                           
                              i
                           , L(œÉ
                           0)=
                           l
                           
                              i
                            and F(œÉ
                           0)=
                           true. Furthermore, breaks are exclusively taken inside the sequence and thus, a sequence made of a single visit should not include a break, such that E‚Ä≤(œÉ
                           0)=+‚àû, L‚Ä≤(œÉ
                           0)=0 and F‚Ä≤(œÉ
                           0)=
                           false. Computing T(œÉ
                           1
                           ‚äï
                           œÉ
                           2), E(œÉ
                           1
                           ‚äï
                           œÉ
                           2), L(œÉ
                           1
                           ‚äï
                           œÉ
                           2), F(œÉ
                           1
                           ‚äï
                           œÉ
                           2) can be done as previously with Eqs. (12)‚Äì(15). Computing their counterparts with breaks by induction comes to select a best case out of three: the break is either taken during œÉ
                           1 (Case 1), between œÉ
                           1 and œÉ
                           2 (Case 2), or during œÉ
                           2 (Case 3). These computations are displayed in Eqs. (17)‚Äì(27).
                              
                                 (16)
                                 
                                    
                                       
                                          E
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    min
                                    (
                                    {
                                    
                                       
                                          E
                                       
                                       
                                          case
                                          
                                          i
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    
                                    s.t.
                                    
                                    
                                       
                                          F
                                       
                                       
                                          case
                                          
                                          i
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    =
                                    true
                                    }
                                    ‚à™
                                    +
                                    ‚àû
                                    )
                                 
                              
                           
                           
                              
                                 (17)
                                 
                                    
                                       
                                          L
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    max
                                    (
                                    {
                                    
                                       
                                          L
                                       
                                       
                                          case
                                          
                                          i
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    
                                    s.t.
                                    
                                    
                                       
                                          F
                                       
                                       
                                          case
                                          
                                          i
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    =
                                    true
                                    }
                                    ‚à™
                                    -
                                    ‚àû
                                    )
                                 
                              
                           
                           
                              
                                 (18)
                                 
                                    
                                       
                                          F
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    
                                       
                                          F
                                       
                                       
                                          case
                                          
                                          1
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    ‚à®
                                    
                                       
                                          F
                                       
                                       
                                          case
                                          
                                          2
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    ‚à®
                                    
                                       
                                          F
                                       
                                       
                                          case
                                          
                                          3
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                 
                              
                           
                           
                              
                                 (19)
                                 
                                    
                                       
                                          E
                                       
                                       
                                          case
                                          
                                          1
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    =
                                    max
                                    {
                                    
                                       
                                          E
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    +
                                    T
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    ,
                                    E
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    }
                                 
                              
                           
                           
                              
                                 (20)
                                 
                                    
                                       
                                          E
                                       
                                       
                                          case
                                          
                                          2
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    =
                                    max
                                    {
                                    E
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    +
                                    
                                       
                                          s
                                       
                                       
                                          
                                             lb
                                          
                                       
                                    
                                    +
                                    T
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    ,
                                    
                                       
                                          e
                                       
                                       
                                          
                                             lb
                                          
                                       
                                    
                                    +
                                    
                                       
                                          s
                                       
                                       
                                          
                                             lb
                                          
                                       
                                    
                                    +
                                    T
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    ,
                                    E
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    }
                                 
                              
                           
                           
                              
                                 (21)
                                 
                                    
                                       
                                          E
                                       
                                       
                                          case
                                          
                                          3
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    =
                                    max
                                    {
                                    E
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    +
                                    
                                       
                                          T
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    ,
                                    
                                       
                                          E
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    }
                                 
                              
                           
                           
                              
                                 (22)
                                 
                                    
                                       
                                          L
                                       
                                       
                                          case
                                          
                                          1
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    =
                                    min
                                    {
                                    
                                       
                                          L
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    ,
                                    L
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    -
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    -
                                    
                                       
                                          T
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    }
                                 
                              
                           
                           
                              
                                 (23)
                                 
                                    
                                       
                                          L
                                       
                                       
                                          case
                                          
                                          2
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    =
                                    min
                                    {
                                    L
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    ,
                                    
                                       
                                          l
                                       
                                       
                                          
                                             lb
                                          
                                       
                                    
                                    -
                                    T
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    ,
                                    L
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    -
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    -
                                    
                                       
                                          s
                                       
                                       
                                          
                                             lb
                                          
                                       
                                    
                                    -
                                    T
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    }
                                 
                              
                           
                           
                              
                                 (24)
                                 
                                    
                                       
                                          L
                                       
                                       
                                          case
                                          
                                          3
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    =
                                    min
                                    {
                                    L
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    ,
                                    
                                       
                                          L
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    -
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    -
                                    T
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    }
                                 
                              
                           
                           
                              
                                 (25)
                                 
                                    
                                       
                                          F
                                       
                                       
                                          case
                                          
                                          1
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    =
                                    
                                       
                                          F
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    ‚àß
                                    F
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    ‚àß
                                    (
                                    
                                       
                                          E
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    ‚©Ω
                                    L
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    )
                                 
                              
                           
                           
                              
                                 (26)
                                 
                                    
                                       
                                          F
                                       
                                       
                                          case
                                          
                                          2
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    =
                                    F
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    ‚àß
                                    F
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    ‚àß
                                    (
                                    E
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    ‚©Ω
                                    
                                       
                                          l
                                       
                                       
                                          
                                             lb
                                          
                                       
                                    
                                    )
                                    ‚àß
                                    (
                                    
                                       
                                          e
                                       
                                       
                                          
                                             lb
                                          
                                       
                                    
                                    +
                                    
                                       
                                          s
                                       
                                       
                                          
                                             lb
                                          
                                       
                                    
                                    ‚©Ω
                                    L
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    )
                                    ‚àß
                                    (
                                    E
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    +
                                    
                                       
                                          s
                                       
                                       
                                          
                                             lb
                                          
                                       
                                    
                                    ‚©Ω
                                    L
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    )
                                 
                              
                           
                           
                              
                                 (27)
                                 
                                    
                                       
                                          F
                                       
                                       
                                          case
                                          
                                          3
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    =
                                    F
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    ‚àß
                                    
                                       
                                          F
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    ‚àß
                                    (
                                    E
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    +
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    ‚©Ω
                                    
                                       
                                          L
                                       
                                       
                                          ‚Ä≤
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    )
                                 
                              
                           
                        

It is worth mentioning that a similar methodology can be used to adjust dynamically, within the evaluation of the routes, the break location choices in the VRPTWLB case, as well as the choice and placement of depot visits in a multi-depot setting (Vidal, Crainic, Gendreau, & Prins, 2012b). Integrating these decisions in the evaluation operators enables to combine the placement or assignment features within local search moves, and considerably reduce the combinations of choices to be worked out in the remaining parts of the method.

For all previously-mentioned attributes, constant-size characteristic data was available for the segments, as well as general concatenation equations (segment REFs in the terminology of Irnich (2008b)). However, several MAVRPs fall outside of this class. This is the case for the VRP with soft time windows (VRPSTW), which allows penalized late arrivals to customers, and, more generally, for the generalization of the VRPTW where the service cost c
                           
                              i
                           (t
                           
                              i
                           ) of each customer v
                           
                              i
                            is a piecewise linear function of the service time. For this latter variant, the placement of departure times and waiting times, and thus the determination of a good schedule for a fixed route, makes for a non-trivial timing problem with separable time-dependent processing costs (Vidal et al., 2011) and no judicious O(1) size data structure is known to characterize the sub-sequences and their exact cost when concatenated together.

In this case, the route-evaluation information can be developed as a set of piecewise functions (Hendel & Sourd, 2006; Ibaraki et al., 2005; Ibaraki et al., 2008). Each sub-sequence is characterized by a function F(œÉ)(t) representing the minimum cost to service the sequence œÉ while arriving at the last customer before time t, and B(œÉ)(t) stating the minimum cost of servicing œÉ after time t.

For a sequence œÉ
                           0
                           =(v
                           
                              i
                           ) with a single vertex, 
                              
                                 
                                    
                                       F
                                    
                                    
                                       
                                          
                                             œÉ
                                          
                                          
                                             0
                                          
                                       
                                    
                                 
                                 (
                                 t
                                 )
                                 =
                                 
                                    
                                       min
                                    
                                    
                                       x
                                       ‚©Ω
                                       t
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 x
                                 )
                              
                            and 
                              
                                 
                                    
                                       B
                                    
                                    
                                       
                                          
                                             œÉ
                                          
                                          
                                             0
                                          
                                       
                                    
                                 
                                 (
                                 t
                                 )
                                 =
                                 
                                    
                                       min
                                    
                                    
                                       x
                                       ‚©æ
                                       t
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 x
                                 )
                              
                           . The construction operator FORW relies on forward dynamic programming (Eq. 28) to build explicitly the information for the concatenation of a sequence œÉ with a vertex v
                           
                              i
                           . In reverse, BACK is based on backward dynamic programming (Eq. 29). Eq. (30) provides the cost Z
                           ‚àó(œÉ
                           1
                           ‚äï
                           œÉ
                           2) of the concatenated sequence œÉ
                           1
                           ‚äï
                           œÉ
                           2 when F(œÉ
                           1)(t) and B(œÉ
                           2)(t) are available, thus leading to an efficient EVAL2 operation.
                              
                                 (28)
                                 
                                    F
                                    (
                                    œÉ
                                    ‚äï
                                    
                                       
                                          v
                                       
                                       
                                          i
                                       
                                    
                                    )
                                    (
                                    t
                                    )
                                    =
                                    
                                       
                                          
                                             min
                                          
                                          
                                             0
                                             ‚©Ω
                                             x
                                             ‚©Ω
                                             t
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   c
                                                
                                                
                                                   i
                                                
                                             
                                             (
                                             x
                                             )
                                             +
                                             F
                                             (
                                             œÉ
                                             )
                                             (
                                             x
                                             -
                                             
                                                
                                                   s
                                                
                                                
                                                   œÉ
                                                   (
                                                   ‚à£
                                                   œÉ
                                                   ‚à£
                                                   )
                                                
                                             
                                             -
                                             
                                                
                                                   d
                                                
                                                
                                                   œÉ
                                                   (
                                                   ‚à£
                                                   œÉ
                                                   ‚à£
                                                   )
                                                   ,
                                                   i
                                                
                                             
                                             )
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (29)
                                 
                                    B
                                    (
                                    
                                       
                                          v
                                       
                                       
                                          i
                                       
                                    
                                    ‚äï
                                    œÉ
                                    )
                                    (
                                    t
                                    )
                                    =
                                    
                                       
                                          
                                             min
                                          
                                          
                                             x
                                             ‚©æ
                                             t
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   c
                                                
                                                
                                                   i
                                                
                                             
                                             (
                                             x
                                             )
                                             +
                                             B
                                             (
                                             œÉ
                                             )
                                             (
                                             x
                                             +
                                             
                                                
                                                   s
                                                
                                                
                                                   i
                                                
                                             
                                             +
                                             
                                                
                                                   d
                                                
                                                
                                                   i
                                                   ,
                                                   œÉ
                                                   (
                                                   1
                                                   )
                                                
                                             
                                             )
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (30)
                                 
                                    
                                       
                                          Z
                                       
                                       
                                          ‚àó
                                       
                                    
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    ‚äï
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    =
                                    
                                       
                                          
                                             min
                                          
                                          
                                             x
                                             ‚©æ
                                             0
                                          
                                       
                                    
                                    {
                                    F
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          1
                                       
                                    
                                    )
                                    (
                                    x
                                    )
                                    +
                                    B
                                    (
                                    
                                       
                                          œÉ
                                       
                                       
                                          2
                                       
                                    
                                    )
                                    (
                                    x
                                    +
                                    
                                       
                                          s
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                       
                                    
                                    +
                                    
                                       
                                          d
                                       
                                       
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          (
                                          ‚à£
                                          
                                             
                                                œÉ
                                             
                                             
                                                1
                                             
                                          
                                          ‚à£
                                          )
                                          
                                             
                                                œÉ
                                             
                                             
                                                2
                                             
                                          
                                          (
                                          1
                                          )
                                       
                                    
                                    )
                                    }
                                 
                              
                           
                        

In our implementations, the data structures F(œÉ)(t) and B(œÉ)(t) are managed as linked lists of function pieces characterized by interval, origin value and slope. The data construction operations FORW(œÉ), BACK(œÉ) and EVAL2 work in O(Œ£
                              i
                           
                           Œæ(c
                           
                              i
                           )) time, Œæ(c
                           
                              i
                           ) representing the number of pieces of a piecewise cost function c
                           
                              i
                           . However the EVALN operation is not efficiently manageable. In the particular case where all functions c
                           
                              i
                           (t) are convex, more advanced implementations based either on heaps (Hendel & Sourd, 2006) or on search trees (Ibaraki et al., 2008) achieve a complexity of O(logŒ£
                              i
                           
                           Œæ(c
                           
                              i
                           )) for both EVAL2 and EVALN.

The literature contains various other EVAL attributes related to time, such as duration constraints, multiple time windows, time-dependent trip durations, flexible travel times, and minimum and maximum intervals of time between pairs of services. We refer to Vidal et al. (2011) for a comprehensive review and analysis of state-of-the-art algorithms for the underlying timing sub-problems for route evaluations, and their incremental resolution during local searches. These approaches were used to generate UHGS route-evaluation operators for the related problems with time characteristics.

In the Generalized Vehicle Routing Problem (GVRP), each request v
                           
                              i
                            is associated to a set (group) of Œª
                           
                              i
                            alternative locations 
                              
                                 
                                    
                                       L
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 {
                                 
                                    
                                       l
                                    
                                    
                                       i
                                       1
                                    
                                 
                                 ,
                                 ‚Ä¶
                                 ,
                                 
                                    
                                       l
                                    
                                    
                                       i
                                       ‚à£
                                       
                                          
                                             Œª
                                          
                                          
                                             i
                                          
                                       
                                       ‚à£
                                    
                                 
                                 }
                              
                           . Exactly one location of each group must be serviced. As illustrated in Baldacci, Bartolini, and Laporte (2009), the GVRP is relevant for several practical applications and directly generalizes other variants of vehicle routing.

The most recent metaheuristics for this problem (Moccia, Cordeau, & Laporte, 2012) conduct local search on the order of groups, and iteratively solve shortest path problems to optimally choose the best customer sequence within the groups. Building upon these concepts, we propose efficient route-evaluation operators for the GVRP, storing for each sequence of groups some auxiliary data to speed-up the shortest path computations during the search. In this case, the information to be stored for a sequence œÉ is the shortest path S(œÉ)[i, j] between the ith location of œÉ(1) and the jth location of œÉ(‚à£œÉ‚à£), where i
                           ‚àà{1, ‚Ä¶, Œª
                           
                              œÉ(1)} and j
                           ‚àà{1, ‚Ä¶, Œª
                           
                              œÉ(‚à£œÉ‚à£)}. For a sequence œÉ
                           0
                           =(v
                           
                              i
                           ) containing a single service, S(œÉ
                           0)[x, x]=0 for any x
                           ‚àà{1, ‚Ä¶, Œª
                           
                              i
                           } and S(œÉ
                           0)[x, y]=+‚àû if x
                           ‚â†
                           y. Eq. (31) enables then to develop this information on larger sub-sequences by induction on the concatenation operation. This approach is closely related to the Floyd-Warshall algorithm and to bi-directional dynamic programming concepts.
                              
                                 (31)
                                 
                                    
                                       
                                          
                                          
                                             
                                                S
                                                (
                                                
                                                   
                                                      œÉ
                                                   
                                                   
                                                      1
                                                   
                                                
                                                ‚äï
                                                
                                                   
                                                      œÉ
                                                   
                                                   
                                                      2
                                                   
                                                
                                                )
                                                [
                                                i
                                                ,
                                                j
                                                ]
                                                =
                                                
                                                   
                                                      
                                                         min
                                                      
                                                      
                                                         1
                                                         ‚©Ω
                                                         x
                                                         ‚©Ω
                                                         
                                                            
                                                               Œª
                                                            
                                                            
                                                               
                                                                  
                                                                     œÉ
                                                                  
                                                                  
                                                                     1
                                                                  
                                                               
                                                               (
                                                               ‚à£
                                                               
                                                                  
                                                                     œÉ
                                                                  
                                                                  
                                                                     1
                                                                  
                                                               
                                                               ‚à£
                                                               )
                                                            
                                                         
                                                         ,
                                                         1
                                                         ‚©Ω
                                                         y
                                                         ‚©Ω
                                                         
                                                            
                                                               Œª
                                                            
                                                            
                                                               
                                                                  
                                                                     œÉ
                                                                  
                                                                  
                                                                     2
                                                                  
                                                               
                                                               (
                                                               1
                                                               )
                                                            
                                                         
                                                      
                                                   
                                                
                                                S
                                                (
                                                
                                                   
                                                      œÉ
                                                   
                                                   
                                                      1
                                                   
                                                
                                                )
                                                [
                                                i
                                                ,
                                                x
                                                ]
                                                +
                                                
                                                   
                                                      d
                                                   
                                                   
                                                      
                                                         
                                                            l
                                                         
                                                         
                                                            ix
                                                         
                                                      
                                                      
                                                         
                                                            l
                                                         
                                                         
                                                            jy
                                                         
                                                      
                                                   
                                                
                                                +
                                                S
                                                (
                                                
                                                   
                                                      œÉ
                                                   
                                                   
                                                      2
                                                   
                                                
                                                )
                                                [
                                                y
                                                ,
                                                j
                                                ]
                                             
                                          
                                       
                                       
                                          
                                          
                                             
                                                
                                                
                                                
                                                
                                                ‚àÄ
                                                i
                                                ‚àà
                                                {
                                                1
                                                ,
                                                ‚Ä¶
                                                ,
                                                
                                                   
                                                      Œª
                                                   
                                                   
                                                      
                                                         
                                                            œÉ
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                      (
                                                      1
                                                      )
                                                   
                                                
                                                }
                                                ,
                                                ‚àÄ
                                                j
                                                ‚àà
                                                {
                                                1
                                                ,
                                                ‚Ä¶
                                                ,
                                                
                                                   
                                                      Œª
                                                   
                                                   
                                                      
                                                         
                                                            œÉ
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      (
                                                      ‚à£
                                                      
                                                         
                                                            œÉ
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                      ‚à£
                                                      )
                                                   
                                                
                                                }
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

Eq. (31) provides the means to perform efficiently in O(Œª
                           2) operations all route-evaluation operations, Œª standing for the maximum number of locations associated to a service. This complexity is notably better than the complexity of computing each shortest path from scratch, which would be O(n
                           
                              r
                           
                           Œª
                           2) operations for a route containing n
                           
                              r
                            services.

Governments worldwide impose complex regulations on truck-driver schedules to limit the amount of work and driving within intervals of time and impose a minimum frequency and duration for break and rest periods. Because of their large impact on driving times, these regulations should be accounted for when optimizing the routes, leading to combined vehicle routing and truck-driver scheduling problems (VRTDSP). However, even checking the existence of a feasible placement of breaks for a fixed sequence of visits makes for a highly complex problem which is known to be solvable in a quadratic time for United States hours of service regulations (Goel & Kok, 2012), while no polynomial algorithm is known for many other cases, with European Union, Canadian, and Australian rules.

Despite this high complexity, most efficient methods for the VRTDSP integrate break scheduling feasibility checks directly in the local search (Goel & Vidal, 2013; Prescott-Gagnon, Desaulniers, Drexl, & Rousseau, 2010), and thus during each route evaluation. In the proposed methodology, these break-scheduling procedures are used inside the route-evaluation operators. A set of schedule alternatives is maintained for each sub-sequence of consecutive visits. The schedule information is extended to larger sub-sequences by appending new driving and break activities at the end of the schedules, and selecting only a relevant subset by means of dominance relationships. Our current implementation is exclusively based on forward operators, and thus EVAL2(œÉ
                           1, œÉ
                           2) is performed by iteratively completing the schedule of œÉ
                           1 with services of œÉ
                           2.

@&#SUMMARY@&#

As reviewed in this section, efficient route-evaluation operators relative to different VRP attributes may require to develop radically different information on sequences, and use more or less complex evaluation procedures. Still, all previously-mentioned approaches follow the same five-operations scheme, based on the forward or backward propagation of labels (or, generally, of any information to characterize the sequences), and the evaluation of the concatenation of two or more sequences using the information developed on sequences. As shown in the following, this library of route-evaluation operators provides the means to create a general-purpose state-of-the-art local search for many MAVRPs.

The route-evaluation component can be used to efficiently explore any neighborhood with moves involving a bounded number of edge exchanges and node relocations, since all these moves can be evaluated as a recombination of partial sub-sequences from the incumbent solution. The resulting Unified Local Search (ULS) is illustrated in Algorithm 1. To efficiently evaluate moves, ULS manages information on sub-sequences of consecutive visits (and reverse sub-sequences in presence of moves that impact the route orientation), using the INIT, FORW, and BACK route construction operations. This information is built during a pre-processing phase at the beginning of the local search, and is then updated whenever any route is modified. Moves are then evaluated by means of EVAL2 and EVALN.
                           Algorithm¬†1
                           Unified local search based on route-evaluation operators 
                                 
                                    
                                       
                                       
                                          
                                             
                                                 1: Detect the good combination of evaluation operators relatively to the problem attributes
                                          
                                          
                                             
                                                 2: Build re-optimization data on sub-sequences using the INIT, FORW and BACK operators.
                                          
                                          
                                             
                                                 3: while some improving moves exist in the neighborhood 
                                                   
                                                      N
                                                   
                                                
                                             
                                          
                                          
                                             
                                                 4: 
                                                for each move Œº
                                                
                                                   i
                                                 in 
                                                   
                                                      N
                                                   
                                                 
                                                do
                                             
                                          
                                          
                                             
                                                 5: 
                                                for each route 
                                                   
                                                      
                                                         
                                                            r
                                                         
                                                         
                                                            j
                                                         
                                                         
                                                            Œº
                                                         
                                                      
                                                   
                                                 produced by the move do
                                             
                                          
                                          
                                             
                                                 6: 
                                                Determine the k sub-sequences [œÉ
                                                1, ‚Ä¶, œÉ
                                                
                                                   k
                                                ] that are concatenated to produce 
                                                   
                                                      
                                                         
                                                            r
                                                         
                                                         
                                                            j
                                                         
                                                         
                                                            Œº
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                 7: 
                                                
                                                if 
                                                k
                                                =2, then NEWCOST(r) = EVAL2(œÉ
                                                1, œÉ
                                                2)
                                          
                                          
                                             
                                                 8: 
                                                
                                                else if 
                                                k
                                                >2, then NEWCOST(r) = EVALN(œÉ
                                                1, ‚Ä¶, œÉ
                                                
                                                   k
                                                )
                                          
                                          
                                             
                                                 9: 
                                                end for
                                             
                                          
                                          
                                             10: 
                                                if ACCEPTCRITERIA(Œº
                                                
                                                   i
                                                ) then perform the move Œº and update the re-optimization data on for each route 
                                                   
                                                      
                                                         
                                                            r
                                                         
                                                         
                                                            j
                                                         
                                                         
                                                            Œº
                                                         
                                                      
                                                   
                                                 using the INIT, FORW and BACK operators.
                                          
                                          
                                             11: 
                                                end for
                                             
                                          
                                          
                                             12: end while
                                             
                                          
                                       
                                    
                                 
                              
                           

In the specific implementation of this paper, the neighbor solutions issued from moves are explored in random order, using the acceptance criterion of Vidal, Crainic, Gendreau, and Prins (2013a) and terminating whenever no improving move can be found in the whole neighborhood. As in Vidal et al. (2013a), the classical 
                           
                              2
                              -
                              
                                 
                                    OPT
                                 
                                 
                                    ‚àó
                                 
                              
                           
                        , and 2-OPT neighborhoods are used, as well as the inter-route and intra-route CROSS and I-CROSS neighborhoods, restricted to sub-sequences of length smaller than L
                        
                           max
                        
                        =2 and including relocate moves as special cases. Only moves involving neighbor vertices in terms of distance and time characteristics are attempted, leading to a neighborhood size of 
                           
                              O
                              (
                              
                                 
                                    L
                                 
                                 
                                    max
                                 
                                 
                                    2
                                 
                              
                              Œì
                              n
                              )
                           
                         instead of 
                           
                              O
                              (
                              
                                 
                                    L
                                 
                                 
                                    max
                                 
                                 
                                    2
                                 
                              
                              
                                 
                                    n
                                 
                                 
                                    2
                                 
                              
                              )
                           
                        , where Œì stands for the number of neighbor vertices per vertex (Toth & Vigo, 2003; Vidal et al., 2013a).

It should be noted that all inter-route moves such as CROSS, I-CROSS and 
                           
                              2
                              -
                              
                                 
                                    OPT
                                 
                                 
                                    ‚àó
                                 
                              
                           
                        , require either EVAL2(œÉ
                        1, œÉ
                        2) or EVALN(œÉ
                        1, œÉ
                        
                           L
                        , œÉ
                        2), where œÉ
                        
                           L
                         is a sequence of size bounded by L
                        
                           max
                        . When no efficient EVALN is available, in presence of attributes such as soft and general time windows for example, this first family of inter-route moves can still be evaluated efficiently as EVALN(œÉ
                        1, œÉ
                        
                           L
                        , œÉ
                        2) can be replaced by less than L
                        
                           max
                         successive calls to FORW to yield the information on œÉ‚Ä≤=
                        œÉ
                        1
                        ‚äï
                        œÉ
                        
                           L
                        , with a final call to EVAL2(œÉ‚Ä≤, œÉ
                        2). Intra-route CROSS and I-CROSS and 2-OPT moves require calling EVALN on a set of 3 to 5 sub-sequences. If no efficient EVALN is available, the same reasoning for replacement can still be used, but in this case the number of necessary calls to FORW becomes linear in the route size since the size of intermediate sub-sequences is not bounded. However, since intra-route moves are usually in minority, this increased number of operations did not impact the method speed.

The good combination of route-evaluation operators is automatically derived from the problem attributes, according to the component-based framework of Section 2.3. The route-evaluation operators allow thus to use advanced move-evaluation techniques which were until now considered as problem specific in a unified framework for MAVRPs. Efficient move-evaluation techniques are combined in a straightforward manner when the attributes involve distinct decisions and resources, e.g., VRP with loading constraints and time windows. Attributes of different types (EVAL, ASSIGN, SEQ) can also be managed together since they impact distinct method components, for problems such as VRP with backhauls and TW, or multi-depot time-dependent VRP, for example.

When two attributes involve the same decisions, for time aspects especially, e.g., in the case of the cumulative VRP (minimization of sum of service dates) with multiple time windows, an evaluation algorithm for the combination of both attributes cannot be systematically derived from the methods tailored to the separate components and some specific work may be required. It is possible to search for a known more general timing problem which includes all considered attributes (e.g., Fig. 1 of Vidal et al. (2011)). For example, the timing attribute ‚Äútime-dependent service costs‚Äù, Œ£c
                        
                           i
                        (t
                        
                           i
                        ), is known to generalize both the cumulative VRP and multiple time windows. Hence, a route-evaluation method for this attribute can be used for the combined problem. In other cases, an evaluation method tailored for a specific combination of attributes may be added to the framework.

The resulting unified local search is efficient and applicable to many VRP variants. It can be extended into any generic neighborhood-based metaheuristic such as tabu search, iterated local search, or variable neighborhood search. Relatively to the recent advances in genetic algorithms and diversity management for vehicle routing, we opted to combine this procedure with the approach of Vidal et al. (2012a) to obtain a Unified Hybrid Genetic Search (UHGS). Such integration requires addressing several additional challenges, related to the design of a unified solution representation, genetic operators, and population management methods. The next section explains how to address them.

The proposed UHGS is an extension of the Hybrid Genetic Search with Advanced Diversity Control of Vidal et al. (2012a), and aims to address MAVRPs in a unified manner by means of the proposed component-based design. The method stands out from previous works since all its elements (solution representation, genetic operators, local searches) are fully generic and detached from the attributes of the problem, relying on the subset of adaptive assignment and route-evaluation components to make the interface with problem-specific knowledge (Section 2.3). Note that in this work, only single-echelon problems with a route structure, e.g., a single sequence, are addressed, thus allowing to rely on a unique sequencing component based on standard VRP neighborhoods (Section 3.3). This section briefly recalls the general structure of UHGS, then details in turn the main elements of the unified method.

UHGS combines four main successful concepts. (1) An hybridization of GA with efficient LS, the latter replacing the mutation operations. Crossovers enable to explore a wide diversity of structurally different solutions while the LS drives the search towards high-quality local optimums. (2) A solution representation without trip delimiters with an optimal Split procedure for delimiter computation (Prins, 2004), which provides the means to rely on simpler crossover operators working of permutations of visits. (3) Penalized infeasible solutions are used and managed through two distinct sub-populations during the search. These solutions contribute notably to the search performance by allowing to transition towards higher-quality regions of the search space (Glover & Hao, 2011; Vidal, Crainic, Gendreau, & Prins, 2013c). (4) Finally, an advanced population management method with a diversity-and-cost objective for solution evaluation is used, which reduces the risks of premature population convergence very effectively (Vidal et al., 2012a), and in practice also promotes the discovery of new solutions. Most of these components are known from the past literature. Yet, applying these concepts in a unified manner to many MAVRPs leads to several challenges which are discussed and addressed in the following.

The method structure is illustrated in Fig. 2
                     . UHGS iteratively selects two individuals in the merged sub-populations to serve as input of a crossover operator, yielding a single offspring. After going through the Split procedure to compute trip delimiters, the offspring is Educated by means of a local search, Repaired with probability P
                     
                        rep
                      when infeasible, and transfered to the suitable sub-population. Each sub-population is managed separately to trigger a Survivor Selection procedure when reaching a maximum size. Diversification procedures and decomposition phases are regularly used to further enhance the diversity and intensify the search around elite solution characteristics. The algorithm terminates when It
                     
                        max
                      successive iterations (individual generations) have been performed without improving the best solution, or when a time limit T
                     
                        max
                      is reached.

MAVRPs generally involve two levels of decisions relative to the assignment of customer services to some ASSIGN Attribute Resources (AARs), and the optimization of routes for each AAR. In accordance with this problem structure, solutions are represented in the course of UHGS as a collection of giant tours without explicit mention of visits to the depot. Each giant tour corresponds to a different combination of AAR, for example, a (vehicle type/day) couple in a heterogeneous periodic VRP. Problems without ASSIGN attributes lead to only one AAR, and thus to a solution representation as a single giant tour.

To extract a full solution out of an individual and its giant tours, we introduce in Algorithm 2 a fully generic Split procedure for MAVRPs based on route-evaluation components. For any giant tour œÑ
                        =(œÑ
                        1, ‚Ä¶, œÑ
                        
                           ŒΩ
                        ) containing ŒΩ customers, the splitting problem is assimilated to a shortest path problem on a directed acyclic auxiliary graph 
                           
                              
                                 
                                    G
                                 
                                 
                                    ‚Ä≤
                                 
                              
                              =
                              (
                              V
                              ,
                              A
                              )
                           
                        , where 
                           
                              V
                           
                         includes ŒΩ
                        +1 nodes notated 0 to ŒΩ. Any arc 
                           
                              
                                 
                                    a
                                 
                                 
                                    ij
                                 
                              
                              ‚àà
                              A
                           
                         with i
                        <
                        j represents the route originating from the depot, visiting customers œÉ
                        
                           i+1 to œÉ
                        
                           j
                        , and returning. The cost of each arc is set to the cost of the associated route.
                           Algorithm¬†2
                           Generic Split 
                                 
                                    
                                       
                                       
                                          
                                             1: for each node i
                                                ‚àà{1, ‚Ä¶, ŒΩ} do
                                             
                                          
                                          
                                             2: 
                                                SeqData(œÉ) = INIT({v
                                                0}) //Initialize with depot vertex
                                             
                                          
                                          
                                             3: 
                                                for each node 
                                                   
                                                      j
                                                      ‚àà
                                                      {
                                                      i
                                                      +
                                                      1
                                                      ,
                                                      ‚Ä¶
                                                      ,
                                                      min
                                                      (
                                                      i
                                                      +
                                                      
                                                         
                                                            r
                                                         
                                                         
                                                            ¬Ø
                                                         
                                                      
                                                      ,
                                                      ŒΩ
                                                      )
                                                      }
                                                   
                                                 
                                                do
                                             
                                          
                                          
                                             4: 
                                                SeqData(œÉ) = FORW(œÉ,{œÑ
                                                
                                                   j
                                                }) //Append a new customer to the route end
                                             
                                          
                                          
                                             5: 
                                                œï(a
                                                
                                                   ij
                                                ) = EVAL2(œÉ,{v
                                                0}) //Evaluate the route
                                             
                                          
                                          
                                             6: 
                                                end for
                                             
                                          
                                          
                                             7: end for
                                             
                                          
                                          
                                             8: Solve the shortest path problem on 
                                                   
                                                      G
                                                      ‚Ä≤
                                                      =
                                                      (
                                                      V
                                                      ,
                                                      A
                                                      )
                                                   
                                                 with cost œï(a
                                                
                                                   ij
                                                ) for each arc a
                                                
                                                   ij
                                                
                                             
                                          
                                          
                                             9: Return the set of routes associated to the set of arcs of the shortest path
                                          
                                       
                                    
                                 
                              
                           

All arc costs can be computed by calling 
                           
                              O
                              (
                              
                                 
                                    ŒΩ
                                 
                                 
                                    2
                                 
                              
                              )
                           
                         times the FORW and EVAL2 operators (Lines 1‚Äì5 of Algorithm 2). Setting a maximum value 
                           
                              
                                 
                                    r
                                 
                                 
                                    ¬Ø
                                 
                              
                           
                         on the number of customers in a route enables to reduce this number of calls to 
                           
                              O
                              (
                              ŒΩ
                              
                                 
                                    r
                                 
                                 
                                    ¬Ø
                                 
                              
                              )
                           
                        . Once this pre-processing is achieved, the shortest path is solved by means of m iterations of the Bellman-Ford algorithm (see Cormen, Stein, Rivest, & Leiserson, 2001) in presence of a fleet size limit to m. If no limit on the fleet size is imposed, a shortest path based on the topological order of indexes is used. The final complexity of the proposed unified Split algorithm is 
                           
                              O
                              (
                              [
                              m
                              +
                              Œæ
                              (
                              FORW
                              )
                              +
                              Œæ
                              (
                              EVAL
                              2
                              )
                              ]
                              ŒΩ
                              
                                 
                                    r
                                 
                                 
                                    ¬Ø
                                 
                              
                              )
                           
                        , where 
                           
                              Œæ
                              (
                              FORW
                              )
                           
                         and 
                           
                              Œæ
                              (
                              EVAL
                              2
                              )
                           
                         represent respectively the complexity of FORW and EVAL2. It should be noted that this unified Split algorithm is applicable to all VRP variants mentioned in Section 3.2.

An individual p in UHGS is evaluated relatively to its feasibility, cost, and contribution to the population diversity. Define the penalized cost 
                        
                           
                              
                                 
                                    œï
                                 
                                 
                                    P
                                 
                                 
                                    COST
                                 
                              
                              (
                              p
                              )
                           
                         of p as the sum on all routes of total distance and penalized excesses relatively to load and other constraint violations of 
                           
                              
                                 
                                    N
                                 
                                 
                                    ATT
                                 
                              
                           
                         EVAL attributes. For any route œÉ with distance 
                           
                              
                                 
                                    œÜ
                                 
                                 
                                    D
                                 
                              
                              (
                              œÉ
                              )
                           
                        , load excess 
                           
                              
                                 
                                    œÜ
                                 
                                 
                                    Q
                                 
                              
                              (
                              œÉ
                              )
                           
                        , and excesses 
                           
                              
                                 
                                    œÜ
                                 
                                 
                                    
                                       
                                          
                                             e
                                          
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              (
                              œÉ
                              )
                           
                         for 
                           
                              i
                              ‚àà
                              {
                              1
                              ,
                              ‚Ä¶
                              ,
                              
                                 
                                    N
                                 
                                 
                                    ATT
                                 
                              
                              }
                           
                         relatively to EVAL attributes, the penalized cost œï(r) is given by Eq. (32), where 
                           
                              
                                 
                                    œâ
                                 
                                 
                                    Q
                                 
                              
                           
                         and 
                           
                              
                                 
                                    œâ
                                 
                                 
                                    
                                       
                                          
                                             e
                                          
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                           
                         for 
                           
                              i
                              ‚àà
                              {
                              1
                              ,
                              ‚Ä¶
                              ,
                              
                                 
                                    N
                                 
                                 
                                    ATT
                                 
                              
                              }
                           
                         represent the associated penalty coefficients. The set of excesses 
                           
                              
                                 
                                    œÜ
                                 
                                 
                                    
                                       
                                          
                                             e
                                          
                                       
                                       
                                          i
                                       
                                    
                                 
                              
                              (
                              œÉ
                              )
                           
                         depends upon the EVAL attributes of the problem, and can include the excess of pickup load (variants of VRPB), excess in duration (variants of DurVRP), time-window relaxations in the sense of Nagata, Br√§ysy, and Dullaert (2010) or service lateness (VRTDSP, TDVRP). Penalty coefficients are adapted during the search relatively to the proportion of feasible individuals as in Vidal et al. (2012a), Vidal et al. (2013a).
                           
                              (32)
                              
                                 œï
                                 (
                                 r
                                 )
                                 =
                                 
                                    
                                       œÜ
                                    
                                    
                                       D
                                    
                                 
                                 (
                                 r
                                 )
                                 +
                                 
                                    
                                       œâ
                                    
                                    
                                       Q
                                    
                                 
                                 
                                    
                                       œÜ
                                    
                                    
                                       Q
                                    
                                 
                                 (
                                 r
                                 )
                                 +
                                 
                                    
                                       
                                          ‚àë
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          
                                             
                                                N
                                             
                                             
                                                ATT
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       œâ
                                    
                                    
                                       
                                          
                                             
                                                e
                                             
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                                 
                                    
                                       œÜ
                                    
                                    
                                       
                                          
                                             
                                                e
                                             
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                                 (
                                 œÉ
                                 )
                              
                           
                        
                     

Define the diversity contribution 
                        
                           
                              
                                 
                                    œï
                                 
                                 
                                    P
                                 
                                 
                                    DIV
                                 
                              
                              (
                              p
                              )
                           
                         of an individual p as its average distance with the 
                           
                              
                                 
                                    Œº
                                 
                                 
                                    CLOSE
                                 
                              
                           
                         most similar individuals in the sub-population. The Hamming distance on assignment decisions is used in presence of ASSIGN attributes, while in the other case, the broken pairs distance (Prins, 2009) is automatically used to measure the proportion of common edges. Finally, Eq. (33) states the biased fitness 
                        
                           
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                              
                              (
                              p
                              )
                           
                         of an individual p in the sub-population 
                           
                              P
                           
                         as a weighted sum of its penalized cost rank 
                           
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                                 
                                    COST
                                 
                              
                              (
                              p
                              )
                           
                         and its rank 
                           
                              
                                 
                                    f
                                 
                                 
                                    P
                                 
                                 
                                    DIV
                                 
                              
                              (
                              p
                              )
                           
                         relative to its diversity contribution. This trade-off between diversity and cost is balanced by parameter 
                           
                              
                                 
                                    Œº
                                 
                                 
                                    ELITE
                                 
                              
                           
                         and was shown to play an essential role in the performance of the method.
                           
                              (33)
                              
                                 
                                    
                                       f
                                    
                                    
                                       P
                                    
                                 
                                 (
                                 p
                                 )
                                 =
                                 
                                    
                                       f
                                    
                                    
                                       P
                                    
                                    
                                       COST
                                    
                                 
                                 (
                                 p
                                 )
                                 +
                                 
                                    
                                       
                                          1
                                          -
                                          
                                             
                                                
                                                   
                                                      Œº
                                                   
                                                   
                                                      ELITE
                                                   
                                                
                                             
                                             
                                                ‚à£
                                                P
                                                ‚à£
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       f
                                    
                                    
                                       P
                                    
                                    
                                       DIV
                                    
                                 
                                 (
                                 p
                                 )
                              
                           
                        
                     

Two parent individuals are iteratively selected during the course of UHGS, by binary tournament within the merged feasible and infeasible sub-populations, to serve as input to the crossover and produce a single offspring. An Assignment and Insertion Crossover (AIX) is then used for problems involving at least one ASSIGN attribute, otherwise the simple Ordered Crossover (OX) is applied (see Prins, 2004).

AIX is a generalization of the PIX crossover of Vidal et al. (2012a). It first decides for each of the 
                           
                              
                                 
                                    n
                                 
                                 
                                    
                                       aar
                                    
                                 
                              
                           
                         ASSIGN Attribute Resources whether the genetic material of p
                        1, p
                        2 or both parents is transmitted, and then inherits the genetic material according to the rules of Vidal et al. (2012a). At each tentative insertion of a visit into the offspring, the assignment component (Section 2.3) verifies whether this inheritance of a customer still allows for completion of a feasible assignment relatively to ASSIGN attributes. The considered visit is not transmitted to the offspring if this property in not fulfilled. Finally, as the previous constraints can lead to an incomplete offspring, missing visits to customers are inserted in turn in a random order to the best location relatively to the penalized route cost. Good insertion procedures require the knowledge of the depot occurrences, and thus this final step of AIX is completed after using the unified Split algorithm (Section 4.1).

Any offspring issued from the crossover is improved by means of an Education operator based on two local searches. First, the local search procedure of Section 3.3 is applied independently for each AAR to perform Route Improvements (RI). Second, an Assignment Improvement (AI) procedure is designed to optimize on assignment decisions. Finally, RI is applied a last time. The AI procedure is the generalization of the pattern improvement procedure of Vidal et al. (2012a). AI tentatively removes all services to a customer, and chooses the best combination of insertion locations in the AARs for reinsertion. AI relies on the assignment operator to list the tentative combinations of resource assignments, and evaluates each insertion position by means of the route-evaluation operator. Any insertion is thus assimilated to a call to EVALN(œÉ
                        1, œÉ
                        0, œÉ
                        2) where œÉ
                        0 contains a single vertex. Customer re-assignments are exhaustively tried in random order, the best re-assignment position being systematically chosen. AI stops when no improving re-assignment can be found.

The solutions issued from Education are directly accepted in the appropriate sub-population relatively to their feasibility. Furthermore, any infeasible solution with penalty (see Section 4.2) is Repaired with probability P
                        
                           rep
                        . The Repair operator temporarily increases the penalty coefficients by a factor of 10 and calls Education to redirect the search towards feasible solutions.

Sub-populations are independently managed to always contain between 
                           
                              
                                 
                                    Œº
                                 
                                 
                                    
                                       min
                                    
                                 
                              
                           
                         and 
                           
                              
                                 
                                    Œº
                                 
                                 
                                    
                                       min
                                    
                                 
                              
                              +
                              
                                 
                                    Œº
                                 
                                 
                                    
                                       gen
                                    
                                 
                              
                           
                         individuals, by triggering a survivor selection phase each time a sub-population reaches a maximum size of 
                           
                              
                                 
                                    Œº
                                 
                                 
                                    
                                       min
                                    
                                 
                              
                              +
                              
                                 
                                    Œº
                                 
                                 
                                    
                                       gen
                                    
                                 
                              
                           
                        . Survivor selection consists in iteratively removing 
                           
                              
                                 
                                    Œº
                                 
                                 
                                    
                                       gen
                                    
                                 
                              
                           
                         times the worst individual with regards to the biased fitness of Section 4.2, privileging first the removal of clone individuals with null distance to at least another individual. To regularly introduce new genetic material, these population management mechanisms are completed by diversification phases (Vidal et al., 2013a; Vidal et al., 2012a) which take place after each It
                        
                           div
                         successive iterations without improvement of the best solution, and consist in retaining the best Œº
                        MIN/3 individuals and replacing the others by new individuals. Decomposition phases are also triggered after every It
                        
                           dec
                         iterations as in Vidal et al. (2013a). This advanced population management procedure, coupled with the diversity-based evaluation of individuals, plays a main role in the success of the overall algorithm.

Extensive computational experiments were conducted on a wide range of MAVRPs to assess the performance of the general-purpose UHGS relatively to the best problem-tailored algorithms for each setting. Both ‚Äúacademic‚Äù problems and rich multi-attribute VRPs have been addressed in these studies. A single parameter setting, the same as in Vidal et al. (2013a), Vidal et al. (2012a), was used for all the experiments in order to examine the applicability of the method without extensive problem-tailored parameter customization. The termination criteria was set to (It
                     
                        max
                     
                     =5000; T
                     
                        max
                     
                     =30min) to compare with other authors in similar time. Problems requiring fleet minimization were solved by iteratively decrementing the fleet size limit and running UHGS until no feasible solution can be found. The algorithm was implemented in C++ and run on Opteron 250 2.4GHz and Opteron 275 2.2GHz processors.


                     Table 3
                      displays the list of acronyms for the benchmark instances and methods used in the comparative analysis. Tables 4 and 5
                     
                      compare the results of UHGS with the current best methods in the literature for each problem class taken separately. Columns (1‚Äì4) indicate the variant considered, the origin of the benchmark instances, the number n of customers in these instances, and the objective function (‚ÄúC‚Äù standing for distance, ‚ÄúD‚Äù for duration, i.e., the time elapsed between departure and return, ‚ÄúT‚Äù for travel time, ‚ÄúF‚Äù for fleet size, ‚ÄúTW‚Äù for time-window violations). Hierarchical objectives are presented by decreasing order of priority, separated with the sign ‚Äú/‚Äù. The last column reports, for each state-of-the-art method, the gap of an average or single run with respect to the current Best Known Solutions (BKS), the gap of the best solution produced by the method, the average run time to achieve these results (for parallel methods, the computation time on a single CPU is reported in italics as well as the number of CPUs), and the type of processor used. The algorithm yielding the best result quality, for each benchmark instances set and problem class, is indicated in boldface. Table 4 also includes the results from previous HGSADC applications on the PVRP, MDVRP, CVRP, and VRTDSP with European Union regulations (Goel & Vidal, 2013; Vidal et al., 2013a; Vidal et al., 2012a) since UHGS works identically when instantiated on these problems. Detailed results are reported in an Electronic Companion, and can also be downloaded at http://w1.cirrelt.ca/~vidalt/en/VRP-resources.html.

As reported in Tables 4 and 5, UHGS produces high-quality solutions for all problems and benchmark sets, from pure academic problems such as the CVRP to a large variety of VRP variants and rich settings. The average gap to the BKS ever found is in all cases smaller than +0.78%, the worst case being achieved on the multi-depot periodic VRP (MDPVRPTW). The average standard deviation of solutions, measured separately for each single objective problem, ranges between 0.002% (GVRP) and 0.66% (MDPVRPTW), thus showing that the metaheuristic produces high-quality solutions in a consistent manner.

From a solution-quality standpoint, our general-purpose method matches or outperforms all problem-tailored approaches, often specifically calibrated for the considered instances, on all 29 problems and 42 benchmark sets. For a more fair comparison with some parallel methods, such as JCL12, CM12 or SDBOF10, which rely on 24 to 256 parallel CPU, one should consider the ‚Äúbest‚Äù results of UHGS and multiply the reported CPU time by 10, therefore assessing the CPU effort and solution quality of a parallel independent multi-search with 10 UHGS.

The average run time remains in most cases smaller than 10min for average-sized problems (100 to 200 customers), being thus adequate for daily or weekly planning. We opted for a single termination criteria for all problems to avoid any form of problem-specific calibration. The proposed UHGS is thus sometimes slower than other algorithms, sometimes faster. In average, its run time is comparable to the others. Overall, 1045 BKS out of 1099 have been either retrieved or improved during these experiments, and 541 BKS out of 1099 have been strictly improved.

A new component-based heuristic framework and a Unified Hybrid Genetic Search (UHGS) have been introduced to address a large variety of difficult VRP variants. The heuristic framework strongly exploits the MAVRP structure, using adaptive assignment, sequencing, and route-evaluation components to tackle problem specifics. These components are used in UHGS to build unified local-search improvement, Split, and genetic operators. The remarkable performance of the resulting metaheuristic has been demonstrated on a wide range of problems. On 29 VRP variants and 42 sets of benchmark instances, UHGS matches or outperforms the current state-of-the-art problem-tailored algorithms. Overall, 1045 of the 1099 best known solutions have been either retrieved or improved.

The proposed heuristic is very robust, showing a good performance on a wide range of very different problems, e.g., different objectives, clustered or uniformly distributed customers, symmetric or asymmetric, Euclidean or real distances, short or long routes, few or many feasible solutions, various customer-demand distributions, different vehicle types and time-window width, among others. In light of the number of variants addressed and the very high quality of the solutions, UHGS is a remarkable asset for application-oriented projects. Furthermore, this research also led to a higher-level view on vehicle routing problems, underlining main structural elements, successful strategies, and showing that generality does not necessarily play against performance for a wide range of MAVRP.

Many perspectives of research are open, some of them being discussed in the following.

This new general-purpose solution framework can be used as a testing ground to compare different heuristic strategies on a wide range of structurally different problems instead of a single one. We seek to investigate several parallelization, decomposition and hybridization strategies, involving among others set-covering solvers to operate efficient route recombinations. Advanced dynamic programming-based route-evaluation operators are also being developed to explore richer neighborhood structures and better integrate attribute-related decisions.

Further research can concentrate on extending the range of problems addressed within the current structural problem decomposition (ASSIGN, SEQ and EVAL), and more emphasis could be put on one-to-one pickup-and-delivery problems as well as multi-echelon settings. Framework extensions can be investigated to address different types of attributes, e.g., interdependent services (Split deliveries, consistent VRP and synchronization), or separate flows of drivers and vehicles. Finally, similar unifying works could focus on other combinatorial optimization problem classes, e.g., network optimization, scheduling, packing, graph coloring, for which structural problem decompositions can be operated between different combinatorial features, e.g., assignment, sequencing, selection, and timing.

Finally, we observe a general trend in the current literature towards methods with less parameters. While few parameters are often a warrant of method simplicity, we also suggest to pay a great attention to parameter robustness, that is, to examine to what extent a parameter setting is dependent upon the problem and instance specifics. Indeed, we first developed a unified iterated local search during preliminary research. Yet, this early method was unsuccessful because the only two parameters of this method (the size and frequency of shaking) were heavily dependent upon the problem and instance characteristics. We never found a parameter setting that would perform well on all considered problems. In contrast, HGSADC/UHGS has more parameters, but its initial parameter setting turned out to work well in all cases. This may be due to the diversity-and-cost objective, which maintains a good balance between intensification and diversification in all cases. We thus encourage researchers and practitioners to pay attention not only to the number of parameters, but also to study how far the method performance is correlated with parameters, problems and instance specifics.

@&#ACKNOWLEDGMENTS@&#

Partial funding for this project has been provided by the Champagne-Ardennes regional council, France, the Natural Sciences and Engineering Council of Canada (NSERC), and by the Fonds qu√©b√©cois de la recherche sur la nature et les technologies (FQRNT). This support is gratefully acknowledged. The authors also thank the referees for their detailed comments, which significantly contributed to enhance the quality of this paper, as well as Stefanie Kritzinger, Panagiotis Repoussis, Anand Subramanian, Christos Tarantilis and Qiuhong Zhao for their quick answers to many requests relative to the computational experiments.

Supplementary data associated with this article can be found, in the online version, at http://dx.doi.org/10.1016/j.ejor.2013.09.045.


                     
                        
                           Supplementary material
                           
                        
                     
                  

@&#REFERENCES@&#

