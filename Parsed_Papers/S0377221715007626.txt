@&#MAIN-TITLE@&#Polynomially solvable personnel rostering problems

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Polynomially solvable cases for personnel rostering are identified.


                        
                        
                           
                           New minimum cost network flow reformulations of rostering are presented.


                        
                        
                           
                           Different classes of constraints are studied.


                        
                        
                           
                           Based on previous results, a boundary between easy and hard problems is identified.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Personnel rostering

Polynomial time algorithms

Assignment

Networks

@&#ABSTRACT@&#


               
               
                  Personnel rostering is a personnel scheduling problem in which shifts are assigned to employees, subject to complex organisational and contractual time-related constraints. Academic advances in this domain mainly focus on solving specific variants of this problem using intricate exact or (meta)heuristic algorithms, while little attention has been devoted to studying the underlying structure of the problems. The general assumption is that these problems, even in their most simplified form, are NP-hard. However, such claims are rarely supported with a proof for the problem under study. The present paper refutes this assumption by presenting minimum cost network flow formulations for several personnel rostering problems. Additionally, these problems are situated among the existing academic literature to obtain insights into what makes personnel rostering hard.
               
            

@&#INTRODUCTION@&#

Research on personnel rostering, and personnel scheduling in general, has focused mostly on solving some problem at hand. As a result, a large part of the academic literature details algorithms tailored to one specific problem. Typically, general complexity claims are made, thereby referring to NP-complete problems that resemble the problem under discussion. However, in many cases there is no certainty that these complexity claims hold for this particular rostering problem. Theoretical studies on models and complexity of personnel rostering are lacking in the present literature.

There are only a few authors who have formally determined the hardness of a personnel rostering problem. Osogami and Imai (2000) and Brunner, Bard, and Köhler (2013) prove that rostering problems with constraints on the number of assignments of particular shifts, and with constraints on consecutive days worked and days-off are hard. Lau (1996b) describes a shift assignment problem closely related to rostering, and proves its NP-completeness. For restricted variants of the problem, Lau (1996a; 1996b) provide polynomial time algorithms, which are discussed in detail in Section 4.2 of the present paper.

To the best of our knowledge, Brucker, Qu, and Burke (2011) are the only authors to systematically study personnel scheduling from a theoretical point of view. Based on a general mathematical model, four polynomially solvable cases have been identified, two of which are closely related to rostering. The first problem, P
                     Thm1, considers different shifts which require a constant number of employees on different days. The employees are assumed to be available on all days. Without any further restrictions on the assignment of shifts to employees, the problem can be solved as a series of transshipment problems. The second problem, P
                     Thm2, assumes one type of shift, and the availability of employees given by one interval, i.e. employee availability is assumed to be contiguous. There are no other restrictions. A reformulation models the problem as a minimum cost network flow problem.

The present paper identifies new personnel rostering problems that can also be solved in polynomial time. Table 1
                      compares the two polynomially solvable rostering problems studied by Brucker et al. (2011) with the problems discussed in this work.

In the light of the new contributions, complexity results from the academic literature are revisited to obtain insights into what it is that makes personnel rostering hard. This work provides an update on the current results, and further establishes the foundations for theoretical studies on personnel rostering models.

Even though all results are discussed in terms of shifts and days, the ideas can be directly transferred to the domain of tasks and periods. This observation underpins the idea that the presented results have a potential impact not only in different rostering application areas, such as logistics and health care, but also in personnel scheduling in general.

The remainder of this paper is organised as follows. Section 2 introduces basic definitions of concepts in personnel rostering. Section 3 investigates problems with restrictions on the number of assignments to each employee. Several polynomially solvable cases are identified by formulating them as minimum cost network flow problems. Based on these results, an efficient approach to a known problem from the literature is presented, and the complexity of commonly used benchmark datasets for nurse rostering is discussed. Sections 4 and 5 consider problems with constraints on consecutive assignments. Again, polynomially solvable cases are presented, and linked with results from the literature. For all results, the practical implications are discussed. Finally, Section 6 concludes the paper and identifies areas for future research.

This section introduces common concepts in personnel rostering problems, which will be used throughout the paper.

Employees have to be assigned to shifts in a way that satisfies a variety of constraints. These problems are characterised by a set of employees 
                        
                           E
                           =
                           {
                           1
                           ,
                           …
                           ,
                           e
                           }
                           ,
                        
                      a scheduling period of days 
                        
                           T
                           =
                           {
                           1
                           ,
                           …
                           ,
                           t
                           }
                        
                      and a set of shifts 
                        
                           S
                           =
                           {
                           1
                           ,
                           …
                           ,
                           s
                           }
                        
                     .

A shift is a fixed time interval which denotes a working period. Each shift is characterised by a unique type which classifies the shifts in various ways, e.g., by time interval (morning, late), by required qualifications (senior, junior), or by a combination of these (morning-senior, late-junior). A shift is considered to occur on the day where its time interval starts. The number of employees required for each shift can vary from day to day, and is typically more than one employee.

An assignment is the allocation of an employee to a shift on a day. A roster is an e × t matrix which contains in each cell either an assignment or a day-off. If the cardinality of S is one, the single shift represents a day-on, and the solution is referred to as a day-off roster. This work considers non-cyclic rosters, in contrast to cyclic rosters in which all employees have the same assignments, but lagged in time (Rocha, Oliveira, & Carravilla, 2013).

Two shifts are in-day overlapping if their time intervals overlap when considering the shifts on the same day. An ordered set of two shifts is next-day overlapping if an employee cannot be assigned to these shifts on consecutive days without overlap of their time intervals. Fig. 1
                      visualises these concepts. This distinction is important since several models for personnel rostering problems assume that at most one shift can be assigned per day, thereby automatically eliminating in-day overlap, but not necessarily next-day overlap.


                     Domain constraints define the possible assignments for each employee on each day. For each employee i and day j, a set of shifts 
                        
                           
                              S
                              ¯
                           
                           
                              i
                              j
                           
                        
                      is defined, consisting of the shifts that can be feasibly assigned. In practice, these constraints can be used to model restrictions such as ‘part-time employees can only work 4 hour or 6 hour shifts’ or ‘an employee does not want to work late shifts on Wednesday’. This concept can also be used to model employee skills by only including shifts in 
                        
                           
                              S
                              ¯
                           
                           
                              i
                              j
                           
                        
                      for which employee i is qualified.

The demand djk
                      (or coverage requirement) is the required number of employees on day j, shift k. Demand is stable if the same number of employees is required on each day and shift, i.e. 
                        
                           ∀
                           j
                           ∈
                           T
                           ,
                           k
                           ∈
                           S
                           :
                           
                              d
                              
                                 j
                                 k
                              
                           
                           =
                           d
                        
                     . Furthermore, if on each day and shift only one employee is required, 
                        
                           ∀
                           j
                           ∈
                           T
                           ,
                           k
                           ∈
                           S
                           :
                           
                              d
                              
                                 j
                                 k
                              
                           
                           =
                           1
                           ,
                        
                      there is unit demand. In contrast, demand is varying if djk
                      can be any non-negative value.

Demand can be expressed as an exact, ranged, minimum or maximum requirement. In the case of exact demand, the specified value is exactly the number of employees to be assigned. A ranged definition requires that the number of assigned employees should be within a specified interval. When such an interval has no upper (lower) limit, the requirement is defined as a minimum (maximum).

In addition to the coverage requirements, personnel rostering problems are typically also subject to a variety of contractual time-related constraints, which can be categorised as counters, series or successions. Counters restrict the number of times a specific roster item (e.g. assignments or days-off) can occur within a certain period. Series restrict consecutive occurrences of specific roster items (Smet, Bilgin, De Causmaecker, & Vanden Berghe, 2014). Similar to the coverage requirements, these different types of constraints can be expressed as either ranged, minimum, maximum or exact. Finally, successions denote a special type of series, which restrict occurrences of specific roster items on two consecutive days.

This section presents results for problems with counter constraints. More specifically, constraints on the number of days worked and on the number of shifts worked of each type are discussed. The literature survey of Van den Bergh, Beliën, De Bruecker, Demeulemeester, and De Boeck (2013) illustrates the importance of these two constraints as they were included in 85 and 47 recent academic studies, respectively.

Each subtitle describes the problem discussed. The first two elements describe the number of shifts and type of demand. The last element states the objective, if any. All other elements describe constraints of the problem. The type of definition (exact, range, minimum or maximum) for each constraint is mentioned between parentheses.

The number of days worked constraint limits the number of assignments per employee in the scheduling period. In practice, this constraint is used to model different contract types. For example, a full time employee will be required to work 20 days in a monthly scheduling period, whereas a part time employee should only work 15 days.

Consider the set of employees E to be homogeneous, i.e. each employee has to work exactly a days. The problem can be formulated as the following integer linear program.

                           
                              
                                 
                                    
                                       x
                                       
                                          i
                                          j
                                       
                                    
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                1
                                             
                                             
                                                
                                                   
                                                   if
                                                   
                                                   employee
                                                   
                                                   i
                                                   
                                                   works
                                                   
                                                   on
                                                   
                                                   day
                                                   
                                                   j
                                                
                                             
                                          
                                          
                                             
                                                0
                                             
                                             
                                                
                                                   
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (1)
                              
                                 
                                    
                                       
                                          P
                                          1
                                       
                                       :
                                       
                                          ∑
                                          
                                             i
                                             ∈
                                             E
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             j
                                          
                                       
                                       ≥
                                       
                                          d
                                          j
                                       
                                       
                                       ∀
                                       
                                       j
                                       ∈
                                       T
                                    
                                 
                              
                           
                        
                        
                           
                              (2)
                              
                                 
                                    
                                       
                                          ∑
                                          
                                             j
                                             ∈
                                             T
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             j
                                          
                                       
                                       =
                                       a
                                       
                                       ∀
                                       
                                       i
                                       ∈
                                       E
                                    
                                 
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       x
                                       
                                          i
                                          j
                                       
                                    
                                    ∈
                                    
                                       {
                                       0
                                       ,
                                       1
                                       }
                                    
                                    
                                    ∀
                                    
                                    i
                                    ∈
                                    E
                                    ,
                                    j
                                    ∈
                                    T
                                 
                              
                           
                        
                     

Constraints (1) are the coverage requirements. Constraints (2) enforce the number of days worked. Integrality of the decision variables is ensured by constraints (3).

Problem 
                           
                              P
                              1
                           
                         is a special case of the many-to-many generalised assignment problem (Pentico, 2007), in which tasks need to be assigned to agents. The contribution of each task to an agent’s workload is always one. Furthermore, all agents are required to work an exact number of tasks, while for each task only a minimum number of required agents are specified.

Inspired by Burns and Carter (1985), a lower bound on the number of employees required for problem 
                              
                                 P
                                 1
                              
                            can be calculated using parameters a and dj
                            (Equation (4)).

                              
                                 (4)
                                 
                                    
                                       e
                                       =
                                       max
                                       
                                          (
                                          
                                             ⌈
                                             
                                                
                                                   
                                                      ∑
                                                      
                                                         i
                                                         =
                                                         1
                                                      
                                                      t
                                                   
                                                   
                                                      d
                                                      i
                                                   
                                                
                                                a
                                             
                                             ⌉
                                          
                                          ,
                                          
                                             d
                                             1
                                          
                                          ,
                                          
                                             d
                                             2
                                          
                                          ,
                                          …
                                          ,
                                          
                                             d
                                             t
                                          
                                          )
                                       
                                    
                                 
                              
                           
                        

The remainder of this section proves that a solution exists with e employees, by applying network flow techniques. First, a layered network is constructed in which a feasible flow corresponds to a solution for problem 
                              
                                 P
                                 1
                              
                           . Let 
                              
                                 
                                    G
                                    1
                                 
                                 =
                                 
                                    (
                                    V
                                    ,
                                    A
                                    )
                                 
                              
                            be a network with V the set of nodes, and A the set of arcs. The set V consists of four types of nodes: day nodes (DN), employee nodes (EN), one source node (s), and one sink node (f).

The structure of G
                           1 is shown in Fig. 2
                           . The supply in all nodes V∖{s, f} is zero. The supply in the source is ea, which is the maximum number of possible assignments, based on the number of employees and the parameter a. The supply in the sink is 
                              
                                 −
                                 e
                                 a
                              
                           .

Due to the configuration of G
                           1, a flow respecting the capacity and demand constraints is equivalent to a solution for problem 
                              
                                 P
                                 1
                              
                           . One unit of flow in an arc between day node j and employee node i indicates that employee i is working on day j.

                              Lemma 1
                              
                                 A feasible flow in the network G
                                 1 
                                 corresponds to a feasible solution for problem
                                 
                                    
                                       P
                                       1
                                    
                                 
                                 .
                              

Based on Lemma 1, there exists a solution with e employees for problem 
                              
                                 P
                                 1
                              
                            if a feasible flow exists in G
                           1. Ahuja, Magnanti, and Orlin (1993) show that the latter can be proven by verifying that the circulation feasibility condition (CFC) holds in network G
                           1.

                              Theorem 1
                              
                                 CFC: A circulation problem with non-negative lower bounds on arc flows is feasible if and only if, for every set N of nodes, with
                                 
                                    
                                       
                                          N
                                          ¯
                                       
                                       =
                                       V
                                       ∖
                                       N
                                    
                                  
                                 (
                                 
                                    Ahuja et al., 1993
                                 
                                 )
                                 
                                    
                                       (5)
                                       
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      
                                                         (
                                                         p
                                                         ,
                                                         q
                                                         )
                                                      
                                                      ∈
                                                      
                                                         (
                                                         
                                                            N
                                                            ¯
                                                         
                                                         ,
                                                         N
                                                         )
                                                      
                                                   
                                                
                                                
                                                   l
                                                   
                                                      p
                                                      q
                                                   
                                                
                                                ≤
                                                
                                                   ∑
                                                   
                                                      
                                                         (
                                                         p
                                                         ,
                                                         q
                                                         )
                                                      
                                                      ∈
                                                      
                                                         (
                                                         N
                                                         ,
                                                         
                                                            N
                                                            ¯
                                                         
                                                         )
                                                      
                                                   
                                                
                                                
                                                   u
                                                   
                                                      p
                                                      q
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              


                                 There exists a solution for problem
                                 
                                    
                                       P
                                       1
                                    
                                  
                                 with e employees as calculated by Equation 
                                 
                                    (4)
                                 
                                 .
                              

First, G
                                 1 is transformed to a network 
                                    
                                       
                                          G
                                          1
                                          ′
                                       
                                       ,
                                    
                                  representing the corresponding circulation problem. This is done by adding a circulation arc from the sink to the source with infinite positive capacity. Next, it is verified that the CFC holds in network 
                                    
                                       G
                                       1
                                       ′
                                    
                                  by checking Equation (5) for nine cases which, due to the network’s layered structure, cover all possibilities. Table 2
                                  shows, for each case, which types of nodes are in N and 
                                    
                                       
                                          N
                                          ¯
                                       
                                       ,
                                    
                                  as well as the left and right hand sides of Equation (5). Note that it is assumed that all nodes of a type are in the set for the cases shown in Table 2. Changing this assumption does not change the correctness of the proof, but makes the calculation of the CFC terms more complicated.


                                 Table 2 shows that most of the cases are trivial, except the ones with DN ∈ N and 
                                    
                                       s
                                       ∈
                                       
                                          N
                                          ¯
                                       
                                    
                                 . From Equation (4) directly follows that ea ≥ ∑
                                    j∈T
                                 
                                 dj
                                 . Furthermore, since a ≤ t always holds, et will always be greater than or equal to ∑
                                    j∈T
                                 
                                 dj
                                 . It will thus always be possible to construct a feasible flow in 
                                    
                                       G
                                       1
                                       ′
                                    
                                 . From Lemma 1 follows that there will always be a solution for problem 
                                    
                                       P
                                       1
                                    
                                  with e employees, as calculated by Equation (4).□

A common objective in personnel rostering is to respect the employees’ preferences as much as possible (Bard & Purnomo, 2005; Vanhoucke & Maenhout, 2007). This is modelled by minimising an integer cost cijk
                         defined for assigning employee i to shift k on day j.

Let ai
                         be the number of days employee i is allowed to work in the scheduling period. Note that this constraint definition generalises the number of days worked constraint in problem 
                           
                              
                                 P
                                 1
                              
                              ,
                           
                         since now, different employees can be required to work a different number of days. Let 
                           
                              
                                 d
                                 
                                    j
                                    k
                                 
                                 l
                              
                              ,
                           
                        
                        
                           
                              d
                              
                                 j
                                 k
                              
                              u
                           
                         be the minimum, maximum number of employees required to work shift k on day j. The problem can be formulated as an integer linear program.

                           
                              
                                 
                                    
                                       x
                                       
                                          i
                                          j
                                          k
                                       
                                    
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                1
                                             
                                             
                                                
                                                   if
                                                   
                                                   employee
                                                   
                                                   i
                                                   
                                                   works
                                                   
                                                   shift
                                                   
                                                   k
                                                   
                                                   on
                                                   
                                                   day
                                                   
                                                   j
                                                
                                             
                                          
                                          
                                             
                                                0
                                             
                                             
                                                otherwise
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (6)
                              
                                 
                                    
                                       
                                          P
                                          2
                                       
                                       :
                                       
                                       min
                                       
                                       
                                          ∑
                                          
                                             i
                                             ∈
                                             E
                                          
                                       
                                       
                                          ∑
                                          
                                             j
                                             ∈
                                             T
                                          
                                       
                                       
                                          ∑
                                          
                                             k
                                             ∈
                                             S
                                          
                                       
                                       
                                          c
                                          
                                             i
                                             j
                                             k
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             j
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                    
                                       s.t.
                                       
                                       
                                          ∑
                                          
                                             k
                                             ∈
                                             S
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             j
                                             k
                                          
                                       
                                       ≤
                                       1
                                       
                                       ∀
                                       
                                       i
                                       ∈
                                       E
                                       ,
                                       j
                                       ∈
                                       T
                                    
                                 
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       
                                          d
                                          
                                             j
                                             k
                                          
                                          l
                                       
                                       ≤
                                       
                                          ∑
                                          
                                             i
                                             ∈
                                             E
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             j
                                             k
                                          
                                       
                                       ≤
                                       
                                          d
                                          
                                             j
                                             k
                                          
                                          u
                                       
                                       
                                       ∀
                                       
                                       j
                                       ∈
                                       T
                                       ,
                                       k
                                       ∈
                                       S
                                    
                                 
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       
                                          ∑
                                          
                                             j
                                             ∈
                                             T
                                          
                                       
                                       
                                          ∑
                                          
                                             k
                                             ∈
                                             S
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             j
                                             k
                                          
                                       
                                       =
                                       
                                          a
                                          i
                                       
                                       
                                       ∀
                                       
                                       i
                                       ∈
                                       E
                                    
                                 
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    
                                       
                                          ∑
                                          
                                             k
                                             ∈
                                             S
                                             ∖
                                             
                                                
                                                   S
                                                   ¯
                                                
                                                
                                                   i
                                                   j
                                                
                                             
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             j
                                             k
                                          
                                       
                                       =
                                       0
                                       
                                       ∀
                                       
                                       i
                                       ∈
                                       E
                                       ,
                                       j
                                       ∈
                                       T
                                    
                                 
                              
                           
                        
                        
                           
                              (11)
                              
                                 
                                    
                                       x
                                       
                                          i
                                          j
                                          k
                                       
                                    
                                    ∈
                                    
                                       {
                                       0
                                       ,
                                       1
                                       }
                                    
                                    
                                    ∀
                                    
                                    i
                                    ∈
                                    E
                                    ,
                                    j
                                    ∈
                                    T
                                    ,
                                    k
                                    ∈
                                    S
                                 
                              
                           
                        
                     

The objective function (6) minimises the assignment costs. Constraints (7) limit the number of shifts assigned per employee and per day to at most one. Constraints (8) are the coverage requirements. Constraints (9) restrict the number of days worked. Constraints (10) are the domain constraints. Constraints (11) require the decision variables to be either zero or one.

Problem 
                           
                              P
                              2
                           
                         can be reformulated as a minimum cost network flow problem in a directed network 
                           
                              
                                 G
                                 2
                              
                              =
                              
                                 (
                                 V
                                 ,
                                 A
                                 )
                              
                              ,
                           
                         with V the set of nodes and A the set of arcs. The set V consists of five types of nodes: shift nodes, work nodes, employee nodes, one source node (s), and one sink node (f).


                        Fig. 3 shows the structure of G
                        2. Note that the domain constraints are modelled by only adding arcs between shift nodes associated with day j and shift k, and work nodes associated with employee i and day j, if 
                           
                              k
                              ∈
                              
                                 
                                    S
                                    ¯
                                 
                                 
                                    i
                                    j
                                 
                              
                           
                        . All nodes, except the source and sink nodes, are transshipment nodes. The supply in the source node is ∑
                           i∈E
                        
                        ai
                        , the supply in the sink node is equal to 
                           
                              
                                 ∑
                                 
                                    i
                                    ∈
                                    E
                                 
                              
                              −
                              
                                 a
                                 i
                              
                           
                        .

The total number of nodes in G
                        2 is 
                           
                              t
                              (
                              s
                              +
                              e
                              )
                              +
                              e
                              +
                              2
                           
                        ; the total number of arcs is 
                           
                              t
                              (
                              s
                              +
                              e
                              (
                              s
                              +
                              1
                              )
                              )
                              +
                              e
                              ,
                           
                         if 
                           
                              
                                 
                                    S
                                    ¯
                                 
                                 
                                    i
                                    j
                                 
                              
                              =
                              S
                           
                         for each i ∈ E, j ∈ T. Smaller sets 
                           
                              
                                 S
                                 ¯
                              
                              
                                 i
                                 j
                              
                           
                         will result in fewer arcs.

                           Lemma 2
                           
                              The size of network G
                              2 
                              is polynomially bounded by the number of days, employees and shifts.
                           

Due to the configuration of G
                        2, a minimum cost solution respecting the capacity and demand constraints is equivalent to a solution for problem 
                           
                              P
                              2
                           
                        . Lower and upper bounds on the arc capacities are appropriately defined to correctly represent the minimum (maximum) staffing demand and the required number of days worked. Shift assignments correspond to flows in the arcs between the shift nodes and the work nodes. A flow from the shift node associated with day j, shift k to the work node associated with day j, employee i, corresponds to employee i working shift k on day j, thereby incurring cost cijk
                        . As these arcs have a capacity upper bound of one, employees can be assigned to at most one shift per day.

                           Lemma 3
                           
                              A minimum cost flow in the network G
                              2 
                              corresponds to an optimal solution for problem
                              
                                 
                                    P
                                    2
                                 
                              
                              .
                           

From Lemmas 2 and 3, it follows that problem 
                           
                              P
                              2
                           
                         can be transformed in polynomial time to a minimum cost network flow problem with integer capacities and arc costs. The resulting network flow problem can be solved in polynomial time (Ahuja et al., 1993), thereby establishing the following theorem.

                           Theorem 3
                           
                              Problem
                              
                                 
                                    P
                                    2
                                 
                               
                              can be solved in polynomial time.
                           

In the remainder of this section, two results will be derived from Theorem 3. First, a discussion on the complexity of academic nurse rostering benchmark datasets is presented. Second, a problem from the literature is revisited and a new network flow-based solution approach is presented.

Benchmark datasets provide interesting indicators for comparing the performance of different algorithms. Table 3
                            shows the hard constraints in three commonly used datasets in nurse rostering: the Nottingham dataset (NOTT; Brucker, Burke, Curtois, Qu, and Vanden Berghe, 2010), the dataset from the first International Nurse Rostering Competition (INRC; Haspeslagh, De Causmaecker, Schaerf, and Stølevik, 2012), and the KAHO dataset (Smet et al., 2014). Based on the hard constraints, INRC can be considered to be a special case of NOTT. Indeed, any algorithm that constructs a feasible solution for NOTT can construct feasible solutions for INRC.

The NOTT instances can be straightforwardly transformed to problem 
                              
                                 P
                                 2
                              
                            by setting ai
                            to the (maximum) number of days each employee i is allowed to work. Note that, if there is no constraint on the number of days worked, ai
                            can be set to the total number of days in the scheduling period, resulting in a feasible, albeit possibly poor quality, solution. The qualification requirements can be modelled using the domain constraints. The coverage requirements in NOTT can be defined as a range, minimum, maximum or exact number. To model these different definitions, the parameters 
                              
                                 d
                                 
                                    j
                                    k
                                 
                                 l
                              
                            and 
                              
                                 d
                                 
                                    j
                                    k
                                 
                                 u
                              
                            should be modified appropriately. An algorithm that generates a feasible solution for problem 
                              
                                 P
                                 2
                              
                            can thus produce feasible solutions for NOTT and INRC. The following corollary is an immediate consequence of Theorem 3.

                              Corollary 1
                              
                                 A feasible solution for the instances from the NOTT and INRC datasets can be obtained in polynomial time.
                              

The objective in NOTT and INRC is to minimise the weighted sum of soft constraint violations. These soft constraints are various time-related constraints limiting the number of consecutive days worked, weekends worked, etc. The cost of a solution thus depends on the extent to which certain constraints are violated, which is quite different from the assignment cost minimised in problem 
                              
                                 P
                                 2
                              
                           .

State of the art optimisation algorithms for personnel rostering often use a greedy method to construct an initial solution. Burke, Curtois, Qu, and Vanden Berghe (2013), for example, use a randomised greedy constructive algorithm to generate initial solutions by assigning uncovered shifts to the employee who incurs the smallest penalty gain. A simple example illustrates how this greedy method can fail to find a feasible solution: consider an instance without any soft constraints and with two employees A and B. Employee A has qualifications DH and RN, while employee B only has qualification RN. The coverage constraints require one RN-shift and one DH-shift to be assigned. If the greedy algorithm of Burke et al. (2013) selects employee A to be assigned to the RN-shift, the DH-shift cannot be assigned, and thus no feasible solution can be constructed without restarting the algorithm. However, by applying the method presented in Section 3.2, Corollary 1 states that a feasible solution can be guaranteed in polynomial time.


                           Corollary 1 cannot be extended to the KAHO dataset due to the hard constraint forbidding overlapping assignments (C5). The structure of network G
                           2 cannot prevent next-day overlap. All other hard constraints can be included in G
                           2 by making small modifications as follows. Assignments can be fixed by changing the capacity bounds on the arcs between shift nodes and work nodes. Constraint C4 states that only assignments with a corresponding coverage requirement are feasible. This can be modelled in G
                           2 by adding shift nodes only if at least one employee is required on that day and shift.
                        


                           Hung (1994) and Billionnet (1999) describe a days-off rostering problem with hierarchical substitution. Based on their qualifications, employees are classified into m types, with ek
                            the number of employees of type k. Coverage requirements are defined in terms of these qualifications: djk
                            is the number of workers required on day j with qualification k. The qualifications are organised in a hierarchical manner, i.e. a higher qualified employee can substitute for a lower qualified employee, but not the other way around. A cost ck
                            is associated with each type k employee. When an employee substitutes for a lower qualification, cost ck
                            still corresponds to the employee’s original, higher qualification. The scheduling period is one week. Each employee should receive n days off, or, equivalently, each employee should work 
                              
                                 a
                                 =
                                 7
                                 −
                                 n
                              
                            days. The objective is to find the least cost workforce composition, and to construct a days-off roster.


                           Hung (1994) presents sufficient conditions for a workforce composition to be feasible. A two phase approach is used for solving the problem: the workforce composition is determined first, and the actual roster is constructed afterward. An exhaustive search determines the workforce composition, suitable for problems with m ≤ 3. Furthermore, a single pass method is described, which does not guarantee feasible solutions. Billionnet (1999) presents an integer programming formulation to determine the number of employees working a particular qualification each day. A feasible roster is constructed based on the solution for the integer program.

Given the least cost workforce, a roster can be efficiently constructed by reformulating and solving the problem as a minimum cost flow problem in network G
                           ⋆. Fig. 4 shows that G
                           ⋆ has a structure similar to G
                           2, however, skills are used instead of shifts. Arcs between skill nodes and work nodes are only present if the employee is qualified or can substitute for the skill. Lemma 3 holds for G
                           ⋆; a minimum cost flow solution in network G
                           ⋆ thus corresponds with a feasible roster.

Note that network G
                           ⋆ has a pseudo-polynomial number of nodes with respect to the coverage requirements of an instance, since the coverage requirements directly impact the workforce composition, and thus the number of work nodes and employee nodes.

Arcs between the employee nodes and the sink model the cost of each employee. These arcs have 
                              
                                 
                                    l
                                    
                                       i
                                       j
                                    
                                 
                                 =
                                 
                                    u
                                    
                                       i
                                       j
                                    
                                 
                                 =
                                 a
                              
                            and a flow cost of ci
                           /a, with 
                              
                                 
                                    c
                                    i
                                 
                                 =
                                 
                                    c
                                    k
                                 
                              
                            if employee i is of type k. If the employee is working, a units of flow result in a cost of 
                              
                                 
                                    c
                                    i
                                 
                                 /
                                 a
                                 ×
                                 a
                                 =
                                 
                                    c
                                    i
                                 
                                 ,
                              
                            which is the employee’s cost in the original problem definition.

The constraint on the number of days worked discussed in Section 3.1 is a special case of the number of shifts worked of each type constraint. The former limits the number of assignments in the scheduling period, whereas the latter restricts the number of assignments of each shift type within the scheduling period. This constraint has various applications in practice, e.g. balancing undesirable shifts among employees or applying health and safety regulations.


                        Osogami and Imai (2000) discuss a feasibility problem with one counter constraint on the number of shifts worked of each type. This constraint is defined as a range, e.g. employee i has to be assigned to shift j on at least two days, and at most five days in the scheduling period. Furthermore, there are coverage requirements for each day, shift, also expressed as a range.

Let 
                           
                              
                                 a
                                 
                                    i
                                    k
                                 
                                 l
                              
                              ,
                           
                        
                        
                           
                              a
                              
                                 i
                                 k
                              
                              u
                           
                         be the minimum, maximum number of days employee i is allowed to work shift k. The problem can be formulated as an integer linear program.

                           
                              
                                 
                                    
                                       x
                                       
                                          i
                                          j
                                          k
                                       
                                    
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                1
                                             
                                             
                                                
                                                   
                                                   if
                                                   
                                                   employee
                                                   
                                                   i
                                                   
                                                   works
                                                   
                                                   shift
                                                   
                                                   k
                                                   
                                                   on
                                                   
                                                   day
                                                   
                                                   j
                                                
                                             
                                          
                                          
                                             
                                                0
                                             
                                             
                                                
                                                   
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (12)
                              
                                 
                                    
                                       
                                          P
                                          3
                                       
                                       :
                                       
                                       
                                          ∑
                                          
                                             k
                                             ∈
                                             S
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             j
                                             k
                                          
                                       
                                       ≤
                                       1
                                       
                                       ∀
                                       
                                       i
                                       ∈
                                       E
                                       ,
                                       j
                                       ∈
                                       T
                                    
                                 
                              
                           
                        
                        
                           
                              (13)
                              
                                 
                                    
                                       
                                          d
                                          
                                             j
                                             k
                                          
                                          l
                                       
                                       ≤
                                       
                                          ∑
                                          
                                             i
                                             ∈
                                             E
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             j
                                             k
                                          
                                       
                                       ≤
                                       
                                          d
                                          
                                             j
                                             k
                                          
                                          u
                                       
                                       
                                       ∀
                                       
                                       j
                                       ∈
                                       T
                                       ,
                                       k
                                       ∈
                                       S
                                    
                                 
                              
                           
                        
                        
                           
                              (14)
                              
                                 
                                    
                                       
                                          a
                                          
                                             i
                                             k
                                          
                                          l
                                       
                                       ≤
                                       
                                          ∑
                                          
                                             j
                                             ∈
                                             T
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             j
                                             k
                                          
                                       
                                       ≤
                                       
                                          a
                                          
                                             i
                                             k
                                          
                                          u
                                       
                                       
                                       ∀
                                       
                                       i
                                       ∈
                                       E
                                       ,
                                       k
                                       ∈
                                       S
                                    
                                 
                              
                           
                        
                        
                           
                              (15)
                              
                                 
                                    
                                       
                                          ∑
                                          
                                             k
                                             ∈
                                             S
                                             ∖
                                             
                                                
                                                   S
                                                   ¯
                                                
                                                
                                                   i
                                                   j
                                                
                                             
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             j
                                             k
                                          
                                       
                                       =
                                       0
                                       
                                       ∀
                                       
                                       i
                                       ∈
                                       E
                                       ,
                                       j
                                       ∈
                                       T
                                    
                                 
                              
                           
                        
                        
                           
                              (16)
                              
                                 
                                    
                                       x
                                       
                                          i
                                          j
                                          k
                                       
                                    
                                    ∈
                                    
                                       {
                                       0
                                       ,
                                       1
                                       }
                                    
                                    
                                    ∀
                                    
                                    i
                                    ∈
                                    E
                                    ,
                                    j
                                    ∈
                                    T
                                    ,
                                    k
                                    ∈
                                    S
                                 
                              
                           
                        
                     

Constraints (12) ensure that at most one shift is assigned per day, per employee. Constraints (13) are the coverage requirements. Constraints (14) limit the number of shifts worked of each type. Constraints (15) are the domain constraints. Constraints (16) require the decision variables to be either zero or one.

Problem 
                           
                              P
                              3
                           
                         is proven to be NP-complete by reduction from a timetabling problem (Osogami & Imai, 2000). However, by relaxing the constraint on the number of shifts worked of each type to a constraint on the number of days worked, problem 
                           
                              P
                              3
                           
                         can be reduced to a feasible circulation problem (Ahuja et al., 1993) in a network obtained by modifying network G
                        2 in the following way. One additional arc is added to G
                        2 from the sink node to the source node with infinite positive capacity. Furthermore, the capacities on the arcs between employee nodes and sink node are modified to correctly model the range on the number of days worked.

The following theorem follows from Lemmas 2 and 3.

                           Theorem 4
                           
                              Problem
                              
                                 
                                    P
                                    3
                                 
                               
                              without ranged constraints on the number of shifts worked of each type can be solved in polynomial time.
                           

From Theorem 4 follows that the granularity of a counter constraint has a significant impact on a problem’s complexity. Defining a counter for days worked allows the problem to be solved as a minimum cost network flow problem, whereas restricting the number of shifts worked of each type makes the problem NP-complete. This results in interesting practical considerations when solving personnel rostering problems. It might be sufficient to model regulations at day-level, rather than at shift-level, thereby inevitably making abstraction of some of the administration’s guidelines. The result, however, is a computationally tractable problem.
                     

This section presents results for a problem with succession constraints on days and shifts. First, a problem is discussed with a constraint that generalises the number of days worked constraint, and which can be used to model constraints on day successions. Afterward, the relationship between this problem and a known academic result is discussed. Van den Bergh et al. (2013) list 73 recent academic studies where constraints on day successions, shift successions and more general forbidden shift sequences appear.

As in Section 3, the titles of the subsections describe the problems discussed.

Problem 
                           
                              P
                              2
                           
                         can be extended by adding constraint (17) to restrict assignments on days from pairwise disjoint sets. This extended problem is denoted as 
                           
                              P
                              4
                           
                        .

                           
                              (17)
                              
                                 
                                    
                                       
                                          m
                                          
                                             i
                                             F
                                          
                                          l
                                       
                                       ≤
                                       
                                          ∑
                                          
                                             j
                                             ∈
                                             F
                                          
                                       
                                       
                                          ∑
                                          
                                             k
                                             ∈
                                             S
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             j
                                             k
                                          
                                       
                                       ≤
                                       
                                          m
                                          
                                             i
                                             F
                                          
                                          u
                                       
                                       
                                       ∀
                                       
                                       i
                                       ∈
                                       E
                                       ,
                                       F
                                       ∈
                                       
                                          
                                             D
                                             i
                                          
                                          ¯
                                       
                                    
                                 
                              
                           
                        
                     

For each employee i, let 
                           
                              
                                 D
                                 i
                              
                              ¯
                           
                         be a set of day sets F, from which at least 
                           
                              
                                 m
                                 
                                    i
                                    F
                                 
                                 l
                              
                              ,
                           
                         and at most 
                           
                              m
                              
                                 i
                                 F
                              
                              u
                           
                         days can be worked. All sets in 
                           
                              
                                 D
                                 i
                              
                              ¯
                           
                         must be pairwise disjoint, i.e. each day in T can occur in at most one set 
                           
                              F
                              ∈
                              
                                 
                                    D
                                    i
                                 
                                 ¯
                              
                           
                        . There should thus be no overlap between the sets in 
                           
                              
                                 D
                                 i
                              
                              ¯
                           
                        . The incompatible days constraint restricts the number of days worked by employee i in the set F to values between 
                           
                              m
                              
                                 i
                                 F
                              
                              l
                           
                         and 
                           
                              m
                              
                                 i
                                 F
                              
                              u
                           
                        .

This constraint can be interpreted as a number of days worked constraint for periods which are subsets of the scheduling period. This first interpretation allows various practical restrictions to be modelled, e.g. balancing the number of assignments per week, or limiting the number of Sundays worked in the scheduling period.

The incompatible day sets furthermore offer the opportunity to model succession constraints. Consider the example in which a hospital’s administration requires a nurse to have a day-off after working on a bank holiday. For each bank holiday, a set F is added to 
                           
                              
                                 D
                                 i
                              
                              ¯
                           
                         consisting of the bank holiday and the day after. By setting 
                           
                              
                                 m
                                 
                                    i
                                    F
                                 
                                 l
                              
                              =
                              0
                           
                         and 
                           
                              
                                 m
                                 
                                    i
                                    F
                                 
                                 u
                              
                              =
                              1
                              ,
                           
                         nurse i will not be allowed to work on both the bank holiday and the day after. Note that, in this example, it is assumed that there are no consecutive bank holidays, since this would lead to non-disjoint sets in 
                           
                              
                                 D
                                 i
                              
                              ¯
                           
                        .

Problem 
                           
                              P
                              4
                           
                         can be transformed into finding a minimum cost flow in a network G
                        4. This network is obtained by including additional compatibility nodes in network G
                        2. For each 
                           
                              F
                              ∈
                              
                                 
                                    D
                                    i
                                 
                                 ¯
                              
                              ,
                           
                         one compatibility node is added to the network between the work nodes for days in F, and the employee node of employee i. Since 
                           
                              
                                 D
                                 i
                              
                              ¯
                           
                         is restricted to pairwise disjoint sets, the maximum size of 
                           
                              
                                 D
                                 i
                              
                              ¯
                           
                         is bounded by t. The flow in the incoming arcs of each compatibility node is bounded between zero and one. The flow in the outgoing arc of each compatibility node is bounded between 
                           
                              m
                              
                                 i
                                 F
                              
                              l
                           
                         and 
                           
                              m
                              
                                 i
                                 F
                              
                              u
                           
                        . Fig. 5 shows the structure of the network G
                        4.

                           Theorem 5
                           
                              Problem
                              
                                 
                                    P
                                    4
                                 
                               
                              can be solved in polynomial time if
                              
                                 
                                    
                                       D
                                       i
                                    
                                    ¯
                                 
                               
                              contains only pairwise disjoint sets of days.
                           

A large part of network G
                              4 is identical to G
                              2; the main ideas from Lemma 3 thus hold for G
                              4 as well. Since the size of 
                                 
                                    
                                       D
                                       i
                                    
                                    ¯
                                 
                               is bounded by t, the number of nodes in the network increases maximally with et. Through the construction of the compatibility nodes, each employee will be working between 
                                 
                                    m
                                    
                                       i
                                       F
                                    
                                    l
                                 
                               and 
                                 
                                    m
                                    
                                       i
                                       F
                                    
                                    u
                                 
                               days from the set F.□


                        Fig. 6
                         illustrates this formulation with an example. Each employee in the example has to work exactly five days, and employee B is required to work at least two days in the period from Friday (Fr) to Sunday (Su). To accommodate for this constraint, the compatibility node c
                        1 is included in the network.

The requirement for the sets to be pairwise disjoint is a strong modelling restriction. If non-disjoint sets would be allowed, additional constraints could be modelled with the presented networks. Consider the formulation of a maximum m consecutive days worked constraint in Equation (18).

                           
                              (18)
                              
                                 
                                    
                                       
                                          ∑
                                          
                                             g
                                             ∈
                                             {
                                             0
                                             ,
                                             …
                                             ,
                                             m
                                             }
                                          
                                       
                                       
                                          ∑
                                          
                                             k
                                             ∈
                                             S
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             (
                                             j
                                             +
                                             g
                                             )
                                             k
                                          
                                       
                                       ≤
                                       m
                                       
                                       ∀
                                       
                                       i
                                       ∈
                                       E
                                       ,
                                       
                                       j
                                       ∈
                                       
                                          {
                                          1
                                          ,
                                          …
                                          ,
                                          t
                                          −
                                          m
                                          }
                                       
                                    
                                 
                              
                           
                        
                     


                        Equation (18) forces an employee to work at most m days in a window of size 
                           
                              m
                              +
                              1
                              ,
                           
                         which slides over the scheduling period. Effectively, this formulation transforms the constraint on consecutive days worked into multiple constraints on non-disjoint incompatible days. However, non-disjoint sets F would result in multiple outgoing arcs from each work node in G
                        4, which would allow multiple assignments to one employee on one day, which violates the single assignment per day constraint.

Health and safety regulations concerning rest time are of major importance in many organisations. Within this class of guidelines, providing sufficient rest time between two consecutive working days is regarded as one of the most important constraints. Forward shift rotation is a common concept in practice, which requires an assignment to not start earlier than the assignment on the previous day. A generalisation of this concept is a shift succession constraint, which forbids two particular shifts to be assigned on consecutive days.


                        Lau (1996b) discusses a feasibility problem in which the day-off roster has been predetermined. The goal is to assign shifts to working employees. Let 
                           
                              
                                 T
                                 ¯
                              
                              i
                           
                         be a set of days on which employee i cannot work, i.e. the days-off in the predetermined roster. Let R be the set of shift pairs (k, k′), which cannot be assigned on two consecutive days. Coverage requirements are defined for each day and shift. They are expressed as an exact value. The problem can be formulated as the following integer linear program.

                           
                              
                                 
                                    
                                       x
                                       
                                          i
                                          j
                                          k
                                       
                                    
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                1
                                             
                                             
                                                
                                                   if
                                                   
                                                   employee
                                                   
                                                   i
                                                   
                                                   works
                                                   
                                                   shift
                                                   
                                                   k
                                                   
                                                   on
                                                   
                                                   day
                                                   
                                                   j
                                                
                                             
                                          
                                          
                                             
                                                0
                                             
                                             
                                                otherwise
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (19)
                              
                                 
                                    
                                       
                                          P
                                          5
                                       
                                       :
                                       
                                       
                                          ∑
                                          
                                             k
                                             ∈
                                             S
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             j
                                             k
                                          
                                       
                                       ≤
                                       1
                                       
                                       ∀
                                       
                                       i
                                       ∈
                                       E
                                       ,
                                       j
                                       ∈
                                       T
                                       ∖
                                       
                                          
                                             T
                                             ¯
                                          
                                          i
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (20)
                              
                                 
                                    
                                       
                                          ∑
                                          
                                             i
                                             ∈
                                             E
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             j
                                             k
                                          
                                       
                                       =
                                       
                                          d
                                          
                                             j
                                             k
                                          
                                       
                                       
                                       ∀
                                       
                                       j
                                       ∈
                                       T
                                       ,
                                       k
                                       ∈
                                       S
                                    
                                 
                              
                           
                        
                        
                           
                              (21)
                              
                                 
                                    
                                       x
                                       
                                          i
                                          j
                                          k
                                       
                                    
                                    +
                                    
                                       x
                                       
                                          i
                                          
                                             (
                                             j
                                             +
                                             1
                                             )
                                          
                                          
                                             k
                                             ′
                                          
                                       
                                    
                                    ≤
                                    1
                                    
                                    ∀
                                    
                                    i
                                    ∈
                                    E
                                    ,
                                    j
                                    ∈
                                    T
                                    ∖
                                    
                                       {
                                       t
                                       }
                                    
                                    ,
                                    
                                       (
                                       k
                                       ,
                                       
                                          k
                                          ′
                                       
                                       )
                                    
                                    ∈
                                    R
                                 
                              
                           
                        
                        
                           
                              (22)
                              
                                 
                                    
                                       
                                          ∑
                                          
                                             k
                                             ∈
                                             S
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             j
                                             k
                                          
                                       
                                       =
                                       0
                                       
                                       ∀
                                       
                                       i
                                       ∈
                                       E
                                       ,
                                       j
                                       ∈
                                       
                                          
                                             T
                                             ¯
                                          
                                          i
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (23)
                              
                                 
                                    
                                       
                                          ∑
                                          
                                             k
                                             ∈
                                             S
                                             ∖
                                             
                                                
                                                   S
                                                   ¯
                                                
                                                
                                                   i
                                                   j
                                                
                                             
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             j
                                             k
                                          
                                       
                                       =
                                       0
                                       
                                       ∀
                                       
                                       i
                                       ∈
                                       E
                                       ,
                                       j
                                       ∈
                                       T
                                    
                                 
                              
                           
                        
                        
                           
                              (24)
                              
                                 
                                    
                                       x
                                       
                                          i
                                          j
                                          k
                                       
                                    
                                    ∈
                                    
                                       {
                                       0
                                       ,
                                       1
                                       }
                                    
                                    
                                    ∀
                                    
                                    i
                                    ∈
                                    E
                                    ,
                                    j
                                    ∈
                                    T
                                    ,
                                    k
                                    ∈
                                    S
                                 
                              
                           
                        
                     

Constraints (19) ensure that at most one shift is assigned to an employee on a working day. Constraints (20) are the coverage requirements. Constraints (21) are the shift succession constraints. Constraints (22) make sure no shifts are assigned on days-off. Constraints (23) are the domain constraints. Constraints (24) require the decision variables to be either zero or one.

Problem 
                           
                              P
                              5
                           
                         is proven to be NP-complete by reduction from 3SAT (Lau, 1996b). Additionally, Lau (1996b) presents a greedy algorithm which solves 
                           
                              P
                              5
                           
                         under three assumptions: a feasible solution exists, domain constraints are not included, and only monotonic shift changes are allowed. The latter is not a strong restriction as it still allows for forward shift rotation to be enforced.

The following theorem is due to Lau (1996b).

                           Theorem 6
                           
                              Problem
                              
                                 
                                    P
                                    5
                                 
                               
                              without domain constraints and with monotonic shift succession constraints can be solved in polynomial time (
                              
                                 Lau, 1996b
                              
                              ).
                           

In a follow-up paper, Lau (1996a) presents a polynomial time algorithm for problem 
                           
                              P
                              5
                           
                         when the days-off roster has a particular structure. All employees’ working days are contiguous and the work stretches either start or stop on the same day, i.e. the days-off roster is tableau shaped. A solution for this problem variant can be derived from an optimal path cover in a layered network.

The following theorem is due to Lau (1996a).

                           Theorem 7
                           
                              Problem
                              
                                 
                                    P
                                    5
                                 
                               
                              without domain constraints and with a tableau shaped days-off roster can be solved in polynomial time (
                              
                                 Lau, 1996a
                              
                              ).
                           

The network flow model presented in Section 3.2 supports the proof of a related result. By omitting the shift succession constraints, problem 
                           
                              P
                              5
                           
                         can be reduced to the problem of finding a feasible flow in G
                        2. The fixed days-off roster can be modelled in the network by setting the capacity upper bounds of the correct arcs between work nodes and employee nodes to zero. Since the number of days worked per employee is predetermined in the days-off roster, ai
                         is set to 
                           
                              
                                 t
                                 −
                                 |
                              
                              
                                 
                                    T
                                    ¯
                                 
                                 i
                              
                              
                                 |
                                 ,
                              
                           
                         for each employee i ∈ E. Finally, the supply in the source node is set to ∑
                           j∈T
                        ∑
                           k∈S
                        
                        djk
                        . The supply in the sink node is equal to 
                           
                              
                                 ∑
                                 
                                    j
                                    ∈
                                    T
                                 
                              
                              
                                 ∑
                                 
                                    k
                                    ∈
                                    S
                                 
                              
                              −
                              
                                 d
                                 
                                    j
                                    k
                                 
                              
                           
                        . Note that neither the structure of the days-off roster, nor the domain constraints are subject to restrictions.

The following corollary is an immediate consequence of Lemmas 2 and 3.

                           Corollary 2
                           
                              Problem
                              
                                 
                                    P
                                    5
                                 
                               
                              without shift succession constraints can be solved in polynomial time.
                           


                        Table 4 compares characteristics of the polynomially solvable problems identified by Lau (1996a; 1996b), and by Theorem 5 presented in Section 4.1.

Relating the result from Lau (1996b) to Theorem 5 allows further examination of the boundary between easy and hard definitions of succession constraints. Problems with general shift succession constraints are NP-complete. However, Theorem 5 proved that a restricted version of the day succession constraints can be solved as a minimum cost flow problem. Similar to the findings on counter constraints, the transition from succession constraints on days to succession constraints on shifts transforms a tractable problem into an intractable one. While for counter constraints, in some cases, the abstraction from shifts to days could be justified (e.g. by aggregating constraints on the number of shifts worked of each type to restrict the total number of days worked), it is harder to do so for the succession constraints. Constraints on day successions are not useless, rather they have a different purpose than the shift successions. Nevertheless, this result provides valuable insight into the constraints that make personnel rostering problems hard.


                     Brunner et al. (2013) consider a problem with a single shift and varying demand, expressed as a minimum. In addition, the assignments of each employee are subject to three other constraints. The first constraint limits the number of days worked to a maximum value. The second and third constraints define a range on the number of consecutive days worked and days-off, respectively. The objective is to minimise the size of the workforce.


                     Van den Bergh et al. (2013) identify 101 recent academic studies that include constraints on the number of consecutive days worked or days-off.

Let 
                        
                           
                              D
                              ¯
                           
                           work
                        
                      be the maximum number of days an employee can work in the scheduling period. Let 
                        
                           
                              
                                 D
                                 ¯
                              
                              on
                           
                           ,
                        
                     
                     
                        
                           
                              D
                              ¯
                           
                           off
                        
                      be the maximum number of consecutive days worked, days-off. Let 
                        D
                     
                     on, 
                        D
                     
                     off be the minimum number of consecutive days worked, days-off. The problem can be formulated as the following integer linear program.

                        
                           
                              
                                 
                                    x
                                    
                                       i
                                       j
                                    
                                 
                                 =
                                 
                                    {
                                    
                                       
                                          
                                             1
                                          
                                          
                                             
                                                
                                                if
                                                
                                                employee
                                                
                                                i
                                                
                                                works
                                                
                                                on
                                                
                                                day
                                                
                                                j
                                             
                                          
                                       
                                       
                                          
                                             0
                                          
                                          
                                             
                                                
                                                otherwise
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (25)
                           
                              
                                 
                                    P
                                    6
                                 
                                 :
                                 
                                 min
                                 
                                 number
                                 
                                 of
                                 
                                 employees
                              
                           
                        
                     
                     
                        
                           (26)
                           
                              
                                 
                                    s.t.
                                    
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          E
                                       
                                    
                                    
                                       x
                                       
                                          i
                                          j
                                       
                                    
                                    ≥
                                    
                                       d
                                       j
                                    
                                    
                                    ∀
                                    j
                                    ∈
                                    T
                                 
                              
                           
                        
                     
                     
                        
                           (27)
                           
                              
                                 
                                    
                                       ∑
                                       
                                          j
                                          ∈
                                          T
                                       
                                    
                                    
                                       x
                                       
                                          i
                                          j
                                       
                                    
                                    ≤
                                    
                                       
                                          D
                                          ¯
                                       
                                       work
                                    
                                    
                                    ∀
                                    i
                                    ∈
                                    E
                                 
                              
                           
                        
                     
                     
                        
                           (28)
                           
                              
                                 
                                    
                                       ∑
                                       
                                          n
                                          =
                                          0
                                       
                                       
                                          
                                             D
                                             ¯
                                          
                                          on
                                       
                                    
                                    
                                       x
                                       
                                          i
                                          (
                                          j
                                          +
                                          n
                                          )
                                       
                                    
                                    ≤
                                    
                                       
                                          D
                                          ¯
                                       
                                       on
                                    
                                    
                                    ∀
                                    i
                                    ∈
                                    E
                                    ,
                                    j
                                    ∈
                                    
                                       {
                                       1
                                       ,
                                       …
                                       ,
                                       t
                                       −
                                       
                                          
                                             D
                                             ¯
                                          
                                          on
                                       
                                       }
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (29)
                           
                              
                                 
                                    
                                       
                                          x
                                          
                                             i
                                             j
                                          
                                       
                                    
                                    
                                       +
                                    
                                    
                                       
                                          
                                             
                                                (
                                                w
                                                −
                                                
                                                   ∑
                                                   
                                                      n
                                                      =
                                                      j
                                                      +
                                                      1
                                                   
                                                   
                                                      j
                                                      +
                                                      w
                                                   
                                                
                                                
                                                   x
                                                   
                                                      i
                                                      n
                                                   
                                                
                                                )
                                             
                                             +
                                             
                                                x
                                                
                                                   i
                                                   (
                                                   j
                                                   +
                                                   w
                                                   +
                                                   1
                                                   )
                                                
                                             
                                             ≥
                                             1
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          ∀
                                          i
                                          ∈
                                          E
                                          ,
                                          w
                                          ∈
                                          
                                             {
                                             1
                                             ,
                                             …
                                             ,
                                             
                                                
                                                   D
                                                   ̲
                                                
                                                on
                                             
                                             −
                                             1
                                             }
                                          
                                          ,
                                          j
                                          ∈
                                          
                                             {
                                             1
                                             ,
                                             …
                                             ,
                                             t
                                             −
                                             
                                                (
                                                w
                                                +
                                                1
                                                )
                                             
                                             }
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (30)
                           
                              
                                 
                                    
                                       ∑
                                       
                                          n
                                          =
                                          0
                                       
                                       
                                          
                                             D
                                             ¯
                                          
                                          off
                                       
                                    
                                    
                                       (
                                       1
                                       −
                                       
                                          x
                                          
                                             i
                                             (
                                             j
                                             +
                                             n
                                             )
                                          
                                       
                                       )
                                    
                                    ≤
                                    
                                       
                                          D
                                          ¯
                                       
                                       off
                                    
                                    
                                    ∀
                                    i
                                    ∈
                                    E
                                    ,
                                    j
                                    ∈
                                    
                                       {
                                       1
                                       ,
                                       …
                                       ,
                                       t
                                       −
                                       
                                          
                                             D
                                             ¯
                                          
                                          off
                                       
                                       }
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (31)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             
                                                (
                                                1
                                                −
                                                
                                                   x
                                                   
                                                      i
                                                      j
                                                   
                                                
                                                )
                                             
                                             +
                                             
                                                ∑
                                                
                                                   n
                                                   =
                                                   j
                                                   +
                                                   1
                                                
                                                
                                                   j
                                                   +
                                                   w
                                                
                                             
                                             
                                                x
                                                
                                                   i
                                                   n
                                                
                                             
                                             +
                                             
                                                (
                                                1
                                                −
                                                
                                                   x
                                                   
                                                      i
                                                      (
                                                      j
                                                      +
                                                      w
                                                      +
                                                      1
                                                      )
                                                   
                                                
                                                )
                                             
                                             ≥
                                             1
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                          ∀
                                          i
                                          ∈
                                          E
                                          ,
                                          w
                                          ∈
                                          
                                             {
                                             1
                                             ,
                                             …
                                             ,
                                             
                                                
                                                   D
                                                   ̲
                                                
                                                off
                                             
                                             −
                                             1
                                             }
                                          
                                          ,
                                          j
                                          ∈
                                          
                                             {
                                             1
                                             ,
                                             …
                                             ,
                                             t
                                             −
                                             
                                                (
                                                w
                                                +
                                                1
                                                )
                                             
                                             }
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (32)
                           
                              
                                 
                                    x
                                    
                                       i
                                       j
                                    
                                 
                                 ∈
                                 
                                    {
                                    0
                                    ,
                                    1
                                    }
                                 
                                 
                                 ∀
                                 
                                 i
                                 ∈
                                 E
                                 ,
                                 j
                                 ∈
                                 T
                              
                           
                        
                     
                  

The objective function (25) minimises the number of employees. Constraints (26) are the coverage requirements. Constraints (27) limit the number of days worked. Constraints (28) and (29) are the minimum and maximum number of consecutive days worked, respectively. Constraints (30) and (31) are the minimum and maximum number of consecutive days-off, respectively. Constraints (32) require the decision variables to be either zero or one.


                     Brunner et al. (2013) proved that problem 
                        
                           P
                           6
                        
                      is NP-complete by showing that it has the circulant problem as a special case. Removing all constraints regarding consecutive assignments reduces the problem of finding a feasible solution for 
                        
                           P
                           6
                        
                      to the problem of finding a feasible flow in network G
                     1. The lower bound on the flow in the arcs from employee nodes to the sink node needs to be set to zero, the upper bound should be set to 
                        
                           
                              D
                              ¯
                           
                           work
                        
                     .

The following corollary is an immediate consequence of Lemmas 1 and 2.

                        Corollary 3
                        
                           A feasible solution for problem
                           
                              
                                 P
                                 6
                              
                            
                           without ranged constraints on the number of consecutive days worked and days-off can be found in polynomial time.
                        

Limiting the number of consecutive days worked and days-off thus makes the problem hard. Consequently, almost all problems in practice are hard.

As was discussed in Section 4.1, the pairwise disjoint incompatible days constraint strongly resembles the constraint on the maximum number of consecutive working days. To strengthen Corollary 3, the same obstacle holds as was discussed in Section 4.1. Satisfaction of the maximum number of consecutive working days constraint cannot be guaranteed without the possibility of modelling a constraint on non-disjoint incompatible days in network G
                     4.

The present paper systematically studied the complexity of personnel rostering problems, thereby further establishing the foundations for theoretical studies on models for rostering. By presenting transformations of different problems to minimum cost network flow problems, new cases were identified that can be solved in polynomial time. Specifically, decision and optimisation problems were reformulated with multiple shifts, varying demand, and constraints on the number of days worked, employees’ domains and incompatible days.

Previously published complexity proofs were discussed in the light of these new results, and, as a result, a boundary between tractable and intractable personnel rostering problems was established. The new results show that for both counter constraints and succession constraints, the difference between easy and hard problems corresponds to defining constraints on day-level or on shift-level. These insights not only allow decision makers to reconsider the formulation of their problem, as it could mean making the problem computationally tractable, but also provide efficient approaches toward solving subproblems arising from decomposition.

The new contributions could be relevant outside personnel rostering as well, since the studied constraints also appear in other settings, mainly involving assignments of some type. In other personnel scheduling problems, tasks are assigned to workers, often subject to constraints on task changes (Ernst, Jiang, Krishnamoorthy, & Sier, 2004). In high school timetabling, the workload of a resource, e.g. student, teacher or room, is typically restricted by a minimum and maximum value (Post et al., 2012).

Future research should turn its attention toward problems with generalised constraints, e.g. restrictions on consecutive assignments, weekends. Models with such intricate constraints, can possibly no longer be transformed to the presented minimum cost flow problems.

@&#REFERENCES@&#

