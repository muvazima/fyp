@&#MAIN-TITLE@&#A long-haul freight transportation problem: Synchronizing resources to deliver requests passing through multiple transshipment locations

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We propose a new model for a real-world long-haul freight transportation problem.


                        
                        
                           
                           The model solves problems with requests owing through multiple transshipment points.


                        
                        
                           
                           We propose a matheuristic based on a relax-and-


                           x scheme that outperforms CPLEX.


                        
                        
                           
                           A case-study is solved with real-world instances of a Portuguese logistics operator.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Transportation

Tractor-and-trailer

Resource synchronization

Fix-and-optimize

Case-study

@&#ABSTRACT@&#


               
               
                  This research aims at tackling a real-world long-haul freight transportation problem where tractors are allowed to exchange semi-trailers through several transshipment points until a request reaches its destiny. The unique characteristics of the considered logistics network allow for providing long-haul services by means of short-haul jobs, drastically reducing empty truck journeys. A greater flexibility is achieved with faster responses. Furthermore, the planning goals as well as the nature of the considered trips led to the definition of a new problem, the long-haul freight transportation problem with multiple transshipment locations. A novel mathematical formulation is developed to ensure resource synchronization while including realistic features, which are commonly found separately in the literature. Considering the complexity and dimension of this routing and scheduling problem, a mathematical programming heuristic (matheuristic) is developed with the objective of obtaining good quality solutions in a reasonable amount of time, considering the logistics business context. We provide a comparison between the results obtained for 79 real-world instances. The developed solution method is now the basis of a decision support system of a Portuguese logistics operator (LO).
               
            

@&#INTRODUCTION@&#

Setting an efficient and flexible logistics network and defining its planning and operational processes is one of the most complex challenges one can find in the transportation sector. In the last two decades, we have witnessed a considerable effort towards the creation of a new generation of transportation systems (Crainic, Gendreau, & Potvin, 2009) which have to fit the value proposals of each company, focusing on distinct strengths such as quality, speed, reliability or cost.

Recently, cost pressures fostered a modification in the logistics paradigm and transshipment points are being deployed for long-haul freight transportation, introducing more flexibility into logistics networks. Usually, LO find different solutions for the challenges imposed by long distance trips, such as using more than one driver per vehicle. However, adopting a transshipment-based distribution process may be truly advantageous.

From a global point of view, the transportation network becomes much more flexible as it provides additional possibilities to perform the transportation of freight. Since the tasks assigned to each resource are much shorter, points in time when a resource becomes available can be rationally spread along the entire area occupied by the customers and will happen more frequently. In what concerns real-world cases, knowing that the variance of the planning variables may drastically affect timings, this is an advantage to ensure the execution of a transportation plan. In fact, this flexibility will be reflected in an increment of the service level as the network offers more solutions per unit of time. Furthermore, this flexibility not only accounts for the aforesaid facts, but also may yield solutions with less and shorter empty truck paths, which are a major concern among LO.

Logically, these advantages come at a cost. On one hand, the complexity of a planning problem considering transshipment points is much larger. On the other hand, the operational complexity at each facility is also likely to increase due to the difficulties imposed by the need to synchronize resources. This also means that it is extremely difficult to obtain a feasible solution manually.

In this research we develop a systematic approach on top of a real transportation network that has both the intermediate facilities and the human expertise to perform transshipment operations. Since in Mitrovic-Minic and Laporte (2006) the authors state that transshipment points have shown to be very useful in clustered instances (typical found in long-haul transportation) and that the advantages of using those nodes increases with problem size (real-world instances are large), we consider that our challenge is a valuable research topic.

In order to provide an example of the aforementioned networks and context, Fig. 1
                      is shown. In this novel problem, a set of tractors (Fig. 2
                     a) is located in each depot and the objective is to pickup requests from a certain location and deliver them to other locations. A request consists in the transportation of an entire semi-trailer (Fig. 2b) and thus, considering that each tractor can only pull one semi-trailer at a time, we are in the presence of a full truckload case. Whenever a customer submits a request, both a pickup and a deliver time-window have to be defined, meaning that loading and unloading operations have to occur during those intervals. It is also possible to request each operation to be made in different days and for that reason, semi-trailers can be temporarily stored in a transshipment location (note that every depot also has a transshipment location). Additionally, a service to be provided by a tractor can only occur during the period in which its base depot is opened. Tractors can only travel inside their reach radius which is defined by the maximum number of hours that drivers are allowed to work.

This real-world challenge includes a combination of conditions that are rare in the literature.

Firstly, in consideration of the company’s desire to maintain a certain level of comfort among its drivers, the maximum working time (including driving and other activities) is assumed to be 9 hours. Note that tractors are obliged to return to their base depot in the end of a workday. Therefore, drivers have a limited reach radius of approximately 4.5 hours which clusters the customers around each depot. In sum, we may assume that policies found in short-haul transportation activities are preferred.

Secondly, since drivers are confined to a limited region around their base depot, the necessity of executing multiple transshipments with the same request may be imposed in some services. Thus, in order to provide long-haul services by means of short-haul jobs, the company allows for the possibility of performing transshipments at certain locations. In fact, different regions may only communicate in these locations where two vehicles are able to exchange freight. This is strictly necessary, otherwise it would not be possible to send requests between every combination of sender/receiver, while ensuring compliance with the law and with the policies of the company. It is now clear that if a request is to be picked in the zone of a certain depot and to be delivered in the zone of another depot, it is mandatory that at least one transshipment is going to happen. Additionally, a transfer is only possible if the compatibility between tractors and semi-trailers is assured (the terms “transfer” and “transshipment” are used interchangeably in this paper).

Thirdly, tractors are only able to leave a certain depot if they are to return pulling a semi-trailer, meaning that the delivery of a request must always be paired with the pickup of another request in the same trip (throughout the paper we use the term path to describe the movement of a vehicle from one location to another and the term trip to refer to a set of paths performed by a vehicle). Specifically, a tractor is not allowed both to leave or to arrive at its base depot without pulling a semi-trailer. In fact, if this condition is verified in every trip, the distance travelled without pulling semi-trailers will be minimized since the only possibility to execute such trips is reserved to the case when a tractor travels from an unloading location to a loading location. In reality, if the truck unloads a semi-trailer and picks another semi-trailer in the same location (despite being represented by different nodes), trips including empty truck paths can be fully extinguished from the transportation plans emerging from this pairing strategy. Additionally, there is no room for complex itineraries because most of the requests have different pickup and delivery zones, meaning that the semi-trailers will most likely be transported directly from their initial location to a depot or between depots before reaching their final destination.

Lastly, given the latter conditions, one may conclude that in long-haul requests there is a portion of the total journey to be crossed by the request that is defined a priori, specifically, the depots through which the request has to pass in order to be moved from one zone to another are known in advance. The necessary transshipment, pickup and delivery paths are defined in the moment a request is posted. Therefore, the objective of minimizing the travelled distance was not considered to be critical when analyzing movements between zones. However, if a tractor unloads a semi-trailer in a certain location and has to return without pulling a semi-trailer, an empty truck path is incurred. Since these empty truck paths are undesirable among the transportation sector, although they are essential to continuing operations as stated by Crainic (1998), the company decided to follow the strategy of maximizing the number of pairings which are the trips where a tractor delivers and picks a semi-trailer. Although this pairing maximization objective is not the most common, if we consider that the arcs to be traversed are roughly defined in the beginning of the planning phase, we conclude that the routing part is not the main concern of this problem and thus it is admissible not to focus the attention in the objective of minimizing the travelled distance. Still, one does not have an idea of the exact moment when the trips are to be executed and the tractor that will execute them. Additionally, in requests with pickup and delivery time-windows to be made in different days, a minimum number of transfers must be accomplished in order to ensure that a feasible solution exists in the future. This is due to the fact that the length of the considered planning horizon may be shorter than the difference between the pickup and delivery time-windows of a given request.

To the best of our knowledge such conditions were never addressed in a systematic manner before. Furthermore, being motivated by a real-world case, this research has to consider practical aspects which confer an additional complexity to the planning problem that hampers the computation of a feasible solution manually, even for planners with years of experience. We developed a novel mathematical formulation which models transshipment locations based on the approach presented by Cortés, Matamala, and Contardo (2010). In order to address the necessary practicalities of the real-world problem, some enhancements had to be made resulting in a more complex formulation, which is only capable of solving small instances. Aiming at the resolution of larger instances and with the objective of obtaining better quality solutions in a reasonable amount of time, a matheuristic was developed in order to iteratively decompose the set of integer variables in the original MIP and explore simpler sub-problems.

The remainder of this paper is as follows. In Section 2, a literature review of problems with similar features is performed. The problem description is detailed in Section 3. In Section 4, the novel mathematical formulation capable of producing real-world applicable solutions is introduced. Section 5, is devoted to the proposed solution method and Section 6 reports numerical experiments that were performed on real-world instances. Finally, in Section 7, the paper summarizes the main achievements and future works that may arise from this research.

@&#LITERATURE REVIEW@&#

Since its introduction by Dantzig and Ramser (1959), the research community has been studying extensively different vehicle routing problem (VRP) variants and applications. Expectedly, the complexity of the addressed challenges also suffered a massive increase since the value of the optimization techniques captured the interest of most competitive LO. In addition, the computational power that is available nowadays enables the scientific community to further develop new mathematical models as well as the necessary methods to solve them. This remarkable and logical evolution is described by Laporte (2009).

Regarding the VRP variants, this paper is devoted to a practical application that is mainly similar to the pickup and delivery vehicle routing problem(PDVRP), which was introduced by Dumas, Desrosiers, and Soumis (1991). In the PDVRP vehicles have to pickup goods from one location and deliver them to another location. This variant is considered to be the most flexible routing problem and its applicability to real-world problems, which has sparked an enormous interest among companies, is motivating the introduction of novel features. The reader is invited to explore the surveys made by Mitrovic-Minic (1998), Parragh, Doerner, and Hartl (2008a), Parragh, Doerner, and Hartl (2008b), Berbeglia, Cordeau, Gribkovskaia, and Laporte (2007) and Berbeglia, Cordeau, and Laporte (2010) in order to obtain an overview of the principal paradigms that rule pickup and delivery problems. Considering the characteristics presented in the previous section, the interest of this paper also goes to problems including transshipment activities and using tractors and semi-trailers to perform deliveries. In order to capture important aspects about these features we studied the truck and trailer routing problem (TTRP), which allows for a different kind of transshipment where vehicles can park trailers and reload the truck, to study cases where the trailer may be separated from the rest of the vehicle. We also studied pickup and delivery problems (PDP) as our challenge includes loading and unloading operations at different locations. Since some semi-trailers are stored at depots for later consideration, we consider that it is also important to review the literature on vehicle routing problems with backhauls (VRPB). Additionally, we review some rollon-rollon vehicle routing problems(RRVRP) because, similarly to our case, it is common to model different trip types to enable vehicles to perform their activities correctly. Finally, given that we consider full truckloads, precedence constraints and multiple time-windows, some papers about these topics are also reviewed. None of these problems includes all the features addressed in our problem, nevertheless they share important points. To clarify our positioning, we define our problem as a full truckload a pickup and delivery problem with trailers and multiple transshipped requests (FT-PDPTmTR).

Most of the literature dealing with trailers is concerned with the TTRP (trailers are not exchanged). Villegas, Prins, Prodhon, Medaglia, and Velasco (2010) present a GRASP/VND and multi-start evolutionary local search for the TTRP. Although there is the possibility of detaching the trailer, the authors only address the single-vehicle case which is a significant simplification compared to the objective of this paper. Additionally, the goods are located at the depot eliminating the necessity of picking them up. In Villegas, Prins, Prodhon, Medaglia, and Velasco (2011), the authors propose a GRASP with evolutionary path relinking. Although they consider an heterogeneous fleet, the truck and trailer concept is only used to respect the accessibility constraints showed by some customers. Therefore, each vehicle needs to leave the trailer in a designated location and has the possibility of delivering goods and picking up more goods from the parked trailer. Drexl (2011) consider variable and fixed costs for trailers, time-windows and pure transshipment locations simultaneously. The author tests his branch-and-price and heuristic column generation approaches on randomly generated instances structured to resemble real-world situations and TTRP benchmark instances from the literature. The results show that with a heuristic column generation approach, real-world general TTRP instances can be solved in short time with high solution quality. However, the results for the benchmark instances are not so successful due to the low ratio of customer supplies to vehicle capacity in these instances. Recently, Derigs, Pullmann, and Vogel (2013b) develops some simple heuristics that are able to compete with complex approaches from the literature. The heuristic is capable of solving TTRPs with/without load transfer as well as with/without time-windows. Additionally, the author considers the benchmark instances to be unrealistic since they do not include real-world features such as coupling and un-coupling costs and time consumption. Villegas, Prins, Prodhon, Medaglia, and Velasco (2013) also tackle the same problem by means of a matheuristic that uses the routes of the local optima of a hybrid GRASP/ILS as columns in a set-partitioning formulation. This approach outperforms state-of-the-art methods both in terms of solution quality and computing time. The authors also present a table summarizing the most relevant approaches to the TTRP, providing a short description of the problem along with the proposed solution methods. Prodhon and Prins (2014) present a section dedicated to the TTRP which provides a very good overview of recent approaches to this problem. Considering the papers cited in the latter survey, it is clear that this type of problem contains features that are quite similar to our challenge. Although using the same acronym, TTRP, Derigs, Kurowsky, and Vogel (2011) tackle a slightly different problem which is the tractor and trailer routing problem. In this problem, vehicles are not allowed to transport load without a trailer. The authors study a real-world situation in which EU-Regulations and compatibilities between trips and trailers have to be taken into consideration. The authors clearly state that this problem has not been studied neither in literature nor from a practical point of view. Analyzing the aforementioned papers, it is necessary to point out that none of them considers the possibility of picking up requests from one customer and delivering them to another customer. Indeed, vehicles are only allowed to pick up additional load from their parked trailers which is something that does not happen in our case. Furthermore, their concept of transshipment is completely different from the one that is of interest for this paper in which two tractors may have the possibility of exchanging trailers. Although these problems are slightly different from ours, they include the main aspects regarding the binomen tractor/trailer that is found in the challenge to be addressed. In a recent survey concerning the applications of the VRPTT, an extension where trailers may be exchanged between vehicles, Drexl (2013) makes a reference to the pickup and delivery problem with trailers and transshipments (PDPTT). This problem seems quite similar to ours as it includes pickup and delivery operations, trailers and transshipments. Drexl, which is the only one mentioning this pickup and delivery problem type, states that when transshipments are allowed, the set of vehicle routes of a solution is no longer sufficient to describe the path taken by each request. Drexl (2007) also refers the difficulty of considering complex synchronization requirements at transshipment locations. In fact, the necessity of assuring that a specific set of resources is at a certain place in a given time is something extremely challenging, specially because it influences a considerable portion of the surrounding variables. Although Drexl considers that such problems constitute a promising application for VRPTT, we were not able to find a single application or paper devoted to this version of the pickup and delivery problem which is, in fact, quite similar to the problem we aim to solve (except for the multi-transshipment flow of requests). In order to better understand the main features in which the aforementioned references are related to our problem, we provide Table 1
                        .

On the subject of the pickup and delivery problem without considering trailers or semi-trailers, only a few papers addressed transshipments. Note that this transshipment concept assumes that there is an exchange of load between different vehicles, which in our case may be a swap of the entire semi-trailer between two tractors. One of the problems which makes use of this transshipment concept is the dial-a-ride problem. This problem is concerned with the transportation of people from one place to another and is tackled by Cortés et al. (2010) with a formulation of the transshipment nodes where people have the possibility to change from one vehicle to another. The problem is described with a mathematical formulation and solved by means of a branch-and-cut method. Mitrovic-Minic and Laporte (2006) address a pickup and delivery problem with time-windows allowing for the exchange of loads between vehicles. The main reasoning behind this transfer opportunity lies in the idea of keeping the drivers near their domicile, which is something quite similar to the depot zones considered in our case. A heuristic procedure is presented and tested in small instances with the objective of proving the utility of performing transshipments. Similarly, Qu and Bard (2012) tackle the pickup and delivery problem with transshipments with an implementation of a GRASP with adaptive large neighborhood search (ALNS). Considering the previous three approaches, their main drawback is related to the number of requests that each can address. Indeed, this continues to be the greatest disadvantage of formulations and solutions methods to solve transportation problems with transshipments. When considering problems with less features such as the pickup and delivery problem with time-windows (PDPTW), researchers are able to obtain good results in larger instances. Masson, Lehuédé, and Péton (2013b) develop an efficient feasibility test for inserting requests in pickup and delivery problems with transfers. Since requests are strongly interdependent due to the transshipment option, heuristic operators may constantly introduce infeasibilities which need to be detected and eliminated. The authors achieve a constant time feasibility checker which is based on the forward time slack principle presented in (Savelsbergh, 1992). This feasibility checking procedure is later extended by Grangier, Gendreau, Lehuédé, and Rousseau (2014) to be faster when tackling their problem. Masson, Lehuédé, and Péton (2013a) implement an ALNS for the PDP with transfers introducing new neighborhood operators. The algorithm improves the results obtained in (Mitrovic-Minic & Laporte, 2006). When the PDP deals with people, it is called the Dial-a-Ride problem. Masson, Lehuédé, and Péton (2014) tackle a Dial-a-Ride problem where vehicles have to pickup and deliver people who have the possibility of changing vehicles in the middle of a trip. A large neighborhood search algorithm solves real-life and generated instances, obtaining savings of up to 8 percent due to the use of transfers. The reader is also referred to the work of Dumas et al. (1991), Nanry and Wesley Barnes (2000), Bent and Hentenryck (2006), Ropke and Pisinger (2006a) and Liu, Xie, Augusto, and Rodriguez (2013) for an overall perspective of the existent solutions for this type of problems. Heuristic methods have been the most successful. A comparison between these PDPs and our problem is presented in Table 2
                        
                        .

Since backhauls are a necessity arising from the fact that certain requests may not be satisfied during the considered planning horizon (1 day in our case), it is worth referring some works related to the vehicle routing problem with backhauls (VRPB). The concept of pickup and delivery with backhauls is not common in the literature. In our case, requests may return to a depot, perform several inter-depot trips and be sent from a depot to the linehaul customer (final destination). However, if the requests are not able to reach its destination within the given planning horizon, we consider that a backhaul is incurred and the request has to be considered in the next planning horizon. Generally, we can only find vehicle routing problems with backhauls (not pickup and delivery problems) because the customers who demand a pickup want only to send something back to one of the depots, that is, once the load enters a depot it stays there. In order to obtain some insights on this type of feature, the reader is referred to the papers of Duhamel, Potvin, and Rousseau (1997), Toth and Vigo (1997), Zhong and Cole (2005), Ropke and Pisinger (2006b) and Liu and Chung (2008).

There is still a class of problems which shares several characteristics our problem: the rollon-rolloff vehicle routing problem (RRVRP). In the RRVRP, tractors move large trailers between locations and a disposal facility. Bodin and Mingozzi (2000) address this problem providing a mathematical programming formulation, two lower bounds and four heuristic algorithms, testing the results on 20 different problems. The authors modeled 4 trip types in a problem with one depot and one disposal facility which did not include time-windows on the servicing of the trailer. A multiple disposal facilities with multiple depots (inventory locations) version is considered by Baldacci, Bodin, and Mingozzi (2006). The authors model the RRVRP as a time constrained vehicle routing problem on a multigraph. They describe an exact method based on a set-partitioning formulation. Recently, interesting hybridizations and heuristic procedures are also presented for the RRVRP by Derigs, Pullmann, and Vogel (2013a), Wy and Kim (2013) and Wy, Kim, and Kim (2013). The main objectives of the research community when considering the RRVRP are to include new real-world constraints and to solve larger instances in an efficient manner. Likewise, since our attention goes for a real application, solving large and realistic instances is one of our first priorities.


                        Table 3 gives an overview of the similarities between the cited VRPBs and RRVRPs and our challenge.

Most of the referenced papers deal with less-than-truckload requests as opposed to the problem we aim to solve. Considering this fact, our research also included problems where containers need to be moved from one point to another. Zhang, Yun, and Kopfer (2010) tackle a truck scheduling problem for container transportation with multiple depots and multiple terminals including containers as a resource. Four types of movements are used to describe different transportation activities and the objective is to reduce the total operating time of the fleet.A mathematical model is presented being addressed as a multiple travelling salesman problem with time-windows. In Zhang, Yun, and Moon (2011), a container drayage problem with resource constraints is studied. Although drayage operations are usually short-haulage container transportation between terminals and shippers/receivers, some of the its challenges are also found in our problem. The authors state that the problem becomes extremely complicated when different resources are regarded separately. The problem is described as a multiple traveling salesman problem with time-windows and additional constraints are tackled with a meta-heuristic based on reactive tabu-search. Arunapuram, Mathur, and Solow (2003) develop a branch-and-bound for solving an integer-programming formulation of a VRP with full truckloads. The algorithm takes into consideration time-window constraints and waiting costs. This problem is simpler than ours since it does not include transfers. The work-flow in container transportation is also analyzed by Chung, Seong, Young, and Hwang (2007). The authors develop mathematical models integrating the operating and design characteristics of containers. Additionally they present heuristic algorithms to solve the models and report an example problem in order to explain how to apply the models to real world cases. Imai, Nishimura, and Current (2007) address a VRP that arises in picking up and delivering full container loads transporting them between intermodal terminals. Substantial cost and time savings are expected arising from an efficient linkage between pickup and delivery tasks taking into account temporal constraints. A two sub-problem heuristic is developed in which the classical assignment problem and the generalized assignment problem are solved. Considering these full truckload articles, we notice that none of them could address every aspect contained in the challenge we aim to solve. Having requests flowing through multiple transshipment locations augments the complexity of our full truck load routing problem and to the best of our knowledge this is the first the time that such problem is addressed.

One of the most distinctive characteristics of the problem we aim to solve is the necessity to meet precedence constraints. This is due to the sequence of moves that each requests has to perform. These request moves may be seen as activities which need resources that may be available or not in a certain moment, the vehicles. In Schmid, Doerner, Hartl, Savelsbergh, and Stoecher (2009), the authors effectively integrated optimization and heuristic techniques in order to solve a ready-mixed concrete delivery problem which includes several constraints that impose precedence between events. For example, some orders require vehicles with special equipment to be present for the delivery of concrete, something that requires a synchronization between resources. Moreover, some vehicles need to arrive first and remain at construction sites until the complete order has been fulfilled as they have some tools that are necessary during the entire process. Interesting modeling techniques were applied in order to ensure the applicability of the model to a real world problem.

This last subsection is concerned with the concept of multiple time-windows. Although few papers were found addressing this feature, in real-world problems this is frequent since it is difficult to maintain a steady availability particularly during work peaks or lunch time, for example. In Tricoire, Romauch, Doerner, and Hartl (2010), the multi-period orienteering problem with multiple time-windows (MuPOPTW) is presented as a new routing problem combining objective and constraints of the orienteering problem (OP) and team orienteering problem (TOP), standard VRPs, and the original constraints form a real-world application. In this problem, sales representatives have to visit customers on a regular basis in certain periods. Customers may have up to two different time-windows per day. The authors develop an exact algorithm to check route feasibility and solve some instances using an efficient variable neighborhood search algorithm. Doerner, Gronalt, Hartl, Kiechle, and Reimann (2008) develop a model and several heuristic procedures to solve a problem motivated by a project carried out with the Austrian Red Cross which demands blood pickup services in certain periods of the planning horizon. A mathematical model for the VRP with multiple time-windows is presented by Bitao and Fei (2010). The authors tackle the problem with a hybrid algorithm which combines the ant colony system with 2-opt, a cell algorithm and a mutation operator. The proposed algorithm shows very good performance in terms of solution quality and robustness. This problem is also addressed by Belhaiza, Hansen, and Laporte (2013) in an implementation of a hybrid variable neighborhood search-tabu search heuristic. Additionally, a minimum backward time slack algorithm is developed.

Finally, for the latter 3 subsections, we present an analogy between the considered references and the problem that is tackled in this paper (Table 4
                        ).

In this section we describe the full truckload pickup and delivery problem with trailers and multiple transshipped requests (FT-PDPTmTR). We consider a planning horizon of one to two days. Some requests may need to be considered in more than one planning iteration, as their pickup and delivery time windows can be separated by more than two days.


                        
                           
                              
                                 Requests The main objective of this challenging problem is to serve a set 
                                    
                                       R
                                       =
                                       {
                                       1
                                       ,
                                       
                                       …
                                       
                                       ,
                                       |
                                       R
                                       |
                                       }
                                    
                                  of customers’ requests for transporting semi-trailers from one point to another. A request r is defined by two nodes, 
                                    
                                       r
                                       +
                                    
                                  and 
                                    
                                       
                                          r
                                          −
                                       
                                       ,
                                    
                                  corresponding to pickup and delivery destinations, respectively. Also, denote the set of pickup nodes by 
                                    
                                       P
                                       =
                                       {
                                       
                                          1
                                          +
                                       
                                       ,
                                       …
                                       
                                       ,
                                       
                                          r
                                          +
                                       
                                       }
                                    
                                  and the set of delivery nodes by 
                                    
                                       D
                                       =
                                       {
                                       
                                          1
                                          −
                                       
                                       ,
                                       …
                                       
                                       ,
                                       
                                          r
                                          −
                                       
                                       }
                                    
                                 . The union between these two sets, 
                                    
                                       N
                                       =
                                       P
                                       ∪
                                       D
                                       ,
                                    
                                  includes all the nodes where loading or unloading operations are to be made, i.e., customer sites. Another specification of each request is related to the moments when the deliveries may be executed. Customers are allowed to define multiple time windows l for each node i ∈ N, with limits denoted by [ail, bil
                                 ], within which the picking and delivering operations can be executed. Additionally, in each planning horizon it is necessary to define a minimum number of moves that a request has to perform in order to ensure that it can be delivered in time. For instance, if the pickup and delivery time-windows of a certain request are separated by three days and it needs to perform three one-day trips, it will be obliged to perform one trip per day, otherwise it will not reach its final destination in time.


                                 Trips and paths The requests are to be transported by tractors, actually, semi-trailers need to be pulled by a tractor. Thus, in each planning horizon, tractors have to perform a set of trips 
                                    
                                       K
                                       =
                                       {
                                       1
                                       ,
                                       …
                                       
                                       ,
                                       |
                                       K
                                       |
                                       }
                                    
                                 . Each trip k comprises several paths where a tractor leaves the depot and returns to the same depot.


                                 Transportation network Each tractor is assigned to one of the base depots 
                                    
                                       s
                                       ∈
                                       S
                                       =
                                       {
                                       1
                                       ,
                                       …
                                       
                                       ,
                                       |
                                       S
                                       |
                                       }
                                    
                                  considered in the planning horizon. A depot is defined by two nodes, 
                                    
                                       s
                                       +
                                    
                                  and 
                                    
                                       
                                          s
                                          −
                                       
                                       ,
                                    
                                  corresponding to starting and finishing nodes, and it has a time window [ans, bns
                                 ] indicating the period during which it is opened. The set of starting nodes is 
                                    
                                       I
                                       =
                                       {
                                       
                                          1
                                          +
                                       
                                       ,
                                       …
                                       
                                       ,
                                       
                                          s
                                          +
                                       
                                       }
                                    
                                  and the set of finishing nodes is denoted by 
                                    
                                       F
                                       =
                                       {
                                       
                                          1
                                          −
                                       
                                       ,
                                       …
                                       
                                       ,
                                       
                                          s
                                          −
                                       
                                       }
                                    
                                 . The union between these two sets, I ∪ F, is W. Regarding transshipment locations, they are represented using four nodes, tus, tuf, tls
                                  and tlf
                                 . We define a set of upper start transfer nodes 
                                    
                                       
                                          T
                                          
                                             u
                                             s
                                          
                                       
                                       =
                                       
                                          {
                                          
                                             1
                                             
                                                u
                                                s
                                             
                                          
                                          ,
                                          …
                                          
                                          ,
                                          
                                             t
                                             
                                                u
                                                s
                                             
                                          
                                          }
                                       
                                       ,
                                    
                                  a set of upper finish transfer nodes 
                                    
                                       
                                          T
                                          
                                             u
                                             f
                                          
                                       
                                       =
                                       
                                          {
                                          
                                             1
                                             
                                                u
                                                f
                                             
                                          
                                          ,
                                          …
                                          
                                          ,
                                          
                                             t
                                             
                                                u
                                                f
                                             
                                          
                                          }
                                       
                                       ,
                                    
                                  a set of lower start transfer nodes 
                                    
                                       
                                          T
                                          
                                             l
                                             s
                                          
                                       
                                       =
                                       
                                          {
                                          
                                             1
                                             
                                                l
                                                s
                                             
                                          
                                          ,
                                          …
                                          
                                          ,
                                          
                                             t
                                             
                                                l
                                                s
                                             
                                          
                                          }
                                       
                                    
                                  and a set of lower finish transfer nodes 
                                    
                                       
                                          T
                                          
                                             l
                                             f
                                          
                                       
                                       =
                                       
                                          {
                                          
                                             1
                                             
                                                l
                                                f
                                             
                                          
                                          ,
                                          …
                                          
                                          ,
                                          
                                             t
                                             
                                                l
                                                f
                                             
                                          
                                          }
                                       
                                    
                                 . The entire set of transfer nodes, which defines a transshipment location, is the union 
                                    
                                       T
                                       =
                                       
                                          T
                                          
                                             u
                                             s
                                          
                                       
                                       ∪
                                       
                                          T
                                          
                                             u
                                             f
                                          
                                       
                                       ∪
                                       
                                          T
                                          
                                             l
                                             s
                                          
                                       
                                       ∪
                                       
                                          T
                                          
                                             l
                                             f
                                          
                                       
                                    
                                 . The relevance of the four sets of transfer nodes will be clarified in Section 4. Generally, these nodes are positioned on the same exact location of depots although this is not mandatory, meaning that transshipment locations can be defined in other places, rather than depots. These locations are only able to store semi-trailers as opposed to depots where tractors can also be parked. In Fig. 3
                                 , the nodes of a depot with a transshipment location are depicted.

Each trip k has a specific set 
                                    
                                       
                                          N
                                          k
                                       
                                       =
                                       
                                          P
                                          k
                                       
                                       ∪
                                       
                                          D
                                          k
                                       
                                       ,
                                    
                                 
                                 
                                    
                                       
                                          W
                                          k
                                       
                                       =
                                       
                                          I
                                          k
                                       
                                       ∪
                                       
                                          F
                                          k
                                       
                                    
                                  and 
                                    
                                       
                                          T
                                          k
                                       
                                       =
                                       
                                          T
                                          k
                                          
                                             u
                                             s
                                          
                                       
                                       ∪
                                       
                                          T
                                          k
                                          
                                             u
                                             f
                                          
                                       
                                       ∪
                                       
                                          T
                                          k
                                          
                                             l
                                             s
                                          
                                       
                                       ∪
                                       
                                          T
                                          k
                                          
                                             l
                                             f
                                          
                                       
                                    
                                 . Given so, we define a network 
                                    
                                       
                                          G
                                          k
                                       
                                       =
                                       
                                          (
                                          
                                             V
                                             k
                                          
                                          ,
                                          
                                             A
                                             k
                                          
                                          )
                                       
                                    
                                  for each trip. The set 
                                    
                                       
                                          V
                                          k
                                       
                                       =
                                       
                                          N
                                          k
                                       
                                       ∪
                                       
                                          W
                                          k
                                       
                                       ∪
                                       
                                          T
                                          k
                                       
                                    
                                  includes all the reachable pickup and delivery nodes, the origin and sink nodes and the necessary transshipment nodes. The set of arcs Ak
                                  is obtained in a pre-processing procedure that is described in Section 3.5. Travel times and distances between two different nodes i, j ∈ Ak
                                 , are considered to be identical for every trip and are denoted by ttij
                                  and tdij
                                 , respectively.

One of the most distinctive features of this problem is related to the pairing objective that was mentioned previously. Indeed, this objective demands a different mindset when solving transportation problems. In our problem it is not necessary to serve all the customers in a certain planning horizon and the travel distance is not taken into account. Note that after imposing that a tractor can only leave and enter a depot while pulling a semi-trailer, a single trip will always move at least two requests, otherwise it cannot be executed. Considering that the itinerary to be crossed by each request is roughly defined a priori (as we know the depots and transshipment locations through which it will pass), every move that is accomplished means that we are closer to deliver a pair of requests. Provided that the company is not able to deliver all the requests in one planning iteration, we choose to maximize the number trips moving pairs of requests (pairings) as a proxy to the number of requests that we will be able to service in future planning iterations. Hence, maximizing the number of pairings turns to be logical in this case as the company wants to deliver the maximum number of requests. The greatest challenge of this planning problem is to synchronize all the resources while ensuring the accomplishment of the requested services.

The pairing objective cuts several possibilities regarding path combinations. In order to describe the possible trips to be performed in this transportation problem, we assume that there exists a stock of semi-trailers in each depot, otherwise tractors would not be allowed to initiate a trip. Given so, a vehicle is allowed to execute one out of three existing trip types:

                           
                              
                                 Zone trips A vehicle delivers a request to an unloading location, picks up a different request from a location inside the same zone and returns to the starting point (Fig. 4a). Zone trips are suitable to finish a delivering of a request (since the vehicle leaves the depot to an unloading location) and to start a long-haul service (since the vehicle returns to the depot pulling a semi-trailer).


                                 Depot trips A vehicle delivers a semi-trailer to a depot or transshipment location and returns pulling a semi-trailer of another request (Fig. 4b). Depot trips allow for a transportation between zones, something that is mandatory in this problem as the reach of one vehicle would not be sufficient to provide long-haul services. These trips are defined a priori minimizing the distance to go from one zone to another.


                                 Mixed trips A vehicle delivers a request to an unloading location, picks up another request from a different depot or transshipment location and returns to the starting point (Fig. 4c). Mixed trips also support the transportation of freight between zones and are specially advisable in situations where the loading point is in between two depots. Some gains are achieved since the freight always travels in direction to its delivering point.

These three types of trips are flexible enough to provide the service that a long-haul transportation network is supposed to offer. Although we present the most basic trip type possibilities, some variants may also be applied. Analyzing the moves represented in Fig. 4, one concludes that tractors are always pulling a semi-trailer both when they leave and when they arrive at a depot or a transshipment location. In sum, whenever a vehicle delivers a request, it has to pickup another one before returning to its starting point.

Considering the definition of request in this problem, it is not possible to split the contents of a given semi-trailer. Accordingly, whenever a semi-trailer needs to be transported between different zones, a transfer must be executed in a location reachable by the involved zones. Transshipment locations are then necessary not only to park semi-trailers but also to provide transfers. Fig. 5
                         shows an example of a transfer between two tractors and a semi-trailer that was already in the transshipment location.

In terms of nodes, in order to allow multiple transshipments in a given transfer point for the same vehicle, transfer operations have to follow some rules which are the main reason to have four nodes representing a transshipment location. Transfers may occur in each of the three trip types that have been presented before. In the following examples we consider depots that are also transshipments locations.

In order to perform a zone trip (Fig. 6
                        ), a tractor needs to leave its source node 
                           
                              s
                              +
                           
                         to load a semi-trailer in an upper starting transfer node tus
                        . When the tractor leaves this node in direction of its finishing transfer node tuf
                        , it incurs in a service time st. In the next moves, the tractor delivers the semi-trailer to a customer and loads another semi-trailer which is returned when it enters the lower starting transfer node tls
                        . The tractor unloads the semi-trailer and returns to its sink node 
                           
                              s
                              −
                           
                        .

In case a depot trip is to be executed (Fig. 7
                        ), a tractor initiates at a starting node 
                           
                              s
                              +
                           
                         which is located at its base depot w
                        1. After initiating the trip, the tractor loads a semi-trailer at the upper starting transfer node fus
                         and incurs in a service time st during its fictitious path to the upper finishing transfer node tuf
                        . After loading the semi-trailer, the tractor pulls it to depot w
                        2 and unloads it after reaching the lower starting transfer node tls
                        . Given that the considered tractor does not belong to depot w
                        2, it needs to load another semi-trailer at the lower finishing transfer node tlf
                         in order to return to its base depot. The moment it arrives to its base depot, the tractor enters the node tls
                         to unload the semi-trailer that it picked from w
                        2. Another service time st is incurred in the fictitious path to tlf
                         and, because it is in its base depot, the tractor has to finish its trip in the finishing node 
                           
                              s
                              −
                           
                        .

When a mixed trip is necessary, the paths to be executed are quite similar to the latter trip types, as it is shown in Fig. 8
                        . The same loading path is used and the tractor leaves the upper finishing transfer node tus
                         delivering the semi-trailer to a customer. In its next move, the tractor travels to a different depot without pulling a semi-trailer. The tractor enters the lower starting transfer node tls
                         of depot w
                        2 and it loads a semi-trailer that is to be returned to w
                        1. The return path and the unloading process is exactly the same as it was presented before.

Pre-processing the data is a crucial step to tackle this planning problem. Since the trips to be made by each request are roughly defined a priori, as well as their corresponding paths, the set of arcs to be considered is much smaller. In order to define the set of possible arcs to be made in each trip k, we analyze the origin and destination of each request and insert the possible and logical arcs that are necessary into Ak
                        . This phase is able to comprise a considerably large number of real-world constraints that can be addressed a priori and do not have to be included in mathematical models.

                           
                              
                                 Necessary arcs A request can only be transported throughout arcs that it explicitly needs in order to be delivered. This means that only the arcs that are comprised in the possible zone trips, depot trips and mixed trips need to be added. Note that the resultant arc set has to be in concordance with all the aforementioned rules that were described above. Additionally it is possible to define certain tractors to perform depot trips or special arcs for subcontracted vehicles, for example. This pre-processing step largely reduces the number of possible arcs.


                                 Request/Tractor compatibility In case we have more than one type of tractor and semi-trailer, the compatibility between the resources can be ensured by assigning the right trips to the right resources. This simplifies the model to tackle our problem and output solutions that are applicable to real-world problems.


                                 Minimum number of nodes The aforementioned minimum number of nodes that each request needs to visit in a certain planning iteration is also computed in this pre-processing procedure. The number of trips and their duration needs to be taken into account in order to define this number of moves.


                                 Depot requests When a request from a latter planning iteration needs to be considered in the current planning iteration, its pickup node will appear at one of the depots (where it was left). In this case, fictitious pickup locations need to be created in the pre-processing phase. Therefore, when backhauls are incurred, it is necessary to keep track of the stock of semi-trailers that was left at the depot at the end of each planning iteration.

With the objective of explaining the remaining characteristics of the problem, we present an example of a long-haul request that passes through five transshpiment locations.

The example presented in Fig. 9 shows the itinerary to be executed by a request which has to be picked from a loading location 
                           
                              r
                              2
                              +
                           
                         and delivered to an unloading location 
                           
                              r
                              2
                              −
                           
                        . Although we are particularly interested in focusing on request r
                        2, it is necessary to represent other movements which are executed by other vehicles. Therefore, the figure shows paths where a tractor is pulling the semi-trailer r
                        2 to be delivered to 
                           
                              r
                              2
                              −
                           
                         (solid lines), paths where a tractor is finishing the rest of the trip dealing with other requests (dashed lines) and paths where a tractor is not pulling a semi-trailer (dotted lines), which happens in zone trips. The label of each path indicates its origin and destination. The vehicle which crosses a path is superscript and the request that is transported is subscript. In the beginning, a tractor k
                        1, located at depot w
                        1, executes a zone trip where it delivers a request r
                        1 to its unloading location 
                           
                              
                                 r
                                 1
                                 −
                              
                              ,
                           
                         picks up request r
                        2 from its loading location 
                           
                              r
                              2
                              +
                           
                         and returns to depot w
                        1 because r
                        2 has to be transported to another zone. At this point, the request r
                        2 needs to be transported to the next zone and thus a depot trip has to occur. In order to execute this depot trip a tractor k
                        2, which has to move a request from w
                        2 to w
                        1, will move the request r
                        2 from w
                        1 to w
                        2 in its return. Here, request r
                        2, which is at depot w
                        2, needs to perform 3 more depot trips in order to be moved to the zone to which its unloading location belongs (reachable from w
                        4). When it arrives to depot w
                        4, another zone trip has to be executed to finish this long-haul transportation. Hence, a tractor k
                        6 pulls the semi-trailer requested by r
                        2 from w
                        4 to 
                           
                              
                                 r
                                 2
                                 −
                              
                              ,
                           
                         picks up another request from 
                           
                              r
                              3
                              +
                           
                         and returns to w
                        4.

During this procedure, the freight requested by r
                        2 had to perform six moves that were executed by 6 different tractors. Although this may seem inefficient, if we analyze the cases in which a tractor was traveling empty, we conclude that the distance driven in this condition is minimal. In fact, empty paths were only executed during zone trips when traversing arcs between loading and unloading locations.

The mathematical model works with the following binary variables. 
                           
                              X
                              
                                 i
                                 j
                              
                              k
                           
                         is equal to 1 if and only if location j immediately follows location i on trip k. 
                           
                              Z
                              
                                 i
                                 r
                              
                              k
                           
                         is equal to 1 if and only if request r visits location i on trip k. Uil
                         is equal to 1 if and only if time window l is used for location i. Sir
                         is equal to 1 if and only if final stock of request r exists at transfer node i. Additionally, continuous variables 
                           
                              W
                              i
                              k
                           
                         are used to represent the time when trip k passes at loading or unloading location i. 
                           
                              W
                              
                                 D
                                 i
                                 k
                              
                           
                         and 
                           
                              W
                              
                                 A
                                 i
                                 k
                              
                           
                         are used to represent the time when trip k departs and arrives at location i ∈ T ∪ W.

Let 
                           
                              
                                 δ
                                 +
                              
                              
                                 (
                                 i
                                 )
                              
                              =
                              
                                 {
                                 j
                                 :
                                 
                                    (
                                    i
                                    ,
                                    j
                                    )
                                 
                                 ∈
                                 A
                                 }
                              
                           
                         and 
                           
                              
                                 δ
                                 −
                              
                              
                                 (
                                 j
                                 )
                              
                              =
                              
                                 {
                                 i
                                 :
                                 
                                    (
                                    i
                                    ,
                                    j
                                    )
                                 
                                 ∈
                                 A
                                 }
                              
                           
                         denote the set of successors and predecessors of i and j, respectively. The arcs that are included in this set are generated in the pre-processing procedure that was described previously.

Considering that it is not mandatory to deliver every single request, we needed to induce movements only if the request is picked. We want to maximize the number of moves which can be measured in visits to pickup or delivery locations by counting the Z variables. In the moment a certain request is picked up, the model has to make sure it reaches a favorable and feasible position in the network in order to be delivered in a later planning iteration. This is particularly important to ensure a connection between different periods (days) since the requests that are not delivered in a certain planning iteration are afterwards tackled in a rolling horizon approach. Objective function (1) simultaneously maximizes the movements performed by each request and minimizes the time that is necessary to execute the plan. These two criteria are weighted by α and β, respectively, which should be defined in collaboration with the person who is going to use the model (decision maker).

                           
                              (1)
                              
                                 
                                    max
                                    
                                    α
                                    ·
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          N
                                       
                                    
                                    
                                       ∑
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                    
                                       ∑
                                       
                                          k
                                          ∈
                                          K
                                       
                                    
                                    
                                       Z
                                       
                                          i
                                          r
                                       
                                       k
                                    
                                    −
                                    β
                                    ·
                                    
                                       ∑
                                       
                                          k
                                          ∈
                                          K
                                       
                                    
                                    
                                       ∑
                                       
                                          
                                             (
                                             i
                                             ,
                                             j
                                             )
                                          
                                          ∈
                                          
                                             A
                                             k
                                          
                                       
                                    
                                    t
                                    
                                       t
                                       
                                          i
                                          j
                                       
                                    
                                    
                                    
                                       X
                                       
                                          i
                                          j
                                       
                                       k
                                    
                                 
                              
                           
                        
                     

Constraints (2) ensure that only one arc exits from the starting node 
                           
                              s
                              +
                           
                         of the pre-processed arc set Ak
                         whereas constraints (3) guarantee that only one arc enters to the finishing node 
                           
                              s
                              −
                           
                         of the same arc set. In case a trip k is not to be executed, its vehicle may fictitiously traverse an arc directly from its starting node to its finishing node.

                           
                              (2)
                              
                                 
                                    
                                       ∑
                                       
                                          j
                                          ∈
                                          
                                             δ
                                             +
                                          
                                          
                                             (
                                             
                                                s
                                                k
                                                +
                                             
                                             )
                                          
                                       
                                    
                                    
                                       X
                                       
                                          
                                             s
                                             k
                                             +
                                          
                                          ,
                                          j
                                       
                                       k
                                    
                                    =
                                    1
                                    ,
                                    
                                    ∀
                                    
                                    k
                                    ∈
                                    K
                                    ,
                                    
                                       (
                                       
                                          s
                                          +
                                       
                                       ,
                                       j
                                       )
                                    
                                    ∈
                                    
                                       A
                                       k
                                    
                                    .
                                 
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          
                                             δ
                                             −
                                          
                                          
                                             (
                                             
                                                s
                                                k
                                                −
                                             
                                             )
                                          
                                       
                                    
                                    
                                       X
                                       
                                          i
                                          ,
                                          
                                             s
                                             k
                                             −
                                          
                                       
                                       k
                                    
                                    =
                                    1
                                    ,
                                    
                                    ∀
                                    
                                    k
                                    ∈
                                    K
                                    ,
                                    
                                       (
                                       i
                                       ,
                                       
                                          s
                                          −
                                       
                                       )
                                    
                                    ∈
                                    
                                       A
                                       k
                                    
                                    .
                                 
                              
                           
                        
                     

Loading and unloading nodes are visited at most one time with constraints (4).

                           
                              (4)
                              
                                 
                                    
                                       ∑
                                       
                                          k
                                          ∈
                                          K
                                       
                                    
                                    
                                       ∑
                                       
                                          j
                                          ∈
                                          
                                             δ
                                             +
                                          
                                          
                                             (
                                             i
                                             )
                                          
                                       
                                    
                                    
                                       X
                                       
                                          i
                                          ,
                                          j
                                       
                                       k
                                    
                                    ≤
                                    1
                                    
                                    ∀
                                    
                                    i
                                    ∈
                                    N
                                    .
                                 
                              
                           
                        
                     

Flow conservation is ensured by constraints (5) which establish that a tractor executing a path entering a loading or unloading node must also leave that node.

                           
                              (5)
                              
                                 
                                    
                                       ∑
                                       
                                          j
                                          ∈
                                          
                                             δ
                                             +
                                          
                                          
                                             (
                                             i
                                             )
                                          
                                       
                                    
                                    
                                       X
                                       
                                          i
                                          j
                                       
                                       k
                                    
                                    −
                                    
                                       ∑
                                       
                                          j
                                          ∈
                                          
                                             δ
                                             −
                                          
                                          
                                             (
                                             i
                                             )
                                          
                                       
                                    
                                    
                                       X
                                       
                                          j
                                          i
                                       
                                       k
                                    
                                    =
                                    0
                                    
                                    ∀
                                    
                                    
                                       (
                                       i
                                       ,
                                       j
                                       )
                                    
                                    ∈
                                    
                                       A
                                       k
                                    
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                     

Transfer nodes also have rules to be addressed. Constraints (6)–(9) define the flow of upper and lower transfers which have to start at a given starting transfer node t
                        *s
                         and finish at a finishing transfer node t
                        *f
                         of the same transfer location t.

                           
                              (6)
                              
                                 
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          
                                             δ
                                             −
                                          
                                          
                                             (
                                             
                                                t
                                                
                                                   u
                                                   s
                                                
                                             
                                             )
                                          
                                       
                                    
                                    
                                       X
                                       
                                          i
                                          ,
                                          
                                             t
                                             
                                                u
                                                s
                                             
                                          
                                       
                                       k
                                    
                                    =
                                    
                                       X
                                       
                                          
                                             t
                                             
                                                u
                                                s
                                             
                                          
                                          ,
                                          
                                             t
                                             
                                                u
                                                f
                                             
                                          
                                       
                                       k
                                    
                                    
                                    ∀
                                    
                                    t
                                    ∈
                                    T
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          
                                             δ
                                             −
                                          
                                          
                                             (
                                             
                                                t
                                                
                                                   l
                                                   s
                                                
                                             
                                             )
                                          
                                       
                                    
                                    
                                       X
                                       
                                          i
                                          ,
                                          
                                             t
                                             
                                                l
                                                s
                                             
                                          
                                       
                                       k
                                    
                                    =
                                    
                                       X
                                       
                                          
                                             t
                                             
                                                l
                                                s
                                             
                                          
                                          ,
                                          
                                             t
                                             
                                                l
                                                f
                                             
                                          
                                       
                                       k
                                    
                                    
                                    ∀
                                    
                                    t
                                    ∈
                                    T
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       ∑
                                       
                                          j
                                          ∈
                                          
                                             δ
                                             +
                                          
                                          
                                             (
                                             
                                                t
                                                
                                                   u
                                                   f
                                                
                                             
                                             )
                                          
                                       
                                    
                                    
                                       X
                                       
                                          
                                             t
                                             
                                                u
                                                f
                                             
                                          
                                          ,
                                          j
                                       
                                       k
                                    
                                    =
                                    
                                       X
                                       
                                          
                                             t
                                             
                                                u
                                                s
                                             
                                          
                                          ,
                                          
                                             t
                                             
                                                u
                                                f
                                             
                                          
                                       
                                       k
                                    
                                    
                                    ∀
                                    
                                    t
                                    ∈
                                    T
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       ∑
                                       
                                          j
                                          ∈
                                          
                                             δ
                                             +
                                          
                                          
                                             (
                                             
                                                t
                                                
                                                   l
                                                   f
                                                
                                             
                                             )
                                          
                                       
                                    
                                    
                                       X
                                       
                                          
                                             t
                                             
                                                l
                                                f
                                             
                                          
                                          ,
                                          j
                                       
                                       k
                                    
                                    =
                                    
                                       X
                                       
                                          
                                             t
                                             
                                                l
                                                s
                                             
                                          
                                          ,
                                          
                                             t
                                             
                                                l
                                                f
                                             
                                          
                                       
                                       k
                                    
                                    
                                    ∀
                                    
                                    t
                                    ∈
                                    T
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                     

For all types of movements it is necessary to enforce coherence in terms of travel times. When traversing a certain arc/path (i, j), a service time sti
                         and a travel time ttij
                         have to be taken into account. Consequently, constraints (10) have to be defined for every single arc that is used in the solution. Only arcs that belong to the pre-processed arc sets Ak
                         need to be considered.

                           
                              (10)
                              
                                 
                                    
                                       W
                                       i
                                    
                                    +
                                    s
                                    
                                       t
                                       i
                                    
                                    +
                                    t
                                    
                                       t
                                       
                                          i
                                          j
                                       
                                    
                                    ≤
                                    M
                                    
                                       (
                                       1
                                       −
                                       
                                          X
                                          
                                             i
                                             j
                                          
                                          k
                                       
                                       )
                                    
                                    +
                                    
                                       W
                                       j
                                    
                                    
                                    ∀
                                    
                                    
                                       (
                                       i
                                       ,
                                       j
                                       )
                                    
                                    ∈
                                    
                                       A
                                       k
                                    
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                     

When a trip enters in an upper starting transfer node tus
                        , its tractor cannot be pulling a semi-trailer. Likewise, when a trip enters its sink node 
                           
                              
                                 s
                                 −
                              
                              ,
                           
                         its tractor has to be empty. This means that 
                           
                              Z
                              
                                 
                                    t
                                    
                                       u
                                       s
                                    
                                 
                                 ,
                                 r
                              
                              k
                           
                         and 
                           
                              Z
                              
                                 
                                    s
                                    −
                                 
                                 ,
                                 r
                              
                              k
                           
                         have to be 0 and thus we do not need to instantiate these variables for each trip k and request r.

The requests coherence throughout trips is ensured by constraints (11) and (12). If a trip traverses an arc, its tractor has to be pulling the same semi-trailer r in both nodes of the arc or it is pulling it in neither. Moreover, each move from one transfer node to another one belonging to a different depot has to carry the same request from the departure depot to the destination depot (constraints (13)).

                           
                              (11)
                              
                                 
                                    
                                       Z
                                       
                                          i
                                          r
                                       
                                       k
                                    
                                    −
                                    
                                       Z
                                       
                                          j
                                          r
                                       
                                       k
                                    
                                    ≤
                                    1
                                    −
                                    
                                       X
                                       
                                          i
                                          j
                                       
                                       k
                                    
                                    
                                    ∀
                                    
                                    
                                       (
                                       i
                                       ,
                                       j
                                       )
                                    
                                    ∈
                                    
                                       A
                                       k
                                    
                                    :
                                    i
                                    ∉
                                    I
                                    ∪
                                    
                                       T
                                       
                                          u
                                          s
                                       
                                    
                                    ∪
                                    
                                       T
                                       
                                          l
                                          s
                                       
                                    
                                    ,
                                    r
                                    ∈
                                    R
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                        
                           
                              (12)
                              
                                 
                                    
                                       Z
                                       
                                          j
                                          r
                                       
                                       k
                                    
                                    −
                                    
                                       Z
                                       
                                          i
                                          r
                                       
                                       k
                                    
                                    ≤
                                    1
                                    −
                                    
                                       X
                                       
                                          i
                                          j
                                       
                                       k
                                    
                                    
                                    ∀
                                    
                                    
                                       (
                                       i
                                       ,
                                       j
                                       )
                                    
                                    ∈
                                    
                                       A
                                       k
                                    
                                    :
                                    i
                                    ∉
                                    I
                                    ∪
                                    
                                       T
                                       
                                          u
                                          s
                                       
                                    
                                    ∪
                                    
                                       T
                                       
                                          l
                                          s
                                       
                                    
                                    ,
                                    r
                                    ∈
                                    R
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                        
                           
                              (13)
                              
                                 
                                    2
                                    
                                       X
                                       
                                          i
                                          j
                                       
                                       k
                                    
                                    
                                    ≤
                                    
                                    
                                       ∑
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                    
                                    
                                       (
                                       
                                          Z
                                          
                                             i
                                             r
                                          
                                          k
                                       
                                       +
                                       
                                          Z
                                          
                                             j
                                             r
                                          
                                          k
                                       
                                       )
                                    
                                    
                                    
                                    
                                    ∀
                                    
                                    
                                       (
                                       i
                                       ,
                                       j
                                       )
                                    
                                    ∈
                                    
                                       A
                                       k
                                    
                                    :
                                    i
                                    ∈
                                    
                                       T
                                       
                                          u
                                          f
                                       
                                    
                                    ∪
                                    
                                       T
                                       
                                          l
                                          f
                                       
                                    
                                    ,
                                    j
                                    ∈
                                    
                                       T
                                       
                                          u
                                          s
                                       
                                    
                                    ∪
                                    
                                       T
                                       
                                          l
                                          s
                                       
                                    
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                     

Constraints (14) ensure that movements for a given request can only happen after its respective loading. After leaving a loading node the tractor of a trip has to be loaded with the respective request (constraints (15)) and after leaving an unloading node the tractor has to be empty (constraints (16)). Moreover, a tractor performing a trip can only enter an unloading node in case it is carrying the respective request (constraints (17)).

                           
                              (14)
                              
                                 
                                    
                                       ∑
                                       
                                          k
                                          ∈
                                          K
                                       
                                    
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          N
                                       
                                    
                                    
                                       Z
                                       
                                          i
                                          r
                                       
                                       k
                                    
                                    ≤
                                    M
                                    
                                       ∑
                                       
                                          
                                             k
                                             ′
                                          
                                          ∈
                                          K
                                       
                                    
                                    
                                       ∑
                                       
                                          j
                                          ∈
                                          
                                             δ
                                             +
                                          
                                          
                                             (
                                             
                                                r
                                                +
                                             
                                             )
                                          
                                       
                                    
                                    
                                       X
                                       
                                          
                                             r
                                             +
                                          
                                          ,
                                          j
                                       
                                       
                                          k
                                          ′
                                       
                                    
                                    
                                    ∀
                                    
                                    r
                                    ∈
                                    R
                                    .
                                 
                              
                           
                        
                        
                           
                              (15)
                              
                                 
                                    
                                       Z
                                       
                                          j
                                          r
                                       
                                       k
                                    
                                    ≥
                                    
                                       X
                                       
                                          
                                             r
                                             +
                                          
                                          ,
                                          j
                                       
                                       k
                                    
                                    
                                    ∀
                                    
                                    j
                                    ∈
                                    
                                       V
                                       k
                                    
                                    ,
                                    r
                                    ∈
                                    R
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                        
                           
                              (16)
                              
                                 
                                    
                                       Z
                                       
                                          j
                                          r
                                       
                                       k
                                    
                                    ≤
                                    1
                                    −
                                    
                                       X
                                       
                                          
                                             r
                                             −
                                          
                                          ,
                                          j
                                       
                                       k
                                    
                                    
                                    ∀
                                    
                                    j
                                    ∈
                                    
                                       V
                                       k
                                    
                                    ,
                                    r
                                    ∈
                                    R
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                        
                           
                              (17)
                              
                                 
                                    
                                       Z
                                       
                                          
                                             r
                                             −
                                          
                                          ,
                                          r
                                       
                                       k
                                    
                                    ≥
                                    
                                       ∑
                                       
                                          j
                                          ∈
                                          
                                             δ
                                             −
                                          
                                          
                                             (
                                             
                                                r
                                                −
                                             
                                             )
                                          
                                       
                                    
                                    
                                       X
                                       
                                          j
                                          ,
                                          
                                             r
                                             −
                                          
                                       
                                       k
                                    
                                    
                                    ∀
                                    
                                    r
                                    ∈
                                    R
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                     

A request is not allowed to enter a transfer node and leave it within the same vehicle (constraints (18)) as the vehicle could be traveling to a region where it does not belong. Furthermore, with constraints (19) each request is not allowed to be loaded at the same transfer node more than once. Additionally, a request may only be carried to a node if there is actually a trip passing in this node (constraints (20)).

                           
                              (18)
                              
                                 
                                    
                                       Z
                                       
                                          
                                             t
                                             
                                                l
                                                s
                                             
                                          
                                          ,
                                          r
                                       
                                       k
                                    
                                    +
                                    
                                       Z
                                       
                                          
                                             t
                                             
                                                l
                                                f
                                             
                                          
                                          ,
                                          r
                                       
                                       k
                                    
                                    ≤
                                    1
                                    ,
                                    
                                    ∀
                                    t
                                    ∈
                                    T
                                    ,
                                    r
                                    ∈
                                    R
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                        
                           
                              (19)
                              
                                 
                                    
                                       ∑
                                       
                                          k
                                          ∈
                                          K
                                       
                                    
                                    
                                       Z
                                       
                                          j
                                          r
                                       
                                       k
                                    
                                    ≤
                                    1
                                    ,
                                    
                                    ∀
                                    j
                                    ∈
                                    
                                       T
                                       
                                          u
                                          s
                                       
                                    
                                    ∪
                                    
                                       T
                                       
                                          l
                                          s
                                       
                                    
                                    ,
                                    r
                                    ∈
                                    R
                                    .
                                 
                              
                           
                        
                        
                           
                              (20)
                              
                                 
                                    
                                       Z
                                       
                                          j
                                          r
                                       
                                       k
                                    
                                    ≤
                                    
                                       ∑
                                       
                                          i
                                          ∈
                                          
                                             δ
                                             −
                                          
                                          
                                             (
                                             j
                                             )
                                          
                                       
                                    
                                    
                                       X
                                       
                                          i
                                          j
                                       
                                       k
                                    
                                    ,
                                    
                                    ∀
                                    j
                                    ∈
                                    
                                       V
                                       k
                                    
                                    ,
                                    r
                                    ∈
                                    R
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                     

The transfer time coherence for each request is assured by constraints (21) and (22). Constraints (21) are related to transfers that leave the transfer node by its upper finishing node and constraints (22) are active for trips that perform a transfer leaving the transfer node by its lower finishing node. These constraints ensure that the trip k′ may only load a request that has already arrived in a different trip k.

                           
                              (21)
                              
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                W
                                                
                                                   
                                                      t
                                                      
                                                         l
                                                         s
                                                      
                                                   
                                                
                                                k
                                             
                                             +
                                             s
                                             
                                                t
                                                
                                                   t
                                                   
                                                      l
                                                      s
                                                   
                                                
                                             
                                             ≤
                                             
                                                W
                                                
                                                   
                                                      t
                                                      
                                                         u
                                                         f
                                                      
                                                   
                                                
                                                
                                                   k
                                                   ′
                                                
                                             
                                             +
                                             M
                                             
                                                (
                                                2
                                                −
                                                
                                                   Z
                                                   
                                                      
                                                         t
                                                         
                                                            l
                                                            s
                                                         
                                                      
                                                      ,
                                                      r
                                                   
                                                   k
                                                
                                                −
                                                
                                                   Z
                                                   
                                                      
                                                         t
                                                         
                                                            u
                                                            f
                                                         
                                                      
                                                      ,
                                                      r
                                                   
                                                   
                                                      k
                                                      ′
                                                   
                                                
                                                )
                                             
                                             ,
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             
                                             ∀
                                             
                                             r
                                             ∈
                                             R
                                             ,
                                             t
                                             ∈
                                             T
                                             ,
                                             k
                                             ∈
                                             K
                                             ,
                                             
                                                k
                                                ′
                                             
                                             ∈
                                             K
                                             ,
                                             k
                                             ≠
                                             
                                                k
                                                ′
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (22)
                              
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                W
                                                
                                                   
                                                      t
                                                      
                                                         l
                                                         s
                                                      
                                                   
                                                
                                                k
                                             
                                             +
                                             s
                                             
                                                t
                                                
                                                   t
                                                   
                                                      l
                                                      s
                                                   
                                                
                                             
                                             ≤
                                             W
                                             
                                                D
                                                
                                                   
                                                      t
                                                      
                                                         l
                                                         f
                                                      
                                                   
                                                
                                                
                                                   k
                                                   ′
                                                
                                             
                                             +
                                             M
                                             
                                                (
                                                2
                                                −
                                                
                                                   Z
                                                   
                                                      
                                                         t
                                                         
                                                            l
                                                            s
                                                         
                                                      
                                                      ,
                                                      r
                                                   
                                                   k
                                                
                                                −
                                                
                                                   Z
                                                   
                                                      
                                                         t
                                                         
                                                            l
                                                            f
                                                         
                                                      
                                                      ,
                                                      r
                                                   
                                                   
                                                      k
                                                      ′
                                                   
                                                
                                                )
                                             
                                             ,
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             
                                             ∀
                                             
                                             r
                                             ∈
                                             R
                                             ,
                                             t
                                             ∈
                                             T
                                             ,
                                             k
                                             ∈
                                             K
                                             ,
                                             
                                                k
                                                ′
                                             
                                             ∈
                                             K
                                             ,
                                             k
                                             ≠
                                             
                                                k
                                                ′
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Multiple time windows have to be respected at each loading and unloading node (constraints (23).

                           
                              (23)
                              
                                 
                                    
                                       ∑
                                       
                                          l
                                          ∈
                                          L
                                       
                                    
                                    
                                       a
                                       
                                          i
                                          l
                                       
                                    
                                    
                                    
                                       U
                                       
                                          i
                                          l
                                       
                                    
                                    ≤
                                    
                                       W
                                       i
                                       k
                                    
                                    ≤
                                    
                                       ∑
                                       
                                          l
                                          ∈
                                          L
                                       
                                    
                                    
                                       b
                                       
                                          i
                                          l
                                       
                                    
                                    
                                    
                                       U
                                       
                                          i
                                          l
                                       
                                    
                                    ,
                                    
                                    ∀
                                    
                                    i
                                    ∈
                                    N
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                     

Moreover, it is only possible to use one of the available time windows (constraints (24)).

                           
                              (24)
                              
                                 
                                    
                                       ∑
                                       
                                          l
                                          ∈
                                          L
                                       
                                    
                                    
                                       U
                                       
                                          i
                                          l
                                       
                                    
                                    =
                                    1
                                    ,
                                    
                                    ∀
                                    
                                    i
                                    ∈
                                    N
                                    .
                                 
                              
                           
                        
                     

Time windows also have to be taken into account in the origin and sink nodes (constraints (25). These correspond to the opening and closing times of the depots.

                           
                              (25)
                              
                                 
                                    a
                                    
                                       n
                                       
                                          i
                                       
                                       k
                                    
                                    ≤
                                    
                                       W
                                       
                                          i
                                       
                                       k
                                    
                                    ≤
                                    b
                                    
                                       n
                                       
                                          j
                                       
                                       k
                                    
                                    
                                    ∀
                                    i
                                    ∈
                                    I
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                        
                           
                              (26)
                              
                                 
                                    
                                       W
                                       
                                          
                                             s
                                             +
                                          
                                       
                                       k
                                    
                                    ≤
                                    
                                       W
                                       
                                          
                                             s
                                             −
                                          
                                       
                                       k
                                    
                                    
                                    ∀
                                    
                                    
                                       {
                                       
                                          s
                                          +
                                       
                                       ,
                                       
                                          s
                                          −
                                       
                                       }
                                    
                                    ∈
                                    
                                       V
                                       K
                                    
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                     

Constraints (27) put a limit of wt on the time elapsed in a path between an unloading node and a loading node. The time taken by a path between nodes i and j is defined by ttij
                        . These constraints come from a practical standpoint, as the company does not want to have its resources too much time waiting and they also want to control the time that tractors are traveling without pulling a semi-trailer.

                           
                              (27)
                              
                                 
                                    
                                       W
                                       j
                                       k
                                    
                                    −
                                    t
                                    
                                       t
                                       
                                          i
                                          j
                                       
                                    
                                    −
                                    
                                       W
                                       i
                                       k
                                    
                                    −
                                    M
                                    
                                       (
                                       1
                                       −
                                       
                                          ∑
                                          k
                                       
                                       
                                          X
                                          
                                             i
                                             j
                                          
                                          k
                                       
                                       )
                                    
                                    ≤
                                    w
                                    t
                                    
                                    ∀
                                    
                                       (
                                       i
                                       ,
                                       j
                                       )
                                    
                                    ∈
                                    
                                       A
                                       k
                                    
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                     

Moreover, due to the working time limitation of the drivers, a trip cannot last beyond a fixed parameter mT (constraints (28)).

                           
                              (28)
                              
                                 
                                    
                                       W
                                       
                                          
                                             s
                                             −
                                          
                                       
                                       k
                                    
                                    −
                                    
                                       W
                                       
                                          
                                             s
                                             +
                                          
                                       
                                       k
                                    
                                    ≤
                                    m
                                    T
                                    
                                    ∀
                                    
                                    
                                       {
                                       
                                          s
                                          +
                                       
                                       ,
                                       
                                          s
                                          −
                                       
                                       }
                                    
                                    ∈
                                    
                                       V
                                       K
                                    
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                     

To ensure that the decisions made in a planning period are not completely blind in relation to the next planning period, constraints (29) set a minimum number of transfers that need to occur in case a request is loaded. For instance, if a certain request needs to be delivered in two days but the total distance takes more than a workday to be crossed, part of the trip to be made by this request needs to be executed in the first day. Otherwise, it will not be possible to deliver the request in time. Therefore, if the model decides to pickup a request, the number of times that this request passes through transfer nodes plus its zone trip has to be greater or equal to a minimum number of moves defined a priori.

                           
                              (29)
                              
                                 
                                    
                                       ∑
                                       
                                          k
                                          ∈
                                          K
                                       
                                    
                                    
                                       ∑
                                       
                                          j
                                          ∈
                                          
                                             T
                                             
                                                u
                                                s
                                             
                                          
                                          ∪
                                          
                                             T
                                             
                                                l
                                                s
                                             
                                          
                                       
                                    
                                    
                                       Z
                                       
                                          j
                                          r
                                       
                                       k
                                    
                                    +
                                    
                                       ∑
                                       
                                          k
                                          ∈
                                          K
                                       
                                    
                                    
                                       ∑
                                       
                                          j
                                          ∈
                                          
                                             A
                                             k
                                          
                                       
                                    
                                    
                                       X
                                       
                                          j
                                          
                                             r
                                             −
                                          
                                       
                                       k
                                    
                                    ≥
                                    n
                                    
                                       M
                                       r
                                    
                                    
                                       ∑
                                       
                                          k
                                          ∈
                                          K
                                       
                                    
                                    
                                       ∑
                                       
                                          j
                                          ∈
                                          
                                             A
                                             k
                                          
                                       
                                    
                                    
                                       X
                                       
                                          
                                             r
                                             +
                                          
                                          ,
                                          j
                                       
                                       k
                                    
                                    
                                    ∀
                                    r
                                    ∈
                                    R
                                    .
                                 
                              
                           
                        
                     

Intermediate time-windows are also important to be enforced through the paths crossed by a request, in order to ensure that the next planning period is able to deliver requests on time (constraints (30)–(32)). We introduce intermediate time-windows [ap
                        
                           t, r
                        , bp
                        
                           t, r
                        ] for each transfer node t and request r in order to ensure that each request arrives at transshipment locations on time.

                           
                              (30)
                              
                                 
                                    
                                       W
                                       
                                          
                                             t
                                             
                                                l
                                                s
                                             
                                          
                                       
                                       k
                                    
                                    ≤
                                    b
                                    
                                       p
                                       
                                          
                                             t
                                             
                                                l
                                                s
                                             
                                          
                                          ,
                                          r
                                       
                                    
                                    +
                                    M
                                    
                                       (
                                       1
                                       −
                                       
                                          Z
                                          
                                             
                                                t
                                                
                                                   l
                                                   s
                                                
                                             
                                             ,
                                             r
                                          
                                          k
                                       
                                       )
                                    
                                    
                                    ∀
                                    t
                                    ∈
                                    T
                                    ,
                                    r
                                    ∈
                                    R
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                        
                           
                              (31)
                              
                                 
                                    
                                       W
                                       
                                          
                                             t
                                             
                                                u
                                                f
                                             
                                          
                                       
                                       k
                                    
                                    ≥
                                    a
                                    
                                       p
                                       
                                          
                                             t
                                             
                                                u
                                                f
                                             
                                          
                                          ,
                                          r
                                       
                                    
                                    −
                                    M
                                    
                                       (
                                       1
                                       −
                                       
                                          Z
                                          
                                             
                                                t
                                                
                                                   u
                                                   f
                                                
                                             
                                             ,
                                             r
                                          
                                          k
                                       
                                       )
                                    
                                    
                                    ∀
                                    t
                                    ∈
                                    T
                                    ,
                                    r
                                    ∈
                                    R
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                        
                           
                              (32)
                              
                                 
                                    
                                       W
                                       
                                          
                                             t
                                             
                                                l
                                                f
                                             
                                          
                                       
                                       k
                                    
                                    ≥
                                    a
                                    
                                       p
                                       
                                          
                                             t
                                             
                                                l
                                                f
                                             
                                          
                                          ,
                                          r
                                       
                                    
                                    −
                                    M
                                    
                                       (
                                       1
                                       −
                                       
                                          Z
                                          
                                             
                                                t
                                                
                                                   l
                                                   f
                                                
                                             
                                             ,
                                             r
                                          
                                          k
                                       
                                       )
                                    
                                    
                                    ∀
                                    t
                                    ∈
                                    T
                                    ,
                                    r
                                    ∈
                                    R
                                    ,
                                    k
                                    ∈
                                    K
                                    .
                                 
                              
                           
                        
                     

Integrality and binary conditions are defined by conditions (33).

                           
                              (33)
                              
                                 
                                    
                                       X
                                       
                                          i
                                          j
                                       
                                       k
                                    
                                    ,
                                    
                                       Z
                                       
                                          i
                                          r
                                       
                                       k
                                    
                                    ,
                                    
                                       U
                                       
                                          i
                                          l
                                       
                                    
                                    ,
                                    
                                       S
                                       
                                          i
                                          r
                                       
                                    
                                    ∈
                                    
                                       {
                                       0
                                       ,
                                       1
                                       }
                                    
                                    ;
                                    
                                    
                                       W
                                       i
                                       k
                                    
                                    ≥
                                    0
                                    .
                                 
                              
                           
                        
                     

Finally, since we may need to reconsider some requests in a future planning iteration, we need to keep track of the remaining stock of each request r at transfer location t, Str
                        . If a request starts a transfer, either it leaves the transfer by the upper finishing transfer nodes, the lower finishing transfer nodes or it stays in stock to be carried in the next planning period.

                           
                              
                                 
                                    
                                       S
                                       
                                          t
                                          r
                                       
                                    
                                    =
                                    
                                       ∑
                                       
                                          k
                                          ∈
                                          K
                                       
                                    
                                    
                                       Z
                                       
                                          
                                             t
                                             
                                                l
                                                s
                                             
                                          
                                          ,
                                          r
                                       
                                       k
                                    
                                    −
                                    
                                       ∑
                                       
                                          k
                                          ∈
                                          K
                                       
                                    
                                    
                                       Z
                                       
                                          
                                             t
                                             
                                                u
                                                f
                                             
                                          
                                          ,
                                          r
                                       
                                       k
                                    
                                    −
                                    
                                       ∑
                                       
                                          k
                                          ∈
                                          K
                                       
                                    
                                    
                                       Z
                                       
                                          
                                             t
                                             
                                                l
                                                f
                                             
                                          
                                          ,
                                          r
                                       
                                       k
                                    
                                    ,
                                    
                                    ∀
                                    r
                                    ∈
                                    R
                                    ,
                                    t
                                    ∈
                                    T
                                    .
                                 
                              
                           
                        
                     

The matheuristic designed for the problem is a neighborhood search improvement heuristic and is inspired by the ‘exchange’ improvement heuristic of Pochet and Wolsey (2006) and the fix-and-optimize version of Helber and Sahling (2010). Essentially, this heuristic explores the idea that most of the computational burden comes from the existence of a large number of integer variables and that small instances of the MIP can be solved efficiently. Hence, the heuristic proceeds iteratively by decomposing the set of integer variables in the original MIP to create easier MIP subproblems to re-optimize.

The matheuristic, MH1, works on the set 
                        Z
                      defined by all Z variables, since they control the assignment of requests to trips and nodes, and therefore most of the problem’s decisions. Simultaneously, the remaining integer variables of the problem denoted by the set 
                        C
                      have their values limited by the definition of Z. At each iteration of the matheuristic, the original MIP problem is decomposed into a MIP subproblem by selecting a subset 
                        
                           Z
                           
                              
                              ′
                           
                        
                      of the Z variables corresponding to the variables to be re-optimized in the next iteration, while the value of the Z variables not present in this set is fixed to the best solution found in the previous iterations. As this is an improvement heuristic it requires an initial feasible solution, which in the context of our problem can be easily obtained by setting all Z to zero.

The subset 
                        
                           Z
                           
                              
                              ′
                           
                        
                      is determined by defining a set of requests for which all the associated Z variables will be ‘freed’. i.e. re-optimized in the next iteration. To avoid local minima entrapment the selection of 
                        
                           Z
                           
                              
                              ′
                           
                        
                      is guided trough a neighborhood search algorithm and using an ordered finite set of user-defined neighborhood structures Nn
                     , 
                        
                           (
                           n
                           =
                           1
                           ,
                           …
                           
                           ,
                           
                              n
                              
                                 m
                                 a
                                 x
                              
                           
                           )
                           ,
                        
                      where n denotes the nth neighborhood structure. Neighborhood structures are defined by the number of requests E to be optimized setting the size of the set of ‘freed’ variables and the potential complexity of the MIP subproblem to solve. Neighborhoods contain all possible combinations of 
                        
                           Z
                           
                              
                              ′
                           
                        
                      of a given cardinality which are denoted as neighbors. Since our neighbor evaluation (solving a MIP) is a computational expensive process a full evaluation of the neighborhoods is unpractical. Therefore, a stochastic process controls neighbor selection to conduct a partial neighborhood search. After solving a subproblem from the current neighborhood structure the new solution objective value is compared with the previous best solution value. In case of an improvement, the search restarts at the first neighborhood structure (
                        
                           n
                           =
                           1
                        
                     ). Otherwise, the number of failed attempts within the current neighborhood structure is increased. A limited number of failures within a given neighborhood is allowed before switching to the next neighborhood structure in the ordered set.

Based on the latter ideas, MH1 tries to find path related requests in order to set similar conditions during the procedure. In order to improve the algorithm efficiency, the selection of the R requests is biased. Given that the tractor will always leave and arrive pulling a semi-trailer, some combinations of requests are more advantageous than others based on the complementarity of the requests paths. Thus, before selecting any request the complementarity among requests is assessed by calculating a compatibility score τ(ri, rj
                     ). To this purpose we introduce function σ((i, j), p) which equals one if the inverse arc (j, i) is found in request path p and zero otherwise. The compatibility score of two requests can be computed using:

                        
                           
                              
                                 τ
                                 
                                    (
                                    
                                       r
                                       i
                                    
                                    ,
                                    
                                       r
                                       j
                                    
                                    )
                                 
                                 =
                                 
                                    τ
                                    0
                                 
                                 +
                                 
                                    ∑
                                    
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                       
                                       ∈
                                       
                                          p
                                          
                                             r
                                             i
                                          
                                       
                                    
                                 
                                 σ
                                 
                                    (
                                    
                                       (
                                       i
                                       ,
                                       j
                                       )
                                    
                                    ,
                                    
                                       p
                                       
                                          r
                                          j
                                       
                                    
                                    )
                                 
                              
                           
                        
                     
                  

When creating the subset 
                        
                           Z
                           
                              
                              ′
                           
                        
                      only the first request is chosen randomly. The following selections are made considering the last request ri
                      appended to the subset 
                        
                           Z
                           
                              
                              ′
                           
                        
                      and according to probabilities 
                        
                           p
                           r
                           o
                           b
                           
                              (
                              
                                 r
                                 j
                              
                              )
                           
                           =
                           
                              
                                 τ
                                 (
                                 
                                    r
                                    i
                                 
                                 ,
                                 
                                    r
                                    j
                                 
                                 )
                              
                              
                                 
                                    ∑
                                    
                                       r
                                       k
                                    
                                 
                                 τ
                                 
                                    (
                                    
                                       r
                                       i
                                    
                                    ,
                                    
                                       r
                                       k
                                    
                                    )
                                 
                              
                           
                           ,
                        
                      until the number of desired requests has been selected. The term τ
                     0 is added to every score to ensure that any request can be chosen, but is sufficiently low to bias the search towards more desirable combinations (τ
                     0 was set to 0.25 in our tests).

To illustrate how the selection is performed consider the following example. Suppose that at the first iteration of the algorithm two requests are to be selected from a set composed of r
                     1, r
                     2, r
                     3 and r
                     4 with the associated paths 
                        
                           
                              p
                              1
                           
                           =
                           
                              {
                              1
                              ,
                              2
                              ,
                              3
                              }
                           
                           ,
                        
                     
                     
                        
                           
                              p
                              2
                           
                           =
                           
                              {
                              3
                              ,
                              2
                              ,
                              4
                              }
                           
                           ,
                        
                     
                     
                        
                           
                              p
                              3
                           
                           =
                           
                              {
                              3
                              ,
                              2
                              ,
                              1
                              }
                           
                        
                      and 
                        
                           
                              p
                              4
                           
                           =
                           
                              {
                              4
                              ,
                              2
                              ,
                              3
                              ,
                              1
                              }
                           
                        
                     . The first request chosen randomly is r
                     1, the selection of the second request is based on scores 
                        
                           τ
                           (
                           
                              r
                              1
                           
                           ,
                           
                              r
                              2
                           
                           )
                           =
                           1.25
                           ,
                        
                     
                     
                        
                           τ
                           (
                           
                              r
                              1
                           
                           ,
                           
                              r
                              3
                           
                           )
                           =
                           2.25
                           ,
                        
                     
                     
                        
                           τ
                           (
                           
                              r
                              1
                           
                           ,
                           
                              r
                              4
                           
                           )
                           =
                           0.25
                        
                      and the consequent probabilities 
                        
                           p
                           r
                           o
                           b
                           (
                           
                              r
                              2
                           
                           )
                           =
                           33
                           
                           percent
                           ,
                        
                     
                     
                        
                           p
                           r
                           o
                           b
                           (
                           
                              r
                              3
                           
                           )
                           =
                           60
                           
                           percent
                        
                      and 
                        
                           p
                           r
                           o
                           b
                           (
                           
                              r
                              4
                           
                           )
                           =
                           7
                           
                           percent
                        
                     .

The algorithm ends according to the following stopping criteria: (1) the maximum running time allowed has been achieved, or (2) the maximum number of neighbors without improvement has been achieved in all neighborhood structures. The pseudo-code for the described matheuristic is given in Algorithm 1
                     .

In this section we present the results obtained by the matheuristic as well as the limitations shown by the mathematical model when it was used independently. Our algorithm was coded in C++ and every time we needed to solve a mathematical model, CPLEX 12.4 was used. The tests were performed on Intel @ 2.40 GHz processing units with 4 gigabytes of random access memory running under the Linux operating system.

The instances that were used to test the solution approaches were collected during the daily distribution of a real-world LO and comprise orders placed during March (03) and April (04) of the year 2014. Furthermore, we include instances from two different contexts (C1 and C2), corresponding to two different regions, one in the south and the other in the north of the country. Overall, 79 real-world instances were solved. A summary of the characteristics of the realistic instances faced by the company is presented in Table 5
                        . The column Depot Requests concerns the number of requests that start at a depot and do not have to be picked from a remote location.

Considering Algorithm 1, we need to set some parameters for testing the algorithm. The maximum number of iterations is set to a large number because time is a priority in our case. Therefore, 
                           
                              n
                              _
                              m
                              a
                              x
                           
                         was set to 1000 iterations. Regarding the number of consecutive iterations in the same neighborhood without improving, 
                           
                              n
                              o
                              i
                              m
                              p
                              _
                              m
                              a
                              x
                           
                         was set to 3. The neighborhood structures are defined by varying the number of requests to be optimized in each iteration. The initial neighborhood structure reoptimizes 10 requests and it is increased by two every 
                           
                              n
                              o
                              i
                              m
                              p
                              _
                              m
                              a
                              x
                           
                         consecutive fails to improve. These values were defined after a careful tuning that was performed during the preliminary tests of our matheuristic. The computational time is limited to 15 minutes as required by the company.

With the objective of analyzing the efficiency of matheuristic MH1, we make a comparison with an implementation of the mathematical model (MathMod) in IBM CPLEX 12.4. Fig. 10
                        
                        
                        
                         shows the average results for tests comprising the aforementioned contexts and months of data. It is possible to conclude that, in a large portion of the instance set, the matheuristic obtains better results as its objective values are above the line that represents the direct solution of the mathematical model. Moreover, as the size of the instances increases, the differences between the two approaches also increase (larger instances are likely to have larger objective values in this case).

The aggregated results per context and month can be observed in Fig. 11. This figure depicts the ranges, median and average (crosshair) values for the relative different between the mathematical model MathMod and the implemented matheuristic MH1. It is clear that the matheuristic obtains superior results in every case since the relative difference is always positive. It is also important to note that the intervals are mostly located on the positive side.

According to the ideas presented in (Dolan & Moré, 2002), an overall assessment comparing the mathematical model against our matheuristic is performed in Fig. 12. The figure depicts the cumulative probability for each algorithm to obtain a solution with a relative gap smaller than or equal to τ. The relative gap is computed in relation to the best known solution for each instance p. For each method s the relative gap r
                        
                           p, s
                         is computed. The performance probability ρs
                        (τ) is then for each τ defined according to expression:

                           
                              
                                 
                                    
                                       ρ
                                       s
                                    
                                    
                                       (
                                       τ
                                       )
                                    
                                    =
                                    
                                       1
                                       
                                          n
                                          p
                                       
                                    
                                    s
                                    i
                                    z
                                    e
                                    
                                       {
                                       p
                                       ∈
                                       P
                                       :
                                       
                                          r
                                          
                                             p
                                             ,
                                             s
                                          
                                       
                                       ≤
                                       τ
                                       }
                                    
                                 
                              
                           
                        
                     


                        np
                         is the total number of instances and τ is the threshold for the relative gap based on the best solution found among all methods. Fig. 12 allows us to understand that there is a probability of around 80 percent for the matheuristic MH1 to find the best known solution (for 
                           
                              τ
                              =
                              0
                           
                        ), whereas this probability corresponds to slightly more than 30 percent in the case of the mathematical model MathMod. Larger probabilities are therefore preferred. We conclude that for short periods of time, our matheuristic has a larger probability to find the best known solution, which is completely in line with the initial objective of efficiently providing a good solution approach to be applied in a business context.

The time of convergence is also important. Indeed, we decided to test the mathematical model and the matheuristic for 15 minutes, but with the latter figures it is not possible to understand if the total running time is needed. Therefore, in Fig. 13, we present an example of a run for the 3 largest instances of the considered instance set. It is possible to observe that the mathematical model never achieves a better solution when compared with the matheuristic (at the end of the 15 minutes). Furthermore, note that the 15 minutes may be unnecessary for the matheuristic to find good quality solutions, as it stabilizes early in these runs. Indeed, for these three instances, the best solution was obtained in less than 200 seconds, meaning that our approach is specifically suited for a business context where different solutions may be needed at a fast pace.

Additionally, Table A.1 (Appendix A) presents the results obtained for all instances.

@&#CONCLUSIONS AND FUTURE WORK@&#

In this paper the long-haul freight transportation problem with requests flowing through multiple transshipment points is presented. A novel mathematical formulation is proposed in order to obtain solutions for a real world problem faced by a Portuguese LO. Additionally, with the objective of obtaining good quality solutions in short periods of time, we propose a fix-and-optimize matheuristic, proving its superiority compared to solutions obtaining by solving the mathematical model with a commercial solver.

The main contribution of this research is threefold. Firstly, a new operational model for the pickup and delivery problem is presented. Although this is a very specific case of a full truckload vehicle and scheduling problem, this is a new glance at the possibilities of using transshipment locations to support distribution. Considering that the use of transshipment locations is part of a new logistics paradigm, this work surely presents a fresh approach to vehicle routing and scheduling problems. Additionally, we unified the best of long-haul and short-haul policies, resulting in a broader concept which can offer more service types without jeopardizing the comfort and working conditions of the drivers as well as the compliance with the legislation. Secondly, we provide an overview over different parts of the VRP literature. As this paper unfolds, it becomes clear that this problem includes a set of features that is present in several problems. In some cases, the similarities may only be physically noticeable whereas in other cases there are similarities only in the methodologies and modeling techniques used. Thirdly, we provide a solution approach that is able to beat one the best commercial solvers on the market. In fact, the developed matheuristic is able to obtain better solutions and converges more rapidly.

Regarding real-world results, although we are not allowed to reveal detailed information, it is worth mentioning that the company obtained a reduction of 6 percent in the cost per shipment for the requests served in the year after the implementation of the transshipment paradigm. This reduction is computed relatively to the year before the implementation, where the requests were delivered following a direct shipment strategy.

Finally, taking into account the lack of variety of papers addressing the tractor and trailer concept, we consider that tackling problems with the concept of modular vehicle parts may be an interesting field of research since these ideas can provide greater flexibility, occupation and efficiency. Furthermore, it would be interesting to extend this study to the case where request paths are not given in advance. In this extended version, the mathematical model would have to make additional decisions. The routing part becomes more complex and the synchronization possibilities are more diverse. Therefore, it would be interesting to test if our solution approach would be able to efficiently explore this new search space as it is larger and more difficult to be explored.

@&#ACKNOWLEDGMENTS@&#

This work is partially financed by the ERDF - European Regional Development Fund through the COMPETE Programme (operational programme for competitiveness) and by National Funds through the FCT - Funda§cão para a Ciência e a Tecnologia (Portuguese Foundation for Science and Technology) within project “FCOMP-01-0124-FEDER-037281”.

 

@&#REFERENCES@&#

