@&#MAIN-TITLE@&#Optimal appointment scheduling in continuous time: The lag order approximation method

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We study appointment scheduling systems in continuous time.


                        
                        
                           
                           The objective is to schedule customers balancing waiting and idle time and lateness.


                        
                        
                           
                           The optimal solution of such systems is hard to obtain.


                        
                        
                           
                           We propose the lag order approximation method to reduce the computational complexity.


                        
                        
                           
                           Numerical results show that the method is fast and nearly optimal.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Appointment scheduling

Heuristics

Lag order approximation method

Utility functions

@&#ABSTRACT@&#


               
               
                  We study appointment scheduling problems in continuous time. A finite number of clients are scheduled such that a function of the waiting time of clients, the idle time of the server, and the lateness of the schedule is minimized. The optimal schedule is notoriously hard to derive within reasonable computation times. Therefore, we develop the lag order approximation method, that sets the client’s optimal appointment time based on only a part of his predecessors. We show that a lag order of two, i.e., taking two predecessors into account, results in nearly optimal schedules within reasonable computation times. We illustrate our approximation method with an appointment scheduling problem in a CT-scan area.
               
            

@&#INTRODUCTION@&#

In this paper we study appointment scheduling problems in continuous time. In our setting, we refer to appointment scheduling as the phenomenon in which a service provider is able to schedule arriving clients with the help of an appointment schedule; that is, a series of appointment times. The appointment time then offers the client a point in time upon which he or she should actually arrive to receive service.

It may be convenient to present this phenomenon as an appointment scheduling problem in two stages: in the first stage the provider schedules the appointments and in the second stage the server executes the service. In practice, one can imagine that the clients (or jobs) present themselves in random order at the first stage, and request the service provider to schedule them for a service. This paper discusses the decision making process of a service provider, in the first stage, on how to choose the appointment times of N clients that are to be scheduled to the server in the second stage. We develop a new approximation method that is generic in terms of the client’s service-time distribution, numerically tractable for large problem instances while offering good performance.

Applications of an appointment scheme to schedule clients can be found in manufacturing (e.g., Wang, 1993), services (e.g., Kemper, Klaassen, & Mandjes, 2014), and health care (e.g., Cayirli & Veral, 2003). The basic setting in our paper, as described in the above, belongs to the so-called – static – class of appointment scheduling approaches, in which a finite number of appointments are scheduled prior to the beginning of the actual service, see Cayirli and Veral (2003). The origin of such an approach dates back to the work of Bailey (1952) and Welch and Bailey (1952), and generated substantial interest over the last decades.

Suppose in the first stage, the service provider is given N clients with random service times that are to be scheduled on a certain working day. Furthermore, suppose that the service-time distribution and clients’ loss function due to waiting time, as well as the server’s loss function, in terms of idle time and possible lateness after the final client (overtime), are known. The goal is then to minimize a convex combination of, possibly weighted, sum of the server’s idle time and lateness (overtime), and the client’s waiting time. Exact calculations of the optimal appointment times is problematic when there are many clients, since it requires the evaluation of high-dimensional integrals (Denton & Gupta, 2003).

Most of the contributions on appointment scheduling are based on exponential service times, such as in Wang (1999), Kaandorp and Koole (2007), Hassin and Mendel (2008) and Turkcan, Zeng, Muthuraman, and Lawley (2011); or a phase-type distribution for the service times, such as in Wang (1997), Vanden Bosch, Dietz, and Simeoni (1999) and Kuiper, Kemper, and Mandjes (2014). Also, it is common to assume independent and identically distributed random variables for the service times. It is reasonable to assume that the service-time distribution of the clients are independent, since clients call in at random for an appointment in the first stage. However, in practice the service times often do not follow an exponential distribution, let alone the service-time distributions of the arriving clients are identical (although Wang (1999) allows for service-time distributions with different service rates).

Simulation approaches are used to evaluate the performance of heuristics; see, for example, Ho and Lau (1992), Robinson and Chen (2003), and references mentioned in the overview of Günal and Pidd (2010). We note, however, that the evaluation of heuristics with the help of simulation studies can be a time consuming effort or is often limited to specific service settings, including service-time distributions and cost ratios (Yang, Lau, & Quek, 1998). To the best of our knowledge, the number of studies that use simulation in order to trace an optimal schedule are modest, but for an example see Zhu, Heng, and Teow (2012).

An alternative approach to deal with the high-dimensional optimization problem is to impose restrictions, such as equally-spaced interappointment times, see for example Hassin and Mendel (2008). Note that, however, in case of nonidentical service-time distribution it is argued that one should assign different interappointment times to different clients (Wang, 1999).

We also mention the sequential approach of Kemper et al. (2014), that enables the service provider to sequentially optimize the client’s appointment time. The sequential approach clearly reduces the dimensions of the optimization problem. It is shown to be generic and flexible (i.e., nonidentical among clients) in terms of service-time distributions and loss functions, and may include real-life phenomena such as no-shows and walk-in clients. However, the computation gets involved for larger schedules in case of service-time distributions other than the exponential.

One may deal with different service-time distributions, and trace, in addition, an optimal sequence in case of a small schedule; see Weiss (1990) and Wang (1999), or slightly larger schedules (up to 16 clients) with a generalized lambda distribution, see Robinson and Chen (2003). In practice, however, one often encounters larger schemes, such as a car glass repair service or a dentist practice, which schedule up to 30 appointments per day.

Given the importance and relevance of the problem, and the fact that there is, to the best of our knowledge, no clean solution available, we decided to explore an alternative approach. Our approach is able to deal with general service-time distributions, such as the lognormal (Klassen & Rohleder, 1996) or the Weibull (Babes & Sarma, 1991) as often seen in practice, and larger schedules. In our approach the optimal appointment times depend only on a limited number of clients, that arrived previously to the client’s appointment, leading to an optimization problem with reduced dimensionality. For example, we optimize a client’s appointment time by minimizing his expected waiting times, corresponding idle times, and lateness of the server, while taking into account the effects of just two preceding clients. We refer to this method as the lag order approximation method in which the lag order refers to the number of predecessors taken into account.

The organization of the paper is as follows. In Section 2 we mathematically formulate the problem. The lag order approximation method is then presented in Section 3. The performance of the lag order approximation method is evaluated in Section 4 by studying some numerical examples and a real-life example from a radiology department. The results show that our method needs significantly less computational effort, and is able to derive appointment schedules that are close to optimal. Finally, we conclude and discuss directions for further research in Section 5.

Consider a service system at which N clients arrive at specified moments in time, i.e., client n arrives at time 
                        
                           
                              
                                 t
                              
                              
                                 n
                              
                           
                        
                      with 
                        
                           
                              
                                 t
                              
                              
                                 n
                              
                           
                           ∈
                           
                              
                                 R
                              
                              
                                 +
                              
                           
                        
                      for 
                        
                           n
                           =
                           1
                           ,
                           …
                           ,
                           N
                        
                     . Each client has a service-time requirement, which is denoted by the random variable 
                        
                           
                              
                                 B
                              
                              
                                 n
                              
                           
                        
                      for client n. The service system has a single server and if upon arrival client n finds the server idle, he immediately starts his service. If the server is busy, then client n awaits his turn until all clients that are scheduled before client n have finished their service. We assume that both the clients and the server are punctual, and we do not allow for no-shows and walk-in clients. For studies that do include these phenomena, although in a different setting, we refer to Kemper et al. (2014) and references therein.

The vector 
                        
                           (
                           
                              
                                 t
                              
                              
                                 1
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 t
                              
                              
                                 N
                              
                           
                           )
                        
                      is called an appointment schedule for this service system. For a given schedule, we denote by 
                        
                           
                              
                                 I
                              
                              
                                 n
                              
                           
                        
                      the time that the server has been idle upon start of the service of client n. We denote by 
                        
                           
                              
                                 W
                              
                              
                                 n
                              
                           
                        
                      the waiting time of client n. Note that, the sojourn time 
                        
                           
                              
                                 S
                              
                              
                                 n
                              
                           
                        
                      of client n can then be defined by 
                        
                           
                              
                                 S
                              
                              
                                 n
                              
                           
                           =
                           
                              
                                 W
                              
                              
                                 n
                              
                           
                           +
                           
                              
                                 B
                              
                              
                                 n
                              
                           
                        
                     . In most settings the planning horizon (that is, the time span, T, in which clients can be scheduled) is finite. However, it can happen that after the planning horizon there are still clients that need to be served. We therefore define the lateness L as the overtime that the server has to make in order to finish all services. It is useful to define the interappointment times by
                        
                           
                              
                                 
                                    x
                                 
                                 
                                    n
                                 
                              
                              =
                              
                                 
                                    t
                                 
                                 
                                    n
                                    +
                                    1
                                 
                              
                              -
                              
                                 
                                    t
                                 
                                 
                                    n
                                 
                              
                              ,
                              
                              n
                              =
                              1
                              ,
                              …
                              ,
                              N
                              -
                              1
                              .
                           
                        
                     
                  

The idleness 
                        
                           
                              
                                 I
                              
                              
                                 n
                              
                           
                        
                      can then be written as
                        
                           (1)
                           
                              
                                 
                                    I
                                 
                                 
                                    n
                                 
                              
                              =
                              
                                 max
                              
                              {
                              
                                 
                                    x
                                 
                                 
                                    n
                                    -
                                    1
                                 
                              
                              -
                              
                                 
                                    S
                                 
                                 
                                    n
                                    -
                                    1
                                 
                              
                              ,
                              0
                              }
                              ,
                              
                              n
                              =
                              2
                              ,
                              …
                              ,
                              N
                              .
                           
                        
                     
                  

The waiting time 
                        
                           
                              
                                 W
                              
                              
                                 n
                              
                           
                        
                      is given by
                        
                           (2)
                           
                              
                                 
                                    W
                                 
                                 
                                    n
                                 
                              
                              =
                              
                                 max
                              
                              {
                              
                                 
                                    S
                                 
                                 
                                    n
                                    -
                                    1
                                 
                              
                              -
                              
                                 
                                    x
                                 
                                 
                                    n
                                    -
                                    1
                                 
                              
                              ,
                              0
                              }
                              ,
                              
                              n
                              =
                              2
                              ,
                              …
                              ,
                              N
                              .
                           
                        
                     From (1) and (2) follow 
                        
                           
                              
                                 W
                              
                              
                                 n
                              
                           
                           +
                           
                              
                                 I
                              
                              
                                 n
                              
                           
                           =
                           |
                           
                              
                                 S
                              
                              
                                 n
                                 -
                                 1
                              
                           
                           -
                           
                              
                                 x
                              
                              
                                 n
                                 -
                                 1
                              
                           
                           |
                        
                      for 
                        
                           n
                           >
                           1
                        
                     . The lateness can be expressed as
                        
                           (3)
                           
                              L
                              =
                              
                                 max
                              
                              {
                              
                                 
                                    t
                                 
                                 
                                    N
                                 
                              
                              +
                              
                                 
                                    S
                                 
                                 
                                    N
                                 
                              
                              -
                              T
                              ,
                              0
                              }
                              .
                           
                        
                     Clearly, it is reasonable to assume that 
                        
                           
                              
                                 t
                              
                              
                                 1
                              
                           
                           =
                           0
                        
                     , so that both 
                        
                           
                              
                                 W
                              
                              
                                 1
                              
                           
                           =
                           0
                        
                      and 
                        
                           
                              
                                 I
                              
                              
                                 1
                              
                           
                           =
                           0
                        
                     . If 
                        
                           
                              
                                 t
                              
                              
                                 1
                              
                           
                           >
                           0
                        
                      then 
                        
                           
                              
                                 W
                              
                              
                                 1
                              
                           
                           =
                           0
                        
                      as the first client still arrives on an empty system, but 
                        
                           
                              
                                 I
                              
                              
                                 1
                              
                           
                           >
                           0
                        
                      because the service provider has to wait 
                        
                           
                              
                                 t
                              
                              
                                 1
                              
                           
                        
                      amount of time. Moreover, it holds that 
                        
                           
                              
                                 W
                              
                              
                                 n
                              
                           
                           ·
                           
                              
                                 I
                              
                              
                                 n
                              
                           
                           =
                           0
                        
                     , 
                        
                           n
                           =
                           1
                           ,
                           …
                           ,
                           N
                        
                     .

The objective of the appointment scheduling problem is to find a schedule 
                        
                           (
                           
                              
                                 t
                              
                              
                                 2
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 t
                              
                              
                                 N
                              
                           
                           )
                        
                     , or equivalently 
                        
                           (
                           
                              
                                 x
                              
                              
                                 1
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 x
                              
                              
                                 N
                                 -
                                 1
                              
                           
                           )
                        
                     , such that a loss function LF, which depends on 
                        
                           
                              
                                 I
                              
                              
                                 n
                              
                           
                        
                     , 
                        
                           
                              
                                 W
                              
                              
                                 n
                              
                           
                        
                     , and L, is minimized. Throughout the paper, we assume that LF has the form
                        
                           (4)
                           
                              LF
                              (
                              
                                 
                                    x
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    x
                                 
                                 
                                    N
                                    -
                                    1
                                 
                              
                              )
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       n
                                       =
                                       2
                                    
                                    
                                       N
                                    
                                 
                              
                              
                                 
                                    
                                       E
                                       f
                                       (
                                       
                                          
                                             I
                                          
                                          
                                             n
                                          
                                       
                                       )
                                       +
                                       E
                                       g
                                       (
                                       
                                          
                                             W
                                          
                                          
                                             n
                                          
                                       
                                       )
                                    
                                 
                              
                              +
                              E
                              h
                              (
                              L
                              )
                              ,
                           
                        
                     with 
                        
                           f
                           (
                           ·
                           )
                           ,
                           
                           g
                           (
                           ·
                           )
                        
                     , and 
                        
                           h
                           (
                           ·
                           )
                        
                      nondecreasing continuous functions.

In this section we reveal the lag order approximation method in its general form. Basically, the optimal schedule is found through the optimization of (4), that is
                        
                           (5)
                           
                              
                                 
                                    
                                       min
                                    
                                    
                                       
                                          
                                             x
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       …
                                       ,
                                       
                                          
                                             x
                                          
                                          
                                             N
                                             -
                                             1
                                          
                                       
                                    
                                 
                              
                              LF
                              (
                              
                                 
                                    x
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    x
                                 
                                 
                                    N
                                    -
                                    1
                                 
                              
                              )
                           
                        
                     The waiting time of client n is a random variable depending on 
                        
                           
                              
                                 x
                              
                              
                                 1
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 x
                              
                              
                                 n
                                 -
                                 1
                              
                           
                        
                     , i.e., all the predecessors of client n are incorporated, 
                        
                           
                              
                                 W
                              
                              
                                 n
                              
                           
                           =
                           
                              
                                 W
                              
                              
                                 n
                              
                           
                           (
                           
                              
                                 x
                              
                              
                                 1
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 x
                              
                              
                                 n
                                 -
                                 1
                              
                           
                           )
                        
                     . The main idea of the lag order approximation method is to neglect part of the predecessors that influence the waiting time (and idle time and lateness) of the loss function in (4), and express the waiting time for each client n in terms of its K predecessors, where K is the number of lags taken into the optimization. However, in the beginning there are, of course, less than K predecessors included. Therefore we define 
                        
                           k
                           =
                           min
                           {
                           K
                           ,
                           n
                           -
                           1
                           }
                        
                     , so that the computation of the n-th client’s waiting time depends only on 
                        
                           
                              
                                 x
                              
                              
                                 n
                                 -
                                 k
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 x
                              
                              
                                 n
                                 -
                                 1
                              
                           
                        
                     , resulting in 
                        
                           
                              
                                 
                                    
                                       W
                                    
                                    
                                       ∼
                                    
                                 
                              
                              
                                 n
                              
                           
                           =
                           
                              
                                 W
                              
                              
                                 n
                              
                           
                           (
                           
                              
                                 x
                              
                              
                                 n
                                 -
                                 k
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 x
                              
                              
                                 n
                                 -
                                 1
                              
                           
                           )
                        
                     . Similarly, we express the idle times and lateness as 
                        
                           
                              
                                 
                                    
                                       I
                                    
                                    
                                       ∼
                                    
                                 
                              
                              
                                 n
                              
                           
                           =
                           
                              
                                 I
                              
                              
                                 n
                              
                           
                           (
                           
                              
                                 x
                              
                              
                                 n
                                 -
                                 k
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 x
                              
                              
                                 n
                                 -
                                 1
                              
                           
                           )
                        
                      and 
                        
                           
                              
                                 L
                              
                              
                                 ∼
                              
                           
                           =
                           L
                           (
                           
                              
                                 x
                              
                              
                                 n
                                 -
                                 k
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 x
                              
                              
                                 n
                                 -
                                 1
                              
                           
                           )
                        
                     . The optimization with respect to this partial information in (4) is called the lag order approximation method of order K, which in essence minimizes
                        
                           (6)
                           
                              
                                 
                                    
                                       min
                                    
                                    
                                       
                                          
                                             x
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       …
                                       ,
                                       
                                          
                                             x
                                          
                                          
                                             N
                                             -
                                             1
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    LF
                                 
                                 
                                    K
                                 
                              
                              (
                              
                                 
                                    x
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    x
                                 
                                 
                                    N
                                    -
                                    1
                                 
                              
                              )
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       n
                                       =
                                       2
                                    
                                    
                                       N
                                    
                                 
                              
                              
                                 
                                    
                                       E
                                       f
                                       (
                                       
                                          
                                             
                                                
                                                   I
                                                
                                                
                                                   ∼
                                                
                                             
                                          
                                          
                                             n
                                          
                                       
                                       )
                                       +
                                       E
                                       g
                                       (
                                       
                                          
                                             
                                                
                                                   W
                                                
                                                
                                                   ∼
                                                
                                             
                                          
                                          
                                             n
                                          
                                       
                                       )
                                    
                                 
                              
                              +
                              E
                              h
                              (
                              
                                 
                                    L
                                 
                                 
                                    ∼
                                 
                              
                              )
                              .
                           
                        
                     Note that 
                        
                           K
                           =
                           N
                           -
                           1
                        
                      corresponds with the original optimization problem of (4). The advantage of this approach is that by limiting the dependence on predecessors we are able to use convolution formulas to compute the 
                        
                           
                              
                                 
                                    
                                       W
                                    
                                    
                                       ∼
                                    
                                 
                              
                              
                                 n
                              
                           
                        
                      and 
                        
                           
                              
                                 
                                    
                                       I
                                    
                                    
                                       ∼
                                    
                                 
                              
                              
                                 n
                              
                           
                        
                     , and the schedule’s lateness 
                        
                           
                              
                                 L
                              
                              
                                 ∼
                              
                           
                        
                     .

In this subsection, we present two loss functions that are commonly used in the literature. The loss function includes the expected waiting times, the expected idle times, and the expected lateness with different weighing factors. Most literature use the same weighing factors for the waiting times and the idleness, see Fries and Marathe (1981) for a detailed discussion on how to choose these factors. In this paper we adopt the same convention but remark that our method does not require it.

One often chooses general polynomial function and sets 
                           
                              f
                              (
                              x
                              )
                              =
                              
                                 
                                    α
                                 
                                 
                                    1
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    λ
                                 
                              
                              ,
                              
                              g
                              (
                              x
                              )
                              =
                              
                                 
                                    α
                                 
                                 
                                    2
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    λ
                                 
                              
                           
                         and 
                           
                              h
                              (
                              x
                              )
                              =
                              β
                              x
                           
                        , where 
                           
                              
                                 
                                    α
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                              
                                 
                                    α
                                 
                                 
                                    2
                                 
                              
                              ,
                              
                              β
                              ⩾
                              0
                           
                        , and 
                           
                              λ
                              >
                              0
                           
                        . However, setting 
                           
                              
                                 
                                    α
                                 
                                 
                                    1
                                 
                              
                              =
                              
                                 
                                    α
                                 
                                 
                                    2
                                 
                              
                           
                         and taking 
                           
                              λ
                              =
                              1
                              ,
                              2
                           
                         gives us two remarkable insights, which we will refer to as the absolute value loss function and the quadratic loss function. Note that in these cases the idle and waiting times are equally weighted.


                        Absolute value loss function. The absolute value loss function LF can be obtained by taking 
                           
                              f
                              (
                              x
                              )
                              =
                              g
                              (
                              x
                              )
                              =
                              α
                              x
                           
                         and 
                           
                              h
                              (
                              x
                              )
                              =
                              β
                              x
                           
                        , with 
                           
                              α
                              ,
                              β
                              ∈
                              
                                 
                                    R
                                 
                                 
                                    +
                                 
                              
                           
                        . We know from Section 2 that the loss function reduces to
                           
                              
                                 LF
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       x
                                    
                                    
                                       N
                                       -
                                       1
                                    
                                 
                                 )
                                 =
                                 α
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          n
                                          =
                                          1
                                       
                                       
                                          N
                                          -
                                          1
                                       
                                    
                                 
                                 E
                                 |
                                 
                                    
                                       S
                                    
                                    
                                       n
                                    
                                 
                                 -
                                 
                                    
                                       x
                                    
                                    
                                       n
                                    
                                 
                                 |
                                 +
                                 β
                                 E
                                 L
                                 .
                              
                           
                        This loss function penalizes deviations from the planning (either caused by waiting or by idling) linearly. It has been used (with 
                           
                              β
                              =
                              0
                           
                        ) by, e.g., Wang (1997), Vanden Bosch et al. (1999), Kaandorp and Koole (2007) and Kuiper et al. (2014).


                        Quadratic loss function. The quadratic loss function LF penalizes the deviation from the schedule quadratically instead of linearly. This can be achieved by taking.


                        
                           
                              f
                              (
                              x
                              )
                              =
                              g
                              (
                              x
                              )
                              =
                              α
                              
                                 
                                    x
                                 
                                 
                                    2
                                 
                              
                           
                         and 
                           
                              h
                              (
                              x
                              )
                              =
                              β
                              
                                 
                                    x
                                 
                                 
                                    2
                                 
                              
                           
                        . Since 
                           
                              
                                 
                                    W
                                 
                                 
                                    n
                                 
                                 
                                    2
                                 
                              
                              +
                              
                                 
                                    I
                                 
                                 
                                    n
                                 
                                 
                                    2
                                 
                              
                              =
                              
                                 
                                    (
                                    
                                       
                                          S
                                       
                                       
                                          n
                                          -
                                          1
                                       
                                    
                                    -
                                    
                                       
                                          x
                                       
                                       
                                          n
                                          -
                                          1
                                       
                                    
                                    )
                                 
                                 
                                    2
                                 
                              
                           
                         for 
                           
                              n
                              >
                              1
                           
                        , the loss function reduces to
                           
                              
                                 LF
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       x
                                    
                                    
                                       N
                                       -
                                       1
                                    
                                 
                                 )
                                 =
                                 α
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          n
                                          =
                                          1
                                       
                                       
                                          N
                                          -
                                          1
                                       
                                    
                                 
                                 E
                                 
                                    
                                       
                                          
                                             
                                                
                                                   S
                                                
                                                
                                                   n
                                                
                                             
                                             -
                                             
                                                
                                                   x
                                                
                                                
                                                   n
                                                
                                             
                                          
                                       
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 β
                                 E
                                 L
                                 .
                              
                           
                        This loss function has been used (with 
                           
                              β
                              =
                              0
                           
                        ) by, e.g., Schild and Fredman (1961) and Kemper et al. (2014).

To compute the solution 
                           
                              
                                 
                                    x
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    x
                                 
                                 
                                    N
                                    -
                                    1
                                 
                              
                           
                         through the lag order approximation method of order K, which we will refer to as lag order K throughout the rest of the paper, we use the following derivations. In case of lag order 0 the sojourn time distribution for each client is equal to his service time, i.e., 
                           
                              
                                 
                                    S
                                 
                                 
                                    n
                                 
                              
                              =
                              
                                 
                                    B
                                 
                                 
                                    n
                                 
                              
                           
                        . Obviously, the interdependence between interappointments is removed in this way. This is different in the case of lag order I. Then the sojourn time distribution are linked through the waiting time of the previous client 
                           
                              n
                              >
                              1
                           
                         (for 
                           
                              n
                              =
                              1
                           
                         we use the lag order 0: 
                           
                              
                                 
                                    S
                                 
                                 
                                    1
                                 
                              
                              =
                              
                                 
                                    B
                                 
                                 
                                    1
                                 
                              
                           
                        )
                           
                              (7)
                              
                                 
                                    
                                       S
                                    
                                    
                                       n
                                    
                                 
                                 =
                                 
                                    
                                       B
                                    
                                    
                                       n
                                    
                                 
                                 +
                                 
                                    
                                       W
                                    
                                    
                                       n
                                    
                                 
                                 ≈
                                 
                                    
                                       B
                                    
                                    
                                       n
                                    
                                 
                                 +
                                 
                                    
                                       
                                          
                                             W
                                          
                                          
                                             ∼
                                          
                                       
                                    
                                    
                                       n
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       n
                                       -
                                       1
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       B
                                    
                                    
                                       n
                                    
                                 
                                 +
                                 
                                    max
                                 
                                 {
                                 
                                    
                                       B
                                    
                                    
                                       n
                                       -
                                       1
                                    
                                 
                                 -
                                 
                                    
                                       x
                                    
                                    
                                       n
                                       -
                                       1
                                    
                                 
                                 ,
                                 0
                                 }
                                 .
                              
                           
                        In lag order II the interdependence increases to the waiting times of the two patients before client 
                           
                              n
                              >
                              2
                           
                         (for 
                           
                              n
                              =
                              2
                           
                         we use (7))
                           
                              (8)
                              
                                 
                                    
                                       S
                                    
                                    
                                       n
                                    
                                 
                                 =
                                 
                                    
                                       B
                                    
                                    
                                       n
                                    
                                 
                                 +
                                 
                                    
                                       W
                                    
                                    
                                       n
                                    
                                 
                                 ≈
                                 
                                    
                                       B
                                    
                                    
                                       n
                                    
                                 
                                 +
                                 
                                    
                                       
                                          
                                             W
                                          
                                          
                                             ∼
                                          
                                       
                                    
                                    
                                       n
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       n
                                       -
                                       2
                                    
                                 
                                 ,
                                 
                                    
                                       x
                                    
                                    
                                       n
                                       -
                                       1
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       B
                                    
                                    
                                       n
                                    
                                 
                                 +
                                 
                                    max
                                 
                                 {
                                 
                                    
                                       B
                                    
                                    
                                       n
                                       -
                                       1
                                    
                                 
                                 +
                                 
                                    max
                                 
                                 {
                                 
                                    
                                       B
                                    
                                    
                                       n
                                       -
                                       2
                                    
                                 
                                 -
                                 
                                    
                                       x
                                    
                                    
                                       n
                                       -
                                       2
                                    
                                 
                                 ,
                                 0
                                 }
                                 -
                                 
                                    
                                       x
                                    
                                    
                                       n
                                       -
                                       1
                                    
                                 
                                 ,
                                 0
                                 }
                                 .
                              
                           
                        Since we have now deduced approximation of the client specific sojourn times we can implement those in (1)–(3) to compute the waiting and idle times, and the lateness respectively. The algorithms to get to optimal lag order K solutions are written in MATLAB R2012b. This program finds the optimal interarrival times that minimizes the lag order K approximation of either the linear loss function or the quadratic loss function, for any service-time distribution, exploiting MATLAB R2012b’s built-in minimization routines.

We outline the algorithm for lag order II (the procedure can be easily adapted to incorporate other lag orders). The program basically contains three stages.
                           
                              1.
                              The lag ordered loss functions are implemented in a for loop, using the lag order 0 for the second client; lag order I for the third client, c.f. (7); and the lag order II for the remaining clients, c.f. (8).

The sum of all losses is computed using MATLAB’s adaptive Simpson quadrature routines (tolerance is 
                                    
                                       
                                          
                                             10
                                          
                                          
                                             -
                                             5
                                          
                                       
                                    
                                 ), over the different lag ordered loss functions.

Finally, we jointly optimize the aggregate over 
                                    
                                       N
                                       -
                                       1
                                    
                                  interappointment times with tolerance level of 
                                    
                                       
                                          
                                             10
                                          
                                          
                                             -
                                             4
                                          
                                       
                                    
                                  and a start vector consisting of ones with dimension 
                                    
                                       N
                                       -
                                       1
                                    
                                 .

In order to simulate the different distributions we apply a similar approach. Instead of computing integrals we now use random numbers in a Monte Carlo Simulation study. The procedure is as follows: in a set of 
                           
                              N
                              ×
                              
                                 
                                    10
                                 
                                 
                                    5
                                 
                              
                           
                         random numbers of a particular distribution one minimizes the loss function over the interappointments 
                           
                              
                                 
                                    x
                                 
                                 
                                    1
                                 
                              
                              ,
                              …
                              
                                 
                                    x
                                 
                                 
                                    N
                                    -
                                    1
                                 
                              
                           
                        . We repeat this 100 times (so in total 
                           
                              N
                              ×
                              
                                 
                                    10
                                 
                                 
                                    7
                                 
                              
                           
                         random numbers are needed) to get a sample mean, 
                           
                              
                                 
                                    LF
                                 
                                 
                                    ‾
                                 
                              
                           
                        , and a sample variance, 
                           
                              
                                 
                                    s
                                 
                                 
                                    LF
                                 
                                 
                                    2
                                 
                              
                           
                        , of system’s losses. The Central Limit Theorem dictates that with 95% confidence the average costs lie in the interval given by 
                           
                              
                                 
                                    LF
                                 
                                 
                                    ‾
                                 
                              
                              ±
                              
                                 
                                    z
                                 
                                 
                                    0.05
                                 
                              
                              
                                 
                                    
                                       
                                          s
                                       
                                       
                                          LF
                                       
                                    
                                 
                                 
                                    10
                                 
                              
                           
                        , which then can be compared with the lag order method.

In this paper we study the lag order approach for a broad range of settings, that is, for various service-time distributions, and for both linear and quadratic loss functions. In this section we explore the approach for exponential service times. Then, in Section 4, we study the lognormal and Weibull service-time distributions. For all results generated in the various studies in this paper, the simulation study concludes when the estimated values of the loss function exhibit a confidence interval of 1‰of the estimates.

We illustrate the results of our lag order approximation method for a system with 
                           
                              N
                              =
                              11
                           
                         clients in Fig. 1
                        . Here, we assume that the service times of the clients are independent and exponentially distributed (i.i.d.) with parameter 
                           
                              
                                 
                                    μ
                                 
                                 
                                    n
                                 
                              
                              =
                              1
                           
                         for 
                           
                              n
                              =
                              1
                              ,
                              …
                              ,
                              N
                           
                        . The system operates under the quadratic loss function, i.e., the quadratic LF with 
                           
                              α
                              =
                              1
                           
                         and 
                           
                              β
                              =
                              0
                           
                        . Fig. 1 displays the optimal slot sizes per arriving client for various lag orders. The figure supports the conclusion that optimal scheduling according to lag order 0 corresponds to setting each interappointment time equal to the average service time, which is in essence a 
                           
                              D
                              /
                              M
                              /
                              1
                           
                         queue with load 1.

When the lag order increases the approach results in larger slot sizes (or, interappointment times); for example, for the first slot (the time between the first and second appointment) the slot size increases from about 1.18 based on a lag order I to a slot size of about 1.32 based on a lag order IV. Furthermore, for lower lag orders, between I and III, the slot sizes alternate in the beginning of the schedule and towards the end of the schedule. For higher lag orders, from order IV and further, the slots in the middle of the scheme are larger than the slots in the beginning and the end of the schedule.

The full lag order corresponds to a lag order of 
                           
                              N
                              -
                              1
                           
                        , i.e., all information is taken into account in deciding upon the slot sizes. The results of the full lag order correspond to the results of Wang (1997), where we extended the algorithm to handle quadratic loss functions. The results show that as the lag order increases, the appointment schedule converges to the optimal schedule. Fig. 1 also shows that the lag order is ‘optimistic’ in its next planned appointment time due to negligence of the waiting time, which is in favor of the service provider. As seen in the figure, the slot sizes increase, then decrease, and then increase and decrease again, hence exhibiting a non-unimodal pattern. However, as the lag order increases, this effect diminishes. In fact, the optimal appointment schedule (the full lag order) does not show this behavior, but instead follows a so-called dome shape which is a well-known pattern in the literature on appointment scheduling, see, e.g., Kaandorp and Koole (2007).


                        Table 1
                         summarizes the results of the lag order method in practice by displaying the value of the loss function for the first two lag orders including the full lag order obtained by extensive simulation. We see that increasing the lag order reduces the expected total loss of the system, which approaches the loss in the full lag order.

In this section we will apply the lag order approximation method to a realistic appointment scheduling problems. In the previous section, we were able to compute the optimal schedule for exponentially distributed service times. However, empirical evidence shows that this setting is too restrictive and unrealistic, see, e.g., Cayirli and Veral (2003). Commonly seen service-time distributions in realistic settings are the Weibull and the lognormal distribution. We study these distributions in Section 4.1. Then, in Section 4.2 we apply our approach to a real-life example of a CT-scan in a hospital.

According to Cayirli and Veral (2003) service-time distributions have a typical coefficient of variation ranging from 0.35 to 0.85. Given this range, we illustrate our method by using the Weibull and lognormal distribution with reasonable coefficients of variation: 0.35, 0.5, and 0.85.

In Tables 2 and 3
                        
                         we show the results of the various lag orders to this problem. The results are compared to an optimal schedule derived through simulation only, as described in the background paragraph of Section 3.

For each approach in our study the tables report the values of the loss function, the difference between the LF values of the approach and that of the simulated optimal value, and the computer’s CPU time of each method, where for Example 4E3 means 
                           
                              4
                              ×
                              
                                 
                                    10
                                 
                                 
                                    3
                                 
                              
                           
                        .

From the tables we conclude that the application of the lag order approximation method results in a small loss of quality of the appointment schedule. In any case, linear or quadratic loss and either for Weibull or lognormal service-time distribution, our approach with lag order 0 generates schedules that are at least about 63% from the optimal LF value, and hence the lag order 0 is not useful in designing optimal appointment schedules which is in line with the results from the example in previous section (i.e., exponential service distribution). In case of a linear loss function (and either lognormal or Weibull service-time distribution), a lag order I approximation generates schedules that are within 25% from the optimal LF value, and that are more than 10, even 100 times in case of a quadratic loss function, faster to construct in terms of (computation) time, c.f. Table 1.

Furthermore, from the tables we see that the lag order II generates schedules that are reasonably close to the optimal LF value (around 2–7%). However, the computation time may not be sufficiently smaller in the case of linear loss, while with quadratic losses the lag order approximation method results in a reduction of computation time: about 3 times faster when 
                           
                              CV
                              =
                              0.85
                           
                        , up to about 20 times fast in case of 
                           
                              CV
                              =
                              0.35
                           
                        . We note that the code used for the application of the lag order method is programmed straightforwardly, see Section 3.

In Figs. 2 and 3
                        
                         we illustrate the schedules derived by the lag order methods and the simulated optimal in both a Weibull and lognormal setting with coefficient of variation equal to 0.5. We see that the typical shapes of the lag order methods does not depend on actual distribution nor loss function.

In the following section we apply our approximation approach to a realistic example, wherein the clients loss function is quadratic. The service-time distribution follows a Weibull distribution.

Let us consider a real-life scheduling problem in a CT-scan area, with the following typical parameters: 
                           
                              N
                              =
                              20
                              ,
                              
                              T
                              =
                              300
                           
                        
                        (min). As loss function we choose the quadratic loss function with weights 
                           
                              
                                 
                                    α
                                 
                                 
                                    1
                                 
                              
                              =
                              0.75
                              ,
                              
                              
                                 
                                    α
                                 
                                 
                                    2
                                 
                              
                              =
                              0.25
                           
                        , and 
                           
                              β
                              =
                              1.5
                           
                        . Thus, we have
                           
                              
                                 LF
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          20
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                3
                                             
                                             
                                                4
                                             
                                          
                                          E
                                          
                                             
                                                I
                                             
                                             
                                                i
                                             
                                             
                                                2
                                             
                                          
                                          +
                                          
                                             
                                                1
                                             
                                             
                                                4
                                             
                                          
                                          E
                                          
                                             
                                                W
                                             
                                             
                                                i
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                 
                                 +
                                 
                                    
                                       6
                                    
                                    
                                       4
                                    
                                 
                                 E
                                 L
                                 .
                              
                           
                        We obtained service-time data from the Deventer Hospital described in De Mast, Kemper, Does, Mandjes, and Van der Bijl (2011). The best fit to this data results in a lognormal distribution with scale parameter 
                           
                              μ
                              =
                              2.4
                           
                         and location parameter 
                           
                              σ
                              =
                              0.58
                           
                        . The coefficient of variation is 0.63.

In order to compare our method, we state several approximation approaches in Table 4
                        . The table includes the hospital’s current schedule and the (full lag order) simulated optimal schedule. For each approach in our study the table reports the values of the loss function, the difference between the LF values of the approach and that of the simulated optimal value, and the computer’s CPU time of the simulation study.

We observe that, given the loss function, the current schedule differs about 20% compared to the simulated optimal value of the LF, that is, the total loss of the system. Also, we see that the lag order I and lag order II differ about 17% and 7.7% from the optimal simulated outcome of the LF. The advantage of the lag order method is that it significantly gains in computation time compared to the simulated optimal value. Finally, we observe that an equidistant approximation method gets close to the simulated optimal results, but it takes our computer 2.5 times more CPU effort to get to these results.

@&#CONCLUSION@&#

In this paper we study the problem of appointment scheduling of N clients with a finite planning horizon. The clients are punctual and can be considered as jobs having random service times. However, we do not allow for no-shows and walk-in clients. We develop a lag order approximation method that minimizes a function of the waiting time of the clients, the idle time of the server, and the lateness of the schedule. The approximation method with a lag order I yields near-optimal schedules (about 20% from the optimal loss value level) within sufficiently smaller computation times. The lag order II approximation yields schedules that are about 5% from the optimal LF value, and can be up to 20 times faster than simulations in case of a quadratic loss function and when the CV (of the service-time distributions) is relatively small (i.e., 
                        
                           CV
                           =
                           0.35
                        
                     ).

There are a few interesting directions for further research. A logical next step would be to extend the lag order approximation method to allow for no-shows and walk-in clients. Including both presents opportunities, since no-shows create gaps in the schedule which in turn can be potentially filled by walk-ins. Managing both at the same time is therefore a challenging endeavour.

We studied a group of identical CT-scan patients, but one could also study a setting for which there are several patient groups, see for example Creemers, Belën, and Lambrecht (2012).

Finally, note that there are many more factors that affect the optimality of appointment schedules. We mention a few examples: variability in the interappointment times, preferences of clients for a particular time of day, skill level of the server. Many of these issues cannot be dealt with in a straightforward manner and require new models. From a more algorithmic perspective, it would be interesting to investigate how the lag order approximation method can improve existing heuristics when combined.

@&#REFERENCES@&#

