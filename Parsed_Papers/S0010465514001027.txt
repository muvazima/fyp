@&#MAIN-TITLE@&#GPU-based simulation of the long-range Potts model via parallel tempering

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Simulation of the Potts model with long-range interactions on GPUs.


                        
                        
                           
                           Parallel tempering algorithm implemented on graphical processing units using CUDA.


                        
                        
                           
                           Shared memory implementation.


                        
                        
                           
                           GPU accelerated approach provides performance speedups of up to 35.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Potts model

Long-range interactions

Parallel tempering

GPU computing

CUDA

@&#ABSTRACT@&#


               
               
                  We discuss the efficiency of parallelization on graphical processing units (GPUs) for the simulation of the one-dimensional Potts model with long-range interactions via parallel tempering. We investigate the behavior of some thermodynamic properties, such as equilibrium energy and magnetization, critical temperatures as well as the separation between the first- and second-order regimes. By implementing multispin coding techniques and an efficient parallelization of the interaction energy computation among threads, the GPU-accelerated approach reached speedup factors of up to 37.
               
            

@&#INTRODUCTION@&#

Increased computing capabilities over the last years have changed substantially the landscape of scientific computing. High performance graphical processing units (GPUs) have become an important part of computational clusters. High level programming languages, e.g. CUDA or OpenCL, have unlocked the computational power of GPUs and made it accessible to scientists.

Particularly the implementation of Monte Carlo simulations on GPUs can lead to increased performance due to the fact that the majority of these algorithms can be parallelized. Regrading spin systems the studies published in scientific journals were focused especially on systems with nearest neighbor interactions  [1,2].

Macromolecules exhibiting long-range interactions have been simulated already on GPUs using molecular dynamics  [3] and the smooth particle mesh Ewald summation method  [4]. In the present paper we simulate the one-dimensional Potts model with long-range interactions decaying as 
                        1
                        /
                        
                           
                              r
                           
                           
                              1
                              +
                              σ
                           
                        
                      using a parallel tempering algorithm implemented on GPUs. It is known from both classical  [5] and nonextensive statistics  [6] that the Potts model has a very rich thermodynamic behavior.

The paper is structured as follows. In the first part we review some theoretical aspects regarding the Potts model and the parallel tempering algorithm. Section  4 deals with the implementation details in CUDA. In Section  5 we present the principal results and benchmarks comparing the performance of the code with traditional CPU implementation. Finally in Section  6 we draw some conclusions and final remarks.

The main result of this paper is the possibility of a good speedup on GPU for spin models with long-range interactions. By exploiting the shared memory architecture of the GPU and using an efficient multispin coding scheme for the Metropolis step and the energy computation we were able to obtain a speedup factor of 37 compared with CPU implementations.

The standard Potts model is a straightforward generalization of the well-known Ising model. The one-dimensional 
                        q
                     -state Potts model is a lattice where the spins 
                        
                           
                              s
                           
                           
                              i
                           
                        
                      can take the following values: 
                        
                           (1)
                           
                              
                                 
                                    s
                                 
                                 
                                    i
                                 
                              
                              =
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              q
                              .
                           
                        
                      The interaction Hamiltonian is given by the relation: 
                        
                           (2)
                           
                              H
                              =
                              −
                              
                                 
                                    ∑
                                 
                                 
                                    
                                       
                                          i
                                          ,
                                          j
                                       
                                       
                                          i
                                          ≠
                                          j
                                       
                                    
                                 
                              
                              
                                 
                                    J
                                 
                                 
                                    i
                                    j
                                 
                              
                              δ
                              
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       s
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                           
                        
                      where 
                        
                           
                              J
                           
                           
                              i
                              j
                           
                        
                      is a coupling constant and 
                        δ
                        
                           (
                           
                              
                                 s
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 s
                              
                              
                                 j
                              
                           
                           )
                        
                      is the Kronecker delta: 
                        
                           (3)
                           
                              δ
                              
                                 (
                                 
                                    
                                       s
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       s
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                              =
                              
                                 {
                                 
                                    
                                       
                                          1
                                       
                                       
                                          if  
                                          
                                             
                                                s
                                             
                                             
                                                i
                                             
                                          
                                          =
                                          
                                             
                                                s
                                             
                                             
                                                j
                                             
                                          
                                       
                                    
                                    
                                       
                                          0
                                       
                                       
                                          if  
                                          
                                             
                                                s
                                             
                                             
                                                i
                                             
                                          
                                          ≠
                                          
                                             
                                                s
                                             
                                             
                                                j
                                             
                                          
                                          .
                                       
                                    
                                 
                              
                           
                        
                      If we consider the long-range model, we must take into account the interactions between all spin pairs. The interaction is decaying with distance as 
                        1
                        /
                        
                           
                              r
                           
                           
                              1
                              +
                              σ
                           
                        
                      (
                        r
                      being the distance between spins 
                        i
                      and 
                        j
                     ), so the coupling constant has the form [7]
                     
                        
                           (4)
                           
                              
                                 
                                    J
                                 
                                 
                                    i
                                    j
                                 
                              
                              =
                              
                                 
                                    1
                                 
                                 
                                    
                                       
                                          
                                             |
                                             i
                                             −
                                             j
                                             |
                                          
                                       
                                       
                                          1
                                          +
                                          σ
                                       
                                    
                                 
                              
                              .
                           
                        
                      For simulation purposes one usually resort to periodic boundary conditions. This can be approached by considering the interactions between all the spins in the original lattice of size 
                        L
                      and replacing the coupling constants 
                        
                           
                              J
                           
                           
                              i
                              j
                           
                        
                      with 
                        
                           (5)
                           
                              
                                 
                                    J
                                 
                                 
                                    ∗
                                 
                              
                              
                                 (
                                 r
                                 )
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    n
                                    =
                                    −
                                    ∞
                                 
                                 
                                    ∞
                                 
                              
                              J
                              
                                 (
                                 r
                                 +
                                 n
                                 L
                                 )
                              
                              .
                           
                        
                      This lead to the following expression for the coupling constants: 
                        
                           (6)
                           
                              
                                 
                                    J
                                 
                                 
                                    ∗
                                 
                              
                              
                                 (
                                 r
                                 )
                              
                              =
                              
                                 
                                    1
                                 
                                 
                                    
                                       
                                          r
                                       
                                       
                                          1
                                          +
                                          σ
                                       
                                    
                                 
                              
                              +
                              
                                 
                                    1
                                 
                                 
                                    
                                       
                                          L
                                       
                                       
                                          1
                                          +
                                          σ
                                       
                                    
                                 
                              
                              
                                 [
                                 ζ
                                 
                                    (
                                    1
                                    +
                                    σ
                                    ,
                                    1
                                    +
                                    
                                       
                                          r
                                       
                                       
                                          L
                                       
                                    
                                    )
                                 
                                 +
                                 ζ
                                 
                                    (
                                    1
                                    +
                                    σ
                                    ,
                                    1
                                    −
                                    
                                       
                                          r
                                       
                                       
                                          L
                                       
                                    
                                    )
                                 
                                 ]
                              
                           
                        
                      where 
                        ζ
                        
                           (
                           s
                           ,
                           α
                           )
                        
                      is the Hurwitz zeta function [8]. 
                        
                           (7)
                           
                              ζ
                              
                                 (
                                 s
                                 ,
                                 α
                                 )
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    k
                                    =
                                    0
                                 
                                 
                                    ∞
                                 
                              
                              
                                 
                                    
                                       (
                                       k
                                       +
                                       α
                                       )
                                    
                                 
                                 
                                    −
                                    s
                                 
                              
                              .
                           
                        
                      The short-range Potts model undergoes a first-order phase transition when 
                        q
                        >
                        
                           
                              q
                           
                           
                              c
                           
                        
                      and a second-order phase transition when 
                        q
                        <
                        
                           
                              q
                           
                           
                              c
                           
                        
                     , where the threshold value 
                        
                           
                              q
                           
                           
                              c
                           
                        
                      depends on the dimensionality of the lattice 
                        d
                      (i.e.  
                        
                           
                              q
                           
                           
                              c
                           
                        
                        =
                        4
                      for 
                        d
                        =
                        2
                     ). The long-range Potts model exhibits an interesting behavior: there is a so-called tricritical point at 
                        
                           
                              σ
                           
                           
                              c
                           
                        
                     , depending on the value of 
                        q
                     . For 
                        σ
                        <
                        
                           
                              σ
                           
                           
                              c
                           
                        
                      we have a first-order transition, whereas for 
                        σ
                        >
                        
                           
                              σ
                           
                           
                              c
                           
                        
                      the transition is continuous.

Parallel tempering (a.k.a. replica exchange) is an algorithm which has been proposed to accelerate Monte Carlo simulations in systems with complex energy landscapes  [9,10].

In this method we simulate in parallel multiple copies of the system, at different temperatures. For this stage we use the single spin-flip technique, based on the standard Metropolis algorithm, where the flips are accepted with probability 
                        
                           (8)
                           
                              p
                              =
                              min
                              
                                 (
                                 1
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       −
                                       β
                                       Δ
                                       E
                                    
                                 
                                 )
                              
                           
                        
                      where 
                        Δ
                        E
                      represents the energy difference between the states. In the above relation 
                        β
                        =
                        1
                        /
                        
                           
                              k
                           
                           
                              B
                           
                        
                        T
                      (
                        T
                      denotes the temperature and 
                        
                           
                              k
                           
                           
                              B
                           
                        
                      stands for the Boltzmann constant).

After a certain number of Monte Carlo steps we attempt to exchange the states between neighboring temperatures, based on the Metropolis criterion with probability 
                        
                           (9)
                           
                              p
                              =
                              min
                              
                                 (
                                 1
                                 ,
                                 
                                    
                                       e
                                    
                                    
                                       
                                          (
                                          
                                             
                                                E
                                             
                                             
                                                i
                                             
                                          
                                          −
                                          
                                             
                                                E
                                             
                                             
                                                j
                                             
                                          
                                          )
                                       
                                       
                                          (
                                          
                                             
                                                β
                                             
                                             
                                                i
                                             
                                          
                                          −
                                          
                                             
                                                β
                                             
                                             
                                                j
                                             
                                          
                                          )
                                       
                                    
                                 
                                 )
                              
                           
                        
                      where 
                        
                           
                              E
                           
                           
                              i
                           
                        
                      and 
                        
                           
                              E
                           
                           
                              j
                           
                        
                      are the energies of the neighboring states, 
                        
                           
                              β
                           
                           
                              i
                           
                        
                        =
                        1
                        /
                        
                           
                              k
                           
                           
                              B
                           
                        
                        
                           
                              T
                           
                           
                              i
                           
                        
                      and 
                        
                           
                              β
                           
                           
                              j
                           
                        
                        =
                        1
                        /
                        
                           
                              k
                           
                           
                              B
                           
                        
                        
                           
                              T
                           
                           
                              j
                           
                        
                     .

Parallel tempering is a powerful computational method, which is suitable for implementations on GPUs because different replicas can be run in parallel.

CUDA brings a new approach to parallel computing. It uses the Graphical Processing Unit (GPU) for scientific computing. The computing power of GPUs has increased rapidly in the last years and today they are faster than the CPU if we exploit their massively parallel nature.

From the software point of view CUDA is an extension of the C language, as well as a runtime library, which facilitates the general-purpose programming of NVIDIA GPUs. The parallel computation is organized using the abstractions of grids, blocks and threads. An entire grid is handled by a single GPU chip. Each multiprocessor on the GPU handles one or more blocks in a grid. Each multiprocessor is divided into a number of stream processors, each of them handling one or more threads in a block  [11,12].

Threads may only safely communicate with each other only if they are in the same thread block. The fastest communication between threads is done using shared memory. Shared memory is limited, usually 16 kB per multiprocessor on GT200-based chips or 48 kB on Fermi cards  [13]. Often shared memory is simply not enough to store all the data that needs to be shared among the threads. In these cases we need to access global memory. Any thread in any block can read or write to any location in the global memory. Global memory is much larger than shared memory; however it is much slower.

@&#IMPLEMENTATION DETAILS@&#

For spin models with nearest neighbor interactions the checkerboard decomposition was implemented successfully on GPUs in the context of the Metropolis algorithm  [1,2] allowing considerable speedups compared with traditional CPU implementations. On the other hand for long-range models we must compute the interaction energy between all spin pairs in the lattice, so a checkerboard type decomposition is not suitable. In order to develop an efficient implementation we must seek other algorithms/computational techniques. For the simulations discussed in the present paper these techniques are: 
                           
                              (i)
                              parallel tempering (well suited for parallel architectures)

distribution of the energy computation among threads

multispin coding.

Parallel tempering has been successfully implemented on GPUs for classical spin systems, such as the square-lattice Ising model with competing nearest-neighbor and next-nearest-neighbor interactions  [14], as well as the continuous Heisenberg and disordered spin-glass systems  [15].

In this section we focus our attention on the implementation details in CUDA. All the computations on the GPU were performed using single-precision floating-point operations. The errors due to single floating point precision are smaller than 
                           1.86
                           ⋅
                           1
                           
                              
                                 0
                              
                              
                                 −
                                 3
                              
                           
                           %
                        , which is acceptable. The standard deviation of rounding-off errors is negligible when compared to the error of the Monte Carlo simulation itself (under 
                           7.83
                           ⋅
                           1
                           
                              
                                 0
                              
                              
                                 −
                                 3
                              
                           
                           %
                        ).

Every thread block holds one replica. Usually the thread block size is smaller than the number of spins in the lattice, so every thread handles multiple spins.

Two different implementations were tested. In the first one spin values were stored in shared memory for the Metropolis steps and they were transferred back to global memory after 
                           L
                         Metropolis steps (
                           L
                         being the number of spins in the lattice), which corresponds to an average of one Monte Carlo step per spin. In the second implementation all spin values were stored in global memory. The shared memory implementation proved to be much faster, as we will see in the benchmarking section. The coupling constants were pre-calculated on the CPU using the Hurwitz zeta function from the GNU Scientific Library  [16] and they were transferred from host memory to device global memory.

At the beginning of the Metropolis cycle we transfer the spin values from global to shared memory. Using bitwise operations we store multiple spin values in one unsigned long long type (see lines 3–12 in Listing 1). At the end of the Metropolis cycle, which corresponds to an average of one Monte Carlo step per spin, we copy back the updated spin values to global memory.


                        
                           
                              
                           
                        
                     

The interaction energy computation is parallelized among the threads in every block using a procedure similar with the one proposed by Gross et al. for the simulation of polymers  [17].

At the first line from Listing 2 we allocate the shared memory. Every thread computes the interaction energy between a given number of spin pairs. Since multiple spin values were stored in one unsigned long long type, we use bit shifting operations to extract the respective values for every spin in the lattice (see lines 16–17 in Listing 2). Finally a parallel reduction is performed to obtain the total energy (not shown in the listing). 
                           
                              
                           
                        
                     

The Boltzmann acceptance ratio depends only on the change in energy; therefore in the Metropolis cycle we compute only the energies corresponding to the flipped spin before and after the spin change. At the end of the Metropolis cycle we calculate the total energy.

The replica exchange step is executed also on the GPU and consists of two stages. We try to exchange states between replicas 
                           i
                         and 
                           i
                           +
                           1
                         for which 
                           i
                         is even in the first stage, respectively, 
                           i
                         is odd in the second stage (states were indexed from 0). These stages are executed using two consecutive kernels.

Random numbers are generated using the CURAND library  [18], which facilitates the simple and efficient generation of high-quality pseudorandom numbers. The resulting random numbers are stored in global memory. The default pseudorandom engine is an implementation of the Xorshift RNG  [19] and it produces higher quality random numbers than the Linear Congruential Generator.

The source code for all the simulations discussed in the present paper is available online  [20].

All the results discussed in the present section refer to the three-state Potts model (
                           q
                           =
                           3
                        ). Simulations were performed on lattice sizes ranging from 512 to 3584 and different values of 
                           σ
                         in the interval 
                           
                              [
                              0.2
                              ,
                              0.8
                              ]
                           
                        . Every simulation involved 
                           2
                           ⋅
                           
                              
                                 10
                              
                              
                                 4
                              
                           
                         thermalization steps and 
                           5
                           ⋅
                           
                              
                                 10
                              
                              
                                 4
                              
                           
                         production steps. The number of replicas was set to 400 with a uniform distribution of the temperatures. The following thermodynamic quantities were computed: equilibrium energy per spin 
                           
                              〈
                              E
                              〉
                           
                        , magnetization defined as  [8]
                        
                           
                              (10)
                              
                                 M
                                 =
                                 
                                    
                                       q
                                       
                                          
                                             N
                                          
                                          
                                             
                                                max
                                             
                                          
                                       
                                       /
                                       N
                                       −
                                       1
                                    
                                    
                                       q
                                       −
                                       1
                                    
                                 
                              
                           
                         (where 
                           
                              
                                 N
                              
                              
                                 
                                    max
                                 
                              
                           
                           =
                           max
                           
                              (
                              
                                 
                                    N
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 
                                    N
                                 
                                 
                                    2
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    N
                                 
                                 
                                    q
                                 
                              
                              )
                           
                        , with 
                           
                              
                                 N
                              
                              
                                 i
                              
                           
                         being the number of spins which has the value 
                           i
                        ), the fourth-order cumulant of energy: 
                           
                              (11)
                              
                                 
                                    
                                       U
                                    
                                    
                                       E
                                    
                                    
                                       
                                          (
                                          4
                                          )
                                       
                                    
                                 
                                 =
                                 
                                    
                                       
                                          〈
                                          
                                             
                                                E
                                             
                                             
                                                4
                                             
                                          
                                          〉
                                       
                                    
                                    
                                       
                                          
                                             
                                                〈
                                                
                                                   
                                                      E
                                                   
                                                   
                                                      2
                                                   
                                                
                                                〉
                                             
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                              
                           
                         and the so-called Binder cumulant: 
                           
                              (12)
                              
                                 
                                    
                                       V
                                    
                                    
                                       M
                                    
                                    
                                       
                                          (
                                          4
                                          )
                                       
                                    
                                 
                                 =
                                 1
                                 −
                                 
                                    
                                       
                                          〈
                                          
                                             
                                                M
                                             
                                             
                                                4
                                             
                                          
                                          〉
                                       
                                    
                                    
                                       3
                                       
                                          
                                             
                                                〈
                                                
                                                   
                                                      M
                                                   
                                                   
                                                      2
                                                   
                                                
                                                〉
                                             
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                                 .
                              
                           
                         Errors were evaluated using the standard jackknife technique provided by the ALPS library (http://alps.comp-phys.org/)  [21,22].


                        Fig. 1
                         shows the temperature dependence of the equilibrium energy per spin and the magnetization for 
                           L
                           =
                           2048
                         and 
                           σ
                           =
                           0.4
                           ,
                           0.5
                           ,
                           0.6
                           ,
                           0.7
                        .

To evaluate the critical temperatures in the thermodynamic limit, we plotted the Binder cumulant as a function of temperature for different lattice sizes (Fig. 2
                        ). The intersection point of the curves corresponds to the critical temperature. Values are presented in Table 1
                        .

To establish the order of the transition we studied the behavior of the fourth-order cumulant of energy given by Eq. (11). We considered 40 replicas around the pseudo-critical temperature and we performed simulations on lattice sizes ranging from 1024 to 5120 and different values of 
                           σ
                         in the interval 
                           
                              [
                              0.5
                              ,
                              0.78
                              ]
                           
                        . Every simulation involved 105 thermalization steps and 
                           2
                           ⋅
                           
                              
                                 10
                              
                              
                                 5
                              
                           
                         production steps. For each simulation we computed the maximum value of 
                           
                              
                                 U
                              
                              
                                 E
                              
                              
                                 
                                    (
                                    4
                                    )
                                 
                              
                           
                           
                              (
                              L
                              )
                           
                        . If the transition is of first order the cumulant is different from 1 in the thermodynamic limit, i.e., for 
                           L
                           →
                           ∞
                        . To establish the value of 
                           
                              
                                 U
                              
                              
                                 E
                              
                              
                                 
                                    (
                                    4
                                    )
                                 
                              
                           
                           
                              (
                              L
                              →
                              ∞
                              )
                           
                         we fitted the curves corresponding to the dependence of 
                           
                              
                                 U
                              
                              
                                 E
                                 ,
                                 max
                              
                              
                                 
                                    (
                                    4
                                    )
                                 
                              
                           
                           
                              (
                              L
                              )
                           
                         versus 
                           
                              
                                 L
                              
                              
                                 −
                                 1
                              
                           
                         (Fig. 3
                        ) to the power law 
                           
                              (13)
                              
                                 
                                    
                                       U
                                    
                                    
                                       E
                                       ,
                                       max
                                    
                                    
                                       
                                          (
                                          4
                                          )
                                       
                                    
                                 
                                 
                                    (
                                    L
                                    )
                                 
                                 =
                                 
                                    
                                       U
                                    
                                    
                                       E
                                    
                                    
                                       
                                          (
                                          4
                                          )
                                       
                                    
                                 
                                 
                                    (
                                    L
                                    →
                                    ∞
                                    )
                                 
                                 +
                                 A
                                 ⋅
                                 
                                    
                                       L
                                    
                                    
                                       −
                                       B
                                    
                                 
                              
                           
                         with 
                           A
                        , 
                           B
                         and 
                           
                              
                                 U
                              
                              
                                 E
                              
                              
                                 
                                    (
                                    4
                                    )
                                 
                              
                           
                           
                              (
                              L
                              →
                              ∞
                              )
                           
                         being the fitting parameters.


                        Table 2
                         summarizes the results obtained for 
                           
                              
                                 U
                              
                              
                                 E
                              
                              
                                 
                                    (
                                    4
                                    )
                                 
                              
                           
                           
                              (
                              L
                              →
                              ∞
                              )
                           
                         and the corresponding errors. Curve fitting was performed using the Levenberg–Marquardt algorithm  [23]. One can conclude that for 
                           σ
                           ≤
                           0.72
                         the extrapolated value of the fourth-order energy cumulant is different from 1 outside the estimated errors. For 
                           σ
                           ≥
                           0.74
                         the extrapolated value has reached unity. Consequently the tricritical point which separates the first- and second-order regimes can be estimated as 
                           
                              
                                 σ
                              
                              
                                 c
                              
                           
                           =
                           0.73
                           
                              (
                              1
                              )
                           
                        . This result is in good agreement with the one obtained by Reynal et al. using a multicanonical approach  [8] and Glumac et al. using short time dynamics  [24].

For benchmarking purposes short runs were performed on lattice sizes ranging from 512 to 10240, involving 104 production steps for 
                           L
                           =
                           512
                         down to 50 steps for 
                           L
                           =
                           10240
                        . The number of thermalization steps was set to 20% of the production steps, whereas the number of replicas was 400 for all the simulations.

We reserve three bits for every spin value, so the maximum number of spin values which can be stored in a 64 bit integer is 21 (if 
                           q
                           >
                           7
                         the number of bits should be increased). We must be careful to set a thread block size which is greater than 
                           L
                           /
                           21
                        . Table 3
                         shows the block sizes used for benchmarking.


                        Table 4
                         summarizes the characteristics of the computational setup used for the simulations.

We have compared the performance of both the shared and global memory implementation with the corresponding CPU code. As we can see from the benchmarking results presented in Fig. 4
                         the shared memory implementation with single floating point precision provides much better performance, with the best speedup factor being 35.1 for 
                           L
                           =
                           3072
                        . For small lattice sizes (
                           L
                           ≤
                           512
                        ) the implementations perform roughly the same, but the performance of the global memory implementation decreases rapidly with the number of spins. For the shared memory implementation with double precision the speedup is approximately half of that corresponding to single floating point precision, but still outperforms the global memory variant. It is a known fact that GPUs provide much better performance if we use float instead of double. The errors due to floating point arithmetic are acceptable (see Section  4), so we can choose the implementation which provides the best performance.

As can be expected, the speedup increases with the number of replicas (Fig. 5
                        ). For 
                           L
                           =
                           1024
                         the plot exhibits some maxima at certain values, which can be explained as follows. The Nvidia Tesla C2050 has 14 streaming multiprocessors (SMs). Every SM can access a number of 8 thread blocks simultaneously. Hence the maximum performance is achieved when the number of thread blocks is multiple of 112. The corresponding speedup factor is 
                           37.6
                        .

For small lattice sizes the speedup comes mainly from the parallelization among different replicas and the low-latency memory access using shared memory. As lattice size increases, the contribution of the parallel energy computation to the speedup becomes more significant.

We performed Monte Carlo simulations of the one-dimensional Potts model with long-range interactions on graphical processing units using CUDA. We gain considerable speedups if we exploit the shared memory architecture of the GPU by implementing multispin coding techniques and an efficient parallelization of the interaction energy computation. From a thermodynamic point of view we evaluated the equilibrium energy, magnetization and the critical temperature of transition for various values of 
                        σ
                     . By studying the behavior of the fourth-order energy cumulant we established the threshold value of 
                        σ
                      which separates the first- and second-order regimes.

One can conclude that graphical processing units can be very useful computing devices even for lattice spin models which exhibit long-range interactions. These systems can benefit also from the implementation of cluster algorithms on GPUs. This may be the subject of forthcoming studies.

@&#ACKNOWLEDGMENTS@&#

I would like to thank my wife, Milena, for her understanding and support during the writing of this paper.

I would like to thank the referee for his constructive criticism which helped to improve the manuscript.

@&#REFERENCES@&#

