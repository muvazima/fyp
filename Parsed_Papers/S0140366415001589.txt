@&#MAIN-TITLE@&#Energy efficient virtual network embedding for green data centers using data center topology and future migration

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We formulate energy efficient virtual network embedding that incorporates energy costs of operation and migration for nodes and links.


                        
                        
                           
                           We prove the NP-hardness of the problem and develop a heuristic algorithm to minimize the energy consumption.


                        
                        
                           
                           We consider a practical intra-DC architecture to further improve energy efficiency.


                        
                        
                           
                           We conduct extensive evaluations and comparisons with existing algorithms to show that the proposed algorithm substantially saves energy consumption and allows high acceptance ratios.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Virtual network embedding

Green networks

Energy efficient

@&#ABSTRACT@&#


               
               
                  With the rapid proliferation of data centers, their energy consumption and greenhouse gas emissions have significantly increased. Some efforts have been made to control and lower energy consumption of data centers such as, proportional energy consuming hardware, dynamic provisioning, and virtualization machine techniques. However, it is still common that many servers and network resources are often underutilized, and idle servers spend a large portion of their peak power consumption.
                  We first build a novel model of virtual network embedding in order to minimize energy usage in data centers for both computing and network resources by taking practical factors into consideration. Due to the NP-hardness of the proposed model, we develop a heuristic algorithm for virtual network scheduling and mapping. In doing so, we specifically take the expected energy consumption at different times, virtual network operation and future migration costs, and a data center architecture into consideration. Our extensive evaluation results show that our algorithm could reduce energy consumption up to 40% and take up to a 57% higher number of virtual network requests over other existing virtual mapping schemes.
               
            

@&#INTRODUCTION@&#

As the main enabling technology for cloud computing, virtualization supports multi-tenant users to share computing, storage, and networking resources. Focusing on sizeable data centers (DCs), traditional virtualization technologies are mainly for computing and storage resources. However, as DCs for cloud computing rapidly grow in numbers and geographically dispersed DCs are interconnected, network resource virtualization technology becomes one of the most promising technologies for leveraging the full potential of cloud computing.

With network virtualization techniques, adopting a new technique or protocol is much easier [1]. Vendors or infrastructure providers (InPs) do not need to purchase new equipment to update or deploy new techniques or protocols. An existing network could be flexibly expanded without involving much configuration work. In addition, network virtualization allows a physical network to be shared and divided into several isolated virtual networks (VNs) that consist of virtual machines (VMs) and their specified connectivities. Each VN serves a different group of users with different requirements of computing, storage, and network resources. Small institutions could have an economic option by renting VNs from an infrastructure provider rather than building and maintaining their private networks. Therefore, due to its benefits, network virtualization has been highlighted and studied from many aspects, such as resource discovery [2], admission control [3], resource scheduling [4], security issues [5], and resource allocation that is also known as virtual network embedding (VNE) [6–10].

VNE is a fundamental task that maps VNs coming over time to a physical network. In a real application, an InP receives a set of VN requests from the Service Providers (SP). Each VN asks for slices of resources, including computational and network resources, to provide value-added services, such as video on demand and voice-over-IP. By properly embedding the VNs, certain optimization goals are expected to be achieved without violating resource limitations.

Prior VNE algorithms mostly target InPs to maximize their profit [6,7], improve the reliability and survivability of VNs through deploying back-up nodes and links [8,9], or balance the workload in the physical networks [11]. Less effort has been done to enhance the energy efficiency of VNE.
                  

It is reported that there were more than 500,000 DCs around the world as of December 2011 [12]. With the fast growth of DCs, more and more energy has been consumed for operating and maintaining them. In 2010, between 1.1% and 1.5% of the worldwide total electricity usage was consumed by DCs [13], and their energy costs in the US doubled from 28 billion kWh to 61 billion kWh in six years, according to [14]. By 2020, greenhouse gas emissions from DCs are also projected to more than double from what they were in 2007 [15].

Efforts have been made for green DCs from various aspects in order to save energy and protect environments. Companies, e.g., Google and Facebook are greening their DCs through reducing power usage for cooling and other facilities and utilizing renewable energy [16,17]. Now their DCs have a relatively small Power Utilization Effectiveness (PUE), approximately 1.1 [16,17]. On the other hand, the low PUE means most energy is used for computing that drives us to control computing energy consumption as well. With energy proportional computing [18], voltage or frequency can be adjusted according to a CPU workload, so that machines with less jobs consume less energy. Then, power management techniques can control power assignments to ensure that machines with light loads consume less power, while machines with heavy loads obtain enough power. Also, live migration of virtual machines [19] allows for demanded virtual resources to be consolidated in a physical network conserving DC energy consumption.

It is noted, however, that servers in DCs typically operate at 10–50% of their maximum capacity most of time [20], and when a server is completely idle, it may still consume up to 70% of its peak power [21]. Moreover, it is also observed that many workloads are predictable in a large time scale, such as day/night and weekday/weekend [22,23]. These facts motivate us to move some virtual nodes or links to other physical nodes or links at a planned time based on predicated VN workloads, so that more idle servers and network elements can be turned off to save energy. Fig. 1 depicts an example where two VNs from cloud customers A and B are embedded onto two physical DCs during the day time due to their resource needs. At night, however, the smaller workloads permit the infrastructure provider to combine them onto one DC or rack saving the operating costs of servers and switches. For example, web servers could run on multiple physical servers during the busy hours to ensure the performance but aggregated to a less number of physical servers at night so that some idle physical servers could be turned off to save energy. This motivates us to design a VNE scheme that saves energy and supports energy efficient DCs by aggregating the workload to a less number of servers and turning off idle servers.

Furthermore, in most existing VNE schemes, the physical networks to embed VN requests are modeled with random graphs. DCs are, however, typically organized in a hierarchical fat tree architecture, as depicted in Fig. 2
                     . We consider this hierarchical structure when modeling the VNE problem, so that VN embedding can minimize the energy consumption used by intermediate switches as well as servers, as shown in Fig. 3
                     .

Our main contributions of the paper are as follows:

                        
                           •
                           We formulate the problem of virtual network embedding that incorporates energy costs of operation and migration for nodes and links that is non-linear. To solve this problem, we introduce a technique to transform it to a linear programming problem with additional constraints.

After proving the NP-hardness of this problem, we develop a heuristic algorithm named Topology and Migration-Aware Energy Efficient Virtual Network Embedding (TMAE-VNE) to minimize the energy consumption caused by both operation and future migration. To the best of our knowledge, this work is the first to optimize energy consumption over the VN’s entire life cycle, considering time varying resource demands of virtual network requirements. In addition, we consider a practical intra-DC architecture to further improve energy efficiency.

We conduct extensive evaluations and comparisons with two state-of-the-art algorithms using various inter-DC topologies. The results show that the proposed algorithm substantially saves energy consumption and allows high acceptance ratios.

The remainder of this paper is organized as follows. Section 2 discusses the background and related work. We formally model the VNE problem with dynamic VN requests, physical nodes with sleep/awake modes, and realistic DC network topologies in Section 3. The proposed algorithm is described in Section 4. A motivating example is discussed in Section 5. The performance evaluations and comparisons of the proposed algorithm with existing algorithms using multiple DC topologies are presented in Section 6. The concluding remarks are given in Section 7.

@&#RELATED WORK@&#

Network virtualization allows physical nodes and links to be shared by multiple VNs. It improves the physical resource usage efficiency, reduces the cost for service providers, and simplifies the update and deployment of new techniques or protocols [1]. As one of the essential problems in the network virtualization area, VNE has been widely studied to achieve different goals [24].

Various VNE models have been proposed with different optimization goals or constraints. Many schemes aim to increase the VN acceptance ratio that is the number of successfully mapped VN requests to the number of total VN requests [11], or balance the workload on physical nodes or links [6]. Chowdhury et al. [11] modeled the VNE problem with a specified location preference of the virtual nodes as a mixed integer programming problem and presented a deterministic algorithm as well as a random algorithm to solve the problem. Zhu and Ammar [6] designed an algorithm that identifies the physical node or links with max stress and balances the workload of those nodes or links through reconfiguration.

In all of the above mentioned research, VNE has been completed in two stages. In the first stage, all the virtual nodes have been mapped to physical nodes that satisfy the desired demands; while in the second stage, the algorithms compute a proper physical path for each virtual link in the virtual network. It is possible that a feasible mapping cannot be found for a virtual link, since the link capacities are not considered during the mapping of the virtual nodes. In this case, the above mentioned algorithms have to be backtracked to the first stage and map the virtual node again, which could be time consuming.

To improve the mapping efficiency, one-stage VNE algorithms have been proposed where the related virtual links are mapped right after mapping a virtual node [7,25–28]. In [25], constraints on delay, routing, and location were taken into consideration in the VNE problem, and the multicommodity flow integer linear program is used to solve the improved model. Trinh et al. [26] tried to increase the profit of the infrastructure provider and save the cost of subscribers by applying a careful overbooking concept. The topology of the physical networks and virtual networks are modeled as a directed graph in [7], and the authors present a heuristic VNE algorithm that maps nodes and links at the same stage based on the subgraph isomorphism. Cheng et al. [27] is inspired by Google’s PageRank algorithm. It argued that virtual network topologies and virtual nodes’ positions have a significant impact on VNE’s efficiency and acceptance ratio. Virtual optical networks mapping to an optical network substrate was studied in [28]. The authors formulated the problem as integer linear programming formulations and designed a greedy randomized algorithm to solve it. Fuerst et al.[29] proposed a pre-cluster method to partition a virtual network into clusters. In this method, multiple virtual nodes within one VN are mapped to the same physical node if there are enough available resources, so that the traffic inside a VN could be minimized.

In [30], evolving VNs and physical networks are investigated. The authors also suggested migrating embedded virtual nodes or virtual links to accommodate more VN requests. Driven by this observation, Cai et al. [31] tried to minimize the VNE cost when the substrate network evolves. They compared the cost differences between re-embedding the virtual nodes or virtual links and migrating them. They solved the proposed problem with a heuristic algorithm. The purpose of Fajjari et al. [32] is to minimize the reconfiguration cost and balancing the physical link workload. A virtual node or link lying on a congestion physical link would be migrated to another physical node or link. The evolvement or changes of a virtual network are random and unexpected in [30–32].

In practice, however, many changes of VN workloads are periodic due to day/night time zone effects or weekend effects [33–35] and can be fairly well predicted [22,23]. Meanwhile, making the data center energy efficient and protecting the environment attracts much attention. VNE targeting energy efficiency has been recognized and studied in [36–38]. Botero et al. [36] saved the energy consumption by reducing the number of inactive physical nodes and physical links. Fischer et al. [37] described the way to modify existing VNE algorithms towards energy efficiency without maintaining their other performance by considering energy as a factor when mapping. Energy efficiency is also considered in [38] that partitions and embeds virtual DCs to the substrate network that consists of multiple DCs, so that the inter DC traffic can be reduced and DCs with relative low PUE are used. The migration of virtual nodes and links have not been performed in [36–38], which would lead to a lower acceptance ratio compared with VNE algorithms that allow migration. In addition, in both [36] and [37], multiple virtual nodes from the same VN could be consolidated on the same physical node to save energy; however, this may impact the resilience of the virtual networks. On the other hand, in our model, virtual nodes in the same VN are ensured to be mapped to different physical nodes for resilience conside-ration.

All of the aforementioned work only targets a snapshot optimization where the resource limitations and demand requirements are considered at one time. Differing from these existing VNE solutions, our work is unique in that we holistically aim to optimize the energy efficiency of VNE over the entire life cycle of virtual networks. We achieve this goal by not only considering the embedding for the current moment but also scheduling possible migrations for the future at the time we map a virtual network. Thus, we can successfully minimize operation energy costs as well as possible migration costs. In addition, most previous work models the physical network as a graph with an arbitrary topology. This is not precise to describe intra DC networks that are usually organized in a hierarchical topology. We consider the practical topology of physical networks in the real world. In our model, a physical network may consist of multiple DCs, and the network inside each DC is hierarchical.

We model the energy efficient VNE problem as an optimization problem aiming to minimize the energy consumed for embedding VN requests. Specifically, the total energy consumption consists of the energy consumed for operation and migration under a group of constraints, including computational and network resource limitations, binary limitations, and flow constraints. We further transform the proposed VNE problem to a linear program problem by introducing two auxiliary variables.

In this section, we model the VNE problem that minimizes the energy consumption with practical DC topologies and migration awareness. Notations used in this paper are listed in Table 1
                        .

Assume a physical network Gp
                        (Np, Lp
                        ) consists of multiple DCs 
                           
                              
                                 G
                                 1
                                 p
                              
                              
                                 (
                                 
                                    N
                                    1
                                    p
                                 
                                 ,
                                 
                                    L
                                    1
                                    p
                                 
                                 )
                              
                              ,
                           
                        
                        
                           
                              
                                 G
                                 2
                                 p
                              
                              
                                 (
                                 
                                    N
                                    2
                                    p
                                 
                                 ,
                                 
                                    L
                                    2
                                    p
                                 
                                 )
                              
                              ,
                              …
                              ,
                              
                                 G
                                 
                                    D
                                 
                                 p
                              
                              
                                 (
                                 
                                    N
                                    
                                       D
                                    
                                    p
                                 
                                 ,
                                 
                                    L
                                    
                                       D
                                    
                                    p
                                 
                                 )
                              
                           
                        . Here, D is the number of DCs in a physical network. A DC d includes a group of physical nodes 
                           
                              N
                              
                                 d
                              
                              p
                           
                         and physical links 
                           
                              L
                              
                                 d
                              
                              p
                           
                        . We have

                           
                              
                                 
                                    
                                       G
                                       p
                                    
                                    =
                                    
                                       G
                                       1
                                       p
                                    
                                    ⋃
                                    
                                       G
                                       2
                                       p
                                    
                                    ⋃
                                    ⋯
                                    ⋃
                                    
                                       G
                                       
                                          D
                                       
                                       p
                                    
                                    ⋃
                                    
                                       G
                                       
                                          i
                                          n
                                          t
                                          e
                                          r
                                       
                                       p
                                    
                                 
                              
                           
                        
                        
                           
                              
                                 
                                    
                                       N
                                       p
                                    
                                    =
                                    
                                       N
                                       1
                                       p
                                    
                                    ⋃
                                    
                                       N
                                       2
                                       p
                                    
                                    ⋃
                                    ⋯
                                    ⋃
                                    
                                       N
                                       
                                          D
                                       
                                       p
                                    
                                 
                              
                           
                        
                        
                           
                              
                                 
                                    
                                       L
                                       p
                                    
                                    =
                                    
                                       L
                                       1
                                       p
                                    
                                    ⋃
                                    
                                       L
                                       2
                                       p
                                    
                                    ⋃
                                    ⋯
                                    ⋃
                                    
                                       L
                                       
                                          D
                                       
                                       p
                                    
                                    ⋃
                                    
                                       L
                                       
                                          i
                                          n
                                          t
                                          e
                                          r
                                       
                                       p
                                    
                                 
                              
                           
                        where 
                           
                              G
                              
                                 i
                                 n
                                 t
                                 e
                                 r
                              
                              p
                           
                         is the network that connects DCs, and 
                           
                              L
                              
                                 i
                                 n
                                 t
                                 e
                                 r
                              
                              p
                           
                         is the set of all inter DC links. Each physical node i ∈ Np
                         is equipped with limited computational resources cp
                        (i)
                           1
                        
                        
                           1
                           Here, we consider a general computational resources. In real applications, it could be CPU capacity or available storage size.
                        , while each physical link between two adjacent physical nodes i and j has limited bandwidth bp
                        (i, j).

An infrastructure provider receives VN requests and assigns proper computational and network resources satisfying the specific demands of each VN request. In detail, a VN request can be modeled as a weighted graph Gv
                        (Nv, Lv
                        ), where Nv
                         and Lv
                         are the sets of virtual nodes and virtual links, respectively.

Based on the observation that users’ workloads often change predictably with time, such as day and night times [35], we assume VN resource workloads are different in the time intervals. We denote the minimal desired computational resource at time t for a virtual node u ∈ Nv
                         as cv
                        (u, t), and the minimal desired bandwidth resource at time t for a virtual link in Lv
                         as bv
                        (u, w, t). For the simplicity of our discussion, we only consider demands of two different times (t and 
                           
                              t
                              +
                              1
                           
                         for day and night times, respectively, for example) for each VN request in the illustrating example and evaluation sections. However, the idea of scheduling and mapping can be naturally extended to handle more time intervals. For a certain virtual node u of VN request v, its requested computational resource cv
                        (u, ·) is specified for the day and night times as shown below.

                           
                              (1)
                              
                                 
                                    
                                       c
                                       v
                                    
                                    
                                       (
                                       u
                                       ,
                                       ·
                                       )
                                    
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                
                                                   
                                                      c
                                                      v
                                                   
                                                   
                                                      (
                                                      u
                                                      ,
                                                      t
                                                      )
                                                   
                                                   ,
                                                
                                             
                                             
                                                
                                                   during
                                                   
                                                   day
                                                   
                                                   time
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      c
                                                      v
                                                   
                                                   
                                                      (
                                                      u
                                                      ,
                                                      t
                                                      +
                                                      1
                                                      )
                                                   
                                                   ,
                                                
                                             
                                             
                                                
                                                   during
                                                   
                                                   night
                                                   
                                                   time
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        The requested bandwidth between virtual nodes u and w, bv
                        (u, w, ·) is specified for the day and night times as:

                           
                              (2)
                              
                                 
                                    
                                       b
                                       v
                                    
                                    
                                       (
                                       u
                                       ,
                                       w
                                       ,
                                       ·
                                       )
                                    
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                
                                                   
                                                      b
                                                      v
                                                   
                                                   
                                                      (
                                                      u
                                                      ,
                                                      w
                                                      ,
                                                      t
                                                      )
                                                   
                                                   ,
                                                
                                             
                                             
                                                
                                                   during
                                                   
                                                   day
                                                   
                                                   time
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      b
                                                      v
                                                   
                                                   
                                                      (
                                                      u
                                                      ,
                                                      w
                                                      ,
                                                      t
                                                      +
                                                      1
                                                      )
                                                   
                                                   ,
                                                
                                             
                                             
                                                
                                                   during
                                                   
                                                   night
                                                   
                                                   time
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

After embedding some VN requests, the available computational resources of a physical node i are the residual computational resources after reserving resources for already embedded VN requests:

                           
                              (3)
                              
                                 
                                    
                                       c
                                       p
                                    
                                    
                                       (
                                       i
                                       ,
                                       t
                                       )
                                    
                                    =
                                    
                                       c
                                       p
                                    
                                    
                                       (
                                       i
                                       )
                                    
                                    −
                                    
                                       ∑
                                       
                                          ∀
                                          v
                                          ↑
                                          i
                                       
                                    
                                    
                                       c
                                       v
                                    
                                    
                                       (
                                       u
                                       ,
                                       t
                                       )
                                    
                                 
                              
                           
                        Here, v↑i indicates that virtual node v is embedded on physical node i. Due to the different demands of VN requests for day and night times, the available resources change over time too.

Similarly, the available bandwidth of a physical link between two adjacent physical nodes i and j is defined as:

                           
                              (4)
                              
                                 
                                    
                                       b
                                       p
                                    
                                    
                                       (
                                       i
                                       ,
                                       j
                                       ,
                                       t
                                       )
                                    
                                    =
                                    
                                       b
                                       p
                                    
                                    
                                       (
                                       i
                                       ,
                                       j
                                       )
                                    
                                    −
                                    
                                       ∑
                                       
                                          ∀
                                          (
                                          u
                                          ,
                                          w
                                          )
                                          ↑
                                          (
                                          i
                                          ,
                                          j
                                          )
                                       
                                    
                                    
                                       b
                                       v
                                    
                                    
                                       (
                                       u
                                       ,
                                       w
                                       ,
                                       t
                                       )
                                    
                                 
                              
                           
                        Here, (u, w)↑(i, j) indicates that the virtual link between virtual node u and w passes through the physical link between physical nodes i and j.

Our goal is to embed a group of VN requests with minimal energy consumption that consists of operational energy cost Copr
                        , and migration energy cost Cmgr
                         under resource limitations, which is defined as follows:

                           
                              (5)
                              
                                 
                                    m
                                    i
                                    n
                                    
                                       ∑
                                       t
                                    
                                    
                                       (
                                       
                                          C
                                          
                                             o
                                             p
                                             r
                                          
                                       
                                       
                                          (
                                          t
                                          )
                                       
                                       +
                                       
                                          C
                                          
                                             m
                                             g
                                             r
                                          
                                       
                                       
                                          (
                                          t
                                          )
                                       
                                       )
                                    
                                 
                              
                           
                        
                     

In addition, we assume that physical nodes support the sleep and awake mode in the physical network. Especially, there is no energy consumption if a physical node is turned to the sleep mode. For an awake node, a baseline energy is consumed for maintaining basic functions [21], while for each newly embedded virtual node, an additional power is consumed for performing the work on this virtual node.

We model the operational energy consumption including energy costs for nodes and links as:

                           
                              (6)
                              
                                 
                                    
                                       
                                          
                                             
                                                C
                                                
                                                   o
                                                   p
                                                   r
                                                
                                             
                                             
                                                (
                                                t
                                                )
                                             
                                          
                                       
                                       
                                          =
                                       
                                       
                                          
                                             Energy
                                             cost
                                             for
                                             
                                             nodes
                                             +
                                             Energy
                                             
                                             cost
                                             
                                             for
                                             
                                             link
                                             
                                             bandwidths
                                          
                                       
                                    
                                    
                                       
                                       
                                          =
                                       
                                       
                                          
                                             
                                                ∑
                                                i
                                             
                                             
                                                ∑
                                                u
                                             
                                             
                                                ∑
                                                
                                                   t
                                                   =
                                                   0
                                                
                                             
                                             
                                                [
                                                
                                                   α
                                                   
                                                      o
                                                      1
                                                   
                                                
                                                
                                                   E
                                                   
                                                      b
                                                      a
                                                      s
                                                      e
                                                   
                                                
                                                
                                                   (
                                                   i
                                                   )
                                                
                                                
                                                   S
                                                   status
                                                
                                                
                                                   (
                                                   i
                                                   ,
                                                   t
                                                   )
                                                
                                                +
                                                
                                                   α
                                                   
                                                      o
                                                      2
                                                   
                                                
                                                
                                                   c
                                                   v
                                                
                                                
                                                   (
                                                   u
                                                   ,
                                                   t
                                                   )
                                                
                                                ]
                                             
                                             x
                                             
                                                (
                                                i
                                                ,
                                                u
                                                ,
                                                t
                                                )
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             +
                                             
                                                α
                                                
                                                   o
                                                   3
                                                
                                             
                                             
                                                ∑
                                                
                                                   i
                                                   ,
                                                   j
                                                
                                             
                                             
                                                ∑
                                                
                                                   u
                                                   ,
                                                   w
                                                   ,
                                                   u
                                                   >
                                                   w
                                                
                                             
                                             
                                                ∑
                                                
                                                   t
                                                   =
                                                   0
                                                
                                             
                                             
                                                w
                                                p
                                             
                                             
                                                (
                                                i
                                                ,
                                                j
                                                )
                                             
                                             
                                                b
                                                v
                                             
                                             
                                                (
                                                u
                                                ,
                                                w
                                                ,
                                                t
                                                )
                                             
                                             f
                                             
                                                (
                                                i
                                                ,
                                                j
                                                ,
                                                u
                                                ,
                                                w
                                                ,
                                                t
                                                )
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Here, a binary variable x(i, u, t) is used to indicate whether or not a virtual node u is embedded to physical node i at time t.

                           
                              (7)
                              
                                 
                                    x
                                    
                                       (
                                       i
                                       ,
                                       u
                                       ,
                                       t
                                       )
                                    
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                
                                                   1
                                                   ,
                                                
                                             
                                             
                                                
                                                   if
                                                   
                                                   virtual
                                                   
                                                   node
                                                   
                                                   u
                                                   
                                                   is
                                                   
                                                   assigned
                                                   
                                                   to
                                                   
                                                   physical
                                                
                                             
                                          
                                          
                                             
                                             
                                                
                                                   
                                                   node
                                                   
                                                   i
                                                   
                                                   at
                                                   
                                                   time
                                                   
                                                   t
                                                
                                             
                                          
                                          
                                             
                                                
                                                   0
                                                   ,
                                                
                                             
                                             
                                                otherwise
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The operation cost of embedding a virtual node u to physical node i at time t consists of a possible baseline energy consumption Ebase
                        (i) for waking up node i if its status 
                           
                              
                                 S
                                 status
                              
                              
                                 (
                                 i
                                 ,
                                 t
                                 −
                                 1
                                 )
                              
                           
                         at time 
                           
                              t
                              −
                              1
                           
                         is asleep and an operation cost for executing virtual node u’s tasks cv
                        (u, t) at time t.

                           
                              (8)
                              
                                 
                                    
                                       S
                                       status
                                    
                                    
                                       (
                                       i
                                       ,
                                       t
                                       )
                                    
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                
                                                   1
                                                   ,
                                                
                                             
                                             
                                                
                                                   if
                                                   
                                                   physical
                                                   
                                                   node
                                                   
                                                   i
                                                   
                                                   is
                                                   
                                                   asleep
                                                   
                                                   at
                                                   
                                                   the
                                                
                                             
                                          
                                          
                                             
                                             
                                                
                                                   
                                                   beginning
                                                   
                                                   of
                                                   
                                                   time
                                                   
                                                   t
                                                
                                             
                                          
                                          
                                             
                                                
                                                   0
                                                   ,
                                                
                                             
                                             
                                                otherwise
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

On the other hand, link operation cost is determined by traffic volume, bv
                        (u, w, t) on the virtual link (u, w) at time t, and the weight, wp
                        (i, j) of the physical links (i, j) that is different for inter or intra DC links. We use network flow f(i, j, u, w, t) to determine whether a physical link (i, j) is used to embed a virtual link u, w. When f(i, j, u, w, t) is equal to 1, virtual link (u, w) passes through the physical link (i, j). Otherwise, f(i, j, u, w, t) is equal to 0. Coefficients 
                           
                              
                                 α
                                 
                                    o
                                    1
                                 
                              
                              ,
                           
                        
                        
                           
                              
                                 α
                                 
                                    o
                                    2
                                 
                              
                              ,
                           
                         and 
                           
                              α
                              
                                 o
                                 3
                              
                           
                         are used to balance the weight among different parts of the operation cost.

Even though migrating embedded virtual nodes could save energy, it may introduce additional overhead, such as the cost for moving system resources and maintaining additional links when the migration is processed. [19] describes the processes of the virtual router’s live migration and its related overhead. We model the migration energy cost at time t as shown below.

                           
                              (9)
                              
                                 
                                    
                                       
                                          
                                             
                                                C
                                                
                                                   m
                                                   g
                                                   r
                                                
                                             
                                             
                                                (
                                                t
                                                )
                                             
                                          
                                       
                                       
                                          =
                                       
                                       
                                          
                                             Cost
                                             
                                             due
                                             
                                             to
                                             
                                             size
                                             
                                             of
                                             
                                             system
                                             
                                             resource
                                             +
                                             Cost
                                             
                                             due
                                             
                                             to
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             
                                             bandwidth
                                             
                                             usage
                                          
                                       
                                    
                                    
                                       
                                       
                                          =
                                       
                                       
                                          
                                             
                                                α
                                                
                                                   m
                                                   1
                                                
                                             
                                             
                                                ∑
                                                
                                                   
                                                      i
                                                      1
                                                   
                                                   ,
                                                   
                                                      i
                                                      2
                                                   
                                                   ,
                                                   
                                                      i
                                                      1
                                                   
                                                   ≠
                                                   
                                                      i
                                                      2
                                                   
                                                
                                             
                                             
                                                ∑
                                                u
                                             
                                             
                                                ∑
                                                
                                                   t
                                                   =
                                                   1
                                                
                                             
                                             s
                                             
                                                (
                                                u
                                                ,
                                                t
                                                )
                                             
                                             
                                                E
                                                
                                                   l
                                                   e
                                                   n
                                                
                                             
                                             
                                                (
                                                
                                                   i
                                                   1
                                                
                                                ,
                                                
                                                   i
                                                   2
                                                
                                                )
                                             
                                             x
                                             
                                                (
                                                
                                                   i
                                                   1
                                                
                                                ,
                                                u
                                                ,
                                                t
                                                −
                                                1
                                                )
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             
                                             x
                                             (
                                             
                                                i
                                                2
                                             
                                             ,
                                             u
                                             ,
                                             t
                                             )
                                          
                                       
                                    
                                    
                                       
                                       
                                          +
                                       
                                       
                                          
                                             
                                                α
                                                
                                                   m
                                                   2
                                                
                                             
                                             
                                                ∑
                                                
                                                   
                                                      i
                                                      1
                                                   
                                                   ,
                                                   
                                                      i
                                                      2
                                                   
                                                   ,
                                                   
                                                      i
                                                      1
                                                   
                                                   ≠
                                                   
                                                      i
                                                      2
                                                   
                                                
                                             
                                             
                                                ∑
                                                
                                                   a
                                                   ,
                                                   b
                                                
                                             
                                             
                                                ∑
                                                
                                                   u
                                                   ,
                                                   w
                                                   ,
                                                   u
                                                   >
                                                   w
                                                
                                             
                                             
                                                ∑
                                                
                                                   t
                                                   =
                                                   1
                                                
                                             
                                             
                                                b
                                                v
                                             
                                             
                                                (
                                                u
                                                ,
                                                w
                                                ,
                                                t
                                                −
                                                1
                                                )
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             
                                             x
                                             
                                                (
                                                
                                                   i
                                                   1
                                                
                                                ,
                                                u
                                                ,
                                                t
                                                −
                                                1
                                                )
                                             
                                             x
                                             
                                                (
                                                
                                                   i
                                                   2
                                                
                                                ,
                                                u
                                                ,
                                                t
                                                )
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             f
                                             
                                                (
                                                a
                                                ,
                                                b
                                                ,
                                                u
                                                ,
                                                w
                                                ,
                                                t
                                                −
                                                1
                                                )
                                             
                                             
                                                w
                                                p
                                             
                                             
                                                
                                                   (
                                                   a
                                                   ,
                                                   b
                                                   )
                                                
                                                )
                                             
                                          
                                       
                                    
                                 
                              
                           
                        Here, we formulate the migration cost as the summation of duplicating the virtual nodes’ status and maintaining duplicated links before migration is completed. In Eq. (9), s(u, t) is the coefficient indicating the cost of duplicating execution status for virtual node u at time t. Elen
                        (i
                        1, i
                        2) is the weight of a physical path between physical nodes i
                        1 and i
                        2. The product of 
                           
                              x
                              (
                              
                                 i
                                 1
                              
                              ,
                              u
                              ,
                              t
                              −
                              1
                              )
                           
                         and x(i
                        2, u, t) indicates that the virtual node u was embedded on physical node i
                        1 at time 
                           
                              t
                              −
                              1
                           
                         and migrated to physical node i
                        2 at time t. 
                           
                              
                                 b
                                 v
                              
                              
                                 (
                                 u
                                 ,
                                 w
                                 ,
                                 t
                                 −
                                 1
                                 )
                              
                           
                         is the coefficient for maintaining the physical link (a, b) that is used for embedding the virtual link (u, w). Coefficients 
                           
                              
                                 α
                                 
                                    m
                                    1
                                 
                              
                              ,
                           
                        
                        
                           
                              
                                 α
                                 
                                    m
                                    2
                                 
                              
                              ,
                           
                         and 
                           
                              α
                              
                                 m
                                 3
                              
                           
                         are used to balance the weight among different parts of the migration cost.

Due to the existence of the products of variables, such as 
                           
                              x
                              
                                 (
                                 
                                    i
                                    1
                                 
                                 ,
                                 u
                                 ,
                                 t
                                 −
                                 1
                                 )
                              
                              x
                              
                                 (
                                 
                                    i
                                    2
                                 
                                 ,
                                 u
                                 ,
                                 t
                                 )
                              
                              ,
                           
                         the objective function is a non-linear problem that is hard to solve. We transform it to a linear program problem by introducing two auxiliary binary variables: 
                           
                              m
                              (
                              
                                 i
                                 1
                              
                              ,
                              
                                 i
                                 2
                              
                              ,
                              u
                              ,
                              t
                              −
                              1
                              )
                           
                         and g(i
                        1, i
                        2, a, b, u, w, t). Here we replace 
                           
                              x
                              
                                 (
                                 
                                    i
                                    1
                                 
                                 ,
                                 u
                                 ,
                                 t
                                 −
                                 1
                                 )
                              
                              x
                              
                                 (
                                 
                                    i
                                    2
                                 
                                 ,
                                 u
                                 ,
                                 t
                                 )
                              
                           
                         with 
                           
                              m
                              (
                              
                                 i
                                 1
                              
                              ,
                              
                                 i
                                 2
                              
                              ,
                              u
                              ,
                              t
                              −
                              1
                              )
                           
                         and replace 
                           
                              x
                              
                                 (
                                 
                                    i
                                    1
                                 
                                 ,
                                 u
                                 ,
                                 t
                                 −
                                 1
                                 )
                              
                              x
                              
                                 (
                                 
                                    i
                                    2
                                 
                                 ,
                                 u
                                 ,
                                 t
                                 )
                              
                              f
                              
                                 (
                                 a
                                 ,
                                 b
                                 ,
                                 u
                                 ,
                                 w
                                 ,
                                 t
                                 −
                                 1
                                 )
                              
                           
                         with g(i
                        1, i
                        2, a, b, u, w, t). Intuitively, 
                           
                              m
                              (
                              
                                 i
                                 1
                              
                              ,
                              
                                 i
                                 2
                              
                              ,
                              u
                              ,
                              t
                              −
                              1
                              )
                           
                         indicates if a virtual node u has migrated from physical node i
                        1 to i
                        2 at time t; while g(i
                        1, i
                        2, a, b, u, w, t) represents if a physical link (a, b) belongs to the physical path that embedding virtual link (u, w), and one end of the virtual link has migrated from physical node i
                        1 to i
                        2 at time t. Constraints (11) and (12) are added to ensure the converted problem is equivalent with the original one.

The transformed objective function is as follows:

                           
                              (10)
                              
                                 
                                    
                                       
                                       
                                          
                                             m
                                             i
                                             n
                                          
                                       
                                       
                                          
                                             (
                                             
                                                ∑
                                                i
                                             
                                             
                                                ∑
                                                u
                                             
                                             
                                                ∑
                                                
                                                   t
                                                   =
                                                   0
                                                
                                             
                                             
                                                [
                                                
                                                   α
                                                   
                                                      o
                                                      1
                                                   
                                                
                                                
                                                   E
                                                   
                                                      b
                                                      a
                                                      s
                                                      e
                                                   
                                                
                                                
                                                   (
                                                   i
                                                   )
                                                
                                                
                                                   S
                                                   status
                                                
                                                
                                                   (
                                                   i
                                                   ,
                                                   t
                                                   )
                                                
                                                +
                                                
                                                   α
                                                   
                                                      o
                                                      2
                                                   
                                                
                                                
                                                   c
                                                   v
                                                
                                                
                                                   (
                                                   u
                                                   ,
                                                   t
                                                   )
                                                
                                                ]
                                             
                                             x
                                             
                                                (
                                                i
                                                ,
                                                u
                                                ,
                                                t
                                                )
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             +
                                             
                                             
                                                α
                                                
                                                   o
                                                   3
                                                
                                             
                                             
                                                ∑
                                                
                                                   i
                                                   ,
                                                   j
                                                
                                             
                                             
                                                ∑
                                                
                                                   u
                                                   ,
                                                   w
                                                   ,
                                                   u
                                                   >
                                                   w
                                                
                                             
                                             
                                                ∑
                                                
                                                   t
                                                   =
                                                   0
                                                
                                             
                                             
                                                w
                                                p
                                             
                                             
                                                (
                                                i
                                                ,
                                                j
                                                )
                                             
                                             
                                                b
                                                v
                                             
                                             
                                                (
                                                u
                                                ,
                                                w
                                                ,
                                                t
                                                )
                                             
                                             f
                                             
                                                (
                                                i
                                                ,
                                                j
                                                ,
                                                u
                                                ,
                                                w
                                                ,
                                                t
                                                )
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             +
                                             
                                             
                                                α
                                                
                                                   m
                                                   1
                                                
                                             
                                             
                                                ∑
                                                
                                                   
                                                      i
                                                      1
                                                   
                                                   ,
                                                   
                                                      i
                                                      2
                                                   
                                                   ,
                                                   
                                                      i
                                                      1
                                                   
                                                   ≠
                                                   
                                                      i
                                                      2
                                                   
                                                
                                             
                                             
                                                ∑
                                                u
                                             
                                             
                                                ∑
                                                
                                                   t
                                                   =
                                                   1
                                                
                                             
                                             s
                                             
                                                (
                                                u
                                                ,
                                                t
                                                )
                                             
                                             
                                                w
                                                p
                                             
                                             
                                                (
                                                
                                                   i
                                                   1
                                                
                                                ,
                                                
                                                   i
                                                   2
                                                
                                                )
                                             
                                             m
                                             
                                                (
                                                
                                                   i
                                                   1
                                                
                                                ,
                                                
                                                   i
                                                   2
                                                
                                                ,
                                                u
                                                ,
                                                t
                                                )
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             +
                                             
                                             
                                                α
                                                
                                                   m
                                                   2
                                                
                                             
                                             
                                                ∑
                                                
                                                   
                                                      i
                                                      1
                                                   
                                                   ,
                                                   
                                                      i
                                                      2
                                                   
                                                   ,
                                                   
                                                      i
                                                      1
                                                   
                                                   ≠
                                                   
                                                      i
                                                      2
                                                   
                                                
                                             
                                             
                                                ∑
                                                
                                                   a
                                                   ,
                                                   b
                                                
                                             
                                             
                                                ∑
                                                
                                                   u
                                                   ,
                                                   w
                                                   ,
                                                   u
                                                   >
                                                   w
                                                
                                             
                                             
                                                ∑
                                                
                                                   t
                                                   =
                                                   1
                                                
                                             
                                             
                                                b
                                                v
                                             
                                             
                                                (
                                                u
                                                ,
                                                w
                                                ,
                                                t
                                                −
                                                1
                                                )
                                             
                                             g
                                             
                                                (
                                                
                                                   i
                                                   1
                                                
                                                ,
                                                
                                                   i
                                                   2
                                                
                                                ,
                                                a
                                                ,
                                                b
                                                ,
                                                u
                                                ,
                                                w
                                                ,
                                                t
                                                )
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             
                                                w
                                                p
                                             
                                             
                                                
                                                   (
                                                   i
                                                   ,
                                                   j
                                                   )
                                                
                                                )
                                                )
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The following two constraints are introduced to ensure the equivalence of the converted problem and the origin problem.

                           
                              (11)
                              
                                 
                                    0
                                    ≤
                                    x
                                    
                                       (
                                       
                                          i
                                          1
                                       
                                       ,
                                       u
                                       ,
                                       t
                                       −
                                       1
                                       )
                                    
                                    +
                                    x
                                    
                                       (
                                       
                                          i
                                          2
                                       
                                       ,
                                       u
                                       ,
                                       t
                                       )
                                    
                                    −
                                    2
                                    m
                                    
                                       (
                                       
                                          i
                                          1
                                       
                                       ,
                                       
                                          i
                                          2
                                       
                                       ,
                                       u
                                       ,
                                       t
                                       )
                                    
                                    ≤
                                    1
                                 
                              
                           
                        
                        
                           
                              (12)
                              
                                 
                                    0
                                    
                                       
                                       ≤
                                       
                                    
                                    m
                                    
                                       (
                                       
                                          i
                                          1
                                       
                                       ,
                                       
                                          i
                                          2
                                       
                                       ,
                                       u
                                       ,
                                       t
                                       )
                                    
                                    +
                                    f
                                    
                                       (
                                       a
                                       ,
                                       b
                                       ,
                                       u
                                       ,
                                       w
                                       ,
                                       t
                                       −
                                       1
                                       )
                                    
                                    −
                                    2
                                    g
                                    
                                       (
                                       
                                          i
                                          1
                                       
                                       ,
                                       
                                          i
                                          2
                                       
                                       ,
                                       j
                                       ,
                                       a
                                       ,
                                       b
                                       ,
                                       u
                                       ,
                                       w
                                       ,
                                       t
                                       )
                                    
                                    
                                       
                                       ≤
                                       
                                    
                                    1
                                 
                              
                           
                        
                     

The optimization goal is subjected to the constraints on computational and network resources.

                           
                              (13)
                              
                                 
                                    
                                       ∑
                                       u
                                    
                                    
                                       c
                                       v
                                    
                                    
                                       (
                                       u
                                       ,
                                       t
                                       )
                                    
                                    x
                                    
                                       (
                                       i
                                       ,
                                       u
                                       ,
                                       t
                                       )
                                    
                                    ≤
                                    
                                       c
                                       p
                                    
                                    
                                       (
                                       i
                                       ,
                                       t
                                       )
                                    
                                    ,
                                    ∀
                                    i
                                    ,
                                    t
                                 
                              
                           
                        
                        
                           
                              (14)
                              
                                 
                                    
                                       ∑
                                       
                                          u
                                          ,
                                          w
                                       
                                    
                                    f
                                    
                                       (
                                       i
                                       ,
                                       j
                                       ,
                                       u
                                       ,
                                       w
                                       ,
                                       t
                                       )
                                    
                                    
                                       b
                                       v
                                    
                                    
                                       (
                                       u
                                       ,
                                       w
                                       ,
                                       t
                                       )
                                    
                                    ≤
                                    
                                       b
                                       p
                                    
                                    
                                       (
                                       i
                                       ,
                                       j
                                       ,
                                       t
                                       )
                                    
                                    ,
                                    ∀
                                    i
                                    ,
                                    j
                                    ,
                                    t
                                 
                              
                           
                        
                     

Constraint (13) ensures that for each physical node i at any time t, the total required computational resources of virtual nodes that mapped to i would not exceed the available computational resources on i. Constraint (14) guarantees that for each physical link (i, j), the total amount of bandwidth required by the virtual links would not exceed the available bandwidth on (i, j).

Constraint (15) is employed to ensure that each virtual node u must be embedded to a physical node i.

                           
                              (15)
                              
                                 
                                    
                                       ∑
                                       i
                                    
                                    x
                                    
                                       (
                                       i
                                       ,
                                       u
                                       ,
                                       t
                                       )
                                    
                                    =
                                    1
                                    ,
                                    ∀
                                    u
                                    ,
                                    t
                                 
                              
                           
                        
                     

Considering the resilience as in an existing VNE work, it is not allowed that two virtual nodes from the same VN are embedded to the same physical node. Therefore, we have

                           
                              (16)
                              
                                 
                                    
                                       ∑
                                       u
                                    
                                    x
                                    
                                       (
                                       i
                                       ,
                                       u
                                       ,
                                       t
                                       )
                                    
                                    ≤
                                    1
                                    ,
                                    ∀
                                    i
                                    ,
                                    t
                                 
                              
                           
                        
                     

Finally, flow conservation is used to make sure that the net flow of a physical node must be zero except for the physical node that embeds a virtual node.

                           
                              (17)
                              
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                ∑
                                                j
                                             
                                             f
                                             
                                                (
                                                i
                                                ,
                                                j
                                                ,
                                                u
                                                ,
                                                w
                                                ,
                                                t
                                                )
                                             
                                             −
                                             
                                                ∑
                                                j
                                             
                                             f
                                             
                                                (
                                                j
                                                ,
                                                i
                                                ,
                                                u
                                                ,
                                                w
                                                ,
                                                t
                                                )
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             
                                             =
                                             x
                                             (
                                             i
                                             ,
                                             u
                                             ,
                                             t
                                             )
                                             −
                                             x
                                             (
                                             i
                                             ,
                                             w
                                             ,
                                             t
                                             )
                                             ,
                                             ∀
                                             i
                                             ,
                                             u
                                             ,
                                             w
                                             ,
                                             t
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Through solving the transformed optimization problem (10) under a group of constraints (11)-(17), we could obtain the optimal solution of the topology and migration aware energy efficient VNE by using IBM ILOG CPLEX or other math tools for linear programming problems. However, due to the large solution space, time spent to solve the problem grows exponentially when the size of the problem increases. Thus, an efficient algorithm is necessary for computing the optimal embedding for VN requests.

We first study the complexity of the formulated optimization problem, and prove the NP-hardness of the TMAE-VNE problem. We next propose a heuristic algorithm to determine scheduling to maximally save the total energy consumption in a scalable manner.

The optimization problem formulated in Section 3 can be shown to be NP-hard, as a standard VNE problem which is known to be NP-hard [39] can be reduced to this in polynomial time. A standard VNE problem is defined as below.


                        Standard VNE problem: Given an undirected graph 
                           
                              
                                 G
                                 p
                              
                              =
                              
                                 (
                                 
                                    N
                                    p
                                 
                                 ,
                                 
                                    L
                                    p
                                 
                                 )
                              
                              ,
                           
                         a set of vertices i ∈ Np
                         and a set of edges (i, j) ∈ Lp
                        , where i, j ∈ Np
                         has been assigned a value cp
                        (i) or bp
                        (i, j), respectively. Given another undirected graph 
                           
                              
                                 G
                                 v
                              
                              =
                              
                                 (
                                 
                                    N
                                    v
                                 
                                 ,
                                 
                                    L
                                    v
                                 
                                 )
                              
                              ,
                           
                         a set of vertices u ∈ Nv
                         and a set of edge (u, w) ∈ Lv
                        , where u, w ∈ Nv
                         has been assigned a value cv
                        (i) or bv
                        (i, j), respectively.

The problem is to determine whether or not we can find a set of valid mappings from Lv
                         to Lp
                        . In each mapping from edge (u, w) ∈ Lv
                         to (i, j) ∈ Lp
                        , two conditions are satisfied 1) cp
                        (i) ≥ cv
                        (u), and cp
                        (j) ≥ cv
                        (w); 2) bp
                        (i, j) ≥ bv
                        (i, j).

We convert our TMAE-VNE problem to a decision problem and restate it as below. Later we demonstrate that the standard VNE problem could be reduced to this problem.


                        TMAE-VNE problem: Given an undirected weighted graph Gp
                         that consists of a set of subgraphs 
                           
                              
                                 G
                                 1
                                 p
                              
                              
                                 (
                              
                              
                                 N
                                 1
                                 p
                              
                              ,
                           
                        
                        
                           
                              L
                              1
                              p
                           
                        ),
                           
                              G
                              2
                              p
                           
                        (
                           
                              
                                 N
                                 2
                                 p
                              
                              ,
                           
                        
                        
                           
                              L
                              2
                              p
                           
                        ),⋅⋅⋅, 
                           
                              G
                              
                                 D
                              
                              p
                           
                        (
                           
                              
                                 N
                                 
                                    D
                                 
                                 p
                              
                              ,
                           
                        
                        
                           
                              
                                 L
                                 
                                    D
                                 
                                 p
                              
                              
                                 )
                              
                           
                         and a set of edges 
                           
                              L
                              
                                 i
                                 n
                                 t
                                 e
                                 r
                              
                              p
                           
                         connecting subgraphs. Each vertex 
                           
                              i
                              ∈
                              
                                 N
                                 d
                                 p
                              
                           
                         and each edge 
                           
                              
                                 (
                                 i
                                 ,
                                 j
                                 )
                              
                              ∈
                              
                                 L
                                 d
                                 p
                              
                              ⋃
                              
                                 L
                                 
                                    i
                                    n
                                    t
                                    e
                                    r
                                 
                                 p
                              
                              ,
                           
                         where 
                           
                              i
                              ,
                              j
                              ∈
                              
                                 ⋃
                                 d
                              
                              
                                 N
                                 d
                                 p
                              
                           
                         has been assigned a value cp
                        (i, t) or bp
                        (i, j, t), respectively at time t. Given another undirected graph 
                           
                              
                                 G
                                 v
                              
                              =
                              
                                 (
                                 
                                    N
                                    v
                                 
                                 ,
                                 
                                    L
                                    v
                                 
                                 )
                              
                           
                        . Each vertex u ∈ Nv
                         and each edge (u, w) ∈ Lv
                        , where u, w ∈ Nv
                         has been assigned a value cv
                        (i, t) or bv
                        (i, j, t), respectively at time t.

In addition, an embedding to a node 
                           
                              i
                              ∈
                              
                                 ⋃
                                 d
                              
                              
                                 N
                                 d
                                 p
                              
                           
                         brings additional cost Copr
                        (i, t); and embedding on a edge 
                           
                              
                                 (
                                 i
                                 ,
                                 j
                                 )
                              
                              ∈
                              
                                 L
                                 d
                                 p
                              
                              ⋃
                              
                                 L
                                 
                                    i
                                    n
                                    t
                                    e
                                    r
                                 
                                 p
                              
                           
                         products additional cost Copr
                        (i, j, t). Migrations between nodes and edges result in additional costs Cmig
                        (i, t) and Cmig
                        (i, j, t), respectively. The total energy cost could be computed according to Eqs. (5), (6), and (9).

A valid one-to-one mapping for each node u ∈ Nv
                         to a i ∈ Np
                         and each (u, w) ∈ Lv
                         to (i, j) ∈ Lp
                         should satisfy two conditions: 1) cp
                        (i, t) ≥ cv
                        (u, t), and cp
                        (j, t) ≥ cv
                        (w, t); 2) bp
                        (i, j, t) ≥ bv
                        (i, j, t). The problem is to determine whether or not we can find a set of valid mappings with a cost smaller than a constant value κ.

The standard VNE could be reduced to a TMAE-VNE problem, by setting 
                           
                              
                                 c
                                 p
                              
                              
                                 (
                                 i
                                 )
                              
                              =
                              
                                 c
                                 p
                              
                              
                                 (
                                 i
                                 ,
                                 t
                                 )
                              
                              ,
                           
                        
                        
                           
                              
                                 b
                                 p
                              
                              
                                 (
                                 i
                                 ,
                                 j
                                 )
                              
                              =
                              
                                 b
                                 p
                              
                              
                                 (
                                 i
                                 ,
                                 j
                                 ,
                                 t
                                 )
                              
                              ,
                           
                        
                        
                           
                              
                                 c
                                 v
                              
                              
                                 (
                                 i
                                 )
                              
                              =
                              
                                 c
                                 v
                              
                              
                                 (
                                 i
                                 ,
                                 t
                                 )
                              
                              ,
                           
                         and 
                           
                              
                                 b
                                 v
                              
                              
                                 (
                                 i
                                 ,
                                 j
                                 )
                              
                              =
                              
                                 b
                                 v
                              
                              
                                 (
                                 i
                                 ,
                                 j
                                 ,
                                 t
                                 )
                              
                           
                         for all t. In addition, let 
                           
                              
                                 C
                                 
                                    o
                                    p
                                    r
                                 
                              
                              
                                 (
                                 i
                                 ,
                                 t
                                 )
                              
                              =
                              
                                 C
                                 
                                    o
                                    p
                                    r
                                 
                              
                              
                                 (
                                 i
                                 ,
                                 j
                                 ,
                                 t
                                 )
                              
                              =
                              1
                           
                         and 
                           
                              κ
                              =
                              n
                              +
                              l
                              ,
                           
                         where n is the size of Nv
                         and l is the number of the edges in Gp
                        . The reduction can be completed in polynomial time. After this reduction, if we could find a solution for a standard VNE, it would be also a solution for the TMAE-VNE problem and vice versa. In addition, a mapping could be validated in polynomial time if it is a solution for the TMAE-VNE problem. Thus, the TMAE-VNE problem is NP-complete.

We use a type of a single phase algorithm where for each virtual node, its DC and a physical node are assigned followed by its corresponding virtual link embedding. We first determine the set of DCs to place a virtual node at each time phase t. We then look into these DCs and find the most proper physical nodes to embed the virtual node in each time phase. Since the number of DCs are much less than the number of physical nodes, we could check all the set of DCs with enough resources, and finally, find a best set that consumes the least energy. On the other hand, the energy cost of inter DC migrations significantly overweighs that of intra DC migrations. Therefore, we first check sets of DCs with enough available resources and determine optimal embedding in the DC granularity, then we look into each physical node in the selected DCs.

We next consider the order of embedding each virtual node to reduce energy consumption. Due to the limitation of available resources, a physical node may not embed multiple virtual nodes. In addition, different virtual nodes cost different amounts of energy due to different connectivities and the network workload. Thus, the order of embedding virtual nodes impacts total energy consumption. We determine the embedding order for each virtual node based on the possible saved energy if this virtual node is embedded first. For each virtual node u, we pick two embeddings with the least and the second least energy costs. The cost difference δu
                         between these two costs indicates possible energy saving if the virtual node u’s embedding with the least cost is applied. Thus, we prefer to first embed the virtual node with the largest cost difference.

The detailed algorithm is shown in Algorithm 1
                        . For simplicity, we only consider two time phases, time tday
                         and tnight
                         in the algorithm. In each of these time phases, the workloads of the physical networks and VNs are different. However, our algorithm could be easily extended for multiple time phases.

As demonstrated in Algorithm 1, the physical network, the VNs along with their topologies and available/required resources are listed as input. In steps 1-3, we count np
                        (saw, t) and np
                        (sas, t), the number of physical nodes that are awake or asleep, respectively, and vp
                        (saw, t), the maximum available resources on a single awake physical node. This information will help to quickly filter out DCs without enough resources. Then for each unmapped virtual node u, we call FindFeasibleDCSets(DC,u) to calculate and return all feasible DCs for u, 
                           
                              L
                              i
                              s
                              
                                 t
                                 
                                    D
                                    C
                                 
                                 u
                              
                           
                         satisfying the computational resource require-ments.

In the function FindFeasibleDCSets, as presented in Algorithm 2
                        , we check each DCd
                         for each time phase t to see 1) if DCd
                         has any awake physical node at time t; 2) if vp
                        (saw, t) is larger than the required resources of the virtual node at time t; 3) if DCd
                         has any asleep physical node at time t. If conditions 1) and 2) stand, d will be added into 
                           
                              L
                              i
                              s
                              
                                 t
                                 
                                    D
                                    C
                                 
                                 
                                    a
                                    w
                                    a
                                    k
                                    e
                                 
                              
                              
                                 (
                                 t
                                 )
                              
                           
                        ; or if 3) stands but not 1) or 2), DCd
                         will be appended into 
                           
                              L
                              i
                              s
                              
                                 t
                                 
                                    D
                                    C
                                 
                                 
                                    a
                                    s
                                    l
                                    e
                                    e
                                    p
                                 
                              
                              
                                 (
                                 t
                                 )
                              
                           
                        . The union Ut
                         of 
                           
                              L
                              i
                              s
                              
                                 t
                                 
                                    D
                                    C
                                 
                                 
                                    a
                                    w
                                    a
                                    k
                                    e
                                 
                              
                              
                                 (
                                 t
                                 )
                              
                           
                         and 
                           
                              L
                              i
                              s
                              
                                 t
                                 
                                    D
                                    C
                                 
                                 
                                    a
                                    s
                                    l
                                    e
                                    e
                                    p
                                 
                              
                              
                                 (
                                 t
                                 )
                              
                           
                         contains all the DCs that have enough computational resources to embed u at time t. The Cartesian product of set Ut
                         and 
                           
                              U
                              
                                 t
                                 +
                                 1
                              
                           
                         contains all the feasible DC sets that u could be embedded into without violating computational resource limitations.

For each element 
                           
                              (
                              D
                              
                                 C
                                 d
                              
                              ,
                              D
                              
                                 C
                                 
                                    d
                                    ′
                                 
                              
                              )
                           
                         in 
                           
                              L
                              i
                              s
                              
                                 t
                                 
                                    D
                                    C
                                 
                                 u
                              
                              ,
                           
                         we could roughly estimate the energy consumption 
                           
                              
                                 C
                                 u
                              
                              
                                 (
                                 D
                                 
                                    C
                                    d
                                 
                                 ,
                                 D
                                 
                                    C
                                    
                                       d
                                       ′
                                    
                                 
                                 )
                              
                           
                         by embedding u in DCd
                         at time t and in 
                           
                              D
                              
                                 C
                                 
                                    d
                                    ′
                                 
                              
                           
                         at time 
                           
                              t
                              +
                              1
                           
                         using Eqs. (6) and (9). Each virtual node u may have multiple feasible DC sets with different estimates of energy consumption. We pick the two DC sets with the smallest estimated energy consumption and compute the difference δu
                         between their consumptions. Virtual nodes are embedded based on δ and the virtual node w with largest δw
                         will be embedded first. Different policies could be employed, e.g., first fit, load balance, or threshold, when embedding virtual nodes to physical nodes. After embedding w, each virtual link connecting w and its embedded virtual neighbors will be embedded to a physical link with the shortest path under resource constraints. Finally, the resources usage is updated before embedding the next virtual node.

By calling Algorithm 2 whose time complexity is O(m), where m is the number of physical nodes, the time complexity of Algorithm 1 is O(n
                        2
                        m), where n is the number of virtual nodes in the virtual network. It is because we need to go through each physical node for the amount of available resources. However, since the number of virtual nodes are quite small compared with the number of physical nodes, e.g., only 12 DCs are involved in B4 [40], this algorithm is efficient and reasonable in practice.

In this section, we discuss an example that compares the proposed TMAE-VNE with other existing schemes such as Topology Aware VNE (TA-VNE) [27] and Migration Aware VNE (MA-VNE) [31]. TA-VNE embeds virtual nodes based on the static rank that is determined by available resources and network topology. MA-VNE and TMAE-VNE are also topology-aware as they consider the distance between physical nodes while embedding or migrating virtual nodes or links. TMAE-VNE, on the other hand, schedules migrations according to predictable changes of physical networks or the workload of VNs before embedding VN requests. Therefore, migrations over an unnecessary long distance could be avoidable. In addition, TMAE-VNE could recognize the different energy usage between inter and intra DC links. Thus, it is especially suitable for networks of multiple DCs. TMAE-VNE also explores an efficient DC architecture and is aware of switch usage. The comparison of the three algorithms is summarized in Table 2
                     .

We compare the algorithms with a simple VNE example shown in Figs. 4
                     –6
                     
                     . We want to embed a VN request (with virtual nodes a and b) to a physical network that consists of two DCs. Each DC has a gateway switch, labeled as ‘SW’ and is connected to three physical nodes. We use a pair of numbers [cp
                     (tday
                     ), cp
                     (tnight
                     )] to indicate the ‘available’ resource of a physical node or link during time tday
                      and tnight
                     . For a VN request shown on the top, we specify the amount of ’required’ resources of the virtual node (or link) at time tday
                      and tnight
                      by [cv
                     (tday
                     ), cv
                     (tnight
                     )]. We assume that the operation energy consumption for a physical link between two DCs is 10 units, while energy consumption for a link within a single DC is 5 units. We also assume that the baseline energy for waking up a sleeping physical node is 10 units, while additional 5 units of energy are consumed for each embedded virtual node. We further set the coefficient of the duplicating execution cost as 1.

As shown in Fig. 4, TA-VNE cannot find a feasible mapping according to Eqs. (5)–(9). However, MA-VNE can embed virtual nodes a and b to physical nodes A and B at tday
                     , respectively, and migrate to physical nodes F and E at tnight
                     , respectively, as in Fig. 5. The total energy cost is 86 in the example, since the operation energy consumption is 40 
                        
                           (
                           =
                           5
                           +
                           10
                           +
                           5
                           +
                           5
                           +
                           10
                           +
                           5
                           )
                        
                      and the migration energy cost is 46 
                        
                           (
                           =
                           23
                           +
                           23
                           )
                        
                     . Meanwhile, as depicted in Fig. 6, the proposed TMAE-VNE can find the optimal solution. Node a is embedded to node F at both tday
                      and tnight
                     , and node b is embedded to node D at tday
                      and E at tnight
                     . The total energy cost is 52 including 40 
                        
                           (
                           =
                           5
                           +
                           10
                           +
                           5
                           +
                           5
                           +
                           10
                           +
                           5
                           )
                        
                      for operation and 12 
                        
                           (
                           =
                           0
                           +
                           12
                           )
                        
                      for migration. TMAE-VNE incurs less migration cost than MA-VNE as it plans migrations in advance for 
                        
                           t
                           +
                           1
                        
                     .
                  

We compare the performance of TMAE-VNE with two existing algorithms, the Topology Aware VNE (TA-VNE) [27] and Migration Aware VNE (MA-VNE) [31], with respect to energy consumption and acceptance ratio using various parameter settings.

We generate a physical network that consists of DCs and links between DCs. The inter-DC network is randomly generated using NetworkX [41], and the DCs are highly connected through this inter-DC network. Networks within a DC are generated in a hierarchical architecture. Since we are focusing on VNE, we use the simplest DC architecture; however, TMAE-VNE could be easily extended for more complicated architectures, such as [42] to improve the scalability. A root switch connects with all aggravate switches. Each aggregate switch is connected with a group of edge switches, and each edge switch is connected with a group of physical nodes. The number of physical nodes in a DC is randomly determined.

The status of each physical node is randomly determined to be awake or asleep with an equal probability of 0.5. Each physical node is randomly assigned a value between [20,35] to indicate its maximum available resource following uniform distribution. To examine the impact of the available resources on energy consumption, we randomly deduct a portion of available resources of each physical node to simulate the initial resource usage. The deducted portion is randomly decided following uniform distribution between [0, θ]. We vary the lower bound of this portion θ between [0.1, 0.9] and examine its impact in Fig. 8.

We validate our algorithm through three sets of simulations comparing with the optimal solution solved by IBM ILOG CPLEX, and two existing algorithms TA-VNE and MA-VNE using topology generated by NetworkX as well as a real topology of B4.

TA-VNE computes a rank for each physical node based on its available computational and network resources. It also calculates a rank for each virtual node based on its required resources and connectivity. Intuitively, the virtual node with a higher rank has more neighbors or demands more resources compared with the virtual node that has a lower rank. On the other hand, a physical node with a higher rank possesses more resources than a physical node with a lower rank. Therefore, TA-VNE embeds virtual nodes to physical nodes based on the nodes’ ranks, so that the virtual node v with the highest rank will be mapped to a physical node i with the highest rank. In addition, it validates if i could meet all the demands of v.

Note that TA-VNE determines a static VNE decision for a VN request. Even though, the substrate network or the mapped VNE may vary later, v is always mapped to i. As illustrated in Section 3, static VNE methods may not find the most efficient solution or even a feasible solution. Unlike TA-VNE, MA-VNE provides a dynamic VNE solution. When the substrate network evolves, MA-VNE may migrate a virtual node v from a physical node i to another physical node j to save costs and increase the acceptance ratio. In addition, delays are considered, so that v will be migrated to j only if the delay between i and j satisfies some constraints.

We first validate our algorithm by comparing it with the optimal solution solved by IBM ILOG CPLEX. Due to the hardness of the problem, we use small physical networks and VN requests. The number of DCs in this set of evaluations changes from 2 to 5, while the number of physical nodes in a DC is randomly decided between 3 and 6. We also use NetworkX to generate a random topology for each VN request. The number of virtual nodes in each VN request is randomly selected from 3 to 6 following uniform distribution. Each virtual node requires a random amount of resources between [3,5].

As presented in Fig. 7(a), the average computing time of embedding each VN by using CPLEX increases exponentially from 7.8 s to 985.03 s when the number of DCs in the physical network rises from 2 to 5, while the computing time of TA-VNE, MA-VNE, and the proposed TMAE-VNE are stable around 0.01 s even when the size of the problem increases. Although there is some distance between the proposed TMAE-VNE and the optimal solution in the total cost (Fig. 7(b)) and the acceptance ratio (Fig. 7(c)), TMAE-VNE always outperforms TA-VNE and MA-VNE. As the problem size increases, the distance between the total costs computed by the optimal solution and that computed by the heuristic algorithms becomes larger as shown in Fig. 7(b). In addition, as shown in Fig. 7(c), when the physical network expands, the acceptance ratios of all the four methods increase as there are more available resources.

Using larger scale DCs, we compare our TMAE-VNE algorithm with two existing algorithms. The number of physical nodes in a DC is randomly decided between 5 and 10, and the number of virtual nodes in each VN request is randomly selected from 3 to 10 following uniform distribution.

We examine the impact of the initial usage rate of each physical node in Fig. 8 on the total energy cost, operation energy cost, migration energy cost, and VNE acceptance ratio. The average initial usage rate varies between [0.1, 0.9]. A smaller rate means more available resources on a single physical node.

As demonstrated in Fig. 8
                        , TMAE-VNE achieves the largest acceptance ratio and the smallest total energy consumption. When the initial usage rate increases from 0.1 to 0.9, the acceptance ratio of TMAE-VNE drops from 97.6% to 71.9%. However, it is still 33.2% or 57% higher than TA-VNE (only 37.1%) or MA-VNE (only 14.9%), respectively. The migration energy cost and operation energy cost slightly increase when the initial usage rate grows. Since the initial usage rate is larger, physical nodes with sufficient available resources are spread around the physical network. However, TMAE-VNE always consumes the least cost. It even cuts up to 40% energy consumption compared to MA-VNE.

We also check the impact of the number of DCs in the physical network in Fig. 9
                        . Here, the number of DCs varies from 1 to 13. When the number of DCs increase, the total number of physical nodes that are possible to have enough capacity rises too. However, since the network expands, the length of a physical path that embeds a virtual link may become longer. Therefore, the total energy consumption increases when the number of DCs increases from 1 to 3. When the physical network grows from 3 to 13, the available resources become even more, so that TMAE-VNE could always find mappings consuming less energy. This leads to the stable energy usage when the number of DCs is from 3 to 13 or even a little drop from 9 to 11.

As shown in Fig. 9, the acceptance ratio rises when the number of DCs increases as there are more physical nodes in the entire physical network. At the same time, migration energy costs and operation energy costs rise when the number of DCs increases from 1 to 5 and keep stable when there are more than 7 DCs. TMAE-VNE still consumes the least energy all the time. The acceptance ratio of TMAE-VNE is slightly lower than MA-VNE when the number of DCs is less than 7, but it grows quickly when there are more DCs in a physical network. This is because we determine the order for each virtual node based on energy savings, while MA-VNE determines the order based on the required resources of a virtual node. When the number of available physical nodes is small, MA-VNE ensures the virtual nodes that require more resources are mapped first, then it embeds the virtual nodes with a small requirement to fill the gap. However, our TMAE-VNE could always achieve minimal energy consumption and a high acceptance ratio as the physical network expands.

We also validate the efficiency of the TMAE-VNE algorithm using a real topology of B4 that is a globally-deployed software defined network operated by Google [40]. B4 has 12 DCs covering 3 continents.

We checked the impact of the initial resource usage rate in the B4 network in Fig. 10
                        . As shown in Fig. 10(a) TMAE could reduce up to 44% of the total energy consumption compared with TA-VNE by finding a good balance between the operation energy cost and the migration energy cost. In addition, TMAE also increases the acceptance ratio up to 33%. In addition, MA-VNE has the lowest acceptance ratio when the available resources in the physical network is relative low. This is because that MA-VNE only migrates the virtual nodes or links when their embedded physical nodes or links do not have enough physical resources, and MA-VNE puts some limitations on the migration distance. However, when the available resources in the physical network are extremely (0.9), the acceptance ratio is around 90% that is better than the case that the initial resource usage is relative low (0.7). It is because, when the available resources are extremely low, most virtual nodes have to be migrated, and the constraint cover set would be larger.

@&#CONCLUSION@&#

We have modeled and proposed an efficient and practical virtual network embedding algorithm (TMAE-VNE) that takes energy consumption, future migration, and practical intra/inter DC topologies into consideration to minimize the energy consumption caused by both operation and migration of virtual networks. Since computing and network demands of a virtual network change over time and are often predictable (such as during day/night times and weekday/weekends), by considering future resource migration at the time when the different resource amounts are demanded, we have shown more physical nodes and links can be put into a sleep mode leading to greater energy savings. Understanding hierarchical fat tree DC architectures further allows us to optimize the network resource usages. We have performed extensive comparisons with prior VNE algorithms using practical intra and inter-DC topologies, and we have validated that the proposed algorithm significantly saves energy consumption, while achieving high acceptance ratios under various scenarios.

@&#REFERENCES@&#

