@&#MAIN-TITLE@&#Open source EMR software: Profiling, insights and hands-on analysis

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           The categorization of literature articles suggests the lack of adequate information from an implementer perspective.


                        
                        
                           
                           A more elaborated, hands-on study of individual OSS can reveal useful information to potential implementers, yielding better informed decisions.


                        
                        
                           
                           OSS in healthcare informatics still lag behind established open source systems in several aspects, in particular security, usability and developers support.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Open source software

EMR

EHR

Security

Usability

@&#ABSTRACT@&#


               
               
                  Background
                  The use of open source software in health informatics is increasingly advocated by authors in the literature. Although there is no clear evidence of the superiority of the current open source applications in the healthcare field, the number of available open source applications online is growing and they are gaining greater prominence. This repertoire of open source options is of a great value for any future-planner interested in adopting an electronic medical/health record system, whether selecting an existent application or building a new one. The following questions arise. How do the available open source options compare to each other with respect to functionality, usability and security? Can an implementer of an open source application find sufficient support both as a user and as a developer, and to what extent? Does the available literature provide adequate answers to such questions? This review attempts to shed some light on these aspects.
               
               
                  Objective
                  The objective of this study is to provide more comprehensive guidance from an implementer perspective toward the available alternatives of open source healthcare software, particularly in the field of electronic medical/health records.
               
               
                  Methods
                  The design of this study is twofold. In the first part, we profile the published literature on a sample of existent and active open source software in the healthcare area. The purpose of this part is to provide a summary of the available guides and studies relative to the sampled systems, and to identify any gaps in the published literature with respect to our research questions. In the second part, we investigate those alternative systems relative to a set of metrics, by actually installing the software and reporting a hands-on experience of the installation process, usability, as well as other factors.
               
               
                  Results
                  The literature covers many aspects of open source software implementation and utilization in healthcare practice. Roughly, those aspects could be distilled into a basic taxonomy, making the literature landscape more perceivable. Nevertheless, the surveyed articles fall short of fulfilling the targeted objective of providing clear reference to potential implementers. The hands-on study contributed a more detailed comparative guide relative to our set of assessment measures. Overall, no system seems to satisfy an industry-standard measure, particularly in security and interoperability. The systems, as software applications, feel similar from a usability perspective and share a common set of functionality, though they vary considerably in community support and activity.
               
               
                  Conclusion
                  More detailed analysis of popular open source software can benefit the potential implementers of electronic health/medical records systems. The number of examined systems and the measures by which to compare them vary across studies, but still rewarding insights start to emerge. Our work is one step toward that goal. Our overall conclusion is that open source options in the medical field are still far behind the highly acknowledged open source products in other domains, e.g. operating systems market share.
               
            

@&#INTRODUCTION@&#

The potential of using information technology in healthcare has been promoted widely in the literature, and benefits of such use have been predicted or reported in several studies [1,2]. However, there is a general consensus that despite those benefits in terms of care quality and efficiency, the adoption of electronic healthcare technology by health providers is still limited [3,4]. The primary barriers to adoption have been financial, and most physicians have cited financial issues like lack of capital and uncertain return on investment as substantial hurdles [5,6]. Other difficulties also loom persistently in the relevant reviews, including interoperability and training of information technology personnel [6].

The seemingly obvious answer to the financial barriers is to employ open source software (OSS) rather than commercially proprietary systems. As Kantor et al. [7] noted back in 2003, OSS may turn-out to be the force that helps overcome these and several other barriers to the use of electronic medical records (EMR) in primary care and in the rest of the healthcare system. They referred to three explicit barriers: excessive cost, the transience of vendors, and the lack of common data standards. The absence of software licensing prices suggests that OSS reduces electronic medical software ownership and development costs. OSS also minimizes vendor lock-in risk as the customer can always use an alternative solution. Moreover, authors of open-source applications are known for embracing standards [7]. OSS is further more transparent to all stakeholders, on the source code level at least, which serves to increase its credibility, an important element in sensitive systems such as those related to healthcare.

Open source electronic health records have already gained momentum [8]. And OSS adoption and diffusion in healthcare have been advocated by various reports from academic and business communities in recent years [9–13].

From an implementer standpoint, OSS is a valuable source for informed decision making. A healthcare provider who intends to adopt medical software cannot revise a proprietary system beforehand, and whether the intended system is open source or otherwise, starting from scratch or adopting an existent product, the available OSS options could and should serve the implementer in this major task. For that purpose, accessible, informative, and practical guides are much needed to facilitate the movement toward more satisfactory rate of adopting information technology in healthcare; however, only little has been produced in the literature that can fit this need. The most relevant published reviews are either general in nature or limited in the number of systems or depth of treatment they cover, as our survey revealed. One part of our endeavor in this paper is to explore the extent to which the literature provides an adequate profile of existent, active and competent open source healthcare applications.

Whether to adopt available solutions or look for better alternatives is a design decision that needs thorough understanding of healthcare industry practices and standards on one hand, and adequate examination of the existing products with respect to those practices and standards on the other hand. Toward the latter objective, we are also taking a small step in a small-scale study, focusing only on OSS systems, to complement our review and contribute to filling the gap in the literature relative to the needs of potential implementers.

@&#BACKGROUND@&#

The focus of this paper is the profile of OSS in the field of health informatics. Little consensus exists on the exact definition of the term Health Informatics or eHealth 
                        [14,15]. However, we do not concern ourselves with the exact theoretical definition as much as we consider the practical nature of health informatics as a highly interdisciplinary field that “utilizes the methods and technologies of the information sciences for the purposes of problem solving, decision making and assuring highest quality healthcare in all basic and applied areas of the biomedical sciences” [16].

Lying on the borders of medicine/healthcare and information technology, health informatics depends on several aspects of IT, essentially managed by software. It is this component (the applications) that we target to explore in this paper, for which many open source options are already available, and deemed to have the potential to play a key role in applying informatics to healthcare, as alternatives to the existent and deployed commercial/proprietary systems.

As much as there are varieties in healthcare subfields and activities, there are different types of applications. This could be noted in the projects categories listed in open source healthcare repositories online, e.g. Wikipedia list [17] and Medical Free/Libre and Open Source Software list [18]. An example of application classification in the literature is given in [19], where the authors defined 15 functional classes specific to the medical domain based on the predominant functionality of the projects. Some of these classes are Clinical Information System/Electronic Medical Records System, Messaging, Continuing Medical Education, Data Acquisition, Decision Support, Imaging, Issue Tracking, Laboratory Information System and Telemedicine. In this paper, we consider only the first (and the dominant application type): electronic health record/electronic medical record (EHR/EMR) systems.

According to the International Organization of Standards, EHR is defined by ISO/DTR 20514 as “A repository of information regarding the health of a subject of care in computer processable form, stored and transmitted securely, and accessible by multiple authorized users” [20]. EMR is often used in parallel with EHR, sometimes interchangeably, but many times with a confined context of a patient within a single healthcare organization or even a single encounter or care episode. According to this view, EMR is a point-in-time view of a larger EHR [21].

According to the Open Source Initiative [22], OSS is defined by the terms of the license for its use and distribution. They define ten characteristics of an open source license, which include free redistribution, source code distributed with the product, derived works from the code, preservation of the integrity of the original author's contribution. A license must not discriminate against persons or groups, applies to any recipient of the software, and covers the code, not the distribution [23]. Unlike public domain, a copyright and license agreement is necessary to keep the software open [24].

A range of Open Source licensing arrangements exist [24]. At one end of the spectrum is the Free Software Foundation's (copy-left) agreement [25], which requires that any software derived from the licensed software also be distributed as Open Source. At the other end of the spectrum is the more flexible licensing agreement used by BSD and the Apache foundation. The BSD agreement permits software vendors to incorporate the open-source software into their products without losing their proprietary rights to the software they develop on top of open-source code.

Free Software was the name originally used for this model of software development, and “Open Source” is a name created to avoid confusion over the term “free” in the English language [26]. Both names are very similar, but emphasize different rationales and philosophies. Sometimes, the term Free/Open source software (FOSS) is used to highlight the unified nature of the software. The history of FOSS is described in details in two books [26], “The Cathedral and the Bazaar” [27], and “Open Sources – Voices from the Open Source Revolution” [28].

OSS is not new in healthcare. In the late 1970s Octo Barnett distributed the source code for the COSTAR ambulatory medical record at no cost, even before anyone defined OSS [29]. Another example of an early open source healthcare application is the U.S. Veteran's Administration system (Vista) [30]. Nevertheless, most of the surveyed open source systems in this paper originated in much later years, rarely before the turn of the current century.

Literature-wise, many studies have been advocating the use of OSS in healthcare, as cited earlier in the introduction. However, in an open source ecosystem, perhaps more indicative are the communities that evolve around the OSS and set to support its development and deployment. Many Open-Source task forces, working groups, and scientific sessions have begun to emerge and are actively growing in leading health and biomedical informatics organizations, including the International Medical Informatics Association (IMIA), the American Medical Informatics Association (AMIA), and their regular meetings and conferences [11]. Online sources of open source healthcare related information, projects, and compilation of software are widely available. Examples include linuxMedNews [31], Medical FLOSS [32], Wikipedia [17], and of course the SourceForge open source software repository [33].

@&#METHODOLOGY@&#

The design of our study is twofold; on one hand, we profile a representative portion of existent and active OSS in the healthcare area from a literature point of view. The purpose of this part is also twofold: to provide a summary of the available guides and studies relative to the chosen OSS systems, and to identify any gaps in the published literature with respect to those systems. On the other hand, we give a close-up of those alternative systems with respect to a set of measures, through a relatively infrequent route of actually installing the software and reporting more hands-on information on the installation process, usability, as well as other variables.

The output from the literature part includes a classification of the reviewed articles. We impose this categorization to ease the perception of the spectrum of published studies on health OSS in general and our selected open source systems in particular. A brief description of all the surveyed papers is also reported. This literature review contributes likewise many valuable points as a summary of challenges, open issues, as well as recommendations on the path of OSS in health informatics. The input to this part (sources and inclusion criteria of subject articles) is discussed in later subsections.

The hands-on study received input from both the preliminary implementations of individual systems on virtual machines and online information in the system's websites. The output is a set of comparative summaries between the subject systems, based on our set of variables, as well as more insight into the limitations and merits of each system. All those elements of our study are shown in the overall conceptual framework in Fig. 1
                        . For both aspects of the paper, literature and hands-on work, the specified scope in the next subsection does apply.

Several elements confine the scope of our study and review. With respect to the term Health Informatics Software, the work in this paper applies only to a subset of health informatics, a subset of software systems, and then a subset of the combination of both subsets. As discussed earlier, health informatics comprises a group of fields, each with different types of software applications, and what we consider in this paper is the category of electronic medical records and electronic health records, as defined in the background section. This selection excludes other informatics fields like bioinformatics, and even other health informatics subfields such as imaging and visualization.

Further, the sole focus of this paper is to analyze the available options among OSS exclusively, as opposed to proprietary or commercial systems. Finally, we have selected 13 available and active EHR/EMR OSS systems: FreeMED, GNUmed, GNU Health, Hospital OS, HOSxP, OpenEMR, OpenMRS, OSCAR, THIRRA, WorldVista, ZEPRS, ClearHealth, and MedinTux. This list is not comprehensive of all available open source EHR/EMR systems, but is a representative set of popular open source EHR/EMR systems in the literature as well as in open source repositories. Table 1
                         lists this subject software of the study, along with their respective websites and brief description, each in the vendor own words.

@&#LITERATURE REVIEW@&#

We systematically reviewed the literature over two iterations. Sequentially, in both iterations, the scope, relevance, and value of the papers are assessed, and the articles are filtered accordingly. This process is summarized in Fig. 2
                        .

The literature search was conducted in mid-2013, starting from three digital databases: ScienceDirect, IEEE Xplore, and Web of Science (WoS). The search query included the words ‘electronic medical records’ or ‘electronic health records’ and ‘open source’ and the names of individual selected systems. During the search process, a review of the title, abstract, conclusion and basic methodology contributed to filter the articles based on the scope and inclusion criteria, yielding a set of 33 papers. That concluded the first iteration. During the next iteration, another round of careful search was conducted using the Google Scholar search engine to broaden the search space. Eight articles were added, and a more focused evaluation of the complete set excluded another 8 articles. Finally, a full-text review of the whole papers excluded one other article.

We defined the following fundamental criterion for inclusion in our review: the paper involves the direct survey, implementation, or use of one or more of the following OSS: FreeMED, GNUmed, GNU Health, Hospital OS, HOSxP, OpenEMR, OpenMRS, OSCAR, THIRRA, WorldVista, ZEPRS, ClearHealth or MedinTux. Although this list is not comprehensive of all available open source EHR/EMR systems, it does represent a set of popular and active open source EHR/EMR systems in the literature as well as in open source repositories.

Referring to the above rule, several reasons led to the exclusion of one or more articles: two articles are omitted because the main subject was not healthcare informatics despite the mention of few OSS. We accepted a few studies that tackled one or more of our OSS list from an information technology perspective only, because they bear direct useful feedback to any potential implementer (the main target of our study). Another two papers were excluded as they focus on diagnostic imaging and health resources aspects in the OSS, rather than EHR/EMR functionality. Finally, four review articles were withdrawn due to their non-systematic nature; they are mostly of a perspective, view point, commentary or reflection sort of articles.

The study is based on two primary sources. Firstly, the online information about the products, mostly through their own websites, and which also includes their online documentation and resources. Secondly, the study relies as well on actual preliminary implementations of the systems, each in a separate virtual machine. The main goal is to experience the installation process, and obtain a first-hand impression about the usability of the systems. These implementations can serve a later thorough investigation of the systems, in future research. The considered systems are presented in Table 1.

Our approach was to install each system on a separate virtual machine. For that purpose, we experimented with VMware Player and VirtualBox open virtualization packages. The final delivered images with installed software were produced using VirtualBox exclusively, because the free VMware edition does not export appliances. In every case, we created first the virtual machine, and installed the guest operating system; we do not consider setting the computer system on which to run the healthcare system as part of the installation process of that system. To serve as a convenient reference, we also captured the processes on video screen records.

This report summarizes our main findings about those systems with respect to a set of measures. The aim is to provide a preliminary review of the comparative features of each system, and help researchers and particularly potential implementers understand the available open options in the healthcare information systems industry. The measures against which we recorded the comparisons are summarized in Table 2
                        .

The common metrics in our set of review articles to compare between OSS systems include the technical details like platform, programming language and database system [34,35], or functions/features and security [36,37]. To provide a broader scope of evaluation, we added a few other measures. Referring to the literature on software quality models, a frequently referenced modeling standard is the International Organization for Standardization and International Electro-technical Commission 9126-1 quality standard [38]. ISO/IEC 9126-1 specifically addresses quality model definition and its use as a framework for software evaluation. A 9126-1 quality model is defined by means of general software characteristics, which are further refined into sub-characteristics, which in turn are decomposed into attributes [39]. The six quality characteristics defined in the 9126-1 quality standard are: Functionality, Reliability, Usability, Efficiency, Maintainability, and Portability.

Reliability and maintainability metrics are hard to measure in a limited experimental setting, and require long-term real-world evaluation. Also, almost all our sample OSS are cross-platform, excluding the need to include portability as a comparing factor, but we kept the ease of installation metric (a measure under a sub-characteristic of the portability quality characteristic in the 9126-1 standard) to emphasize the implementer perspective in our study. We further chose to highlight the customizability out of the usability measure, and also include user support to the measures set, as separate factors in evaluating OSS programs [40].

@&#RESULTS@&#

Our results incorporate the outcome of two main paths: the output from the literature review, producing both a simplified taxonomy of articles and a literature summary; and the findings of the hands-on study, comprising mainly the results of the evaluation of the systems with respect to the measures described earlier. Many conclusions, including challenges, recommendations and limitations are derived from both these two routes, for which we provide brief discussion later in the paper.

While examining the final filtered articles, a pattern appeared, suggesting a sort of preliminary taxonomy. Different papers cited the subject OSS applications for different purposes. Some authors wrote about specific software, reporting either on its very own design and implementation, or on their experience and usage statistics while deploying the system. This class of articles is of most help to those seeking information about particular software. If an implementer did not decide yet on a specific system, he/she has to survey individual articles of this class, one by one. This class comprises almost 16% of our sample literature (5 out of 32 papers).

Another type of articles attempt to evaluate, rather than just describe, either the functionality of OSS from a healthcare standpoint (e.g. decision support) or from an information technology standpoint (e.g. security). This category contains the fewest articles (3 out of 32 papers), suggesting another gap in literature relative to our list of OSS.

The largest portion of the articles (50%, 16 out 32 papers), are essentially various studies in healthcare informatics or software engineering, that utilize one or more of OSS as a vehicle/case study to conduct the study. Examples include the use of three healthcare's OSS to compare between the efficiencies of different vulnerability detection techniques, and the utilizing of one open source system in several projects (e.g. MVP project [41]), or studies concerned with healthcare delivery issues. Despite the valuable information these studies supply with respect to health informatics, health delivery or other fields in information technology, they offer only an indirect utility for those who plan to implement an electronic health records system and look for an accessible guide. This is because their main focus is the subject under treatment rather than the individual software systems.

The last major category of articles (25%, 8 out of 32 papers) are more relevant to our purpose, and aim to review the OSS movement in health informatics, through assessment of the general status of their adoption and/or description of individual open source example software, supposedly of particular relevance and popularity. One paper analyzes the adoption of OSS in healthcare organization in Canada through a qualitative survey of experts, and another paper systematically reviews the effect of mostly open source EMR-based systems on HIV care; but we still count these as related reviews as the main subject is the OSS itself, rather than healthcare.

A couple of observations are in order related to the last category (review) of literature articles. First, the surveyed articles rely heavily on the review of other reported literature to analyze the OSS and its role in health informatics. Second, either the depth or width (or both) of the analysis is limited, where the number of systems described or compared is small, and the extent to which the systems are investigated is mostly short beyond a basic description and key features of the software, and the focus is on providing an overall impression of the OSS profile and status in the field. It is these observations that motivate the need for a more elaborated and hands-on treatment of the subject, the objective toward which we aim to contribute in this paper. Fig. 3
                         depicts the proposed simple categorization of the literature, with reference to our study's scope.

The proposed classification above gives an overall view over the landscape of available literature on healthcare-related OSS. One can perceive the spectrum of available information about current OSS in health informatics. Table 3 in Appendix summarizes the surveyed articles chronologically, providing the objective of the work and any important results, as well as the list of OSS subjected in the article, and its position according to our taxonomy.

In the following subsections, we present the result of evaluating our list of OSS, and comparing between them, according to the eight criteria listed in Table 2, measure by measure. In each case, we formulate the measure as a subset of elements, and report the score of each system based on those elements.

As OSS, all the inspected systems are licensed under free software/open source license. They are provided free of charge, except for optional commercial support in some cases. MySQL and PostgreSQL are the dominating database systems, except for the legacy GT.M database engine, supporting the US Veterans Affairs information system (WorldVista). Those details in addition to the supported platforms and development programming languages are listed in Table 4
                           
                        

In order to have a basis to compare between the usability of the systems included, we adopted the following set of measures:
                              
                                 •
                                 Efficiency (time to accomplish tasks or throughput).

Learnability (time to learn and ease of learning).

Satisfaction (comfort and acceptability of use).

We selected these measures from a number of usability attributes in various standards and models, reported in [67]. Specifically, we adopted efficiency and satisfaction metrics from ISO 9241-11 (1998) standard [68] and learnability from several other books and studies [69–71].

We referred to some common functions in all the systems, and conducted a rudimentary experiment where specific tasks are attempted on the systems and a quantitative index is given to each, per every measure above. The scale of the index is normalized to a range of 1–5.

Three users were selected for this test. Two are from the medical field with low and high IT literacy. The third user is a professional programmer. In each test, the thirteen systems were presented to the subject test user, in its respective virtual machine and two of the researchers evaluated the usability, providing needed instructions, timing, and then questioning the test subjects.

Three very common tasks in an electronic medical records system are to: (1) create a patient, filling at least the basic demographic data, (2) enter a visit at the counter, and (3) generate a report. The test users were asked to find out how to fulfil these tasks, without assistance other than the online help and documentation, and the time consumed during this process is measured. This time would serve to indicate learnability of a given system compared to another, based on the same given tasks. After the user had learnt how to accomplish the task, the actual time taken to actually perform the operations was recorded to measure the relative efficiency associated with each application relative to the others. Finally, the subjective feeling of ease and convenience experienced by the user, as well as his impression of the user interface would gauge the satisfaction factor.


                           Table 5
                            reports the results of the comparison. It should be noted, however, that we are aware of the preliminary nature of this test. Indeed, we intend to expand the usability measure into a separate study, with adequate sample size. The mere goal here is to provide a taste of the relative satisfaction of each system based on a small reference sample.

Overall, most of the systems are similar on the usability scale, as indicated by the score column, except for those systems with non-English interfaces. We also noted during the study that users with more IT experience tend to give lower satisfaction rate for the subject EMR applications while the specific user with pure medical background was more impressed by the electronic systems, feeding higher satisfaction scores, though spending relatively more time accomplishing the tasks. The scores in Table 5 average the individual scores from the three users.

Most of the considered systems share a common set of core functionality, but vary widely in the finer features they offer. Fig. 4
                            summarizes the main features and their association with each system. For the purpose of comparison, a more compact set of traits is preferable. We follow the eight core functionalities adopted in [72], as the basis of the comparison summarized in Table 6
                           .

The functionalities reported in [72] are:
                              
                                 1.
                                 Health information and data;

Results management (e.g. images, clinical dashboard, alerts);

Order entry and management (e.g. computerized provider order entry, prescribing);

Decision support (e.g. drug interactions, prevention and detection alerts);

Electronic communication and connectivity (e.g. email, integrated records);

Patient support (e.g. patient education content);

Administrative processes (e.g. patient scheduling, billing);

Reporting and population health management (e.g. quality indicators, national registries).

The score in the final column reflects the functionality with respect to the eight very general measures, though systems do vary in the degree and richness of support to the components of those measures. From this perspective, the given score might not be strictly fair, as a system is deemed supportive of a particular functionality if it includes even a single component of the functionality, though other systems could outweigh it in the support of other functionalities, but still get smaller score. Nevertheless, most systems have medical records functionality, reporting and some means to bill and schedule patient visits.

We classified the more granular features into four domains, namely Patient handling, Medical records, Support data, and Admin tools. Each of these domains includes sub-features numbered from 1 to 25. In the following list, the number of systems that satisfy each sub-feature is also shown:


                           Patient handling
                           
                              
                                 1.
                                 Add/query (13/13)

Schedules/appointments management (12/13)

Encounters/call-ins management (5/13)

Email/SMS notifications (1/13)


                           Medical records
                           
                              
                                 5.
                                 Patient demographics (13/13)

Allergies (5/13)

Document management (4/13)

Attached documents/images (5/13)

Forms and letters (5/13)

Medication handling (10/13)

Vaccination/immunization handling (2/13)

Hospitalization (4/13)

Socioeconomics (1/13)

Billing functions (11/13)

Reports/statistics (11/13)


                           Support data
                           
                              
                                 16.
                                 Codes management (4/13)

Templates (4/13)

Insurance management (3/13)

Providers (2/13)


                           Admin
                           
                              
                                 20.
                                 Database export/backup (5/13)

Decision alerts (6/13)

Staff/doctor handling (2/13)

Prescriptions (5/13)

Lab admin/order/results (6/13)

Medicine/drugs information/inventory (5/13)

These features distributes the Open Source EMR systems as follows:
                              
                                 1.
                                 OpenEMR (19/25)

GNUHealth (16/25)

GNUmed (14/25)

WorldVista (14/25)

OSCAR (14/25)

FreeMED (13/25)

HOSxP (10/25)

Hospital OS (9/25)

MedinTux (9/25)

OpenMRS (8/25)

ClearHealth (7/25)

THIRRA (7/25)

ZEPRS (5/25)

An overall evaluation of the software systems’ security is beyond the scope of this paper, and needs an extensive analysis to measure the security on many aspects. From a defense-in-depth perspective, security at the application and data levels is applicable for individual software systems, while security of outer layers (host and network security) is more deployment-dependent. Data security implies secure storage through encryption, and protection against loss through backup policies [80,81]. Application security implies a multitude of measures, which boils down to ensuring that no vulnerabilities in the application can be exploited to compromise an asset. Thorough assurance of application security would require a vulnerability scan, code analysis, and possibly penetration testing [82,83,84].

In the realm of health information systems, more rigorous security requirements are expected, in particular those related to preserving the privacy of medical records. Few standards began to outline those requirements, most notably the American Health Insurance Portability and Accountability Act (HIPAA) privacy rules in USA and the European Data Protection Directive 95/46/EC within the European Union [73]. Out of the 13 systems under consideration, only four report their compliance to HIPAA and none to the 95/46/EC European Directive. It is important to note, however, that compliance to security and privacy regulations has more components than just the software through which records are supplied and retrieved, and involves a comprehensive adherence to policies, practices, measures and tools covering the whole life cycle of health information, including storage and exchange.

Nevertheless, to provide an indication of the comparable security of our examined systems, we adopted a subset of security metrics against which the systems are compared, and report the results in Table 7
                           . Access control, HIPAA compliance, and security of communication and data exchange are adopted from [73], based on security and privacy categories identified in the ISO 27799 standard [74]. Secure storage and backup mechanisms are well-established measures in research and industry literature (e.g. [75,76], respectively). In Table 7, if a system declares its compliance to HIPAA regulations a ✓ symbol is placed in the corresponding column along that systems’ row. Similarly, if the system provides for a security measure in any perceivable way, the corresponding column would contain a check mark. The total number of these check marks is reflected in the last column for each system indicating an overall security score.

The most common security measure in our set of systems is the authentication and access control, mainly utilizing passwords. Secure storage and secure communications are totally absent from current open source systems, whereas some systems already started compliance with HIPAA privacy rules. A few systems even lack any security/privacy mechanism, which comes as no surprise, since applications of emerging fields tend to focus on the functionality/usability first, and consider security as an afterthought.

User support can take many forms. Different users prefer different sources to learn about a system and obtain help. Some people would be comfortable referring to textual materials, while others are visual or auditory learners. Impatient or busy users would appreciate shorter tutorials and to-the-point instructions more than lengthy documents. For a product that spans more than one discipline like a health information system, users might lack enough background in information technology literacy, for example, and in many situations a committed technical support is necessary even through paid options. Therefore, documentation of a product usually, and aptly, varies in media, volume and level of details. We broke the support notion into several components to provide a finer view, and compared the studied systems based on those elements. The results are presented in Table 8
                           . Our set of user support sources is based on a comprehensive survey of any available online help for all the studied OSS. From a user perspective, all these elements can provide useful information about the process of selecting, installing and then using the software in production. For web-based applications, a common practice among software providers is to offer a demo implementation of the application, hosted on the provider's own server or a donated hosting server. Some factors are well-known means of communicating with users (e.g. forums and web blogs), whereas others are becoming more common among software developers (e.g. webcasts [77]).

Almost all systems have a website, and the worst systems in this respect are those directed toward specific audiences, and not meant to address the general English-speaking public. Notably few systems (e.g. OpenEMR) satisfy all our measures of user support. Availability of a demo website is a common practice among web-based systems, and indeed most of the web-based open source systems provide for this option.

Similar to user support, support for developers can be regarded as a composite of several characteristics [78]. Table 9
                            enumerates the software systems and indicates their provision of each support feature. Availability of a discussion group to share ideas, questions and answers is a very common practice in open source projects, and provides for a first resort when encountering undocumented issues during the development process. The same is true for mailing lists where subscribed developers can receive up-to-date news as well as recent discussion threads. For new developers in particular, a developer guide is often essential to explain core modules, coding styles and similar aspects special for the target project. Comments density is also an established quality indicator for OSS [79]. We relied on the analysis of the open source directory (www.ohloh.net/) to estimate the adequacy of code comments, where we deem more than 10% of code lines an adequate comments percentage.

Apparently from the corresponding table, support for developers is less taken care of than support for users. Nevertheless, most systems except those of individual, governmental or project-oriented natures have code repositories, as expected from open source projects. Generally, similar to the security measure, much is still needed toward supporting developers in available open source healthcare applications. It might also be worth mentioning that efforts do exist to aid developers in the field of health records. An example is the open source proof-of-concept prototype of a development framework for patient-centered record systems [80].

Considering that the systems under study are OSS, it is always possible, in theory at least, to modify the software to one's own needs, provided the required technical knowledge and documentation are available and affordable. However, we consider here the ability to customize the system from a user's perspective. To help manage the comparison, we decomposed the customizability into aspects of localization, controlling the interface elements, add-on functionality, dynamic reporting and the ability to run custom scripts. All these measures are derived by inspecting the OSS applications under study. We do not consider here the system-level customization that requires highly qualified personnel to conduct in a production environment (e.g. as pertaining to the operating system or web server configurations). Table 10
                            lists the details of the adopted components.

GNUmed by far is the most customizable system, while GNU and popular open source projects (community-wise) like OpenEMR, do support localization options. Many systems enable the user to change some aspect of the appearance, including color theme and fonts. Following this ability in support is to add custom plug-ins, possibly developed by third parties, to extend the functionality of the open source application. Still, with an average score of less than 2 out of 5, this aspect of healthcare systems still waits for more attention.

Deployment of software systems is a somewhat general term that can comprise many activities and span a long period since installing the software until decommission. We restrict our attention here to the most obvious, and conceivably, most difficult aspect of installing the software, starting from a requirements-compliant computer system and finishing with a launched copy of the software on that system. Ease of installation is one of the measures included in the ISO 9126 standard [38], under installability quality sub-characteristic. Installation effort and flexibility are other measures in this category.

In our experience, the examined systems vary widely when it comes to the installation process, ranging from being as straightforward as a single-button installation to as frustrating as spending several days trying to figure out what went wrong. Most of the systems assume a minimum level of technical literacy, at least to the level of familiarity with setting up common software libraries and database engines. Probably part of the difficulty we encountered is due to the variety of the system's technologies, which calls for broader expertise with different settings rather than a difficulty in the systems themselves.

To facilitate the comparison of system's installations, we identify a few measures that can assess the relative ease of installing each examined system. We interpret the ease with which software can be installed as the time required for installation, expected technical skills, availability of easy-to-follow instructions, and the requirement of non-common dependencies required for the installation process to succeed. All these elements are induced from our own experience installing the sample OSS under analysis. We summarize the results of comparing the systems, based on those measures, in Table 11
                           . It should be noted that the reported installation times measure only the consumed time during the actual installation, excluding any time spent in frustration due to troubleshooting or learning about the process. Times of installation are relatively low, but the level of expertise expected is somewhat high in at least half of the systems. Although instructions are provided most of the time, a certain level of familiarity with setting web and database servers is implied.

We conclude this section with a summary reference of the previous comparisons, shown in Table 12
                           . In this table, we combine the total scores of the applications for each comparative parameter. The values in the figure are first normalized per each parameter with respect to the maximum score, so that the best score would be set at 100% and serve as a reference point. In this way, we highlight the relative vantages among the applications rather than the absolute scores. Please note that we accommodated the categorical values of the ‘Ease of Installation’ criterion to a numerical range consistent with the rest of the parameters for the sake of comparison. We normalized the installation time into a scale of 1–5, the longer the time the lower the score. We also mapped the three possible values of the expected literacy level to numerical values as follows: 1 for more than average, 3 for average and 5 for low expectations; i.e. the less required technical knowledge the better. Finally we assigned a score of 5 for any system that provides installation instructions and score of 1 to those lacking these instructions; the opposite was followed with the required dependencies factor, where any system free from complex dependencies received a score of 5 and vice versa.

We note from the figure that the systems are not so divergent in usability and functionality, excluding few non-English ones; however, the discrepancies are more obvious in the other parameters, especially the security measures, developer support and customizability. All systems are demanding when considering the installation process, though GNUmed, OpenEMR and ZEPRS provides for a significantly easier experience than the others. From this summary figure alone, we can conclude that some systems are better candidates for a good basis on which to build new implementations. In particular, OpenEMR is an outstanding application, falling short of other top systems only in the amount of customization and support for developers. Similarly, GNUmed is a very promising product provided more attention is paid to mainly security aspects. OpenMRS has been deployed in many developing countries, and provides for a fairly capable application if the full spectrum of functionalities is covered beyond its original scenarios in resource-constrained environments. Systems like HOSxP and MedinTux compete so well in aspects of the functionality they provide but they suffer from the narrow audience base they address, as they support no English interfaces or user/developer support. We also do not recommend ZEPRS system as it seems very bound to the initial project it was developed for. WorldVista is a matured system that received much support over the years, though because of this very reason it might be less flexible to adapt to new situation. What makes this argument more pertinent is the unique underlying technology in terms of the database system and programming language.

@&#DISCUSSION@&#

As was mentioned in the results section above, we can confirm, overall, the conclusion in [37], stating that open EHR software programs mostly fulfil structural and procedural requirements at the minimal and sometimes full functionality levels. Communication, privacy and security requirements are accomplished in a small proportion of the cases, mainly at minimal functional level. Ethical, cultural, and consumer requirements still need to be fulfilled by free and open source EHR applications.

One observation might deserve a special mention. Referring to the literature, it looks like OpenMRS is the most popular and widely employed open source EHR system. It could be the case, however, that it is the most extensively covered system, rather than the most deployed. One reason to think so is the fact that many articles in our set are a series of reports by a group of researchers who have taken the endeavor of implementing EHR systems in a few developing countries, and developed OpenMRS as a result, deploying it in multiple countries, sharing their experience with the research and practicing communities.

Throughout the reviewed articles, a common set of challenges was consistently reported. In general, these challenges are barriers to adopt OSS in healthcare, and are found in different classes of articles: observations from systematic reviews, lessons from implementation experience or conclusions from evaluation studies. Since those general difficulties stand as direct concern to anyone who plans to implement an OSS in a healthcare setting, we summarize in this section the most important issues raised in the literature, verified and confirmed by lessons from our own hands-on study.

A group of challenges relate to the nature of healthcare systems. Healthcare systems operate large, complex and all-day non-stop operations, face heavy and changing regulatory burdens, and have heavy implementation and support requirements. OSS based on voluntary communities might not be able to meet those demands. Moreover, senior management in healthcare organizations tends to be conservative in maintaining in-house, technical and developmental teams that could best leverage OSS.

From a research perspective, there is an obvious lack of formal evaluation of the benefits regularly reported by users of OSS. There is also no evidence yet that OSS applications are more reliable than commercial products in this area, and this is despite the acknowledgment that availability of source code makes immediate fixes for identified problems possible. Although there are a number of employed and seemingly successful projects, it is hard for most OSS projects, available on the Internet, to estimate the quality and completeness. Quality criteria and scientific evaluation against these criteria are needed before a potential implementer could make the decision to employ OSS.

As OSS, many drawbacks of the open source model also apply to healthcare applications. For instance, lack of support and technical assistance by vendors and lack of a guaranteed quality of service and responsibility in case of errors; as a result, software upgrading and improvement depend on the user's skills and familiarity with the software. Another disadvantage of OSS is its lack of credibility and validity, especially after dramatic alterations of the initial version.

Other difficulties, specific to the medical domain as reported by some surveyed papers, include the need to deal with the issue of legacy data. Those are data inherited from older systems in a legacy format, or communicated with other proprietary systems. The analyzed OSS also presented low use of standard codes for medical terminology. Another issue is that the applications require, in most cases, in-house customization and training before the medical staff can use them efficiently and develop materials and forms to meet specific needs.

Perhaps the most important and relevant class of challenges that relate to our work are ones addressing the functionality of the systems. As indicated in [37], and highlighted by our results earlier, most healthcare open source systems have several functional limitations. A recurrent limitation is partial or no support for privacy and security services. In most cases security is reduced to a user/password mechanism; sometimes user roles have been incorporated only to restrict access to specific content or sections of the system, but not for protecting information based on consent or privacy policies. OSS also presents reduced functionalities for decision support and knowledge management. Intelligent data analysis is limited or non-existent in most applications.

An important current limitation for open source EHR/EMR software is the lack of support for exchanging medical records, interoperability and collaboration. Systems sharing the same data structures or supporting standard messaging have the ability to exchange records, though the task is not straightforward. Nonetheless, a more serious limitation is the issue of secure exchange of health records.

There are also many limitations associated with the individual applications, as indicated by our results above. Some of these limitations correspond to the ease of installation and user-friendliness. Further, the setup of the systems is not obvious in many of the cases and requires IT administration skills. However, these latter difficulties could be considered easier to handle. A need for better technical documentation was also noted, especially from a developer perspective. Although customization is not yet a prominent feature in most of the subject systems, support for localization is often an essential requirement, and many OSS surpass commercial software in this regard.

A significant part of the reviewed articles considered the employment of healthcare OSS in resource-constrained environments, in particular as applies to developing countries. The major challenges in those settings include the availability of adequate infrastructure: hardware, electricity, networking and often Internet access. Also, trained personnel like staff to carry out data entry, provide IT support and software support is often inadequate. Moreover, there is usually lack of leadership and management to ensure that the key aspects of the system are supported and problems are addressed promptly. Similar could be said about obstacles, such as the limited transportation, and large coverage areas.

Finally, there are common problems with any EHR/EMR, whether open source or otherwise, and even any computerized system. These problems relate to the users of the system, especially the category of older doctors in the medical domain. The time needed to become familiar with the tool or even to acquire basic IT literacy either prevents them from enjoying the full benefits of an advanced EHR system, or leads to a complete rejection of the system.

Besides highlighting the barriers and hurdles, many articles in the literature also suggested potential remedies to mitigate those problems and outlined some recommendations. We summarize and tabulate the main proposed solutions and recommendations in Table 13
                        .

@&#LIMITATIONS@&#

Even though our approach in this paper is multifaceted, and we aimed to cover the subject from both literature and hands-on experimental perspectives, we have to acknowledge several limitations in our study. In the following subsections, we discuss a few of these limitations.

One drawback of our study is the restrictive scope, where the analyzed OSS is a partial set of the available open source options to any healthcare provider. To provide the potential implementers with a comprehensive set of available alternatives, more studies are required to cover the whole spectrum of not only EHR/EMR software, but other medical informatics software as well. Nevertheless, for the scope of open source EHR, which constitutes the core of healthcare information systems, our list is a carefully chosen representative and fairly encompassing sample (e.g. with reference to the list provided in Wikipedia).

Another limiting factor in our study is the nature of our implementation of the subject software. It is more of an artificial prototype than a real-world setting. Though many installations did contain sample data, the limited operations performed by the researchers to probe the systems are certainly short of coping with an actual usage model. Although we believe that our investigation revealed the differences between systems relative to our defined set of comparative measures, we plan to exploit our ready preliminary installations on separate virtual machines as the basis toward more extensive investigations of more complete and real-like deployments.

Finally, as indicated in the results of the hands-on analysis, many of the assessments regarding the comparative set of measures have a subjective quality. What mitigates this effect in our opinion is the fact that those particular judgments are formed by the same researcher, making a single reference for comparison, however this reference was inaccurate. Also, the weights on all the components included to arrive at the total scores are all the same, suggesting the components are equally important, which is unlikely. We are planning to handle these issues in a consequent work that considers the comparison between different systems as a multi-criteria decision support problem.

@&#CONCLUSIONS@&#

Open source software has gained great success in a large variety of application fields; the same potential for within the healthcare domain is anticipated and progressively being approached. Still no widespread deployment of OSS healthcare applications was reported in the literature, nor does compelling evidence exist of their superiority compared to more matured commercial systems in this field. Nonetheless, OSS should provide a viable and valuable option when intending to build or adopt an open source suite for a healthcare organization. OSS can provide the base, either as a set of building blocks or as an open resource of ideas and guidance, to construct larger, more comprehensive healthcare solutions. Toward that end, available OSS applications are not yet adequately analyzed and compared to provide such guidance for potential implementers.

In-depth investigation of OSS alternatives is necessary, as few studies in the literature analyze the available OSS options beyond reporting their status and profiling their spectrum. In this study, we undertook the task of surveying the literature from the perspective of an implementer with respect to a set of most popular OSS alternatives available on the Internet. Our induced taxonomy of the literature revealed the need outlined above. Moreover, and probably more importantly, we conducted a (hands-on) study, implementing the set of applications locally on separate virtual machines, to examine the systems more closely. We set several measures as a comparison basis, and scored each system accordingly. In agreement with other studies in the literature, many OSS applications are found to be lacking in some aspects, more notably security and interoperability. Our study also revealed the lack of enough developers’ support, as we envision OSS as a source of building blocks, reference material, as well as consumer commodity.
                        
                           
                              Summary points
                           
                           
                              
                                 
                                    What was already known?
                                       
                                          •
                                          Open source software can have great potential in health informatics, especially in resources-constrained environments.

Yet, many barriers have been reported in literature that hinders wide adoption of OSS in the healthcare industry.

Many articles have discussed medical OSS from different aspects, mostly as a vehicle to conduct healthcare studies, or as a limited review of individual software.


                                    What this study has added?
                                       
                                          •
                                          The categorization of literature articles suggests the lack of adequate information from an implementer perspective.

A more elaborated, hands-on study of individual OSS can reveal useful information to potential implementers, yielding better informed decisions.

OSS in healthcare informatics still lag behind established open source systems in several aspects, in particular security, usability and developers support.

@&#ACKNOWLEDGEMENTS@&#

This Research has been funded by the High Impact Research unit (HIR) University of Malaya, under grant number UM.C/HIR/MOHE/FCSIT/12. We would like to express our very great appreciation to Assoc. Prof. Dr. Paul Hansen from University of Otago, New Zealand for his valuable comments and constructive suggestions during the planning and development of this research work. His willingness to give his time so generously has been very much appreciated.


                     
                  

@&#REFERENCES@&#

