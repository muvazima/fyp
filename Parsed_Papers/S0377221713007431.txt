@&#MAIN-TITLE@&#Resource allocation model and double-sphere crowding distance for evolutionary multi-objective optimization

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We propose a resource allocation model for evolutionary multiobjective optimization.


                        
                        
                           
                           We propose a double-sphere crowding distance for evolutionary multiobjective optimization.


                        
                        
                           
                           Experiments are performed on twelve benchmark problems and one real-world problem.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Multi-objective programming

Evolutionary computations

Resource allocation

Crowding distance

@&#ABSTRACT@&#


               
               
                  Convergence speed and diversity of nondominated solutions are two important performance indicators for Multi-Objective Evolutionary Algorithms (MOEAs). In this paper, we propose a Resource Allocation (RA) model based on Game Theory to accelerate the convergence speed of MOEAs, and a novel Double-Sphere Crowding Distance (DSCD) measure to improve the diversity of nondominated solutions. The mechanism of RA model is that the individuals in each group cooperate with each other to get maximum benefits for their group, and then individuals in the same group compete for private interests. The DSCD measure uses hyper-spheres consisting of nearest neighbors to estimate the crowding degree. Experimental results on convergence speed and diversity of nondominated solutions for benchmark problems and a real-world problem show the efficiency of these two proposed techniques.
               
            

@&#INTRODUCTION@&#

In the real world, a lot of optimization problems may contain several objectives to be optimized at the same time. These optimization problems are known as multi-objective optimization problems (MOPs). Evolutionary algorithms (EAs) have been widely applied to solve MOPs in the past two decades. The Vector Evaluated Genetic Algorithm (VEGA; Schaffer, 1984) was probably the first multi-objective optimization evolutionary algorithm (MOEA). Since the middle 1990s, there have been an increasing number of MOEAs. The Niched Pareto Genetic Algorithm (NPGA; Horn, Nafpliotis, & Goldberg, 1993), the Nondominated Sorting Genetic Algorithm (NSGA; Srinivas & Deb, 1993) and the Strength Pareto Evolutionary Algorithm (SPEA; Zitzler & Thiele, 1999) were representative algorithms. In the past decade, many efficient MOEAs were presented. The typical representatives of these algorithms were the Pareto Archived Evolution Strategy (PAES; Knowles & Corne, 2000), the Pareto Envelope based Selection Algorithm (PESA; Corne, Knowles, & Oates, 2000), the Multi-Objective Messy Genetic Algorithm (MOMGA; Van Veldhuizen & Lamont, 2000), the Micro Genetic Algorithm (MicroGA; Coello Coello & Pulido, 2001), the improved version of NSGA (NSGA-II) with a more efficient nondominated sorting method, elitism, and a crowded comparison operator without specifying any additional parameters for diversity maintaining (Deb, Pratap, Agarwal, & Meyarivan, 2002), the improved version of SPEA (SPEA2) with a revised fitness assignment strategy, a nearest neighbor density estimation technique, and an enhanced archive truncation method (Zitzler, Laumanns, & Thiele, 2002), the Multi-objective Particle Swarm Optimization (MOPSO; Coello Coello, Pulido, & Lechuga, 2004), the Multi-objective Evolutionary Algorithm Based on Decomposition (MOEA/D; Zhang & Li, 2007), the Regularity Model Based Multi-Objective Estimation of Distribution Algorithm (RM-MEDA; Zhang, Zhou, & Jin, 2008), the Evolutionary Multi-Objective Immune algorithm (EMOIA; Tan, Goh, Mamun, & Ei, 2008), and the Fast Hypervolume-Based Many-Objective Optimization (HypE; Bader & Zitzler, 2011).

Since MOEAs generally need a large number of iterations to achieve convergence, the processing takes lots of computations. Therefore, how to accelerate the convergence speed is of great importance. In this study, we introduce a Resource Allocation (RA) model based on Game Theory for MOEAs.

In addition, simultaneously optimization of multiple objectives is quite different from single objective optimization in that there are a group of nondominated solutions in multi-objective optimization. Each nondonimated solution on Pareto front has its unique physical significance. Generally speaking, it is essential to maintain diversity of the final solution sets. To achieve this purpose, some methods are applied in different MOEAs. The nondominated solutions pruning method based on crowding distance (Deb, Pratap et al., 2002) has been widely used. In our paper, an improved crowding distance based on Double-Sphere is proposed to well reflect the bending degree and spatial information of nondominated individuals.

These two novel strategies are then applied to the Nondominated Neighbor Immune Algorithm (NNIA), which was proposed by Gong, Jiao, Du, and Bo (2008). We compare the improved NNIA with NSGA-II, NNIA and MOEA/D in terms of convergence speed and diversity to show the effectiveness of these two strategies.

The remainder of this paper is organized as follows: Section 2 briefly describes related background. The RA model and the Double-Sphere Crowding Distance (DSCD) measure and their application in NNIA are presented in Section 3. In Section 4, twelve benchmark MOPs and a real-world problem are used to evaluate the performance of these two proposed strategies. In Section 5, concluding remarks are presented.

Multi-objective optimization (Coello Coello, Van Veldhuizen, & Lamont, 2002; Deb, 2001) seeks to optimize a vector of functions,
                           
                              (1)
                              
                                 
                                    
                                       
                                       
                                          
                                             F
                                             (
                                             x
                                             )
                                             =
                                             (
                                             
                                                
                                                   f
                                                
                                                
                                                   1
                                                
                                             
                                             (
                                             x
                                             )
                                             ,
                                             …
                                             ,
                                             
                                                
                                                   f
                                                
                                                
                                                   m
                                                
                                             
                                             (
                                             x
                                             )
                                             )
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             Subject
                                             
                                             to
                                             
                                             x
                                             =
                                             (
                                             
                                                
                                                   x
                                                
                                                
                                                   1
                                                
                                             
                                             ,
                                             
                                                
                                                   x
                                                
                                                
                                                   2
                                                
                                             
                                             ,
                                             ⋯
                                             ,
                                             
                                                
                                                   x
                                                
                                                
                                                   n
                                                
                                             
                                             )
                                             ∈
                                             Ω
                                          
                                       
                                    
                                 
                              
                           
                        where Ω is the decision space, F:Ω→
                        R
                        
                           m
                         is the map of decision space to m real valued objectives space.

Take a maximization problem into consideration. It is said that a vector 
                           x
                        
                        
                           A
                        
                        ∈Ω dominates another vector 
                           x
                        
                        
                           B
                        
                        ∈Ω (written as 
                           x
                        
                        
                           A
                        
                        ≻
                        
                           x
                        
                        
                           B
                        ) if and only if
                           
                              (2)
                              
                                 ∀
                                 i
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 m
                                 
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       A
                                    
                                 
                                 )
                                 ⩾
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       B
                                    
                                 
                                 )
                                 ∧
                                 ∃
                                 j
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 m
                                 
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       A
                                    
                                 
                                 )
                                 >
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       B
                                    
                                 
                                 )
                              
                           
                        It is said that a vector of decision valuables 
                           x
                        
                        ∗
                        ∈Ω is a Pareto-optimal solution or nondonimated solution if there does not exist another 
                           x
                        
                        ∈Ω such that
                           x
                        
                        ≻
                        
                           x
                        
                        ∗.

Therefore, the Pareto-optimal set is defined as Eq. (3).
                           
                              (3)
                              
                                 
                                    
                                       P
                                    
                                    
                                       ∗
                                    
                                 
                                 =
                                 {
                                 
                                    
                                       x
                                    
                                    
                                       ∗
                                    
                                 
                                 ∈
                                 Ω
                                 |
                                 ¬
                                 ∃
                                 x
                                 ∈
                                 Ω
                                 ,
                                 x
                                 ≻
                                 
                                    
                                       x
                                    
                                    
                                       ∗
                                    
                                 
                                 }
                              
                           
                        Then the Pareto-optimal set is the set of all Pareto-optimal solutions. The corresponding image of them under the objective function space is called the Pareto-optimal front, which can be described as follows:
                           
                              (4)
                              
                                 
                                    
                                       PF
                                    
                                    
                                       ∗
                                    
                                 
                                 =
                                 {
                                 F
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       ∗
                                    
                                 
                                 )
                                 =
                                 (
                                 
                                    
                                       f
                                    
                                    
                                       1
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       ∗
                                    
                                 
                                 )
                                 ,
                                 
                                    
                                       f
                                    
                                    
                                       2
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       ∗
                                    
                                 
                                 )
                                 ,
                                 …
                                 ,
                                 
                                    
                                       f
                                    
                                    
                                       m
                                    
                                 
                                 (
                                 
                                    
                                       x
                                    
                                    
                                       ∗
                                    
                                 
                                 )
                                 )
                                 |
                                 
                                    
                                       x
                                    
                                    
                                       ∗
                                    
                                 
                                 ∈
                                 
                                    
                                       P
                                    
                                    
                                       ∗
                                    
                                 
                                 }
                              
                           
                        The purpose of a MOEA is to find a set of Pareto-optimal solutions approximate the true Pareto-optimal front.

As is presented in Section 1, many MOEAs have emerged since the middle 1990s. The NNIA, one of the multi-objective optimization algorithms based on Artificial Immune Systems (Chen, Lin, & Ji, 2010; Coello Coello & Cortes, 2005; Hu, 2010; Tan et al., 2008), was presented by us in Gong et al. (2008). In NNIA, we store nondominated individuals found so far in an external population, the dominant population. Only partial less-crowded nondominated individuals, active antibodies, are selected to do proportional cloning, recombination, and hypermutation. Furthermore, the population storing clones is called the clone population. The dominant population, active population, and clone population at time t are presented by time-dependent variable matrices D
                        
                           t
                        , A
                        
                           t
                         and C
                        
                           t
                        , respectively. The details of NNIA are described as follows.


                        Nondominated Neighbor Immune Algorithm
                        
                           
                              
                                 
                                 
                                 
                                    
                                       
                                          Input:
                                       
                                       
                                          G
                                          max (maximum number of generations)
                                    
                                    
                                       
                                       
                                          n
                                          
                                             D
                                           (maximum size of dominant population)
                                    
                                    
                                       
                                       
                                          n
                                          
                                             A
                                           (maximum size of active population)
                                    
                                    
                                       
                                       
                                          n
                                          
                                             C
                                           (size of clone population)
                                    
                                    
                                       
                                          Output:
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      D
                                                   
                                                   
                                                      
                                                         
                                                            G
                                                         
                                                         
                                                            max
                                                         
                                                      
                                                      +
                                                      1
                                                   
                                                
                                             
                                           (final approximate Pareto-optimal set)
                                    
                                 
                              
                           
                        
                        
                           
                              
                                 Step 1: 
                                 Initialization: Generate an initial antibody population B
                                 0 with size n
                                 
                                    D
                                 . Create the initial D
                                 0
                                 =
                                 ϕ, A
                                 0
                                 =
                                 ϕ, and C
                                 0
                                 =
                                 ϕ. Set t
                                 =0.


                                 Step 2: 
                                 Update Dominant Population: Identify dominant antibodies in B
                                 
                                    t
                                 . Copy all the dominant antibodies to form the temporary dominant population (denoted by DT
                                 
                                    t+1). If the size of DT
                                 
                                    t+1 is not greater than n
                                 
                                    D
                                 , let D
                                 
                                    t+1
                                 =
                                 DT
                                 
                                    t+1. Otherwise, calculate the crowding distance values of all individuals in DT
                                 
                                    t+1, sort them in descending order of crowding distance, and choose the first n
                                 
                                    D
                                  individuals to form D
                                 
                                    t+1.


                                 Step 3: 
                                 Termination: If t
                                 >
                                 G
                                 max is satisfied, export D
                                 
                                    t+1 as the output of the algorithm, Stop; Otherwise, t
                                 =
                                 t
                                 +1.


                                 Step 4: 
                                 Nondominated Neighbor-Based Selection: If the size of D
                                 
                                    t
                                  is not greater than n
                                 
                                    A
                                 , let A
                                 
                                    t
                                 
                                 =
                                 D
                                 
                                    t
                                 . Otherwise, calculate the crowding distance values of all individuals in D
                                 
                                    t
                                 , sort them in descending order of crowding distance, and choose the first n
                                 
                                    A
                                  individuals to form A
                                 
                                    t
                                 .


                                 Step 5: 
                                 Proportional Cloning: Get the clone population C
                                 
                                    t
                                  by applying proportional cloning to A
                                 
                                    t
                                 .


                                 Step 6: 
                                 Recombination and Hypermutation: Perform recombination and hypermutation on C
                                 
                                    t
                                  and set 
                                    
                                       
                                          
                                             C
                                          
                                          
                                             t
                                          
                                          
                                             ′
                                          
                                       
                                    
                                  to the resulting population.


                                 Step 7: Get the antibody population B
                                 
                                    t
                                  by combining the 
                                    
                                       
                                          
                                             C
                                          
                                          
                                             t
                                          
                                          
                                             ′
                                          
                                       
                                    
                                  and D
                                 
                                    t
                                 ; go to Step 2.

The experimental results in Gong et al. (2008) showed that NNIA was an efficient and effective immune-inspired multi-objective optimization algorithm. However, this algorithm might be trapped in local optimal front if current isolated nondominated antibodies selected for proportional cloning were few. In addition, crowding distance-based one-off deletion technique used in NNIA could not supply a perfect distribution of the final approximate solutions.

@&#RELATED WORK@&#

For the limitation of computations, the study on convergence speed of a MOEA is of great significance. There are many strategies in MOEAs to make the population evolve fast. Strength-Pareto strategy with a revised fitness assignment is adopted in SPEA2 to preserve the elite individuals. In NSGA-II, the author selects the best individuals in population according to nondominated sorting strategy and crowding distance to make the population achieve convergence. A decomposition method is applied in MOEA/D which is benefit to help the population converge fast. Elitism is used in NNIA according to nondominated sorting strategy and crowding distance. The convergence speed of these algorithms is always in connection with resource allocation in the iteration process. Game theory has obtained remarkable effects in dealing with limited resources allocation. Xu, Krzyzak, and Oja (1993) proposed Rival Penalized Competitive Learning (RPCL) for clustering analysis, RBF net, and curve detection, which had achieved good results. Fan, Zhen, and Xie (2003) proposed a Suppressed fuzzy c-means clustering algorithm, in which a suppressed learning strategy was adopted. In this paper we introduce a RA model for accelerating convergence speed of MOEAs.

Since there are many solutions in the final Pareto-optimal sets, diversity maintenance is of great importance in multi-objective optimization. A lot of diversity maintenance methods have been applied in MOEAs. A nature way to obtain good distribution of Pareto-optimal sets may be using clustering algorithms. However, the clustering algorithms may require lots of computations, whose complexity is O(MN
                        2) for a Pareto-optimal set with size N and M objectives. The diversity maintenance of SPEA2 is to find the kth nearest neighbor of solutions based on Euclidean distance. It has nearly the same complexity as clustering algorithms. For the large computations, SPEA2 gets best distribution. In NSGA-II, crowding distance comparison operator without specifying any additional parameters is applied in the nondominated solutions pruning process. The method of NSGA-II also provides rather good diversity in the case of bi-objective instances. When the number of objectives is more than two, the diversity declines drastically. Kukkonen and Deb (2006) proposed a new pruning method based on vicinity distance and k Nearest Neighbors search techniques. It improves the diversity of NSGA-II. In PESA, diversity maintenance is controlled via a simple hyper-grid based scheme. However, the Hyper-grid size is a crucial parameter for the performance of PESA. In NNIA, the crowding distance-based proportional cloning is used to maintain the diversity of final approximate solution sets. In this paper, we propose a new crowding distance based on double-sphere and apply it in archive truncation method to improve the diversity of NNIA.

According to Game Theory that individuals in different levels form a consortium and work together to strive for the best benefits, we propose the Resource Allocation (RA) model. In RA model, individuals in a population are firstly divided into different ranks (Rank
                           1,
                           Rank
                           2,…,
                           Rank
                           
                              n
                           ), where Rank
                           
                              i
                            denotes the size of individuals at the ith rank (1⩽
                           i
                           ⩽
                           n). The individuals at the first rank are the most outstanding. And so forth, those at nth rank are the worst.

The iterative process is divided into three stages, and three models are designed for these three stages, respectively. The proportion of the best individuals in total population is a more appropriate indicator of determining which model will be employed in the next generation compared with other indicator, such as iterations or evaluations.
                              
                                 (5)
                                 
                                    r
                                    =
                                    
                                       
                                          Rank
                                       
                                       
                                          1
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   
                                                      n
                                                   
                                                
                                             
                                             
                                                
                                                   Rank
                                                
                                                
                                                   i
                                                
                                             
                                          
                                       
                                    
                                    
                                    0
                                    ⩽
                                    r
                                    ⩽
                                    1
                                 
                              
                           Here, r is the indicator, which expresses the proportion of the best individuals in total population. The interval between 0 and 1 can be divided into three equal intervals. We can determine that which model will be employed in the next generation, according to the value of the proportion r. Fig. 1
                            is a chart of our proposed RA model.

Early model (r
                           ⩽1/3): In this stage, there are only a small amount of outstanding individuals (the 1st rank individuals) in the population. The 2nd rank individuals have threats on the resources possession of the 1st rank individuals. Meanwhile, the threats of other ranks are few. Therefore we use the RPCL (Xu et al., 1993) strategy, which only curbs individuals at the 2nd rank, and gives priority to the development of the 1st rank individuals.

Medium model (1/3⩽
                           r
                           ⩽2/3): In this stage, there are more outstanding individuals in the population, but we cannot ignore the influence that the individuals on the other ranks have a few threats on the resources possession of the 1st rank individuals. So we suppress individuals on the other ranks to ensure the priority to develop the 1st rank individuals.

Late model (r
                           ⩾2/3): In this stage, the number of the 1st rank individuals is so large, and all individuals on the other ranks cannot affect the 1st rank individuals. We can ignore the impact of individuals belong to different ranks, and all of the individuals in this model can be utilized to keep the diversity of the population.

As is described in Section 2.1, cloning is a key step in NNIA. We use the RA model in the cloning operator. Then the modified cloning operator is called RA Cloning Operator. The details of the RA Cloning Operator are presented as follows.


                           RA Cloning Operator
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             Input:
                                          
                                          
                                             CS (size of cloning pool)
                                       
                                       
                                          
                                          
                                             P
                                             
                                                t
                                              (the antibodies at current population)
                                       
                                       
                                          
                                          
                                             N (the size of main population)
                                       
                                       
                                          
                                             Output:
                                          
                                          
                                             COA
                                             
                                                t
                                              (the antibodies after RA-Cloning)
                                       
                                    
                                 
                              
                           
                           
                              
                                 
                                    Step 1: 
                                    Divide Antibodies into Different Ranks: According to the nondominated ranking strategy, divide antibodies in P
                                    
                                       t
                                     into different ranks. The size of the antibodies at each rank is S
                                    1, S
                                    2,…,
                                    S
                                    
                                       n
                                    (n
                                    ⩾1), where n is the number of ranks. According to proportional cloning, the cloning scale of ith rank antibodies is Srank
                                    
                                       i
                                    , that is Srank
                                    
                                       i
                                    
                                    =⌈S
                                    
                                       i
                                    
                                    ×
                                    N/CS⌉. If r
                                    ⩾2/3, go to step3, otherwise, go to step 2.


                                    Step 2: 
                                    Modify the Cloning Scale According to Early and Medium Model. In this case, the computing resources of the 1st rank individuals need to be increase through suppressing other ranks individuals. The cloning scale of antibodies at each rank is MSrank
                                    
                                       i
                                    . If r
                                    ⩽1/3, using the Early model, only the 2nd individuals should be suppressed.
                                       
                                          (6)
                                          
                                             
                                                
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               MSrank
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         =
                                                         ⌈
                                                         
                                                            
                                                               Srank
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         +
                                                         (
                                                         1
                                                         -
                                                         a
                                                         )
                                                         ×
                                                         
                                                            
                                                               Srannk
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         ⌉
                                                      
                                                   
                                                
                                                
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               MSrank
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         =
                                                         ⌈
                                                         a
                                                         ×
                                                         
                                                            
                                                               Srank
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         ⌉
                                                      
                                                   
                                                
                                                
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               MSrank
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                         =
                                                         
                                                            
                                                               Srank
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                         (
                                                         3
                                                         ⩽
                                                         i
                                                         ⩽
                                                         n
                                                         )
                                                      
                                                   
                                                
                                                
                                                   
                                                   
                                                      
                                                         a
                                                         =
                                                         
                                                            
                                                               
                                                                  
                                                                     Srank
                                                                  
                                                                  
                                                                     1
                                                                  
                                                               
                                                            
                                                            
                                                               
                                                                  
                                                                     Srank
                                                                  
                                                                  
                                                                     1
                                                                  
                                                               
                                                               +
                                                               
                                                                  
                                                                     Srank
                                                                  
                                                                  
                                                                     2
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 

The a is the suppression coefficient. When the number of the 1st rank individuals is small, the suppression coefficient a can be used to suppress the cloning scale of antibodies at 2nd rank, and increase the cloning scale of antibodies at 1st rank. If 1/3⩽
                                    r
                                    ⩽2/3, all the other ranks of the individuals should be suppressed. The suppression coefficient a is equal to r. Then the antibodies at each rank are proportionally cloned by their crowding distance, and fill the cloned antibodies into COA
                                    
                                       t
                                    .
                                       
                                          (7)
                                          
                                             
                                                
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               MSrank
                                                            
                                                            
                                                               1
                                                            
                                                         
                                                         =
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        Srank
                                                                     
                                                                     
                                                                        1
                                                                     
                                                                  
                                                                  +
                                                                  (
                                                                  1
                                                                  -
                                                                  a
                                                                  )
                                                                  ×
                                                                  
                                                                     
                                                                        
                                                                           ∑
                                                                        
                                                                        
                                                                           i
                                                                           =
                                                                           2
                                                                        
                                                                        
                                                                           n
                                                                        
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        Srank
                                                                     
                                                                     
                                                                        i
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               MSrank
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                         =
                                                         ⌈
                                                         a
                                                         ×
                                                         
                                                            
                                                               Srank
                                                            
                                                            
                                                               i
                                                            
                                                         
                                                         ⌉
                                                         (
                                                         2
                                                         ⩽
                                                         i
                                                         ⩽
                                                         n
                                                         )
                                                      
                                                   
                                                
                                                
                                                   
                                                   
                                                      
                                                         a
                                                         =
                                                         
                                                            
                                                               
                                                                  
                                                                     Srank
                                                                  
                                                                  
                                                                     1
                                                                  
                                                               
                                                            
                                                            
                                                               
                                                                  
                                                                     ∑
                                                                  
                                                                  
                                                                     i
                                                                     =
                                                                     1
                                                                  
                                                                  
                                                                     n
                                                                  
                                                               
                                                               
                                                                  
                                                                     Srank
                                                                  
                                                                  
                                                                     i
                                                                  
                                                               
                                                            
                                                         
                                                         =
                                                         r
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 


                                    Step 3: 
                                    Maintain the diversity of individuals. In this stage, the information of ranks will be ignored, and the antibodies will be proportionally cloned by their crowding distance, and fill the cloned antibodies into COA
                                    
                                       t
                                    . Stop.

In the first two models, the cloning scale of the nondominated individuals is increased, when the cloning scale of the dominated individuals is suppressed. Cloning a lot of nondominated individuals will increase the convergence speed, and a certain number of dominated individuals will decrease the insufficient diversity due to over-ignoring the dominated individuals. In the late model, the proportion of the nondominated individuals is large enough so that the influence of the dominated individuals on the convergence can be ignored. And more attentions and trials should be given to how to maintain diversity. Therefore, the cloning scale of the individuals is only determined by the crowding distance rather than the ranking of individuals.

Let us consider an example in that the size of cloning pool is 10 and the cloning scale is 30. Assume that the size of antibodies at each rank is 2, 4 and 4. That is, S
                           1
                           =2, S
                           2
                           =4 and S
                           3
                           =4. In this case, we can calculate that r
                           =(2/10)⩽1/3. Here, we use the Early model in the cloning process. Then we can obtain the modified cloning scale is that MSrank
                           1
                           =14, MSrank
                           2
                           =4 and MSrank
                           3
                           =12. Let us consider another case that the size of antibodies at each rank is 6, 2 and 2. That is S
                           1
                           =6, S
                           2
                           =2 and S
                           3
                           =2. Here, we use the Medium model in the cloning process. Then we can obtain the modified cloning scale is that MSrank
                           1
                           =23, MSrank
                           2
                           =4,MSrank
                           3
                           =4. Assume that the size of antibodies at each rank is 7, 1 and 2. The Late model should be executed. The information of the ranks is ignored. All of antibodies should be executed the proportional cloning according to the crowding distance.

In NNIA, the dominant individuals in the population D are ranked according to how much they contribute to the diversity of objective function values. This can be measured by the crowding distance (Deb, Pratap et al., 2002). This method is easy to be calculated and to be understood. The crowding distance of a dominant individual d
                        ∈
                        D can be calculated according to Eq. (6),
                           
                              (8)
                              
                                 I
                                 (
                                 d
                                 ,
                                 D
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          k
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             I
                                          
                                          
                                             i
                                          
                                       
                                       (
                                       d
                                       ,
                                       D
                                       )
                                    
                                    
                                       
                                          
                                             f
                                          
                                          
                                             i
                                          
                                          
                                             max
                                          
                                       
                                       -
                                       
                                          
                                             f
                                          
                                          
                                             i
                                          
                                          
                                             min
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    f
                                 
                                 
                                    i
                                 
                                 
                                    max
                                 
                              
                           
                         and 
                           
                              
                                 
                                    f
                                 
                                 
                                    i
                                 
                                 
                                    min
                                 
                              
                           
                         are the maximum and minimum value of the ith objective and
                           
                              (9)
                              
                                 
                                    
                                       I
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 d
                                 ,
                                 D
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ∞
                                                   ,
                                                   if
                                                   
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   (
                                                   d
                                                   )
                                                   =
                                                   
                                                      min
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  f
                                                               
                                                               
                                                                  i
                                                               
                                                            
                                                            (
                                                            
                                                               
                                                                  d
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            )
                                                            |
                                                            
                                                               
                                                                  d
                                                               
                                                               
                                                                  ′
                                                               
                                                            
                                                            ∈
                                                            D
                                                         
                                                      
                                                   
                                                   
                                                   or
                                                   
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   (
                                                   d
                                                   )
                                                   =
                                                   
                                                      max
                                                   
                                                   {
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   (
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   )
                                                   |
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   ∈
                                                   D
                                                   }
                                                
                                             
                                             
                                                
                                                   
                                                      min
                                                   
                                                   {
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   (
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   )
                                                   -
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   (
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         ″
                                                      
                                                   
                                                   )
                                                   |
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   ,
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         ″
                                                      
                                                   
                                                   ∈
                                                   D
                                                   :
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   (
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         ″
                                                      
                                                   
                                                   )
                                                   <
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   (
                                                   d
                                                   )
                                                   <
                                                   
                                                      
                                                         f
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                   (
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   )
                                                   }
                                                   ,
                                                   
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        Based on the crowding distance above, we can estimate the density of dominant individuals surrounding d in the population D. If I(d,
                        D)>
                        I(d′,
                        D), d,d′∈
                        D, then d is a less-crowded individual, and d lies in a less-crowded region of the trade-off front, in contrast to d′. However, crowding degree of points locating on the curved part of the Pareto front cannot be well reflected by straight-line distance. Furthermore, crowding degree based on the two nearest neighbor points of an individual cannot supply dynamic and sufficient neighborhood information well. When the number of objective functions is more than two, the crowding distance may result in losing spatial information. To reflect the bending degree of Pareto front and the spatial information well, we propose a novel crowding distance named Double-Sphere crowding distance (DSCD). This strategy consists of two parts. One is two nearest neighbor points of the individual to be evaluated. Another is reflected on the cooperation of the individual to be evaluated and its n-nearest neighbor points, where n indicates the dimension of objective functions.

Consider an example of a bi-objective optimization problem. First, we sort the population according to each objective function value. We establish a circle, whose diameter is the distance of the two nearest neighbor points (P
                        1,
                        P
                        2). Then establish another circle, whose diameter size is equal to the sum of the distances of the individual to the two nearest neighbor points. So it can be calculated according to Eq. (10) and Fig. 2
                         (A is the individual to be evaluated. P
                        1, P
                        2 is the two nearest points of A).
                           
                              (10)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                
                                                   DS
                                                
                                                
                                                   1
                                                
                                             
                                             =
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               |
                                                               
                                                                  
                                                                     
                                                                        
                                                                           P
                                                                        
                                                                        
                                                                           1
                                                                        
                                                                     
                                                                     
                                                                        
                                                                           P
                                                                        
                                                                        
                                                                           2
                                                                        
                                                                     
                                                                  
                                                                  
                                                                     →
                                                                  
                                                               
                                                               |
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   2
                                                
                                             
                                             ;
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                                
                                                   DS
                                                
                                                
                                                   1
                                                
                                                
                                                   ′
                                                
                                             
                                             =
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               |
                                                               
                                                                  
                                                                     
                                                                        
                                                                           AP
                                                                        
                                                                        
                                                                           1
                                                                        
                                                                     
                                                                  
                                                                  
                                                                     →
                                                                  
                                                               
                                                               |
                                                               +
                                                               |
                                                               
                                                                  
                                                                     
                                                                        
                                                                           AP
                                                                        
                                                                        
                                                                           2
                                                                        
                                                                     
                                                                  
                                                                  
                                                                     →
                                                                  
                                                               
                                                               |
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   2
                                                
                                             
                                             -
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               |
                                                               
                                                                  
                                                                     
                                                                        
                                                                           P
                                                                        
                                                                        
                                                                           1
                                                                        
                                                                     
                                                                     
                                                                        
                                                                           P
                                                                        
                                                                        
                                                                           2
                                                                        
                                                                     
                                                                  
                                                                  
                                                                     →
                                                                  
                                                               
                                                               |
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   2
                                                
                                             
                                             ;
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             DSCD
                                             =
                                             σ
                                             ×
                                             
                                                
                                                   DS
                                                
                                                
                                                   1
                                                
                                             
                                             +
                                             (
                                             1
                                             -
                                             σ
                                             )
                                             ×
                                             
                                                
                                                   DS
                                                
                                                
                                                   1
                                                
                                                
                                                   ′
                                                
                                             
                                             ;
                                             
                                             (
                                             σ
                                             ∈
                                             (
                                             0.5
                                             ,
                                             1
                                             )
                                             )
                                          
                                       
                                    
                                 
                              
                           
                        When the objective dimension is n(n
                        >2), the crowding distance can be calculated according to Eq. (11).
                           
                              (11)
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                
                                                   DS
                                                
                                                
                                                   1
                                                
                                             
                                             =
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               |
                                                               
                                                                  
                                                                     
                                                                        
                                                                           P
                                                                        
                                                                        
                                                                           1
                                                                        
                                                                     
                                                                     
                                                                        
                                                                           P
                                                                        
                                                                        
                                                                           2
                                                                        
                                                                     
                                                                  
                                                                  
                                                                     →
                                                                  
                                                               
                                                               |
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   n
                                                
                                             
                                             ;
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                                
                                                   DS
                                                
                                                
                                                   1
                                                
                                                
                                                   ′
                                                
                                             
                                             =
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     ∑
                                                                  
                                                                  
                                                                     i
                                                                     =
                                                                     1
                                                                  
                                                                  
                                                                     n
                                                                  
                                                               
                                                               |
                                                               
                                                                  
                                                                     
                                                                        
                                                                           AP
                                                                        
                                                                        
                                                                           i
                                                                        
                                                                     
                                                                  
                                                                  
                                                                     →
                                                                  
                                                               
                                                               |
                                                            
                                                            
                                                               n
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   n
                                                
                                             
                                             -
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               |
                                                               
                                                                  
                                                                     
                                                                        
                                                                           P
                                                                        
                                                                        
                                                                           1
                                                                        
                                                                     
                                                                     
                                                                        
                                                                           P
                                                                        
                                                                        
                                                                           2
                                                                        
                                                                     
                                                                  
                                                                  
                                                                     →
                                                                  
                                                               
                                                               |
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                      
                                                   
                                                
                                                
                                                   n
                                                
                                             
                                             ;
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             DSC
                                             D
                                             =
                                             σ
                                             ×
                                             
                                                
                                                   DS
                                                
                                                
                                                   1
                                                
                                             
                                             +
                                             (
                                             1
                                             -
                                             σ
                                             )
                                             ×
                                             
                                                
                                                   DS
                                                
                                                
                                                   1
                                                
                                                
                                                   ′
                                                
                                             
                                             ;
                                             
                                             (
                                             σ
                                             ∈
                                             (
                                             0.5
                                             ,
                                             1
                                             )
                                             )
                                          
                                       
                                    
                                 
                              
                           
                        Here, P
                        1, P
                        2,…,
                        P
                        
                           n
                         are the n nearest points to A. 
                           
                              |
                              
                                 
                                    
                                       
                                          P
                                       
                                       
                                          1
                                       
                                    
                                    
                                       
                                          P
                                       
                                       
                                          2
                                       
                                    
                                 
                                 
                                    →
                                 
                              
                              |
                           
                         denotes the Euclidean distance between P
                        1 and P
                        2. 
                           
                              |
                              
                                 
                                    
                                       
                                          AP
                                       
                                       
                                          i
                                       
                                    
                                 
                                 
                                    →
                                 
                              
                              |
                              (
                              1
                              ⩽
                              i
                              ⩽
                              n
                              )
                           
                         denotes the Euclidean distance between A and P
                        
                           i
                        . σ(σ
                        ∈(0.5,1)) is a weight coefficient. Then the crowding degree of an individual can be evaluated by DSCD.

In this section, the DSCD-based archive truncation method is used in NNIA. The improved Nondominated Neighbor Immune Algorithm with Double-Sphere crowding distance (DS-NNIA) is described as follows.


                           Algorithm: DS-NNIA
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             Input:
                                          
                                          
                                             G
                                             max (maximum number of generations)
                                       
                                       
                                          
                                          
                                             n
                                             
                                                D
                                              (maximum size of dominant population)
                                       
                                       
                                          
                                          
                                             n
                                             
                                                A
                                              (maximum size of active population)
                                       
                                       
                                          
                                          
                                             n
                                             
                                                C
                                              (size of clone population)
                                       
                                       
                                          
                                             Output:
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         D
                                                      
                                                      
                                                         
                                                            
                                                               G
                                                            
                                                            
                                                               max
                                                            
                                                         
                                                         +
                                                         1
                                                      
                                                   
                                                
                                              (final approximate Pareto-optimal set)
                                       
                                    
                                 
                              
                           
                           
                              
                                 
                                    Step 1: 
                                    Initialization: Generate an initial antibody population B
                                    0 with size n
                                    
                                       D
                                    . Create the initial D
                                    0
                                    =
                                    ϕ, A
                                    0
                                    =
                                    ϕ, and C
                                    0
                                    =
                                    ϕ. Set t
                                    =0.


                                    Step 2: 
                                    Update Dominant Population: Identify dominant antibodies in B
                                    
                                       t
                                    . Copy all the dominant antibodies to form the temporary dominant population (denoted by DT
                                    
                                       t+1). If the size of DT
                                    
                                       t+1 is not greater than n
                                    
                                       D
                                    , let D
                                    
                                       t+1
                                    =
                                    DT
                                    
                                       t+1. Otherwise, calculate the Double-Sphere crowding distance values of all individuals in DT
                                    
                                       t+1, sort them in descending order of Double-Sphere crowding distance based archive truncation method, and choose the first n
                                    
                                       D
                                     individuals to form D
                                    
                                       t+1.


                                    Step 3: 
                                    Termination: If t
                                    >
                                    G
                                    max is satisfied, export D
                                    
                                       t+1 as the output of the algorithm, Stop; Otherwise, t
                                    =
                                    t
                                    +1.


                                    Step 4: 
                                    Nondominated Neighbor-Based Selection: If the size of D
                                    
                                       t
                                     is not greater than n
                                    
                                       A
                                    , let A
                                    
                                       t
                                    
                                    =
                                    D
                                    
                                       t
                                    . Otherwise, calculate the Double-Sphere crowding distance values of all individuals in D
                                    
                                       t
                                    , sort them in descending order of Double-Sphere crowding distance based archive truncation method, and choose the first n
                                    
                                       A
                                     individuals to form A
                                    
                                       t
                                    .


                                    Step 5: 
                                    Proportional Cloning: Get the clone population C
                                    
                                       t
                                     by applying proportional cloning to A
                                    
                                       t
                                    .


                                    Step 6: 
                                    Recombination and Hypermutation: Perform recombination and hypermutation on C
                                    
                                       t
                                     and set 
                                       
                                          
                                             
                                                C
                                             
                                             
                                                t
                                             
                                             
                                                ′
                                             
                                          
                                       
                                     to the resulting population.


                                    Step 7: Get the antibody population B
                                    
                                       t
                                     by combining the 
                                       
                                          
                                             
                                                C
                                             
                                             
                                                t
                                             
                                             
                                                ′
                                             
                                          
                                       
                                     and D
                                    
                                       t
                                    ; go to Step 2.

In this section, the RA Cloning Operator and DSCD-based archive truncation method are applied in NNIA at the same time. The RA Cloning Operator is used in cloning step, and DSCD-based archive truncation method is used in nondominated solutions pruning process, respectively. Then the improved NNIA is called Enhanced Multi-Objective Immune Algorithm (EMIA). The main loop of EMIA is as follows.


                           Algorithm: EMIA
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             Input:
                                          
                                          
                                             G
                                             max (maximum number of generations)
                                       
                                       
                                          
                                          
                                             n
                                             
                                                D
                                              (maximum size of dominant population)
                                       
                                       
                                          
                                          
                                             n
                                             
                                                A
                                              (size of active population)
                                       
                                       
                                          
                                          
                                             n
                                             
                                                C
                                              (size of clone population)
                                       
                                       
                                          
                                             Output:
                                          
                                          
                                             
                                                
                                                   
                                                      
                                                         D
                                                      
                                                      
                                                         
                                                            
                                                               G
                                                            
                                                            
                                                               max
                                                            
                                                         
                                                         +
                                                         1
                                                      
                                                   
                                                
                                              (final approximate Pareto-optimal set)
                                       
                                    
                                 
                              
                           
                           
                              
                                 
                                    Step 1: 
                                    Initialization: Generate an initial antibody population B
                                    0 with size n
                                    
                                       D
                                    . Create the initial D
                                    0
                                    =
                                    ϕ, A
                                    0
                                    =
                                    ϕ, and C
                                    0
                                    =
                                    ϕ. Set t
                                    =0.


                                    Step 2: 
                                    Update Population: Identify dominant antibodies in B
                                    
                                       t
                                    . Copy all the dominant antibodies to form the temporary dominant population (denoted by DT
                                    
                                       t+1). If the size of DT
                                    
                                       t+1 is not greater than n
                                    
                                       A
                                    , Select the best n
                                    
                                       A
                                     individuals to form D
                                    
                                       t+1 from B
                                    
                                       t
                                     according to nondominated rank theory. If the size of DT
                                    
                                       t+1 is greater than n
                                    
                                       A
                                     but not more than n
                                    
                                       D
                                    , let D
                                    
                                       t+1
                                    =
                                    DT
                                    
                                       t+1. Otherwise, calculate the Double-Sphere crowding distance values of all individuals in DT
                                    
                                       t+1, sort them in descending order of Double-Sphere crowding distance based archive truncation method, and choose the first n
                                    
                                       D
                                     individuals to form D
                                    
                                       t+1.


                                    Step 3: 
                                    Termination: If t
                                    >
                                    G
                                    max is satisfied, export D
                                    
                                       t+1 as the output of the algorithm, Stop; Otherwise, t
                                    =
                                    t
                                    +1.


                                    Step 4: 
                                    Neighbor-Based Selection: If the size of D
                                    
                                       t
                                     is not greater than n
                                    
                                       A
                                    , let A
                                    
                                       t
                                    
                                    =
                                    D
                                    
                                       t
                                    . Otherwise, calculate the Double-Sphere crowding distance values of all individuals in D
                                    
                                       t
                                    , sort them in descending order of Double-Sphere crowding distance based archive truncation method, and choose the first n
                                    
                                       A
                                     individuals to form A
                                    
                                       t
                                    .


                                    Step 5: 
                                    RA Cloning: Get the clone population C
                                    
                                       t
                                     by applying RA Cloning Operator to A
                                    
                                       t
                                    .


                                    Step 6: 
                                    Recombination and Hypermutation: Perform recombination and hypermutation on C
                                    
                                       t
                                     and set 
                                       
                                          
                                             
                                                C
                                             
                                             
                                                t
                                             
                                             
                                                ′
                                             
                                          
                                       
                                     to the resulting population.


                                    Step 7: Get the antibody population B
                                    
                                       t
                                     by combining the 
                                       
                                          
                                             
                                                C
                                             
                                             
                                                t
                                             
                                             
                                                ′
                                             
                                          
                                       
                                     and D
                                    
                                       t
                                    ; go to Step 2.

It is more interesting and important to study the computational complexity of DS-NNIA and EMIA. For DS-NNIA and EMIA, they are simplified as O(n(n
                           
                              D
                           
                           +
                           n
                           
                              C
                           )2), which are the same as NNIA. Here, n is the size of objectives, the maximum size of the dominant population is n
                           
                              D
                           , and the size of clone population is n
                           
                              C
                           . In next section, some experimental results of DS-NNIA and EMIA are presented.

In this section, we compare NSGA-II, NNIA, MOEA/D with DS-NNIA and EMIA in solving thirteen MOPs to validate the effectiveness of RA model and DSCD measure. All the simulations were run on a personal computer with Core 2 2.0G CPU and 2G RAM.

In our experiment, we select the following twelve benchmarks and one real-world problem. The DEB and KUR problems were defined by Deb (1999) and Kursawe (1991), respectively. Five ZDT problems proposed by Zitzler, Deb, and Thiele (2000) and Five DTLZ problems defined by Deb, Thiele, Laumanns, and Zitzler (2002) are selected to investigate the performance of our proposed algorithm, as the three comparing algorithms in this paper, MOEA/D proposed by Zhang and Li (2007), NSGAII proposed by Deb, Pratap et al. (2002) and NNIA proposed by ours (2007) all utilize these problems to verify the performance of their algorithms in their papers. Details of the ten benchmark instances are shown in Table 1
                        . However, there are always many constraints in most of multi-objective optimization problems. In our subsequent experiments, we will concentrate on a real-world problem, the welded beam design (WBD) problem (Rao, 1996). The WBD problem is a famous problem which is commonly encountered in engineering fields. There are four real parameters as the classical test functions. The two objectives are mainly about the cost of fabrication and the end deflection of welded beam, both of which are the minimum problems. The WBD problem can be described as Eq. (12).
                           
                              (12)
                              
                                 
                                    
                                       
                                          
                                             
                                                min
                                             
                                          
                                       
                                       
                                          
                                             
                                             F
                                             (
                                             x
                                             )
                                             =
                                             (
                                             
                                                
                                                   f
                                                
                                                
                                                   1
                                                
                                             
                                             (
                                             x
                                             )
                                             ,
                                             
                                                
                                                   f
                                                
                                                
                                                   2
                                                
                                             
                                             (
                                             x
                                             )
                                             )
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                             
                                                
                                                   f
                                                
                                                
                                                   1
                                                
                                             
                                             (
                                             x
                                             )
                                             =
                                             1.10471
                                             
                                                
                                                   h
                                                
                                                
                                                   2
                                                
                                             
                                             l
                                             +
                                             0.04811
                                             tb
                                             (
                                             14.0
                                             +
                                             l
                                             )
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                             
                                                
                                                   f
                                                
                                                
                                                   2
                                                
                                             
                                             (
                                             x
                                             )
                                             =
                                             2.1952
                                             /
                                             
                                                
                                                   t
                                                
                                                
                                                   3
                                                
                                             
                                             b
                                          
                                       
                                    
                                    
                                       
                                          
                                             subject
                                             
                                             to
                                          
                                       
                                       
                                          
                                             
                                             
                                                
                                                   g
                                                
                                                
                                                   1
                                                
                                             
                                             (
                                             x
                                             )
                                             ≡
                                             13
                                             ,
                                             600
                                             -
                                             τ
                                             (
                                             x
                                             )
                                             ⩾
                                             0
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                             
                                                
                                                   g
                                                
                                                
                                                   2
                                                
                                             
                                             (
                                             x
                                             )
                                             ≡
                                             30
                                             ,
                                             000
                                             -
                                             σ
                                             (
                                             x
                                             )
                                             ⩾
                                             0
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                             
                                                
                                                   g
                                                
                                                
                                                   3
                                                
                                             
                                             (
                                             x
                                             )
                                             ≡
                                             b
                                             -
                                             h
                                             ⩾
                                             0
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                             
                                                
                                                   g
                                                
                                                
                                                   4
                                                
                                             
                                             (
                                             x
                                             )
                                             ≡
                                             
                                                
                                                   P
                                                
                                                
                                                   c
                                                
                                             
                                             (
                                             x
                                             )
                                             -
                                             6000
                                             ⩾
                                             0
                                          
                                       
                                    
                                    
                                       
                                          
                                             0.125
                                             ⩽
                                          
                                       
                                       
                                          
                                             
                                             h
                                             ,
                                             b
                                             ⩽
                                             5.0
                                             ,
                                             0.1
                                             ⩽
                                             l
                                             ,
                                             t
                                             ⩽
                                             10.0
                                          
                                       
                                    
                                 
                              
                           
                        where the exact stress and buckling terms are shown in Eq. (13).
                           
                              (13)
                              
                                 
                                    
                                       
                                       
                                          
                                             τ
                                             (
                                             x
                                             )
                                             =
                                             
                                                
                                                   
                                                      
                                                         (
                                                         
                                                            
                                                               τ
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         )
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   +
                                                   
                                                      
                                                         (
                                                         
                                                            
                                                               τ
                                                            
                                                            
                                                               ″
                                                            
                                                         
                                                         )
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   +
                                                   (
                                                   l
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   
                                                      
                                                         τ
                                                      
                                                      
                                                         ″
                                                      
                                                   
                                                   )
                                                   /
                                                   
                                                      
                                                         0.25
                                                         (
                                                         
                                                            
                                                               l
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         +
                                                         
                                                            
                                                               (
                                                               h
                                                               +
                                                               t
                                                               )
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         )
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                                
                                                   τ
                                                
                                                
                                                   ′
                                                
                                             
                                             =
                                             6000
                                             /
                                             
                                                
                                                   2
                                                
                                             
                                             hl
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                                
                                                   τ
                                                
                                                
                                                   ″
                                                
                                             
                                             =
                                             
                                                
                                                   6000
                                                   (
                                                   14
                                                   +
                                                   0.5
                                                   l
                                                   )
                                                   
                                                      
                                                         0.25
                                                         (
                                                         
                                                            
                                                               l
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         +
                                                         
                                                            
                                                               (
                                                               h
                                                               +
                                                               t
                                                               )
                                                            
                                                            
                                                               2
                                                            
                                                         
                                                         )
                                                      
                                                   
                                                
                                                
                                                   2
                                                   {
                                                   0.707
                                                   hl
                                                   (
                                                   
                                                      
                                                         l
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   /
                                                   12
                                                   +
                                                   0.25
                                                   
                                                      
                                                         (
                                                         h
                                                         +
                                                         t
                                                         )
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                   )
                                                   }
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             σ
                                             (
                                             x
                                             )
                                             =
                                             504
                                             ,
                                             000
                                             /
                                             
                                                
                                                   t
                                                
                                                
                                                   2
                                                
                                             
                                             b
                                          
                                       
                                    
                                    
                                       
                                       
                                          
                                             
                                                
                                                   P
                                                
                                                
                                                   c
                                                
                                             
                                             (
                                             x
                                             )
                                             =
                                             64
                                             ,
                                             746
                                             ,
                                             022
                                             (
                                             1
                                             -
                                             0.0282346
                                             )
                                             
                                                
                                                   tb
                                                
                                                
                                                   3
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     


                        Zitzler, Thiele, Laumanns, Fonseca, and da Fonseca (2003) suggested that for a k-objective optimization problem, at least k performances are needed to compare two or more solutions and an infinite number of metrics to compare two or more sets of solutions. Deb and Jain (2002) suggested a running performance metric for measuring the convergence to the reference set at each generation of an MOEA run. Zitzler et al. (2003) and Knowles, Thiele, and Zitzler (2006) have suggested that the power of unary quality indicators was restricted. Van Veldhuizen and Lamont (2000), Zitzler et al. (2003), Knowles et al. (2006) have presented summarizations on performance assessment metrics. The typical metrics of them are convergence (Khare, Yao, & Deb, 2003), coverage of two sets (Zitzler & Thiele, 1998), and spacing (Schott, 1995). Purity and minimal spacing were then proposed in Bandyopadhyay, Pal, and Aruna (2004). Zitzler and Thiele (1999) developed the hypervolume metric, which can reflect the convergence speed and diversity of nondonimated solutions. In our study, the convergence metric, spacing metric, and the hypervolume metric will be applied.

We use the simulated binary crossover (SBX) operator and polynomial mutation (Deb & Beyer, 2001) in NSGA-II, NNIA, DS-NNIA and EMIA. They have been used in many MOEA papers (Deb, Pratap et al., 2002; Gong et al., 2008; Igel, Hansen, & Roth, 2007; Khare et al., 2003; Zitzler et al., 2002). Finding the values of parameters for where an MOEA works best is a difficult MOP in itself. We list these parameters in Table 2
                         where n is the number of variables.

@&#EXPERIMENTAL RESULTS@&#


                           Fig. 3
                            shows statistical values of spacing metric for ZDT test problem and DTLZ test problem on NSGA-II, DS-NSGA-II, NNIA and DS-NNIA. It could be found in Fig. 3 that all these four algorithms can obtain good experiment results. From box plots of spacing metric, NSGA-II and NNIA have almost the same performance. However, DS-NSGA-II can get better results than NSGA-II, and DS-NNIA can obtain the best results in the most test problems. For DTLZ test problem, DS-NSGA-II and DS-NNIA are slightly better than NSGA-II and NNIA, respectively.

On the other hand, in order to show that how much DSCD-based selection strategy can affect the convergence speed, we also show the box plots of convergence metric of NNIA and DS-NNIA in Fig. 4
                           . Note that there are mean values of normalized convergence metric with generations obtained by NNIA and DS-NNIA for ZDT1 and DTLZ1 problems.

It could be found from Fig. 4 that both NNIA and DS-NNIA achieve convergence at nearly 200 generations for ZDT1 problem. Meanwhile, for DTLZ1 problem DS-NNIA reaches convergence at about 300 generation, while NNIA achieves convergence at about 350. The results of DS-NNIA are slightly better than NNIA.

Overall considering the experimental results, we believe that the following conclusions could be obtained. For ZDT1 and DTLZ1 problems, DSCD-based archive truncation method improves the diversity of final approximate solutions, and this method speeds up slightly the convergence speed of NNIA in the meantime.

In this section, both RA model and DSCD-based archive truncation method are used in NNIA at the same time. The RA model is used in cloning operator and the DSCD-based archive truncation method is then used in the approximate sets pruning process. Our purpose is to accelerate the convergence speed and to obtain a good distribution at the same time. We compare the convergence metric, hypervolume metric and minimal spacing metric among MOEA/D, NSGA-II, NNIA and EMIA to validate the effectiveness of RA model and DSCD-based selection strategy.

Note that the convergence metric is employed to evaluate the performance of the EMIA. There are thirty independent runs for each test problem. For MOEA/D and NSGA-II, the population size is 100. For NNIA, the maximum size of dominant population n
                           
                              D
                            is 100, the maximum size of active population n
                           
                              A
                            is 30, and the size of clone population n
                           
                              C
                            is 100. the parameter setting of above three algorithms are same as which in their papers. For our EMIA, the maximum size of dominant population n
                           
                              D
                            is 100, the size of active population n
                           
                              A
                            is 30, the size of clone population n
                           
                              C
                            is 100.

Firstly, we concentrate on the convergence speed analysis between MOEA/D, NSGA-II, NNIA and EMIA for two representative ZDT1 problem and DTLZ1 problem. Fig. 5
                            shows mean values of normalized convergence metric obtained from these four algorithms.

From Fig. 5, some conclusions can be obtained. For ZDT1 problem, EMIA and NNIA achieves convergence at about 200 iterations, while MOEA/D needs about 250 iterations and NSGA-II needs about 375 iterations to achieve convergence. The mean value of normalized convergence metric obtained by EMIA reaches the best result. For DTLZ1 problem, the MOEA/D which is the fastest one achieves convergence at about 200 generation, but the final result of MOEA/D is worse than NNIA and EMIA which achieve convergence at about 350 and 275 iterations, respectively. Considering the experimental results, we can conclude that the RA model improves the convergence speed of NNIA and make the algorithms obtains better solutions.

Secondly, we use the convergence metric for ten benchmark problems to show the efficiency of EMIA introduced in our article. Statistical values are shown by box plots in Fig. 6
                           . For MOEA/D, NSGAII, NNIA and EMIA, all the test functions evaluations number is set as 50,000.

It can be seen from Fig. 6 that for ZDT2, ZDT4, DTLZ1, DTLZ3 and DTL4, our EMIA can obtain better convergent results than the other three algorithm. For DEB, KUR, ZDT6, DTLZ2 and DTLZ 6, the second best results are provided by EMIA, while the best results are provided by MOEA/D. For ZDT1, MOEA/D and EMIA have almost the same performance, and the performances of these two algorithms are slightly better than the other two algorithms. In summary, except ZDT3, our EMIA is superior to NSGAII and NNIA on convergence or robustness. Although the robustness of MOEA/D is very well, competitive results can be produced by our EMIA.

To verify the efficiency of EMIA with RA model and DSCD-based archive truncation method, the WBD problem is taken into consideration. For the constraint multi-objective optimization problem, threre are also thirty independent runs and 50,000 evaluations for NSGA-II, NNIA and EMIA. Hypervolume metric and Minimal Spacing metric are selected here to evlauate their performances. Box plots of statistacal values for hypervolume and minimal spacing are shown in Fig. 7
                           . At the mean time, we choose three typical final approximate point sets for each algorithm and show them in Fig. 8
                           .


                           Fig. 7 shows that for the WBD problem, EMIA gets the best results on both hypervolume metric and minimal spacing metric. From Fig. 8, the diversity of EMIA is better than the other two algorithms. Even the distribution of bending part of Pareto front is fine. Overall considering all the results above, RA model and DSCD-based archive truncation method are effective.

The scalability of the EMIA will be discussed as follows. DTLZ problems can be scalable to any number of objectives. Because DTLZ1 can be used to investigate an MOEA’s ability to scale up its performance in a large number of objectives, and DTLZ3 can be used to investigate an MOEA’s ability to converge to the true Pareto-optimal front (Deb, Thiele et al., 2002), so DTLZ1 and DTLZ3 with three to nine objectives can be used to investigate the performance of the EMIA in a large number of objectives. The convergence metric and the spacing metric are employed in our experiments. In order to abate the influence of the small population size and the small number of generations, here we set the maximum size of dominant population n
                           
                              D
                            is 200, the maximum size of active population n
                           
                              A
                            is 50, the size of clone population n
                           
                              C
                            is 200, and the maximum number of generations is 1000. Other parameters are the same as the above. The mean values of the convergence metric and spacing metric for DTLZ1 and DTLZ3 with 2, 3, 5, 7 and 9 objectives over 30 independent runs from 1 to 1000 generations are shown in Figs. 9 and 10
                           
                            respectively.

For DTLZ1, when the number of objectives is 3 and 5, the approximate minimum values of the convergence metric and spacing metric are obtained by the EMIA in about 100 generations. When the number of objectives is 7, the approximate minimum values of the convergence metric and spacing metric are obtained by the EMIA in about 300 generations. When the number of objectives is 9, the approximate minimum values of the convergence metric and spacing metric are obtained by the EMIA in about 400 generations. For DTLZ3, when the number of objectives is 3 and 5, the approximate minimum values of the convergence metric and spacing metric are obtained by the EMIA in about 200 generations. When the number of objectives is 7, the approximate minimum values of the convergence metric and spacing metric are obtained by the EMIA in about 300 generations. When the number of objectives is 9, acceptable values of the convergence metric and spacing metric cannot be obtained by EMIA because the DTILZ3 is more difficulties to an MOEA in converging to Pareto-optimal front and in finding a diverse set of solutions (Khare et al., 2003). In general, our proposed approaches can play their roles when the number of objectives is less than nine.

In our paper, the Resource Allocation model is proposed to accelerate convergence speed for MOEAs, and the Double-Sphere crowding distance measure is introduced to improve the diversity of nondominated solutions. By applying the Double-Sphere crowding distance measure in NNIA, the diversity of some problems can be greatly improved. Then we use Resource Allocation model and Double-Sphere crowding distance in NNIA simultaneously, experimental results on convergence speed for some problems show that Resource Allocation model can increase the convergence speed. Finally, comparison results on twelve benchmark problems and the real-world WBD problem in the Hypervolume metric show the efficiency of the two suggested strategies.

The mechanism of Resource Allocation model is that the individuals in each group cooperate with each other to get maximum benefits for their group, and then individuals in the same group compete for private interests. We apply the Resource Allocation model in cloning operator of NNIA. The model makes it possible to accelerate the convergence speed. However, the adaptive parameters in our proposed Resource Allocation model are designed with the simple strategies. Our future study is to make the adaptive parameters more reasonable and to expand the model in other MOEAs.

The Double-Sphere crowding distance measure is proposed to well reflect the bending degree of Pareto fronts and spatial information. It is demonstrated to provide better distribution for bi-objective cases and triple-objective cases. We will concentrate on improving the Double-Sphere crowding distance to make it works better for many-objective optimization in future research.

@&#ACKNOWLEDGMENT@&#

The authors thank the anonymous reviewers for their valuable comments and helpful suggestions which greatly improved the paper’s quality.

@&#REFERENCES@&#

