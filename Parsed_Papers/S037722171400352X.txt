@&#MAIN-TITLE@&#Branch-and-cut algorithms for the split delivery vehicle routing problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We present two formulations that provide a lower bound for the split delivery vehicle routing problem.


                        
                        
                           
                           We design branch-and-cut algorithms based on these formulations.


                        
                        
                           
                           We performed computational tests on a large set of benchmark instances.


                        
                        
                           
                           We improve most of the best known results in the literature.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Split Delivery Vehicle Routing Problem

Branch-and-cut

@&#ABSTRACT@&#


               
               
                  In this paper we present two exact branch-and-cut algorithms for the Split Delivery Vehicle Routing Problem (SDVRP) based on two relaxed formulations that provide lower bounds to the optimum. Procedures to obtain feasible solutions to the SDVRP from a feasible solution to the relaxed formulations are presented. Computational results are presented for 4 classes of benchmark instances. The new approach is able to prove the optimality of 17 new instances. In particular, the branch-and-cut algorithm based on the first relaxed formulation is able to solve most of the instances with up to 50 customers and two instances with 75 and 100 customers.
               
            

@&#INTRODUCTION@&#

In the Split Delivery Vehicle Routing Problem (SDVRP) a limited fleet of identical capacitated vehicles have to serve a set of customers. Vehicles are based at a depot. The costs to travel between a pair of customers and between the depot and a customer are given and satisfy the triangle inequality. The goal is to minimize the total traveling cost of the vehicles. The demand of a customer may be greater than vehicle capacity. A customer may be visited by multiple vehicles and his demand split among different vehicles, if beneficial, even in the case the demand is not greater than vehicle capacity. The SDVRP has been introduced by Dror and Trudeau (1989, 1990) and has received much attention, especially in the last decade. The SDVRP allows a reduction of the cost of the routes traveled by the vehicles with respect to the case where a single visit to each customer is imposed, that is with respect to the VRP. In fact, the cost of the VRP can be even halved by allowing split deliveries (see Archetti, Savelsbergh, & Speranza, 2006b). A recent survey on the SDVRP and its variants has been provided by Archetti and Speranza (2012). In this paper we focus on exact approaches for the SDVRP.

The SDVRP is known as a very hard problem. Several heuristics have been proposed (see Archetti & Speranza (2012) and references therein). We cite here the papers by Archetti, Savelsbergh, and Speranza (2008), Boudia, Prins, and Reghioui (2007), Aleman, Zhang, and Hill (2008), Aleman and Hill (2010), Berbotto, García, and Nogales (2013) and Chen, Golden, and Wasil (2007) as they show the best results for the benchmark instances on which we will make computational tests. In this paper we focus on the design of a branch-and-cut algorithm that allows us to obtain an optimal solution or, in case this is not possible within a certain computing time limit, a lower and an upper bound on the optimum. A few papers have already attacked this problem. Exact algorithms are presented in Archetti, Bianchessi, and Speranza (2011), Belenguer, Martinez, and Mota (2000) and Moreno, Poggi de Aragão, and Uchoa (2010).

We have to note that different rules have been adopted in previous papers for the calculation of the solution cost. Some authors have rounded non-integer costs to the nearest integer value while no rounding is applied in other papers. As specified in Section 5, we will analyze both cases.

We propose here two branch-and-cut algorithms that are based on the solution of relaxed formulations for the SDVRP that guarantee a lower bound on the optimum. Every time a feasible solution to a relaxed formulation is found, a procedure checks if the solution is feasible to the SDVRP too. If this is not the case, then a cut is inserted to exclude from the search space of the relaxed problem the proved infeasible solution. Note that a similar approach was proposed in Belenguer et al. (2000). The first formulation used in this paper is in fact a variant of the one proposed in Belenguer et al. (2000). We use, however, a different methodology to check whether a feasible solution to the SDVRP exists with the same value of a feasible solution to the relaxed formulation. The second formulation is new and makes use of variables representing the load of the vehicles along the routes.

We tested 4 classes of benchmark instances, both with rounded and non-rounded costs, to have a fair comparison with all previous results. Our approach is able to prove the optimality of 17 new instances. In particular, the branch-and-cut algorithm based on the first relaxed formulation is able to solve most of the instances with up to 50 customers and two instances with 75 and 100 customers.

The paper is organized as follows. In Section 2 we describe the SDVRP. The relaxed formulations are presented in Section 3. In Section 4 we describe the branch-and-cut algorithms, whereas the computational results are presented in Section 5.

The SDVRP can be defined over a complete undirected graph 
                        
                           G
                           =
                           (
                           V
                           ,
                           E
                           )
                        
                      with vertex set 
                        
                           V
                           =
                           {
                           0
                           ,
                           …
                           ,
                           n
                           }
                        
                      and edge set 
                        
                           E
                           =
                           {
                           (
                           i
                           ,
                           j
                           )
                           :
                           i
                           <
                           j
                           ,
                           i
                           ,
                           j
                           ∈
                           V
                           }
                        
                     . The vertex set V contains vertex 0, representing the depot, and the set 
                        
                           N
                           =
                           {
                           1
                           ,
                           …
                           ,
                           n
                           }
                        
                     , representing the n customers. A cost 
                        
                           
                              
                                 c
                              
                              
                                 ij
                              
                           
                        
                      is associated with each edge 
                        
                           (
                           i
                           ,
                           j
                           )
                           ∈
                           E
                        
                      and represents the non-negative cost of traversing edge 
                        
                           (
                           i
                           ,
                           j
                           )
                        
                     . We assume that the values 
                        
                           
                              
                                 c
                              
                              
                                 ij
                              
                           
                        
                      satisfy the triangle inequality. A positive demand 
                        
                           
                              
                                 d
                              
                              
                                 i
                              
                           
                        
                      is associated with each customer 
                        
                           i
                           =
                           1
                           ,
                           …
                           ,
                           n
                        
                     . A limited fleet F of vehicles with capacity Q is available to serve the customers. The objective is to find a set of vehicle routes serving all the customers in such a way that the total traveling cost is minimized.

Various properties hold for the optimal solutions to the problem. These properties are based on the k-split cycle concept which is the following.
                        Definition 1
                        Consider a set 
                              
                                 C
                                 =
                                 {
                                 
                                    
                                       i
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       i
                                    
                                    
                                       2
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       i
                                    
                                    
                                       k
                                    
                                 
                                 }
                              
                            of customers and suppose that there exist k routes 
                              
                                 
                                    
                                       r
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       r
                                    
                                    
                                       k
                                    
                                 
                                 ,
                                 k
                                 ⩾
                                 2
                              
                           , such that 
                              
                                 
                                    
                                       r
                                    
                                    
                                       w
                                    
                                 
                              
                            contains customers 
                              
                                 
                                    
                                       i
                                    
                                    
                                       w
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       i
                                    
                                    
                                       w
                                       +
                                       1
                                    
                                 
                              
                           , 
                              
                                 w
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 k
                                 -
                                 1
                              
                           , and 
                              
                                 
                                    
                                       r
                                    
                                    
                                       k
                                    
                                 
                              
                            contains customers 
                              
                                 
                                    
                                       i
                                    
                                    
                                       1
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       i
                                    
                                    
                                       k
                                    
                                 
                              
                           . Such a configuration is called a k-split cycle.


                           If the costs satisfy the triangle inequality, then there always exists an optimal solution to the SDVRP which does not contain k-split cycles, 
                           
                              
                                 k
                                 ⩾
                                 2
                              
                           
                           . (Dror & Trudeau (1989, 1990))

Let 
                        
                           
                              
                                 n
                              
                              
                                 i
                              
                           
                        
                      be the number of visits to customer 
                        
                           i
                           ∈
                           N
                        
                     . The number of splits to i is defined as 
                        
                           
                              
                                 n
                              
                              
                                 i
                              
                           
                           -
                           1
                        
                     . The following properties are derived from Property 1.
                        Property 2
                        
                           If the costs satisfy the triangle inequality, then there exists an optimal solution such that each edge between two customers is traversed at most once (Desaulniers (2010)).


                           If the costs satisfy the triangle inequality, then there exists an optimal solution such that the total number of splits, i.e., 
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       ∈
                                       N
                                    
                                 
                                 (
                                 
                                    
                                       n
                                    
                                    
                                       i
                                    
                                 
                                 -
                                 1
                                 )
                              
                           
                           , is lower than the number of routes (Archetti et al. (2008)).

We present in this section two relaxed formulations for the SDVRP which provide valid lower bounds to the optimum. The first formulation is a variant of the relaxed formulation proposed in Belenguer et al. (2000) while the second formulation is new.

The first formulation is based on the use of two-index variables, each measuring the number of times an edge is traversed. We call this formulation two-index vehicle flow formulation.

We introduce the following notation and variables:
                           
                              •
                              
                                 
                                    
                                       
                                          
                                             k
                                          
                                          
                                             S
                                          
                                       
                                       =
                                       
                                          
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      i
                                                      ∈
                                                      S
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            d
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                   
                                                      Q
                                                   
                                                
                                             
                                          
                                       
                                    
                                 : minimum number of vehicles needed to serve all customers in set 
                                    
                                       S
                                       ⊆
                                       N
                                    
                                 ;


                                 
                                    
                                       E
                                       (
                                       N
                                       )
                                       =
                                       {
                                       (
                                       i
                                       ,
                                       j
                                       )
                                       ∈
                                       E
                                       |
                                       i
                                       ∈
                                       N
                                       ,
                                       j
                                       ∈
                                       N
                                       }
                                    
                                 : set of edges joining all pairs of customers;


                                 
                                    
                                       δ
                                       (
                                       S
                                       )
                                       =
                                       {
                                       (
                                       i
                                       ,
                                       j
                                       )
                                       |
                                       (
                                       i
                                       ∈
                                       S
                                       ,
                                       j
                                       
                                       ∉
                                       
                                       S
                                       )
                                    
                                  or 
                                    
                                       (
                                       i
                                       
                                       ∉
                                       
                                       S
                                       ,
                                       j
                                       ∈
                                       S
                                       )
                                       }
                                    
                                 : edges linking a vertex in set S with a vertex in 
                                    
                                       V
                                       ⧹
                                       S
                                    
                                 . For the sake of conciseness, in the following we will write 
                                    
                                       δ
                                       (
                                       i
                                       )
                                    
                                  when 
                                    
                                       S
                                       =
                                       {
                                       i
                                       }
                                    
                                 ;


                                 
                                    
                                       
                                          
                                             z
                                          
                                          
                                             i
                                          
                                       
                                    
                                 : integer variable indicating the number of visits to vertex 
                                    
                                       i
                                       ∈
                                       V
                                    
                                 ;


                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ij
                                          
                                       
                                    
                                 : edge flow variable measuring the number of times edge 
                                    
                                       (
                                       i
                                       ,
                                       j
                                       )
                                       ∈
                                       E
                                    
                                  is traversed.

The two-index vehicle flow formulation is:
                           
                              (1)
                              
                                 
                                    min
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          E
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                              
                           
                        
                        
                           
                              (2)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          δ
                                          (
                                          i
                                          )
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 =
                                 2
                                 
                                    
                                       z
                                    
                                    
                                       i
                                    
                                 
                                 
                                 ∀
                                 i
                                 ∈
                                 V
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          δ
                                          (
                                          S
                                          )
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ⩾
                                 2
                                 
                                    
                                       k
                                    
                                    
                                       S
                                    
                                 
                                 
                                 ∀
                                 S
                                 ⊂
                                 N
                                 ,
                                 |
                                 S
                                 |
                                 ⩾
                                 2
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          N
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       i
                                    
                                 
                                 ⩽
                                 n
                                 +
                                 |
                                 F
                                 |
                                 -
                                 1
                              
                           
                        
                        
                           
                              (5)
                              
                                 0
                                 ⩽
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ⩽
                                 2
                                 |
                                 F
                                 |
                                 
                                 and
                                 
                                 integer
                                 
                                 ∀
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 E
                                 ⧹
                                 E
                                 (
                                 N
                                 )
                              
                           
                        
                        
                           
                              (6)
                              
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 ∀
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 E
                                 (
                                 N
                                 )
                              
                           
                        
                        
                           
                              (7)
                              
                                 
                                    
                                       k
                                    
                                    
                                       N
                                    
                                 
                                 ⩽
                                 
                                    
                                       z
                                    
                                    
                                       0
                                    
                                 
                                 ⩽
                                 |
                                 F
                                 |
                                 
                                 and
                                 
                                 integer
                              
                           
                        
                        
                           
                              (8)
                              
                                 1
                                 ⩽
                                 
                                    
                                       z
                                    
                                    
                                       i
                                    
                                 
                                 ⩽
                                 |
                                 F
                                 |
                                 
                                 and
                                 
                                 integer
                                 
                                 ∀
                                 i
                                 ∈
                                 N
                                 .
                              
                           
                        
                     

The objective function (1) aims at minimizing the traveling cost. Constraints (2) are flow conservation constraints establishing that the number of edges incident to each vertex is equal to twice the number of visits to the vertex. Constraints (3) are capacity cuts that ensure that capacity constraints are satisfied and prevent the generation of subtours which are not connected to the depot. Constraint (4) limits the total number of visits to the customers and is derived from Property 3. Note that they are redundant and are introduced to enhance the formulation. Finally, (5)–(8) are variable definitions.

In Belenguer et al. (2000) the authors proposed a similar formulation where:
                           
                              •
                              the variables representing the number of visits to customers are not used;

flow conservation constraints impose that the number of edges incident to each customer must be at least two and even, while we impose this number to be equal to twice the number of visits;

constraints (4)–(6) are not imposed.

Thus, the introduction of constraints (4)–(6) allows to restrict the feasible region with respect to the formulation proposed in Belenguer et al. (2000). According to preliminary tests, this helps to improve the lower bound.

Note that a solution that is feasible to the two-index vehicle flow formulation may not be feasible to the SDVRP. This is shown by the example illustrated in Fig. 1
                        . The square represents the depot while circles represent the customers. The capacity of each vehicle is 15. The number in parentheses close to each customer represents the corresponding demand. Depicted edges are associated with variables 
                           
                              
                                 
                                    x
                                 
                                 
                                    ij
                                 
                              
                           
                         equal to 1, and have a cost equal to 1. The edges not shown are associated with variables 
                           
                              
                                 
                                    x
                                 
                                 
                                    ij
                                 
                              
                           
                         equal to 0, and have a cost equal to 2. The solution is optimal with respect to the two-index vehicle flow formulation, and no alternative optimal solution exists. Actually, two vehicles fully loaded are required to serve the 5 customers and, due to the given customers demand, one of the customers must receive split deliveries. Thus, the solution consists of two routes, for a total of 8 edges. Selecting any set of edges different from the one depicted in Fig. 1 will increase the cost of the solution. However, this solution cannot be converted into a feasible solution to the SDVRP that uses the same set of edges, and has thus the same value. This is explained by the following considerations. Given the edges depicted in Fig. 1, the set of all possible routes that can be defined includes A-C-B, A-C-D, A-C-E, B-C-D, D-C-E and B-C-E. Among these, we have to select two routes visiting all the customers. The possible pairs of routes are A-C-B and D-C-E, A-C-D and B-C-E, and A-C-E and B-C-D. Since the vehicle load exceeds the capacity in one route of each listed pair, no feasible solution can be defined for the SDVRP.

We present in this section a new relaxed formulation for the SDVRP which is based on a directed graph 
                           
                              G
                              =
                              (
                              V
                              ,
                              A
                              )
                           
                        . Thus, for each edge of the original graph we generate two arcs. The formulation is based on the use of commodity flow variables measuring the amount of goods passing through each arc 
                           
                              (
                              i
                              ,
                              j
                              )
                              ∈
                              A
                           
                        . We call this formulation single commodity flow formulation.

We introduce the following additional notation and variables:
                           
                              •
                              
                                 
                                    
                                       A
                                       (
                                       N
                                       )
                                       =
                                       {
                                       (
                                       i
                                       ,
                                       j
                                       )
                                       ∈
                                       A
                                       |
                                       i
                                       ∈
                                       N
                                       ,
                                       j
                                       ∈
                                       N
                                       }
                                    
                                 : set of arcs joining all pairs of customers;


                                 
                                    
                                       
                                          
                                             δ
                                          
                                          
                                             +
                                          
                                       
                                       (
                                       S
                                       )
                                       =
                                       {
                                       (
                                       i
                                       ,
                                       j
                                       )
                                       |
                                       i
                                       ∈
                                       S
                                       ,
                                       j
                                       
                                       ∉
                                       
                                       S
                                       }
                                    
                                 : arcs leaving from set S;


                                 
                                    
                                       
                                          
                                             y
                                          
                                          
                                             ij
                                          
                                       
                                    
                                 : commodity flow variable representing the load of the vehicles traversing arc 
                                    
                                       (
                                       i
                                       ,
                                       j
                                       )
                                       ∈
                                       A
                                    
                                 .

Variables 
                           
                              x
                           
                         and 
                           
                              z
                           
                         have the same meaning as in the previous formulation. The single commodity flow formulation is the following:
                           
                              (9)
                              
                                 
                                    min
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          A
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          |
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          A
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          |
                                          (
                                          j
                                          ,
                                          i
                                          )
                                          ∈
                                          A
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ji
                                    
                                 
                                 =
                                 
                                    
                                       z
                                    
                                    
                                       i
                                    
                                 
                                 
                                 ∀
                                 i
                                 ∈
                                 N
                              
                           
                        
                        
                           
                              (11)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          |
                                          (
                                          j
                                          ,
                                          i
                                          )
                                          ∈
                                          A
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       ji
                                    
                                 
                                 -
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          |
                                          (
                                          i
                                          ,
                                          j
                                          )
                                          ∈
                                          A
                                       
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       ij
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                                
                                                   
                                                   ∀
                                                   i
                                                   ∈
                                                   N
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            i
                                                            ∈
                                                            N
                                                         
                                                      
                                                   
                                                   -
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                                
                                                   
                                                   i
                                                   =
                                                   0
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (12)
                              
                                 
                                    
                                       y
                                    
                                    
                                       ij
                                    
                                 
                                 ⩽
                                 
                                    
                                       Qx
                                    
                                    
                                       ij
                                    
                                 
                                 
                                 ∀
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 A
                              
                           
                        
                        
                           
                              (13)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          N
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       i
                                    
                                 
                                 ⩽
                                 n
                                 +
                                 |
                                 F
                                 |
                                 -
                                 1
                              
                           
                        
                        
                           
                              (14)
                              
                                 0
                                 ⩽
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ⩽
                                 |
                                 F
                                 |
                                 
                                 and
                                 
                                 integer
                                 
                                 ∀
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 A
                                 ⧹
                                 A
                                 (
                                 N
                                 )
                              
                           
                        
                        
                           
                              (15)
                              
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 ∀
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 A
                                 (
                                 N
                                 )
                              
                           
                        
                        
                           
                              (16)
                              
                                 
                                    
                                       k
                                    
                                    
                                       N
                                    
                                 
                                 ⩽
                                 
                                    
                                       z
                                    
                                    
                                       0
                                    
                                 
                                 ⩽
                                 |
                                 F
                                 |
                                 
                                 and
                                 
                                 integer
                              
                           
                        
                        
                           
                              (17)
                              
                                 1
                                 ⩽
                                 
                                    
                                       z
                                    
                                    
                                       i
                                    
                                 
                                 ⩽
                                 |
                                 F
                                 |
                                 
                                 and
                                 
                                 integer
                                 
                                 ∀
                                 i
                                 ∈
                                 N
                              
                           
                        
                        
                           
                              (18)
                              
                                 
                                    
                                       y
                                    
                                    
                                       ij
                                    
                                 
                                 ⩾
                                 0
                                 
                                 ∀
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 A
                                 ,
                                 
                                 j
                                 
                                 ≠
                                 
                                 0
                              
                           
                        
                        
                           
                              (19)
                              
                                 
                                    
                                       y
                                    
                                    
                                       i
                                       0
                                    
                                 
                                 =
                                 0
                                 
                                 ∀
                                 i
                                 ∈
                                 N
                                 .
                              
                           
                        
                     

The objective function (9) aims at minimizing the traveling cost. Constraints (10) are flow conservation constraints establishing that the number of arcs entering and leaving each vertex is equal to the number of visits to the vertex. Constraints (11) are load balance constraints. Capacity constraints are established through (12). Constraints (11), together with (12), prevent the generation of subtours which are not connected to the depot. Constraint (13) limits the total number of visits to the customers and is derived from Property 3. Note that they are redundant and are introduced to enhance the formulation. Constraints (14)–(18) are variable definitions, while (19) imposes that the vehicles must be empty when returning to the depot.

As in the case of the two-index vehicle flow formulation, a solution that is feasible to the single commodity flow formulation may not be feasible to the SDVRP, as shown by the example illustrated in Fig. 2
                        . The arcs depicted in Fig. 2 are associated with variables 
                           
                              
                                 
                                    x
                                 
                                 
                                    ij
                                 
                              
                           
                         equal to 1, and have a cost equal to 1. The arcs not shown are associated with variables 
                           
                              
                                 
                                    x
                                 
                                 
                                    ij
                                 
                              
                           
                         equal to 0, and have a cost equal to 2. The vehicle capacity is equal to 15. The solution is optimal with respect to the single commodity flow formulation, and no alternative optimal solution exists. Actually, two vehicles fully loaded are required to serve the 5 customers and, due to the given customers demand, one of the customers must receive split deliveries. Thus, the solution consists of two routes, for a total of 8 arcs. Selecting any set of arcs different from the one depicted in Fig. 2 will increase the cost of the solution. However, the customer with demand 5 has an outgoing arc with a flow equal to 11 while both incoming arcs have a flow lower than 11. Clearly, there exists no feasible solution to the SDVRP for which the load of a vehicle increases after the visit to a customer. Changing the values of the y variables, while keeping the traversals of the arcs shown in the figure (and, thus, the value of the objective function), does not help in finding a feasible solution to the SDVRP.

In this section, we propose two branch-and-cut algorithms for the SDVRP based on the relaxed formulations described in Section 3.

When the algorithms find a fractional solution, the default branching rules defined by the MILP solver we used are applied.

When an integer solution is found, we check if it is feasible to the SDVRP and, if not, then we insert a cut to exclude from the search space the proved infeasible solution.

In the following sections we describe the main components of the algorithms:
                        
                           •
                           valid inequalities (Section 4.1);

a procedure to check whether a feasible solution of the relaxed formulation is also feasible to the SDVRP (Section 4.2).

The following classes of valid inequalities are used in order to strengthen the relaxed formulations.

Inequalities:
                              
                                 (20)
                                 
                                    
                                       
                                          x
                                       
                                       
                                          ij
                                       
                                    
                                    +
                                    
                                       
                                          x
                                       
                                       
                                          ji
                                       
                                    
                                    ⩽
                                    1
                                    
                                    ∀
                                    (
                                    i
                                    ,
                                    j
                                    )
                                    ∈
                                    A
                                    (
                                    N
                                    )
                                    ,
                                 
                              
                           are introduced in the single commodity flow formulation. Their role is equivalent in the two-index vehicle flow formulation to constraints (6). These inequalities are derived from Property 2 and were introduced in Desaulniers (2010) and Archetti et al. (2011), where they were proved to be effective.

Inequalities (3) and (11) are sufficient to prevent the generation of subtours and to ensure the connectivity of each route. However, the following connectivity constraints are introduced to enhance the formulations:
                              
                                 (21)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             (
                                             i
                                             ,
                                             j
                                             )
                                             ∈
                                             δ
                                             (
                                             S
                                             )
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          ij
                                       
                                    
                                    ⩾
                                    2
                                    
                                       
                                          z
                                       
                                       
                                          i
                                       
                                    
                                    
                                    ∀
                                    S
                                    ⊆
                                    N
                                    ,
                                    
                                    S
                                    ⩾
                                    2
                                    ,
                                    
                                    i
                                    ∈
                                    S
                                    ,
                                 
                              
                           
                           
                              
                                 (22)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             (
                                             i
                                             ,
                                             j
                                             )
                                             ∈
                                             
                                                
                                                   δ
                                                
                                                
                                                   +
                                                
                                             
                                             (
                                             S
                                             )
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          ij
                                       
                                    
                                    ⩾
                                    
                                       
                                          z
                                       
                                       
                                          i
                                       
                                    
                                    
                                    ∀
                                    S
                                    ⊆
                                    N
                                    ,
                                    
                                    S
                                    ⩾
                                    2
                                    ,
                                    
                                    i
                                    ∈
                                    S
                                    .
                                 
                              
                           Inequalities (21) are introduced in the two-index vehicle flow formulation, while (22) are applied to the single commodity flow formulation.

The following capacity constraints are inserted in the single commodity flow formulation:
                              
                                 (23)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             (
                                             i
                                             ,
                                             j
                                             )
                                             ∈
                                             
                                                
                                                   δ
                                                
                                                
                                                   +
                                                
                                             
                                             (
                                             S
                                             )
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          ij
                                       
                                    
                                    ⩾
                                    
                                       
                                          k
                                       
                                       
                                          S
                                       
                                    
                                    
                                    ∀
                                    S
                                    ⊆
                                    N
                                    .
                                 
                              
                           These cuts were inserted in the formulations proposed in Desaulniers (2010) and Archetti et al. (2011), where they were proved to be effective.

Pairing inequalities are all inserted at the root node of the branch-and-bound tree. Connectivity cuts and capacity cuts are inserted only when violated. To separate the capacity cuts, we implemented the extended and greedy shrinking heuristics presented in Ralphs, Kopman, Pulleyblank, and Trotter (2003). For the separation of the connectivity cuts we solved a maximum flow problem from each vertex to the depot by means of the software library devised by Boykov and Kolmogorov (2004). Only the violated connectivity cuts with 
                              
                                 i
                                 =
                                 
                                    
                                       argmax
                                    
                                    
                                       u
                                       ∈
                                       S
                                    
                                 
                                 {
                                 
                                    
                                       z
                                    
                                    
                                       u
                                    
                                 
                                 }
                              
                            are introduced. Note that the connectivity cuts are dominated by the capacity cuts. However, we retained them since a polynomial time exact algorithm is used to separate them, while for the separation of the capacity cuts we implemented heuristic algorithms.

The relaxed formulations are used to obtain lower bounds to the optimum of the SDVRP. If a feasible solution to a relaxed formulation is found, we have to check whether this solution is also feasible to the SDVRP. In Belenguer et al. (2000) it is shown that the problem of determining whether a feasible solution to the SDVRP exists with the same value of a feasible solution of the relaxed formulation they proposed is NP-hard.

In Section 4.2.1 we describe a procedure that, on the basis of the values of the 
                           
                              x
                           
                         variables in a solution 
                           
                              
                                 
                                    s
                                 
                                 
                                    ′
                                 
                              
                           
                         of the relaxed formulation, generates a feasible solution 
                           
                              
                                 
                                    s
                                 
                                 
                                    ″
                                 
                              
                           
                         to the SDVRP, if it exists. The procedure builds the set of all feasible routes to the SDVRP that use only the edges (or arcs) associated with the active 
                           
                              x
                           
                         variables in solution 
                           
                              
                                 
                                    s
                                 
                                 
                                    ′
                                 
                              
                           
                        . Then a route-based mathematical programming model identifies, among these routes, an optimal solution 
                           
                              
                                 
                                    s
                                 
                                 
                                    ″
                                 
                              
                           
                         to the SDVRP, if it exists. If 
                           
                              
                                 
                                    s
                                 
                                 
                                    ′
                                 
                              
                           
                         and 
                           
                              
                                 
                                    s
                                 
                                 
                                    ″
                                 
                              
                           
                         have the same cost, then 
                           
                              
                                 
                                    s
                                 
                                 
                                    ′
                                 
                              
                           
                         is considered feasible to the SDVRP, otherwise a cut is inserted to exclude from the search space of the relaxed problem the proved infeasible solution 
                           
                              
                                 
                                    s
                                 
                                 
                                    ′
                                 
                              
                           
                        . This procedure is applied to both relaxed formulations.

In Section 4.2.2 we present a further procedure that, when the single commodity flow formulation is used, can be applied to possibly retrieve a feasible solution to the SDVRP starting from the solution of the relaxed formulation. This procedure works directly on the values of the 
                           
                              x
                           
                         and 
                           
                              y
                           
                         variables and constructs feasible routes compatible with such values, whenever such feasible routes exist. The procedure has a polynomial time complexity.

We now show how to identify an optimal solution to the SDVRP that uses only the edges (or arcs) identified by a relaxed formulation. We present the procedure applied to the two-index vehicle flow formulation. The procedure for the single commodity flow formulation is similar.

Let 
                              
                                 
                                    
                                       z
                                    
                                    
                                       ̃
                                    
                                 
                              
                            be the solution value of a feasible integer solution to the two-index vehicle flow formulation and 
                              
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ̃
                                          
                                       
                                    
                                    
                                       ij
                                    
                                 
                              
                            be the value of variable 
                              
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                              
                            in the solution. Let 
                              
                                 
                                    
                                       G
                                    
                                    
                                       ∼
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       V
                                    
                                    
                                       ∼
                                    
                                 
                                 ,
                                 
                                    
                                       E
                                    
                                    
                                       ∼
                                    
                                 
                                 )
                              
                            be the graph induced by the value of the 
                              
                                 x
                              
                            variables in the solution: 
                              
                                 
                                    
                                       V
                                    
                                    
                                       ∼
                                    
                                 
                                 =
                                 V
                                 ,
                                 
                                    
                                       E
                                    
                                    
                                       ∼
                                    
                                 
                                 =
                                 {
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 |
                                 i
                                 ,
                                 j
                                 ∈
                                 V
                                 ,
                                 i
                                 <
                                 j
                                 ,
                                 
                                    
                                       
                                          
                                             x
                                          
                                          
                                             ̃
                                          
                                       
                                    
                                    
                                       ij
                                    
                                 
                                 ⩾
                                 1
                                 }
                              
                           . Let 
                              
                                 
                                    
                                       R
                                    
                                    
                                       ∼
                                    
                                 
                              
                            be the set of all routes in 
                              
                                 
                                    
                                       G
                                    
                                    
                                       ∼
                                    
                                 
                              
                            which traverse each edge 
                              
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 
                                    
                                       E
                                    
                                    
                                       ∼
                                    
                                 
                                 (
                                 N
                                 )
                              
                            at most once, as imposed by constraints (6). The routes are generated by exploring the graph 
                              
                                 
                                    
                                       G
                                    
                                    
                                       ∼
                                    
                                 
                              
                            in a depth-first way. We solve a route-based formulation for the SDVRP on set 
                              
                                 
                                    
                                       R
                                    
                                    
                                       ∼
                                    
                                 
                              
                            (see Archetti et al. (2008)) which is the following:
                              
                                 (24)
                                 
                                    
                                       min
                                    
                                    
                                       
                                          z
                                       
                                       
                                          
                                             
                                                R
                                             
                                             
                                                ∼
                                             
                                          
                                       
                                    
                                    =
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             r
                                             ∈
                                             
                                                
                                                   R
                                                
                                                
                                                   ∼
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          c
                                       
                                       
                                          r
                                       
                                    
                                    
                                       
                                          λ
                                       
                                       
                                          r
                                       
                                    
                                 
                              
                           
                           
                              
                                 (25)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             ∈
                                             N
                                          
                                       
                                    
                                    
                                       
                                          q
                                       
                                       
                                          ir
                                       
                                    
                                    ⩽
                                    Q
                                    
                                       
                                          λ
                                       
                                       
                                          r
                                       
                                    
                                    
                                    ∀
                                    r
                                    ∈
                                    
                                       
                                          R
                                       
                                       
                                          ∼
                                       
                                    
                                 
                              
                           
                           
                              
                                 (26)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             r
                                             ∈
                                             
                                                
                                                   R
                                                
                                                
                                                   ∼
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          a
                                       
                                       
                                          ir
                                       
                                    
                                    
                                       
                                          q
                                       
                                       
                                          ir
                                       
                                    
                                    =
                                    
                                       
                                          d
                                       
                                       
                                          i
                                       
                                    
                                    
                                    ∀
                                    i
                                    ∈
                                    N
                                 
                              
                           
                           
                              
                                 (27)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             r
                                             ∈
                                             
                                                
                                                   R
                                                
                                                
                                                   ∼
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          b
                                       
                                       
                                          ijr
                                       
                                    
                                    
                                       
                                          λ
                                       
                                       
                                          r
                                       
                                    
                                    ⩽
                                    1
                                    
                                    ∀
                                    (
                                    i
                                    ,
                                    j
                                    )
                                    ∈
                                    
                                       
                                          E
                                       
                                       
                                          ∼
                                       
                                    
                                    (
                                    N
                                    )
                                 
                              
                           
                           
                              
                                 (28)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             r
                                             ∈
                                             
                                                
                                                   R
                                                
                                                
                                                   ∼
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             i
                                             ∈
                                             N
                                          
                                       
                                    
                                    
                                       
                                          a
                                       
                                       
                                          ir
                                       
                                    
                                    
                                       
                                          λ
                                       
                                       
                                          r
                                       
                                    
                                    ⩽
                                    n
                                    +
                                    |
                                    F
                                    |
                                    -
                                    1
                                 
                              
                           
                           
                              
                                 (29)
                                 
                                    
                                       
                                          k
                                       
                                       
                                          N
                                       
                                    
                                    ⩽
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             r
                                             ∈
                                             
                                                
                                                   R
                                                
                                                
                                                   ∼
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          λ
                                       
                                       
                                          r
                                       
                                    
                                    ⩽
                                    |
                                    F
                                    |
                                 
                              
                           
                           
                              
                                 (30)
                                 
                                    
                                       
                                          λ
                                       
                                       
                                          r
                                       
                                    
                                    ∈
                                    {
                                    0
                                    ,
                                    1
                                    }
                                    
                                    ∀
                                    r
                                    ∈
                                    
                                       
                                          R
                                       
                                       
                                          ∼
                                       
                                    
                                 
                              
                           
                           
                              
                                 (31)
                                 
                                    
                                       
                                          q
                                       
                                       
                                          ir
                                       
                                    
                                    ⩾
                                    0
                                    
                                    ∀
                                    i
                                    ∈
                                    N
                                    ,
                                    ∀
                                    r
                                    ∈
                                    
                                       
                                          R
                                       
                                       
                                          ∼
                                       
                                    
                                    ,
                                 
                              
                           where, for a given route 
                              
                                 r
                                 ∈
                                 
                                    
                                       R
                                    
                                    
                                       ∼
                                    
                                 
                                 ,
                                 
                                    
                                       c
                                    
                                    
                                       r
                                    
                                 
                              
                            is the cost of route, binary coefficients 
                              
                                 
                                    
                                       a
                                    
                                    
                                       ir
                                    
                                 
                              
                            and 
                              
                                 
                                    
                                       b
                                    
                                    
                                       ijr
                                    
                                 
                              
                            are equal to 1 if customer 
                              
                                 i
                                 ∈
                                 N
                              
                            is visited and edge 
                              
                                 (
                                 i
                                 ,
                                 j
                                 )
                              
                            is traversed along the route, respectively. Finally, binary variable 
                              
                                 
                                    
                                       λ
                                    
                                    
                                       r
                                    
                                 
                              
                            is equal to 1 if the corresponding route is assigned to a vehicle, and variable 
                              
                                 
                                    
                                       q
                                    
                                    
                                       ir
                                    
                                 
                              
                            represent the quantity delivered to customer 
                              
                                 i
                                 ∈
                                 N
                              
                            by route 
                              
                                 r
                                 ∈
                                 
                                    
                                       R
                                    
                                    
                                       ∼
                                    
                                 
                              
                           .

The objective function (24) minimizes the traveling cost. Constraints (25) are vehicle capacity constraints while (26) are demand constraints. Constraints (27) are derived from Property 2 while (28) are derived from Property 3. Note that, (27) and (28) are redundant and are inserted in order to strengthen the formulation. Constraint (29) defines an upper and a lower bound on the number of routes. Finally, (30) and (31) are variables definition.

If we find a feasible integer solution to (24)–(31) and 
                              
                                 
                                    
                                       z
                                    
                                    
                                       ̃
                                    
                                 
                                 =
                                 
                                    
                                       z
                                    
                                    
                                       
                                          
                                             R
                                          
                                          
                                             ∼
                                          
                                       
                                    
                                 
                              
                           , then the solution to the two-index vehicle flow formulation is also feasible to the SDVRP. The upper bound to the optimal solution to the SDVRP is updated and the branch-and-bound node is fathomed. If problem (24)–(31) is infeasible or 
                              
                                 
                                    
                                       z
                                    
                                    
                                       ̃
                                    
                                 
                                 <
                                 
                                    
                                       z
                                    
                                    
                                       
                                          
                                             R
                                          
                                          
                                             ∼
                                          
                                       
                                    
                                 
                              
                           , then the solution to the two-index vehicle flow formulation cannot be converted into a feasible SDVRP solution, thus we insert the cut
                              
                                 (32)
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             (
                                             i
                                             ,
                                             j
                                             )
                                             ∈
                                             E
                                             ⧹
                                             
                                                
                                                   E
                                                
                                                
                                                   ∼
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          x
                                       
                                       
                                          ij
                                       
                                    
                                    ⩾
                                    1
                                 
                              
                           into the relaxed model, so as to exclude from the search space the proved infeasible solution. Constraint (32) imposes to choose at least one edge which was not chosen in the solution to the two-index vehicle flow formulation just found. The cut is globally valid.

Every time an optimal solution to (24)–(31) is found, then the upper bound to the optimal solution to the SDVRP is eventually updated.

We present here a polynomial time procedure, called Match Arcs, which constructs a feasible solution to the SDVRP from a solution of the single commodity flow formulation, if it exists.

Match Arcs processes sequentially each vertex 
                              
                                 i
                                 ∈
                                 N
                              
                            by matching each incoming arc 
                              
                                 (
                                 j
                                 ,
                                 i
                                 )
                              
                            with an outgoing arc 
                              
                                 (
                                 i
                                 ,
                                 t
                                 )
                              
                            such that 
                              
                                 
                                    
                                       y
                                    
                                    
                                       ji
                                    
                                 
                                 ⩾
                                 
                                    
                                       y
                                    
                                    
                                       it
                                    
                                 
                              
                           . If Match Arcs fails to find a feasible matching for a vertex, then it stops as this means that the solution is not a feasible SDVRP solution. While matching incoming arcs with outgoing arcs, a special care must be taken when there is an incoming arc from the depot with a corresponding 
                              
                                 
                                    
                                       x
                                    
                                    
                                       0
                                       i
                                    
                                 
                              
                            value greater than 1. In fact, in this case the value of variable 
                              
                                 
                                    
                                       y
                                    
                                    
                                       0
                                       i
                                    
                                 
                              
                            represents the total flow over all traversals of arc 
                              
                                 (
                                 0
                                 ,
                                 i
                                 )
                              
                            and must be partitioned on the different traversals.

Let 
                              
                                 
                                    
                                       A
                                    
                                    
                                       -
                                    
                                 
                                 (
                                 i
                                 )
                              
                            be the set of incoming arcs in vertex 
                              
                                 i
                                 ∈
                                 N
                              
                            in the solution of the single commodity flow formulation, i.e., the set of arcs for which 
                              
                                 
                                    
                                       x
                                    
                                    
                                       ji
                                    
                                 
                                 ⩾
                                 1
                              
                           . Similarly, let 
                              
                                 
                                    
                                       A
                                    
                                    
                                       +
                                    
                                 
                                 (
                                 i
                                 )
                              
                            be the set of outgoing arcs from vertex 
                              
                                 i
                                 ∈
                                 N
                              
                           . If 
                              
                                 
                                    
                                       x
                                    
                                    
                                       i
                                       0
                                    
                                 
                              
                            is greater than 1, we make a number of copies of arc 
                              
                                 (
                                 i
                                 ,
                                 0
                                 )
                              
                            equal to 
                              
                                 
                                    
                                       x
                                    
                                    
                                       i
                                       0
                                    
                                 
                              
                           . Note that the flow on each arc 
                              
                                 (
                                 i
                                 ,
                                 0
                                 )
                              
                            is equal to 0 thanks to constraints (19). We associate with each arc 
                              
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 
                                    
                                       A
                                    
                                    
                                       +
                                    
                                 
                                 (
                                 i
                                 )
                              
                            (
                              
                                 (
                                 j
                                 ,
                                 i
                                 )
                                 ∈
                                 
                                    
                                       A
                                    
                                    
                                       -
                                    
                                 
                                 (
                                 i
                                 )
                              
                           ) a value equal to the corresponding 
                              
                                 
                                    
                                       y
                                    
                                    
                                       ij
                                    
                                 
                              
                            (
                              
                                 
                                    
                                       y
                                    
                                    
                                       ji
                                    
                                 
                              
                           ) variable. For each outgoing arc 
                              
                                 (
                                 i
                                 ,
                                 j
                                 )
                                 ∈
                                 
                                    
                                       A
                                    
                                    
                                       +
                                    
                                 
                                 (
                                 i
                                 )
                              
                           , we define as 
                              
                                 
                                    
                                       I
                                    
                                    
                                       ij
                                    
                                 
                              
                            the incoming arc assigned to it and as 
                              
                                 
                                    
                                       y
                                    
                                    
                                       
                                          
                                             I
                                          
                                          
                                             ij
                                          
                                       
                                    
                                 
                              
                            its corresponding flow. We now provide a scheme of procedure Match Arcs (see Algorithm 1) followed by an explanation on how it works.
                              Algorithm 1
                              Match Arcs 
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                1:
                                                
                                                   for 
                                                   
                                                      
                                                         i
                                                         =
                                                         1
                                                         ,
                                                         …
                                                         ,
                                                         n
                                                      
                                                    
                                                   do
                                                
                                             
                                             
                                                2:
                                                
                                                   Sort the arcs in 
                                                      
                                                         
                                                            
                                                               A
                                                            
                                                            
                                                               +
                                                            
                                                         
                                                         (
                                                         i
                                                         )
                                                      
                                                    in non-increasing value of y variables
                                             
                                             
                                                3:
                                                
                                                   Sort the arcs in 
                                                      
                                                         
                                                            
                                                               A
                                                            
                                                            
                                                               -
                                                            
                                                         
                                                         (
                                                         i
                                                         )
                                                      
                                                    in non-decreasing value of y variables
                                             
                                             
                                                4:
                                                
                                                   
                                                   for each arc 
                                                      
                                                         (
                                                         i
                                                         ,
                                                         j
                                                         )
                                                         ∈
                                                         
                                                            
                                                               A
                                                            
                                                            
                                                               +
                                                            
                                                         
                                                         (
                                                         i
                                                         )
                                                      
                                                    
                                                   do
                                                
                                             
                                             
                                                5:
                                                
                                                   Assign arc 
                                                      
                                                         (
                                                         i
                                                         ,
                                                         j
                                                         )
                                                      
                                                    to the first arc 
                                                      
                                                         (
                                                         t
                                                         ,
                                                         i
                                                         )
                                                      
                                                    in 
                                                      
                                                         
                                                            
                                                               A
                                                            
                                                            
                                                               -
                                                            
                                                         
                                                         (
                                                         i
                                                         )
                                                      
                                                    such that 
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ti
                                                            
                                                         
                                                         ⩾
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ij
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                6:
                                                
                                                   If no such arc exists return failure
                                                
                                             
                                             
                                                7:
                                                
                                                   Set 
                                                      
                                                         
                                                            
                                                               I
                                                            
                                                            
                                                               ij
                                                            
                                                         
                                                         =
                                                         (
                                                         t
                                                         ,
                                                         i
                                                         )
                                                      
                                                   
                                                
                                             
                                             
                                                8:
                                                
                                                   
                                                   if (
                                                      
                                                         t
                                                         
                                                         ≠
                                                         
                                                         0
                                                      
                                                   ) then
                                                
                                             
                                             
                                                9:
                                                
                                                   
                                                   Set 
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               
                                                                  
                                                                     I
                                                                  
                                                                  
                                                                     ij
                                                                  
                                                               
                                                            
                                                         
                                                         =
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ti
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                10:
                                                
                                                   
                                                   Remove 
                                                      
                                                         (
                                                         t
                                                         ,
                                                         i
                                                         )
                                                      
                                                    from 
                                                      
                                                         
                                                            
                                                               A
                                                            
                                                            
                                                               -
                                                            
                                                         
                                                         (
                                                         i
                                                         )
                                                      
                                                   
                                                
                                             
                                             
                                                11:
                                                
                                                   
                                                   else
                                                
                                             
                                             
                                                12:
                                                
                                                   
                                                   
                                                   if 
                                                   
                                                      
                                                         (
                                                         
                                                            
                                                               x
                                                            
                                                            
                                                               0
                                                               i
                                                            
                                                         
                                                         >
                                                         1
                                                         )
                                                      
                                                    
                                                   then
                                                
                                             
                                             
                                                13:
                                                
                                                   
                                                   Set 
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               
                                                                  
                                                                     I
                                                                  
                                                                  
                                                                     ij
                                                                  
                                                               
                                                            
                                                         
                                                         =
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ij
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               0
                                                               i
                                                            
                                                         
                                                         =
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               0
                                                               i
                                                            
                                                         
                                                         -
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               ij
                                                            
                                                         
                                                         ,
                                                         
                                                            
                                                               x
                                                            
                                                            
                                                               0
                                                               i
                                                            
                                                         
                                                         =
                                                         
                                                            
                                                               x
                                                            
                                                            
                                                               0
                                                               i
                                                            
                                                         
                                                         -
                                                         1
                                                      
                                                   
                                                
                                             
                                             
                                                14:
                                                
                                                   
                                                   Insert arc 
                                                      
                                                         (
                                                         0
                                                         ,
                                                         i
                                                         )
                                                      
                                                    in the sorted set 
                                                      
                                                         
                                                            
                                                               A
                                                            
                                                            
                                                               -
                                                            
                                                         
                                                         (
                                                         i
                                                         )
                                                      
                                                    according to the new value of 
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               0
                                                               i
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                15:
                                                
                                                   
                                                   
                                                   else
                                                
                                             
                                             
                                                16:
                                                
                                                   
                                                   Set 
                                                      
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               
                                                                  
                                                                     I
                                                                  
                                                                  
                                                                     ij
                                                                  
                                                               
                                                            
                                                         
                                                         =
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               0
                                                               i
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                             
                                                17:
                                                
                                                   
                                                   Remove 
                                                      
                                                         (
                                                         0
                                                         ,
                                                         i
                                                         )
                                                      
                                                    from 
                                                      
                                                         
                                                            
                                                               A
                                                            
                                                            
                                                               -
                                                            
                                                         
                                                         (
                                                         i
                                                         )
                                                      
                                                   
                                                
                                             
                                             
                                                18:
                                                
                                                   
                                                   
                                                   end if
                                                
                                             
                                             
                                                19:
                                                
                                                   
                                                   end if
                                                
                                             
                                             
                                                20:
                                                
                                                   
                                                   end if
                                                
                                             
                                             
                                                21:
                                                
                                                   end if
                                                
                                             
                                          
                                       
                                    
                                 
                              

For each 
                              
                                 i
                                 ∈
                                 N
                              
                           , Match Arcs first sorts the arcs in 
                              
                                 
                                    
                                       A
                                    
                                    
                                       +
                                    
                                 
                                 (
                                 i
                                 )
                              
                            on the basis of a non-increasing value of the corresponding 
                              
                                 y
                              
                            variables. Arcs in 
                              
                                 
                                    
                                       A
                                    
                                    
                                       -
                                    
                                 
                                 (
                                 i
                                 )
                              
                            are instead sorted on the basis of a non-decreasing value of 
                              
                                 y
                              
                            variables. Arcs in 
                              
                                 
                                    
                                       A
                                    
                                    
                                       +
                                    
                                 
                                 (
                                 i
                                 )
                              
                            are then considered sequentially and they are assigned to the first arc in 
                              
                                 
                                    
                                       A
                                    
                                    
                                       -
                                    
                                 
                                 (
                                 i
                                 )
                              
                            which has not yet been assigned to a previous outgoing arc. Special care has to be taken when the assigned incoming arc is arc 
                              
                                 (
                                 0
                                 ,
                                 i
                                 )
                              
                           . In this case, if this is not the last traversal of arc 
                              
                                 (
                                 0
                                 ,
                                 i
                                 )
                              
                            (i.e., 
                              
                                 
                                    
                                       x
                                    
                                    
                                       0
                                       i
                                    
                                 
                                 >
                                 1
                              
                           ), then the load of the current traversal of arc 
                              
                                 (
                                 0
                                 ,
                                 i
                                 )
                              
                            is set equal to the load of the outgoing arc, the value of 
                              
                                 
                                    
                                       y
                                    
                                    
                                       0
                                       i
                                    
                                 
                              
                            is decreased by the corresponding amount and the value of 
                              
                                 
                                    
                                       x
                                    
                                    
                                       0
                                       i
                                    
                                 
                              
                            is decreased by one. Otherwise, the load of the current traversal of arc 
                              
                                 (
                                 0
                                 ,
                                 i
                                 )
                              
                            is set equal to the current value of variable 
                              
                                 
                                    
                                       y
                                    
                                    
                                       0
                                       i
                                    
                                 
                              
                           .
                              Theorem 1
                              
                                 Given a feasible solution to the single commodity flow formulation, Match Arcs provides a feasible solution to the SDVRP, if it exists, in 
                                 
                                    
                                       O
                                       (
                                       n
                                       |
                                       F
                                       
                                          
                                             |
                                          
                                          
                                             2
                                          
                                       
                                       )
                                    
                                  
                                 time.
                              

The procedure matches, for each vertex 
                                    
                                       i
                                       ∈
                                       N
                                    
                                 , each incoming arc in 
                                    
                                       
                                          
                                             A
                                          
                                          
                                             -
                                          
                                       
                                       (
                                       i
                                       )
                                    
                                  with an outgoing arc in 
                                    
                                       
                                          
                                             A
                                          
                                          
                                             +
                                          
                                       
                                       (
                                       i
                                       )
                                    
                                 . The difference between 
                                    
                                       
                                          
                                             y
                                          
                                          
                                             
                                                
                                                   I
                                                
                                                
                                                   ij
                                                
                                             
                                          
                                       
                                    
                                  and 
                                    
                                       
                                          
                                             y
                                          
                                          
                                             ij
                                          
                                       
                                    
                                  defines the quantity delivered to vertex i while traversing the outgoing arc 
                                    
                                       (
                                       i
                                       ,
                                       j
                                       )
                                    
                                  and the incoming arc 
                                    
                                       
                                          
                                             I
                                          
                                          
                                             ij
                                          
                                       
                                    
                                  assigned to it.

If Match Arcs never fails, a feasible SDVRP solution can be retrieved as follows. For each arc exiting from the depot a route is defined following the arc matching computed by the procedure. For each vertex visited along the route, the quantity 
                                    
                                       
                                          
                                             y
                                          
                                          
                                             
                                                
                                                   I
                                                
                                                
                                                   ij
                                                
                                             
                                          
                                       
                                       -
                                       
                                          
                                             y
                                          
                                          
                                             ij
                                          
                                       
                                    
                                  is delivered.

If Match Arcs fails, it means that there exists a vertex i with at least one outgoing arc which cannot be assigned to any incoming arc. Thus, the solution of the single commodity flow formulation is not a feasible solution to the SDVRP.

The time complexity is given by the fact that for each of the n customers we have to assign each outgoing arc, which are at most 
                                    
                                       |
                                       F
                                       |
                                    
                                 , with an incoming arc, which again are at most 
                                    
                                       |
                                       F
                                       |
                                    
                                 . □

Note that, when Match Arcs fails, there may exist another feasible solution to the single commodity flow formulation with the same value, which is a feasible solution to the SDVRP, as shown in Fig. 3
                            where the vehicle capacity is 15. This solution is eventually found by the route-based procedure described in Section 4.2.1 which is called whenever procedure Match Arcs fails.

The branch-and-cut algorithms were implemented in C++, using CPLEX 12.5 concert technology. CPLEX built-in cuts were used in all experiments. The codes were compiled in release mode with MS Visual C++ 2010 Express Edition - Windows SDK 7.1. The experiments were carried out on a 64-bit Windows machine, with Intel Xeon processor W3680, 3.33GHz, and 12GB of RAM. A single thread is used in all experiments. The algorithms were tested on four sets of benchmark instances. We set 
                        
                           |
                           F
                           |
                           =
                           
                              
                                 k
                              
                              
                                 N
                              
                           
                        
                      in all cases.

The first set of instances (Set 1) was proposed in Belenguer et al. (2000). This set consists of instances from the TSPLIB.


                     Belenguer et al. (2000) proposed then a further set of instances (Set 2). The coordinates correspond to those of the instances taken from TSPLIB eil51, eil76 and eil101. The vehicle capacity Q is set to 160. The customer demand is generated according to six scenarios (
                        
                           [
                           0.01
                           -
                           0.1
                           ]
                           ,
                           [
                           0.1
                           -
                           0.3
                           ]
                           ,
                           [
                           0.1
                           -
                           0.5
                           ]
                           ,
                           [
                           0.1
                           -
                           0.9
                           ]
                        
                     , 
                        
                           [
                           0.3
                           -
                           0.7
                           ]
                           ,
                           [
                           0.7
                           -
                           0.9
                           ]
                        
                     ). The demand of a customer in scenario 
                        
                           [
                           α
                           -
                           β
                           ]
                        
                      is randomly generated from a uniform distribution in the interval 
                        
                           [
                           α
                           Q
                           ,
                           β
                           Q
                           ]
                        
                     .

Set 3 includes instances introduced by Archetti, Hertz, and Speranza (2006a). The coordinates are taken from instances of the CVRP (Christofides, Mingozzi, & Toth (1979)). Customer demands are generated according to six scenarios as described for the Set 2 instances. The vehicle capacity Q varies between 140 and 200.

Set 4 is composed of 21 instances and is due to Chen et al. (2007). The size of the instances varies from 8 to 288 customers. The vehicle capacity is 100 units. The customer demand is either 60 units or 90 units. In all instances of this set the customers are located in concentric circles around the depot.

Sets of instances 1 and 2 have been addressed in the literature rounding or not the costs to the nearest integer, while instances of sets 3 and 4 have been solved only considering non-rounded costs. We addressed the instances of all the sets in both cases. In particular, in case of rounded costs we compute the distances among each pair of vertices, round them to the nearest integer, and apply the Floyd-Warshall algorithm (Floyd (1962)) in order to guarantee that the triangle inequality is satisfied.


                     Table 1
                      reports, for each set of instances, the papers presenting the best known results for some of the instances in the set.

Preliminary experiments were performed in order to evaluate the impact of the proposed cuts. We tested the effectiveness of the connectivity and capacity cuts, which require a separation procedure that can be time consuming. In particular, for the two-index vehicle flow formulation we tested the effectiveness of the connectivity cuts while capacity cuts were always retained. For the single commodity flow formulation we tested the effectiveness of both the connectivity and capacity cuts. The tests were made in order to check if it is worthwhile to insert them.

For each set we measured, over all the instances in the set, the average improvement of the lower bound at the root node of the branch-and-bound tree obtained by applying the cuts. For the two-index vehicle flow formulation we considered the following three configurations: (a) capacity cuts, (b) capacity cuts and, only when no capacity cut is found, connectivity cuts, and, finally, (c) capacity and connectivity cuts. For the single commodity flow formulation we considered the following five configurations: (a) none of the cuts (i.e. only CPLEX built-in cuts), (b) connectivity cuts, (c) capacity cuts, (d) capacity cuts and, only when no capacity cut is found, connectivity cuts, and, finally, (e) capacity and connectivity cuts. The average improvements for the two-index vehicle flow formulation are reported in Table 2 and 3
                        
                         for the rounded and non-rounded case, respectively. For the single commodity flow formulation results are reported in Table 4 and 5
                        
                        
                         for the rounded and non-rounded case, respectively. The best average values are highlighted in bold. For the two-index vehicle flow formulation the results obtained by applying only capacity cuts are equivalent to the ones where capacity and connectivity cuts are applied in a hierarchical way. In the rounded case the best results are those obtained by applying capacity and connectivity cuts without considering any hierarchical rule, whereas in the non-rounded case the best configurations are (a) and (b). In particular, configuration (a) requires less computing time. For the single commodity flow formulation the best results are those obtained by applying capacity and connectivity cuts without any hierarchical rule. Second best values are those obtained by using configurations (c) and (d). In particular, configuration (c) requires less computing time. In light of these results in the remaining of our computational analysis we considered configurations (a) and (c) for the two-index vehicle flow formulation and configurations (c) and (e) for the single commodity flow formulation. We allowed the separation of the cuts at each node of the branch-and-bound tree.

The results reported in the final tables were obtained with a maximum time limit of 2h. We considered instances with up to 100 customers. Preliminary tests showed that no significant result could be obtained for larger instances.


                        Tables 7 and 8
                        
                         report the results for the rounded and non-rounded case, respectively. The structure of the tables is similar. The first two columns report the name of the instance and the number of customers, respectively. Then, we report the best known lower and upper bound values. The apex symbols appearing next to a best known value give the references to the papers reporting it according to entries in Table 6. The following 4+4 columns report the results obtained by the branch-and-cut algorithm based on the single commodity flow formulation and making use of configurations (c) and (e), respectively. Column ‘
                           
                              
                                 
                                    z
                                 
                                 
                                    ̲
                                 
                              
                           
                        ’ gives the value of the final lower bound. The best upper bound found is given in column ‘
                           
                              
                                 
                                    z
                                 
                                 
                                    ‾
                                 
                              
                           
                        ’, followed by the percentage optimality gap (column ‘gap (%)’). In this column a star symbol appears next to the value of the optimality gap if it is the first time that optimality was proven for the corresponding instance, while a dash appears when the gap cannot be evaluated. The overall execution time is given in column ‘t (second)’. For each instance the best values are highlighted in bold. When a value in columns 5, 6, 9 or 10 improves the corresponding best known value it is underlined, even if it is not the best one. This last markup does not apply to the results reported in Table 7 for instances of Set 3 and 4, as no solution value is known for these instances in the case of rounded costs. The remaining 4+4 columns have the same meaning. They refer to the results obtained by the branch-and-cut algorithm based on the two-index vehicle flow formulation and making use of configurations (a) and (c), respectively.

From Table 7 we can see that the branch-and-cut algorithms are always able to solve to optimality all the instances with at most 50 customers of Set 1. The best performing branch-and-cut algorithm on Set 2 instances is the one based on the two-index vehicle flow formulation. Independently of the configuration used it is able to prove the optimality for four new instances, namely S51D1, S51D2, S76D1 and S101D1, and finds best upper bounds for 5 new instances. As shown by the results reported in Table 7 (cont), the branch-and-cut algorithm based on the two-index vehicle flow formulation is still the best in solving the instances of Set 3. Instances p01_110, p01_1030 and p02_110 are solved to optimality and, using configuration (c), the algorithm is able to compute 8 out of the 9 best upper bounds found. Instances with at most 50 customers of Set 4 are solved to optimality by all the branch-and-cut algorithms. Moreover, using configuration (a), the branch-and-cut algorithm based on the two-index vehicle flow formulation solves to optimality an additional 80-customer instance (SD10).

Looking at the results reported in Table 8 we can see how, also in the non-rounded case, the branch-and-cut algorithms solve to optimality all the instances with at most 50 customers of Set 1. This is also true for instances of Set 4. The best performing branch-and-cut algorithm on Set 2 instances is again the one based on the two-index vehicle flow formulation. The same holds for the Set 3 instances. These last instances turned out to be the most difficult ones. Concerning the results reported in Table 8 we have to mention that for instances SD6 and SD10 we have obtained slightly different optimal values from those reported in the literature so far. We guess this is due to rounding errors.

Results for the rounded and non-rounded case are summarized in Tables 9 and 10
                        
                        , respectively. It is possible to notice that the branch-and-cut algorithm based on the two-index vehicle flow formulation gives the best results. In particular, the algorithm is the best in terms of number of optimal solutions found. Making use of configuration (a), the algorithm finds the largest number of best lower and upper bounds, and improves the largest number of known lower and upper bounds.

To sum up, our opinion is that the branch-and-cut algorithm based on the two-index vehicle flow formulation and making use of configuration (a) has to be preferred. Focusing on the 81 instances addressed in the literature so far, the algorithm was able to find 29 optimal solutions (17 new), to compute the best upper bound values in 50% of the cases (41/81) and to improve them in about 30% of the cases (23/81). It solves to optimality two instances with 75 and 100 customers. Over the 37 tests concerning instances with at most 50 customers it was able to find 25 optimal solutions. In all but 3 cases the algorithm computed the best upper bound value or improved it, and, similarly, in more than 75% of the cases (28/37) the algorithm computed the best lower bound value or improved it.

Finally, in Table 11
                         we report the value of different performance indicators concerning the branch-and-cut algorithm based on the two-index vehicle flow formulation and using configuration (a) in the non-rounded case. These data are representative also of the other cases, i.e., rounded costs, configuration (c) and the single commodity flow formulation. As before, the first two columns report the name of the instance and the number of customers, respectively. Columns ‘
                           
                              
                                 
                                    
                                       
                                          z
                                       
                                       
                                          ̲
                                       
                                    
                                 
                                 
                                    root
                                 
                              
                           
                        ’ and ‘
                           
                              
                                 
                                    
                                       
                                          z
                                       
                                       
                                          ̲
                                       
                                    
                                 
                                 
                                    root
                                    &
                                    cuts
                                 
                              
                           
                        ’ represent the value of the lower bound before and after applying cuts, respectively, as a percentage of the best lower bound found (given in column ‘
                           
                              
                                 
                                    z
                                 
                                 
                                    ̲
                                 
                              
                           
                        ’). The overall execution time appears in column ‘t (second)’. The subsequent columns give the time percentage devoted to the cutting phase, the number of capacity cuts found at the root node of the branch-and-bound tree and the total number of capacity cuts found. We then report the average execution time (in seconds) of the procedure that checks if feasible solutions of the relaxed formulations are feasible SDVRP solutions and the number of times the procedure is executed.

At the root node, the cuts, together with the CPLEX built-in cuts, generate an average improvement of the lower bound of about 20, 42, 48 and 47% for instances of Set 1, 2, 3 and 4, respectively. Then we can see how the total number of capacity cuts separated with respect to the number of capacity cuts separated at the root node increases of about 3.5, 2.5, 2.8 and 1.7 times for instances of Set 1, 2, 3 and 4, respectively. Despite of this, the further average improvement of the lower bound for the instances in Set 1, 2, 3 and 4 is only of about 3.4, 1.8, 1.9 and 1.7%, respectively (improvement that is also partially due to the application of the branching rules). Nevertheless, the average amount of time spent in the cutting phase is reasonable (greater than 10% only for 1 instance among those not solved to optimality) and justifies the choice of allowing the separation of the cuts in each node of the tree and not only at the root node. Interestingly, the average time required to check the feasibility of solutions is limited, less than 1minute in all but 6 cases.

@&#CONCLUSIONS@&#

The SDVRP has received much attention in the last years as it allows a reduction of the cost of the optimal solution of the VRP, by allowing multiple visits to the customers.

The approach we proposed, based on relaxed formulations, allows a substantial improvement of the results published in previous papers, both in terms of size of the instances solved to optimality and in quality of the lower and upper bounds where the optimum cannot be found. The best algorithm is the branch-and-cut algorithm based on the two-index vehicle flow formulation and making use of configuration (a). Over the 81 instances addressed in the literature so far, the algorithm was able to find 29 optimal solutions (17 new), to compute the best upper bound values in 50% of the cases and to improve them in about 30% of the cases. It solves to optimality two instances with 75 and 100 customers.

Future research will be focused on strengthening the bound found by the relaxed formulations through the introduction of new valid inequalities, possibly inherited from the inequalities proposed in the literature for the VRP. Moreover, separation algorithms could be improved in order to find the strongest cuts that are violated by the current solution. Finally, a heuristic procedure which generates a feasible SDVRP solution starting from the (fractional) solution of the relaxed formulation could speed-up the convergence of the branch-and-cut algorithm.

@&#ACKNOWLEDGEMENTS@&#

The authors wish to thank two anonymous referees and José Manuel Belenguer for their help and suggestions that helped improve a previous version of the paper.

@&#REFERENCES@&#

