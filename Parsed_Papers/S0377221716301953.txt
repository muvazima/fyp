@&#MAIN-TITLE@&#The Vehicle Routing Problem with Occasional Drivers

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We present the Vehicle Routing Problem with Occasional Drivers.


                        
                        
                           
                           We present a mathematical formulation of the problem.


                        
                        
                           
                           We propose a multi-start heuristic algorithm.


                        
                        
                           
                           We perform a computational study on instances adapted from VRP benchmark instances.


                        
                        
                           
                           We highlight the benefits that could be achieved by employing occasional drivers.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Vehicle routing problem

Crowdshipping

Occasional drivers

@&#ABSTRACT@&#


               
               
                  We consider a setting in which a company not only has a fleet of capacitated vehicles and drivers available to make deliveries, but may also use the services of occasional drivers who are willing to make a single delivery using their own vehicle in return for a small compensation if the delivery location is not too far from their own destination. The company seeks to make all the deliveries at minimum total cost, i.e., the cost associated with its own vehicles and drivers plus the compensation paid to the occasional drivers. The option to use occasional drivers to make deliveries gives rise to a new and interesting variant of the classical capacitated vehicle routing problem. We design and implement a multi-start heuristic which produces solutions with small errors when compared with optimal solutions obtained by solving an integer programming formulation with a commercial solver. A comprehensive computational study provides valuable insight into the potential of using occasional drivers to reduce delivery costs, focusing primarily on the number and flexibility of occasional drivers and the compensation scheme employed.
               
            

@&#INTRODUCTION@&#

The importance and competitive value of last-mile and same-day delivery has prompted many companies to seek creative and innovative solutions. One such innovative solution, considered among others by Walmart (see Barr & Wohl, 2013) and Amazon (see Bensinger, 2015), is “crowdshipping”, i.e., getting ordinary people, rather than delivery companies (e.g. UPS or FedEx) or company employed drivers, to drop-off packages en-route to their destination.

A broader change is taking place in our society, often referred to as the “sharing economy”, in which physical assets become services. Technology makes sharing assets cheaper and easier than ever – and therefore possible on a large scale. This is especially useful for expensive items that are not fully used by those who own them, such as automobiles. The collaborative consumption allows owners to make money from underused assets. The concept of collaborative consumption in transportation has been explored in several different directions recently. A discussion on sharing transportation resources between people and freight can be found in (Trentini & Mahléné, 2010), where concepts and solutions to improve urban mobility are investigated. The findings indicate great potential for sharing of transportation resources across traditionally unconnected modes (e.g., using a tram for freight transportation). In a recent paper Li, Krushinsky, Reijers, and Van Woensel (2014) consider conceptual and mathematical models in which people and parcels are transported and served in an integrated way by a single taxi network. Several papers have analyzed problems arising in the general context of ridesharing, e.g., Agatz, Erera, Savelsbergh, and Wang (2011), Agatz, Erera, Savelsbergh, and Wang (2012), and Lee and Savelsbergh (2015), where the ridesharing refers to a mode of transportation in which individual travelers share a vehicle for a trip and split travel costs such as gas, toll, and parking fees with others that have similar itineraries and time schedules. The state of the art and future directions in ridesharing can be found in (Furuhata et al., 2013).

Walmart’s vision, i.e., to have in-store customers deliver goods ordered by on-line customers, gives rise to an interesting new variant of the vehicle routing problem, which we call the Vehicle Routing Problem with Occasional Drivers (VRPOD). For a recent overview of more traditional problems encountered in the class of vehicle routing problems see (Toth & Vigo, 2014). In the VRPOD, a company not only has a fleet of capacitated vehicles and drivers available to make deliveries, but the company may also use the services of “occasional drivers” (ODs) who and are willing to make a single delivery using their own vehicle in return for a small compensation if the delivery location is not too far from their own destination (i.e., in-store customers willing to deliver goods ordered by on-line customers). The company seeks to satisfy customer demand (i.e., make all deliveries) at minimum total costs, i.e., the costs associated with the delivery routes of its own vehicles and drivers plus the compensation paid to the occasional drivers.

The VRPOD admittedly does not capture all aspects of the practical problem, but it does allow us to gain quantitative insights in its potential benefits. Specifically, it allows us to study the impact of the number of occasional drivers, the flexibility of the occasional drivers, and the employed compensation scheme on the benefits, i.e., cost savings, for a company. The main limitations of this variant of the vehicle routing problem are that it assumes an occasional driver can only make a single delivery and that it is a static problem. In reality, occasional drivers may be willing (and able) to make multiple deliveries and the availability of occasional drivers will vary over time. However, we believe that, despite these limitations, the insights obtained are valuable and informative.

In order to solve the VRPOD and generate the insight that we seek, we design and implement a multi-start heuristic, which we show produces solutions with small errors when compared with optimal solutions obtained by solving an integer programming formulation with a commercial solver.

Our computational study shows that employing occasional drivers can have significant benefits, and that choosing an appropriate compensation scheme is challenging, in fact more challenging than we initially anticipated. Obviously, the compensation scheme influences the number of available occasional drivers and their willingness to deviate from their intended travel route, but it also impacts which delivery locations will be assigned to occasional drivers (as opposed to the company’s drivers), which, in turn, affects the cost savings.

The remainder of the paper is organized as follows. In Section 2, we formally define the VRPOD, introduce and discuss possible compensation schemes. In Section 3, we present an integer programming formulation, which is used to benchmark our heuristic solution approach. In Section 4, we describe the heuristic we developed for the solution of instances of the VRPOD. In Section 5, we report and analyze the results of an extensive computational study. Finally, in Section 6, we present some final remarks and discuss future research directions.

The basic variant of the VRPOD is defined as follows. Let 
                        
                           G
                           =
                           (
                           N
                           ,
                           A
                           )
                        
                      denote a complete directed graph with node set N and arc set A. The node set N is comprised of three sets of nodes: the location of the store or depot (node 0), the locations of the customers (set C), and the locations of the destinations of the occasional drivers (set K). For the sake of simplicity, we identify occasional drivers with their destinations. (We assume that an in-store customer announces his willingness to deliver goods ordered by an on-line customer after arriving at the store, and, thus, that the origin of all occasional drivers is the depot.) Each arc a ∈ A has a length da
                      and a cost ca
                     . Each customer i ∈ C has a given demand qi
                     . Regular drivers can make deliveries to customers using a vehicle of capacity Q. We assume that an unlimited number of regular drivers is available. This is consistent with practical applications where companies typically have a sufficient number of drivers to serve all customer requests. An occasional driver k ∈ K is willing to make a delivery at customer i when 
                        
                           
                              d
                              
                                 0
                                 i
                              
                           
                           +
                           
                              d
                              
                                 i
                                 k
                              
                           
                           ⩽
                           ζ
                           
                              d
                              
                                 0
                                 k
                              
                           
                        
                      with ζ ≥ 1, i.e., when the extra distance traveled to reach the occasional driver’s destination is less than or equal to 
                        
                           (
                           ζ
                           −
                           1
                           )
                        
                      times the direct distance from the depot to the occasional driver’s destination. An occasional driver can make at most one delivery to a customer. The demand of a customer has to be satisfied either on a route carried out by a regular driver (starting and ending at the depot) or on a trip carried out by an occasional driver, where a trip consists of two parts: traveling from the depot to the customer’s location and traveling from the customer’s location to the driver’s destination. An occasional driver receives ρc
                     0i
                      as compensation for making a delivery to customer i with 0 < ρ < 1. Regular driver routes need to satisfy a capacity constraint: the total demand of the customers served on a regular driver’s route cannot exceed Q. It is implicitly assumed that an occasional driver k can accommodate the demand qi
                      for all customers the occasional driver is willing to serve. The cost of a regular driver route r is the sum of the costs of the arcs in the route, i.e., ∑
                        a ∈ r
                     
                     ca
                     . The objective (from the company’s perspective) is to minimize the total costs, that is the sum of the costs incurred by the regular drivers and the cost incurred for compensating occasional drivers. Note that if there are no occasional drivers, the problem becomes the standard capacitated vehicle routing problem (CVRP). Note too that for a given value of ζ, it is easy to determine the set Ck
                      of customers that an occasional driver k is willing to visit.

In this basic variant of the VRPOD, the compensation paid to an occasional driver is independent of the destination of the occasional driver. This has practical advantages, since the company only needs to know the location of its customers, but may not be ideal from the perspective of an occasional driver, as it does not reflect the extra costs incurred by visiting the customer. An alternative is that occasional driver k receives 
                        
                           ρ
                           (
                           
                              c
                              
                                 0
                                 i
                              
                           
                           +
                           
                              c
                              
                                 i
                                 k
                              
                           
                           −
                           
                              c
                              
                                 0
                                 k
                              
                           
                           )
                        
                      with ρ ≥ 1 for making a delivery to customer i, i.e., the occasional driver is compensated for the extra mileage incurred. This, of course, is more difficult to implement in practice, because it requires knowledge of the occasional driver’s destination. Should it be the location of the occasional driver’s home? Should the occasional driver declare her/his destination at the time she/he declares her/his willingness to act as occasional driver? How can this be verified? Even though we are aware of the challenges associated with a compensation scheme that depends not only on the location of the customer, but also on the destination of the occasional driver, we believe it is interesting to see if such a compensation scheme offers any advantages (or disadvantages) in terms of cost savings for the company.

To validate the performance of the multi-start heuristic presented in the next section on small to medium size instances, we solve these instances to optimality using a commercial integer programming solver and the formulation presented below.

Let xij
                      be a binary variable indicating whether a regular vehicle traverses arc (i, j). Let yij
                      indicate the load a regular vehicle carries on the arc (i, j). Let zi
                      be a binary variable indicating whether a customer is visited by a regular vehicle. Let wik
                      be a binary variable indicating whether customer i is visited by occasional driver k. Finally, let βik
                      indicate whether occasional driver k can serve customer i. For the ease of presentation, we let pik
                      indicate the compensation paid to occasional driver k when delivering to customer i. Note that in the basic compensation scheme 
                        
                           
                              p
                              
                                 i
                                 k
                              
                           
                           =
                           
                              p
                              i
                           
                        
                      for all k ∈ K, i.e., the compensation for delivering to a customer does not depend on the destination of the occasional driver. The VRPOD can be formulated as follows

                        
                           (1)
                           
                              
                                 
                                    
                                       min
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                (
                                                i
                                                ,
                                                j
                                                )
                                                ∈
                                                A
                                             
                                          
                                          
                                             c
                                             
                                                i
                                                j
                                             
                                          
                                          
                                             x
                                             
                                                i
                                                j
                                             
                                          
                                          +
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                C
                                             
                                          
                                          
                                             ∑
                                             
                                                k
                                                ∈
                                                K
                                             
                                          
                                          
                                             p
                                             
                                                i
                                                k
                                             
                                          
                                          
                                             w
                                             
                                                i
                                                k
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                j
                                                |
                                                (
                                                i
                                                ,
                                                j
                                                )
                                                ∈
                                                A
                                             
                                          
                                          
                                             x
                                             
                                                i
                                                j
                                             
                                          
                                          =
                                          
                                             ∑
                                             
                                                j
                                                |
                                                (
                                                j
                                                ,
                                                i
                                                )
                                                ∈
                                                A
                                             
                                          
                                          
                                             x
                                             
                                                j
                                                i
                                             
                                          
                                          =
                                          
                                             z
                                             i
                                          
                                          
                                          ∀
                                          i
                                          ∈
                                          C
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (2)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                j
                                                |
                                                (
                                                0
                                                ,
                                                j
                                                )
                                                ∈
                                                A
                                             
                                          
                                          
                                             x
                                             
                                                0
                                                j
                                             
                                          
                                          −
                                          
                                             ∑
                                             
                                                j
                                                |
                                                (
                                                j
                                                ,
                                                0
                                                )
                                                ∈
                                                A
                                             
                                          
                                          
                                             x
                                             
                                                j
                                                0
                                             
                                          
                                          =
                                          0
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (3)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                j
                                                |
                                                (
                                                j
                                                ,
                                                i
                                                )
                                                ∈
                                                A
                                             
                                          
                                          
                                             y
                                             
                                                j
                                                i
                                             
                                          
                                          −
                                          
                                             ∑
                                             
                                                j
                                                |
                                                (
                                                i
                                                ,
                                                j
                                                )
                                                ∈
                                                A
                                             
                                          
                                          
                                             y
                                             
                                                i
                                                j
                                             
                                          
                                          =
                                          
                                             {
                                             
                                                
                                                   
                                                      
                                                         
                                                            q
                                                            i
                                                         
                                                         
                                                            z
                                                            i
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         ∀
                                                         i
                                                         ∈
                                                         C
                                                      
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                            
                                                               i
                                                               ∈
                                                               C
                                                            
                                                         
                                                         −
                                                         
                                                            q
                                                            i
                                                         
                                                         
                                                            z
                                                            i
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         i
                                                         =
                                                         0
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             y
                                             
                                                i
                                                j
                                             
                                          
                                          ≤
                                          Q
                                          
                                             x
                                             
                                                i
                                                j
                                             
                                          
                                          
                                          ∀
                                          
                                             (
                                             i
                                             ,
                                             j
                                             )
                                          
                                          ∈
                                          A
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (5)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             y
                                             
                                                i
                                                0
                                             
                                          
                                          =
                                          0
                                          
                                          ∀
                                          i
                                          ∈
                                          C
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (6)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             w
                                             
                                                i
                                                k
                                             
                                          
                                          ≤
                                          
                                             β
                                             
                                                i
                                                k
                                             
                                          
                                          
                                          ∀
                                          i
                                          ∈
                                          C
                                          
                                          ∀
                                          k
                                          ∈
                                          K
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (7)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                C
                                             
                                          
                                          
                                             w
                                             
                                                i
                                                k
                                             
                                          
                                          ≤
                                          1
                                          
                                          ∀
                                          k
                                          ∈
                                          K
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (8)
                           
                              
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                k
                                                ∈
                                                K
                                             
                                          
                                          
                                             w
                                             
                                                i
                                                k
                                             
                                          
                                          +
                                          
                                             z
                                             i
                                          
                                          =
                                          1
                                          
                                          ∀
                                          i
                                          ∈
                                          C
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             x
                                             
                                                i
                                                j
                                             
                                          
                                          ∈
                                          
                                             {
                                             0
                                             ,
                                             1
                                             }
                                          
                                          
                                          ∀
                                          
                                             (
                                             i
                                             ,
                                             j
                                             )
                                          
                                          ∈
                                          A
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             z
                                             i
                                          
                                          ∈
                                          
                                             {
                                             0
                                             ,
                                             1
                                             }
                                          
                                          
                                          i
                                          ∈
                                          C
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             w
                                             
                                                i
                                                k
                                             
                                          
                                          ∈
                                          
                                             {
                                             0
                                             ,
                                             1
                                             }
                                          
                                          
                                          i
                                          ∈
                                          C
                                          
                                          k
                                          ∈
                                          K
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             y
                                             
                                                i
                                                j
                                             
                                          
                                          ≥
                                          0
                                          
                                          ∀
                                          
                                             (
                                             i
                                             ,
                                             j
                                             )
                                          
                                          ∈
                                          A
                                          .
                                       
                                    
                                 
                              
                           
                        
                     
                  

The objective function aims at minimizing the total cost. Constraints (1) and (2) are flow conservation constraints. Constraints (3) ensure that demand is satisfied and that subtours are prevented. Constraints (4) ensure that vehicle capacity is respected. Constraints (5) establish that the vehicles must return empty to the depot. Constraints (6) ensure that a customer is assigned to an occasional driver willing to serve that customer. Constraints (7) ensure that an occasional driver serves at most one customer. Constraints (8) ensure that each customer is served exactly once.

We propose a multi-start heuristic for the solution of the VRPOD, which combines variable neighborhood search and tabu search. Integer programs are also solved to optimality to assign customers to occasional drivers, thus the solution approach may be seen as belonging to the class of matheuristics. A high-level overview of MATHOD, the name we have given to the approach, can be found in Algorithm 1.
                  

Next, we describe the procedures that comprise MATHOD in more detail.


                     ConstructInitialsolutions. MATHOD embeds a multi-start approach with five different initial solutions. Any initial solution is characterized by a set S ⊆ C of customers to be served by regular drivers. The routes for the regular drivers are constructed using a sequential greedy insertion algorithm, which inserts customers into the active route in non-decreasing order of their distance to the depot, starting a new route when the vehicle capacity constraint would be violated, and, after all customers in S have been inserted, improves each route using a 2-exchange neighborhood. The five different sets S are generated as follows:

                        
                           1.
                           Simply take 
                                 
                                    S
                                    =
                                    C
                                    ,
                                 
                               i.e., all customers are served by regular drivers.

Solve the following integer program to determine the set of customers to be served by occasional drivers, where, as before, wik
                               is a binary variable indicating whether customer i is visited by occasional driver k and βik
                               indicates whether occasional driver k can serve customer i:

                                 
                                    (9)
                                    
                                       
                                          
                                             
                                                max
                                             
                                             
                                                
                                                   
                                                      ∑
                                                      
                                                         k
                                                         ∈
                                                         K
                                                      
                                                   
                                                   
                                                      ∑
                                                      
                                                         i
                                                         ∈
                                                         C
                                                      
                                                   
                                                   
                                                      (
                                                      2
                                                      
                                                         c
                                                         
                                                            0
                                                            i
                                                         
                                                      
                                                      −
                                                      
                                                         p
                                                         
                                                            i
                                                            k
                                                         
                                                      
                                                      )
                                                   
                                                   
                                                      w
                                                      
                                                         i
                                                         k
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                             
                                                
                                                   
                                                      w
                                                      
                                                         i
                                                         k
                                                      
                                                   
                                                   ≤
                                                   
                                                      β
                                                      
                                                         i
                                                         k
                                                      
                                                   
                                                   
                                                   ∀
                                                   i
                                                   ∈
                                                   C
                                                   
                                                   ∀
                                                   k
                                                   ∈
                                                   K
                                                
                                             
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    (10)
                                    
                                       
                                          
                                             
                                             
                                                
                                                   
                                                      ∑
                                                      
                                                         i
                                                         ∈
                                                         C
                                                      
                                                   
                                                   
                                                      w
                                                      
                                                         i
                                                         k
                                                      
                                                   
                                                   ≤
                                                   1
                                                   
                                                   ∀
                                                   k
                                                   ∈
                                                   K
                                                
                                             
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    (11)
                                    
                                       
                                          
                                             
                                             
                                                
                                                   
                                                      ∑
                                                      
                                                         k
                                                         ∈
                                                         K
                                                      
                                                   
                                                   
                                                      w
                                                      
                                                         i
                                                         k
                                                      
                                                   
                                                   ≤
                                                   1
                                                   
                                                   ∀
                                                   c
                                                   ∈
                                                   C
                                                
                                             
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    (12)
                                    
                                       
                                          
                                             
                                             
                                                
                                                   
                                                      w
                                                      
                                                         i
                                                         k
                                                      
                                                   
                                                   ∈
                                                   
                                                      {
                                                      0
                                                      ,
                                                      1
                                                      }
                                                   
                                                   
                                                   i
                                                   ∈
                                                   C
                                                   
                                                   k
                                                   ∈
                                                   K
                                                   .
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

That is, we seek to serve as many far-away customers with occasional drivers. Let S′ be the set of customers served by an occasional driver, i.e., for which 
                                 
                                    
                                       ∑
                                       
                                          k
                                          ∈
                                          K
                                       
                                    
                                    
                                       w
                                       
                                          i
                                          k
                                       
                                    
                                    =
                                    1
                                 
                               in the optimal solution. Then 
                                 
                                    S
                                    =
                                    C
                                    ∖
                                    
                                       S
                                       ′
                                    
                                 
                              .

Solve the integer program

                                 
                                    
                                       
                                          max
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                C
                                             
                                          
                                          
                                             ∑
                                             
                                                k
                                                ∈
                                                K
                                             
                                          
                                          
                                             q
                                             i
                                          
                                          
                                             w
                                             
                                                i
                                                k
                                             
                                          
                                       
                                    
                                 
                              subject to constraints (9)–(12). That is, maximize the demand delivered by the occasional drivers. Again, if S′ is the set of customers served by an occasional driver in the optimal solution, then 
                                 
                                    S
                                    =
                                    C
                                    ∖
                                    
                                       S
                                       ′
                                    
                                 
                              .

Solve the integer program

                                 
                                    
                                       
                                          max
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                C
                                             
                                          
                                          
                                             ∑
                                             
                                                k
                                                ∈
                                                K
                                             
                                          
                                          
                                             w
                                             
                                                i
                                                k
                                             
                                          
                                       
                                    
                                 
                              subject to constraints (9)–(12). Let θ be the value of an optimal solution. Note that θ corresponds to the maximum number of occasional drivers that can be engaged to serve customers. Next, solve the following integer program:

                                 
                                    
                                       
                                          min
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                C
                                             
                                          
                                          
                                             ∑
                                             
                                                k
                                                ∈
                                                K
                                             
                                          
                                          
                                             p
                                             
                                                i
                                                k
                                             
                                          
                                          
                                             w
                                             
                                                i
                                                k
                                             
                                          
                                       
                                    
                                 
                              subject to constraints (9)–(12) and

                                 
                                    
                                       
                                          
                                             ∑
                                             
                                                k
                                                ∈
                                                K
                                             
                                          
                                          
                                             w
                                             
                                                i
                                                k
                                             
                                          
                                          =
                                          θ
                                          ,
                                       
                                    
                                 
                              i.e., find the minimum cost solution that uses the maximum possible number of occasional drivers. As before, if S′ is the set of customers served by an occasional driver in the optimal solution, then 
                                 
                                    S
                                    =
                                    C
                                    ∖
                                    
                                       S
                                       ′
                                    
                                 
                              .

Solve a relaxation of the integer program presented in Section 3 obtained by ignoring the integrality constraint on variables x. The set S contains those customers i for which 
                                 
                                    
                                       z
                                       i
                                    
                                    =
                                    1
                                 
                              .


                     InternalTabuSearch (s). For a given solution s, let C′ denote the set of customers served by occasional drivers and let ri
                     , for i ∈ C∖C′, denote the route of the regular driver serving customer i. For a customer i and a route r ≠ ri
                     , we denote by 
                        
                           r
                           +
                           i
                        
                      the route obtained by inserting i into r (using the cheapest insertion criterion to determine where to insert i). Similarly, given a route ri
                      of a regular driver and a customer i served on ri
                     , we denote 
                        
                           
                              r
                              i
                           
                           −
                           i
                        
                      the route obtained from ri
                      by deleting i and joining its predecessor with its successor. The tabu search performed on s uses four feasible moves:

                        
                           •
                           
                              1-move: A customer i ∈ C∖C′ is moved from its route ri
                               to a route r ≠ ri
                              , where r may be the empty route. Hence, ri
                               and r are replaced by 
                                 
                                    
                                       r
                                       i
                                    
                                    −
                                    i
                                 
                               and 
                                 
                                    r
                                    +
                                    i
                                    ,
                                 
                               respectively.


                              swap-move: Customers i, j ∈ C∖C′, with ri
                               ≠ rj
                              , are exchanged. Hence, ri
                               and rj
                               are replaced by 
                                 
                                    (
                                    
                                       r
                                       i
                                    
                                    −
                                    i
                                    )
                                    +
                                    j
                                 
                               and 
                                 
                                    (
                                    
                                       r
                                       j
                                    
                                    −
                                    j
                                    )
                                    +
                                    i
                                    ,
                                 
                               respectively.


                              in-move: A customer i ∈ C′ is inserted into a route r. Hence, r is replaced by 
                                 
                                    r
                                    +
                                    i
                                 
                              .


                              out-move: A customer i ∈ C∖C′ is assigned to an occasional driver (if possible, i.e., there exists an occasional driver k, which does not serve a customer in s and for which 
                                 
                                    
                                       β
                                       
                                          i
                                          k
                                       
                                    
                                    =
                                    1
                                 
                              ). Hence, ri
                               is replaced by 
                                 
                                    
                                       r
                                       i
                                    
                                    −
                                    i
                                 
                              .

All non-tabu moves are evaluated and the best one is chosen. Ties are broken arbitrarily.

A temporary tabu status forbids customers to be inserted in routes from which they have been recently removed. Also, when a customer i ∈ C′ (C∖C′) is moved to C∖C′ (C′), then it is temporarily tabu to move it back to C′ (C∖C′). Each time a new best solution is found, each route is improved with a local search procedure using a 2-exchange neighborhood. The tabu search terminates after nmax
                      iterations without improvement. At each iteration all moves are evaluated and the best non-tabu move is chosen. A tabu move is chosen only if it improves the best solution found so far.


                     Jump (k, s). For a given solution s, a customer i ∈ C′ is randomly selected and inserted in a route r (using the cheapest insertion criterion to determine where to insert i). If no route can accommodate customer i, then a new route is created. The procedure is repeated min{k, |C′|} times. Let C′′ be the set of customers which are still served by an occasional driver plus those customers served by a regular driver in a route which visits a single customer, but excluding those customers that have just been removed from C′. Furthermore, let K′ be the set of occasional drivers who are not used in the current solution. Then, we solve the following integer program:

                        
                           
                              
                                 
                                    
                                       max
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                k
                                                ∈
                                                
                                                   K
                                                   ′
                                                
                                             
                                          
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                
                                                   C
                                                   
                                                      ′
                                                      ′
                                                   
                                                
                                             
                                          
                                          
                                             γ
                                             i
                                          
                                          
                                             w
                                             
                                                i
                                                k
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             w
                                             
                                                i
                                                k
                                             
                                          
                                          ≤
                                          
                                             β
                                             
                                                i
                                                k
                                             
                                          
                                          
                                          ∀
                                          i
                                          ∈
                                          
                                             C
                                             
                                                ′
                                                ′
                                             
                                          
                                          
                                          ∀
                                          k
                                          ∈
                                          
                                             K
                                             ′
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                i
                                                ∈
                                                
                                                   C
                                                   
                                                      ′
                                                      ′
                                                   
                                                
                                             
                                          
                                          
                                             w
                                             
                                                i
                                                k
                                             
                                          
                                          ≤
                                          1
                                          
                                          ∀
                                          k
                                          ∈
                                          
                                             K
                                             ′
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             ∑
                                             
                                                k
                                                ∈
                                                
                                                   K
                                                   ′
                                                
                                             
                                          
                                          
                                             w
                                             
                                                i
                                                k
                                             
                                          
                                          ≤
                                          1
                                          
                                          ∀
                                          i
                                          ∈
                                          
                                             C
                                             
                                                ′
                                                ′
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                    
                                       
                                          
                                             w
                                             
                                                i
                                                k
                                             
                                          
                                          ∈
                                          
                                             {
                                             0
                                             ,
                                             1
                                             }
                                          
                                          
                                          i
                                          ∈
                                          
                                             C
                                             
                                                ′
                                                ′
                                             
                                          
                                          
                                          k
                                          ∈
                                          
                                             K
                                             ′
                                          
                                          ,
                                       
                                    
                                 
                              
                           
                        
                     where γi
                      is randomly drawn from a uniform distribution over [0, 10]. That is, we seek to generate a new assignment of customers to occasional drivers and thus a solution that considerably differs from the one obtained at the end of the previous internal tabu search phase.


                     TwoOpt (s). This procedure aims at improving each regular driver route using a 2-exchange neighborhood.

As mentioned in the introduction, the aim of our research is to gain initial quantitative insights in the potential benefits of crowdshipping for last-mile delivery. More specifically, we aim to understand the impact of the number of occasional drivers, the flexibility of the occasional drivers, and the employed compensation scheme on the potential benefits, i.e., cost savings. To be able to do so, we conducted a series of computational experiments using randomly generated instances, because the use of occasional drivers to make deliveries is still in its infancy and at a conceptual stage, and no real-life data exist.

In the remainder of this section, we discuss how we generated instances, how we evaluated the performance of the multi-start heuristic, and what we learned about the potential benefits of crowdshipping for last-mile delivery. All experiments were conducted on an Intel(R) Xeon(R) CPU E5-1650 v2 3.50 GHz and 16 GB of RAM. Cplex 12.6 was used as exact solver. The algorithms were coded in Visual C++.

Our starting point for generating instances are the well-known and widely available Solomon instances of the CVRP with time windows. Solomon’s 56 instances are generated from six basic instances by imposing time windows of different widths. Since we do not consider time windows, we consider only the six basic instances: two clustered instances (C101 and C201), two instances where customers are randomly distributed (R101 and R201), and two instances where customers are partially clustered and partially randomly distributed (RC101 and RC201). For a given CVRP instance, with customer locations (xi, yi
                        ), we generate destinations for the occasional drivers uniform randomly in the square with lower left hand corner (min 
                           i
                        
                        xi
                        , min 
                           i
                        
                        yi
                        ) and upper right hand corner (max 
                           i
                        
                        xi
                        , max 
                           i
                        
                        yi
                        ).

To assess the performance of the multi-start heuristic, we compare the solution it produces to an optimal solution found by solving the formulation presented in Section 3 (using CPLEX). The internal tabu search is terminated after 400 iterations without an improvement, i.e., 
                           
                              
                                 n
                                 
                                    m
                                    a
                                    x
                                 
                              
                              =
                              400
                           
                        . The heuristic is run once on each instance. The value of kmax
                         is set to |C|/3. In Table 1
                        , we report, for six basic instances and ten variations, the number and flexibility of the occasional drivers (|K| and ζ), the total cost, the fraction of the total cost representing compensation to occasional drivers, the number of regular driver routes, and the number of deliveries made by occasional drivers. The occasional drivers are compensated for the distance traveled to a customer’s location at a rate of 
                           
                              ρ
                              =
                              0.2
                           
                        . In all but one instance, the cost gap is less than 1 percent, and for instances with 25 occasional drivers, the average cost gap is only 0.05 percent. As expected, the number of occasional drivers used (and, thus, the fraction of the total cost representing compensation to occasional drivers) increases as the number of available occasional drivers increases. We note that CPLEX solves instances with up to 25 occasional drivers in a matter of seconds, but that CPLEX struggles when the number of occasional drivers increases, e.g., CPLEX is unable to solve instances with 50 occasional drivers within an hour. The heuristic solves all instances used in this computational study in a few seconds.

The potential benefits of employing occasional drivers to make deliveries depend on three factors:

                           
                              •
                              how many occasional drivers there are relative to the number of customers that need to be served, i.e., 
                                    
                                       
                                          |
                                          K
                                          |
                                       
                                       
                                          |
                                          C
                                          |
                                       
                                    
                                 ;

how much flexibility an occasional driver has, i.e., the value of ζ; and

how much an occasional driver is paid for making a delivery, i.e., the compensation scheme and the value of ρ.

To obtain quantitative insights into the impact of these three factors, we solve each instance in the test set with every possible combination of the following parameter values: 
                           
                              
                                 
                                    |
                                    K
                                    |
                                 
                                 
                                    |
                                    C
                                    |
                                 
                              
                              =
                              0.5
                           
                         and 1.0, 
                           
                              ζ
                              =
                              1.1
                              ,
                              1.2
                              ,
                              1.3
                              ,
                              1.4
                              ,
                           
                         and 1.5, and 
                           
                              ρ
                              =
                              0.05
                              ,
                              0.1
                              ,
                           
                         and 0.2 for the default compensation scheme (occasional driver-independent) and 
                           
                              ρ
                              =
                              1.2
                              ,
                              1.4
                              ,
                           
                         and 1.6 for the alternative compensation scheme (occasional driver-dependent). Thus, the test set consists of 180 instances.

We assess the potential benefits of employing occasional drivers by examining and comparing the total cost, the fraction of the total cost contributed by regular drivers, and the number of occasional drivers employed for the different solutions.

In our analysis and comparisons, we also include the solution obtained when no occasional drivers are available (which provides an upper bound on total cost) and the solution obtained when occasional drivers are free, i.e., do not have to be compensated, and have the largest flexibility 
                           
                              ζ
                              =
                              1.5
                           
                         (which provides a lower bound on total cost). The first solution is obtained by solving a classical CVRP. For this, we use the open-access injection-ejection algorithm from the COIN-OR library available at the following URL: http://www.coin-or.org/projects/VRPH.xml. The second solution is obtained using MATHOD.

We start by examining the results for one specific instance in more detail. The instance is instance C201 with 100 customers and 100 occasional drivers. The customer locations, the locations of the destinations of the occasional drivers, and the location of the depot can be seen in Fig. 1
                           . The square represents the depot, the dark circles the customers and the light circles the destinations of ODs.

An area of interest on the right side of the instance is indicated by an ellipse. The reason this area is of interest is that it is relatively far away from the depot and that there are more occasional drivers going to the area than there are customers. As such, the area represents an opportunity for cost-savings for the company. By exploiting occasional drivers for deliveries in that area, it may not be necessary for regular drivers to visit the area. This is quite different, for example, from the area at the top right where few, if any, occasional drivers go, but where there are a number of customers.

Before analyzing solutions involving occasional drivers, we show, in Fig. 2
                           , the VRP solution, i.e., the solution that only considers regular drivers for customer deliveries, which consists of three routes.

Next, we take a look at the solution obtained when occasional drivers are fairly flexible, i.e., 
                              
                                 ζ
                                 =
                                 1.5
                                 ,
                              
                            and the default compensation scheme (Compensation Scheme I) with parameter 
                              
                                 ρ
                                 =
                                 0.2
                              
                            is used, i.e., the scheme that compensates occasional drivers for the distance from the depot to the customer at the highest compensation rate we consider in the study. Recall that the intuition behind this compensation scheme is that we want occasional drivers to make deliveries to far-away customers and therefore we compensate them based on the distance from the depot to the customer. The results can be found in Fig. 3
                           , where we show the routes of the regular drivers, the customers served by occasional drivers (shown in dark circles not traversed by a route), and the destinations of occasional drivers that are not used (in light circles).

Unfortunately, even though the occasional drivers are fairly flexible, the compensation scheme does not have the desired effect. One of the regular drivers, for example, visits the area indicated by the ellipse contrary to what we want to achieve. The reason is that once a regular driver reaches an area, it is relatively cheap to visit one more customer. The extra mileage to visit another customer in the same area is small, which means that it is not worth paying an occasional driver to make the delivery instead (it would lead to a cost increase rather than result in a cost saving).

The alternative compensation scheme (Compensation Scheme II), which is based on the extra mileage for an occasional driver, might be more appropriate. The results (for the same occasional driver flexibility) for two compensation rates are shown in Fig. 4
                           .

We see that at the highest compensation rate, the same effect occurs. It is still cheaper to send a regular driver to the area indicated by the ellipse. However, at the lowest compensation rate, we do see the desired effect. All the customers in the area indicated by the ellipse are served by occasional drivers.

The three solutions shown in Figs. 3 and 4 clearly demonstrate the sensitivity of the solution to the compensation employed and the parameters used and highlights the challenge associated with defining an appropriate compensation scheme.

Finally, in Fig. 5
                           , we show the solution that results when the use of occasional drivers is free (but they still have limited flexibility given by 
                              
                                 ζ
                                 =
                                 1.5
                              
                           ), i.e., the penultimate situation for the company. Dark circles not traversed by a route indicate customers served by an OD whereas light circles indicate unused ODs.

As expected, the customers at the top right are still served by a regular driver, because there are simply no occasional drivers that are willing to go that far out of their way to make a delivery there.

Here, we provide summary results for all instances in our test set. Tables 2
                            and 3
                            give the results when Compensation Scheme I is employed. Table 2 shows the percentage reduction in total cost and regular drivers used with respect to the VRP solution where no occasional driver is available, whereas Table 3 shows the percentage of available occasional drivers used and the compensation paid to occasional drivers as a percentage of the total cost of the solution. Each table is organized as follows. The top part of the table presents results for instances with 50 ODs, while the bottom part of the table presents results for instances with 100 ODs. For each part, rows correspond to different values of ζ and columns correspond to different values of ρ. Note that the values reported for each (ζ, ρ) pair are averages over six instances. The last row and the last column present averages over all instances with the same value of ρ and ζ, respectively. Tables 4
                            and 5
                            give the same results for Compensation Scheme II.

We first comment on the results obtained when Compensation Scheme I is employed, i.e., the results in Tables 2 and 3. As expected, the cost reduction increases as the ODs become more flexible, i.e., when ζ increases, and the cost reduction decreases when ODs are compensated at a higher rate, i.e., when ρ increases. Also as expected, when the number of available ODs is larger, the reduction in total cost is greater, especially when their compensation rate is low (
                              
                                 ρ
                                 =
                                 0.05
                              
                           ). With 50 flexible ODs (
                              
                                 ζ
                                 =
                                 1.5
                              
                           ) compensated at a low rate, the cost reduction is 38.55 percent; with 100 flexible ODs compensated at a low rate, the cost reduction is 65.56 percent.

When ODs are cheap (
                              
                                 ρ
                                 =
                                 0.05
                              
                           ) and there are 50 ODs (
                              
                                 |
                                 K
                                 |
                                 =
                                 50
                              
                           ), almost all ODs are used. In fact, the percentage of available ODs used does not tell the complete story, because it is not always possible to use all available ODs. For example, if the flexibility of ODs is small (
                              
                                 ζ
                                 =
                                 1.1
                              
                           ), it may happen that two ODs can only make a delivery at the same customer. The average over the six instances with 50 ODs and 
                              
                                 ζ
                                 =
                                 1.1
                              
                            of the maximum percentage of available ODs that can be used is 88 percent. This average goes up to more than 97 percent for the six instances with 50 ODs and 
                              
                                 ζ
                                 =
                                 1.5
                              
                           . This phenomenon is even more pronounced when there are 100 ODs. The average over the six instances with 100 ODs and 
                              
                                 ζ
                                 =
                                 1.1
                              
                            of the maximum percentage of available ODs that can be used is just over 70 percent, but goes up to just over 94 percent for the six instances with 100 ODs and 
                              
                                 ζ
                                 =
                                 1.5
                              
                           . We also see that when ODs are cheap (
                              
                                 ρ
                                 =
                                 0.05
                              
                           ) the reduction in total cost can be substantial, especially if the number of available ODs is large (100) and they are flexible (
                              
                                 ζ
                                 =
                                 1.5
                              
                           ). When ODs are expensive (
                              
                                 ρ
                                 =
                                 0.2
                              
                           ), a large number of available and flexible ODs is necessary to be able to achieve a high total cost reduction, because fewer ODs will be used and they have to be chosen carefully.

We now comment the results obtained when Compensation Scheme II is employed, i.e., the results in Tables 4 and 5. Interestingly, the total cost reduction and the number of available ODs used do not vary much when the flexibility (ζ) or the rate of compensation (ρ) changes. The cost reduction is 24.70 percent with a low flexibility (
                              
                                 ζ
                                 =
                                 1.1
                              
                           ) and a high compensation rate (
                              
                                 ρ
                                 =
                                 1.6
                              
                           ) and is 28.69 percent with a high flexibility (
                              
                                 ζ
                                 =
                                 1.5
                              
                           ) and a low compensation rate (
                              
                                 ρ
                                 =
                                 1.2
                              
                           ). Also, we see that the number of available ODs used no longer increases when the flexibility of ODs (ζ) increases. In fact, because the maximum number of available ODs that can be used does increase with the flexibility, this means that effectively a smaller fraction of the available ODs is used when the flexibility increases. However, these ODs are chosen more carefully, which is one of the reasons that we see that the compensation paid to ODs, as a percentage of the total cost, increases when the flexibility of ODs increases, especially when there is a large number of available ODs. (Another factor that contributes to the increase is that the total cost itself decreases.).

When comparing the two compensation schemes, we see that the Compensation Scheme II has the advantage that it is much less sensitive to the flexibility of the ODs and the to the rate at which they are compensated.

In Tables 6
                            and 7
                           , the same results are reported in a different way, for Compensation Scheme I and II, respectively. We show the percentage reduction in the total cost and the number of regular drivers used with respect to the VRP solution, as well as the percentage of available ODs used and the compensation paid to the ODs as a percentage of total cost, when averaged over groups of instances. The groups are determined by the base instance, the number of available ODs, the flexibility of the ODs, and the rate of compensation of the ODs. The last row gives the average over all instances. Looking at the averages over all instances for the two compensation schemes, we see that, as expected, the main difference is in the compensation paid to ODs as a percentage of total cost.

The goal of our investigation has been to gain an initial understanding of the potential benefits and the implementation challenges associated with crowdshipping. The results of our computational study are both encouraging and dispiriting. We have found that substantial cost savings can be realized when there is a large number of people with a generous amount of flexibility available to make deliveries. That, of course, depends to a large extent on the compensation offered. Designing an appropriate and cost-effective compensation scheme is one of a major implementation challenges associated with crowdshipping. We have experimented with two natural compensation schemes and found that the performance of both of them was acceptable, but sensitive to the choice of parameters. Compensation schemes based on the “cost-to-serve” of a customer may be most appropriate. Of course determining the cost-to-serve of a customer is notoriously difficult in routing problems, and will be even more complicated than usual in this setting as it needs to account for the fact that some of the customers may be served by crowdshippers. Research into more sophisticated compensation schemes is both interesting and necessary. We have assumed that an occasional driver only declares his willingness to make a delivery after arriving at the store (depot). This is reasonable in the context of Walmart, but not in the context of Amazon, who does not operate stores, but only distribution centers. An interesting extension is to study a setting in which occasional drivers offer to make a delivery before leaving the origin of their trip. (This would also be beneficial in the Walmart setting.) Another avenue for further research, maybe even more important and more interesting, is the study of variants of the VRPOD, in which aspects of the highly dynamic nature of the setting are captured. In reality, occasional drivers become available over time and their services will only be available for a short period of time after they become available. Of course, orders from customers become available over time too, and, these orders imply new deliveries. Almost all the literature on dynamic vehicle routing focuses on orders to be picked up, orders to be picked up and delivered, or to a service performed by the driver. The underlying structure of the dynamic routing problem changes significantly when new orders have to be delivered, since there are few, if any, opportunities to accommodate additional deliveries after a delivery vehicle has left the depot, because the vehicle would have to return to the depot to pick up the additional deliveries.

@&#REFERENCES@&#

