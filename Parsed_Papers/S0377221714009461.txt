@&#MAIN-TITLE@&#Alternative approaches to the crude oil tanker routing and scheduling problem with split pickup and split delivery

@&#HIGHLIGHTS@&#


               
                  
                     
                        
                           
                           We solve two routing and scheduling problems with split pickup and split delivery.


                        
                        
                           
                           Goal is to identify the most promising formulation for a column generation approach.


                        
                        
                           
                           The discrete split model provides quicker results but less solution quality.


                        
                        
                           
                           The arbitrary split model provides better results but cannot solve large instances.


                        
                        
                           
                           A simplified combined version serves best for a column generation approach.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Routing

Time windows

Maritime transportation

Pickup and delivery

Split

@&#ABSTRACT@&#


               
               
                  The crude oil tanker routing and scheduling problem with split pickup and split delivery is a maritime transportation task where an industrial operator needs to ship different types of crude oil from production sites to oil refineries. The different crude oils are supplied and demanded in many ports in certain time windows. Pickup and delivery quantities are known in advance but no pairing of pickup and delivery needs to be predefined and can be decided together with shipment quantities during optimization. Pickup and delivery quantities may be split arbitrarily among the ships in the fleet. We compare two alternative path flow model approaches to investigate their degree of applicability in a column generation setup. For this purpose we apply route pregeneration prior to optimization. The first approach uses continuous decision variables for pickup and delivery to decide on shipment quantities. In the considerably shorter second formulation cargo quantities are discretized and included into the paths. The second approach is capable to solve larger instances and is more efficient in terms of computational performance, however solution quality may decrease due to the discretization.
               
            

@&#INTRODUCTION@&#

Routing and scheduling problems result from the need of transportation between different locations. In this paper we study a routing and scheduling problem that arises in maritime transportation. Out of the different types of shipping and related optimization problems described by Christiansen, Fagerholt, Nygreen, and Ronen (2007, chap. 4) the considered problem belongs to the domain of industrial shipping. In industrial shipping companies own vessels to execute their own transportation needs. Typically these are producing companies that need to ship raw materials as well as half finished or finished products.

The maritime transportation problem considered is the crude oil tanker routing and scheduling problem as introduced by Hennig et al. (2012). In the considered segment of maritime crude oil transportation ships transport different products from the Middle East to North America, Europe and the Asia-Pacific region. It may take more than five weeks before a laden ship arrives at its destination. Companies involved in this kind of activity may have refineries in many locations that require large deliveries of crude oil. Refineries demand crude oil to produce a range of petroleum products. For that they need oil of different quality, which for the purpose of transportation planning can be treated as different products.

The core problem considered in this paper can briefly be described as follows: Ships operate on a network that consists of nodes and arcs. Each node is a port associated with a time window for pickup or delivery. A single port may have several time windows and thus several nodes may belong to the same port. In addition to time window bounds and name of port, nodes are characterized by the quantity of a particular product to be picked up or delivered. No predefined pairings between pickup and delivery nodes are specified, and these pairings remain to be decided. Nodes are clustered in fairly remote regions for either only pickup or only delivery. Transportation is carried out by a fleet of heterogeneous ships. Each ship is capable to carry several different products simultaneously in separate cargo tanks. While a single ship will only visit a certain node once, no limit on the number of node visits of different ships is enforced. Node specific product quantities may be split arbitrarily among different ships. Limits on the maximum number of visits at a node and the freedom of splitting can be inferred from minimum required pickup or delivery quantities. For the problem at hand it is important to note that ships serving the same pickup node may deliver the product to different (multiple) delivery nodes.

Most maritime industrial routing and scheduling problems considered in the literature deal with predefined cargoes. These cargoes are of a certain size and have to be shipped from a definite origin to a definite destination. Examples of such problems are mentioned by Christiansen, Fagerholt, and Ronen (2004) and in the specific case of crude oil shipping by Hennig et al. (2012). A recent review on ship routing and scheduling problems (Christiansen, Fagerholt, Nygreen, and Ronen, 2013) details further progress in the field. If the problems are well constrained route pregeneration together with an optimization model is used. More complicated problem formulations have been treated with column generation. The reader is referred to Barnhart, Johnson, Nemhauser, Savelsbergh, and Vance (1998) for a very clear review of column generation. Maritime industrial routing and scheduling problems typically assume that a cargo has to be transported on a single ship. Acknowledging the improvements to be gained by the allowance of splitting cargo quantities in vehicle routing, Nowak, Ergun, and White (2008), Andersson, Christiansen, and Fagerholt (2011) and Korsvik, Fagerholt, and Laporte (2011) study the pickup and delivery problem with split loads. In this problem a cargo can be served by several vehicles. The next logical extension, allowing non-paired pickups and deliveries, has received almost no attention in the literature, however it is mentioned by Savelsbergh and Sol (1995) and a real application is discussed by McKay and Hartley (1974). The inventory routing problem, which also includes the aspect of splitting cargo quantities, is another related problem class. A relevant maritime inventory routing example is described by Christiansen (1999), which deals with a single product that has several supply and several demand points. In this example, several ships can visit the same port, however instead of having time windows and fixed pickup/delivery quantities, inventories at supply and demand points change over time and are required to be kept within their capacity limits. In a sense quantity splitting takes place since several ships can pickup from and deliver to the same inventories. A further problem addressing inventories for maritime oil transportation is treated by Aizemberg, Kramer, Pessoa, and Uchoa (2014). The authors deal with oil transportation between platforms and terminals, where inventory limits on both sides must be satisfied at each day. Shipments take only a day and tankers use their entire capacity. Further detailing of the maritime transportation itself is not within the scope of the paper. Andersson, Hoff, Christiansen, Hasle, and L°kketangen (2010) review further problems of this kind in a maritime and non-maritime context. For further in-depth study of these problems we point the reader to a good problem classification scheme described by Berbeglia, Cordeau, Gribkovskaia, and Laporte (2007) and more insights into the related split delivery vehicle routing problem treated by Archetti and Speranza (2008).

The purpose of this paper is to examine and demonstrate the performance of two mathematical problem formulations which both could be used in a column generation algorithm. For routing problems with a potentially very large route set column generation is a proven solution approach. It relies on problem decomposition which itself heavily relies on the mathematical problem formulation. In this paper we focus on the performance of the path flow formulation assuming that the needed paths could be generated on demand in a column generation scheme. Therefore the two path flow formulations examined in this paper contain sets of a priori generated paths. These sets, reduced to a manageable size, can give good indication of the problem formulation’s behavior. Keeping the focus we omit an in-depths study of particular path and path generation properties. The key differentiator between both formulations is the quantity split: The first model can split node quantities arbitrarily and decide ship load levels in a continuous manner. In contrast, the second model is based on quantity discretization. The node quantity split and ship load levels are determined in certain discrete steps. This mixed integer formulation is an improved version of the model introduced by Hennig et al. (2012). The improvement is a simplification of the objective function and time constraints and is discussed in this paper.

The paper is structured as follows: The problem is introduced and described in more detail in Section 2, where its relationship to the general pickup and delivery problem defined in Savelsbergh and Sol (1995) is discussed. Both solution approaches based on different path flow optimization models are presented in Section 3. In the same section we briefly describe the schemes used to a priori generate routes considered in the path-flow models. Section 4 summarizes the computational study and includes the description of test instances, the benefits of the improved mixed integer formulation and the computational results for the two approaches. Finally computational results for the models are compared and conclusions are drawn in Sections 5 and 6.

The problem studied can be considered an extension of the general pickup and delivery problem (GPDP) as described by Savelsbergh and Sol (1995). In Savelsbergh and Sol (1995) a set of shipments (originally referred to as requests) must be serviced by a fleet of vehicles. Each vehicle can have unique positions at the start and end of operation. Each shipment is a total cargo quantity to be picked up at one or several origins and to be delivered to one or several destinations. A shipment cannot be shared between several vehicles, and vehicles are only eligible for a shipment if they have a sufficiently large cargo capacity. A vehicle must first visit all pickup nodes (origins) and then consequently all delivery nodes (destinations), however each origin and destination may be visited exactly once.

In the studied problem the set of shipments is serviced by a fleet of ships. Similar to the GPDP a shipment refers to a unique product. Each shipment consists of a number of pickup and delivery nodes with respective cargo quantities, which we call requirements. The sum of all pickup and the sum of all delivery requirements for a shipment are both equal to the shipment quantity. In contrast to the GPDP the condition that a shipment cannot be shared among several vehicles is relaxed. In addition the split of requirements among several ships is permitted. Stricter than in the GPDP each requirement has to be serviced within a specified time window. Service in this context means the start of pickup or delivery operation. The entire pickup/delivery operation may take up to several days due to the large quantities involved. Hence, time and costs for pickup and delivery have to be taken into account. Pickup and delivery are allowed to end outside time window bounds. In an operational environment time window bounds may be somewhat soft (Fagerholt, 2001), however for the purposes of this study we only consider hard time windows.

The fleet of ships in the problem is heterogeneous. A number of differently sized cargo tanks onboard each ship allow simultaneous transportation of different products. Typically at maximum four different products are carried and each product can use one or more cargo tanks. Instead of a single, total vehicle capacity each ship has both a total weight and a total volume capacity. Both capacities not only depend on the ship itself but on physical restrictions of the water way and visited ports. As a consequence capacities are network-arc specific. Each arc in the network may have a maximum weight and volume capacity. Apart from ship individual capacities each ship has specific speeds, a cost structure and an initial position at a given time. In the considered problem ship capacities are relatively similar due to the inclusion of only a single ship size class.

The structure of shipments and ship routes deviates from the GPDP definition. The GPDP requires all pickup nodes to be serviced before their delivery nodes. That may not be feasible in the considered problem. Due to the geography of the problem, a ship route can be divided into so called voyages. A voyage is a journey that connects nodes in distant pickup and delivery regions. Distances between regions are large enough such that in a voyage all pickups occur prior to all deliveries. In our problem time windows can be specified such that for a shipment not all pickups can be served before all deliveries. That means that to serve a complete shipment several consecutive or overlapping voyages may be needed. Consecutive voyages may be carried out by the same ship, but overlapping voyages have to be carried out by different ships. Between laden voyages, i.e. on the way from a delivery to a pickup region ships are empty. No given pairings between pickup nodes and delivery nodes need to exist. Hence, a pickup requirement may be delivered to several suitable delivery nodes and vice versa. Generally time windows are short enough, so that a ship cannot visit the same time window more than once in consecutive voyages.

In the following three sections two different optimization models and a route generator will be presented. The optimization models to be solved are path flow models in which a path corresponds to a ship route. Prior to solving the models these paths are generated by a route generator. In the remainder of the paper we will use the term route instead of path.

The first model is a mixed integer linear program and treats cargo quantities continuously. The several differently sized cargo tanks onboard allow for certain flexibility with regards to transported quantities per oil quality. This flexibility together with operational quantity adjustments undertaken before/during loading can be approximated with arbitrary load levels onboard and the permission of continuous split. The model is a slightly simplified and more compact formulation of the model presented by Hennig et al. (2012).

The second model is a pure integer program which makes use of discretized cargo quantities. A requirement may consist of one or several cargo units of uniform quantity. In this way, typical trading quantities (parcels) can be modeled, but the freedom of split is somewhat limited.

The route generator can be used in two variants to pregenerate routes for the two models. Both models make use of node sequences, called geographical routes. For the second model, additionally a cargo pattern generator is applied and the resulting routes being a time and capacity feasible combination of geographical routes and cargo patterns are referred to as cargo routes. For both models the same geographical routes consisting of voyages are used.

The continuous cargo optimization model has to select one geographical route for each ship, such that it is possible to transport all shipments. The actual pickup and delivery quantities for a ship on a geographical route are determined by the optimization model by means of continuous variables. Decisions include determining the split ratios of requirements between ships. Origin–destination pairs for requirements of the same shipment are decided by means of the route selection. A detailed description of this model and its background is given by Hennig et al. (2012).

The objective function used by Hennig et al. (2012) has been modified in this model in order to improve performance. The previous objective function contains a variable term that prices the exact amount of waiting time in the optimal schedule (see previous formulation in Section 4.1.1). In the modified version we estimate the total waiting time cost which allows us to eliminate time variables from the objective. Test calculations show the unfortunate influence of a waiting cost term on the strength of the LP relaxation (see Section 4.1.1). In order to improve the optimization we assume reasonable pickup and delivery times for each node in a route. We assume that the total cargo handling time is equal to the cargo handling time for fully laden voyages. By that, resulting waiting time can be precalculated and included in the fixed cost term of the objective. The resulting inaccuracy may in an extreme case be roughly 1 percent, but should nearly always be expected to be much less. For a large cost deviation the assumed cargo handling time distribution must be significantly different from the real one. If cargo handling leads to waiting time reduction, waiting time can at most be reduced by total cargo handling time. The estimated waiting costs are included in the fixed cost of a route.

We first define the complete nomenclature and then state the model. The nomenclature is divided into indices, sets, available data and variables. Parts of this nomenclature will also be valid for the discrete cargo model in Section 3.2.

Indices:

                           
                              v
                           
                           
                              Ship,

Route,

Nodes,

Products.

Sets:

                           
                              
                                 V
                              
                           
                           
                              Ships,

Geographical routes for ship v,

Arcs (i, j) ship v can use (includes arcs from start- and to end of service nodes),

Arcs for ship v that possess a possibly binding cargo weight constraint,

Arcs for ship v that possess a possibly binding cargo volume constraint,

All pickup and delivery nodes,

Pickup and delivery nodes ship v may visit,

All nodes ship v may visit (includes start- and end of service nodes),

Pickup nodes ship v may visit,

Delivery nodes ship v may visit,

Products.

Data:

                           
                              
                                 
                                    C
                                    
                                       v
                                       r
                                    
                                    E
                                 
                              
                           
                           
                              Estimated fixed part of cost for sailing route r by ship v,

Cost per weight unit for pickup or delivery in node i for ship v,

= 1, if ship v sails arc (i, j) on route r and 0 otherwise,

Maximum allowed cargo weight onboard ship v on arc (i, j),

Maximum allowed cargo volume onboard ship v on arc (i, j),

= 1, if i is a pickup node and − 1, if i is a delivery node,

Requirement: Cargo weight to be picked up/delivered in total in i,

Kronecker delta; = 1 if product c is required in i and 0 otherwise,

Density of product c,

Per weight unit time consumption for cargo handling in i,

Sailing time necessary on arc (i, j) for ship v,

Earliest time for start of service in i,

Latest time for start of service in i,

Minimum pickup quantity in i for ship v,

Maximum pickup quantity in i for ship v.

Variables:

                           
                              λvr
                              
                           
                           
                              Binary routing variable; = 1, if ship v sails route r and 0 otherwise,

Time for start of service in i for ship v,

Cargo weight picked up or delivered in i by ship v,

Load weight of product c onboard ship v on arc (i, j).

The objective of the model (1) minimizes total cost. The fixed cost component for a particular route includes estimated waiting costs. Pickup and delivery costs are variable costs and not route specific. Constraint (2) ensures that each ship uses only one route or is not used at all. A dummy route indicating the non-use of a ship is included in the route set for each ship. Cargo weight and volume restrictions on arcs are enforced by constraints (3) and (4). Each arc has a cargo weight, cargo volume or both, cargo weight and volume, restriction. No cargo is allowed on an unused arc. Cargo quantities onboard a ship on certain arcs are linked by the ship load balance constraint (5). The quantities onboard are increased or reduced by the quantities picked up or delivered. Constraint (6) ensures that all requirements are met. Finally constraints (7) and (8) ensure schedule feasibility. During model implementation we use the standard way of linearizing constraints (7) suggested by Glover (1975). Variable type constraints (9) through (12) complete the model. We treat variables qiv
                         in pickup nodes as semi continuous. These variables have to be zero if ship v does not visit node i, which is ensured by constraints (3) and (4). If a ship visits a pickup node, we require it to pick up a minimum quantity. A node visit without pickup cannot be part of the optimal solution since there will always be a cheaper solution without the additional node visit. Maximum pickup quantities are derived numbers and related either to usable ship capacity or available quantities.

We present results for this model in Section 4.1.3. In Section 5 these results are compared with the results of the discrete cargo model presented in the next section.

The major difference between the continuous cargo model and the discrete cargo model is that in the discrete cargo model cargo quantities to be picked up and delivered are already encoded in a route. For each sequence of nodes there are theoretically infinitely many options for pickup and delivery quantities. To make the model tractable we assume a coarse requirement discretization that also fits into the (similar) ship capacities.

Similar to the continuous cargo model, the discrete cargo model has to select one cargo route per ship so that all requests are served. The requirement split however is determined by the route selection directly instead of additional pickup and delivery variables as in constraints (5) and (6) in Section 3.1.

The discrete cargo model has only two types of structural constraints. The routing constraints ensure that at most one cargo route per ship can be used. Requirement constraints demand that all pickup and delivery requirements are completely served. The same nomenclature as in Section 3.1 is used. The only additional needed definitions are given as follows.

Sets:

                           
                              
                                 
                                    R
                                    v
                                    C
                                 
                              
                           
                           
                              Cargo routes for ship v.

Data:

                           
                              
                                 
                                    C
                                    
                                       v
                                       r
                                    
                                    C
                                 
                              
                           
                           
                              Total cargo route cost for route r and ship v,

Cargo quantity to be picked up/delivered in node i by ship v on route r.

Variables:

                           
                              μvr
                              
                           
                           
                              Binary routing variable; = 1, if ship v sails cargo route r and 0 otherwise.

The objective function (13) minimizes total cost. Since for each cargo route pickup and delivery quantities are known in advance, the exact cargo route costs, including sailing costs, port costs, handling costs and waiting costs, can be precalculated.

Constraint (14) ensures the use of only one cargo route per ship. This constraint is identical with constraint (2) except that the set 
                           
                              R
                              v
                              C
                           
                         in constraint (14) is larger than the set Rv
                         in constraint (2). Constraint (15) ensures the fulfillment of all requirements. Here the pickup and delivery variables of constraint (6) are exchanged with known route and ship specific cargo quantities 
                           
                              Q
                              
                                 i
                                 v
                                 r
                              
                              R
                           
                        . Cargo feasibility constraints (3) through (5) and time feasibility constraints (7) and (8) need not be enforced in the discrete model. This information is already contained in the feasible routes in set 
                           
                              R
                              v
                              C
                           
                        .

Only binary routing variables are needed. Constraints (14) and (16) are in principle stricter than needed because we could permit a convex combination of several identical geographical routes with different cargo patterns, as described by Christiansen (1999). The set of cargo routes 
                           
                              R
                              v
                              C
                           
                         in constraint (16) is, due to the number of cargo patterns per geographical route, larger than the set of geographical routes Rv
                         in constraint (12). As a consequence the number of binary variables of the discrete model exceeds the number of binary variables of the continuous model.

The accuracy of the approximation of splitting pickups and deliveries represented in the discrete cargo model depends on the fineness of the cargo discretization. The completeness of the cargo route sets 
                           
                              R
                              v
                              C
                           
                         limits the feasible space as compared to the options available in reality. In contrast, the continuous model is only limited by the completeness of its route sets Rv
                         in its representation of real-world routing options. As will be outlined in greater detail in the next section, discretization has advantages during route generation and selection. In the case of discretized quantities, all voyage specific information is known, thus cargo routes that visit the same nodes and pickup and deliver the same quantities can be checked for dominance.

It is interesting to note that the discrete cargo model described in this section is a special case of the continuous cargo model in Section 3.1. Given a parameter QD
                         that is the parcel size equal to one discretization unit, then all cargo pattern quantities 
                           
                              Q
                              
                                 i
                                 v
                                 r
                              
                              R
                           
                         in constraints (15) are multiples of QD
                         where 
                           
                              
                                 Q
                                 
                                    i
                                    v
                                    r
                                 
                                 R
                              
                              ∈
                              
                                 {
                                 k
                                 ·
                                 
                                    Q
                                    D
                                 
                                 :
                                 k
                                 ∈
                                 N
                                 }
                              
                              
                              ∀
                              v
                              ∈
                              V
                              ,
                              r
                              ∈
                              
                                 R
                                 v
                                 C
                              
                              ,
                              i
                              ∈
                              
                                 N
                                 v
                              
                           
                        . Further, all requirements Qi
                         in constraints (6) and (15) are also multiples of QD
                         where 
                           
                              
                                 Q
                                 i
                              
                              ∈
                              
                                 {
                                 k
                                 ·
                                 
                                    Q
                                    D
                                 
                                 :
                                 k
                                 ∈
                                 N
                                 }
                              
                              
                              ∀
                              i
                              ∈
                              
                                 N
                                 v
                              
                           
                        . Therefore we obtain identical feasible regions in both models by replacing constraints (10) and (11) by 
                           
                              
                                 q
                                 
                                    i
                                    v
                                 
                              
                              ∈
                              
                                 {
                                 k
                                 ·
                                 
                                    Q
                                    D
                                 
                                 :
                                 k
                                 ∈
                                 N
                                 }
                              
                              
                              ∀
                              i
                              ∈
                              N
                           
                        . In the discrete cargo model, constraints of type (3) through (5) and (7) through (8) can be omitted since cargo and/or time infeasible cargo routes are excluded from the cargo route sets 
                           
                              R
                              v
                              C
                           
                        .

Route generation consists of the three phases:

                           
                              1.
                              Voyage and cargo pattern generation

Voyage selection

Voyage-to-route combination

In the first phase, voyages consisting of a sequence of pickup nodes followed by a sequence of delivery nodes are generated. We call these voyages geographical voyages. The set of geographical voyages forms the basis of the route generation for both the continuous and discrete cargo models. For the discrete cargo model the first phase also includes the generation of all feasible cargo patterns. A cargo pattern for a geographical voyage needs to satisfy all weight, volume and time constraints. Pickup and delivery must also be feasible with respect to the transported products. We call a geographical voyage combined with one of its cargo patterns a cargo voyage. In the second phase, promising voyages for a voyage-to-route combination in phase three are selected. Finally in the third phase a time feasible voyage combination is carried out to generate one route set per ship. Details about the route generation based on geographical voyages for the continuous cargo model are described by Hennig et al. (2012). In this section the functionality of the route generator for the continuous cargo model is briefly summarized and details are provided regarding the route generation for the discrete cargo model.

The voyage generation starts with the generation of geographical voyages. First, delivery nodes are combined into delivery node sequences of up to four nodes. For each delivery node sequence all product matching pickup node sequences again with a maximum length of four are generated. In addition we require that in both pickup and delivery sequences at maximum three ports each are visited. These imposed limits are based on practical limitations from an economic perspective for crude oil shipping. The resulting voyages are checked for feasibility. To reduce the number of voyages and at the same time consider quite realistic voyages, an expected port stay duration is set for each node in the voyage. The duration can depend on the number of nodes in a voyage since the total pickup and delivery time is approximately known in advance. We assume maximum allowed waiting times before a ship can start service in a node and for an entire voyage.

We distinguish between port visit and node service, since a ship may serve several consecutive nodes in the same port. Repeated visits of a port are permitted, however repeated node visits are not allowed. Geographical voyages are generated based on a network specified by the company’s scheduler.

Once all geographical voyages are generated, the voyage generation phase for the continuous cargo model is completed. For the discrete cargo model the voyage generation continues with the generation of all cargo patterns. For each geographical voyage we generate all time and arc capacity feasible cargo patterns that can be conceived using a given cargo discretization. Fig. 1
                            shows the situation. An example geographical voyage has one pickup node followed by two delivery nodes. Time constraints are omitted to avoid complexity. On this voyage only a single product is transported. The product availability and demands are indicated in the nodes. The maximum arc capacities (e.g. given in units of weight in Fig. 1) are given on the arcs. For this voyage four feasible cargo patterns exist. There are five units supplied and demanded. This quantity cannot be transported since the first arc limits the cargo onboard to four units. This simply may be caused by the ship capacity. The second arc only allows two units due to a draft restriction in the last port. Given all of these restrictions, only four cargo patterns are feasible. For the discrete cargo model this will be four cargo voyages as opposed to one geographical voyage in the continuous cargo model.

The combination of (geographical or cargo) voyages into routes with more than one voyage is a combinatorial problem. Thus from a computational perspective we benefit from the reduction to the smallest possible voyage sets in our solution approach. In the voyage selection phase we wish to exclude voyages that are dominated by other voyages. While for cargo voyages this exclusion is possible, geographical voyages pose considerable more complexity in determining dominance. Ideally we do not want several geographical voyages that visit the same nodes. It is however not true that the least expensive geographical voyage among all geographical voyages visiting the same nodes dominates the others due to the arc dependent capacity constraints. In Fig. 2
                            two geographical voyages visiting the same nodes A, B and C are shown. Capacity limits are given on the used arcs. The first voyage may be least costly among all voyages that do not deliver more than two units to node C in an optimal solution. The second voyage may be best if more than two units should be delivered in C but not more than two in B. Thus dominance needs to consider the ability of a geographical voyage to transport cargo. It should be noted that in order to account for the different ending ports of the voyages and compare voyages from a common basis, the return arcs to the pickup region are included in the cost of the geographical routes.


                           Hennig et al. (2012) suggest a heuristic geographical voyage selection. From a set of geographical voyages visiting the same nodes, one or two voyages are selected. A selected voyage must be the least costly voyage over all voyages that can transport at least some particular cargo quantity. A number of different minimum cargo quantities are used. This method ensures reduced routing costs and possibly a high potential for different cargo distributions. The unknown costs for pickup and delivery are not considered during selection. This method is based on limited experimentation and does not guarantee that all possible cargo distributions for a set of visited nodes are feasible in the continuous cargo model. The selection of cargo voyages can be done based on complete information. For each set of cargo voyages that visit the same nodes and pickup and deliver the same quantities in each node, we can choose the lowest cost cargo voyage. Exact costs can be used in the comparison.

It is important to note that the final voyage sets for geographical voyages and cargo voyages are not identical. For a given choice of visited nodes, the cargo voyage selection chooses one voyage per cargo pattern. For different cargo patterns, different geographical routing may be selected. These geographical voyages may not be identical to the geographical voyages chosen during the voyage selection for the continuous cargo model.

In the voyage combination phase voyages are sequenced into routes. Fig. 3
                            provides an illustrative example. Five voyages (A through E) are available to be carried out within certain time slots resulting from their port and time window structure. The duration of a voyage is shorter than its slot and a voyage has a latest date for beginning the voyage. A time slot may start before the first time window in the voyage opens due to a waiting time allowance. If a voyage is reached within its time slot a ship may have to wait before the first pickup can take place. Out of the five voyages, three routes can be generated: A, A–C and B. In the first route the ship sails from its origin position to the first port in voyage A. The voyage can be feasibly started and the ship returns after voyage completion to its pickup region. The second route can be generated by extending the first route with voyage C. Between voyages A and C the ship has to wait before voyage C can be started. Unfortunately, voyage D is not eligible for route extension since its first port is reached too early and the inter-voyage waiting limit is exceeded. The last route only contains voyage B. After voyage B’s completion, neither C nor D can be reached before the latest start dates. Voyage E is not at all feasible for the considered ship. The voyage combination phase works identically for geographical voyages and cargo voyages. In the case of the geographical voyages, time feasibility is tested based on expected port stay duration. The route generator first generates all routes with a single voyage by connecting each ship’s origin with all previously generated voyages that can be reached without violation of the time window constraints and permitted waiting between voyages. These sets of single-voyage routes, for which completion time is now known, are then extended to double, triple and so on voyage routes in the same way.

Due to the possibly different geographical voyages found in the voyage sets of the two models, their generated route sets may be different. This means that the feasible regions of the two models are not identical due to the discretization in the discrete cargo model and also due to differences in the route sets. We accept this difference with the goal of achieving strong practical results for the two models individually. With respect to the original problem, the feasible regions for both models are reduced during route generation. While the voyage selection for the continuous cargo model limits the feasible region for this model, the choice of discretization granularity further limits the discrete cargo model’s solution space.

The computational study is based on twelve test instances and its main objective is to compare the computational performance of the two models considered. As a prerequisite results of the computational comparison of the two different objective functions for the continuous cargo model mentioned in Section 3.1 are discussed. All computations have been carried out on HP DL140 G3 workstations with two 64-bit dual core 1.6 gigahertz processors, 8 gigabytes of memory and the Linux operating system. We used Xpress-MP 2008A with default settings to optimize the problems. Each computer ran only one instance at a time to have maximum memory available.

The twelve test instances used are divided in two sets of problem instances and summarized in Tables 1
                         and 2
                        . The instances are different in number of ships, pickup and delivery nodes, and products. They also are different in their pairing characteristic. The pairing characteristic describes how nodes can be combined to pickup-delivery pairs. Paired delivery nodes can only be supplied from a single pickup node that cannot supply to other delivery nodes. Implicitly paired delivery nodes can only be supplied from a single pickup node that may also supply other delivery nodes. And non-paired delivery nodes can be supplied from several pickup nodes, which may supply other delivery nodes. Pairing flexibility increases as the number of non-paired nodes increases. The minimum number of shipments listed in the tables is based on the total cargo quantity in an instance divided by a typical ship capacity. When rounded up this number represents the minimum number of voyages needed in the solution. If this number is fractional, then ship capacity cannot be fully utilized on all voyages.

Instance set A is composed of unrelated, smaller sized instances. The planning period of instances one through three of set A only allows routes with a single voyage, i.e. routes with one pickup node sequence followed by one delivery node sequence. In contrast instances four through six of set A allow routes with maximum two voyages within a route. The instances of set B are larger in size than those in set A. All B instances allow routes with up to two voyages. Instances in set B originate in instance seven by adding more nodes, products and ships to create new instances. Set B was created to explore the limitations in the size of realistic instances that can be handled by the proposed solution approaches.

The test instances have the following additional properties:

                           
                              •
                              Generally, the ships have different times for starting service. There is no time limit for end of service.

Pickup and delivery requirements are balanced.

In order to compare the discrete and continuous cargo models, all requirements are set to be multiples of a discrete cargo quantity.

Ships of the size considered may pickup a maximum of four parcels or eight half-parcels of the discrete cargo size.

In this paper we propose to eliminate time variables from the objective as used by Hennig et al. (2012). Hennig et al. (2012) calculate the exact waiting time cost in each route by means of the last objective function term that includes the total service time for all ships:

                              
                                 (17)
                                 
                                    
                                       
                                          
                                             
                                                min
                                                
                                                   ∑
                                                   
                                                      v
                                                      ∈
                                                      V
                                                   
                                                
                                                
                                                   ∑
                                                   
                                                      r
                                                      ∈
                                                      
                                                         R
                                                         v
                                                      
                                                   
                                                
                                                
                                                   C
                                                   
                                                      v
                                                      r
                                                   
                                                   R
                                                
                                                ·
                                                
                                                   λ
                                                   
                                                      v
                                                      r
                                                   
                                                
                                                +
                                                
                                                   ∑
                                                   
                                                      v
                                                      ∈
                                                      V
                                                   
                                                
                                                
                                                   ∑
                                                   
                                                      i
                                                      ∈
                                                      
                                                         N
                                                         v
                                                      
                                                   
                                                
                                                
                                                   C
                                                   
                                                      i
                                                      v
                                                   
                                                   
                                                      Q
                                                      R
                                                   
                                                
                                                ·
                                                
                                                   q
                                                   
                                                      i
                                                      v
                                                   
                                                
                                                +
                                                
                                                   ∑
                                                   
                                                      v
                                                      ∈
                                                      V
                                                   
                                                
                                                
                                                   F
                                                   
                                                      v
                                                   
                                                   I
                                                
                                                ·
                                                
                                                   (
                                                   
                                                      t
                                                      
                                                         D
                                                         v
                                                      
                                                   
                                                   −
                                                   
                                                      t
                                                      
                                                         O
                                                         v
                                                      
                                                   
                                                   )
                                                
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

The nomenclature of this previous objective function is slightly modified to match the nomenclature of this paper. The first term covers the fixed cost and includes route costs of sailing (fuel cost) and port fees. Other fixed costs as for example capital and crewing costs are constant for the planning period and need not be considered during optimization. Unlike in 
                              
                                 C
                                 
                                    v
                                    r
                                 
                                 E
                              
                            no waiting costs are included in the fixed route costs 
                              
                                 C
                                 
                                    v
                                    r
                                 
                                 R
                              
                           . Furthermore the fuel cost portion used for sailing and included in the fixed route costs 
                              
                                 C
                                 
                                    v
                                    r
                                 
                                 R
                              
                            is reduced by the cost for waiting mode fuel consumption. The same cost reduction applies to the variable cost 
                              
                                 
                                    C
                                    
                                       i
                                       v
                                    
                                    
                                       Q
                                       R
                                    
                                 
                                 ,
                              
                            where the cost rate for pickup/delivery (originally referred to as 
                              
                                 C
                                 
                                    i
                                    v
                                 
                                 Q
                              
                           ) is reduced by the waiting cost rate. To price the entire route and related operation correctly, the last term adds a waiting time cost for the entire time a ship is in service. Here 
                              
                                 F
                                 
                                    v
                                 
                                 I
                              
                            is the waiting cost per time unit. tOv
                            is the time ship v starts service at its origin position and tDv
                            is the time ship v ends service at its destination. Consequently the difference between these two equals the total service time of a vessel. By approximation of expected waiting time in a route and inclusion of same in the fixed cost portion all time variables in the objective function can be eliminated.

In order to study the influence of the time variable elimination in the objective function, we test and compare both objective functions on instance set A. To make the objective function values of the best found solutions of both approaches comparable, we have postoptimized the best solution found with the modified objective: The postoptimization solution value used for Table 3
                            is obtained by running the optimization with the original objective (17) on the best route set found with the modified objective (1). That way two identical routings will yield the same solution value. In fact, instances one, two, four and five show an identical optimum route set. Table 3 shows a clear computational performance improvement caused by the objective modification. The change values in the table show the percentage increase (positive) or decrease (negative) of the values found when optimizing with the exact objective function. For example, for instance one the LP bound can be improved by 7.7 percent when switching to the modified objective. With the new objective the LP bound improves for all instances. The negative changes of the objective function value and optimality gap also mark the improvement. An optimization time limit of 24 hours is used.

For the given choice of structurally different instances, the root node LP bound and optimization time improve considerably. With the new objective only a fraction of the time previously needed is necessary. For instance five an even smaller fraction would result if the total time to optimum for the previous objective could be determined. Two instances are not solved to optimality making the run-time comparison less meaningful. For instances one, two, four and five, the objective function values as well as the ship itineraries are identical, thus and the solution quality is the same. Instances three and six terminate with better solutions and thus proof of optimality for the solutions remains undetermined, however the optimality gaps decrease for these instances. The difference in optimality gap for instance five is entirely due to the final gap for the exact objective. In the remainder of this paper we use the objective function with waiting cost estimation. For the discrete cargo model, no performance change is expected when estimated waiting costs are used.


                           Tables 4
                            through 9 report results for both models and all instances subject to a 24 hour computational time limit. Instances marked with “opt” as a superscript could be solved to optimality. If an instance could not be solved to optimality within 24 hours, then the results report a run-time of 86 400 seconds. Routes for each ship of an instance have been generated in parallel to speed up the pregeneration phase which is not included in the optimization time limit. Both the smallest and largest route pregeneration times over all ships are reported for each instance. It can be observed that route pregeneration times increase significantly with instance size. The route generator checks far more routes than are reported in the tables for feasibility. The programming language Mosel was used for the route pregeneration and is likely not reflecting the most computationally efficient application of the methods. Root node gap refers to the gap between LP relaxation at the root node and best solution found during the reported optimization. The influence of default cut generation in the root node is not included in the root node gap. The gap at best solution denotes the gap between the dual bound at the time the best solution was found and best solution. The optimality gap between the primal and dual bounds at completion of the run is termed gap at running time end. The “Time to first better solution” rows in Tables 4
                            and 5 refer to the results of the discrete cargo model in Tables 6
                           
                            and 7 by displaying the time at which the continuous cargo model finds a solution better than the best solution found by the discrete cargo model. In order to compare the final results of both models we add a postoptimization step as in Section 4.1.1
                           . We reoptimize the final itineraries based on exact costs. For both models we retain and fix the geographical routes found during optimization and reoptimize quantities based on exact costs. Waiting times and cargo distributions in the results may change due to different waiting time costs. In addition, results for the discrete cargo model may change since the cargo discretization aspect is relaxed. The discrete cargo model results are reoptimized using continuous cargo quantities. As a consequence objective function values of an instance after postoptimization must be identical for both models, if the ship itineraries are identical.

For the discrete cargo model there are two sets of results: In the first set, one cargo discretization unit is roughly set equal to one quarter of the considered ship capacity. We refer to this form of discretization as a parcel discretization. For the second set, the discretization unit is halved and is set equal to 1/8 ship capacity. We refer to this form of discretization as a half parcel discretization. We only allow cargo routes for this finer discretization which utilize at least half the ship capacity on the heaviest loaded arc of travel.

For instance set A, feasible solutions could be found without difficulty. Although instances three and six are not solved to optimality, their optimality gaps are relatively low when they reach the time limit. Unfortunately the rate of gap reduction during the last few hours of computation does not indicate that the closing out of the gap would have been imminent. For instances seven through twelve the results look quite different. For four of the instances, not a single integer feasible solution could be found. For instances eleven and twelve, the run-time for the default Xpress cut generation in the root node exceeded the 24 hour optimization time limit. The remaining two instances completed their runs with larger gaps than the smaller instances. All problem instances except instance six for which a feasible solution is found use the entire fleet of ships available. For all instances the waiting cost estimation causes only a slight total cost difference compared to the postoptimized solutions. Particularly for the larger test instances, an increasingly large range in the route pregeneration times is observed. The primary reason for this appears to be due to the differences in the start of service times for the ships. Ships available early in the time horizon are far more likely to be able to combine multiple voyages into routes than ships available later. Ship speed does not seem to have a significant influence.

The continuous cargo model is able to find better solutions than the discrete cargo model for seven out of eight instances for which solutions have been found. With one exception, the times at which the continuous cargo model finds a solution better than the best solution found by the discrete cargo model are small compared to the total optimization times.

For both computational sets, all instances except one could be solved to optimality. For instances one through nine, the optimal solution could be found at the root node. Due to excessive route pregeneration times, instances six, ten, eleven and twelve could not be run with half parcel discretization. Results are given in Tables 6 and 7 for the first set of instances, and Tables 8
                            and 9 for the second set

The tables show a considerable increase in the number of cargo routes for the half parcel discretization compared to the parcel discretization. Naturally, cargo route pregeneration times have the same development. If no lower limit on the ship capacity utilization would have been applied, the true number of cargo routes for the half parcel discretization would be even larger than the reported values. The largest instances that could be approached with the finer discretization have over than 300 times longer optimization times than the corresponding instances with parcel discretization. The improvement of the objective function value due to the half parcel discretization is less than 1 percent for all but instance seven which improves by 2.4 percent.

Instances eleven and twelve are the largest in size with very long run-times and they could only be solved with parcel discretization. Instance eleven could not be solved to optimality. These cases are the only large cases with more ships in the fleet than needed in the optimal solution. As instance size increases it becomes more difficult to estimate a priori how many ships are needed to serve the transportation task.

In this section the comparison of the two different approaches proposed for solving the crude oil tanker routing and scheduling problem is discussed. Common to both of the approaches is the use of route pregeneration. The suggested path flow models treat the same problem, however the use of route sets generated in different manners leads to feasible regions that are not identical. It should be pointed out that we have not tried to generate equivalent route sets and instead we exploit the characteristics of each approach independently. We have ensured that both models use the same objective function for the purposes of comparison. In the following discussion, the cost comparisons are based on postoptimization results.

We have considered twelve instances derived from realistic data and find that the discretized cargo approach was able to solve all but one instance to optimality. The size of the largest instance is realistic in size for the considered industrial problem. For larger instances, pregeneration times increase quickly and thus alternatives to route pregeneration as part of the solution approach may be necessary.

An important difference between the two models can be observed in the root node gaps. The root node gap gives an indication of the tightness of the LP relaxation. The discrete cargo model performs considerably better than the continuous cargo model with respect to root node gap. However, in part this could be expected due to the structure that cargo patterns provided. The relaxation of the discrete cargo model is probably also tighter since the LP relaxation of the continuous cargo model allows the exchange of cargo between geographical routes with common nodes. Such an exchange is not possible in the LP relaxation of the discrete cargo model. The average values for the first seven instances show that solutions obtained using the continuous cargo model are 2.6 percent better in comparison to parcel discretization, however their root node gap is 7.5 times worse. The root node gaps for the discrete cargo model with half parcel discretization are on average slightly worse than for the parcel discretization.

The continuous cargo model finds better solutions than the discrete cargo model for instances one through seven, and in all but one instance they are found within a short time span. If we compare the parcel discretization results with the continuous cargo model results, we see a cost increase of up to 8.5 percent. The finer half parcel discretization increases costs by up to 5.9 percent. For instances one, two and four, both models and both discretizations lead to the same ship itineraries and thus total costs are identical. The comparison of all other ship itineraries shows that lower cost solutions are due to better routing. The number of port calls remains approximately the same in all the different solutions for both models and for each instance. The 8.5 percent and 5.9 percent lower costs for the solutions to instance seven obtained from the continuous cargo model compared to the parcel and half parcel discretizations are due to a routing involving one voyage less. The continuous cargo model is able to achieve up to a 3.4 percent lower cost than the discrete cargo model due to a better intra-voyage routing. These results indicate that the continuous cargo model solution approach may be more likely to produce superior solutions. However, the use of the continuous cargo model for larger instances is not practical from a computational standpoint.

Based on the tests carried out, there is little hope that the continuous cargo model can solve large instances to optimality using commercial MIP software at default settings. Within 24 hours only four instances could be solved completely using the continuous cargo model. The optimality gaps of the continuous cargo model are not very small when the time limit is reached for larger instances. In general the discrete cargo model computationally outperforms the continuous cargo model. If we consider total run-time, then clearly the discrete cargo model performs best for the first ten instances.

The discrete cargo model performs better than the continuous approach in terms of optimization time, root node and optimality gap. In terms of solution quality the discrete cargo model tends to produce solutions of lower quality than the continuous cargo model. In practice this effect may be less significant than indicated by the results. If cargo discretization leads to additional voyages and ships are not fully utilized on the final routes, additional crude oil may be purchased and loaded onto the ships to satisfy future demands. For instances of moderate size, route pregeneration in connection with the compact discrete cargo optimization model seems to be a practical approach. As the tests indicate, good solutions can be found quickly using the continuous cargo model, therefore for problems of up to moderate size perhaps a heuristic version of the continuous cargo approach may be a practical alternative that produces superior solutions.

Ultimately we are interested in solving large sized instances, which could exceed the largest, realistic instances solved with the discrete cargo model. Therefore the triggering question for this study has been whether a model with discretized or continuous cargo quantities would perform better for a reasonably large set of routes. The answer of this question would decide which model to study further. The stronger performance of the discrete cargo approach suggests further work. The optimization results of the continuous cargo model have been slightly better but the difficulty to solve the model seems disadvantageous.

The main drawback of the discrete cargo model is the enormous number of possible cargo routes that cannot be pregenerated for large instances. A fine discretization of the cargo size further amplifies this problem. To address the issue of the massive number of theoretically feasible routes a common approach to the route generation during optimization is the column generation method. Column generation has been recently successful applied to routing problems that involve split decisions. Two examples for the split delivery vehicle routing problem can be found in Desaulniers (2010) and Ceselli, Righini, and Salani (2009). Consequently, it would be interesting to study column generation methods for the presented split pickup and split delivery problem. Since it is the discretization that leads to solution quality loss, the optimization problem might be improved by allowing a convex combination of cargo routes that would allow arbitrary cargo quantities onboard but still rely on routes with encoded cargo quantities. However many challenges can be expected in finding feasible convex combinations of routes and generating feasible pickup and delivery routes with arc specific capacities and allowing split cargoes in each location.

@&#REFERENCES@&#

