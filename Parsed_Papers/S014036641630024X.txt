@&#MAIN-TITLE@&#Lightweight capacity measurements for mobile networks

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Packet dispersion technique tuned for mobile networks.


                        
                        
                           
                           Lightweight and passive: its input is only already existing traffic.


                        
                        
                           
                           Is able to provide accurate results with a fraction of the exchanged packets.


                        
                        
                           
                           Is not affected by the scheduling process of eNodeBs and other artifacts.


                        
                        
                           
                           Verified by a week-long measurement campaign and extensive simulations.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Mobile capacity

Measurement

Packet dispersion

@&#ABSTRACT@&#


               
               
                  Mobile data traffic is increasing rapidly and wireless spectrum is becoming a more and more scarce resource. This makes it highly important to operate mobile networks efficiently. In this paper we are proposing a novel lightweight measurement technique that can be used as a basis for advanced resource optimization algorithms to be run on mobile phones. Our main idea leverages an original packet dispersion based technique to estimate per user capacity. This allows passive measurements by just sampling the existing mobile traffic. Our technique is able to efficiently filter outliers introduced by mobile network schedulers and phone hardware. In order to asses and verify our measurement technique, we apply it to a diverse dataset generated by both extensive simulations and a week-long measurement campaign spanning two cities in two countries, different radio technologies, and covering all times of the day. The results demonstrate that our technique is effective even if it is provided only with a small fraction of the exchanged packets of a flow. The only requirement for the input data is that it should consist of a few consecutive packets that are gathered periodically. This makes the measurement algorithm a good candidate for inclusion in OS libraries to allow for advanced resource optimization and application-level traffic scheduling, based on current and predicted future user capacity.
               
            

@&#INTRODUCTION@&#

Even though spectrum efficiency is improving thanks to the fifth generation [1] of mobile networks, the wireless medium is becoming a scarcer and scarcer resource, due to the ever increasing demand for mobile communication. Recently, a number of papers addressed improved resource allocation mechanisms based on capacity prediction techniques. For instance, [2–4] propose to use resources when they are more abundant and cheap, and to refrain from or to limit communication when it is more expensive (e.g., lower spectral efficiency, higher congestion, etc.) by exploiting perfect knowledge of the future capacity.

In [5], we surveyed the state of the art on mobile capacity prediction techniques and built a model for both short and medium to long term prediction errors in order to be able to quantify the impact of prediction uncertainties in resource allocation. Most short term prediction techniques [6,7] rely on time series filtering solutions, such as moving average and autoregressive (ARMA) or autoregressive conditional heteroskedasticity (ARCH) modeling. Thus, in order to allocate resources on a given time granularity, prediction must be available with the same granularity and, consequently, mobiles must be able to measure capacity with the same granularity [8].

Mobile capacity measurement is a well investigated topic in the literature, but, to the best of our knowledge, no lightweight or passive technique allows mobiles to collect frequent measures of their capacity. To fill this gap, this paper proposes a simple technique which is able to measure the fast variations of the per user capacity and, from those, the expected end-to-end throughput.

In order to do so we adapt packet train dispersion techniques by applying an adaptive filtering mechanism, which we show is effective in removing the impact of outliers due to bursty arrival and jitter, which are very prevalent in mobile environments. We validate the effectiveness of the solution through extensive simulation and “real world” measurement campaigns: our technique can achieve an accurate throughput estimate with as few as 5% of the packets needed by other solutions, while making an error smaller than 20%.

Our goal is to provide a simple tool that evaluates passively or with minimum impact the per user capacity variations over time in a mobile environment. This enables filter based prediction techniques and, consequently, prediction based resource allocation optimization. Source code for the tool can be found in the repository of the EU project eCOUSIN.
                        1
                     
                     
                        1
                        
                           https://ecousin.cms.orange-labs.fr/sites/ecousin/files/lightmeasure.zip.
                     
                  

In the following sections we propose a lightweight measurement technique of the per user cell capacity. Our proposal adapts earlier packet train dispersion techniques and allows to collect reliable measurements on a mobile device despite the complexities introduced by the wireless link and the phone hardware. Also, we have evaluated our technique on both simulations and actual mobile network data collected during a measurement campaign.

The rest of the paper is structured as follows. Related work and some mobile network fundamentals are discussed in Sections 2 and 3, respectively. We present our measurement technique in Section 4, in Section 5 a first evaluation of our technique based on simulations, and in Section 6 we describe how we collected “real world” data to validate it. The results are discussed in Section 7. Finally, Section 8 summarizes our conclusions.

@&#RELATED WORK@&#

A number of approaches exist to estimate mobile capacity. The most popular of which is Ookla’s mobile application, Speedtest [9], which computes the maximum end-to-end throughput achievable by two long lived TCP connections with the closest measurement server (according to our tests the measurement lasts for either 20 s or after 30 MB have been downloaded, whichever happens first). Then, it derives throughput samples and aggregates them into 20 bins (each one has about 5% of the samples), applies some post processing to remove measurement artifacts and, finally, estimates the average of the bins. Huang et al. [10] proposed to use 3 parallel TCP connections in order to remove the effects of packet losses, TCP receive window limitations and overloaded servers, while ignoring any data collected during the slow-start phase of TCP. The calculated throughput is given by the median of the collected samples, in order to reduce the effect of outliers. Recently, Xu et al. [11] analyzed the use of UDP to compute the end-to-end throughput availability, also accounting for packet interarrival times and the impact of mobile scheduling. All these techniques are active, use long data transfers and thus, incur a high overhead.

Conversely, passive monitoring techniques aim at estimating similar information by analyzing ongoing mobile communications, without triggering any dedicated activity. Gerber et al. [12] achieved quite accurate results just by relying on selected types of applications (i.e., video streaming), which provide more reliable throughput measurements as they are more likely to exploit the full cell capacity. In order to study transport protocols in LTE, [13] developed a passive measurement scheme, which monitors the sending rate over a given time window that ensures the full exploitation of the capacity. PROTEUS [14] combines passive monitoring with linear prediction to estimate the achievable throughput. Other solutions worth mentioning in this category are [15], where the authors try to identify bottleneck links in the core network of an operator by conducting large scale passive measurements of TCP performance parameters and [16], where network “footprints” (generated by counting the number of packets and the number of retransmissions of all the users of a network) were used to identify capacity bottlenecks. However, these solutions cannot be directly applied to mobile phones. We conclude that none of the aforementioned solutions allow for frequent throughput measurements, nor do they provide estimates of the per user cell capacity on the client side (mobile device) to allow for effective capacity prediction and resource allocation.

Lai [17] attempts to actively measure the link capacity (which in [17] is called bandwidth) of a path by taking advantage of the packet pair property of FIFO-queuing networks. Dovrolis [18] further refines the packet pair technique and demonstrates that packet pair dispersion rate has a multimodal distribution, whose modes in turn depend on the capacity and the cross traffic at each of the links composing the sender-receiver path. Also, the authors devise a method to estimate the capacity of the bottleneck link in the path, based on the fact that the average throughput measured by packet trains converges to the asymptotic dispersion rate, from which an estimate of the bottleneck capacity can be computed. As we will discuss later though, it is unsuitable for use over mobile networks. CapProbe [19] proposed a technique based on packet pairs dispersion and delays to devise a reliable capacity estimation technique, aimed at mobile networks. Both techniques are meant to measure the capacity of the bottleneck link of a path. Instead, we are interested in measuring the per user capacity at a given moment.

We have recently proposed a passive technique that is able to provide an estimation of the per user capacity range by monitoring the packet arrival pattern that takes place during the TCP slow start phase [20]. In this current work, we are interested in a more accurate per user capacity measurement that is based on periodic samples of the exchanged traffic, taken during the whole duration of the flow.

In this section we provide a brief overview of the components and characteristics of mobile networks that have an effect on capacity measurement. In the rest of the paper, we will use terminology and network architecture components of LTE, but the ideas and the algorithm can be applied to any recent mobile network technology like 3G.

The user equipment (UE), which can be any device with mobile communication capabilities, connects to the operator network through any of the multiple base stations (BS) that the operator controls, as shown in Fig. 1
                     . BSs are in turn connected to the core network (CN) of the operator. This set of BS can be collectively called Radio Access Network (RAN). They form the interface between the UE and the operator.

The transmission of data from the BS to the multiple UEs connected to it is regulated by a scheduler, which periodically allocates resources and transmits packets to the associated UEs. This period, called Transmission Time Interval, (TTI) largely differs among mobile telecommunication systems, with more recent technologies having lower values. It can be as short as 1 ms for LTE or at least 10 ms for UMTS. Thus, the UEs receive data in a way such that a burst of data is transmitted to them, during TTIs in which they have been allocated resources and receive nothing during TTIs in which they have not been allocated resources. The scheduling process is usually based on a fairness scheme that takes into account the data requirements and channel quality of all the UEs served by the same BS. A very popular such scheme is the “proportionally fair” scheduling [21]. It tries to weight the past allocation of resources and the current potential throughput of all the competing users. This way it finds a balance between providing adequate resources to all users, regardless of their channel quality, and maximizing the overall throughput of the base station. Thus, in contrast to wired networks, which usually serve traffic based on a FIFO scheme, the incoming traffic at the antenna is distributed to user specific queues and the outgoing is shaped by the scheduler. So, the nature of the competing traffic (UDP/TCP or short/long flows) does not greatly affect the speed of each user. On the other hand, factors that may have an effect include policies (e.g., whether a user is a virtual or host network subscriber [22]) and the specific service that generates the traffic (e.g., VoLTE traffic has the highest priority in an LTE network).

When a packet is transmitted to a UE, it travels from the Internet to the operator’s core network which forwards it to the base station that the UE is connected to. The packet is then stored at the base station in a buffer dedicated to the recipient UE. The packet remains in the dedicated buffer until the scheduler decides to allocate resources to the recipient UE. Upon allocation and depending on the signal quality, it is either grouped alongside other packets present in the buffer to a Transport Block (TB) or, in cases of a bad signal and/or a small amount of allocated resources, a segment of it is encapsulated in a TB. The TB is then sent to the UE.

The mechanisms above are illustrated in Fig. 2
                     a, which shows the arrival of packets to an LTE smartphone, as captured by the sniffing tool tcpdump. In this experiment we are saturating the link and observe its behavior during TCP steady state. Note that the TTI of LTE is fixed to 1 millisecond. It is easily observable that the packets arrive in groups that have about the same duration as the TTI. Between these groups of packets, the smartphone is not allocated resources, thus nothing is received. The size and temporal spacing of the groups depend on the channel quality of the UE and the congestion level at the BS.

In our traces we frequently observed measurement artifacts that are unrelated to the scheduler and are due to the following reasons.

The servers that transmit data over TCP send bursts of packets to the client and wait for the related acknowledgments before sending more. This behavior is very prominent during the slow start phase of the transmission when the congestion window has small values. The gap in the transmission at the server side may cause an analogous gap in the transmission at the base station. During this time, the base station is not sending data to the recipient UE, because there are not data in the dedicated buffer. This is visible in Fig. 2b, which illustrates the delivery of the first packets of a TCP flow over LTE. In two occasions, consecutive TBs are received with a delay on the order of tens of ms. We also observe in this example, that the total number of packets delivered in the groups that arrive at about 75 ms is bigger than the number of packets in the first set of groups (the second group has just one packet) at 0 ms. This is caused by the exponential growth of the congestion window. Eventually, the congestion window is large enough that the we observe a continuous stream of incoming packets and this effect diminishes. Since the Round Trip Time (RTT) is larger in 3G networks, the impact of this TCP behavior is slightly more pronounced.

IP packets arrive at the UE as part of a TB alongside other IP packets. An ideal method to measure the downlink speed then would require the registering of the exact size and timestamp of each TB. However, this is unfeasible. The related information is only available at the eNodeB, to which a client side tool as the one we propose has no access, or at the Network Interface Card (NIC) of the mobile device. Accessing such NIC information would require specialized drivers, that vendors are very hesitant to release for public usage. The lowest level from which we can extract network information is the kernel, where we register the time and size of all the IP packets. Thus, our view of the network is limited to what is known to the kernel. The exact timing of packet arrivals at the kernel is affected by the capabilities of the phone and the capture software.
                              2
                           
                           
                              2
                              
                                 http://www.tcpdump.org/faq.html#q8 [Last accessed: February 2016].
                            Usually packets are registered at the kernel with a noticeable delay, compared to their arrival at the NIC. In [23] the delay between the WiFi interface and the kernel is measured, which the authors believe should be comparable with the “Mobile NIC-kernel” delay. They note that the TCP data packets, the packets we are interested in, have the lowest possible delay, compared to ICMP and other TCP packets. The delay, which depends on the NIC ranges from being insignificant to being a few ms. According to [11], both delays are related to the polling frequency of the NIC from the OS.

We have conducted a small scale experiment to assess the effect of polling on several phones, when both the WiFi and the LTE interface are used. When the LTE interface is active, packets are reported in groups similar to the ones visible in Fig. 2a, in all of the phones. The pattern is always similar with some minor variations on the size and spacing of the groups, depending on how powerful the hardware is. For the WiFi experiment we use 802.11g without packet coalescing, to ensure that each MAC frame encapsulates exactly one IP packet and there is no grouped transmission of packets. We also set up a sniffer, which provides more accurate timestamps to monitor the exchanged traffic and provide the groundtruth. In Fig. 2d and e, we show the traces captured by the sniffer and the phones during high speed downloads. We observe that different phones may exhibit a very different behavior. The sniffer always reports a continuous delivery of packets “in the air”. Some phones report the packets in the same grouped fashion as above, whereas others report continuous delivery of packets. Based on these observations, we conclude that the pattern of packet arrival on WiFi seems to be greatly dependent on the phone specifications. The arrival pattern in the LTE case is determined by the grouped delivery of packets in the physical layer, but the timestamping accuracy of each packet is related to the phone hardware. More powerful phones are less affected by the polling problem, but even in this case, the delay shows slight variations. Since this delay is very small, it is not significantly affecting our technique, whose adaptive and statistical nature tries to countermeasure it.

It is quite common for packets to be delivered to the phone but not delivered to the higher layers until several milliseconds later, alongside all the other packets that have been received in the meantime. This is usually observed in cases of high capacity and/or high CPU utilization. This behavior is very evident in Fig. 2, which depicts the TCP steady state of a 3G download. According to the server side trace of this download, the server transmitted all the packets that are visible in the figure almost “back-to-back”. Also, the phone trace showed a steady rate in the delivery of packets. But at times 5175 and 5215 ms we observe a gap in the delivery of packets and then the delivery of an impossibly large group. Packets were actually delivered during these gaps, but were registered all together when the CPU was able to process them.

We have noticed that when a UE may achieve very high speed, there is a significant difference in the arrival rate of the first few hundred packets of a flow and the arrival rate of the rest of that flow’s packets. The difference is present even if we take into account the reduced rate of the slow start phase of TCP, in case the flow is TCP. We have observed this phenomenon in traces gathered in the networks we used to evaluate our tool, as well as other European mobile networks. In order to get more insight, we have done a small experiment in a Spanish LTE network, where we send constant bit-rate UDP traffic and monitor the arrival rate as reported by the mobile. When the server transmits traffic at a rate smaller than 25 Mbps, there is no difference in the arrival rate at different parts of the flow. If the rate of the server is higher than 25 Mbps, the first part of the flow (usually the first 150 to 300 packets) has an arrival rate 25–50% lower compared to other parts of the same flow. For the flow presented in Fig. 2, the arrival rate of the packets located on the left side of the vertical line (first 178 packets) is almost half the rate of the rest of the packets on the right side of the vertical line. If the transmission pauses for a few tens of ms, the same effect is observed upon restart. Even though we did not perform a dedicated experiment for a 3G network, our traces indicate that this phenomenon is even more prominent in 3G. An independent team of researchers [24], who conducted measurements in the same German network we used to collect our traces, observed that the first packets of a flow experience a considerably higher delay compared to the rest, when the rate at the server is higher than 20 Mbps. This effect causes reduced speed during the first part of the flow. While we are unable to investigate this phenomenon further, due to we lack of physical layer or mobile network specific information, we believe that it can be attributed to an operator configuration.

The previous characteristics of mobile networks and phone hardware make the use of traditional packet pair techniques infeasible. Any two packets that would make a packet pair are in either of the following cases.


                        Transmitted in the same TB. In this case the packets arrive more or less at the same time to the UE, since all the information included in the TB is transmitted in parallel using multiple carrier frequencies. The lower protocol layers of the UE ensure that they are delivered to the higher layers in the right order, while also assigning them slightly different timestamps. Consequently, sniffing tools like tcpdump perceive them as arriving with a tiny time difference, in the order of a few hundreds of microseconds. A capacity estimation based on these packet pairs would greatly over-estimate the real value of the capacity.


                        Transmitted in different TBs. In this case, the packet pair consists of the last packet of a TB and the first packet of the following TB. Thus, the capacity value is greatly underestimated, since the measured dispersion is the dispersion between the TBs and each TB is very likely to be able to encapsulate more than one IP packet, which is not reflected in the measurement. If there is exactly one packet per TB, then an accurate estimation is possible, but we observed that in the majority of the cases each TB contains multiple packets.

Packet trains are also problematic. They cannot be used in a passive scenario because the server transmits packets on the receipt of ACKs and the application requirements, so the trains will have variable length. The number of packets in each TB may be different, which results in similar problems to the ones described in the “packet pair” scenario. On some occasions all the packets will be transferred in the same TB and on others in multiple TBs.

It is clear that long-established packet dispersion techniques that were developed to detect the bottleneck link capacity in wired networks are not suitable for mobile networks, especially in regards to detecting the per user capacity. In the sequel, we will present the necessary modifications to this approach for it to provide reliable capacity estimations in mobile scenarios.

In the literature, the term “link capacity” refers to the transmission rate of a link, “path capacity” is the minimum transmission rate among all the links of the path and finally “link available bandwidth” refers to the spare link capacity (capacity not used by other traffic) [18]. Instead, we are interested in estimating the maximum capacity that the scheduler of an eNodeB could allocate to a target user if he requested saturation traffic under a specific bearer. This metric is specific to cellular networks, we call it “per user capacity” and we symbolize it as CU
                     . For brevity, in the rest of the paper we refer to it as “capacity”. To the best of our knowledge, traffic flow templates are not used for generic browsing and multimedia traffic, which is the scope of this work. Thus, we can safely assume that all the measured traffic is using the default bearer, allowing us to ignore this variable. As we will analyze in the sequel, in practice, the measured CU
                      will often be less than the maximum capacity a user could be allocated. For this reason, the measured value represents the greatest lower bound of the user’s capacity. We will show that this value is very close to the actual maximum, thus causing a slight underestimation of the true maximum per user capacity.

The wireless link is the last hop of a downlink path and the CU
                      of all the connected users is dependent on the cell congestion, the channel quality, the channel’s bandwidth and the scheduling algorithm. It is usually the link of a path with the lowest capacity, that also contributes the most to the delay. On the other hand, the average end-to-end TCP throughput R, depends on the capacities and the cross traffic of all the links in the path, as well as possible rate adaptations at the server side, caused by the TCP mechanisms. The end-to-end TCP throughput is primarily determined by the link with the minimum spare link capacity, which in a mobile scenario is usually the RAN. We are interested in measuring CU
                     , since it is the metric that affects all the connections that the user is going to have in the future and is usually the bottleneck.


                     Fig. 3
                      illustrates the packet dispersion due to the transmission over links at different link capacities. This example is based on LTE, but similar effects are observed in various mobile technologies. Initially, (1) the server sends a burst of IP packets (A-H in the example) back to back. The number of packets in the burst varies since it depends on a number of factors like the state of TCP connection, the specifics of the application and the server that generates it. Subsequently, (2) the base station (eNodeB) receives the packets, which have suffered variable delays due to the different link capacities and cross traffic encountered along the path. When the scheduler allocates a TB (marked with horizontal arrows in the plot) to the receiving UE (3), as many packets as possible are encapsulated in it. Therefore, all the packets that are scheduled together arrive within the same TTI at the UE. As a consequence, the inter-packet interval can be greatly reduced (packets A and B) or greatly magnified (packets B and C).

Considering the set of “back-to-back” transmitted packets crossing the path in Fig. 3, we can distinguish their arrival rate RA
                      at the antenna from their transmission rate from the antenna to the user, which can have a maximum value of CU
                     . Both metrics are dynamic and are affected by the same parameters that affect R. Thus, if we sample them for a specific period of time, we may notice the following relationship between them. If RA
                      > CU
                     , the set of packets arrives at the BS with a delay which is inversely proportional to RA
                      and shorter than the average time needed for the BS to serve all but the last packet. Since the arrival rate is higher than the departing rate at the base station, the dispersion of the set is caused by the last link. Also, depending on the scheduling strategy, the set may be served within the same transport block or multiple transport blocks by the BS. Conversely, if RA
                      < CU
                      the set of packets arrives at the BS separated by a delay which is longer than the average serving time of the BS. We thus have three cases (excluding the problematic cases of Section 3):

                        
                           (i)
                           Bursty arrival [11,13] (e.g.: set of packets E-F), if RA
                               > CU
                               and packets are in the same transport block.

Wireless link capacity, if RA
                               > CU
                               and packets are in different transport blocks (e.g.: set of packets A-D).

The bottleneck link being in the server-BS path and/or the server transmitting at a very low rate (e.g. TCP slow start), if RA
                               < CU
                              .

In order to estimate CU
                     , we have to filter both i) and iii) cases, as well as take into account the behavior of sets of packets when transmitted over mobile networks as presented in Section 3. In brief, our approach has two components: (a) generating capacity estimation samples which are not significantly affected by the above and (b) the statistical processing of those samples in order obtain a CU
                      value.

The input data for our passive measurement tool are the timestamps and sizes of all the received data packets of a smartphone. We ignore packets related to connections establishment such as TCP and TLS handshakes, since they can not saturate even momentarily the wireless link. This information can be collected on the OS level by monitoring the stack. In our experiments, we use rooted Android smartphones and tcpdump to capture all the incoming traffic. Ultimately this functionality could be included in the mobile OS as an on-demand lightweight measurement service.

We consider a set of N packets sent from a server and received at the UE so that the ith packet is received at time ti
                        , with 
                           
                              i
                              =
                              {
                              1
                              ,
                              ⋯
                              ,
                              N
                              }
                           
                        . A key metric used by our algorithm is the “inter-packet interval”, the time difference between the arrival of two consecutive packets (
                           
                              
                                 t
                                 
                                    i
                                    +
                                    1
                                 
                              
                              −
                              
                                 t
                                 i
                              
                           
                        ). Obviously, in a group containing N packets, there are 
                           
                              N
                              −
                              1
                           
                         intervals. W represents the unit-less number of such intervals that we take into account when we generate the capacity estimation samples. For each packet in the set we define the dispersion time 
                           
                              
                                 d
                                 W
                              
                              
                                 (
                                 i
                                 )
                              
                              =
                              
                                 t
                                 
                                    i
                                    +
                                    W
                                 
                              
                              −
                              
                                 t
                                 i
                              
                              ,
                           
                         and the per user capacity sample 
                           
                              
                                 c
                                 W
                              
                              
                                 (
                                 i
                                 )
                              
                              =
                              
                                 (
                                 
                                    ∑
                                    
                                       j
                                       =
                                       i
                                    
                                    
                                       i
                                       +
                                       W
                                       −
                                       1
                                    
                                 
                                 
                                    L
                                    j
                                 
                                 )
                              
                              /
                              
                                 d
                                 W
                              
                              
                                 (
                                 i
                                 )
                              
                              ,
                           
                         for a given value of W, where Li
                         is the length of ith packet.

In detail, the cW
                        (i) value of packet i is derived by adding the sizes of W consecutive packets, starting from i and then dividing by the time duration of W consecutive inter-packet intervals, starting from 
                           
                              [
                              
                                 t
                                 
                                    i
                                    +
                                    1
                                 
                              
                              −
                              
                                 t
                                 i
                              
                              ]
                           
                        . Packet 
                           
                              i
                              +
                              W
                           
                         contributes only to the denominator. For example, in Fig. 3, 
                           
                              
                                 c
                                 
                                    W
                                    =
                                    2
                                 
                              
                              
                                 (
                                 A
                                 )
                              
                           
                         is computed by dividing the sum of sizes of the packets A and B by the dispersion time 
                           
                              
                                 d
                                 
                                    W
                                    =
                                    2
                                 
                              
                              
                                 (
                                 A
                                 )
                              
                              =
                              
                                 t
                                 C
                              
                              −
                              
                                 t
                                 A
                              
                           
                        .

The three arrival cases above contribute to the distribution of the capacity samples in different ways. Arrivals of type (i) cause a tiny dW
                         and, thus, skew the distribution to the right (over-estimation of CU
                        ). At the same time, type (iii) events, which show larger dW
                         (under-estimation of CU
                        ) skew the distribution towards the left. To better visualize what is discussed next, Fig. 4
                         shows a set of scatterplots of cW
                         and histograms of its distribution computed on a single download performed using the Speedtest application [9] over a HSPA connection. The X-axis of the scatterplots represents the arrival time of packet i and the Y-axis its cW
                         value.

The impact of type i) arrivals can by limited by setting W appropriately. The idea is to include in each measurement packets belonging to different TBs in order to make sure that the highest throughput cW
                         we can measure is only related to the cell capacity and not to bursty packet arrivals, as it would have happened had we chosen 
                           
                              W
                              =
                              1
                           
                         in the example of Fig. 3. In order to achieve that, it is sufficient to study groups that, starting from any packet i, contain Wi
                         intervals so that the minimum dispersion time dW
                        (i) is longer than the maximum TTI of the scheduler, abbreviated tS
                        :

                           
                              (1)
                              
                                 
                                    
                                       W
                                       i
                                    
                                    =
                                    
                                       {
                                       min
                                       
                                          (
                                          W
                                          )
                                       
                                       
                                       |
                                       
                                       
                                          min
                                          W
                                       
                                       
                                          (
                                          
                                             d
                                             W
                                          
                                          
                                             (
                                             i
                                             )
                                          
                                          )
                                       
                                       >
                                       
                                          t
                                          S
                                       
                                       }
                                    
                                 
                              
                           
                        This guarantees that at least two packets within the Wi
                         window are scheduled in two different transport blocks, since 
                           
                              
                                 t
                                 
                                    i
                                    +
                                    
                                       W
                                       i
                                    
                                 
                              
                              −
                              
                                 t
                                 i
                              
                              =
                              
                                 d
                                 
                                    W
                                    i
                                 
                              
                              
                                 (
                                 i
                                 )
                              
                              >
                              
                                 t
                                 S
                              
                           
                        . In other words, we are averaging the burstiness over two transport blocks. An effect of Eq. (1) is that each packet i has a different Wi
                         value, depending on the spacing of packets that were received after it.

It is important to select the minimum value of W for the creation of the 
                           
                              c
                              
                                 
                                    W
                                    i
                                 
                                 
                                    (
                                    i
                                    )
                                 
                              
                           
                         value for packet i that has the property 
                           
                              min
                              
                                 (
                                 
                                    d
                                    
                                       W
                                       i
                                    
                                 
                                 
                                    (
                                    i
                                    )
                                 
                                 )
                              
                              >
                              
                                 t
                                 S
                              
                           
                        . As discussed in Section 3, the “slow start” behavior of TCP introduces noticeable gaps in packet delivery. Thus, samples that include these gaps in their calculation of dW
                        , generate cW
                         values that are significantly smaller and not representative of the CU
                        . A high value of W increases the probability of a sample to include such gaps.

Now that type (i) events are filtered, we ensure that each set spans across at least two TBs. The minimum dispersion time 
                           
                              min
                              
                                 d
                                 
                                    W
                                    i
                                 
                              
                              
                                 (
                                 i
                                 )
                              
                           
                         for every packet i of the flow cannot be smaller than the minimum time needed for a set of packets to cross the wireless link, which corresponds to the maximum per user cell capacity. Thus, CU
                         can be found as the maximum of the distribution of cW
                        , which is equivalent to the maximum value of cW
                        .

                           
                              (2)
                              
                                 
                                    
                                       C
                                       U
                                    
                                    =
                                    
                                       max
                                       
                                          i
                                          ∈
                                          [
                                          1
                                          ,
                                          ⋯
                                          ,
                                          P
                                          ]
                                       
                                    
                                    
                                       c
                                       
                                          W
                                          i
                                       
                                    
                                    
                                       (
                                       i
                                       )
                                    
                                 
                              
                           
                        
                        P is the total number of data packets of a flow. Note that, with Eq. (1) we are filtering the effect of type (i) arrivals (min ) and with Eq. (2) the delays introduced by type (iii) arrivals (max ).

Ideally, we would like to sample cW
                         until its distribution is stable, but CU
                         is varying because of both user movements and fast fading. Hence we can only obtain an estimate CU
                        
                        (p) of it from a set of p consecutive estimation samples, where p < P. Although estimating the distribution from a limited number of samples reduces the accuracy of our measurement, we can at least guarantee that we are not overestimating CU
                        :

                           
                              (3)
                              
                                 
                                    
                                       
                                          
                                             C
                                             U
                                          
                                       
                                       
                                          (
                                          p
                                          )
                                       
                                    
                                    =
                                    
                                       max
                                       
                                          i
                                          ∈
                                          [
                                          1
                                          ,
                                          ⋯
                                          ,
                                          p
                                          ]
                                       
                                    
                                    
                                       c
                                       
                                          W
                                          i
                                       
                                    
                                    
                                       (
                                       i
                                       )
                                    
                                    ≤
                                    
                                       max
                                       
                                          i
                                          ∈
                                          [
                                          1
                                          ,
                                          ⋯
                                          ,
                                          P
                                          ]
                                       
                                    
                                    
                                       c
                                       
                                          W
                                          i
                                       
                                    
                                    
                                       (
                                       i
                                       )
                                    
                                    =
                                    
                                       C
                                       U
                                    
                                 
                              
                           
                        This follows from the probability of the distribution of a sampled random process to contain the maximum of the theoretical distribution of the process, which is increasing with the number of collected samples:

                           
                              (4)
                              
                                 
                                    
                                       lim
                                       
                                          p
                                          →
                                          ∞
                                       
                                    
                                    
                                       
                                          
                                             C
                                             U
                                          
                                       
                                       
                                          (
                                          p
                                          )
                                       
                                    
                                    =
                                    
                                       C
                                       U
                                    
                                 
                              
                           
                        
                     

This section describes the feasibility of lightweight active and passive measurements of per user capacity CU
                         based on dispersion samples of packet sets. It also explores the effect different values of some parameters have on our technique. We compute the dispersion time by using an adaptive window Wi
                         intervals long for every packet i such that:

                           
                              (5)
                              
                                 
                                    
                                       W
                                       i
                                    
                                    =
                                    
                                       {
                                       min
                                       
                                          (
                                          W
                                          )
                                       
                                       
                                       |
                                       
                                       
                                          t
                                          
                                             i
                                             +
                                             W
                                          
                                       
                                       −
                                       
                                          t
                                          i
                                       
                                       >
                                       
                                          t
                                          T
                                       
                                       }
                                    
                                    ,
                                 
                              
                           
                        where 
                           
                              
                                 t
                                 T
                              
                              ∈
                              
                                 [
                                 1
                                 ,
                                 ⋯
                                 ,
                                 50
                                 ]
                              
                           
                         ms, for all the values of tT
                        . The estimation sample of the ith
                         packet is composed of all packets following i until the first packet which arrived at least tT
                         ms later than i. This allows to satisfy Eq. (1) a posteriori if the TTI duration is not known.

We exemplify the dispersion time in Fig. 4 based on data obtained by time-stamping the arrival time of the packets of a 6 MB HSPA download. The figure presents the evolution of the scatterplots of cW
                         and the corresponding histograms of the cW
                         distribution for various characteristic values of tT
                        .

During the slow start phase of a TCP connection an increasing number of packets are sent back to back from the server, and after a few RTTs the congestion window is large enough to allow the transmission of packet trains long enough to measure capacity as high as 100 Mbps. In fact, CU
                         should be proportional to the maximum number of packets that can be scheduled in a single transport block and, if Eq. (1) is satisfied and tT
                         > tS
                        , the impact of outliers due to bursty arrivals is removed. With reference to Fig. 4, it can be seen that the maximum of cW
                         is approaching a stable value of about 10 Mbps when tT
                         ≥ 15 ms. Due to limited space, we do not present the related plots of other downloads. Based on the rest of our dataset, a stable value is reached for values of tT
                         between 10 and 20 ms.

Moreover, Fig. 5
                         shows the stability of the maximum of the capacity by plotting the ratio Δ(tT
                        ), computed between the maximum value obtained with windows of [tT
                        ] and 
                           
                              [
                              
                                 t
                                 T
                              
                              −
                              1
                              ]
                           
                        :

                           
                              (6)
                              
                                 
                                    Δ
                                    
                                       (
                                       
                                          t
                                          T
                                       
                                       )
                                    
                                    =
                                    
                                       
                                          
                                             |
                                          
                                          
                                             C
                                             
                                                
                                                   W
                                                   |
                                                
                                                
                                                   t
                                                   T
                                                
                                             
                                          
                                          −
                                          
                                             C
                                             
                                                
                                                   W
                                                   |
                                                
                                                
                                                   t
                                                   T
                                                
                                                −
                                                1
                                             
                                          
                                          
                                             |
                                          
                                       
                                       
                                          C
                                          
                                             
                                                W
                                                |
                                             
                                             
                                                t
                                                T
                                             
                                             −
                                             1
                                          
                                       
                                    
                                 
                              
                           
                        Ideally, the ratio Δ(tT
                        ) should stabilize to 0 as soon the scheduling outliers are filtered (tT
                         > tS
                        ) and further increasing tT
                         should only make the distribution smoother. However, in actual experiments increasing tT
                         makes it more difficult to obtain a sample of the maximum capacity which is consistent over different transport blocks. In this preliminary example, we can see that Δ(tT
                        ) becomes stable for tT
                         > 20 ms, which is in line with the HSPA TTI of 2–10 ms.

Next, we divide the time duration of a download into fixed sized bins. We apply the above method taking into account only a percentage 
                           
                              f
                              =
                              k
                              /
                              K
                           
                         of consecutive capacity samples in each bin. In this case, K is the total number of samples inside each bin and k is the number of consecutive samples that we consider for every bin. Fig. 6
                         shows the coefficient of variation of the normalized root mean square error – CV(NRMSE) – of the estimate ε
                           C
                        , by varying f:

                           
                              (7)
                              
                                 
                                    
                                       
                                          ɛ
                                       
                                       C
                                    
                                    =
                                    
                                       
                                          
                                             
                                                ∑
                                                bins
                                             
                                             
                                                
                                                   (
                                                   
                                                      
                                                         C
                                                      
                                                      
                                                         (
                                                         k
                                                         )
                                                      
                                                   
                                                   −
                                                   
                                                      
                                                         C
                                                      
                                                      
                                                         (
                                                         K
                                                         )
                                                      
                                                   
                                                   )
                                                
                                                2
                                             
                                          
                                          
                                             
                                                N
                                                b
                                             
                                             E
                                             
                                                
                                                   [
                                                   
                                                      
                                                         C
                                                      
                                                      
                                                         (
                                                         K
                                                         )
                                                      
                                                   
                                                   ]
                                                
                                                2
                                             
                                          
                                       
                                    
                                    ,
                                 
                              
                           
                        where Nb
                         is the number of bins in a flow. The computations have been repeated for different bin sizes varying in {1, 0.5, 0.2, 0.1} seconds (dotted, dash-dotted, dashed and solid lines, respectively). It can be seen that the error decreases below 20% when more than 20% of the samples are used.


                        Fig. 6 can also be interpreted as the width of the probability distribution of having an exact measurement using f% of the samples. In particular, it is easy to see that when we use all the samples, the distribution should collapse into a delta function (zero width), while the fewer samples we use, the wider the distribution. The real value can only be larger than the measured one, because of Eq. (3) that shows 
                           
                              
                                 max
                                 
                                    i
                                    ∈
                                    [
                                    1
                                    ,
                                    ⋯
                                    ,
                                    k
                                    ]
                                 
                              
                              
                                 c
                                 
                                    W
                                    i
                                 
                              
                              
                                 (
                                 i
                                 )
                              
                              ≤
                              
                                 max
                                 
                                    i
                                    ∈
                                    [
                                    1
                                    ,
                                    ⋯
                                    ,
                                    K
                                    ]
                                 
                              
                              
                                 c
                                 
                                    W
                                    i
                                 
                              
                              
                                 (
                                 i
                                 )
                              
                           
                        . Thus, this distribution has non-zero width for values smaller than the actual measurement only.

To complete this preliminary evaluation of our measurement technique, Fig. 7
                         shows the variation of the per user capacity CU
                        
                        (K)(t) measured every 500 ms and its estimates CU
                        
                        (k)(t) computed with 
                           
                              f
                              =
                              k
                              /
                              K
                              =
                              {
                              10
                              ,
                              20
                              ,
                              50
                              ,
                              100
                              }
                           
                         % (dotted, dash-dotted, dashed and solid lines, respectively). Although with 10% of samples the estimates are quite different from the actual capacity values, we will be showing next that it is possible to exploit these coarse estimates to obtain a sufficiently accurate capacity estimate.

We have performed an extensive simulation campaign in order to evaluate our proposed technique in a controlled environment. We use a modified version of ns-3.23 [25] and its LTE module LENA [26]. We focus on LTE due to its increasing popularity. In all simulations the monitored user uses TCP, since it is both the most challenging and the most popular [13] transport layer protocol of mobile phones. The variable parameters of the simulations are presented in Table 1
                     . The fixed parameters are: (1) the simulation lasts for 22 seconds and (2) the BS uses a proportionally fair scheduler. For each set of parameters we run the simulation multiple times with a different seed, generating in total 18,570 flows.

Next we investigate the effect of polling on the accuracy of the measurements. The simulation results do not suffer from polling, thus the packet arrival time reported in the logs is the actual arrival time at the NIC. In order to simulate the polling effect we manipulate the logs so that we check for incoming packets every tP
                      ± 10%, where tP
                      ∈ [1, 3, 10, 30, 100] ms. We add the 10% deviation in the timing of each polling because based on our traces and the literature, polling does not have a fixed frequency. We also add a tiny inter-packet delay (in the range of 0.1 ms) between the packets that are reported together by the polling function, in a fashion similar to the one we observe in our “real life” traces. Please note that the polling delay (if present) is usually within 10 ms under normal circumstances.


                     Fig. 8
                      shows the CV(NRMSE) ε
                        P
                      between traces that have the original timestamps and processed ones. We calculate the ε
                        P
                      as we did for the ε
                        C
                      in Eq. (7).

                        
                           (8)
                           
                              
                                 
                                    
                                       ɛ
                                    
                                    P
                                 
                                 =
                                 
                                    
                                       
                                          
                                             ∑
                                             bins
                                          
                                          
                                             
                                                (
                                                
                                                   
                                                      C
                                                   
                                                   
                                                      (
                                                      
                                                         t
                                                         P
                                                      
                                                      )
                                                   
                                                
                                                −
                                                
                                                   
                                                      C
                                                   
                                                   
                                                      (
                                                      0
                                                      )
                                                   
                                                
                                                )
                                             
                                             2
                                          
                                       
                                       
                                          
                                             N
                                             b
                                          
                                          E
                                          
                                             
                                                [
                                                
                                                   
                                                      C
                                                   
                                                   
                                                      (
                                                      0
                                                      )
                                                   
                                                
                                                ]
                                             
                                             2
                                          
                                       
                                    
                                 
                              
                           
                        
                     It can be seen that the error is at most 20% for most cases (up to 10 ms of delay).

Subsequently, we examine how the combination of sampling only 5% of the available estimators and polling affects the accuracy of the results. We divide every flow to 100 ms bins and for every bin we calculate the CU
                     
                     (100%) and the CU
                     
                     (5%) for various tP
                      values. The speed of each flow is the average of the measured capacity of all its bins E[CU
                     
                     (k)]. As a groundtruth, against which we compare the rest of the results, we suppose the case where 
                        
                           
                              t
                              P
                           
                           =
                           0
                        
                      (ideal polling) and 
                        
                           k
                           =
                           K
                        
                     . Fig. 9
                      depicts the Empirical CDF of the percent Deviation DS
                      computed by the formula:

                        
                           (9)
                           
                              
                                 
                                    D
                                    S
                                 
                                 =
                                 
                                    
                                       
                                          |
                                       
                                       
                                          E
                                          
                                             [
                                             
                                                
                                                   
                                                      C
                                                      U
                                                   
                                                
                                                
                                                   
                                                      (
                                                      5
                                                      %
                                                      )
                                                   
                                                   
                                                      (
                                                      
                                                         t
                                                         P
                                                      
                                                      )
                                                   
                                                
                                             
                                             ]
                                          
                                          −
                                          E
                                          
                                             [
                                             
                                                
                                                   
                                                      C
                                                      U
                                                   
                                                
                                                
                                                   (
                                                   100
                                                   %
                                                   )
                                                   (
                                                   0
                                                   )
                                                
                                             
                                             ]
                                          
                                       
                                       
                                          |
                                       
                                    
                                    
                                       E
                                       [
                                       
                                          
                                             
                                                C
                                                U
                                             
                                          
                                          
                                             (
                                             100
                                             %
                                             )
                                             (
                                             0
                                             )
                                          
                                       
                                       ]
                                    
                                 
                              
                           
                        
                     By comparing the ideal line of 
                        
                           
                              t
                              P
                           
                           =
                           0
                        
                      with the rest, we conclude that even though polling does have a negative effect in the measurements, the dominant cause of error is the sampling. Also, we observe that for the most common tP
                      values (tP
                      < 10 ms) the deviation for 90% of the cases is less than 30%.

In order to validate our measurement technique over many different “real life” scenarios and configurations, we organized a measurement campaign that covers two cities in two different countries, Darmstadt (Germany) [27] and Madrid (Spain), for 24 h a day lasting 7 days. During this time, 5 people per city moved around as they normally do, carrying one measuring device each and performing their usual tasks involving mobile networking on the measuring devices. In order to be able to compare results of both passive and active measurements, we also perform automated periodic file downloads.

All the devices were running a simple Android application, which was periodically sampling the available capacity by starting two download types: short downloads of 500 KB to study the TCP slow start phases and long downloads of 2 MB to measure TCP steady state throughput. The two types were organized in a sequence with a long download, preceded by two small downloads and later succeeded by another two. We use tcpdump on the measurement devices to monitor the arrival time and size of all incoming packets. The download sequence was repeated every 50 min. Additionally, we log other related phone parameters: GPS, cell ID, Channel Quality Indicators (ASU, dBm) and network technology (2G, 3G, LTE).

The phones used in the campaign were the following: 5 Nexus 5, located in Germany, and 4 Sony Xperia Miro and 1 Samsung Galaxy S3, located in Spain. Also, while the Nexus 5 phones are LTE capable, the other phones only support radio technologies up to HSPA.

@&#RESULTS AND DISCUSSION@&#

We verified our measurement technique by analyzing more than 3000 unique TCP flows extracted from the communication of the phones participating in the campaign. As before, we split each flow into 100 ms bins and calculate the CU
                     
                     (100%) and CU
                     
                     (5%) metrics, and assume that their average is the speed of each flow. Note that in these measurements we neither have control over the polling, nor we can distinguish it from the scheduling behavior.


                     Fig. 10
                      shows a scatterplot where the abscissa and the ordinate of each rectangular point are the sampled and non-sampled versions of CU
                     , respectively. Further we add in the same plot the related simulation results for 
                        
                           
                              t
                              P
                           
                           =
                           3
                        
                      ms as diamonds. As expected from Eq. (3) all the data points are above the 
                        
                           y
                           =
                           x
                        
                      line. Thus, we verify that our algorithm may only underestimate the capacity. The fact that all the points are so close to the 
                        
                           y
                           =
                           x
                        
                      line proves that the values derived by just 5% of the samples are good estimators of CU
                     
                     (100%). As a consequence, this measurement can be safely used as a lower bound in resource optimization problems. We also plot the linear regression of only the actual measurement results as a dashed line. The regression line would allow us to build an even better estimator with lower error.

The figure is plotted in double logarithmic scale in order to emphasize that the relationship between CU
                     
                     (100%) and CU
                     
                     (5%) can be observed over all the measured connection rates and there is an almost constant ratio between the estimate and the actual value. Although outliers are visible, we can obtain quite an accurate estimate of CU
                      by exploiting as few as 5% of the packets sent during a TCP connection. This allows for quite an effective passive monitoring technique as, even by monitoring small data exchanges, it is possible to obtain frequent and accurate mobile per user capacity measurements necessary for user throughput prediction and resource allocation. The linear regression line seems to deviate from the measurement “cloud” for low values of capacity, because of the double logarithmic scale used in the plot, which highlights the regression offset for low values (500 Kbps and less). Further, we observe that for high values, the regression line has an almost fixed vertical distance from the 
                        
                           y
                           =
                           x
                        
                      line (constant percentage error). This represents the error of the estimate and, since it is constant, in the double logarithmic plot, appears as a fixed deviation on the y-axis from the 
                        
                           y
                           =
                           x
                        
                      line.

Unfortunately, using very low rate background traffic is impossible. The rates of such traffic are on the order of 4 packets over 100 ms, which do not allow for reliable capacity measurements. Also, a big number of the APPs use the Google Cloud Messaging (GCM) service, which minimizes their notification related traffic. In the case of GCM, if there is an update a few packets are sent just to generate a notification. When the user interacts with the notification, a larger number of packets are downloaded. In this scenario, we can use that download to get an estimation.

In the experiments, we use rooted Android phones and tcpdump to perform the measurements. Given the very low complexity and resources that are required by our approach, the CU
                      estimation is generated at virtually no cost. Therefore, we believe that it may be included in the OS as a service to applications that may opt-in to use it. For example, the flow-id, the timestamp and the size of a packet could be registered as part of the standard kernel packet processing procedure. Since these values do not contain any sensitive information, there are no privacy concerns and after a short period to time, when this information is irrelevant it can be deleted. Upon application request, the OS could generate a CU
                      estimation, if there are sufficient data stored. The knowledge of the flow-id can help distinguish the state of a TCP flow (slow-start, steady-state etc.). If it is possible to use small values of tT
                     , it is possible to generate accurate estimators even during the late part of slow start, when the congestion/receive windows have relatively high values, since then the dispersion time can be smaller than the time required by the antenna to transmit a server burst. In case of a TCP flow that stops very early, it can be difficult to remove both the slow start and the scheduling artifacts. In such cases, the resulting value will be significantly lower than the truth, but this is easy to detect and filter (e.g., requiring a flow to generate at least 75 downlink packets in order to be used).

As a side note, our technique is also able to estimate fast per user capacity variations. However, it obtains a lower accuracy since a larger fraction of samples are needed to estimate the maximum of the cW
                      distribution. Nonetheless, it is often sufficient to use 20% of the samples collected in a bin to achieve a reasonable estimate of CU
                     . In fact, with the smallest bin size and as few as 20% of the samples have an error ε
                        C
                      < 0.2, which means the actual capacity should not be larger than 120% of the estimated value.

In addition, tT
                      must be taken slightly longer than the TTI to avoid the measurement being impacted by many bursty arrivals. In line with Eq. (1) of Section 4, Δ(tT
                     ) approaches zero for tT
                      > 15 ms for most of the recorded flows.


                     Fig. 11
                      shows the CV(NRMSE) for various combinations of tT
                      and f of the measurement campaign flows. The bin size is set to 200 ms to give an example of this technique’s results when it collects very frequent measurements. As expected ε
                        C
                      decreases when tT
                      and f increase. For values of tT
                      ≥ 15 ms and f ≥ 20%, the error is small enough for the model to give trustworthy results (ε
                        C
                      ≤ 15%).

Finally, Table 2
                      shows some of the overall evaluation of the traces obtained by the measurement campaign with 
                        
                           f
                           =
                           25
                        
                     % averaged over the bin size and using the optimal tT
                      (min tT
                     |Δ(tT
                     ) → 0). Optimal tT
                      and CU
                      are computed as described in Section 4 and then averaged over all the traces. While some of the flows are transmitted using 2G EDGE data, the results are not included since there are too few such flows for statistical significance.

The measurements are based on the data reported by the Android OS. Note that HSPA and HSPA+ are a family of enhancements to UMTS, that greatly increase its speed. The high average speed of UMTS is related to networks that support the HSDPA enhancement for improved downlink speed, but not all the enhancements that would classify them as HSPA or HSPA+. The very big differences in speed between the HSPA, HSPA+ and LTE technologies can be explained by the following reasons. More recent technologies can achieve higher speeds. Smartphones tend to use the best technology possible for their channel quality. Thus, they use HSPA only when their signal is too bad to use a better technology and in turn the bad signal greatly affects speed.

Our approach is designed for downlink measurements, which account for the vast majority of the smartphone generated traffic [13]. Recent trends, though, show an increase in uplink related user activity and therefore we will briefly discuss the uplink case. Our algorithm cannot be directly applied to the uplink due to uplink communication characteristics. For instance, if we attempt to perform a measurement on the phone side we can gather very limited information. Without accessing the transceiver firmware, we can only observe how fast packets appear in the kernel, instead of how fast the NIC successfully transmits them at the medium, which is the metric we are interested in. It is possible that packets may remain in the buffer of the NIC for a relatively long time after they appear in the kernel, leading to wrong estimations. On the other hand, applying our algorithm to measurements collected on the server side will fail to measure the cell capacity, since many intermediate hops may be between the eNodeB and the server. An alternative approach would be to infer clues of the speed indirectly at the phone side. If a UDP socket is blocking, it can be an indication that the rate at which an application is generating packets (which we can detect) is higher than the link capacity, thus deriving an upper limit of the speed. In the case of TCP traffic, the ACKs can be analyzed to infer whether the rate that the application is generating traffic is above or below the link capacity. Further analyzing the uplink scenario is beyond the scope of the present paper and we leave it for future work.

@&#CONCLUSIONS@&#

We presented a lightweight measurement technique that leverages adaptive filtering over the packet dispersion time. This allows to estimate the per user capacity in mobile cellular networks. Accurate estimates can be achieved exploiting as few as 5% of the information obtained from TCP data flows. Given that this solution can support dense throughput sampling, it is ideal for capacity prediction and optimized resource allocation. In fact, if the future capacity availability is known, it is possible to predict when it is best to communicate by doing so when it is cheaper (i.e., more capacity available). In addition, our solution is able to estimate the fast capacity variations from a mobile terminal by monitoring the traffic generated under normal daily usage.

We validated our technique over a week-long measurement and an extensive simulation campaign. We achieved good estimation accuracy even when using only short lived TCP connections. Since our technique is based on simple post-processing operations on the packet timestamps, it is possible to easily integrate it in background processes or OS routines.

We are planning to extend our measurement application with filter based prediction capabilities in order to provide mobile phones with a complete capacity forecasting tool, which, in turn, will allow for advanced resource allocation mechanisms. Finally, we are planning additional measurement campaigns in order to further extend these encouraging results on passive and lightweight measurement tools.

@&#ACKNOWLEDGMENTS@&#

This article is partially supported by the Madrid Regional Government through the TIGRE5-CM program (S2013/ICE-2919), the European Union H2020-ICT grant 653449 and SmartenIT (EU-FP7-317846), the Ramon y Cajal grant RYC-2012-10788 and grant TEC2014-55713-R from the Spanish Ministry of Economy and Competitiveness, and the German DFG (CRC 1053, MAKI).

@&#REFERENCES@&#

