@&#MAIN-TITLE@&#An approach to estimate the size of ERP package using package points

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A unique approach to measure size of the customized ERP package has been proposed.


                        
                        
                           
                           Case study research method has been used to validate the proposed approach.


                        
                        
                           
                           A positive correlation was observed between Package Points and the efforts of these projects.


                        
                        
                           
                           The study presents theoretical and practical implications for better understanding of ERP package size measurement process.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Customization

ERP projects

Efforts

Function points

Package points

@&#ABSTRACT@&#


               
               
                  Enterprise Resource Planning (ERP) packages are information systems that automate the business processes of organizations thereby improving their operational efficiency substantially. ERP projects that involve customization are often affected by inaccurate estimation of efforts. Size of the software forms the basis for effort estimation. Methods used for effort estimation either employ function points (FP) or lines of code (LOC) to measure the size of customized ERP packages. Literature review reveals that the existing software size methods which are meant for custom-built software products may not be suitable for COTS products such as customized ERP packages. Hence, the effort estimation using conventional methods for customized ERP packages may not be accurate. This paper proposes a new approach to estimate the size of customized ERP packages using Package Points (PP). The proposed approach was validated with data collected from 14 ERP projects delivered by the same company. A positive correlation was observed between Package Points (PP) and the efforts of these projects. This result indicates the feasibility of our proposed approach as well as the positive climate for its utility by the project managers of future ERP projects. Lastly, we examine the implication of these results for practice and future research scope.
               
            

@&#INTRODUCTION@&#

Enterprise Resource Planning (ERP) systems are packaged software solutions that automate the business processes of an organization. Analyst firms, such as AMR Research [22,25,29] indicate that there exists a growing demand for such information systems across manufacturing industries and business firms. The high rates of troubled ERP implementations, delayed ERP deployments and outright cancelations call for review of the effort estimation practices to systematically deal with the software size measurement in ERP projects.

ERP systems are information systems that have different development cycles and deployment methods when compared to traditional software products [54]. Conventional wisdom holds that “vanilla implementations” of ERP packages such as SAP R/3 are much more likely to be successful than customized ERP package implementations [11]. However, several previous studies [7,11,48,52,54] have observed that many implementing organizations have had to modify ERP package to meet essential business needs and hence mandate customization during implementation.

Project managers involved in the development of customized ERP packages have to measure their package size in iterations as the requirements would keep changing due to customization. In such ERP projects, estimating the project efforts based on the package size using the existing methods would be a herculean task. Recent studies [13,16,63,64] also indicate that the effort estimation for ERP projects is mostly inaccurate. This is quite obvious; as software size forms the basis for effort estimation [10]. Hence accurate effort estimation for ERP projects is possible only when software size could be measured accurately in these projects.

Today, it is well known that a typical ERP project includes business process customization and system customization, each of which matches the business needs of the client organization [16]. This in turn implies that the package size in these projects needs to be measured afresh and accordingly the project efforts and costs have to be re-estimated. A potential factor that can affect the accuracies of the established effort estimation models is the size of the software package [67]. For ERP project managers to be adequately prepared for this endeavor, they need to look at alternate approaches for package size measurement in their ERP projects.

Previous research on ERP projects [30,58,59] reveals that the existing methods for estimation of efforts of standard ERP implementation and customized ERP packages are found to be the same. However, these methods which are meant for custom-built software products may not be suitable for COTS products such as customized ERP packages [13,16,63,64]. Hence, efforts estimated for such customized ERP packages may not be accurate [59]. Examples of underestimated ERP projects [18,43,46] suggest that making average assumptions might have a profound long-term effect on the ERP adopter, meaning a failure to meet growth targets [43], a loss of market edge [18], or even a bankruptcy [46]. Thus, this paper proposes an approach to estimate the size of customized ERP package using Package Points (PP).

Existing methods [35,59] for effort estimation of customized ERP packages either use function points (FPs) or lines of code (LOC) to size the software. The term ‘efforts,’ also called ‘project efforts,’ refers to the manpower required for the development of the software product in a software project [10]. The FP is a unit of measurement to express the amount of business functionality of an information system (as a product) provides to a user. Function points represent software size.

The LOC is a software metric used to measure the size of a computer program. The size is captured by counting the number of lines in the text of the program's source code. The complexity in function point measurement process grows exponentially as the software projects grow in size [39]. Hence, in our approach, we measure the size of customized ERP packages using Package Points instead of the FP and the LOC.

We define the term “Package Points (PP)” as the frame of reference or unit of measure for the size of an ERP package. Package Points are calculated based on the task points and complexity associated with the different ERP package customization approaches namely configuration, functionality, RICE (Reports, Interfaces, Conversions, and Extensions also known as Enhancements) and user interface design [11,19,42].

ERP package size measurement and effort estimation remain critical components in the ERP Requirements Engineering process [16]. Our objective is to provide ERP project managers with a support vehicle which helps them (i) achieve an increased understanding of the customized ERP package size measurement, (ii) estimate effort based on package size for ERP projects, and (iii) gain awareness of how package size and effort estimation in ERP projects matter in terms of efficiency of projects.

Our approach demonstrates that it is possible to find a trade-off between ERP projects that require more effort than expected and those that require less. The practical implications of our approach are that an ERP project manager (i) no longer must live with the current less reliable methods for software size measurement and effort estimation based on these size measures and (ii) can make decisions such as how to accelerate the ERP project in a way that can cause a desired effect on the efficiency of the project while keeping the package size and the efforts intact.

We suggest that our approach should be used in ERP projects that deal with the development of a customized ERP package. We validated this approach with data collected from 14 ERP projects delivered by the same company. A positive correlation was observed between the Package Points (PP) of the customized ERP packages and the actual efforts of these projects. This result indicates the feasibility of the proposed approach and the positive climate for its utility by the project managers of future ERP projects.

The remainder of this paper proceeds as follows. In Section 2 we provide background information on the need for accurate estimation of ERP project efforts based on package size. Also, we present the limitations in the existing methods for customized ERP package size measurement and effort estimation practice for ERP project. We describe our proposed approach in Section 3. Our application of the case study research method is explained in Section 4. It is followed by a brief discussion on the ERP data we used to validate our approach. Section 5 presents a discussion on our results and their implications for practice, followed by validity concerns. Section 6 presents the concluding remarks and areas for future research.

This section provides background of size and effort estimation in ERP projects and summarizes related research works emphasizing the need for accurate size estimation of customized ERP packages. Second, it explores current approaches used for ERP package size measurement and the limitations as observed from previous research studies.

For large scale IT projects such as ERP, accurate effort prediction becomes a difficult task for the project managers [27,51,61]. Researchers and practitioners acknowledge the need for better software size measurement methods and thereby a better effort prediction system for ERP projects [16,53,67].

In the past decade, a great deal of work has focused on understanding the reasons for inaccurate estimation of project efforts in traditional software projects as well as COTS projects such as the ERP ([13,16,58,59,64]), the factors that influence the process of effort estimation for ERP projects [1,35,47,49], and the impact of efforts over efficiency of ERP projects [53,61,63] however, till date, no research study has come out with an exclusive method or a model to deal with size estimation of customized ERP package.

ERP packages have been developed by ERP vendors in response to new technologies and emerging business requirements [54]. Although these packages provide competitive benefits to the implementing organizations, Requirements Engineering (RE) based issues (for e.g., effort estimation, ERP package size measurement) in ERP projects are a major concern [12,14,17,62].

About 72% of ERP projects fail to deliver the anticipated benefits [52]. Some of these projects have ended in failure due to poor management of RE processes [50,51,52,55]. These observations from the previous research works are mostly masked as the ERP projects are focused largely from managerial aspects than software engineering perspective. It is observed that ERP package size can be a useful metric for predicting the effort required to develop customized ERP package successfully [30]. Also, Kusters et al. [38] observe the size of an ERP package as a major cost driver in ERP projects.

The very nature of development of ERP packages differs from traditional software packages [52,61]. Development of ERP packages involves collecting requirements from multiple sources. For example, in the case of a banking application, requirements are collected from the stakeholders of different banks — both private sector and public sector located in different geographical locations. Hence, in packaged software solutions like ERP systems, it is difficult to completely mold the system to fit the existing business processes of the implementing organization. As a result, in many ERP projects, some degree of customization of both ERP systems and business processes is required [54,55].

On the contrary, in traditional software projects, products are designed and built for a particular client organization. These projects use conventional software process models to collect requirements at the initial stage of development, with the anticipation that the resulting product will meet these requirements. Hence the existing approaches to measure the software size in traditional projects are not able to measure the size of the customized packaged software which is being developed in iterations to make it a mature software system.

Most of the existing software size measurement systems have been designed with custom software projects in mind [28,59]. Unlike projects that use a single size measure such as function points or lines of code, typical ERP size measures during the process of customization include counts of the following: users, sites, business units or legal entities, software interfaces, EDI interfaces, data conversion software and data conversions, custom-developed reports, modified screens and ERP modules [51,56,59,60]. Existing methods for ERP package size measurement has its own limitations to handle these customization parameters.

Many effort estimation methods have been proposed during the last two decades. These methods include estimation by experts [34], analogy-based estimation [33] and parametric estimation [36]. From the literature, we find that effort prediction systems based on software size (FPs or LOCs) include parametric models such as Checkpoint [23], Price S/SP [15], SASET [23], SEER-SEM [23], SLIM [23,37], JENSEN [15,44], ESTIMACS [37], BYL [37], WICOMO [37], SYSTEM-3 [37], SPQR/20 [37], object oriented models [31,70] and non-parametric model such as ANGEL [50]. These models have the same limitations as COCOMO 2.0 with respect to the choice of predictor variables where the main predictor variable is either LOC or FPs [16,59].

Very few papers in the literature investigated the size of software applications based on the function point analysis (e.g. IFPUG, COSMIC) [1,16,45,56,59]. Overall, in the last two decades, only a handful of research studies investigated the accuracy of early size estimation approaches. In particular, these studies indicate the limitations of the effort estimation based on software size measures (FPs or LOCs). For instance, they were depending on functional size of ERP package [1,26], they were not designed to handle multiple outputs from ERP package [39,51,61], they were not developed to deal with business process complexity [17,64] or did not consider the ERP package customization requirements [13,63].

None of the existing research studies on ERP projects offer specific algorithms, exclusive methods or models to help the ERP project managers to measure the ERP package size and accurately estimate the project effort from it. Thus, we observe that there is a need for an alternate approach to measure the ERP package size that would consider the customization aspects of ERP that have not been taken care of in function point analysis.

In the field of IS/IT projects, various research studies have studied the phenomenon of ERP customization from the perspective of software cost and effort estimation [6,18,41,51,56,62]. The sizing approach for ERP packages discussed in the literature relies either on the functional size of the package or the RICE (Reports, Interfaces, Conversions, and Extensions also known as Enhancements) components [56]. However, the customization practices adopted by ERP vendors during the implementation involve four different types of customization requirements [11,19,42]. They are: (i) configuration requirements, (ii) new functional requirements, (iii) RICE components, and (iv) user interface design requirements. During ERP customization, configuration requirements are fulfilled by just configuring the ERP packages. These requirements are implemented by changing the parameters or properties in the tables of ERP database to reflect organizational features. Other requirements are met by adding new functionality. This requires writing new codes and modifying the database. Some requirements are met through RICE components, while few requirements may demand modifying the user interface design without altering the existing database design or source code.

We note that the existing approaches for ERP package size measurement assume bottom-up thinking where the ERP system is segmented in terms of business requirements. Based on this, various functional and non-functional requirements are quantified to size the ERP package. The package focuses on the level of business processes of the implementing organization and proceeds with package size estimation pertaining at that level. However, these studies offer very few guidelines for the estimation of ERP packages size while considering the different customization requirements discussed above. This leaves a gap in the literature and which we seek to fill through this paper.

Without capturing requirements precisely, a software package won't be able to deliver software that addresses the needs of the customers. Even small imprecisions in the requirements need to be corrected to keep the software project on the right track. It's essential that our software package meets our customers' needs or market opportunity which it's intended to address. As such, the proposed approach does not define any sub-routine to verify the completeness and consistency of requirements, as it is beyond the scope of this study. We expect the ERP team to consider some existing methods published in the software engineering literature such as [2,3,57] that were specifically developed to verify the consistency and completeness of the requirements specified by the customer.

Capturing all the requirements from the customer at an early stage of a software project (whether it is traditional or packaged software like ERP) is a difficult task [21]. In this study, we have not included any sub-routine to the “PPSE” approach to verify the completeness and consistency of requirements, as it is beyond the scope of this study. However, we make a note that the proposed approach captures the customer's requirements for customized ERP packages from four different dimensions namely configuration, new functionality, re-usability, and design interface than the existing practice of classifying the requirements as functional and non-functional. We deem that such requirement analysis at macro level would certainly reduce the degree of incompleteness in the software requirements specification (SRS) used by the Requirements Engineering (RE) team of ERP projects.

Any degree of ERP customization requires any one of the four types of customization requirements listed in Fig. 1
                      or a combination of it to be fulfilled by the vendor. Hence, during the process of estimating the size of the customized ERP packages, different customization requirements should be taken into consideration. In this paper, we propose a unique approach, referred as PPSE, to size customized ERP packages. The steps involved in the “PPSE” are shown in Fig. 1. From the figure, we find that the business requirements from the customer are initially received by the ERP team as part of the ERP customization process. From these business requirements, the configuration requirements (CR), the functional requirements (FR), the RICE components (RC) and the user interface design requirements (DR) are identified by the Requirements Engineering (RE) team members of the ERP projects. For each of these four types of requirements (CR, FR, RC, DR), the task points are estimated.

We define the term task points (TP) as the summation of the number of tasks and processes required to implement a requirement while taking into account its complexity. To implement each requirement (CR, FR, RC or DR), we must execute a number of tasks/processes. The complexity of each task will vary from one requirement to another. The task complexity may be induced by the demand for features such as multi-currency, multi-lingual, concurrent users, network architecture, remote access, legacy system complexity, and hardware/infrastructure requirements. As a result, we rated the complexity of each task, which we refer to as the Complexity Value (CV).

Consistent with function point analysis [10], in our approach, ERP vendors are expected to develop criteria to determine whether the complexity of a particular task is low, medium or high. Nonetheless, the determination of complexity is somewhat subjective. In our approach, if there is no complexity for a given task, the CV is 1. Similarly, it is 2 for low, 5 for medium and 7 for high complexity. Once the task points are calculated for each of the CRs, FRs, RCs and DRs, the summation of these task points would yield the Package Points (PP). This denotes the size of customized ERP package. Below, we present mathematically, the definition of the Package Points.


                     
                        
                           (1)
                           
                              
                                 
                                    
                                       Package
                                       
                                       Points
                                       
                                          
                                             P
                                             P
                                          
                                       
                                       =
                                       
                                          ∑
                                          
                                             
                                                
                                                   T
                                                   P
                                                
                                                i
                                             
                                          
                                       
                                       ∗
                                       C
                                       V
                                       +
                                       
                                          ∑
                                          
                                             
                                                
                                                   T
                                                   P
                                                
                                                j
                                             
                                          
                                       
                                       ∗
                                       C
                                       V
                                       +
                                       
                                          ∑
                                          
                                             
                                                
                                                   T
                                                   P
                                                
                                                k
                                             
                                          
                                       
                                       ∗
                                       C
                                       V
                                       +
                                       
                                          ∑
                                          
                                             
                                                
                                                   T
                                                   P
                                                
                                                m
                                             
                                          
                                       
                                       ∗
                                       C
                                       V
                                    
                                 
                                 
                                    
                                       ∀
                                       :
                                       i
                                       =
                                       1
                                       
                                       t
                                       o
                                       
                                       x
                                       ;
                                       j
                                       =
                                       1
                                       
                                       t
                                       o
                                       
                                       y
                                       ;
                                       k
                                       =
                                       1
                                       
                                       t
                                       o
                                       
                                       z
                                       ;
                                       m
                                       =
                                       1
                                       
                                       t
                                       o
                                       
                                       s
                                       ;
                                    
                                 
                                 
                                    
                                       and
                                    
                                 
                                 
                                    
                                       1
                                       ≤
                                       C
                                       V
                                       ≤
                                       7
                                       ;
                                    
                                 
                              
                           
                        
                     Where
                        x
                        
                           no. of configuration requirements

no. of functional requirements

no. of RICE requirements

no. of user design requirements

Complexity Value

task points

At the time of our case study execution, the company Axys invited their Requirements Engineering (RE) team members to operationalize the processes of the proposed approach “PPSE” (please refer to Fig. 1). Initially, all the business requirements (BR) of the customer were documented completely using a Microsoft Excel Sheet. Then, extracting the CR, the FR, the RC and the DR from these BR was carried out by RE team and recorded the same in the Microsoft Excel Sheet. To make the computation of the Package Points (PP) easier, a tool was developed and used by the authors in our case study. This tool would take the Excel sheets as input and provides user interface for the RE team to provide values for the task points (TP) and the Complexity Values (CVs) and finally computes the Package Points (PP) for the ERP package.

In this section, we describe the research method we chose to validate our approach “PPSE”. Second, we describe the ERP data set used in this study for the application of the “PPSE”. Later, we discuss the obtained results and our inference from it.

This paper uses the case study research method [69]. Our case study in which we used the steps from Fig. 1 was executed by following the research practices suggested by Yin [69]. The choice of the case study method was motivated by previous research on software projects that were carried out as per the recommendations of research methodologists in software engineering [8,16,68]. Though Yin [69] observes that case study research is more suitable when a ‘how’ or ‘why’ question is being investigated upon some existing methods or practices, the software engineering researchers [8,16,68] underline that case study research also helps the researcher to find a solution to the problem that is confined to ‘which is better’ question [8,68]. The latter is what we are after in this research work.

The case study was carried out in the company “Axys” (pseudonym). The Axys is a midsize IT Services Company in India which has over 32,000 users from 200-plus client organizations across the globe. Axys had a dedicated team for managing the ERP projects. The team consisted of a few technical team members who studied the business requirements of the client organization and worked for the Requirements Engineering (RE) cycle of their project and prepared the software requirements specification for a specific ERP module. Apart from technical members (such as developers/programmers, data analysts, solution architect), the team also had a business analyst as well as experienced functional and technical consultants.

The consultants had at least 10years of configuration and integration experience with a specific ERP functional module. A couple of Requirements Engineering (RE) team members of these ERP projects supported us to implement the steps outlined in Fig. 1 for the chosen 14 ERP projects. They helped estimate the Package Points (PP) for these projects. This allowed us to consider and include 14 ERP projects in our case study. Finally, using our case study data we calculated the correlation among the estimated PP, the estimated efforts using the PP and the actual efforts for 14 ERP projects. We deem that the actual efforts would show a positive correlation with the estimated efforts using the PP.

Our data came from 14 ERP projects implemented in the case study company “Axys”. The projects were carried out between May 2006 and October 2012. We applied our approach “PPSE” to 14 ERP projects of Axys, each of which deals with the development of a customized ERP package in a client organization. These projects were either known in Axys for delayed implementation or were found to have deviation when comparing their actual efforts and estimated efforts. We deliberately chose 14 projects with these characteristics for our case study, as we foresee that inaccurate effort estimation due to inaccurate package size measurement as one primary reason for the discussed shortcomings in these projects.

The ERP projects used in our study followed a modular approach during ERP implementation. That is, a module of the ERP was implemented than the complete ERP package consisting of various modules. Different ERP modules implemented by these 14 ERP projects include: finance, materials management, human resource management, quality management and sales and distribution.

We tested our approach “PPSE” using the following steps suggested in Abrahao et al. [1].
                           
                              •
                              We extracted the data set (function points (FPs) and actual efforts (AE)) for 14 completed ERP projects (Ai) delivered by the company Axys from their project database (PDB). The PDB is a repository of completed IT/IS projects maintained by an IT Company. This database was designed and developed as an in-house product by the IT Company for storing the details of their previously completed IT/IS projects.

Normally, a PDB of an IT Company is composed of the following details: actual efforts used in the project, function points, lines of code, project planning and scheduling activities, software quality assurance measures (for e.g., defects) and risk information sheets [5].

Using Eq. (1), the Package Points (PP) for the ERP projects (Ai) were estimated with the help of the Requirements Engineering (RE) team members of the Axys Company (see Section 4). The members derived values for the task points (TP) and the Complexity Values (CVs) from the software requirements specification document of these projects.

The estimation of efforts (EE) for the ERP projects (Ai) using the Package Points were carried out using the conventional method namely COCOMO II for effort estimation [10].

The FP measurement for these ERP projects was done using the most prominently used method namely Function Point Analysis (FPA) which was initially proposed by Albrecht [4]. This method can be considered as the first software sizing method in software engineering literature. According to this method, a software system consists of logical files and functions that perform transactions using or altering the data in the logical files. The amount of data (types) ‘handled’ by a logical file or transactional function determines the amount of functionality that the software delivers, hence its functional size.

As suggested by previous research [12,24], we evaluated the estimation accuracy of the proposed approach “PPSE” using correlation analysis for the variables, the FP and the AE; the PP and the EE; and the PP and the AE.

@&#RESULTS@&#

In this section we report our results with respect to:
                        
                           (i)
                           what we observe from the correlation between the function points (FPs) and the actual efforts (AE) of the 14 ERP projects (Ai) and

the correlation between the estimated Package Points (PP) and the estimated efforts (EE) of Ai and

finally the correlation between the estimated Package Points (PP) and the actual efforts (AE) of Ai.

In this study, we initially recorded the function points and the actual efforts for the ERP projects (Ai) which is shown in Table 1
                     . Next, we started measuring Package Points as per the procedure described in Fig. 1. Next, the efforts required to develop the customized ERP packages for 14 ERP projects were measured using Package Points. The outcome of this exercise is reported in Table 2
                     , which shows the Package Points and the efforts (both actual and estimated) for the ERP projects (Ai).

As discussed in Section 4.2, we examined the correlation between the variables — the FP and the AE, the PP and the EE, and the PP and the AE for the ERP projects (Ai) using Karl Pearson's coefficient of correlation (R) [9]. Coefficient of correlation (R) for function points (FPs) and actual efforts (AE) is 0.10, whereas it is 0.93 for Package Points (PP) and estimated efforts (EE) for 14 ERP projects (Ai). Similarly, for the projects, the coefficient of correlation (R) for Package Points and actual efforts is found to be 0.94. The correlation analysis for the variables — the FP and the AE, the PP and the EE and the PP and the AE is shown in Figs. 2, 3 and 4
                     
                     
                      respectively. From our results, we infer that the FP and the AE are very weakly related, whereas the PP and the EE are strongly related. Similarly, the PP and the AE are also strongly related for the 14 ERP projects (Ai).

A typical ERP package involves configuring the application to suit the business requirements of the implementing organization and this is achieved by creating custom or RICE objects to bridge the gaps in the application. These define the scope of the ERP solution and form an essential part of the ERP package size. It should be noted that external factors and other non-functional requirements such as user design interface which may be complex to implement also contribute to the ERP package size.

@&#DISCUSSION@&#

The process of measuring software size using function points takes into account the number of ways a system interacts with its users. This would employ counting and weighting five data and process logical components. The data components are the so-called logical internal files and external interface files, and three transactional components are external inputs, external outputs, and external queries [16]. However, the IFPUG community (e.g., [10,32]) observes that the software size measurement using function points falls short in providing details relative to emerging technologies, business process complexity and customizing configuration settings, for example, ERP among others.

Our results indicate that the customized ERP package size estimation based on the function points stands far away from the actual efforts spent for the 14 ERP projects (Ai). However, we find that the estimated Package Points were positively related to the amount of actual effort that was spent in these projects. Also, the estimated efforts for these projects map very well with the estimated Package Points.

The results of our case study indicate that an increased understanding of customized ERP package size measurement methods is necessary to accurately estimate efforts for ERP projects. This may not be possible for ERP project managers through the use of brand-new tools or project-specific models which would suit a standard ERP package implementation and not a customized version of it. On the other hand, it is suggested that they should make use of some alternative approaches such as Package Points based ERP package size measurement during effort estimation process.

Our proposed approach “PPSE” goes beyond the conventional methods for ERP package size measurement in several ways. In this study, we view the ERP package size from customization requirements perspective and, in that we leverage the existing empirical knowledge on effort estimation for software projects. This provides us three consequences: first, it led to the focus on ERP customization requirements at macro level; second it allowed us to explore the tasks and sub-processes required for each of the customization requirements; and third, the complexity associated with these tasks/processes.

Our results support the claim in the literature [13,16,63] that effort estimation methods grounded on the different types of customization requirements at a more detailed level (shorter activities, smaller tasks) contribute to the accuracy of the estimates and may reduce the size of the estimation errors. The proposed approach “PPSE” considers the different ERP customization requirements and accordingly measures the size of the customized ERP package. To better understand the significance of the “PPSE”, we studied the literature on requirements change impact analysis [20,40] and requirements traceability management techniques [65]. These studies deal primarily with techniques helping ERP team members understand how customizations affect project efforts, software size and its behavior.

We infer that the ERP customization does not happen in isolation, but it is being carried out considering the ERP system as a whole. Given this state, different customization requirements (say, configuration requirements, RICE requirements, functional requirements) implemented by the ERP vendors have to be taken into account while estimating the customized ERP package size. In the absence, of such an initiative, one could not really understand the critical efforts required for the development of customized ERP package. This has been taken care of in the proposed effort estimation method “PPSE” grounded on Package Points. This has led the “PPSE” approach to produce better results for software size measurement and effort estimation when compared to other conventional methods in practice for ERP projects.

One needs to understand the very nature and development of ERP packages. These application packages developed by ERP vendors are rooted in various common business requirements captured from various sources so as to bring the best industry practices. Such best practices include the process flows and granularity of captured data. In order to measure the size of such ERP packages, we need to get into the package structure in terms of its solution scope. Defining the ERP solution scope would involve mapping the business requirements of the client organization onto ERP application modules and required business processes onto application processes or functionality.

The proposed approach is a package-independent, parametric-sizing method. This research has some implications for ERP project managers. The significant benefits of this approach are: requirements based package size measurement with decreased person dependency, enhanced productivity of projects, and increased effort estimation accuracy. The present study uses the Package Points (PP) for ERP package size measurement and the PP relies on the different ERP customization requirements. Such a schema would enable the ERP project managers to better understand how complex the customer's requirements are, efforts required to implement it and the size it would occupy as a whole for the ERP system. This in turn would facilitate the project managers for better decision making when accepting the customization request from the client organization.

To practicing project managers, our research suggests that even though it's a little bit hard to extract the different customization requirements from the business requirements of the customer, attempting to think about and measuring the package size estimate accordingly would pay off in the long run and save costs, time and other resources.

We consider this research study as a first step toward a better understanding of the customized ERP package size measurement to reduce uncertainty in ERP effort estimation. As suggested by Yin [69], we did an early assessment of the validity threats. We investigated the following threats which could influence the results.
                           
                              •
                              Our study considers 14 ERP projects for Package Points and effort estimation. Many previous studies [12,16,51,63] dealing with the software size and effort estimation models have considered small data sets with 10–15 IT/IS projects to validate their proposed methods and obtained significant results like we did in our study. We followed Wieringa's approach [66], according to which a newly proposed approach needs first to be tried out in a setting that allows isolating the effects and drawing some first lessons learnt about the real-world use of the approach. However, future research shall experiment our proposed approach for large number of ERP projects (say, 25 to 40 projects).

Another possible threat could be due to the fact that all the 14 ERP projects considered in this study were delivered by the same company. Future research will include data from different ERP packages deployed by several ERP vendors. This may help us observe the influence of package size measurement over project efforts at macro level.

For the generalization of the results, it is necessary to use data set from ERP packages developed on different platforms such Open Source and Microsoft technologies.

Errors in the measurement of effort, function points (FPs), Package Points and lines of code are inevitable [10]. It is hard to make out the extent of measurement errors for the variables such as FP. Previous research on software engineering [5] suggests that the FP count does not work for software projects where the project schedule has been compressed and over utilization of project resources is anticipated. This research work did not handle errors in the datasets of software projects of customized ERP packages.

@&#CONCLUSION@&#

The main objective of this paper is to show that it is possible to size customized ERP packages based on customization requirements (Package Points) rather than relying on its functionality (function points) alone. To the best of our knowledge, this is the first of its kind in ERP research. We have outlined a procedure to measure the customized ERP package size based on customization requirements and accordingly, the effort estimation for such ERP projects. Our research study not only supported previous research works on software size and effort estimation for IT/IS projects but it also shows that our approach is suitable and generated good effort estimation for the chosen 14 ERP projects.

The purpose of this study is not to undermine the existing approaches but rather to suggest that more multi-technique-based approaches should be proposed for the ERP context. Hence, in our approach, to overcome the weaknesses of the existing techniques being used, we captured different types of ERP customization requirements and the complexity associated with its implementation.

This research was an initial trial of our approach and one of the goals of this research was to determine if there is a relationship between the customized ERP package size and efforts used in these ERP projects. This study lays the foundation for researchers to analyze effort estimation for ERP projects from the perspective of customization. We have also provided areas for future research in our discussion of validity threats.

@&#REFERENCES@&#

