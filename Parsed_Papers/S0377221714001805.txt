@&#MAIN-TITLE@&#Computing approximate Nash equilibria in general network revenue management games

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A network revenue management problem under competition is studied.


                        
                        
                           
                           Booking limits for competing airlines are computed.


                        
                        
                           
                           A heuristic for computing an approximate Nash equilibrium is introduced.


                        
                        
                           
                           Payoff values are computed on demand, i.e. there is no need to provide the complete playoff matrix in advance.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Network revenue management

Competition

Approximate Nash equilibria

Algorithmic game theory

@&#ABSTRACT@&#


               
               
                  Computing optimal capacity allocations in network revenue management is computationally hard. The problem of computing exact Nash equilibria in non-zero-sum games is computationally hard, too. We present a fast heuristic that, in case it cannot converge to an exact Nash equilibrium, computes an approximation to it in general network revenue management problems under competition. We also investigate the question whether it is worth taking competition into account when making (network) capacity allocation decisions. Computational results show that the payoffs in the approximate equilibria are very close to those in exact ones. Taking competition into account never leads to a lower revenue than ignoring competition, no matter what the competitor does. Since we apply linear continuous models, computation time is very short.
               
            

@&#INTRODUCTION@&#

Although the concept of revenue management, as it is known today, emerged out of a competitive situation after the deregulation of the U.S. airline industry in 1978 (Talluri & van Ryzin, 2004, chap. 1.2), competition is still hardly considered in the revenue management literature. This is also one of the results Chiang, Chen, and Xu (2007) found after studying 221 publications (mainly past 1999) dealing with revenue management.

Network revenue management competition is even less investigated than competition in single-leg flights. One reason for this is that already finding an optimal seat allocation even for a single airline network is “hard” because the amount of states in the dynamic program used for solving the problem grows exponentially (Talluri & van Ryzin, 2004, p. 92). Furthermore, finding an exact Nash equilibrium (NE) in general non-cooperative non-zero-sum games is “hard” in a computational way (Papadimitriou, 1994), even for two-player games (Chen, Deng, & Teng, 2009).

Due to the (computational) complexities in both areas, revenue management and algorithmic game theory, approximations were proposed independently by both operations researchers (e.g. Talluri & van Ryzin, 1999; Klein, 2007; Zhang, 2011) and (algorithmic) game theorists (e.g. Tsaknakis & Spirakis, 2007; Daskalakis, Mehta, & Papadimitriou, 2009; Kontogiannis, Panagopoulou, & Spirakis, 2009).

In order to overcome the twofold complexity of computing exact NE with optimal seat allocations, we in this paper combine approximations in the disciplines of operations research and algorithmic game theory and develop a heuristic to find an approximate NE in general network RM games in case it cannot converge to an exact NE. (The terms “exact NE” and “approximate NE” will be explained in Sections 2.2 and 4, respectively.) Thus the solution obtained by our procedure need not be an exact NE. For this reason we will use the term “heuristic” for the procedure we propose to compute approximate NE throughout the paper. Note that while an algorithm to compute exact NE with certainty would be useful, it might not be useable in practice except for very small instances due to the above mentioned complexities. An earlier attempt to approximate NE in RM games was made in Jiang and Pang (2011). We will compare their approach to ours in Section 6.

We focus on the seat allocation problem two competing airlines face for substitute products when they are aware of competition and base their decision on this knowledge. The main goals we are trying to achieve are (1) to combine the disciplines of revenue management and algorithmic game theory in order to (2) reduce the game considered, to (3) compute a good solution for the problem on hand in a short time, and (4) to investigate how the revenue is affected when competition is taken into account in capacity allocation decisions. For this purpose simple linear models will be used to calculate the best responses iteratively and converge to (possibly approximate) NE. This approach avoids the effort of determining all possible strategies and setting up the players’ complete payoff matrices—which needs to be done for general exact algorithms and can be an exhausting task for itself due to the extremely large amount of possible combinations of booking limits—before the actual algorithm can be applied.

We present the notation and define the concepts used throughout the paper in the next section. Section 3 summarizes related publications on the topics on hand while in Section 4 our notion of an approximate Nash equilibrium is introduced. In Section 5, the problem is formulated. Our contribution to the problem on hand and our heuristic are presented in Section 6. Section 7 illustrates our heuristic on an example. Section 8 provides a computational study followed by a conclusion in Section 9.

Revenue management is, among other things, concerned with allocating a limited and perishable amount of inventory (e.g. the seat capacity on an airplane) to different types or segments of customers willing to pay different prices for these products. The need for capacity management arises because all of these segments request the same physical product. What makes the problem complicated is that demand for the different products is not known in advance but is subject to stochastic variations.

Finding an optimal allocation of seats to different segments under these circumstances becomes difficult very quickly. If an airline offers only two classes on one flight leg, computing optimal seat allocations is easy (see e.g. Talluri & van Ryzin, 2004, chap. 2.2.1 for a simple optimal allocation rule). Nowadays many airlines operate in a hub-and-spoke network, though, enabling them to sell products which use several resources through connecting flights. This way the number of legs needed to be flown by a company can be much less compared to the amount of products offered. Each leg can be used by several products saving the airline money through avoiding to buy or lease aircraft (possibly one for each leg) and generating more revenue on each leg through higher capacity load factors.

In the smallest possible network with two legs connecting three cities there are at least three possible origin–destination (O&D) combinations with one being a connecting flight with a stopover in a hub. If there are three legs between four cities already six O&D pairs can be offered. Fig. 1
                         shows these simple network structures. Here the solid arcs represent actual legs connecting two nodes directly. The dashed arcs represent connecting flights through hubs which are marked bold. I.e. a trip from O1 to H2 needs a stopover in H1, while a trip from O1 to D1 has two stopovers, one in each hub.

Note that only one-way products are considered in these illustrating examples. This means that round trips as well as “backward directed” flights—e.g. a flight from H1 to O1—are not included in the scenario set.


                        Fig. 2
                         shows even larger and more realistic networks with up to 22 O&D pairs in Fig. 2(d). For the sake of visibility, we ommitted the dashed arcs representing connecting flights in Fig. 2.

However, a network structure also complicates the capacity allocation problem because it becomes insufficient (and possibly fatal) to optimize the seat allocation on each leg independently. A capacity decision on each leg needs to consider its impact on the whole network (and on the total revenue). In this setting it can be advantageous to deny a local flight request if a more profitable multi-leg request using this local flight is expected to arrive and vice versa.

Airline alliances further complicate the problem. In low-demand markets airlines often cooperate within alliances and utilize so-called code-sharing flights. These allow several companies to sell tickets on a flight operated by another. However, if airlines interact within such code-sharing flights, the problem is not only to allocate capacity to different fare classes but also to divide the available capacity among the partners within the alliance. Graf and Kimms (2011, 2013) have developed procedures based on real options to solve this problem for a two-airline alliance. However, with more than one actor selling tickets, the problem of dividing the profit amongst them arises. Çetiner and Kimms (2012, 2013) presented procedures to allocate the alliance’s revenue among the partners in a fair way so that none of them has an incentive to leave the alliance. Their procedures are based on the nucleolus concept from cooperative game theory and are very effective. These and further results are also included in the Ph.D. thesis by Çetiner (2013).

There are several—mostly approximate—methods to allocate capacity to different fare classes in a network setting. Some of the simplest formulations of the network revenue management problem are the Deterministic Linear Program (DLP), the Probabilistic Non-Linear Program (PNLP), and the Randomized Linear Programming (RLP) method (see e.g. Talluri & van Ryzin, 2004, chap. 3.3.1–3.3.3).

In the DLP it is assumed that demand is known in advance. The model we present in Section 5 is an extension of the DLP which takes into account the competitor’s spill over demand. The latter is a part of the customers requesting a ticket at the respective airline if they are denied a ticket by the competitor.

In the PNLP booking limits are set based on the probability of the products’ demand levels. If a product’s expected revenue—calculated from the product’s price multiplied by its expected demand—leads to an increase of total revenue, a further capacity unit is allocated to it. In Section 5, we also present a competitive version of the PNLP.

The RLP is a randomized extension to the DLP. Although the RLP performs better than the DLP in some cases, it does not clearly dominate the DLP.

In this section we first define what an NE is in general and then explain what we mean by exact NE. Approximate NE are explained in more detail in Sections 3.2 and 4.

An NE is a state in a game in which none of the players can improve his utility by deviating from his equilibrium strategy. Formally, an NE 
                           
                              (
                              
                                 
                                    x
                                 
                                 
                                    ∗
                                 
                              
                              ;
                              
                                 
                                    y
                                 
                                 
                                    ∗
                                 
                              
                              )
                           
                         can be defined as 
                           
                              
                                 
                                    u
                                 
                                 
                                    a
                                 
                              
                              (
                              
                                 
                                    x
                                 
                                 
                                    ∗
                                 
                              
                              ;
                              
                                 
                                    y
                                 
                                 
                                    ∗
                                 
                              
                              )
                              ⩾
                              
                                 
                                    u
                                 
                                 
                                    a
                                 
                              
                              (
                              x
                              ;
                              
                                 
                                    y
                                 
                                 
                                    ∗
                                 
                              
                              )
                           
                         with 
                           
                              
                                 
                                    u
                                 
                                 
                                    a
                                 
                              
                              ,
                              
                              x
                           
                         and 
                           
                              
                                 
                                    x
                                 
                                 
                                    ∗
                                 
                              
                           
                         denoting a player a’s utility, a sample strategy for him and his equilibrium strategy, respectively, and 
                           
                              
                                 
                                    y
                                 
                                 
                                    ∗
                                 
                              
                           
                         representing the equilibrium strategy of the competitor(s). The strategy 
                           
                              
                                 
                                    x
                                 
                                 
                                    ∗
                                 
                              
                              =
                              arg
                              
                                 
                                    max
                                 
                                 
                                    x
                                 
                              
                              
                                 
                                    u
                                 
                                 
                                    a
                                 
                              
                              (
                              x
                              ;
                              
                                 
                                    y
                                 
                                 
                                    ∗
                                 
                              
                              )
                           
                         is called a best response of player a to a given strategy 
                           
                              
                                 
                                    y
                                 
                                 
                                    ∗
                                 
                              
                           
                         of the other player(s). The definitions of NE and of best responses are defined analogously for all players.

What we call an exact NE is an NE in a game based on the players’ complete strategy sets and payoff matrices. We will call this game original game. An NE can be made up of either pure strategies or mixed strategies. In our case a pure strategy is a vector with P positions denoting the booking limit for the 
                           
                              p
                           
                        th product on the 
                           
                              p
                           
                        th position. A mixed strategy, on the other hand, defines a probability distribution on the available pure strategies.


                        Nash (1950) proved that every finite game has at least one exact equilibrium (in mixed strategies) but did not provide an approach how to reach it. In order to compute NE special algorithms are needed.

This is what algorithmic game theory deals with, among other things. See e.g. Nisan et al. (2007) for a collection of recent contributions on this topic. All such algorithms so far rely on the games’ complete payoff matrices as input. The entries in the matrices represent the payoffs to the players if e.g. player 1 plays strategy i and player 2 plays strategy j. If only two players are involved, the game based on their payoff matrices is called a bimatrix game. One of the best-known algorithms for solving bimatrix games is the algorithm by Lemke and Howson (1964) which is a pivoting algorithm that finds one equilibrium. The algorithm by Audet, Hansen, Jaumard, and Savard (2001) finds all (extreme) NE through a search tree. We will shortly explain the term extreme NE in Section 6. See McKelvey and McLennan (1996) for an overview on further algorithms.

@&#RELATED WORK@&#

So far very little research has been done on revenue management competition although, as we show in Sections 5 and 8.2, incorporating competitive information into the process of setting the booking limits results in a tendentially higher revenue. Li and Oum (1998), Netessine and Shumsky (2005), Li, Oum, and Anderson (2007, 2008), as well as Gao, Ball, and Karaesmen (2010) analyzed competition for single leg flights and two fare classes. They all found—among other things—that under competition the booking limit for the lower-fare class was lower compared to the centralized case when the airlines cooperated. They did not, however—except for Gao et al. (2010)—compare the (expected) revenues that could be achieved in these scenarios, which is the more interesting question we address in this paper.


                        Netessine and Shumsky (2005) also considered a kind of network competition. They defined vertical competition for two airlines competing over connecting passengers changing planes at a hub. In this setting a passenger flying from an origin O to a destination D over a hub H uses the leg O–H operated by one airline and leg H–D operated by another. If local passengers using only one leg and connecting passengers using both legs exist, the airlines must choose how many seats to protect for local and connecting passengers in absence of cooperation or coordination.


                        Jiang and Pang (2011) assumed the airlines to compete in the same network offering identical products, i.e.identical local as well as connecting flights. They formulated two competition models based on the DLP and PNLP. The authors compared results of different booking policies—partitioned booking limits and bid prices—under their DLP and PNLP. The booking limit policy under the DLP performed best, while the booking limit policy under the PNLP performed worst.


                        Chen et al. (2009) have proved that the problem of computing an exact NE—even in two-player games—is complete in PPAD, a complexity subclass of NP introduced by Papadimitriou (1994). This means that applying one of the existing exact algorithms mentioned in Section 2.2 is very inefficient in a computational way because the amount of time it takes to compute an exact NE grows exponentially with the size of the payoff matrices.

For this reason the notion of an 
                           
                              ∊
                           
                        -approximate NE was introduced to define a state of the game in which no player a has an incentive to deviate from his current strategy 
                           
                              
                                 
                                    x
                                 
                                 
                                    ∗
                                 
                              
                           
                         if no other strategy x can yield him a larger utility than the current one plus a constant 
                           
                              ∊
                              ⩾
                              0
                           
                        . I.e.
                        
                           
                              
                                 
                                    x
                                 
                                 
                                    ∗
                                 
                              
                           
                         and 
                           
                              
                                 
                                    y
                                 
                                 
                                    ∗
                                 
                              
                           
                         define an 
                           
                              ∊
                           
                        -approximate NE if 
                           
                              
                                 
                                    u
                                 
                                 
                                    a
                                 
                              
                              (
                              
                                 
                                    x
                                 
                                 
                                    ∗
                                 
                              
                              ;
                              
                                 
                                    y
                                 
                                 
                                    ∗
                                 
                              
                              )
                              +
                              ∊
                              ⩾
                              
                                 
                                    u
                                 
                                 
                                    a
                                 
                              
                              (
                              x
                              ;
                              
                                 
                                    y
                                 
                                 
                                    ∗
                                 
                              
                              )
                           
                         for all players a, all x, and all 
                           
                              y
                           
                         (see e.g. Daskalakis et al., 2009; Kontogiannis et al., 2009). Following this definition, an exact NE can be described as an 
                           
                              ∊
                           
                        -approximate NE with 
                           
                              ∊
                              =
                              0
                           
                        . A motivation for this type of approximation is that there might me a cost c involved with deviating from one strategy to another. If 
                           
                              c
                              ⩾
                              ∊
                           
                         then deviating does not improve the players’ net utility.

Although 
                           
                              ∊
                           
                        -approximate NE are not necessarily exact, the algorithms to compute them only need polynomial running times opposed to exponential running times needed by algorithms that are proved to find exact NE. Hence, approximate NE constitute a compromise which sacrifices a part of the players’ payoffs for a fast computation time.

In order to measure the performance of algorithms computing 
                           
                              ∊
                           
                        -approximate NE and to be able to compare them, all entries in the payoff matrices are normalized to be in the range between 0 and 1. This can be done through multiplication and/or addition of appropriate (but equal) terms to all of a matrix’s entries without changing the structure of the game or the structure or set of NE. See e.g. Kontogiannis et al. (2009, chap. 2.4) for a formal proof.

The best approximation to an exact NE in general two-player games known to date is an algorithm by Tsaknakis and Spirakis (2007) computing 0.3393-approximate NE. This means that, solving a general two-player game with their algorithm, every player’s utility in the game’s solution will be at most 33.93% worse than his utility in an exact NE.

In this section we will introduce our own notion of approximate NE because the 
                        
                           ∊
                        
                     -approximate NE described in the previous subsection have a further operational disadvantage—besides resulting in a possibly worse utility for the players than exact NE. In particular, the algorithms used for computing 
                        
                           ∊
                        
                     -approximate NE need the complete payoff matrices as input—like the algorithms used for computing exact NE. However, for the network revenue management problem with competition setting up the complete payoff matrices can be a very time and memory consuming task itself.

E.g.consider the two-leg network from Fig. 1(a) with six products (2 classes for every O&D combination) and capacities of 120 and 400 seats respectively on the legs. In such a (relatively small) game there are more than 103million possible strategies for each player if all possible combinations with both planes being full are considered and still about 23million strategies if the demand rates are taken into account as additional limitations to the booking limits. Note that in the setting considered here the strategy sets are matrices themselves displaying the combinations of booking limits for the different products given airplane capacities.

Although computing an 
                        
                           ∊
                        
                     -approximate NE would take less time than computing an exact NE, one would not even come so far in many cases due to the large amount of time and memory needed to set up the payoff matrices based on this large amount of strategies. Since, to the best of our knowledge, no efficient algorithm for computing NE in network revenue management games exists, we developed our own notion of approximate NE and our own heuristic to compute them.

Operationally, our heuristic is better than algorithms computing 
                        
                           ∊
                        
                     -approximate NE because it does not need the players’ complete payoff matrices as input. In the course of our heuristic only the necessary entries of the matrices (the best responses) are computed “on demand” which is a lot more efficient and thus better suited to solve real-world problems. However, as opposed to 
                        
                           ∊
                        
                     -approximate NE that are proved to not bring a player a higher payoff than the current payoff plus 
                        
                           ∊
                        
                      by deviating to a different strategy, we cannot specify such a value for our results from the beginning.

In the course of our heuristic a part of the players’ strategies is eliminated. Afterwards, only the game based on the strategies remaining available to the players after the elimination are considered. We will call this game reduced game. Finally, we compute the NE in the reduced game. The reduced game’s NE form the approximate NE for the original game.

Our model is a reformulation of the DLP for the network revenue management problem which we adjust to incorporate competition information similar to Jiang and Pang (2011). However, they made some assumptions which made the interpretation of their results difficult from a game theoretic point of view. We adjust these shortcomings here to picture the problem more realistically.

In particular, Jiang and Pang (2011) let the capacities of the aircraft, the random demand, and the decision variables—the booking limits for the individual products—to be continuous non-negative numbers. Allowing all three values to be continuous, the optimal booking limits can turn out to be continuous as well. However, what is a sufficient approximation for an isolated airline leads to problems in the interpretation of the alleged NE. While an isolated airline can heuristically round the continuous variables to integer booking limits, in a game theoretic setting with rationally acting players such rounding shifts the best responses away from the NE if it consists of continuous numbers. This, in turn, leads to different best responses by both players and makes the information of continuous best responses in a NE worthless within an integer setting such as the capacity allocation problem in revenue management. For, in an integer setting the best response functions are not continuous and non-integer best responses do not exist except in mixed strategies.

Indeed, in most of the publications mentioned in Section 3.1 continuous demand distributions were assumed which can lead to the same difficulties as the formulation in Jiang and Pang (2011). Li and Oum (1998) did not specify this detail. Although all of the other authors provide conditions under which a pure-strategy NE existed, it did not in general. Further, it was not made clear whether in the pure NE booking limits were integers. Gao et al. (2010) even presented an example with continuous booking limits in a unique, pure-strategy NE.

In order to overcome such failures, the decision variables should be integer-valued in the optimal solution. An advantage of the DLP models we use is that modeling the decision variables as integers is not necessary if (1) the flight network is acyclic which is always the case for time-indexed flight networks used in revenue management, (2) the demand values are integer parameters, (3) the capacity values are integer parameters, and (4) all products only occupy one seat (see also de Boer, Freling, & Piersma, 2002, p. 77). Note that the problem and the heuristic presented below are based on only two players. However, they can be augmented to incorporate n players without loss of generality.

Consider two airlines denoted as 
                        
                           a
                           ∈
                           {
                           1
                           ,
                           -
                           1
                           }
                        
                     . In this context index a refers to the considered player, while 
                        
                           -
                           a
                        
                      refers to the competitor. Competitor a offers 
                        
                           
                              
                                 P
                              
                              
                                 a
                              
                           
                        
                      products defined as combinations of the origin, destination, and fare class, on a network with 
                        
                           
                              
                                 L
                              
                              
                                 a
                              
                           
                        
                      legs. Let 
                        
                           
                              
                                 M
                              
                              
                                 a
                              
                           
                        
                      be the incidence matrix for player a’s network with 
                        
                           
                              
                                 M
                              
                              
                                 lp
                              
                              
                                 a
                              
                           
                           =
                           1
                        
                      if leg l is used by product p and 
                        
                           
                              
                                 M
                              
                              
                                 lp
                              
                              
                                 a
                              
                           
                           =
                           0
                        
                      otherwise. Competitor a faces an initial expected demand 
                        
                           
                              
                                 d
                              
                              
                                 p
                              
                              
                                 a
                              
                           
                        
                      for a product p. This demand stands for the total demand player a will receive during the entire booking period. For our model formulation, this is the only information about demand we need and hence we need not make any assumptions about the order of request arrivals. Player a’s total capacity on leg l is 
                        
                           
                              
                                 C
                              
                              
                                 l
                              
                              
                                 a
                              
                           
                        
                     . The revenue earned by a player a from a product p is 
                        
                           
                              
                                 π
                              
                              
                                 p
                              
                              
                                 a
                              
                           
                        
                     . The proportion of customers requesting a product from the competitor a, if they are denied a ticket by their preferred airline 
                        
                           -
                           a
                        
                     , is 
                        
                           
                              
                                 α
                              
                              
                                 p
                              
                              
                                 -
                                 a
                                 ,
                                 a
                              
                           
                           ∈
                           [
                           0
                           ,
                           1
                           ]
                        
                     . It may depend on the price the competitor charges for his product. The airlines optimize their booking limits 
                        
                           
                              
                                 b
                              
                              
                                 p
                              
                              
                                 a
                              
                           
                        
                      for the products in response to each other’s booking limits using a variant of the linear model below.

The objective function (1) maximizes the total revenue summing over the revenues for the products times the respective booking limits. Restriction (2) limits a product’s booking limit to the considered airline’s total expected demand 
                        
                           
                              
                                 d
                              
                              
                                 p
                              
                              
                                 a
                              
                           
                           +
                           
                              
                                 α
                              
                              
                                 p
                              
                              
                                 -
                                 a
                                 ,
                                 a
                              
                           
                           
                              
                                 
                                    
                                       
                                          
                                             d
                                          
                                          
                                             p
                                          
                                          
                                             -
                                             a
                                          
                                       
                                       -
                                       
                                          
                                             b
                                          
                                          
                                             p
                                          
                                          
                                             -
                                             a
                                          
                                       
                                    
                                 
                              
                              
                                 +
                              
                           
                        
                     . The term 
                        
                           
                              
                                 
                                    
                                       
                                          
                                             d
                                          
                                          
                                             p
                                          
                                          
                                             -
                                             a
                                          
                                       
                                       -
                                       
                                          
                                             b
                                          
                                          
                                             p
                                          
                                          
                                             -
                                             a
                                          
                                       
                                    
                                 
                              
                              
                                 +
                              
                           
                        
                     , which is equal to 
                        
                           max
                           
                              
                                 
                                    0
                                    ,
                                    
                                       
                                          
                                             
                                                
                                                   d
                                                
                                                
                                                   p
                                                
                                                
                                                   -
                                                   a
                                                
                                             
                                             -
                                             
                                                
                                                   b
                                                
                                                
                                                   p
                                                
                                                
                                                   -
                                                   a
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     , on the right hand side of restriction (2) stands for the non-negative amount of booking requests denied by the competing airline 
                        
                           -
                           a
                        
                      (also called spill of demand of 
                        
                           -
                           a
                        
                     ). Restriction (3) is the capacity restriction requiring the sum of all booking limits on a leg not to exceed the capacity on the respective leg. Finally, restriction (4) defines the booking limits to be nonnegative continuous numbers.
                        
                           (1)
                           
                              max
                              
                              
                                 
                                    r
                                 
                                 
                                    a
                                 
                              
                              (
                              
                                 
                                    b
                                 
                                 
                                    p
                                 
                                 
                                    a
                                 
                              
                              ,
                              
                                 
                                    b
                                 
                                 
                                    p
                                 
                                 
                                    -
                                    a
                                 
                              
                              )
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       p
                                       =
                                       1
                                    
                                    
                                       
                                          
                                             P
                                          
                                          
                                             a
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    π
                                 
                                 
                                    p
                                 
                                 
                                    a
                                 
                              
                              
                                 
                                    b
                                 
                                 
                                    p
                                 
                                 
                                    a
                                 
                              
                           
                        
                     
                     
                        
                           (2)
                           
                              subject
                              
                              to
                              
                              
                                 
                                    b
                                 
                                 
                                    p
                                 
                                 
                                    a
                                 
                              
                              ⩽
                              
                                 
                                    d
                                 
                                 
                                    p
                                 
                                 
                                    a
                                 
                              
                              +
                              
                                 
                                    α
                                 
                                 
                                    p
                                 
                                 
                                    -
                                    a
                                    ,
                                    a
                                 
                              
                              
                                 
                                    
                                       
                                          
                                             
                                                d
                                             
                                             
                                                p
                                             
                                             
                                                -
                                                a
                                             
                                          
                                          -
                                          
                                             
                                                b
                                             
                                             
                                                p
                                             
                                             
                                                -
                                                a
                                             
                                          
                                       
                                    
                                 
                                 
                                    +
                                 
                              
                              
                              p
                              ∈
                              
                                 
                                    P
                                 
                                 
                                    a
                                 
                              
                           
                        
                     
                     
                        
                           (3)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       p
                                       =
                                       1
                                    
                                    
                                       
                                          
                                             P
                                          
                                          
                                             a
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    M
                                 
                                 
                                    lp
                                 
                                 
                                    a
                                 
                              
                              
                                 
                                    b
                                 
                                 
                                    p
                                 
                                 
                                    a
                                 
                              
                              ⩽
                              
                                 
                                    C
                                 
                                 
                                    l
                                 
                                 
                                    a
                                 
                              
                              
                              l
                              ∈
                              
                                 
                                    L
                                 
                                 
                                    a
                                 
                              
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    b
                                 
                                 
                                    p
                                 
                                 
                                    a
                                 
                              
                              ⩾
                              0
                              
                              p
                              ∈
                              
                                 
                                    P
                                 
                                 
                                    a
                                 
                              
                           
                        
                     
                  

By looking at constraint (2) one can see that considering competition cannot lead to a lower payoff than ignoring it if the model (1)–(4) is solved optimally. The single-airline DLP does not have the information about the competitor’s spill 
                        
                           
                              
                                 α
                              
                              
                                 p
                              
                              
                                 -
                                 a
                                 ,
                                 a
                              
                           
                           
                              
                                 
                                    
                                       
                                          
                                             d
                                          
                                          
                                             p
                                          
                                          
                                             -
                                             a
                                          
                                       
                                       -
                                       
                                          
                                             b
                                          
                                          
                                             p
                                          
                                          
                                             -
                                             a
                                          
                                       
                                    
                                 
                              
                              
                                 +
                              
                           
                        
                      on the right hand side of constraint (2) which makes the problem more restrictive in the single-airline model because 
                        
                           
                              
                                 d
                              
                              
                                 p
                              
                              
                                 a
                              
                           
                           ⩽
                           
                              
                                 d
                              
                              
                                 p
                              
                              
                                 a
                              
                           
                           +
                           
                              
                                 α
                              
                              
                                 p
                              
                              
                                 -
                                 a
                                 ,
                                 a
                              
                           
                           
                              
                                 
                                    
                                       
                                          
                                             d
                                          
                                          
                                             p
                                          
                                          
                                             -
                                             a
                                          
                                       
                                       -
                                       
                                          
                                             b
                                          
                                          
                                             p
                                          
                                          
                                             -
                                             a
                                          
                                       
                                    
                                 
                              
                              
                                 +
                              
                           
                        
                     . With the addition of spill of demand the payoffs in the competitive model will thus be tendentially higher than those in the single-airline DLP due to tendentially larger strategy spaces (upper bounds for the booking limits).

Note that the game based on the DLP model above is a so-called generalized Nash game because according to restriction (2) the players’ available strategies (booking limits) depend on the competitor’s behavior. A game based on the PNLP, for instance, is a “normal” Nash game because there the players’ strategies are not limited by the other’s behavior. Since we use a discrete demand distribution function, we can formulate the PNLP as shown below (see Talluri & van Ryzin, 2004, p. 96).

The new variable 
                        
                           
                              
                                 y
                              
                              
                                 ip
                              
                              
                                 a
                              
                           
                        
                      stands for the 
                        
                           i
                        
                     th capacity unit to be allocated to product p. 
                        
                           
                              
                                 I
                              
                              
                                 p
                              
                              
                                 a
                              
                           
                        
                      quantifies an upper bound on the booking limit for product p. The rest of the notation is the same as in the DLP.
                        
                           (5)
                           
                              max
                              
                              
                                 
                                    r
                                 
                                 
                                    a
                                 
                              
                              
                                 
                                    
                                       
                                          
                                             b
                                          
                                          
                                             p
                                          
                                          
                                             a
                                          
                                       
                                       ,
                                       
                                          
                                             b
                                          
                                          
                                             p
                                          
                                          
                                             -
                                             a
                                          
                                       
                                    
                                 
                              
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       p
                                       =
                                       1
                                    
                                    
                                       
                                          
                                             P
                                          
                                          
                                             a
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    π
                                 
                                 
                                    p
                                 
                                 
                                    a
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       =
                                       1
                                    
                                    
                                       
                                          
                                             I
                                          
                                          
                                             p
                                          
                                          
                                             a
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    pi
                                 
                                 
                                    a
                                 
                              
                              
                                 
                                    P
                                 
                                 
                                    a
                                 
                              
                              
                                 
                                    
                                       
                                          
                                             d
                                          
                                          
                                             p
                                          
                                          
                                             a
                                          
                                       
                                       +
                                       
                                          
                                             α
                                          
                                          
                                             p
                                          
                                          
                                             -
                                             a
                                             ,
                                             a
                                          
                                       
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         d
                                                      
                                                      
                                                         p
                                                      
                                                      
                                                         -
                                                         a
                                                      
                                                   
                                                   -
                                                   
                                                      
                                                         b
                                                      
                                                      
                                                         p
                                                      
                                                      
                                                         -
                                                         a
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             +
                                          
                                       
                                       ⩾
                                       i
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (6)
                           
                              subject
                              
                              to
                              
                              
                                 
                                    b
                                 
                                 
                                    p
                                 
                                 
                                    a
                                 
                              
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       =
                                       1
                                    
                                    
                                       
                                          
                                             I
                                          
                                          
                                             p
                                          
                                          
                                             a
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    y
                                 
                                 
                                    pi
                                 
                                 
                                    a
                                 
                              
                              
                              p
                              ∈
                              
                                 
                                    P
                                 
                                 
                                    a
                                 
                              
                           
                        
                     
                     
                        
                           (7)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       p
                                       =
                                       1
                                    
                                    
                                       
                                          
                                             P
                                          
                                          
                                             a
                                          
                                       
                                    
                                 
                              
                              
                                 
                                    M
                                 
                                 
                                    lp
                                 
                                 
                                    a
                                 
                              
                              
                                 
                                    b
                                 
                                 
                                    p
                                 
                                 
                                    a
                                 
                              
                              ⩽
                              
                                 
                                    C
                                 
                                 
                                    l
                                 
                                 
                                    a
                                 
                              
                              
                              l
                              ∈
                              
                                 
                                    L
                                 
                                 
                                    a
                                 
                              
                           
                        
                     
                     
                        
                           (8)
                           
                              
                                 
                                    b
                                 
                                 
                                    p
                                 
                                 
                                    a
                                 
                              
                              ⩾
                              0
                              
                              p
                              ∈
                              
                                 
                                    P
                                 
                                 
                                    a
                                 
                              
                           
                        
                     
                     
                        
                           (9)
                           
                              0
                              ⩽
                              
                                 
                                    y
                                 
                                 
                                    ip
                                 
                                 
                                    a
                                 
                              
                              ⩽
                              1
                              
                              p
                              ∈
                              
                                 
                                    P
                                 
                                 
                                    a
                                 
                              
                              ,
                              
                              i
                              ∈
                              
                                 
                                    I
                                 
                                 
                                    p
                                 
                                 
                                    a
                                 
                              
                           
                        
                     
                  

The objective function (5) maximizes the expected revenue based on the probability that total demand (initial plus spill demand) exceeds i units. Restriction (6) lets a product’s booking limit to be the sum of capacity units allocated to it. Restrictions (7) and (8) are equivalent to (3) and (4), respectively. Restriction (9) lets the variable 
                        
                           
                              
                                 y
                              
                              
                                 ip
                              
                              
                                 a
                              
                           
                        
                      be between 0 and 1. The structure of the problem leads to integer optimal solutions despite continuous decision variables—as in the DLP and under the same conditions.

The reason we developed our heuristic was that to the best of our knowledge no algorithm exists that can find an exact NE in revenue management games with the large size considered in this paper efficiently. Finding exact equilibria based on the complete payoff matrices of games with large strategy spaces and thus payoff matrices is a (computationally) hard and time consuming procedure.

With our heuristic we intend to make one of the first steps towards a more efficient exact algorithm for computing network revenue management games. In particular, we provide a new heuristic for approximating NE. Existing approaches with the same purpose are not satisfying since they—like exact algorithms—rely on the whole set of strategies and on the whole payoff matrices. In this sense we combine the disciplines of revenue management and algorithmic game theory.

Our heuristic starts with an iterative search for best responses like the approach by Jiang and Pang (2011). However, their algorithm ends with the termination of their iterative search which relies on a predefined stopping criterion. There, if the difference in booking limits of two consecutive iterations is at most as high as a predefined value, the players’ most current pure strategies are taken to build an approximate NE. However, working with a predefined convergence criterion is risky because one has to take a guess about this value which can be too far away from or too close to the optimum. The consequence is a possible loss in revenue due to too early termination or the failure to terminate at all. In the former case the algorithm would stop although a higher payoff is realizable while in the latter case a (too tight) convergence criterion might lead to an endless loop because it will never be reached.

For this reason our terminating condition is different. Our iterative search terminates when a player’s best response is chosen a second time. Also our approximate NE is not formed directly after the iterative search, as is the case with the algorithm by Jiang and Pang (2011). Instead we reduce the game after the iterative search and compute an approximate NE for the original game within the reduced game. This makes up the essence of our heuristic.


                     Jiang and Pang (2011, p. 316) point out that their algorithm converges for “normal” Nash games based on the PNLP “under suitable conditions”. Note that such suitable conditions need not prevail for the PNLP in general, so it will not necessarily converge to an exact NE in general. Furthermore, the authors could not prove convergence of their algorithm for generalized Nash games based on the DLP and thus left this issue open for further research. Given these results we could use any model (e.g. DLP, PNLP or RLP) for our computational study. However, for our purposes—investigating the difference in payoffs and illustrating our heuristic—the simplest model will suffice, so we chose the DLP for these purposes.

Reductions of the original game have been proposed before (see e.g. Gale, Kuhn, & Tucker, 1950; Conitzer & Sandholm, 2006). The former authors gave conditions for reducing a zero-sum game payoff matrix. After computing the solution for the reduced game the solution for the original game could be given. Conitzer and Sandholm (2006) used a technique to reduce a normal-form game and to find an exact NE for the original game by finding one in the reduced game. However, it was only applicable to certain games where, for a fixed strategy of a player, certain strategies give the opponent an equal payoff—like in some of the applications in Gale et al. (1950).

In contrast to the mentioned reduction algorithms our reduction scheme is applicable to general games. The drawback of our heuristic—the same as for the algorithm by Jiang and Pang (2011)—is that it finds a sample best response in every iteration. That means that there may be other best responses (different optimal solutions to the employed LP) with the same payoff for the respective player (which may lead to different reactions on the side of the competitor and result in a different outcome of the game). This type of game is called degenerated 
                     von Stengel (2007, p. 56).

This non-uniqueness of best responses can lead to problems in NE. E.g. if in an NE one player’s pure strategy has two best responses on the side of the opponent, every convex combination of these best responses is an NE as well. This, on the other hand, means that there are possibly infinitely many NE in a game. In order to quantify all NE of a game, it is sufficient to find the extreme points of these convex combinations—playing only one or the other best response. The game’s NE in these extreme points are called extreme NE 
                     von Stengel (2007, p. 66).

Our heuristic works as follows. First, the players search for best responses iteratively. In each iteration first one player chooses his best response to the other’s best reaction from the previous iteration then the second player reacts to this best response. The iterative search stops when a player’s best response is chosen a second time which would lead to a best response chosen before by the competitor. If a player’s best response is chosen twice in two consecutive iterations, a pure, exact NE is found. This is plausible because the players’ strategies in an exact NE are best responses to each other (Fudenberg & Tirole, 1991, p. 11).

However, if at least one iteration lies between the first and the second time a best response is chosen, a pure NE cannot be found through iterative search. In this case certain best responses would be chosen repeatedly by the players and the heuristic would “get stuck in a loop” and recur endlessly. Hence, we reduce the game to the payoff matrices based only on the best responses in the loop and select one of the NE in the reduced game as the (possibly mixed) approximate NE to the original game. Note that this NE can also be exact. However, this need not be and since we only compute an NE in an excerpt of the whole game, we do not know whether it is also an NE in the complete game. Thus we call the result approximate NE.

The selection of the reduced game’s final solution is based on the payoff dominance and risk dominance of certain NE similar to the dominance definitions by Harsanyi and Selten (1988). An NE E1 payoff-dominates an NE E2 if for both players 
                        
                           a
                           ∈
                           {
                           1
                           ,
                           -
                           1
                           }
                        
                      the utility in E1 is not worse than in E2, i.e. 
                        
                           
                              
                                 u
                              
                              
                                 a
                              
                           
                           (
                           E
                           1
                           )
                           ⩾
                           
                              
                                 u
                              
                              
                                 a
                              
                           
                           (
                           E
                           2
                           )
                        
                      and at least one player’s payoff in E1 is strictly higher than in E2, i.e. 
                        
                           
                              
                                 u
                              
                              
                                 a
                              
                           
                           (
                           E
                           1
                           )
                           >
                           
                              
                                 u
                              
                              
                                 a
                              
                           
                           (
                           E
                           2
                           )
                        
                     . For the risk dominance, assume that in the game formed by Tables 1 and 2
                     
                      there are two pure (payoff dominant) NE 
                        
                           
                              
                                 
                                    
                                       
                                          s
                                       
                                       
                                          1
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          1
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                           
                        
                      and 
                        
                           
                              
                                 
                                    
                                       
                                          s
                                       
                                       
                                          2
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          2
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                           
                        
                      with payoffs (A,
                     a) and (D,
                     d). Here the capital letters and the lower-case letters stand for the first player’s and the second player’s payoffs, respectively. The latter equilibrium risk-dominates the former if 
                        
                           (
                           C
                           -
                           D
                           )
                           (
                           c
                           -
                           d
                           )
                           ⩾
                           (
                           B
                           -
                           A
                           )
                           (
                           b
                           -
                           a
                           )
                        
                     .

In other words, E1 risk-dominates E2 if deviation from the former by both players would lead to at least an equal loss to the players as deviating from the latter. Note that our dominance conditions are weaker than those in Harsanyi and Selten (1988) where the inequalities are required to be strict.

Our heuristic consists of the following steps:
                        
                           
                              Step 1:
                           
                           Choose a starting player a and a starting strategy for this player, e.g. let 
                                 
                                    
                                       
                                          b
                                       
                                       
                                          p
                                       
                                       
                                          a
                                       
                                    
                                    =
                                    0
                                 
                               for all 
                                 
                                    p
                                    ∈
                                    P
                                 
                              .

Based on the solution of a, search for a best response for player 
                                 
                                    -
                                    a
                                 
                               e.g. by solving the model (1)–(4) for player 
                                 
                                    -
                                    a
                                 
                              .

Based on the solution of 
                                 
                                    -
                                    a
                                 
                              , search for a best response for player a e.g. by solving the model (1)–(4) for player a.

Repeat steps 2 and 3 until a player’s best response is chosen the second time. From here on the best responses define a “loop”.

Save the best responses in the loop and form the Best-Response Matrices (BRM). These are payoff matrices where the strategies consist of only the players’ best responses from the loop. Eliminate all other strategies from the players’ strategy sets and consider only the reduced game based on the BRMs.

If the BRMs consist of only one element for each player, an exact, pure NE has been found. Stop. Otherwise go to step 7.

Compute all extreme NE in the game based on the BRMs (e.g. with the Gambit software by McKelvey, McLennan, & Turocy (2010)).

Sort the NE in an arbitrary but fixed order.

According to one of the cases below, select one of these NE as the reduced game’s final solution and as the approximate NE of the original game.
                                 
                                    
                                       Case (8.1): There exists exactly one pure NE in the reduced game. Choose this NE as the reduced game’s final solution. Stop.


                                       Case (8.2): There exist multiple pure NE in the reduced game. Eliminate all payoff-dominated pure NE. If only one pure payoff-dominant NE remains, choose it as the reduced game’s final solution. Stop.

Otherwise check every pair 
                                          
                                             i
                                             ,
                                             
                                             j
                                          
                                        of NE in the list for risk dominance, eliminate all risk-dominated NE, and pick the remaining pure NE as the solution of the residual game. Here, 
                                          
                                             i
                                             ∈
                                             {
                                             1
                                             ,
                                             …
                                             ,
                                             n
                                             -
                                             1
                                             }
                                             ,
                                             
                                             j
                                             ∈
                                             {
                                             i
                                             +
                                             1
                                             ,
                                             …
                                             ,
                                             n
                                             }
                                             ,
                                             
                                             i
                                             <
                                             j
                                          
                                       , and n denotes the amount of NE in the reduced game. Stop.


                                       Case (8.3): No pure NE but exactly one mixed NE exists in the reduced game. Choose this NE as the final solution of the reduced game. Stop.


                                       Case (8.4): No pure NE but multiple mixed NE exist in the reduced game. Perform the same selection procedures as with multiple pure NE in case (8.2) (first payoff dominance then risk dominance) with the mixed NE and choose the remaining mixed NE as the reduced games’s solution. Stop.

Note that a player’s model will be solved optimally with certainty, independent of the competitor’s behavior, and hence every strategy of a player leads to a best response of the competitor. Hence, a best response will be chosen twice within finite time which means that our heuristic terminates within finite time.

However, we cannot say a priori what kind of Nash equilibrium will be found with our heuristic—a pure or an approximate one—because this result depends on the chosen starting strategy. See also the examples in Section 7. Hence, we cannot prove the convergence to exact pure NE for our heuristic. However, even for algorithms that provably find an exact NE and terminate after finding only one NE (e.g.the algorithms described in Lemke & Howson (1964) or McKelvey & McLennan (1996)) it cannot always be said a priori what type of Nash equilibrium they will find—a pure or a mixed one—because this result also depends on their starting strategy.

In this section we illustrate our heuristic (in Section 7.1) on one of those instances in which an exact NE could not be found in the computational study of Section 8. We chose a bimatrix representation of the game to visualize the growing matrices and the game’s reduction. We also point out the heuristic’s behavior in some special games in Section 7.2.

Consider network (d) in Fig. 2 with two fare classes. Here, 44 products can be offered. The prices charged for the products can be viewed in Table 26 in Appendix B in the online supplement of this paper. See also Appendix C in the online supplement for the players’ initial demands (Tables 31 and 32) as well as the interpretation of the employed strategies in this example (Table 33). Next, we step through the heuristic and explain how the (reduced) payoff matrices come about and how we compute the approximate NE.

In step 1 of the heuristic, we set the booking limits for all products of player 2 to be 0. In step 2, the competitor solves the model (1)–(4) with this information and chooses strategy 
                           
                              
                                 
                                    s
                                 
                                 
                                    1
                                 
                                 
                                    1
                                 
                              
                           
                         as a best response to the second player’s starting strategy generating a revenue of 885,335. In step 3, player 2 gets to optimize his revenue based on the solution of the previous step. His best response, strategy 
                           
                              
                                 
                                    s
                                 
                                 
                                    1
                                 
                                 
                                    2
                                 
                              
                           
                        , yields him a payoff of 773,730. Since we only search for best responses in each step, only one entry is added to each payoff matrix in each iteration. The payoff matrices after the first iteration are displayed in Tables 3 and 4
                        
                        . Note that the numbering of the strategies displayed says nothing about the order they would be set up if one wanted to enumerate all strategies. The index of a best response simply shows the order (in this case the iteration) in which this strategy was chosen by a player.


                        Step 4 of the heuristic consists of a repeated search for best responses through solving a variant of model (1)–(4) based on the competitor’s current best response. For this step we only display the growing matrices after each iteration below. After the second iteration the matrices look as in Tables 5 and 6
                        
                        .


                        Tables 7 and 8
                        
                         show the players’ payoff matrices after the third iteration. In this manner the matrices are filled with payoffs one iteration after the other. In iterations 4–11 the optimal values of the objective functions repeat themselves for both players amounting to 781,085 for player 1 and 766,860 for player 2, so we omit showing the growing matrices in these iterations. In iteration 12 player 1 chooses 
                           
                              
                                 
                                    s
                                 
                                 
                                    9
                                 
                                 
                                    1
                                 
                              
                           
                         as his best response to strategy 
                           
                              
                                 
                                    s
                                 
                                 
                                    11
                                 
                                 
                                    2
                                 
                              
                           
                        , so we have reached our stopping criterion.

In step 5, we form the best-response matrices consisting of the strategies the players chose in iterations 9–11. The entries that were not found by the iterative search were added as well. The best-response matrices of this example are shown in Tables 9 and 10
                        
                        .

Since the strategy 
                           
                              
                                 
                                    s
                                 
                                 
                                    9
                                 
                                 
                                    1
                                 
                              
                           
                         was not chosen twice in two consecutive iterations, the set of best responses—and hence the BRM—has more than one element per player. So, in step 6 of our heuristic we can say that no pure NE was found for the chosen starting strategy. In step 7, we compute all extreme NE of this game with an exact algorithm. The game has one pure and one mixed NE as Table 11
                         shows. The entries in the second through sixth columns show the ratios with which the players’ strategies are played in the respective NE.

Since NE 1 is the only pure NE in this game, it is chosen as the final solution to the reduced game and as the approximate NE for the original game as described in case 8.1 of the heuristic. The payoffs in this approximate NE (
                           
                              
                                 
                                    r
                                 
                                 
                                    1
                                 
                              
                              =
                              781
                              ,
                              085
                           
                         and 
                           
                              
                                 
                                    r
                                 
                                 
                                    2
                                 
                              
                              =
                              766
                              ,
                              320
                           
                        ) are as high as in this game’s exact NE. The strategies employed in the exact and the approximate equilibria are different, though. So we cannot say with certainty that the approximate NE is exact because the employed strategies might lead to different best responses (as they have in the iterative process) if e.g. one of the strategies would be considered as the starting strategy of the original game.

Consider the game described by Tables 12 and 13
                        
                        . If one of the strategies 
                           
                              
                                 
                                    s
                                 
                                 
                                    1
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                              
                                 
                                    s
                                 
                                 
                                    2
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                              
                                 
                                    s
                                 
                                 
                                    1
                                 
                                 
                                    2
                                 
                              
                              
                              or
                              
                              
                                 
                                    s
                                 
                                 
                                    2
                                 
                                 
                                    2
                                 
                              
                           
                         is chosen as the starting strategy in step 1 of our heuristic, the result would be the (exact) mixed NE in which both players play their first two strategies with a probability of 50% each and receive an expected payoff of 1.5 each. In order to find the pure NE 
                           
                              
                                 
                                    
                                       
                                          
                                             s
                                          
                                          
                                             3
                                          
                                          
                                             1
                                          
                                       
                                       ,
                                       
                                          
                                             s
                                          
                                          
                                             3
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                              
                           
                        , strategy 
                           
                              
                                 
                                    s
                                 
                                 
                                    3
                                 
                                 
                                    1
                                 
                              
                           
                         or 
                           
                              
                                 
                                    s
                                 
                                 
                                    3
                                 
                                 
                                    2
                                 
                              
                           
                         has to be chosen as the starting strategy (or one of these strategies would have to be a best response to at least one more strategy of the competitor). Thus, our heuristic might fail to find a game’s exact pure NE although one exists.

However, our heuristic is not the only procedure to suffer from this issue. As we pointed out in Section 6, even algorithms that provably find an exact NE and terminate after finding only one NE would end up finding the mixed NE in the above game if one of the strategies constituting the mixed NE is chosen as the starting strategy for these algorithms.

In order to raise the probability of finding an exact pure NE, one can re-run the procedure on hand with different starting strategies. We did this 100 and 1000 times, respectively with random starting strategies for our heuristic in Section 8.2.

However, since one does not know the payoff matrices’ structure at the beginning, re-running the procedure might not lead to an improvement. This is e.g. the case when no pure NE exists like in the game from Tables 14 and 15
                        
                        .

In this case, our heuristic would even fail to find the only exact mixed NE. In the course of the procedure the first player’s strategy 
                           
                              
                                 
                                    s
                                 
                                 
                                    2
                                 
                                 
                                    1
                                 
                              
                           
                         would be eliminated because it is never a best response to any of the second player’s strategies. However, in the only exact NE it is played with a probability of 50%, as Table 16
                         shows.

This result is still acceptable if the players’ strategies can be reduced after the iterative search and the heuristic terminates within a short time. However, if a game’s original payoff matrices have a “diagonally shifted” structure—which is shown in Tables 17 and 18
                        
                         for an extreme case—no reduction of the original game can be performed at all in step 5 of our heuristic.

In such cases, every strategy is a best response to one of the competitor’s strategies. The best-response matrices correspond to the original payoff matrices.

Following assumptions were made for the computational study:
                           
                              •
                              
                                 The competitors interact in a game of complete information.
                              

This is a quite common assumption made also in e.g. Netessine and Shumsky (2005), Li et al. (2008), as well as Jiang and Pang (2011). An airline e.g.can conclude from the type of aircraft employed by the competitor the number of seats available on its plane; prices are public information.


                                 Initial demand is exogenous and follows a Poisson distribution with mean 
                                 
                                    
                                       μ
                                    
                                 
                                 .
                              

Since demand for airline tickets is discrete,using a Poisson distribution is an intuitive assumption for our purpose. See e.g.
                                 Kimms and Müller-Bungart (2006) for a detailed literature review in support of this statement as well as a sophisticated procedure how to simulate stochastic demand as a non-homogeneous Poisson process.


                                 No buy-ups or buy-downs are allowed.
                              

After being refused by his preferred airline, a costumer requests the same product from the competitor. If he is refused there too, the customer is lost.


                                 No cancellations and no-shows are considered.
                              

Every customer who buys a ticket also appears at the time of departure.

Further, we let the competitors be completely symmetric except for the demand values. I.e.the products offered, the networks, the legs used, the capacities on the aircraft, prices for the products, and proportion of spill demand were the same for both players; 
                           
                              
                                 
                                    P
                                 
                                 
                                    a
                                 
                              
                              =
                              
                                 
                                    P
                                 
                                 
                                    -
                                    a
                                 
                              
                              ,
                              
                              
                                 
                                    L
                                 
                                 
                                    a
                                 
                              
                              =
                              
                                 
                                    L
                                 
                                 
                                    -
                                    a
                                 
                              
                              ,
                              
                              
                                 
                                    M
                                 
                                 
                                    lp
                                 
                                 
                                    a
                                 
                              
                              =
                              
                                 
                                    M
                                 
                                 
                                    lp
                                 
                                 
                                    -
                                    a
                                 
                              
                              ,
                              
                              
                                 
                                    C
                                 
                                 
                                    l
                                 
                                 
                                    a
                                 
                              
                              =
                              
                                 
                                    C
                                 
                                 
                                    l
                                 
                                 
                                    -
                                    a
                                 
                              
                              ,
                              
                              
                                 
                                    π
                                 
                                 
                                    p
                                 
                                 
                                    a
                                 
                              
                              =
                              
                                 
                                    π
                                 
                                 
                                    p
                                 
                                 
                                    -
                                    a
                                 
                              
                           
                        , and 
                           
                              
                                 
                                    α
                                 
                                 
                                    p
                                 
                                 
                                    -
                                    a
                                    ,
                                    a
                                 
                              
                              =
                              
                                 
                                    α
                                 
                                 
                                    p
                                 
                                 
                                    a
                                    ,
                                    -
                                    a
                                 
                              
                              =
                              1
                           
                        .

Given the network structures in Figs. 1 and 2, up to 22 O&D pairs have been considered (based on the network in Fig. 2d) with two and four fare classes for each of the O&D pairs. This gave us up to 88 products in total.

We set the capacities on the feeder legs connecting nodes O1, O2, and O3 with hub H1 to 120 seats each, the capacities on the leg connecting the hubs H1 and H2 to 400, and the capacities on the legs connecting hub H2 with nodes D1, D2 and D3 to 100 seats each.

We let the expected demand faced by each player for each of his products take on ten different values. This enabled us to consider 120 scenarios all together (six types of network with two sets of fare classes and ten values for the expected demands). The initial mean demands serving as bases for the random demands in the different scenarios are included in Tables 27–30 in Appendix B in the online supplement. We let the initial demands take on such values that the capacities on all aircraft were utilized to 100%. We then used these initial demands as mean values for the Poisson distribution and generated ten random pairs of demand for each value of initial demand.


                        Table 26 in Appendix B in the online supplement shows the prices we let both competitors charge for the products. Some of the assumptions for setting up the price table were taken from Klein (2007, chap. 5). The full fare (the revenue in the most expensive fare class 1) of a flight between the two hubs H1 and H2 was 2000. The full fares for the feeder flights were 20%, 15%, and 25% of these 2000 for the legs O1–H1 and H2–D1, O2–H1 and H2–D2, as well as O3–H1 and H2–D3, respectively. For a two-leg itinerary, a discount of 80% was granted on the feeder flight. On a three-leg itinerary, the discount was granted on both feeder flights. The lower fare classes 2–4 generated a revenue of 75%, 50%, and 25% of the first class revenue, respectively.

@&#RESULTS@&#

We used AMPL to implement the models and ran version 4.6.1 of the Gurobi solver as well as version 11.2.0 of the CPLEX solver to solve them. The study was done on a computer using an Intel Core i7-620M CPU (2.67gigahertz; 2cores), 8gigabytes memory and Windows 7 SP1 (64-bit).

Our first finding was that the game based on the DLP did not in general converge to an exact NE, although it did in most cases of our study. For 9 of the 120 scenarios—about 7.5% of the cases—Gurobi was not able to find a pure NE. On the other hand, CPLEX found a pure NE in all of the instances which was (1) due to multiple optimal solutions for the models and thus multiple best responses for each of the competitor’s strategies—which means that the game is degenerated—and (2) due to different pivoting (pricing) rules and/or algorithms employed by the two solvers in order to solve the models.

In those 111 cases where both solvers found an exact NE, it was identical in 83 cases. In the residual 28 cases, the solvers found different NE, 18 of which differed only in the employed strategies but generated the same payoffs to the players. Merely in 10 cases NE with different payoffs were found. However, the differences were not significant and amounted to less than 100 in most cases; a difference of not even 0.009% compared to the average revenue generated. Only once, in Network 2(b) with two fare classes, player 1 received 1080 (0.15%) less while player 2 received 1080 (0.15%) more in the Gurobi solution compared to the solution by CPLEX.

However, our intention was not to compare the two solvers as such or to investigate how and why different pricing rules influence the best responses and the NE. Instead, we used the pure NE provided by CPLEX as a benchmark for those instances in which Gurobi could not find one to evaluate the payoffs in our approximate NE.

Gurobi was not able to find exact NE once in network 2(b) with two fare classes, six times in network 2(d) with two fare classes, and twice in network 2(d) with four fare classes. Table 19
                         shows the players’ payoffs in the exact NE, the approximate NE, and the games’ BRM sizes for these instances. The payoffs of player 1 are displayed as 
                           
                              
                                 
                                    u
                                 
                                 
                                    (
                                    .
                                    )
                                 
                                 
                                    1
                                 
                              
                           
                         and the payoffs of player 2 are 
                           
                              
                                 
                                    u
                                 
                                 
                                    (
                                    .
                                    )
                                 
                                 
                                    2
                                 
                              
                           
                        . All approximate NE were pure and the players’ payoffs were as high as in the exact NE in all cases.

The players’ average payoffs in the fully rational setting—i.e. when both players took competition into account solving the model (1)–(4)—for all scenarios are shown in Tables 20–23
                        
                        
                        
                        . The tables also show the players’ average payoffs in the fully non-competitive setting—i.e.when both players ignored competition and optimized their payoffs using the single-airline DLP—and the settings when one of the players acted non-competitively and the other one was behaving rationally.

To the best of our knowledge no study has been conducted before to compare the players’ payoffs in these different settings. We intend to fill this gap. The few similar publications we found were Wilson (1995) and Li et al. (2008). The former author showed that revenue management games based on different revenue management systems are not zero-sum games. The latter authors found out that when the airlines have the choice between colluding and rivaling, this game results in a prisoners’ dilemma with rivaling being the dominant strategy.

In Tables 20–23, the entries in the cells’ lower left corners show the payoffs for player 1 while the entries in the upper right corners are the second player’s payoffs. We used only the solutions from the CPLEX solver as entries for this analysis. That way we had consistent values for the comparison for all settings and in particular could use only the exact NE for all instances in the rational/rational settings.

Since the models were solved optimally, acting rationally never resulted in a lower payoff than acting non-competitively. Acting rationally thus was a dominant strategy for both players, no matter what the competitor did. Acting rationally while the competitor was acting non-competitively lead to a higher gain compared to the situation when the competitor was also acting rationally in most cases. In our 120 instances, the gain from acting rationally instead of non-competitively had a mean of 0.2829% with a standard deviation of 0.549%. Symmetric NE were not found except by chance. Note that if the models were not solved optimally, acting rationally might have yielded worse results than acting non-competitively.

Usually both solvers needed only three or four iterations to find an NE or to get stuck in a loop. Gurobi and CLPEX needed four iterations in 48 and 51 instances, respectively to find an exact NE. Three iterations were needed by Gurobi in 30 instances and by CPLEX in 29 instances. Both solvers required five iterations in about half as many instances each. Seldom six or more iterations were necessary to reach the stopping criterion. The most amount of iterations needed was 21 by the Gurobi solver. The CPLEX solver used 17 iterations at most.

As pointed out earlier, our heuristic might fail to converge to an exact NE even if one exists. The CPLEX results show that an exact NE existed in all instances. For this reason we investigated an extension of our heuristic for those instances where Gurobi failed to find a pure NE in the iterative search.

We re-ran the heuristic 100 and 1000 times respectively for each of these instances using a randomly generated starting strategy for step 1 of the heuristic each time. For 100 re-runs we found pure NE in four instances of network 2(d) with two fare classes and in one instance of network 2(d) with four fare classes. All new NE differed only in the employed strategies from the respective NE found by CPLEX. Moreover, most of an instance’s NE found by Gurobi were the same. In one instance of network 2(d) with two fare classes two NE were made out with one appearing 54 out of 57 times. For all other instances, we could not find pure NE after 100 re-runs. Re-running the heuristic 1000 times yielded 3 pure NE for the instance of network 2(b) with two fare classes, 556 for the first instance of 2(d) with two fare classes, 475 for the third instance of this network, 33 for the fourth, and 578 for the fifth instance of this network. In the first instance of network 2(d) with four fare classes, 253 exact NE were found. In all other instances no exact NE were found even after 1000 re-runs.

It is also of interest how competition affects the players’ payoffs compared to the cooperative setting, e.g.when the airlines would cooperate within an alliance with a central decision maker. For the central decision maker, we solved a single-airline DLP where we added the players’ capacities on the legs and assumed the demand to be the sum of both players’ demands.


                        Table 24 in Appendix A of the online supplement shows the average revenues for both airlines in the centralized, the sums of revenues in the fully rational, and the fully non-competitive settings. Most of the NE were efficient because the payoffs in the competitive setting were usually as high as in the cooperative setting. The loss from competing was barely noticeable if the payoffs did not match exactly. Acting non-competitively had a larger negative effect on the payoffs. The central decision maker had a higher revenue of 0.7526% on average with a standard deviation of 5.0134% compared to the summed revenues in the non-competitive setting.

A very pleasant result was that both solvers needed only about one minute to compute all results presented here; the non-competitive optimization on both sides, non-competitive versus rational behavior, all 120 instances with rational behavior on both sides, and the centralized case. Adding a further constrained did not make a noticeable difference on the computation time either while producing slightly smaller revenues. We conclude this to be due to very good starting solutions generated by both solvers so that the restriction did not matter. The constraint set a lower bound on the booking limits forcing a minimum of capacity to be reserved for each product.

As the sizes of games increase, the number of NE tends to increase as well. For this reason it would be convenient to be able to evaluate the payoffs in the NE. One evaluation approach is to deduce bounds for the solutions.

As pointed out in Section 5, a player’s payoff in the competitive setting cannot be lower than in the non-competitive setting when the model (1)–(4) is solved optimally. Thus, a lower bound 
                           
                              
                                 
                                    LB
                                 
                                 
                                    NE
                                 
                                 
                                    a
                                 
                              
                           
                         for a player’s payoff in the competitive setting is his optimal non-competitive payoff 
                           
                              
                                 
                                    u
                                 
                                 
                                    a
                                    ∗
                                 
                              
                              
                                 
                                    
                                       
                                          
                                             b
                                          
                                          
                                             p
                                          
                                          
                                             a
                                          
                                       
                                    
                                 
                              
                           
                         calculated from solving the single-airline DLP:
                           
                              (10)
                              
                                 
                                    
                                       LB
                                    
                                    
                                       NE
                                    
                                    
                                       a
                                    
                                 
                                 =
                                 
                                    
                                       u
                                    
                                    
                                       a
                                       ∗
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                b
                                             
                                             
                                                p
                                             
                                             
                                                a
                                             
                                          
                                       
                                    
                                 
                                 .
                              
                           
                        
                     

Given this information and the payoff 
                           
                              
                                 
                                    u
                                 
                                 
                                    central
                                 
                                 
                                    ∗
                                 
                              
                           
                         from the central case (calculated as explained in the preceding section), we can derive an upper bound for a player’s payoff by subtracting the competitor’s lower bound from the central payoff:
                           
                              (11)
                              
                                 
                                    
                                       UB
                                    
                                    
                                       NE
                                    
                                    
                                       a
                                    
                                 
                                 =
                                 
                                    
                                       u
                                    
                                    
                                       central
                                    
                                    
                                       ∗
                                    
                                 
                                 -
                                 
                                    
                                       LB
                                    
                                    
                                       NE
                                    
                                    
                                       -
                                       a
                                    
                                 
                                 .
                              
                           
                        
                     

This follows from the fact that both players together—in the cooperative as well as the competitive situation—can expect a payoff of 
                           
                              
                                 
                                    u
                                 
                                 
                                    central
                                 
                                 
                                    ∗
                                 
                              
                           
                         at most. If one player then receives only his lower bound, the rest is available for the competitor.

With this in mind, we are after all able to provide a range in which the equilibrium payoffs will lie. We can also describe which proportion 
                           
                              
                                 
                                    ∊
                                 
                                 
                                    a
                                 
                              
                           
                         of the upper bound the lower bound amounts to or, in other words, how much lower the worst-case payoff is compared to the best-case payoff in the competitive setting:
                           
                              (12)
                              
                                 
                                    
                                       ∊
                                    
                                    
                                       a
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             UB
                                          
                                          
                                             NE
                                          
                                          
                                             a
                                          
                                       
                                       -
                                       
                                          
                                             LB
                                          
                                          
                                             NE
                                          
                                          
                                             a
                                          
                                       
                                    
                                    
                                       
                                          
                                             UB
                                          
                                          
                                             NE
                                          
                                          
                                             a
                                          
                                       
                                    
                                 
                                 .
                              
                           
                        
                     

But since this value depends on the individual game’s data, it is variable as opposed to the 
                           
                              ∊
                           
                         values in the respective 
                           
                              ∊
                           
                        -approximate NE mentioned in Section 3.2. This means that this value can also amount to 1 for a player if his demand for all products is 0 and the other player’s total demand exceeds his capacities. This would mean a lower bound of 0, an upper bound of 
                           
                              >
                              0
                           
                        , and a value 
                           
                              ∊
                              =
                              1
                           
                         for the player without any demand because of a higher cooperative (central) payoff than the sum of non-competitive payoffs.

The bounds for our computational study are shown in Table 25 in Appendix A in the online supplement. Except for two exceptions (network 1(b) with two fare classes and network 2(a) with four fare classes), the bounds for the payoffs in the NE were very tight with 
                           
                              
                                 
                                    ∊
                                 
                                 
                                    a
                                 
                              
                              <
                              0.01
                              (
                              1
                              %
                              )
                           
                        . On average, 
                           
                              
                                 
                                    ∊
                                 
                                 
                                    a
                                 
                              
                           
                         was 0.0141 over all networks for both players. However, the large values in network 2(a) with four fare classes falsify the results. Without them, the average amounted to only 0.0056 for both players.

Due to a twofold complexity of computing optimal seat allocations and exact NE, we presented a heuristic to save computation time and to compute approximate NE in general RM games based on linear models. Allowing to sacrifice an optimal solution (an exact NE) for a short computation time, we speed up the procedure. The use of linear models further reduces the computational effort by searching for best responses directly and avoiding setting up the complete strategy and payoff matrices. Finally, our heuristic does not rely on the type of game, as was the case with a previous approach, but is applicable to general games.

The essence of our heuristic is a reduction of the original game if an exact NE cannot be found by searching for best responses iteratively. In this case, some of the players’ best responses are chosen repeatedly and the heuristic gets stuck in a loop. The game is then reduced to a bi-matrix game based on the best response matrices where the strategies consist of only the best responses in the loop. In the reduced game all NE are calculated and one is selected—based on payoff dominance and risk dominance—as the final solution to the reduced game and as the approximate NE of the original game.

After illustrating the heuristic through an example, a computational study has been conducted with 120 instances all together presenting encouraging results. While we failed to find an exact NE with the Gurobi solver in 9 instances, the CPLEX solver found one in all of the instances. This enabled us to compare the payoffs from the approximate NE with the payoffs of the exact ones. All approximate NE were pure and the player’s payoffs in them were as high as the payoffs in the exact NE in all cases. This shows that our heuristic produces very good results.

In those games in which an exact NE could not be found by Gurobi, the sizes of the BRMs were encouragingly small. Three games had matrices with a size of two strategies per player. Two of the BRMs had three strategies for each player and three games were 
                        
                           4
                           ×
                           4
                        
                      games. In one instance the players had 13 strategies each.

We compared the competitive setting with the setting when both players ignored competition and optimized their own payoff non-competitively and with the case when one of the players acted non-competitively and the other one behaved rationally. Acting rationally never lead to lower payoffs than acting non-competitively, no matter what the competitor did. If a central decision maker optimized the booking limits, the revenues were even higher than in the fully competitive case in 15 instances. However, the difference amounted to only 0.0031% on average.

The computation time amounted to less than one minute for all results. An additional restriction introducing lower bounds for the products’ booking limits and reducing the solution space did not make a noticeable difference.

Finally, we re-ran the basic heuristic on those instances for which Gurobi failed to find an exact NE using a randomly generated starting strategy every time. After 100 reruns, Gurobi found exact NE in five instances which only differed from the exact NE found by CPLEX in the strategies employed. After 1000 reruns, three exact NE were found in a further instance. Next, we present some suggestions for further research.

There are several ways to construct more realistic scenarios. A natural extension of the problem considered here would be to allow buy-ups and buy-downs. Further, the competitors could employ aircraft with different capacities on the legs. This should be connected with an investigation of which aircraft (with which capacities) should be assigned to the individual legs when competition is taken into account leading to tendentially higher total demands. An interesting point to see would be how higher capacities on the aircraft influence the amount of denied demand and the competitors’ behavior in the NE. It could be further investigated how the equilibrium behavior changes with the players charging different prices for the same product. Values of 
                        
                           
                              
                                 α
                              
                              
                                 p
                              
                              
                                 -
                                 a
                                 ,
                                 a
                              
                           
                        
                      strictly less than 1 should then reflect the fact that not all customers switch to a competitor if denied a ticket once. E.g. the values of 
                        
                           
                              
                                 α
                              
                              
                                 p
                              
                              
                                 -
                                 a
                                 ,
                                 a
                              
                           
                        
                      could be described as functions of the competitors’ prices. Finally, round trips and “backward–directed” flights could be considered.

Computing an exact NE with existing algorithms might take too much time in practice except for very small instances. Our heuristic constitutes a compromise between computation time and solution quality because it sacrifices an optimal solution (an exact NE) in favor of a short computation time if an exact NE cannot be found through an iterative search. However, there are also limits to our heuristic because its result—similar to some exact algorithms—depends on the starting strategy and it hence does not find an exact pure NE with certainty. A possible extension of the presented heuristic is to check for alternative best responses in each iteration. This way degenerated games could be handled better and finding an exact NE would be more likely. Connected with this is also an investigation of the best responses under different pricing rules employed by the solvers. In the longer run, the heuristic should be tried to be extended to an exact algorithm which converges to exact NE with certainty.

@&#ACKNOWLEDGEMENTS@&#

This work was done with financial support from the German Research Foundation (DFG) under Grant No. KI 1272/2-2. We thank the editor, Robert Dyson, and two anonymous referees for useful comments about earlier versions of the paper.

Supplementary data associated with this article can be found, in the online version, at http://dx.doi.org/10.1016/j.ejor.2014.02.045.


                     
                        
                           
                        
                     
                  

@&#REFERENCES@&#

