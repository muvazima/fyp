@&#MAIN-TITLE@&#Vehicle-ID sensor location for route flow recognition: Models and algorithms

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Four mathematical formulations for the addressed sensor location problem are given.


                        
                        
                           
                           Our formulations improve existing ones since the feasible region is better defined.


                        
                        
                           
                           Two heuristic approaches, still missing in the literature, are proposed.


                        
                        
                           
                           The solution shows very good performances on an extensive set of instances.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Sensor location

Traffic flow estimation

Greedy algorithm

Tabu search

@&#ABSTRACT@&#


               
               
                  We address an important problem in the context of traffic management and control related to the optimum location of vehicle-ID sensors on the links of a network to derive route flow volumes. We consider both the full observability version of the problem, where one seeks for the minimum number of sensors (or minimum cost) such that all the route flow volumes can be derived, and the estimation version of the problem, that arises when there is a limited budget in the location of sensors. Four mathematical formulations are presented. These formulations improve the existing ones in the literature since they better define the feasible region of the problem by taking into account the temporal dimension of the license plate scanning process. The resulting mathematical formulations are solved to optimality and compared with the existing mathematical formulations. The results show that new and better solutions can be achieved with less computational effort. We also present two heuristic approaches: a greedy algorithm and a tabu search algorithm that are able to efficiently solve the analyzed problems and they are a useful tool able to find a very good trade-off between quality of the solution and computational time.
               
            

@&#INTRODUCTION@&#

The problem of locating sensors on the network to determine traffic flow volumes has been object in the past few years of growing interest. Problems in this class differentiate according to the type of sensors that need to be located (counting sensors, path-ID sensors, vehicle-ID sensors or a combination of them) and flows of interest (origin/destination flow volumes, arc flow volumes, route flow volumes, or a combination of them). Following the classification defined in the recent survey by Gentili and Mirchandani (2012), two main classes of problems can be identified in this context: (i) locating sensors to fully observe flow volumes on the network (Sensor Location Flow-Observability Problems), and (ii) locating sensors to estimate flow volumes on the network (Sensor Location Flow-Estimation Problems). This division derives from the observation that the location of sensors on a network (either on the nodes or on the links) can be translated into a system of linear equations where the set of variables corresponds to the unknown flows and the set of equations comes from the deployed sensors. When the resulting system has a unique solution, we say the system is fully observable and therefore, under the assumption of error free data, all the flows involved in the system are known (that is they are observable). The resulting location problem consists in determining the optimum deployment of sensors on the network that results in an observable system (Sensor Location Flow-Observability Problems) and therefore it allows to determine all the flow volumes of interest. Observability problems arise, for example, when either path-ID sensors or vehicle-ID sensors need to be located on the links of the network to determine route flow volumes or link flow volumes (Castillo, Gallego, Menéndez, & Rivas, 2010; Castillo, Calvino, Menendez, Jimenez, & Rivas, 2013; Castillo, Conejo, Menéndez, & Jiménez, 2008; Castillo, Conejo, Pruneda, & Solares, 2007; Castillo, Jiménez, Menéndez, & Conejo, 2008; Castillo, Nogal, Rivas, & Snchez-Cambronero, 2013; Gentili & Mirchandani, 2011, 2012, 2005; Hu, Peeta, & Chu, 2009; Mínguez, Sánchez-Cambronero, Castillo, & Jiménez, 2010; Ng, 2012; xue He, 2013). On the other hand, when the system is not observable (that is, it is underspecified), it admits an infinite number of solutions. The related location problem consists in determining how to optimally deploy sensors on the network so that the derived flow estimates are the best possible. Generally, underspecified systems arise when one is interested in determining origin-destination flow volumes by locating counting sensors on the links of the network or when there is a budget constraint that limits the number of sensors that can be located. This problem has been hugely studied in the literature (see for example, Chootinan, Chen, & Yang, 2005; Eisenman, Fei, Zhou, & Mahmassani, 2006; Elhert, Bell, & Grosso, 2006; Fei & Mahmassani, 2011; Yang, Yang, & Gan, 2006; Kim, Chung, & Chung, 2003; Lam & Lo, 1990; Li & Ouyang, 2011; Yang & Zhou, 1998; Zhou & List, 2010; Fei, Mahmassani, & Murray-Tuite, 2013; Simonelli, Marzano, Papola, & Vitiello, 2012).

In this paper we focus on both the observability and the estimation problems arising when vehicle-ID sensors are to be located on the links of the network to determine and/or estimate route flow volumes. Both the problems were defined in Castillo, Menéndez, and Jiménez (2008) and Mínguez et al. (2010) respectively, where the corresponding mathematical formulations were presented and some computational experiments were carried out to evaluate the quality of the resulting observed/estimated route flows. The experiments were performed by solving the proposed mathematical formulations by means of a solver. Since the problems are NP-hard only small networks were tested.

We further study the two problems and provide contributions both from a theoretical and an algorithmic point of view. In particular, we improve the existing mathematical formulations by adding some new constraints that better define the feasible set of solutions, we also provide efficient solution approaches, still missing in the literature, namely two different greedy approaches and a tabu search algorithm. The efficiency of the proposed approaches is tested on a set of benchmark tests by comparing the provided solutions with the optimal ones, when available, returned by the solver CPLEX.

The sequel of the paper is organized as follows. Next section describes the addressed problems. Section 3 contains the mathematical formulations of the problems and the existing results in the literature. Section 4 describes our solution approaches. Computational results are discussed in Section 5. Conclusions and further research are object of Section 6.

In this section we formally describe the addressed problems. We follow the general description given in Gentili and Mirchandani (2012) to introduce the Sensor Location Flow-Observability Problem and the Sensor Location Flow-Estimation Problem when vehicle-ID sensors are to be located on the links of a network.

Consider the network in Fig. 1
                      with five nodes and eight links, and assume vehicles on the network travel between 4 different Origin-Destination (OD) pairs. Each OD pair is connected by one or more routes, namely: the OD pair 
                        
                           
                              w
                              1
                           
                           =
                           
                              (
                              1
                              ,
                              5
                              )
                           
                        
                      is connected by route 
                        
                           
                              R
                              1
                           
                           =
                           
                              {
                              
                                 a
                                 1
                              
                              ,
                              
                                 a
                                 2
                              
                              ,
                              
                                 a
                                 3
                              
                              ,
                              
                                 a
                                 4
                              
                              }
                           
                        
                      and by route 
                        
                           
                              R
                              2
                           
                           =
                           
                              {
                              
                                 a
                                 1
                              
                              ,
                              
                                 a
                                 7
                              
                              ,
                              
                                 a
                                 4
                              
                              }
                           
                           ,
                        
                      the OD pair 
                        
                           
                              w
                              2
                           
                           =
                           
                              (
                              1
                              ,
                              4
                              )
                           
                        
                      is connected by route 
                        
                           
                              R
                              3
                           
                           =
                           
                              {
                              
                                 a
                                 1
                              
                              ,
                              
                                 a
                                 6
                              
                              ,
                              
                                 a
                                 8
                              
                              ,
                              
                                 a
                                 3
                              
                              }
                           
                           ,
                        
                      OD pair 
                        
                           
                              w
                              3
                           
                           =
                           
                              (
                              3
                              ,
                              2
                              )
                           
                        
                      is connected by route 
                        
                           
                              R
                              4
                           
                           =
                           
                              {
                              
                                 a
                                 3
                              
                              ,
                              
                                 a
                                 4
                              
                              ,
                              
                                 a
                                 5
                              
                              ,
                              
                                 a
                                 1
                              
                              }
                           
                        
                      and the OD pair 
                        
                           
                              w
                              4
                           
                           =
                           
                              (
                              4
                              ,
                              3
                              )
                           
                        
                      is connected by route 
                        
                           
                              R
                              5
                           
                           =
                           
                              {
                              
                                 a
                                 4
                              
                              ,
                              
                                 a
                                 5
                              
                              ,
                              
                                 a
                                 1
                              
                              ,
                              
                                 a
                                 2
                              
                              }
                           
                        
                     . Table 1
                      lists all the OD pairs, the corresponding OD trips, all the 5 routes, the corresponding route flow volumes, and all the link flow volumes. For example, the OD trips corresponding to OD pair w
                     1 are equal to 27 units, 15 of them use route R
                     1 and the remaining vehicles use route R
                     2; flow on link a
                     2 is equal to 37 units and it is equal to the sum of the flow of the routes that use that link, that is routes R
                     1 with flow 15 and route R
                     5 with flow equal to 22. The information shown in the table are given here for clarity of the exposition; we assume to know only the set of routes, while all the other information, namely, OD trips, link flows, and route flows are not known. Our aim is to locate Vehicle-ID sensors on the links of the network to derive the route flow volumes (listed in Table 1) that are not known. The location of a vehicle-ID sensor on a link of a network allows to univocally recognize a vehicle traveling on the network. When vehicle-ID sensors are located on the links we obtain flow volumes of the corresponding links. However, not only flows of the links can be obtained, but also, more detailed information can be derived when the same vehicle is detected on different links at different times. For example, let us suppose to locate three vehicle-ID sensors on our network example, say on links a
                     1, a
                     3 and a
                     4 (we say that links a
                     1, a
                     3 and a
                     4 are scanned). Since link a
                     1 is used by all the routes in the network, then the following equation can be derived:

                        
                           (1)
                           
                              
                                 
                                    (
                                    l
                                    i
                                    n
                                    k
                                    
                                    
                                    
                                       a
                                       1
                                    
                                    )
                                 
                                 
                                 
                                 
                                    f
                                    
                                       R
                                       1
                                    
                                 
                                 +
                                 
                                    f
                                    
                                       R
                                       2
                                    
                                 
                                 +
                                 
                                    f
                                    
                                       R
                                       3
                                    
                                 
                                 +
                                 
                                    f
                                    
                                       R
                                       4
                                    
                                 
                                 +
                                 
                                    f
                                    
                                       R
                                       5
                                    
                                 
                                 =
                                 66
                              
                           
                        
                     where 66 is the intercepted flow on link a
                     1, and 
                        
                           f
                           
                              R
                              i
                           
                        
                      denotes the unknown route flow volume of route Ri
                     . Similarly, for links a
                     3 and a
                     4, we can derive the two following equations:

                        
                           (2)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             
                                             
                                             
                                                a
                                                3
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                1
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                3
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                4
                                             
                                          
                                          =
                                          32
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             
                                             
                                             
                                                a
                                                4
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                1
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                2
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                4
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                5
                                             
                                          
                                          =
                                          56
                                       
                                    
                                 
                              
                           
                        
                     Moreover, if we consider jointly links a
                     1 and a
                     4, the following two additional equations related to the number of vehicles that are recognized on both links a
                     1 and a
                     4, can also be obtained:

                        
                           (3)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             s
                                             
                                             
                                             
                                                (
                                                
                                                   a
                                                   1
                                                
                                                ,
                                                
                                                   a
                                                   4
                                                
                                                )
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                1
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                2
                                             
                                          
                                          =
                                          27
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             s
                                             
                                             
                                             
                                                (
                                                
                                                   a
                                                   4
                                                
                                                ,
                                                
                                                   a
                                                   1
                                                
                                                )
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                4
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                5
                                             
                                          
                                          =
                                          29
                                       
                                    
                                 
                              
                           
                        
                     Indeed, when a vehicle is detected, the detection time is also known. Hence, if the same vehicle is detected first on link a
                     1 and subsequently on link a
                     4, then we can state that such a vehicle is using any route that contains both the links in such an order, in this case the two routes R
                     1 and R
                     2. While if a vehicle is first intercepted on link a
                     4 and subsequently on link a
                     1 then we can say it is using either route R
                     4 or route R
                     5. We refer to this type of equation as the joint recognition equation associated with a subset of vehicle-ID sensors. Considering all the possible equations associated with the location set 
                        
                           U
                           =
                           {
                           
                              a
                              1
                           
                           ,
                           
                              a
                              3
                           
                           ,
                           
                              a
                              4
                           
                           }
                           ,
                        
                      the following system of linear equations will result:

                        
                           (4)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             
                                             
                                             
                                                a
                                                1
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                1
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                2
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                3
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                4
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                5
                                             
                                          
                                          =
                                          66
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             
                                             
                                             
                                                a
                                                3
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                1
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                3
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                4
                                             
                                          
                                          =
                                          32
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             
                                             
                                             
                                                a
                                                4
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                1
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                2
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                4
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                5
                                             
                                          
                                          =
                                          56
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          (
                                          l
                                          i
                                          n
                                          k
                                          s
                                          
                                          
                                          
                                             (
                                             
                                                a
                                                1
                                             
                                             ,
                                             
                                                a
                                                4
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                1
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                2
                                             
                                          
                                          =
                                          27
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             s
                                             
                                             
                                             
                                                (
                                                
                                                   a
                                                   4
                                                
                                                ,
                                                
                                                   a
                                                   1
                                                
                                                )
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                4
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                5
                                             
                                          
                                          =
                                          29
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             s
                                             
                                             
                                             
                                                (
                                                
                                                   a
                                                   1
                                                
                                                ,
                                                
                                                   a
                                                   3
                                                
                                                )
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                1
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                3
                                             
                                          
                                          =
                                          25
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             s
                                             
                                             
                                             
                                                (
                                                
                                                   a
                                                   3
                                                
                                                ,
                                                
                                                   a
                                                   1
                                                
                                                )
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                4
                                             
                                          
                                          =
                                          7
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             s
                                             
                                             
                                             
                                                (
                                                
                                                   a
                                                   3
                                                
                                                ,
                                                
                                                   a
                                                   4
                                                
                                                )
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                1
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                4
                                             
                                          
                                          =
                                          22
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             s
                                             
                                             
                                             
                                                (
                                                
                                                   a
                                                   1
                                                
                                                ,
                                                
                                                   a
                                                   3
                                                
                                                ,
                                                
                                                   a
                                                   4
                                                
                                                )
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                1
                                             
                                          
                                          =
                                          15
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             s
                                             
                                             
                                             
                                                (
                                                
                                                   a
                                                   3
                                                
                                                ,
                                                
                                                   a
                                                   4
                                                
                                                ,
                                                
                                                   a
                                                   1
                                                
                                                )
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                4
                                             
                                          
                                          =
                                          7
                                          .
                                       
                                    
                                 
                              
                           
                        
                     These equations are those associated with some of the possible ordered subsets of these three sensors. In particular, the first three equations are associated each with a single sensor, the subsequent five equations are the joint recognition equations associated with the possible subsets of two sensors out of the three that are located, and, the remaining two equations are the joint recognition equations associated with the three sensors together. Note that, not all the possible ordered subsets are considered, indeed there does not exist any route in the network that contains the ordered pair (a
                     4, a
                     3). The same observation can be made for the ordered sets containing all the three sensors: (a
                     1, a
                     4, a
                     3), (a
                     3, a
                     1, a
                     4), (a
                     4, a
                     1, a
                     3) and (a
                     4, a
                     3, a
                     1).

System (4) has five unknown variables and five linear independent equations, hence the system admits a unique solution and all route flow volumes 
                        
                           
                              f
                              
                                 R
                                 i
                              
                           
                           ,
                        
                     
                     
                        
                           i
                           =
                           1
                           ,
                           …
                           ,
                           5
                        
                      can be univocally determined. We say, in this case, that the location set 
                        
                           U
                           =
                           {
                           
                              a
                              1
                           
                           ,
                           
                              a
                              3
                           
                           ,
                           
                              a
                              4
                           
                           }
                        
                      has associated a fully observable system of linear equations. In this context, one could wonder whether there exists another subset of three or less sensors such that the associated system of equations is fully observable and hence allows to determine all route flow volumes. The following location problem arises:


                     Vehicle-ID sensor location flow-observability problem:


                     What is the minimum number of vehicle-ID sensors to be located on the links of the network and where to locate them, such that the associated system of linear equations is fully observable, that is it allows to uniquely determine all route flow volumes?
                  

Note that, the above problem is feasible only when univocally recognition of all the route flows is possible. Indeed, when unique observability of flows is not possible, there exist many solutions, usually an infinite number, to the system of linear equations associated with a given location of sensors that reproduce the measured flows. This can happen into two cases: either when the system of linear equations associated with the location of vehicle-ID sensors on each link of the network does not have a unique solution or when the total number of sensors that can be located on the network is limited due to the presence of budget constraints. In this case, a different optimization problem can be stated as explained in the following.

Let us assume a limited number of sensors, say k, can be located on the network and all the systems associated with all the possible subsets of k sensors do not admit a unique solution. In this case, how can one decide when a location set is better than another? A possible way is (see Gentili & Mirchandani, 2012) to define a location-evaluation criterion g that associates with each location set U a value g(U) representing a measure of the quality of the flow estimates obtained by the system of equations associated with U. Given such a criterion, we can conclude that a location set U is better than another location set U′ if the value g(U) associated with U is better than the value g(U′) associated with U′. Following the approach suggested in Mínguez et al. (2010), for the case where vehicle-ID sensors need to be located, we could associate with the location set U an evaluation criterion g(U) that equals the total number of routes that can be univocally observed through the system associated with U. In this way, we could conclude that between two location sets U and U′, U is better than U′ if g(U) > g(U′). In our network example, let us consider the two locations sets 
                        
                           
                              U
                              1
                           
                           =
                           
                              {
                              
                                 a
                                 1
                              
                              ,
                              
                                 a
                                 4
                              
                              }
                           
                        
                      and 
                        
                           
                              U
                              2
                           
                           =
                           
                              {
                              
                                 a
                                 3
                              
                              ,
                              
                                 a
                                 5
                              
                              }
                           
                        
                     . The following system is associated with the location set U
                     1:

                        
                           (5)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             
                                                l
                                                i
                                                n
                                                k
                                                
                                                
                                             
                                             
                                                a
                                                1
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                1
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                2
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                3
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                4
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                5
                                             
                                          
                                          =
                                          66
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             
                                             
                                             
                                                a
                                                4
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                1
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                2
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                4
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                5
                                             
                                          
                                          =
                                          56
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             s
                                             
                                             
                                             
                                                (
                                                
                                                   a
                                                   1
                                                
                                                ,
                                                
                                                   a
                                                   4
                                                
                                                )
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                1
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                2
                                             
                                          
                                          =
                                          27
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             s
                                             
                                             
                                             
                                                (
                                                
                                                   a
                                                   4
                                                
                                                ,
                                                
                                                   a
                                                   1
                                                
                                                )
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                4
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                5
                                             
                                          
                                          =
                                          29
                                       
                                    
                                 
                              
                           
                        
                     and the following system is associated with the location set U
                     2:

                        
                           (6)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             
                                             
                                             
                                                a
                                                3
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                1
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                3
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                4
                                             
                                          
                                          =
                                          32
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             
                                             
                                             
                                                a
                                                5
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                4
                                             
                                          
                                          +
                                          
                                             f
                                             
                                                R
                                                5
                                             
                                          
                                          =
                                          29
                                       
                                    
                                 
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             l
                                             i
                                             n
                                             k
                                             s
                                             
                                             
                                             
                                                (
                                                
                                                   a
                                                   3
                                                
                                                ,
                                                
                                                   a
                                                   5
                                                
                                                )
                                             
                                             )
                                          
                                          
                                          
                                             f
                                             
                                                R
                                                4
                                             
                                          
                                          =
                                          7
                                       
                                    
                                 
                              
                           
                        
                     By solving system (5) route R
                     3 can be univocally determined and 
                        
                           g
                           (
                           
                              U
                              1
                           
                           )
                           =
                           1
                           ,
                        
                      while by solving system (6) we have 
                        
                           g
                           (
                           
                              U
                              2
                           
                           )
                           =
                           2
                        
                      since routes R
                     4 and R
                     5 can be univocally determined. Hence, we could conclude that, according to the defined evaluation criterion g, U
                     2 is better than U
                     1. Hence, given an evaluation function g, the following location problem can be defined:


                     Vehicle-ID sensor location flow-estimation problem:


                     If a given number k of vehicle-ID sensors are to be located on the network, where to locate them so that the associated evaluation criterion g is optimized?
                  

Both the described problems are NP-hard as it will be evident in the next section where the mathematical formulation is presented and the relationship with the set-covering problem is outlined.

In this section we provide the mathematical formulation of the two problems described in the previous section. To this aim we introduce the concept of scanning map (firstly defined in Castillo et al. (2008)) associated with a location set U. Let us return to our example network. Consider again the location set 
                        
                           
                              U
                              1
                           
                           =
                           
                              {
                              
                                 a
                                 1
                              
                              ,
                              
                                 a
                                 4
                              
                              }
                           
                        
                      and let us associate with each route Ri
                      the set of links 
                        
                           C
                           
                              R
                              i
                           
                        
                      of scanned links of the route (referred to in the sequel as scanning set associated with the route). That is: 
                        
                           
                              C
                              
                                 R
                                 1
                              
                           
                           =
                           
                              (
                              
                                 a
                                 1
                              
                              ,
                              
                                 a
                                 4
                              
                              )
                           
                           ,
                        
                     
                     
                        
                           
                              C
                              
                                 R
                                 2
                              
                           
                           =
                           
                              (
                              
                                 a
                                 1
                              
                              ,
                              
                                 a
                                 4
                              
                              )
                           
                           ,
                        
                     
                     
                        
                           
                              C
                              
                                 R
                                 3
                              
                           
                           =
                           
                              (
                              
                                 a
                                 1
                              
                              )
                           
                           ,
                        
                     
                     
                        
                           
                              C
                              
                                 R
                                 4
                              
                           
                           =
                           
                              (
                              
                                 a
                                 4
                              
                              ,
                              
                                 a
                                 1
                              
                              )
                           
                        
                      and 
                        
                           
                              C
                              
                                 R
                                 5
                              
                           
                           =
                           
                              (
                              
                                 a
                                 4
                              
                              ,
                              
                                 a
                                 1
                              
                              )
                           
                        
                     . Let us refer to this collection of sets as the scanning map associated with the location {a
                     1, a
                     4}. Analyzing this scanning map we can conclude: (i) if a vehicle is intercepted only on link a
                     1, then it is using route R
                     3; (ii) if a vehicle is intercepted first on link a
                     1 and later on link a
                     4 then it is using either route R
                     1 or R
                     2; finally, (iii) if a vehicle is intercepted first on link a
                     4 and later on link a
                     1 then it is using either route R
                     4 or R
                     5. That is, this scanning map allows to recognize univocally only vehicles of routes R
                     3, while for the remaining routes the same conclusion cannot be derived. Let us consider to locate one additional vehicle-ID sensor on link a
                     3, the new scanning map is: 
                        
                           
                              C
                              
                                 R
                                 1
                              
                           
                           =
                           
                              (
                              
                                 a
                                 1
                              
                              ,
                              
                                 a
                                 3
                              
                              ,
                              
                                 a
                                 4
                              
                              )
                           
                           ,
                        
                     
                     
                        
                           
                              C
                              
                                 R
                                 2
                              
                           
                           =
                           
                              (
                              
                                 a
                                 1
                              
                              ,
                              
                                 a
                                 4
                              
                              )
                           
                           ,
                        
                     
                     
                        
                           
                              C
                              
                                 R
                                 3
                              
                           
                           =
                           
                              (
                              
                                 a
                                 1
                              
                              ,
                              
                                 a
                                 3
                              
                              )
                           
                           ,
                        
                     
                     
                        
                           
                              C
                              
                                 R
                                 4
                              
                           
                           =
                           
                              (
                              
                                 a
                                 3
                              
                              ,
                              
                                 a
                                 4
                              
                              ,
                              
                                 a
                                 1
                              
                              )
                           
                        
                      and 
                        
                           
                              C
                              
                                 R
                                 5
                              
                           
                           =
                           
                              (
                              
                                 a
                                 4
                              
                              ,
                              
                                 a
                                 1
                              
                              )
                           
                        
                     . The location of a vehicle-ID sensor on link a
                     3 permits to distinguish among those vehicles that use route R
                     1 and those vehicles using route R
                     2, and, similarly, we can distinguish those vehicles that use route R
                     4 and those vehicles that use route R
                     3. From this example, it is clear that, by using the scanning map associated with a location set, it is possible to understand which route, among all, is uniquely identified. Based on the scanning map definition we can give an alternative definition of the two problems described in the previous section, the mathematical formulation presented in Castillo et al. (2008) and Mínguez et al. (2010) is based on these definitions.

Formally, let 
                        
                           G
                           =
                           (
                           V
                           ,
                           A
                           )
                        
                      be a network and R be a set of routes defined on the network. Given a location of vehicle-ID sensors on a subset U⊆A of links, we can define a scanning map 
                        
                           S
                           M
                           
                              (
                              U
                              )
                           
                           =
                           {
                           
                              C
                              
                                 R
                                 i
                              
                           
                           :
                           
                              C
                              
                                 R
                                 i
                              
                           
                           =
                           U
                           ∩
                           
                              R
                              i
                           
                           ,
                           i
                           =
                           1
                           ,
                           2
                           ,
                           …
                           ,
                           |
                           R
                           |
                           }
                           ,
                        
                      where each scanning set 
                        
                           C
                           
                              R
                              i
                           
                        
                      is associated with route Ri
                      and contains the scanned ordered list of links of the route. If all the scanning sets in the scanning map are not empty and are different, i.e. 
                        
                           
                              C
                              
                                 R
                                 i
                              
                           
                           ≠
                           
                              C
                              
                                 R
                                 j
                              
                           
                           ,
                        
                      for each 
                        
                           i
                           ≠
                           j
                           =
                           1
                           ,
                           2
                           ,
                           …
                           ,
                           |
                           R
                           |
                           ,
                        
                      then the scanning map allows to determine all the route flow volumes and we can define the alternative version of the observability problem given in the previous section


                     Vehicle-ID sensor location flow-observability problem:


                     What is the minimum number of vehicle-ID sensors to be located on the links of a network and where to locate them such that the associated scanning map allows observability of all route flow volumes?
                  

While, if we define the evaluation criterion g(U) as the number of routes that can be univocally determined through the scanning map associated with U, we can state the following alternative version of the estimation problem:


                     Vehicle-ID sensor location flow-estimation problem:


                     If a given number k of vehicle-ID sensors are to be located on the network, where to locate them so that the associated scanning map is such that the total number of univocally determined routes is maximized?
                  

For a matter of clarity of exposition, in the sequel we will refer to the Vehicle-ID Sensor Location Flow-Observability Problem as problem P1, and, to the Vehicle-ID Sensor Location Flow-Estimation Problem a problem P2.

Let us introduce two sets of binary variables: variable xa
                      associated with each link a ∈ A that it is equal to 1 if a vehicle-ID sensor is located on link a and it is equal to 0 otherwise; variable yab
                      associated with each pair of links a ≠ b ∈ A that is equal to 1 if a vehicle-ID sensor is located both on link a and link b and it is equal to 0 otherwise. The following set of parameters are also defined:

                        
                           -
                           
                              
                                 
                                    ρ
                                    
                                       R
                                       i
                                    
                                    a
                                 
                              : is equal to 1 if route Ri
                               contains link a and is equal to 0 otherwise;


                              
                                 
                                    ρ
                                    
                                       
                                          R
                                          i
                                       
                                       
                                          R
                                          j
                                       
                                    
                                    a
                                 
                              : is equal to 1 if link a is contained either in Ri
                               or in Rj
                               (not in both) and is equal to 0 otherwise;


                              
                                 
                                    σ
                                    
                                       
                                          R
                                          i
                                       
                                       
                                          R
                                          j
                                       
                                    
                                    
                                       a
                                       b
                                    
                                 
                              : is equal to 1 if links a and b are both in route Ri
                               and Rj
                               but they appear in a different order.

The mathematical formulation of problem P1, is the following [P1]:

                        
                           (7)
                           
                              
                                 min
                                 
                                    ∑
                                    
                                       a
                                       ∈
                                       A
                                    
                                 
                                 
                                    x
                                    a
                                 
                              
                           
                        
                     
                     
                        
                           (8)
                           
                              
                                 s
                                 .
                                 t
                                 .
                                 
                                    ∑
                                    
                                       a
                                       ∈
                                       A
                                    
                                 
                                 
                                    ρ
                                    
                                       R
                                       i
                                    
                                    a
                                 
                                 
                                    x
                                    a
                                 
                                 ≥
                                 1
                                 
                                 ∀
                                 
                                 
                                    R
                                    i
                                 
                                 ∈
                                 R
                              
                           
                        
                     
                     
                        
                           (9)
                           
                              
                                 
                                    ∑
                                    
                                       a
                                       ∈
                                       A
                                    
                                 
                                 
                                    ρ
                                    
                                       
                                          R
                                          i
                                       
                                       
                                          R
                                          j
                                       
                                    
                                    a
                                 
                                 
                                    x
                                    a
                                 
                                 +
                                 
                                    ∑
                                    
                                       a
                                       ≠
                                       b
                                       ∈
                                       A
                                    
                                 
                                 
                                    σ
                                    
                                       
                                          R
                                          i
                                       
                                       
                                          R
                                          j
                                       
                                    
                                    
                                       a
                                       b
                                    
                                 
                                 
                                    y
                                    
                                       a
                                       b
                                    
                                 
                                 ≥
                                 1
                                 
                                 ∀
                                 
                                 
                                    (
                                    
                                       R
                                       i
                                    
                                    ,
                                    
                                       R
                                       j
                                    
                                    )
                                 
                                 
                                    |
                                 
                                 
                                    R
                                    i
                                 
                                 <
                                 
                                    R
                                    j
                                 
                              
                           
                        
                     
                     
                        
                           (10)
                           
                              
                                 2
                                 
                                    y
                                    
                                       a
                                       b
                                    
                                 
                                 −
                                 
                                    x
                                    a
                                 
                                 −
                                 
                                    x
                                    b
                                 
                                 ≤
                                 0
                                 
                                 ∀
                                 
                                 a
                                 ≠
                                 b
                                 ∈
                                 A
                              
                           
                        
                     
                     
                        
                           (11)
                           
                              
                                 
                                    x
                                    a
                                 
                                 ∈
                                 
                                    {
                                    0
                                    ,
                                    1
                                    }
                                 
                                 
                                 ∀
                                 
                                 a
                                 ∈
                                 A
                              
                           
                        
                     
                     
                        
                           (12)
                           
                              
                                 
                                    y
                                    
                                       a
                                       b
                                    
                                 
                                 ∈
                                 
                                    {
                                    0
                                    ,
                                    1
                                    }
                                 
                                 
                                 ∀
                                 
                                 a
                                 ≠
                                 b
                                 ∈
                                 A
                              
                           
                        
                     The objective function (7) is the sum of the total number of the vehicle-ID sensors located on the network and is minimized. We refer to constraints (8) as covering constraints as they ensure there is at least one vehicle-ID sensor located on each route of the network. Constraints (9) are diversification constraints. These constraints ensure the scanning map associated with the location of vehicle-ID sensors allows full observability of the route flow volumes. Indeed, the sum on the left of the constraint ensures that for each couple of routes Ri
                      and Rj
                      the corresponding associated subsets 
                        
                           C
                           
                              R
                              i
                           
                        
                      and 
                        
                           C
                           
                              R
                              j
                           
                        
                      are different either because they contain at least one different link or, in case they contain the same set of links, they appear in different order. Constraints (10) are logical constraints linking the binary variables xa
                      and yab
                     . If yab
                      is equal to 1 then the constraint forces both xa
                      and xb
                      to be equal to 1, otherwise, if 
                        
                           
                              y
                              
                                 a
                                 b
                              
                           
                           =
                           0
                        
                      the minimization of the objective function drives the value of xa
                      and xb
                      to be equal to 0. The remaining constraints (11) and (12) require the variables to be binary.

The above mathematical formulation is different from the one provided in Castillo et al. (2008) where the set of diversification constraints did not take into account the order the scanned links appear in each set 
                        
                           C
                           
                              R
                              i
                           
                        
                     . Our diversification constraints (9) and (10) consider this order and hence the feasible set of solutions of the problem is now correctly described. In Section 5 the results of the two mathematical formulations are compared on different sets of instances. The results show that our modified version of the diversification constraints improves the final solution on those instances where the routes in the network are defined as subsets of circular paths like, for example, the two routes R
                     1 and R
                     4 in the network of Fig. 1 that are subsets of the circular path 
                        
                           P
                           =
                           {
                           
                              a
                              1
                           
                           ,
                           
                              a
                              2
                           
                           ,
                           
                              a
                              3
                           
                           ,
                           
                              a
                              4
                           
                           ,
                           
                              a
                              5
                           
                           }
                        
                     .

Let us consider the additional set of binary variables 
                        
                           z
                           
                              R
                              i
                           
                        
                      associated with each route Ri
                     , such that 
                        
                           z
                           
                              R
                              i
                           
                        
                      is equal to 1 if route Ri
                      is uniquely identified (that is observed) and it is equal to 0 otherwise. Let us also define a weight 
                        
                           w
                           
                              R
                              i
                           
                        
                      associated with route Ri
                      to define its relative importance (see for example Mínguez et al. (2010) for possible definitions of these weights). The mathematical formulation of problem P2 is then the following [P2]:

                        
                           (13)
                           
                              
                                 max
                                 
                                    ∑
                                    
                                       
                                          R
                                          i
                                       
                                       ∈
                                       R
                                    
                                 
                                 
                                    w
                                    
                                       R
                                       i
                                    
                                 
                                 
                                    z
                                    
                                       R
                                       i
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (14)
                           
                              
                                 s
                                 .
                                 t
                                 .
                                 
                                    ∑
                                    
                                       a
                                       ∈
                                       A
                                    
                                 
                                 
                                    ρ
                                    
                                       R
                                       i
                                    
                                    a
                                 
                                 
                                    x
                                    a
                                 
                                 ≥
                                 
                                    z
                                    
                                       R
                                       i
                                    
                                 
                                 
                                 ∀
                                 
                                 
                                    R
                                    i
                                 
                                 ∈
                                 R
                              
                           
                        
                     
                     
                        
                           (15)
                           
                              
                                 
                                    ∑
                                    
                                       a
                                       ∈
                                       A
                                    
                                 
                                 
                                    ρ
                                    
                                       
                                          R
                                          i
                                       
                                       
                                          R
                                          j
                                       
                                    
                                    a
                                 
                                 
                                    x
                                    a
                                 
                                 +
                                 
                                    ∑
                                    
                                       a
                                       ≠
                                       b
                                       ∈
                                       A
                                    
                                 
                                 
                                    σ
                                    
                                       
                                          R
                                          i
                                       
                                       
                                          R
                                          j
                                       
                                    
                                    
                                       a
                                       b
                                    
                                 
                                 
                                    y
                                    
                                       a
                                       b
                                    
                                 
                                 ≥
                                 
                                    z
                                    
                                       R
                                       i
                                    
                                 
                                 
                                 ∀
                                 
                                 
                                    (
                                    
                                       R
                                       i
                                    
                                    ,
                                    
                                       R
                                       j
                                    
                                    )
                                 
                                 
                                    |
                                 
                                 
                                    R
                                    i
                                 
                                 <
                                 
                                    R
                                    j
                                 
                              
                           
                        
                     
                     
                        
                           (16)
                           
                              
                                 2
                                 
                                    y
                                    
                                       a
                                       b
                                    
                                 
                                 −
                                 
                                    x
                                    a
                                 
                                 −
                                 
                                    x
                                    b
                                 
                                 ≤
                                 0
                                 
                                 ∀
                                 
                                 a
                                 ≠
                                 b
                                 ∈
                                 A
                              
                           
                        
                     
                     
                        
                           (17)
                           
                              
                                 
                                    ∑
                                    
                                       a
                                       ∈
                                       A
                                    
                                 
                                 
                                    x
                                    a
                                 
                                 ≤
                                 k
                              
                           
                        
                     
                     
                        
                           (18)
                           
                              
                                 
                                    x
                                    a
                                 
                                 ∈
                                 
                                    {
                                    0
                                    ,
                                    1
                                    }
                                 
                                 
                                 ∀
                                 
                                 a
                                 ∈
                                 A
                              
                           
                        
                     
                     
                        
                           (19)
                           
                              
                                 
                                    y
                                    
                                       a
                                       b
                                    
                                 
                                 ∈
                                 
                                    {
                                    0
                                    ,
                                    1
                                    }
                                 
                                 
                                 ∀
                                 
                                 a
                                 ≠
                                 b
                                 ∈
                                 A
                              
                           
                        
                     
                     
                        
                           (20)
                           
                              
                                 
                                    z
                                    
                                       R
                                       i
                                    
                                 
                                 ∈
                                 
                                    {
                                    0
                                    ,
                                    1
                                    }
                                 
                                 
                                 ∀
                                 
                                 
                                    R
                                    i
                                 
                                 ∈
                                 R
                              
                           
                        
                     The objective function (22) maximizes the total weight of the routes that can be univocally determined. Constraints (14) and (15) differ from those in the previous model [P1] since they ensure the coverage and the diversification of route Ri
                      only if the corresponding variable 
                        
                           z
                           
                              R
                              i
                           
                        
                      is equal to 1. Constraints (16) are the same as in the previous model. Constraint (17) ensures at most k vehicle-ID sensors are located on the links of the network. Variables are ensured to be binary by constraints (18)–(20). Note that, by fixing 
                        
                           
                              w
                              
                                 R
                                 i
                              
                           
                           =
                           1
                           ,
                        
                      ∀Ri
                      ∈ R, the problem looks for the maximization of the total number of routes that can be univocally determined.

As for the previous formulation [P1], the above formulation of the problem differs from the one provided in Mínguez et al. (2010) basically for the characterization of the diversification constraints (15) and (16) that, unlike the constraints defined in Mínguez et al. (2010), take indirectly into account the order the scanned links appear in the scanning sets.

In the sequel of the paper, we consider also two weighted variants of the above described problems that arise when an installation cost ca
                      is associated with each link. In particular, a variant of problem [P1] requires to determine the minimum cost vehicle-ID sensor location that ensures the observability of all the routes in the network. The corresponding model formulation is the following [P1b]:

                        
                           (21)
                           
                              
                                 min
                                 
                                    ∑
                                    
                                       a
                                       ∈
                                       A
                                    
                                 
                                 
                                    c
                                    a
                                 
                                 
                                    x
                                    a
                                 
                              
                           
                        
                     s.t. (8)–(12)
                  

If there is an available maximum budget Cmax
                      for the location of the sensors, then one could be interested in locating vehicle-ID sensors on the links of the network to maximize the total weight of the routes that can be univocally determined without exceeding the budget limit. In this case, the following model describes this variant [P2b]:

                        
                           (22)
                           
                              
                                 max
                                 
                                    ∑
                                    
                                       
                                          R
                                          i
                                       
                                       ∈
                                       R
                                    
                                 
                                 
                                    w
                                    
                                       R
                                       i
                                    
                                 
                                 
                                    z
                                    
                                       R
                                       i
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (23)
                           
                              
                                 s.t.
                                 
                                 
                                 
                                 
                                 
                                    ∑
                                    
                                       a
                                       ∈
                                       A
                                    
                                 
                                 
                                    c
                                    a
                                 
                                 
                                    x
                                    a
                                 
                                 ≤
                                 
                                    C
                                    
                                       m
                                       a
                                       x
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (24)
                           
                              
                                 (
                                 14
                                 )
                                 −
                                 (
                                 16
                                 )
                                 ,
                                 (
                                 18
                                 )
                                 −
                                 (
                                 20
                                 )
                              
                           
                        
                     
                  

In this section we present our solution approaches, namely two greedy approaches (Greedy1 and Greedy2) and a tabu search algorithm, to solve problems P1, P1b, P2 and P2b. We describe the approaches for problem P1 and subsequently we will explain how the approaches have been modified to solve problems P1b, P2 and P2b.

Before describing the greedy criterion used by our Greedy1 algorithm, let us introduce first some definitions and notations. Given a subset of links U⊆A, we associate with each link a ∈ A two different scores according to the number of additional constraints that can be satisfied if a is selected. In particular we define the two following criteria:

                           
                              •
                              The covering criterion: Cov(U, a) is the additional set of routes that can be covered if link a is selected (that is, the set of additional covering constraints that can be satisfied if link a is selected). The resulting score associated with link a is the size of this set, that is |Cov(U, a)|.

The diversification criterion: Div(U, a) is the set of additional diversification constraints that can be satisfied since either the term 
                                    
                                       
                                          ρ
                                          
                                             
                                                R
                                                i
                                             
                                             
                                                R
                                                j
                                             
                                          
                                          a
                                       
                                       
                                          x
                                          a
                                       
                                       ,
                                    
                                  or the term 
                                    
                                       
                                          σ
                                          
                                             
                                                R
                                                i
                                             
                                             
                                                R
                                                j
                                             
                                          
                                          
                                             a
                                             b
                                          
                                       
                                       
                                          y
                                          
                                             a
                                             b
                                          
                                       
                                       ,
                                    
                                  becomes equal to 1 in the summation of the constraints where xa
                                  or yab
                                  are involved, if a is selected. The resulting score associated with link a is the size of this set, that is |Div(U, a)|.

Let us return to our example in Fig. 1 for which the entire set of covering and diversification constraints of the mathematical formulation [P1] is given in Table 2.

Let us assume link a
                        4 is selected, that is 
                           
                              U
                              =
                              {
                              
                                 a
                                 4
                              
                              }
                              ,
                           
                         the corresponding value of the above criteria for each of the remaining links are listed in Table 3
                        . The covering constraints that are already satisfied by the selection of link a
                        4 are those related to routes: R
                        1, R
                        2, R
                        4 and R
                        5, while the satisfied diversification constraints are those corresponding to the pairs: {R
                        1, R
                        3}, {R
                        2, R
                        3}, {R
                        3, R
                        4} and {R
                        3, R
                        5}. Consider for example link a
                        2. Link a
                        2 has a covering score equal to 
                           
                              |
                              C
                              o
                              v
                              (
                              
                                 {
                                 
                                    a
                                    4
                                 
                                 }
                              
                              ,
                              
                                 a
                                 2
                              
                              )
                              |
                              =
                              0
                           
                         since there is no additional covering constraint that is satisfied if a
                        2 is selected, while the diversification score is equal to 5; indeed, the constraints related the pairs {R
                        1, R
                        2}, {R
                        1, R
                        4}, {R
                        2, R
                        5} and {R
                        4, R
                        5} are satisfied since variable 
                           
                              
                                 x
                                 
                                    a
                                    2
                                 
                              
                              =
                              1
                           
                         and the constraint related to the pair {R
                        1, R
                        5} is satisfied since variable 
                           
                              
                                 y
                                 
                                    
                                       a
                                       2
                                    
                                    
                                       a
                                       4
                                    
                                 
                              
                              =
                              1
                           
                        .

According to the two criteria we define an initial ordering of the links by ordering them in decreasing order with respect to the covering criterion for 
                           
                              U
                              =
                              ∅
                           
                        ; ties are broken according to a decreasing order of the diversification criterion for 
                           
                              U
                              =
                              ∅
                           
                        . We refer to this ranking as Initial Ranking. The Initial Ranking for our network example is: {a
                        1, a
                        4, a
                        3, a
                        5, a
                        2, a
                        6, a
                        7, a
                        8} (see the upper most Table in Fig. 2
                         where the values of the covering criterion and of the diversification criterion are showed for our example when 
                           
                              U
                              =
                              ∅
                           
                        ).

Our first greedy approach to solve problem P1, iteratively selects a link that maximizes the covering criterion; in case of ties the link that maximizes the diversification criterion is chosen; in case of ties the link having the best position in the Initial Ranking is selected. The algorithm stops when a feasible solution is obtained. A re-optimization step is also applied to the returned solution U. This step tries to eliminate redundant links. The details of this algorithm are given in Table 4. In the worst case, the running time required by this algorithm is O(|A|4|R|2); indeed in the worst case, the algorithm could, for each link, check the entire set of constraints, which could involve checking the entire set of yab
                         variables. Fig. 2 shows the steps of Greedy1 when it is applied to solve problem P1 on our example network of Fig. 1.

Given a subset of links U⊆A, our second greedy approach to solve problem P1, iteratively selects a link a that maximizes a greedy criterion W(U, a) that takes into account three main components: (i) length of the routes (in terms of number of links) that are covered if link a is selected, (ii) number of routes that can be univocally identified if link a is selected, and (iii) a measure of the total number of routes that still need to be differentiated if link a is selected. The algorithm stops when a feasible solution is obtained. The re-optimization step is applied to the returned solution U. The description of the greedy function is given next, while the pseudocode of the algorithm is given in Table 5.

Let us better describe the function W(U, a) that is the core of the greedy criterion at Step 2.1. Let R be the set of the routes on the given network and let U⊆A be a subset of links. Function W(U, a) favors the choice of those links that, on the one hand, improve most the feasibility of the solution, and, on the other hand, leave a set of routes that are easier to be differentiated. These aspects are taken into account by considering the sum of three weighted components

                           
                              
                                 
                                    W
                                    
                                       (
                                       U
                                       ,
                                       a
                                       )
                                    
                                    =
                                    
                                       ρ
                                       1
                                    
                                    
                                       f
                                       1
                                    
                                    
                                       (
                                       U
                                       ,
                                       a
                                       )
                                    
                                    +
                                    
                                       ρ
                                       2
                                    
                                    
                                       f
                                       2
                                    
                                    
                                       (
                                       U
                                       ,
                                       a
                                       )
                                    
                                    +
                                    
                                       ρ
                                       3
                                    
                                    
                                       f
                                       3
                                    
                                    
                                       (
                                       U
                                       ,
                                       a
                                       )
                                    
                                 
                              
                           
                        The first f
                        1(U, a) component is computed as follows:

                           
                              
                                 
                                    
                                       f
                                       1
                                    
                                    
                                       (
                                       U
                                       ,
                                       a
                                       )
                                    
                                    =
                                    
                                       ∑
                                       
                                          
                                             R
                                             i
                                          
                                          ∈
                                          C
                                          o
                                          v
                                          
                                             (
                                             U
                                             ,
                                             a
                                             )
                                          
                                       
                                    
                                    
                                       
                                          A
                                          v
                                          g
                                       
                                       
                                          
                                             |
                                          
                                          
                                             R
                                             i
                                          
                                          
                                             |
                                          
                                       
                                    
                                 
                              
                           
                        where |Ri
                        | is the total number of links contained in route Ri
                        , and Avg is the average number of links of each route Rj
                         ∈ R (for the example in Fig. 1 we have 
                           
                              A
                              v
                              g
                              =
                              
                                 19
                                 5
                              
                              =
                              3.8
                           
                        ). This criterion f
                        1(U, a) takes into account the total number of routes
                         that can be additionally covered if link a is selected. However, unlike the covering criterion, it also takes into account the length (in terms of number of links) of the additional routes that can be covered. Indeed, routes with a fewer number of links are less likely to be covered, hence, function f
                        1 favors the selection of those links that cover shortest routes.

The second component f
                        2(U, a) is the following:

                           
                              
                                 
                                    
                                       f
                                       2
                                    
                                    
                                       (
                                       U
                                       ,
                                       a
                                       )
                                    
                                    =
                                    
                                       |
                                       D
                                       
                                          (
                                          U
                                          ,
                                          a
                                          )
                                       
                                       |
                                    
                                    .
                                 
                              
                           
                        This component equals the total number of routes that can be univocally identified by the selection of link a. This criterion is slightly different from the diversification criterion introduced previously. Indeed, Div(U, a) is the set of diversification constraints that can be satisfied when link a is selected, while D(U, a) is the set of routes that are associated with a unique nonempty scanning set in the scanning map resulting after the selection of link a.

Finally, the last component is the following:

                           
                              
                                 
                                    
                                       f
                                       3
                                    
                                    
                                       (
                                       U
                                       ,
                                       a
                                       )
                                    
                                    =
                                    
                                       ∑
                                       
                                          
                                             
                                                
                                                   
                                                      C
                                                      
                                                         R
                                                         i
                                                      
                                                   
                                                   ∈
                                                   S
                                                   M
                                                   
                                                      (
                                                      U
                                                      ∪
                                                      
                                                         {
                                                         a
                                                         }
                                                      
                                                      )
                                                   
                                                   :
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      R
                                                      i
                                                   
                                                   ∉
                                                   D
                                                   
                                                      (
                                                      U
                                                      ,
                                                      a
                                                      )
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      R
                                                      i
                                                   
                                                   ∈
                                                   C
                                                   o
                                                   v
                                                   
                                                      (
                                                      ∅
                                                      ,
                                                      a
                                                      )
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          |
                                          M
                                          (
                                          
                                             C
                                             
                                                R
                                                i
                                             
                                          
                                          )
                                          |
                                       
                                    
                                    .
                                 
                              
                           
                        This component considers the scanning map that results after the selection of link a. In particular, for each route that is covered by link a, i.e. Ri
                         ∈ Cov(∅, a) and that is still not univocally determined, that is Ri
                        ∉D(U, a), the associated scanning set 
                           
                              C
                              
                                 R
                                 i
                              
                           
                         is considered. The total number of routes whose scanning set is equal to 
                           
                              
                                 C
                                 
                                    R
                                    i
                                 
                              
                              ,
                           
                         that is 
                           
                              
                                 |
                                 M
                              
                              
                                 (
                                 
                                    C
                                    
                                       R
                                       i
                                    
                                 
                                 )
                              
                              
                                 |
                                 =
                                 |
                              
                              
                                 {
                                 
                                    R
                                    j
                                 
                                 ∈
                                 R
                                 :
                                 
                                    R
                                    j
                                 
                                 ≠
                                 
                                    R
                                    i
                                 
                                 
                                 
                                 a
                                 n
                                 d
                                 
                                 
                                 
                                    C
                                    
                                       R
                                       j
                                    
                                 
                                 ≡
                                 
                                    C
                                    
                                       R
                                       i
                                    
                                 
                                 }
                              
                              
                                 |
                              
                           
                         is computed. Function f
                        3 computes the sum of the square root of the size of these sets. This criterion privileges the selection of those links that, if selected, split the resulting scanning map as much as possible.

These three functions are properly weighted with weights ρi
                        , 
                           
                              i
                              =
                              1
                              ,
                              2
                              ,
                              3
                           
                         to define the relative importance of the corresponding criterion. In our experiments we set 
                           
                              
                                 ρ
                                 1
                              
                              =
                              2
                              
                                 ρ
                                 2
                              
                              ,
                           
                        
                        
                           
                              
                                 ρ
                                 2
                              
                              =
                              100
                           
                         and 
                           
                              
                                 ρ
                                 3
                              
                              =
                              1
                           
                        . We chose these values to favor criterion f
                        1 first, then criterion f
                        2, and finally to take into account criterion f
                        3 in case of ties.


                        Fig. 3
                         shows the steps of Greedy2 when it is applied to solve problem P1 on the example of Fig. 1. In the example we set 
                           
                              
                                 ρ
                                 1
                              
                              =
                              
                                 ρ
                                 2
                              
                              =
                              
                                 ρ
                                 3
                              
                              =
                              1
                           
                        . Tables 6
                        
                        –8
                         show the scanning maps associated with each link and with sets 
                           
                              U
                              =
                              ∅
                              ,
                           
                        
                        
                           
                              U
                              =
                              {
                              
                                 a
                                 1
                              
                              }
                              ,
                           
                         and 
                           
                              U
                              =
                              {
                              
                                 a
                                 1
                              
                              ,
                              
                                 a
                                 3
                              
                              }
                           
                         respectively.

In the worst case, the running time required by this algorithm is O(|A|4|R|2); indeed in the worst case, the algorithm could, for each link, check the entire set of constraints, which could involve checking the entire set of yab
                         variables.

In this section we describe the tabu search approach we developed to solve problem P1. Given a feasible solution U⊆A for the problem, we defined the neighborhood Nh
                        (U) of this solution as the set of all the feasible solutions obtained from U by deleting at most h elements. Formally, the following neighborhood is considered:


                        
                           k
                         
                        -switch Neigborhood Nh
                           (U)
                     


                        A subset of links U′ ∈ Nh
                        (U) if and only if U′ is such that:
                        
                           
                              
                                 |
                              
                              
                                 U
                                 ′
                              
                              
                                 ∩
                                 U
                                 |
                                 ≥
                                 |
                                 U
                                 |
                                 −
                                 h
                                 ,
                              
                           
                         
                        that is the two subsets U and U′ share at least
                        
                           
                              |
                              U
                              |
                              −
                              h
                           
                         
                        links.
                     

Note that, a neighbor U′ ∈ Nh
                        (U) can be obtained from U by randomly deleting h elements and adding new elements to restore feasibility; such a procedure, referred to as FindNeighbor(U), is described in Table 9
                        
                        . The value of parameter h must be, on the one hand, large enough to ensure to find a neighbor U′ ∈ N(U)
                           h
                         such that U′ ≠ U, and, on the other hand, its value should vary according to the size of the instance. After a tuning phase we set 
                           
                              h
                              =
                              5
                              +
                              β
                              (
                              |
                              U
                              |
                              )
                              ,
                           
                         where β(|U|) is a random value between 0 and 
                           
                              
                                 |
                                 U
                                 |
                              
                              10
                           
                        .

The tabu list memorizes moves corresponding to feasible solutions. Ideally, the tabu list should store the subset of links of each solution that is contained in the tabu list. Since memorizing such a detailed information could be heavy from a memory point of view, we decided to store in the tabu list an hash key H(U) that is univocally associated with solution U. When the algorithm needs to verify whether a given solution is in the tabu list it looks for its hash key in the tabu list. To give an example, let us consider 
                           
                              U
                              =
                              {
                              
                                 a
                                 
                                    i
                                    1
                                 
                              
                              ,
                              
                                 a
                                 
                                    i
                                    2
                                 
                              
                              ,
                              …
                              ,
                              
                                 a
                                 
                                    i
                                    s
                                 
                              
                              }
                           
                         to be a feasible solution composed of |U| links, where 
                           
                              a
                              
                                 i
                                 j
                              
                           
                         is the identification ID of the link. The corresponding hash key H(U) is obtained by applying the following steps:

                           
                              •
                              Order the links in U in non decreasing order with respect to their ID and obtain: 
                                    
                                       
                                          a
                                          
                                             i
                                             
                                                j
                                                1
                                             
                                          
                                       
                                       ≤
                                       
                                          a
                                          
                                             i
                                             
                                                j
                                                2
                                             
                                          
                                       
                                       ≤
                                       ,
                                       …
                                       ,
                                       ≤
                                       
                                          a
                                          
                                             i
                                             
                                                j
                                                
                                                   |
                                                   U
                                                   |
                                                
                                             
                                          
                                       
                                    
                                 
                              


                                 
                                    
                                       γ
                                       (
                                       0
                                       )
                                       =
                                       1
                                    
                                 
                              


                                 
                                    
                                       γ
                                       
                                          (
                                          h
                                          )
                                       
                                       =
                                       
                                          α
                                          1
                                       
                                       
                                          a
                                          
                                             i
                                             
                                                j
                                                h
                                             
                                          
                                       
                                       +
                                       
                                          α
                                          2
                                       
                                       γ
                                       
                                          (
                                          h
                                          −
                                          1
                                          )
                                       
                                    
                                 
                              


                                 
                                    
                                       H
                                       (
                                       U
                                       )
                                       =
                                       γ
                                       (
                                       |
                                       U
                                       |
                                       )
                                    
                                 
                              

The first step is to order the links in the solution with respect to their ID. This step ensures that the hash key associated with a given solution does not depend on the order of the links in the solution. The hash key associated with U is a value computed by means of a recursive function γ( · ). The value γ(h) is associated with the link in position h, 
                           
                              h
                              =
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              |
                              U
                              |
                              ,
                           
                         in the ordered set U; such a value is computed according to the value of the recursive function 
                           
                              γ
                              (
                              h
                              −
                              1
                              )
                           
                         associated with the link in the previous position 
                           
                              h
                              −
                              1
                           
                        . The hash key associated with U is the value of the recursive function computed for the link in the last position. The values α
                        1 and α
                        2 are prime numbers. If the links were identified by prime numbers the resulting hash key would be unique. Of course, due to the size of the instance of the problem such an identification for the links is not possible. This results in a key that may not be unique. To limit the cases of different feasible solutions associated with the same hash key value, one would choose the values of α
                        1 and α
                        2 as large as possible. In our experimentation we set 
                           
                              
                                 α
                                 1
                              
                              =
                              4523
                           
                         and 
                           
                              
                                 α
                                 2
                              
                              =
                              31
                           
                        .

Finally, we chose to implement a tabu list with a fixed length equal to 8. The generic iteration step of our tabu search algorithm is described in Table 10 where U is the current feasible solution, U
                        * is the current incumbent solution, U
                        ** is the second incumbent solution and T is the current tabu list. The value of parameter p is fixed in our experiments equal to |U|*5. The initial feasible solution to start the first iteration of our tabu search is obtained by applying Greedy2. Our tabu search terminates if no improvement in the incumbent solution is obtained after |N|*150 iteration, where |N| is the total number of nodes of the input graph.

Our solution approaches described to solve problem P1 can be easily adapted also to solve problem P1b and therefore to take into account the cost ca
                         of installation of a sensor associated with each link.

The modifications for Greedy1 involve the definition of the Initial Ranking and of the greedy step criterion.

The Initial ranking is such that the links are ordered increasingly with respect to the link cost; ties are broken according first to a decreasing order with respect to the covering criterion (computed for 
                           
                              U
                              =
                              ∅
                           
                        ) and then
                        
                        
                         according to a decreasing order with respect to the diversification criterion (computed for 
                           
                              U
                              =
                              ∅
                           
                        ).

The greedy Step 2.1 of the Greedy1-P1 (in Table 4) becomes:

Step 2.1. While U is not a feasible solution

- find the link a ∈ A\U with 
                           
                              
                                 |
                                 C
                                 o
                                 v
                                 (
                                 U
                                 ,
                                 a
                                 )
                                 |
                              
                              
                                 c
                                 a
                              
                           
                         maximum;

- in case of ties select the one with 
                           
                              
                                 |
                                 D
                                 i
                                 v
                                 (
                                 U
                                 ,
                                 a
                                 )
                                 |
                              
                              
                                 c
                                 a
                              
                           
                         maximum;

- in case of ties select the one with the best position in the Initial Ranking.

The modifications for Greedy2 involve the greedy criterion W(U, a), that becomes 
                           
                              
                                 W
                                 (
                                 U
                                 ,
                                 a
                                 )
                              
                              
                                 c
                                 a
                              
                           
                        . Such a modification is also considered in the tabu search algorithm. Moreover, Step 3 in the ith iteration in the tabu search (in Table 10) is also changed to take into account the new objective function. It becomes:

3. If 
                           
                              c
                              
                                 (
                                 
                                    U
                                    ^
                                 
                                 )
                              
                              ≥
                              c
                              
                                 (
                                 
                                    U
                                    *
                                 
                                 )
                              
                           
                         and 
                           
                              H
                              (
                              
                                 U
                                 ^
                              
                              )
                              ∉
                              T
                           
                         and 
                           
                              c
                              
                                 (
                                 
                                    U
                                    ^
                                 
                                 )
                              
                              <
                              c
                              
                                 (
                                 
                                    U
                                    
                                       *
                                       *
                                    
                                 
                                 )
                              
                           
                         then 
                           
                              
                                 U
                                 
                                    *
                                    *
                                 
                              
                              ←
                              
                                 U
                                 ^
                              
                           
                        .

where 
                           
                              c
                              
                                 (
                                 U
                                 )
                              
                              =
                              
                                 ∑
                                 
                                    a
                                    ∈
                                    U
                                 
                              
                              
                                 c
                                 a
                              
                           
                         is the sum of the costs of the links in the set U.

The adaptation of the approaches to solve problem P2 and P2b requires to take into account a new objective function (the maximization of total weight of the routes that are observable) and the added budget constraint involving either the total number of sensors that can be located (problem P2) or the total cost of the sensors that can be located (problem P2b). All the changes are described for problem P2b and reported below. The same changes can be applied to solve problem P2 by setting 
                           
                              
                                 C
                                 
                                    m
                                    a
                                    x
                                 
                              
                              =
                              k
                           
                         and 
                           
                              
                                 c
                                 a
                              
                              =
                              1
                              ,
                           
                         ∀a ∈ A. Let z(U) define the total weight of the routes that can be univocally determined if vehicle-ID sensors are located on the links in U.

The modifications for Greedy1 algorithm involve the Initial Ranking and the Greedy criterion. When solving problem P2b the Initial Ranking takes into account the cost associated with each link and it is the same we considered for problem P1b, that is, the links are ordered increasingly with respect to the link cost; ties are broken according first to a decreasing order with respect to the covering Criterion (computed for 
                           
                              U
                              =
                              ∅
                           
                        ) and then according to a decreasing order with respect to the diversification criterion (computed for 
                           
                              U
                              =
                              ∅
                           
                        ). The greedy criterion to select link a is modified to take into account both the total number of additional constraints that can be satisfied, and the weights of the additional covered routes. In particular, the algorithm selects at each iteration a link a such that: (i) the budget constraint is not violated and (ii) the following quantity is maximum

                           
                              
                                 
                                    
                                       
                                          
                                             |
                                             C
                                             o
                                             v
                                             (
                                             U
                                             ,
                                             a
                                             )
                                             |
                                             +
                                             |
                                             D
                                             i
                                             v
                                             (
                                             U
                                             ,
                                             a
                                             )
                                             |
                                          
                                          
                                             c
                                             (
                                             a
                                             )
                                          
                                       
                                       +
                                       
                                          
                                             
                                                ∑
                                                
                                                   
                                                      R
                                                      i
                                                   
                                                   ∈
                                                   C
                                                   o
                                                   v
                                                   
                                                      (
                                                      U
                                                      ,
                                                      a
                                                      )
                                                   
                                                
                                             
                                             
                                                w
                                                
                                                   R
                                                   i
                                                
                                             
                                          
                                          
                                             w
                                             ¯
                                          
                                       
                                    
                                 
                              
                           
                        where the first element is the ratio between the sum of the covering and diversification scores over the cost of the link; while the second element is the ratio between the sum of the weights of the additional covered routes divided by the average route weight 
                           
                              
                                 w
                                 ¯
                              
                              =
                              
                                 
                                    
                                       ∑
                                       
                                          
                                             R
                                             i
                                          
                                          ∈
                                          R
                                       
                                    
                                    
                                       w
                                       
                                          R
                                          i
                                       
                                    
                                 
                                 
                                    |
                                    R
                                    |
                                 
                              
                           
                        . The pseudocode is given in Table 11.

Modifications of the Greedy2 algorithm involves the stopping criterion and the values of the parameters ρi
                        , 
                           
                              i
                              =
                              1
                              ,
                              2
                              ,
                              3
                           
                         associated to the three components that are involved in the greedy criterion. The new values assigned to parameters ρi
                         are: 
                           
                              
                                 ρ
                                 1
                              
                              =
                              100
                              ,
                           
                        
                        
                           
                              
                                 ρ
                                 2
                              
                              =
                              2
                              
                                 ρ
                                 1
                              
                           
                         and 
                           
                              
                                 ρ
                                 3
                              
                              =
                              1
                           
                        ; this setting favors the choice of those links that diversify most. Greedy2 stops when the given budget limit is reached. The same modifications apply to the tabu search algorithm. Moreover, Step 3 in the ith iteration in the tabu search is also changed to take into account the new objective function. It becomes:

3. If 
                           
                              z
                              
                                 (
                                 
                                    U
                                    ^
                                 
                                 )
                              
                              ≤
                              z
                              
                                 (
                                 
                                    U
                                    *
                                 
                                 )
                              
                           
                         and 
                           
                              H
                              (
                              
                                 U
                                 ^
                              
                              )
                              ∉
                              T
                           
                         and 
                           
                              z
                              
                                 (
                                 
                                    U
                                    ^
                                 
                                 )
                              
                              >
                              z
                              
                                 (
                                 
                                    U
                                    
                                       *
                                       *
                                    
                                 
                                 )
                              
                           
                         then 
                           
                              
                                 U
                                 
                                    *
                                    *
                                 
                              
                              ←
                              
                                 U
                                 ^
                              
                           
                        .

In this section we show the experimental results to test the performance of our approaches, in terms of solution quality and running time, and to evaluate when our proposed enhanced mathematical formulations provide a different optimal solutions than the formulations presented by Castillo et al. (2008) and Mínguez et al. (2010).

Since there do not exist benchmark instances in the literature, we generated two different classes of instances. The first one, referred to as Class 1, is a set of instances where the set of routes do not show the circular pattern behavior described in section 3. The second class of instances, referred to as Class 2, contains instances where the set of routes in the network show a circular behavior. These instances are useful to evaluate the effectiveness of our enhanced mathematical formulations in providing better solutions with respect to those provided by the existing mathematical formulations.

Class 1 and Class 2 instances are available upon request to the authors. On each instance, we compare the results returned by the mathematical models and by our Greedy 1, Greedy 2 and tabu search algorithms for each of the four problems. The greedy algorithms and the tabu search algorithm were coded in C and run on a 3.4 Ghz Intel i7 processor. The mathematical formulations were coded in AMPL and solved by means of the solver CPLEX 11.2. We fixed a threshold on the execution time of the CPLEX solver equal to 2 hours.

Class 1 set of instances are modified square grid graphs, where arcs are added randomly between pairs of vertices of the graph. In particular, a number of arcs equal to 10 percent of the total number of arcs of a regular grid were randomly added to each grid. We generated square grids whose dimensions are: 8 × 8, 10 × 10 and 15 × 15, for a total number of nodes equal to 
                           
                              n
                              =
                              64
                              ,
                              100
                           
                         and 225, respectively. For each grid we generated a fixed number |R| of routes such that 
                           
                              |
                              R
                              |
                              =
                              n
                              ,
                              2
                              n
                              ,
                              3
                              n
                              ,
                              4
                              n
                              ,
                              5
                              n
                           
                        . Hence, we generated 15 different scenarios. Costs on links were generated randomly from a uniform variable and they range from 1 to 5. Weights on routes were generated randomly from a uniform variable and they range from 10 to 100. For each scenario, five different instances were generated.

Class 2 set of instances are generated considering networks with a total number of nodes equal to 
                           
                              n
                              =
                              40
                              ,
                              80
                              ,
                              160
                              ,
                              240
                              ,
                              320
                              ,
                              400
                           
                         and corresponding number of OD pairs equal to 
                           
                              n
                              4
                           
                        . A fixed number |R| of routes was generated for each OD pair with 
                           
                              |
                              R
                              |
                              =
                              4
                              ,
                              8
                              ,
                              10
                              ,
                              16
                           
                        . We then generated 24 different scenarios. Costs on links were generated randomly from a uniform variable and they range from 1 to 5. Weights on routes were generated randomly from a uniform variable and they range from 10 to 100. For each scenario, ten different instances were generated.
                        
                        
                        
                     

@&#RESULTS@&#

All the results are showed in Tables 12–18. Since computational times and memory requirements to solve the mathematical models hugely increase with the size of the instances, we report the results of our models for the first 40 instances of Class 1 and the first 60 instances of Class 2, being the time limit reached for problem P2 and problem P1 for higher dimensional instances. The detailed results on each instance on these limited set, returned by the mathematical models are available upon request to the authors. Comparisons of the solutions returned by our heuristic approaches with the optimal solution (when available), on these limited set of instances, are reported in Tables 13 and 14 Finally, comparisons of the quality of the solutions returned by our heuristic approaches on the entire set of instances are given in Tables 15–18.

To compare the effectiveness of the new set of diversification constraints Table 12 shows, for each problem and each class of instances, the percentage of instances where our mathematical formulation returned a better solution than the one returned by the models in the literature. Hence, for example, the percentage of instances of Class 2 where the solution of our mathematical formulation of problem P1 returned a different (and hence better) solution that the one returned by the existing mathematical formulation is equal to 80 percent, and on the remaining 20 percent of the instances the two mathematical formulations returned the same solution. The new set of diversification constraints reveals to be more effective in diversifying routes related to Class 2 instances than those of Class 1 instances. Note that, the budget constraints for problem P2b makes the new diversification constraints not effective at all.

The analysis of the results in the detailed tables downloadable from the website reveal the average gap between the optimum solution is 1 percent on Class 1 instances and 3 percent on the instances of Class 2. Our proposed models require more computational time to be solved than those existing in the literature. This was an expected result being the total number of variables and of constraints greater. Additionally, comparing the computational times of the instances in Class 1 and Class 2 with the same number of routes, we can observe that higher computational times are required to solve instances of Class 1 than those of Class 2, revealing that graphs where the routes show a circular pattern are easier to deal with as it was expected. Among the four problems, problem P1b and problem P2b seem easier (in terms of required computational time) to be solved than problems P1 and P2. In particular, the time limit to solve our mathematical formulation of problem P1, P1b, P2 and P2b on Class 1 instances was reached, respectively, on 10, 0, 33, 1 instances out of 40. Moreover, our mathematical formulation was not able to find a feasible solution within the given time limit for Problem P2 on two instances (namely, instance 37 and instance 39) of Class 1. While, the time limit to solve our mathematical formulation of the four problems was never reached on the 60 considered instances of Class 2 when solving problems P1, P1b, and P2b, while it was reached on 8 instances out of 60 when solving problem P2. This can be explained with the fact that having different cost associated with the arcs allows, on the one hand, to obtain better bounds that allow to cut off part of the branch and bound tree (for problem P1b), while, on the other hand, to prune the tree thanks to the budget constraint (for problem P2b).


                        Tables 13 and 14 compare the quality of the solutions provided by Greedy1, Greedy2 and the tabu search algorithm with the optimum solution (when available) on the 40 instances of Class 1 and the 60 instances of Class2 on which we run the mathematical formulations to optimality. In each table, the first three columns report the characteristics of each scenario: scenario ID, the number of nodes (n) and the number of routes (r). For each algorithm, the tables report the average values taken on the tested instances of the relative gap between the returned solution and the optimum solution, when available. In particular, this gap is computed as the ratio 
                           
                              
                                 U
                                 B
                                 −
                                 O
                                 p
                                 t
                                 i
                                 m
                                 u
                                 m
                              
                              
                                 U
                                 B
                              
                           
                         for problem P1 and P1b, and 
                           
                              
                                 O
                                 p
                                 t
                                 i
                                 m
                                 u
                                 m
                                 −
                                 L
                                 B
                              
                              
                                 L
                                 B
                              
                           
                         for problem P2 and P2b, where UB and LB are the value of the bounds returned by our algorithms. Whenever at least one instance of the scenario has not been solved to optimality by the solver CPLEX within the time limit of 7200 seconds, the term NA (Not Available) appears in the tables. In such case, of course, no gap value is reported for all the tested algorithms.


                        Tables 15–18 compare the solutions and the computational time of Greedy1, Greedy2 and the tabu search algorithm on all the instances of Class1 and Class2. In each table, the first three columns report the characteristics of each scenario: scenario ID, the number of nodes (n) and the number of routes (r). For each algorithm, the tables report the average values for each scenario taken on the tested instances (five instances for Class 1 and 10 Instances for Class 2) of the bound and of the computational time (in seconds).

The percentage gap from the optimum of the tabu search is always better than those showed by Greedy1 and Greedy2 as it is expected. This better performance is, however, paid in terms of greater computational time as it is evident by the analysis of tables 15 –18. The percentage gap of the tabu search ranges between 0 percent and 2 percent when solving problems P1 and P1b. These gaps are higher when solving problem P2 and P2b. In particular, the gaps for problem P2 are not available for many of the instances of Class 1 (table 13) while the gaps for problem P2 on instances of Class 2 varies between 4 percent and 6 percent (table 14). Finally, the tabu search, when solving problem P2b has a gap that ranges from 8 percent to 61 percent on Class 1 instances and a gap that ranges from 10 percent to 15 percent on Class 2 instances. The solution returned by Greedy2 algorithm is consistently better than that returned by Greedy1. The two algorithms are however comparable in terms of computational times which are always less than one second, but for Greedy1 algorithm on scenarios 20, 23 and 24 on instances of Class 2 for problem P2 and on scenarios 16,20,22–24 on instances of Class 2 for problem P2b (table 18).

@&#CONCLUSIONS@&#

We addressed an important problem in the context of traffic control and management related to the optimum location of vehicle-ID sensors on the links of a network to derive route flow volumes. We considered both the full observability version of the problem where one seeks for the minimum number of sensors (or minimum cost) such that all the route flow volumes can be derived and the estimation version of the problem that arises when there is a limited budget in the location of sensors. Our contribution is both theoretical and algorithmic. We improved the existing mathematical formulations of the four addressed problems by better describing the feasible region. Being the problems NP-complete, we proposed three solution approaches (still missing in the literature) to heuristically solve the problems: two greedy algorithms and a tabu search metaheuristic. We tested our approaches on two different set of instances to better evaluate the quality of solutions provided by our algorithms and by the mathematical models when the set of routes show a circular pattern behavior or not.

The proposed analysis is developed under the assumption (common to other papers existing in the literature Castillo et al. (2008), Mínguez et al. (2010)) that the information regarding OD routes is correct and complete. An interesting development of this research is now focused on the analysis of the sensitivity of the solutions with respect to the level of knowledge of the OD routes.

@&#REFERENCES@&#

