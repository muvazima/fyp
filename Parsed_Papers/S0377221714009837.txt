@&#MAIN-TITLE@&#Hybrid algorithms for the vehicle routing problem with clustered backhauls and 3D loading constraints

@&#HIGHLIGHTS@&#


               

               
                  
                     
                        
                           
                           The paper deals with a new integrated routing and loading problem (3L-VRPCB).


                        
                        
                           
                           3L-VRPCB integrates vehicle routing with clustered backhauls and packing of 3D items.


                        
                        
                           
                           Two metaheuristics are proposed based on neighborhood search and tree search.


                        
                        
                           
                           Both metaheuristics are tested by means of 95 new 3L-VRPCB benchmark instances.


                        
                        
                           
                           Better metaheuristic shows also good results for well-known instances of 3L-CVRP.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Transportation

Vehicle routing with clustered backhauls

Large neighborhood search

Variable neighborhood search

@&#ABSTRACT@&#


               
               
                  In this paper, we extend the vehicle routing problem with clustered backhauls (VRPCB) to an integrated routing and three-dimensional loading problem, called VRPCB with 3D loading constraints (3L-VRPCB). In the VRPCB each customer is either a linehaul or a backhaul customer and in each route all linehaul customers must be visited before any backhaul customer. In the 3L-VRPCB, each customer demand is given as a set of 3D rectangular items (boxes) and the vehicle capacity is replaced by a 3D loading space. Moreover, some packing constraints, e.g. concerning stacking of boxes, are also integrated. A set of routes of minimum total length has to be determined such that each customer is visited once. For each route two packing plans have to be provided that stow all boxes of all visited linehaul and backhaul customers, respectively, taking into account the additional packing constraints. We propose two hybrid algorithms for solving the 3L-VRPCB, each of them consisting of a routing and a packing procedure. The routing procedures follow different metaheuristic strategies (large vs. variable neighborhood search) and in both algorithms a tree search heuristic is responsible for packing boxes. Extensive computational experiments were carried out using 95 3L-VRPCB benchmark instances that were derived from well-known VRPCB instances. Good results are also achieved for the capacitated vehicle routing problem with 3D loading constraints as a special case of the 3L-VRPCB.
               
            

@&#INTRODUCTION@&#

Integrated vehicle routing and loading problems arise in transportation logistics if companies are interested in optimizing both the routing of vehicles and the corresponding loading of goods. In 2006, Gendreau et al. first formulated and solved an integrated routing and loading problem, namely the capacitated vehicle routing problem (CVRP) with three-dimensional (3D) loading constraints (abbreviated as 3L-CVRP). In contrast to the classical CVRP, customer demands are represented as sets of parallelepipeds (called boxes) and the scalar capacity of a vehicle is replaced by a 3D rectangular loading space. Moreover, several packing constraints often occurring in real-world settings, e.g. concerning the stacking of goods, are taken into account. Meanwhile, other solution methods have been proposed for the 3L-CVRP as well as for the related routing and loading problem with time windows (see Section 2). However, not all basic routing problems (cf. Toth & Vigo, 2002) have been combined with a 3D loading problem so far.

One of them is the vehicle routing problem with backhauls (VRPB) that includes two types of customers, namely linehaul customers that receive goods from a central depot and backhaul customers that send goods back to the depot. We focus on the VRPB variant with clustered backhauls (cf. Parragh, Doerner, & Hartl, 2008). Each customer is either a linehaul customer or a backhaul customer. One has to determine a set of routes for a given number of homogeneous vehicles such that each customer demand is satisfied and the total traveled distance is minimized. The routes have to satisfy the following constraints:

                        
                           (1)
                           Each customer is visited exactly one time.

Each route starts and ends at the central depot.

Each route contains at least one linehaul customer.

In each route all linehaul customers are visited before the backhaul customers (if any).

The capacity of the vehicles has to be taken into account, i.e., neither the sum of the (scalar) demands of the linehaul customers nor the sum of the demands of the backhaul customers can exceed the vehicle capacity.

Each vehicle performs just one trip, i.e. the number of routes is given by the number of vehicles.

In this paper, we extend the vehicle routing problem with clustered backhauls (VRPCB) to an integrated routing and loading problem, called VRPCB with 3D loading constraints (3L-VRPCB). Applications of the VRPCB can be found, e.g. in the distribution of groceries and in the handling of returnable bottles (cf. Ropke & Pisinger, 2006b). Extending the VRPCB to an integrated routing and loading problem leads to a more realistic modeling for practical routing scenarios with backhauls.

Our approach is similar to Gendreau, Iori, Laporte, and Martello (2006); in particular the VRPCB is combined with the same packing constraints as the CVRP. We then propose two hybrid algorithms for the 3L-VRPCB each consisting of two separate procedures for routing and packing. For the first hybrid algorithm the routing procedure by Ropke and Pisinger (2006a) for the Pickup and Delivery Problem with Time Windows (PDPTW) has been adopted that is based on the Adaptive Large Neighborhood Search (ALNS) metaheuristic. For the second hybrid algorithm a Variable Neighborhood Search (VNS) routing procedure has been developed. Both hybrid algorithms integrate the 3D packing procedure by Bortfeldt (2012) that performs an incomplete tree search (TRS).

Extensive computational experiments have been conducted by means of 95 new 3L-VRPCB benchmark instances that were derived from the well-known VRPCB instances by Goetschalckx and Jacobs-Blecha (1989) and by Toth and Vigo (1997), respectively.

The remainder of the paper is organized as follows. In Section 2, the relevant literature is discussed. The 3L-VRPCB is formulated in Section 3. The proposed hybrid algo rithms are described in Section 4. Section 5 is dedicated to the computational experiments. First, new benchmark instances for the 3L-VRPCB are introduced and the hybrid algorithms are calibrated. Then the numerical results are presented and analyzed. In Section 6, some conclusions are drawn and future research directions are proposed.

@&#RELATED WORK@&#

In our literature review, we will focus on the vehicle routing problem with clustered backhauls and on integrated vehicle routing and 3D loading problems. We refer the reader to Toth and Vigo (2002) and Golden, Raghavan, and Wasil (2008) for a comprehensive survey on vehicle routing. Different types of vehicle routing problems with backhauls are surveyed by Parragh et al. (2008).

Exact approaches for the VRPCB were published, e.g., by Toth and Vigo (1997) and by Mingozzi, Giorgi, and Baldacci (1999). In the first paper, an integer programming formulation is proposed. Based on relaxations, lower bounds are determined. These bounds are used within a branch and bound approach to determine optimal solutions. A binary program is proposed in the second paper. The main idea of this exact approach consists in reducing the number of binary variables by considering the dual of the LP relaxation of the exact formulation. Both methods proved to be able to solve instances with up to 100 customers.

Next, we discuss conventional heuristic approaches. An early constructive heuristic was derived from the Savings Algorithm (cf. Clarke & Wright, 1964) by Deif and Bodin (1984). Goetschalckx and Jacobs-Blecha (1989) propose a heuristic approach based on space-filling curves. Linehaul and backhaul customers are transformed from points in the plane into points along a line using the space-filling curve transformation. These two point sets are used to determine feasible routes. Then each linehaul route is merged with the nearest backhaul route with respect to the space-filling mapping. Toth and Vigo (1996) suggest a cluster-first, route-second algorithm for both the VRPCB and the related asymmetric problem (AVRPCB). A cluster is a group of customers that contains only linehaul or backhaul customers. Thangiah, Potvin, and Sun (1997) propose a two-phase approach for the VRPBC with time windows. First, an initial solution is determined using an insertion heuristic. Then, in a second phase, a λ interchange and a 2-opt* procedure is applied to improve the initial solution.

Several solution methods to tackle the VRPCB based on metaheuristics can be found in the literature. Osman and Wassan (2002) suggest a reactive tabu search heuristic. Brandao (2006) presents a tabu search based procedure. Tavakkoli-Moghaddam, Saremi, and Ziaee (2006) and Saremi, ElMekkawy, and Wang (2007) publish memetic algorithms. Neural network based approaches are presented in Ghaziri and Osman (2006). A reactive tabu adaptive memory programming search is discussed by Wassan (2007). Ropke and Pisinger (2006b) demonstrate that the VRPCB and other backhaul problems (with and without time windows) can be tackled in a unified way by modeling them as rich pickup and delivery problem with time windows (Rich PDPTW). The required problem transformation is based on introducing appropriate precedence constraints. Ropke and Pisinger (2006b) propose a ALNS heuristic for solving the Rich PDPTW that achieves an excellent solution quality for the VRPCB and other backhaul problems. A multi-ant colony system is published by Gajpal and Abad (2009). An iterated local search heuristic yielding high-quality solutions is proposed by Arráiz and Palhazi Cuervo (2011). In their heuristic the search is not restricted to the space of feasible solutions; instead, solutions are considered temporarily that do not satisfy the capacity constraint. Zachariadis and Kiranoudis (2012) propose an effective local search heuristic which explores rich neighborhoods composed of exchanges of variable-length customer sequences. Vidal, Crainic, Gendreau, and Prins (2014) suggest a unified solution framework for a great variety of multi-attribute vehicle routing problems including the VRPCB. While VNS is successfully applied for a number of different VRPs (cf. Hemmelmayr, Doerner, & Hartl, 2009, Kritzinger, Tricoire, Doerner, & Hartl, 2011; Kytöjoki, Nuortio, Bräysy, & Gendreau, 2007), to the best of our knowledge, VNS approaches have not been used up to now to solve the VRPCB.


                        Iori and Martello (2010) survey the state of the art in the field of integrated vehicle routing and loading problems. Generally, the literature is still limited and this applies in particular to the 3D case.

The 3L-CVRP was introduced by Gendreau et al. (2006) with five additional packing constraints frequently occurring in freight transportation. These include a weight constraint, a last-in-first-out (LIFO) loading constraint, an orientation constraint, a support constraint, and a stacking constraint (see Section 3 for details). Gendreau et al. suggest a two-stage tabu search algorithm for solving the 3L-CVRP. The “outer” tabu search serves for planning the routes, while the “inner” tabu search solves a 3D strip packing problem in order to load a vehicle according to a given customer sequence. Tarantilis, Zachariadis, and Kiranoudis (2009) propose a hybrid procedure combining the strategies tabu search and guided local search. They use a collection of plain packing heuristics. Fuellerer, Doerner, Hartl, and Iori (2010) develop an ant colony algorithm for routing that is integrated with fast but effective packing heuristics. Wang, Guo, Chen, Zhu, and Lim (2010) design a two-phase tabu search algorithm for routing that cooperates with two constructive packing heuristics. This hybrid algorithm was further developed by Zhu, Qin, Lim, and Wang (2012). Wisniewski, Ritt, and Buriol (2011) propose a tabu search for routing and a randomized bottom left-based packing algorithm. Bortfeldt (2012) suggests a hybrid algorithm for the 3L-CVRP with a tabu search procedure for routing and a tree search algorithm for loading vehicles. Ruan, Zhang, Miao, and Shen (2013) present a honey bee mating algorithm for routing that is combined with six loading heuristics. Finally, Lacomme, Toussaint, and Duhamel (2013) propose an effective hybrid procedure for the 3L-CVRP that, however, does not consider all 3D packing constraints introduced by Gendreau et al. (2006).


                        Moura and Oliveira (2009) specify the VRP with time windows and 3D loading constraints (3L-VRPTW) with two objectives and present two heuristic procedures for this problem. The number of vehicles is minimized with higher priority, whereas the total travel distance is minimized with lower priority. The authors do not consider the weight and the stacking constraint of the 3L-CVRP while the other packing constraints (see above) are adopted. Another hybrid algorithm for solving the 3L-VRPTW was recently suggested by Bortfeldt and Homberger (2013). It consists of an evolutionary strategy and two tabu search procedures. Meanwhile, there are several solution procedures for the 3L-CVRP and also some for the 3L-VRPTW. However, algorithms for other integrated routing and 3D loading problems were not published so far.

A hybrid algorithm for 3L-VRPCB is sketched in Bortfeldt, Hahn, and Mönch (2013). However, this extended abstract is considerably enhanced by the present paper. We propose a second hybrid approach based on VNS and include much more computational results.

In this section, we describe the 3L-VRPCB more formally. We assume that l linehaul customers (indexed by 1,…,l), b backhaul customers (indexed by l + 1,…,l + b), and a single depot (with index 0) are given. Each customer has a set Ii
                      of boxes with known dimensions that are either to be transported from the depot to the customer (i = 1, …, l) or from the customer to the depot (i = l + 1,…,l + b). The set Ii
                      includes mi
                      rectangular packing pieces (boxes) Iik
                      (k = 1,…,mi
                     ) and the box Iik
                      has the length lik
                     , the width wik
                     , and the height hik
                      (i = 1, …, l + b, k = 1,…,mi
                     ).

Let V = {0, 1,…, l, l + 1,…, l + b} denote the set of all customer sites (also called nodes) including the depot site. Let E be a set of undirected edges (i, j) connecting all node pairs (0 ≤ i < j ≤ l + b) and let G = (V, E) be the resulting graph. Let a distance cij
                      (cij
                      ≥ 0) be assigned to each edge (i, j) (0 ≤ i < j ≤ l + b). Finally, there are v
                     max identical vehicles with a rectangular loading space with length L, width W, and height H. Each vehicle is rear-loaded.

The loading space of each vehicle is embedded in the first octant of a Cartesian coordinate system in such a way that the length, width and height of the loading space lie parallel to the x, y, and z axes. The placement of a box Iik
                      in a loading space is given by the coordinates xik, yik
                     , and zik
                      of the corner of the box that is closest to the origin of the coordinates system; in addition, an orientation index oik
                      indicates which of the possible spatial orientations is selected (i = 1,…,l + b, k = 1,…,mi
                     ). A spatial orientation of a box is given by a one-to-one mapping of the three box dimensions and the three coordinate directions.

A packing plan P for a loading space comprises one or more placements and is regarded as feasible if the following three conditions hold: (FP1) each placed box lies completely within the loading space; (FP2) any two boxes that are placed in the same truck loading space do not overlap; (FP3) each placed box lies parallel to the surface areas of the loading space. Fig. 1
                      shows a loading space with placed boxes.

A route R is a sequence (0, c
                     1,…,cn
                     , 0) that starts and ends with the depot and includes n ≥ 1 pairwise different customers (ci
                      > 0). A route is feasible if it includes at least one linehaul customer (1 ≤ ci
                      ≤ l) and all linehaul customers precede the first backhaul customer (l + 1 ≤ ci
                      ≤ l + b) if any.

A solution of the 3L-VRPCB is a set of v (v ≥ 1) triples (Rμ, Pμ,l, Pμ,b
                     ), where Rμ
                      is a route and Pμ,l
                      and Pμ,b
                      denote two packing plans (μ = 1,…,v). A solution is called feasible if the following conditions are satisfied:

                        
                           (F1)
                           all routes Rμ
                               and all packing plans Pμ,l, Pμ,b
                               are feasible (μ = 1, …, v);

each customer appears exactly in one route;

the packing plan Pμ,l
                               includes the placements for all boxes of all linehaul customers of route Rμ
                              , and Pμ,b
                               comprises the placements for all boxes of all backhaul customers of route Rμ
                               (if any) (μ = 1,…,v);

the number of routes v does not exceed the given number of vehicles v
                              max.

In addition, the following packing constraints are integrated:

                        
                           (C1)
                           
                              Weight constraint: Each box set Ii
                               has a positive weight di
                               (i = 1,…,l + b) and the total weight of all boxes in a packing plan Pμ,l
                               or Pμ,b
                               cannot exceed a maximum load weight D (μ = 1,…,v).


                              LIFO constraint:
                           


                              Linehaul part: Let c and c′ be two linehaul customers and c is visited before c′ in route μ (μ ∈ {1,…,v}); let b and b′ two boxes that belong to c and c’, respectively. Then b′ cannot be placed in packing plan Pμ,l
                               between b and the rear of the vehicle or above b.
                           


                              Backhaul part: Let c and c′ be two backhaul customers and c is visited before c′ in route μ (μ ∈ {1,…,v}); let b and b′ two boxes that belong to c and c’, respectively. Then b cannot be placed in packing plan Pμ,b
                               between b′ and the rear of the vehicle or above b’. By these constraints it is ensured that all boxes of each linehaul customer can be unloaded by pure shifts in x-direction without moving other (linehaul) boxes. Likewise it is ensured that all boxes of each backhaul customer can be loaded by pure shifts in negative x-direction without moving other (backhaul) boxes.


                              Orientation constraint: The height dimension of all boxes is fixed while horizontal 90° turns of boxes are allowed. Thus only two of six values are allowed for the orientation index oik
                               of a placement (i = 1,…, l + b, k = 1,…,mi
                              ).


                              Support constraint: If a box is not placed on the floor, a certain percentage a of its base area has to be supported by other boxes.


                              Stacking constraint: A fragility attribute fik
                               (i = 1,…,l + b, k = 1,…,mi
                              ) is assigned to each box. If a box is fragile (fik
                               = 1) only other fragile boxes may be placed on its top surface, whereas both fragile and non-fragile boxes may be stacked on a non-fragile box (fik
                               = 0).

Finally, the 3L-VRPCB consists of determining a feasible solution that meets the constraints (C1)–(C5) and minimizes the total travel distance of all routes.

In contrast to the VRPCB, it is now allowed that solutions contain less than v
                     max routes and we consider this a more realistic setting. As mentioned earlier, the added packing constraints (C1)–(C5) were just adopted from the 3L-CVRP. One advantage of this procedure is that computational results for the 3L-CVRP and the 3L-VRPCB, for example, mean volume utilizations, can be easier compared.

The 3L-VRPCB is NP-hard since it contains the NP-hard CVRP (cf., e.g., Toth & Vigo 2002) as a special case. Moreover, as an integrated routing and loading problem the 3L-VRPCB is extremely difficult to solve (cf. Iori & Martello, 2010, p. 8). Thus the application of metaheuristic search strategies (including heuristic graph search) seems to be the only viable option to develop solution methods that provide high-quality solutions for large-size instances within acceptable computing time.

In the sequel, we describe two hybrid metaheuristic algorithms for the 3L-VRPCB, each consisting of two separate procedures for routing and packing. The ALNS heuristic for solving the PDPTW by Ropke and Pisinger (2006a) serves basically as routing procedure for the first 3L-VRPCB algorithm. The routing procedure of the second 3L-VRPCB algorithm is a VNS heuristic. We are interested in answering the question whether the results of the hybrid approaches are influenced by the neighborhood structures used in the routing procedure or not. The neighborhood structures applied by ALNS tend to change a larger portion of a current solution, while the neighborhood structures used in VNS typically change a much smaller part of a current solution.

Both 3L-VRPCB algorithms integrate the 3D packing algorithm by Bortfeldt (2012) that is based on a tree search approach. The routing procedure is the main (first called) module and the packing procedure is the subordinated module in both 3L-VRPCB algorithms.

Subsequently, the individual procedures are specified; some details of already known algorithms are omitted and the reader is referred to the mentioned original papers for a complete description.

The first routing procedure is based on the ALNS heuristic by Ropke and Pisinger (2006a). Generally, we try to keep our routing procedure close to the original ALNS heuristic. However, some parts of the original routing procedure are omitted to achieve a slightly simpler algorithm while two operators are added or modified on the other hand. Of course, the routing procedure for solving the 3L-VRPCB has to be integrated with the packing module mentioned above and emphasis is laid on this part in the following description.

The routing procedure is roughly outlined in Fig. 2. First, an initial solution is constructed. Afterward, an iterative neighborhood search is carried out until a computing time limit is exceeded.

Within each iteration, a number ξ of customers to be removed is selected randomly from the set {r
                        min , …, r
                        max }. Several removal and insertion heuristics are available. Among them one removal and one insertion heuristic are selected randomly per iteration. The selection probabilities for the removal and insertion heuristics depend on their relative success in the previous search and are dynamically updated by a so-called learning layer as in the original ALNS. The next solution is generated by the selected heuristics Rh and Ih according to s
                        next := Ih(Rh(s
                        curr, ξ)). If s
                        next is accepted in a dedicated test it becomes the new current solution s
                        curr and the best solution s
                        best is updated if necessary. Otherwise, the initial solution of the next iteration s
                        curr remains unchanged. As in the original ALNS the acceptance test follows the well-known simulated annealing rule and according to this the search is embedded in an annealing process with a geometric cooling schedule. Differently to the original ALNS no noise term is applied to the objective function.

Since the number of vehicles is limited it may happen that the initial solution or a later generated solution is incomplete, i.e. some customers are missing. To cope with this situation the concept of a virtual request bank is used as in the original ALNS (see Ropke & Pisinger 2006a, p. 2). The objective function is specified as the sum f(s) = ttd(s) + M
                        ⋅nmc(s), where s is a given solution, ttd stands for its total travel distance, nmc is the number of missing customers and M is a sufficiently large constant. By this definition solutions with less missing customers are always preferred.

In the following, some parts of the ALNS heuristic are explained in more detail.

The removal and insertion heuristics are briefly summarized in Table 1
                           
                           . They are basically adopted from the original ALNS heuristic by Ropke and Pisinger (2006a). However, the more difficult insertion heuristics Regret-m (m > 3) of the original ALNS are omitted here.

Within the Shaw removal the relatedness of customers is expressed by means of two factors, namely the location of the customers and the weights of their item sets. Hence, the relatedness of the two customers i and j is calculated by the blended index r(i, j) = wr
                           
                           1
                           c'
                              ij
                            + wr
                           
                           2|v'
                              i
                            – v'j
                           |, 1 ≤ i < j ≤ l + b, where c'
                              ij
                            denotes the normalized distance between i and j and lies in the interval [0,1]; v'
                              i
                            denotes the normalized weights of customer i where the normalization interval is [0, 1] for linehaul customers and [−1, 0] for backhaul customers, respectively. The weights w
                           rp (p = 1, 2) allow for a different weighting of the distance and weights difference.

Finally, the Tour removal has been added in order to drive the search into regions where feasible solutions with less tours can be found. Although the minimization of the number of tours is not an explicit goal this procedure can be helpful to identify high-quality solutions in terms of total travel distance.

The initial solution is constructed by means of the Regret-2 insertion heuristic (see Section 4.1.2 for details) starting with an empty solution.

For each route of a solution it has to be ensured that the boxes of all linehaul customers can be stowed together in a vehicle's loading space. Likewise it has to be guaranteed that all backhaul boxes can be packed in a loading space. The integration of routing and packing is guided by the following principles:

                              
                                 •
                                 Consider a route with two feasible packing plans for the linehaul boxes and the backhaul boxes. If some of the linehaul customers are removed then it will be mostly possible to store the boxes of the remaining linehaul customers in a feasible way, too. (Exceptions of this rule are discussed at the very end of this subsection.) However, if one or more new linehaul customers are inserted in the route then it might become impossible to store all appropriate boxes in a feasible packing plan. The same applies for the backhaul part of the route (if any). Therefore, packing checks are integrated in the insertion heuristics exclusively.

Generally, multiple customers are inserted per route if a new solution is completed by means of an insertion heuristic. A packing check is made each time when another customer is inserted into a route. Of course, if a linehaul customer was inserted only the linehaul part of the route is checked and only a packing check of the backhaul part is made in the opposite case.

In each packing check of the linehaul or backhaul part of a route it is checked whether all boxes of all relevant (linehaul or backhaul) customers can be packed together in one loading space in such a way that the basic conditions (FP1)−(FP3) and all packing constraints (C1)−(C5) are observed.

During the entire search, a packing check only returns whether the boxes of a given set can be packed together in a feasible way while no packing plans are returned. At the end of the search all routes of the best found solution are checked in terms of packing once again and for each route feasible packing plans for the linehaul and the backhaul part are now provided.

Below two of the insertion heuristics, namely the Greedy insertion (Fig. 3) and the Regret-2 insertion (Fig. 4
                           ) are described in more detail. Both the insertion heuristics are based on the procedure select_best_insertions that performs all packing checks and is shown in Fig. 5
                           . Note that the Regret-3 insertion works similar to the Regret-2 insertion.

The Greedy insertion heuristic takes an incomplete solution, a set of missing customers and the best solution so far as input values. In each loop cycle the best (minimum cost) insertion is determined related to the customers still missing and implemented before the set of missing customers is updated. The procedure select_best_insertions is used to deliver the best insertion for a given customer. In each cycle the number of still missing customers nmc
                              wi
                            is counted for which no feasible insertion was found at all. If in any cycle nmc
                              wi
                            is greater than the number of missing customers nmc(s
                           best) in the best solution found so far then a further computation is useless and the heuristic will return. Otherwise a solution is provided in the end that has no more missing customers than the best solution so far or is even a feasible and complete solution.

The Regret-2 insertion heuristic starts with the same input values as the Greedy insertion heuristic. In each cycle, the insertion with maximum regret value is determined related to the customers still missing and implemented before the set of missing customers is updated. The best two insertions per missing customer belonging to different routes are sought by procedure select_best_insertions. The regret value of the best insertion of a customer is given by the cost difference between the second best and the best insertion; the insertion with maximum regret value is then carried out per cycle.

If there is only one feasible insertion for a customer, an infinite regret value is used to force the heuristic to select this insertion. If no feasible insertion can be found at all for one or more customers within a cycle the Regret-2 insertion proceeds in a similar manner as Greedy insertion. Again, in case of success a solution is provided that is as least as good as the best solution so far in terms of missing customers or is even a feasible and complete solution.

The procedure select_best_insertions is organized in two parts. In the first part (for-loop) all potential insertions of a given customer c into any route of a given solution s are provided. Each insertion must be feasible (only) in terms of weight (constraint (C1)) and volume (the total volume of the goods must not exceed the loading space volume). The minimum cost insertions of all routes are collected in a list I
                           cand. In the second part (while-loop), the insertions of I
                           cand are examined by ascending costs. In each cycle the currently minimum cost insertion insbest undergoes a 3D packing check (including constraints (C2)–(C5)). If the outcome is positive insertion insbest is included into the set of best insertions I
                           best (and removed in I
                           cand). Otherwise the next cheapest insertion for the route of insbest (if any) will replace insbest in list I
                           cand. As stated above, either the linehaul part or the backhaul part of a route is checked (in both parts of the procedure) depending on the type of the customer c. The procedure returns if I
                           best has enough (n
                           ins) insertions or if I
                           cand is empty. Any two insertions in I
                           best belong to different routes.

Two features of the procedure select_best_insertions should be stressed. First, the one-dimensional checks are made before 3D packing checks are carried out. Second, all possible insertions are first evaluated and sorted by cost before the 'expensive' packing checks are made. By this practice, called "evaluating first, packing second", the packing effort is kept low since the packing checks can be aborted each time after few (3D-) feasible insertions have been detected.

Sometimes the boxes of a given set can be stored in the loading space in a feasible way while this is no longer the case after some of the boxes were removed. Such a situation may occur, e.g., if a box was removed that is needed to provide sufficient support for another fragile box. Since such cases occur very rarely a packing check is not carried out after a box arrangement in a loading space was only reduced (while no other box was added). However, if a solution turns out to be a new best solution all its routes undergo an additional packing check. In particular all routes are checked that did result earlier by a pure removing of items. By this measure it is prevented that the best solution ever includes an infeasible route in terms of packing.

Our implementation of the ALNS routing procedure can also be applied to the (1D) VRPCB. In this situation, the 3D packing test is omitted and only the packing constraint (C1) is checked.

VNS is a local search-based metaheuristic introduced by Mladenovic and Hansen (1997) and Hansen and Mladenovic (2001). The overall procedure for 3L-VRPCB is shown in Fig. 6. Here, we denote by Nk
                         the kth neighborhood. We briefly describe the main ingredients of our VNS approach shown in Fig. 6 in the remainder of this subsection. However, we refer for a more detailed version to Bortfeldt, Hahn, Männel, and Mönch (2014).

Our VNS algorithm designed for the 3L-VRPCB operates on the final solution representation, i.e., each customer is assigned to exactly one route and each route is assigned to a certain vehicle. We start by describing the different neighborhood structures. We use similar neighborhood structures as in Hemmelmayr et al. (2009) for the periodic VRP. However, in our setting, the neighborhood structures are separately applied to the linehaul and the backhaul part of the routes because linehaul and backhaul customers are clustered. The neighborhood structures used are based on the move and the cross-exchange operator. The move operator removes a certain segment of the linehaul or backhaul part of a randomly selected route and inserts it into the linehaul or backhaul part of a second randomly chosen route, respectively. The cross-exchange operator swaps two segments across the linehaul or backhaul part of two different randomly selected routes. We use K = 18 different neighborhood structures. The corresponding sequence is reported in Bortfeldt et al. (2014) together with a more detailed presentation of the neighborhood structures.

The initial solution is determined by a constructive heuristic that is derived from the Savings Algorithm for the CVRP (cf. Clarke & Wright, 1964). At first, separate solutions for the linehaul and for the backhaul customers, respectively, are constructed by a Savings heuristic that generates the solution route by route. Of course, two provisional linehaul or backhaul routes are only linked if the outcome of the weight test and the packing test is positive. It is ensured that the number of routes for backhaul customers does not exceed the number of routes for linehaul customers. At last, linehaul and backhaul routes are pairwise amalgamated following the Savings principle.

The local search procedure is applied to each linehaul part of a route that is changed during the shaking phase. If the linehaul part of the route is changed then the corresponding backhaul route is also considered simultaneously in the local search procedure since the visit of the backhaul customers is affected by changes of the linehaul customers. The local search procedure is based on 2-opt and 3-opt (Lin, 1965). The 2-opt or 3-opt procedure is based on the idea to delete two and three edges, respectively between customers on a route and then reconnecting the customers in all possible ways. It consists of two phases. In a first phase, 2-opt is applied. We then apply 3-opt without sequence inversion in the second phase.
                        

Infeasibilities with respect to the weight constraints (C1) can arise during the application of the neighborhood search operators during the shaking phase. Note that infeasibilities cannot occur in the local search procedure. It turned out in the course of the computational experiments that we have to allow VNS to deal with infeasible solutions in the beginning of the search process to obtain high-quality solutions. Similar observations were reported by Arráiz and Palhazi Cuervo (2011) for the VRPCB. We use a penalty term approach in the objective function before the solution is assessed. Therefore, the weight exceed of a route is multiplied with a certain penalty coefficient. Starting from an initial value α, this coefficient increases by a step size ψ each time an infeasible solution is assessed until a given upper limit β is reached. This drives the search towards feasible solutions.

As shown in Fig. 6, each time a smaller objective function value compared to the best solution is observed, a packing test is performed. The solution s
                           next is accepted as new incumbent solution if it improves the best solution found so far and feasible packing plans, fulfilling the constraints (C2)–(C5), can be determined for the linehaul and backhaul parts of all routes of s
                           next by the packing procedure. Note that the weight constraint (C1) is already checked within the shaking phase, but violations of this constraint are allowed to a certain extent.

The proposed VNS procedure can also be applied to the (1D) VRPCB. Similar to the LNS application, the 3D packing test is not performed and only the (C1) packing constraint is considered.

For a given sequence of linehaul or backhaul customers and the corresponding set of boxes, the packing procedure tries to determine a complete solution, i.e. a packing plan stowing all given boxes. A depth first search is carried out by means of the recursive procedure add_placement shown in Fig. 7. A stowage plan currentSolution is transferred and then extended in different variants by one further box placement for each procedure call.

As the search is started the solution currentSolution is set empty, the set freeBoxes is filled by all boxes and the list potentialPlacements is filled by all feasible box placements in the lower left back corner of the loading space L × W × H (cf. Fig. 1).
                     

The procedure add_placement checks first whether the current packing check can be aborted or not. This is done, i.e. all running instances of procedure add_placement are aborted, if currentSolution is a complete solution or if the number of calls of add_placement exceeds a given limit maxApCalls. The current instance of the procedure is aborted if there is at least one free box without a potential placement, i.e. if a complete solution can no longer be achieved.

Candidates for the next placement are selected from the list potentialPlacements and provided in the list currentPlacements. All these placements are then tried alternatively. For each placement, the current solution, the set of free boxes, and the list of potential placements are updated accordingly before the procedure add_placement is called again. To update the list potentialPlacements, all potential placements are removed that can no longer be implemented. Additional potential reference points for new potential placements are determined as extreme points (see Crainic, Perboli, & Tadei, 2008).

The selection of placements currently to be tried among all potential placements is governed by two rules. On the one hand, it is ensured that a vehicle is loaded from the front to the back, from bottom to top with lower priority, and from left to right with lowest priority. Hence, placements with smaller x-coordinates of the reference corner are preferred etc. On the other hand, the selection is made taking into account the LIFO constraint. If a linehaul sequence is given, placements of boxes are preferred that belong to customers that have to be visited later. Therefore, their boxes have to be loaded earlier, i.e. nearer to the cabin. The opposite procedure is implemented for a backhaul sequence. The placement selection is controlled by the integer parameters maxBoxRankDiff and maxRefPoints where higher parameter values lead to a larger set of currently tried placements.

All the linehaul and backhaul customer sequences that have ever been checked are collected in a cache to further accelerate the search. Whenever a sequence is tested in terms of packing, it is first searched in the cache. To speed up this search, for each customer c a separate table is established keeping the positions of all stored sequences including customer c. Thus, a customer sequence is searched by examining only the cache positions of its first customer. The packing algorithm is only called if the sequence was not found in the cache and the sequence is then inserted in the cache together with the result of the packing test. Multiple checks of same routes are avoided by this procedure.

The computational experiments are organized in four parts. In the first part we want to check whether the 1D variants of the hybrid algorithms (denoted by 1D-ALNS and 1D-VNS) are on a par with the state of the art heuristics for the VRPCB.
                     
                     
                  

In the second part the 3D variants of the hybrid algorithms are tested addressing several issues. First, we are interested in the increase of total travel distances if 1D problem instances are replaced by corresponding 3D instances (see Section 5.1). A further issue is the impact of the computational effort on the solution quality. Of course, we are also interested in the relative strength of both hybrid algorithms and want to know whether the algorithms behave in a similar manner. In some preliminary tests, it was observed that for both hybrid algorithms and very different calibrations of the packing procedure the time spent for packing always exceeds 97 percent of the entire computing time. Hence, performing experiments with a significantly higher or lower relative packing effort seems not to be a viable option. However, what can be changed is the specific effort of a single packing check. The algorithms can be run using a smaller number of more thorough packing checks or a larger number of less thorough packing checks, and this alternative is examined. Accordingly, two 3D variants are specified for both hybrid algorithms. In the first 3D variant, the packing procedure is calibrated with a relative high specific computational effort per packing check and the hybrid algorithms are denoted by 3D-ALNS-H and 3D-VNS-H, respectively. In the second 3D variant, the packing procedure is calibrated with a relative low specific computational effort per packing check and the hybrid algorithms are denoted by 3D-ALNS-L and 3D-VNS-L, respectively.

As the hybrid ALNS algorithm proves to be the stronger one only this algorithm is subject of further experiments. In the third part the impact of different components of the hybrid ALNS algorithm on the solution quality is studied by means of 3L-VRPCB instances.

As the 3L-CVRP is a special case of the 3L-VRPCB (having only linehaul customers) in the fourth part the ALNS hybrid algorithm is applied to well-known 3L-CVRP benchmark instances.

The packing procedure and the VNS approach are coded in the C++ programming language using Visual Studio 2012 Express, while the ALNS scheme is implemented using the Java programming language under Eclipse 3.5.2. Preliminary experiments (in which total run times were varied) demonstrated that the impact of the different developing environments is negligible. All the experiments have been conducted on a PC with Intel Core i7-2600 (3.4 GHz, 16GB RAM). Afterwards the used benchmark instances are introduced and the parameter setting is specified before the computational results are presented and analyzed.

The one-dimensional variants of the hybrid algorithms are tested by means of two well-known sets of VRPCB instances introduced by Goetschalckx and Jacobs-Blecha (1989) and by Toth and Vigo (1997). The first set (abbreviated as GJB) consists of 62 problem instances while the second set (abbreviated as TV) includes 33 problem instances. The ALNS hybrid algorithm is tested as 3L-CVRP solution method using the likewise well-known sets of 3L-CVRP benchmark instances by Gendreau et al. (2006) and by Tarantilis et al. (2009).

To provide a sufficiently large set of 3L-VRPCB benchmark instances each of the mentioned 95 VRPCB instances is extended to a 3L-VRPCB instance by the following procedure:

                           
                              •
                              Each of the 95 VRPCB instances is considered as the base of a new 3L-VRPCB instance, i.e. the data of a VRPCB instance are completely reused in the corresponding 3L-VRPCB instance. The scalar demand of a linehaul or backhaul customer is interpreted as the weight di
                                  of the corresponding box set. The vehicles’ capacity is now seen as the weight limit D (see constraint C1).

We consider the 27 3L-CVRP instances introduced by Gendreau et al. (2006) (with up to 100 customers) and the 12 3L-CVRP instances proposed by Tarantilis et al. (2009). Each of the 95 VRPCB instances is merged with exactly one of the 39 3L-CVRP instances. Let a VRPCB instance have l linehaul and b backhaul customers. Then a 3L-CVRP instance for merging is determined such that its number of customers is not smaller than the maximum of l and b.

Given a VRPCB instance and its associated 3L-CVRP instance, each of the linehaul customers of the new 3L-VRPCB instance receives the box set including the fragility attributes of a customer of the 3L-CVRP instance. The same procedure is applied to the backhaul customers. The dimensions of the loading spaces of 3L-CVRP instances and support parameter a (see constraint C4) are adopted (i.e., a is set to 0.75).

The maximal number of admitted vehicles v
                                 max per instance is determined as the number of routes of the solution that is determined by the constructive heuristic which was proposed in Section 4.2. In this way, a feasible solution with no more than v
                                 max routes can be relatively easily obtained.

The set of 3L-VRPCB instances derived from VRPCB instance set GJB is denoted by 3L-GJB whereas the set of instances derived from VRPCB instance set TV is denoted by 3L-TV.

The new 3L-VRPCB instances are characterized by some important data that are summarized in Table 2. The mean number of boxes per vehicle stands for the mean quotient (volume of loading space)/(mean box volume). The instances will be provided at the website http://www.mansci.ovgu.de.

The parameter setting for the experiments is specified in Tables 3–5
                        
                        . The same parameterization of the routing procedures is used for all variants of the hybrid algorithms (some alternative settings are tried in Section 5.5). Further details on the ALNS parameters can be found in Ropke and Pisinger (2006a, p. 13 f). All parameter values were determined based on limited computational experiments using a trial and error strategy.

The parameters of the packing procedure for the variants 3D-LNS-H/L and 3D-VNS-H/L are shown in Table 5 (see also Bortfeldt, 2012).

The maximum number of calls of the recursive procedure add_placement determines to a large extent whether the tree search is carried out thoroughly or not. For the ALNS algorithm, the values of the parameter maxApCalls depend on the instance size, i.e. the number of customers; however, the high effort is uniformly chosen 25 times greater than the low effort for a packing check. For the VNS algorithm the values of parameter maxApCalls are fixed for both effort variants. Preliminary tests taught us that only relatively high values of parameter maxApCalls yield acceptable results of the VNS algorithm; therefore the high effort is chosen only two times larger than the low effort of a packing check. The remaining packing parameters are kept constant for all 3D algorithm variants.

The maximum computing time per instance and single run is set to 3 minutes for the two variants 1D-ALNS and 1D-VNS. For the four variants 3D-ALNS-H/L and 3D-VNS-H/L, this time limit depends on the instance size. The limit is set to 10 minutes for instances with maximal 50 customers, while it is set to 20 minutes for instances with 51–99 customers. Finally, the time limit is chosen as 30 minutes for instances with at least 100 customers. For the 3D variants of the hybrid algorithms, the best solution is recorded after 3 minutes (reduced calculation time) and after the time limit has been reached (full calculation time). For the 1D-LNS and 1D-VNS variants, five independent runs are performed whereas only three independent runs are conducted per instance for the 3L-VRPCB variants of the algorithms due to the high computational burden. In the 3L-CVRP test using the ALNS hybrid algorithm 20 runs are performed per instance. The time limit per run is specified in the same manner as for the 3L-VRPCB, e.g. depending on number of customers we use 10 (nc ≤ 50), 20 (51 ≤ nc ≤ 99) or 30 (100 ≤ nc) minutes as time limit.

The overall test results for the algorithm variants 1D-ALNS and 1D-VNS and the instance sets GJB and TV are shown in Table 6. The name of the instance set is listed in the leftmost column. The best total travel distances and their gaps to the best known solutions are shown for each of the algorithm variants 1D-ALNS and 1D-VNS. They are also indicated for 1D-ALNS with a time limit of only 30 seconds per run and for the VRPCB-ALNS algorithm by Ropke and Pisinger (2006b). For a single instance, the gap is determined as (ttd-best − ttd-best-known)/ttd-best-known (in percent) where ttd-best is the best reached travel distance (over the five runs) and ttd-best-known is the best known travel distance for the given instance. Best known travel distances are taken from Vidal et al. (2014), Zachariadis and Kiranoudis (2012) and Arráiz and Palhazi Cuervo (2011). The best total travel distances and gaps are averaged over all instances of the respective instance set; the last line shows average values over both sets.

As the results indicate, the ALNS algorithm reaches nearly the solution quality of the best available methods for the (1D) VRPCB even for the smaller time limit. In particular, a high solution quality was achieved although the ALNS has been rather simplified compared to the original procedures by Ropke and Pisinger (2006a, 2006a). The VNS algorithm performs worse and misses the best known values by approximately 3.18 percent on average over the 95 instances of the GJB and TV instance sets.

The detailed results for the instance sets 3L-GJB and 3L-TV are presented in the Tables 7
                         and 8
                        . These values were calculated by means of the four algorithm variants 3D-ALNS-H/L and 3D-VNS-H/L within the specified time limits. In the leftmost column of each table, the name of the 3L-VRPCB instance is listed. The best and the average total travel distance over the three runs are listed for each of the four algorithm variants in the following eight columns. The best and the mean total travel distances are averaged over all instances of the respective set in the last row.

Further average results for the four 3D variants of the hybrid algorithms are indicated in Table 9
                        . For each algorithm variant and for full and reduced calculation time two gaps are calculated. The first gap (gap-best) is determined per instance as (ttd-best − ttd-best-all)/ttd-best-all (in percent) where ttd-best is the best reached travel distance over the three runs of the algorithm and ttd-best-all is the best calculated travel distance for the given instance calculated by all four algorithms studied here (within full calculation time). The second gap (gap-avg) is determined per instance as (ttd-avg − ttd-best-all)/ttd-best-all (in percent) where ttd-best-all is defined as before and ttd-avg is the average total travel distance over the three runs of the algorithm. Both gaps are then averaged over the instance sets 3L-GJB and 3L-TV as well as over the set of all 95 instances.

Moreover, the fraction (3D-ttd/1D-ttd) indicates the increase of the travel distance for the 3D backhaul problem instances compared with the corresponding 1D problem instances. For each 3D algorithm variant the distance 3D-ttd is calculated as the average travel distance over all instances of the respective set as well as all runs within full calculation time. For the corresponding 1D algorithm variant the distance 1D-ttd is calculated similarly.

Summarizing the results we can state that the travel distances increase significantly if the 3L-VRPCB instances are solved instead of the corresponding 1D VRPCB instances. The best results were achieved with the algorithm variant 3D-ALNS-H using full calculation time. In this situation, the travel distances increase by 33 percent on average over the 95 test instances compared to 1D-ALNS. The mean increase of the travel distances is even higher for the other 3D algorithm variants.

The effect of time limits depends strongly on the 3D algorithm variant. Significant improvements for full compared to reduced (3 minutes) calculation time result for the variant 3D-ALNS-H. Considering the gap-avg values, a reduction of 6.1 percentage-points of the travel distance is achieved for the 3L-GJB instance set, while the saving for the 3L-TV instance set is 3.7 percentage-points. The improvements by longer computing times are much smaller or even no reductions can be observed at all for the other three algorithm variants.

The ALNS variants outperform the VNS variants. The 3D-ALNS-H variant achieves an improvement of 7.1 percentage-points for the 3L-GJB set and of 4.6 percentage-points travel distance for the 3L-TV set compared to 3D-VNS-H if best solutions are considered; the improvement for the average values is 8.7 percentage-points for the 3L-GJB set and 7.2 percentage-points for the 3L-TV set. The improvements are even higher if the algorithm variants with low specific packing effort are compared. The ALNS variants are characterized by neighborhood structures that change larger portions of a given solution compared to the VNS variants. Therefore, an additional experiment with 3D-ALNS-H was carried out in which the parameters r
                        min and r
                        max were set to 0.01(l + b) and 0.05(l + b), respectively (cf. Table 3). The results for this ALNS with smaller changes from a solution to its neighbors are indicated in the last lines of Table 9.

They are in line with the interpretation that applying neighborhood structures leading to more drastic solution changes is favorable. However, this phenomenon remains a subject of further research. Finally, we look at the influence of the specific packing effort. For the ALNS variants, the effect of the specific packing effort depends on computing times. For reduced calculation time of 3 minutes the variants with high and low specific packing effort, respectively, are nearly on a par. However, for full calculation time the variant with high specific packing effort achieves significant improvements of the travel distances of 2.8 percentage-points regarding best values and 2.9 percentage-points regarding average values if all 95 instances are included. Hence, more thorough packing checks pay off if enough computing time is available. The VNS variant with low specific packing effort performs rather poor.

In the following, the impact of different components of the hybrid ALNS algorithm on the solution quality is studied. For that purpose nine experiments are performed with the 3D-ALNS-H variant.

In each of the first six experiments the routing procedure is changed regarding one of its components. In these experiments we want to research whether the results are significantly deteriorated or improved if routing components are modified, removed or added. In particular, this question is dealt with regarding important operators (Shaw removal, Regret-4 insertion) and the learning layer. In each of the last three experiments one component of the routing/packing integration is switched off or modified. Here we want to check the efficiency of the chosen coupling mechanism between routing and loading.

All nine experiments are executed using the 95 3L-VRPCB instances introduced above. Each instance is run three times with the time limit specified in Section 5.2. For each experiment the gaps gap-best and gap-avg are averaged over all 95 3D instances of the sets 3L-GJB and 3L-TV. These gaps are calculated as defined in Section 5.4 and by means of the ttd-best-all values as determined in Section 5.4 (even if better travel distances result for some instances by some of the algorithm variants tested here). Table 10
                         describes some details of the experiments and their outcome. For convenience, the gap results for the original 3L-ALNS-H algorithm are shown again (see line 0).

The comparison of the gaps in Table 10 shows very clearly that the modifications 1–6 of the routing procedure (regarding learning layer, operators and noise) have only a negligible impact on the solution quality. This general result seems to justify our approach to implement the 3L-ALNS algorithm in a rather straightforward fashion (in particular, a pure LNS algorithm would suffice). While modification 9 has also hardly any impact the modifications 7 and 8 lead to a significant loss of solution quality. Hence, the core components for coupling routing and packing (customer sequence cache, principle "Evaluation first, packing second") turn out to be key factors of performance.

Since the 3L-CVRP is a special case of the 3L-VRPCB, having only linehaul customers, the ALNS hybrid algorithm, i.e. variant 3L-ALNS-H, is applied now to 3L-CVRP benchmark instances. All the parameters (in particular time limits) have been specified in Section 5.2. The results for the 27 instances by Gendreau et al. (2006) and the 12 instances by Tarantilis et al. (2009) are presented in Tables 11
                         and 12
                        . Both tables are built similarly. In the leftmost column the instances (including no. of customers) are specified. In the following columns best and (where necessary) average travel distances over the performed runs are indicated for some high grade 3L-CVRP solution methods (cf. Section 2.4) are indicated. Best values are set in bold. Mean travel distances are shown in the last lines.

Considering the 27 instances by Gendreau et al. (2006) 3D-ALNS-H reaches good but not outstanding results. For eight of these instances solutions with best known travel distances were found. However, 3D-ALNS-H performs very well for the particularly challenging 12 instances by Tarantilis et al. (2009). New best solutions were generated for 4 instances and 3D-ALNS-H achieved better results in terms of best and average solution quality than all compared methods. The run times of 3D-ALNS-H remain moderate. For the 27 instances by Gendreau et al., e.g., our algorithm needs 844 seconds CPU time on average while Wang et al. (2010) publish a mean running time of 820 seconds and Wisniewski et al. (2011) indicate a run time of 930 seconds. However, the efficiency of the Tabu Search method by Bortfeldt (2012) that needed only 229 seconds on average for the 27 instances (on a slower computer) has not been reached by 3D-ALNS-H.

In this paper, the vehicle routing problem with clustered backhauls has been extended to an integrated vehicle routing and loading problem with 3D rectangular items to be transported and homogeneous vehicles with a rectangular 3D loading space. Additionally, several loading constraints are included in the problem formulation that occur frequently in freight transportation. Two hybrid algorithms for solving the 3L-VRPCB have been proposed. In the first algorithm, an ALNS procedure serves for routing vehicles while a VNS procedure is responsible for this task in the second algorithm. Both of the algorithms include the same tree search procedure for packing items in a loading space that was adopted from a previous hybrid algorithm for 3L-CVRP. Other key features concern the integration of routing and packing, namely the "evaluating first, packing second" technique and the use of a cache for routes, and serve to ensure a reasonable computational effort. The hybrid algorithms were tested by means of 95 newly introduced 3L-VRPCB instances that were derived from well-known VRPCB benchmark instances. In the calculations, plausible results were reached for both the algorithms. In particular, an increase of travel distance of 30 percent or more has been observed if the 3D backhaul problem is solved instead of the corresponding 1D backhaul problem. Of course, other findings may result by other load settings regarding mean volume, shape of boxes etc. and this could be a subject of further investigations. However, it seems that modeling and calculating real-world scenarios with backhauls as three-dimensional backhaul problems will often lead to more realistic results. High-quality results were also achieved by means of the first hybrid algorithm for two well-known sets of benchmark instances of the 3L-CVRP being a special case of the 3L-VRPCB.

There are several directions for future research. First, we want extend further routing problems to integrated routing and loading problems as, e.g., the pickup and delivery problem. Including time windows into the problem setting of the present paper is also an interesting avenue for future research. In addition, we believe that it is also worth to study the cooperative vehicle routing problem in Sprenger and Mönch (2012) with additional backhauls and loading constraints. This problem is strongly influenced by a real-world setting where backhauls occur.

@&#ACKNOWLEDGMENT@&#

The authors would like to thank the two anonymous referees for their valuable comments that helped much to improve the paper.

@&#REFERENCES@&#

