@&#MAIN-TITLE@&#Integrated aerodynamic design and analysis of turbine blades

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Aerodynamic blade design is supported by application and Information integration.


                        
                        
                           
                           Coordination of engineering processes is enabled by project and workflow management.


                        
                        
                           
                           Blade airfoils are presented by tailored geometric modeling techniques.


                        
                        
                           
                           3D flow analysis is conducted to assess blade’s aerodynamic performance.


                        
                        
                           
                           Design integration, collaboration and optimization are addressed in parallel.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Aerodynamic blade design

Airfoil modeling

Design integration

Design collaboration

Engineering process management

Flow analysis

@&#ABSTRACT@&#


               
               
                  This paper presents an integrated approach for aerodynamic blade design in an MDO (multidisciplinary design optimization) environment. First, requisite software packages and data sources for flow computations and airfoil modeling are integrated into a single cybernetic environment, which significantly enhances their interoperability. Subsequently, the aerodynamic blade design is implemented in a quasi-3D way, supported by sophisticated means of project management, task decomposition and allotment, process definition and coordination. Major tasks of aerodynamic blade design include 1D meanline analysis, streamsurface computations, generation of 2D sections, approximation of 3D airfoils, and 3D flow analysis. After compendiously depicting all the major design/analysis tasks, this paper emphatically addresses techniques for blade geometric modeling and flow analysis in more detail, with exemplar application illustrations.
               
            

@&#INTRODUCTION@&#

Turbine blades are core components of an aeroengine, a typical sub-category of gas turbines, which transform aerodynamic and thermal energy carried by gas fluids into mechanical driving energy. Consequently, operations of turbine blades largely dominate the global engine performance, such as thrust, aerodynamic and thermal efficiency, fuel-efficiency, and reliability. Today’s increasingly augmented requirements for high performance aeroengines subject turbine blades to fiercely intensive aerodynamic, thermal and mechanical loadings. These extreme physical loadings make turbine blades work in very harsh conditions that approach the limits of its material properties such as melting points, stress and damage-resistance thresholds.

Accordingly, turbine blade design has been regarded as one of the most difficult engineering problems, which has drawn intensive attention from both industrial and academic circles. Generally, design of turbine blades is a complex multidisciplinary process involving the integration of several disciplines such as aerodynamics, structures, dynamics, and heat transfer [1].

Disciplinarily, aerodynamics engineers have to control the very complex flow phenomena occurring in highly loaded stages, on the whole operating range of the engine [2]. And, thermodynamics engineers have to accurately comprehend the heat transfer processes between gas flows, coolants and solid structures, and keep temperatures within the blade structure well below the allowable limits. While, mechanics engineers are expected to precisely predict and simulate structure deformations and dynamic responses under the aerodynamic, thermal and mechanical loadings.

Conventionally, the multiple disciplinary computations were carried out separately by different groups of engineers, aided by a number of stand-alone problem-solvers. Conceivably, the isolated computing processes result in remarkable engineering inefficiency and ensnarement in local optimums. Besides, the isolated legacy problem-solvers leave out of account strong couplings among disciplinary computations for turbine blade engineering.

To effectively tackle the drawbacks of traditional sequential design approaches, companies are growingly employing integrated, collaborative, and multidisciplinary design technologies. Actually, since the advent of information technologies, researchers have been continuously looking for cost-effective integration approaches to build bridges among isolated “automation islands” [3,4].

In regard to aeroengine design, a variety of integrated engineering infrastructures have been implemented to improve interoperability among heterogeneous software packages and data sources. For instance, Talya et al. (2000) presented an integrated multidisciplinary design optimization procedure for design of both internally and externally cooled gas turbine blades [5]. Houstis et al. developed a multidisciplinary problem solving environment to support collaborative design of gas turbines, where the legacy FORTRAN and C codes were wrapped up and delegated by agents [6].

As a common practice, turbine blade design commences with aerodynamic shape design, of which the ultimate goal is to find the airfoil surfaces that optimize the blade’s aerodynamic performance. Blade airfoil design essentially relies on numerical computations that describe and predicate various fluid flows within turbine stages, in compliance with governing equations of mass, momentum and energy conservations. The fluid governing equations are generally called Navier–Stokes equations in the literature, and the corresponding software packages are called 3D Navier–Stokes solvers.

Thanks to rapid enhancements of computational capabilities, software codes of finite difference methods (FDM), finite element methods (FEM) and finite volume methods (FVM) are able to solve the 3D governing equations in reasonable time periods. However, finding numerical solutions to the governing equations in 3D blade passages is so time-consuming that for a long time the equations have been solved in 2D or quasi 3D spaces by industries.

And, in engineering practice, many companies have not shifted to the full 3D computational paradigm; 2D and quasi-3D aerodynamics solvers still play a dominant role in blade engineering. Recently, Koini et al. (2009) developed a software tool for interactively constructing parametric 3D blade models on basis of 2D profile sections [7]. Qiu et al. (2010) presented an integrated blade design system that incorporates 1D meanline analysis, quasi-3D throughflow and blade-to-blade flow calculations, and 3D CFD [8].

In accompaniment to worldwide zeal for multidisciplinary design optimization (MDO), we have been developing an MDO environment [9] for a decade, which concordantly incorporate information and application integration techniques [10–13], optimization algorithms [14], response surface models [15], etc. The MDO environment is a platform of high maintainability, scalability and flexibility, which may accommodate existing legacy problem-solvers and emerging problem-solvers. With support from a number of manufacturing companies, the ad hoc MDO environment has been employed in several engineering analysis and design scenarios like turbine blade design, aircraft flight-load design, aeroengine heat transfer analysis, ship power system design, and developments of car molds.

The goal of this paper is to present how the MDO environment is implemented to aerodynamic turbine blade design, by performing “what-if” computations of flow velocity and pressure distributions, and blade geometries. Specifically, this work addresses an initial pilot phase of implementing MDO techniques to aeroengine design, which aimed at validating feasibility and merits of applying multidisciplinary design integration and optimization techniques.

To reduce implementation complexity and to rapidly gain technical benefits, the practitioner engineers decided that emphasis of the pilot phase was put on design integration and collaboration in the context of aerodynamic blade engineering. This meant that the pursuit of design optimization was not explicitly addresses in this stage, and perspectives of heat transfer analysis and structural analysis were not accounted.

The rest of this paper is structured as follows. Section 2 describes how software codes and data sources used for quasi-3D aerodynamic blade design are integrated. Section 3 first explains how aerodynamic design is defined and managed in terms of projects, tasks and workflows. Then, Section 3 depicts the major tasks of blade airfoil engineering. Section 4 depicts in more detail the geometric modeling techniques that are used to approximate blade airfoils. Section 5 presents how flow characteristics analysis, various losses and efficiencies are computed in the MDO environments. Section 6 finally concludes this paper.

In practice, a turbofan engine may run with one, two or up to three spools, which respectively have one, two or three turbines for extracting energy from the exhaust fluid. In turn, a turbine comprises multiple stages, each of which has a rotor that extracts the fluid energy, and a stator that adjusts the flow velocity and direction. Compositionally, a rotor is a cascade of blades attached to a disc at the roots, in which the throughflows of exhausts mainly move forwards in parallel to the axis of rotation. And, a stator is a cascade of blades or vanes attached to the engine casing at the tips, in which the throughflow velocity and direction are adjusted. This work addresses integrated aerodynamic blade design through all turbine stages in the MDO environment.

As unable being computed by a monolithic software package, the quasi-3D blade aerodynamic design is collectively computed by over a dozen of disciplinary analysis and design codes that respectively predict 1D, 2D and 3D flow characteristics, and depict the corresponding blade geometries in 2D and 3D spaces. It is implicitly assumed that the aerodynamic computations are conducted without accounting for heat transfer (adiabatic conditions), and structural responses induced by the aerodynamic loads.

Noticeably, all the in-house developed 1D and 2D flow computing codes and blade profile modeling codes were written in procedural FORTRAN and C languages, which use plain text files for data retrieval and transfer. And, engineers had to manually prepare the input files and visually parse the output files of computation processes because the legacy software applications were default of Graphical User Interfaces (GUIs). Generally, these stand-alone problem-solvers did not support out-process communications and multiple concurrent user access.

Consequentially, integration techniques are implemented as an essential part of the MDO environment, which accommodate all the codes and data sources on a single cybernetic platform. This enables effective coordination and tight collaboration in design of turbine blade airfoils.

Application integration allows executions of disciplinary software packages to be effectively controlled and coordinated. In the MDO environment, aerodynamic engineers do not have to memorize a large number of command lines for launching the legacy problem-solvers. And, they are provided with means to interact with the computation processes, by using surrogate objects [10].

Software packages integrated into the MDO environment are no longer independent systems but parts of a whole. Therefore, the software packages need to be known of their existence and let their executions be controlled and coordinated. The MDO environment uses dynamic registration and configuration approaches to keep track of the integrated applications. As shown in Fig. 1
                        , an application’s registration information generally includes its name, discipline, command lines, versions, running environments, executable file with a suffix of exe or bat, numbers and names of the input/output files, its host machine and absolute path.

In conjunction with application integration, information integration carries out interoperations among heterogeneous data sources, by building mapping relations among data objects, semantically parsing unstructured input/output files, and transforming data representation schemas. For instances, data mapping methods are implemented to discern disciplinary parameters contained in a solver’s input/output files, and to maintain dynamic linkages between the non-structured parameter files handled by a solver and the structured data objects (database records or XML files) handle by the integration platform [11].

Information integration relieves engineers from frequently switching computation processes and transferring data forth and back among them. Information integration provides engineers with appropriate means to keep records of design evolutions and to analyze the cause-effects between input and output parameters. Information integration also enables capturing and reusing engineering knowledge and know-hows accumulated by specialist engineers in long time courses.

Technically, information integration implementations are service-oriented, which implies that all operations and transformations performed on data objects are regarded as services provided by mediators. Similarly, Yu et al. presented a CAE-integrated distributed collaborative design system that encapsulated CAE software tools by service providers [16]. In this work, the ActiveX Data Objects (ADO) technology is used for handling both relational and non-relational data sources. ADO components abstract the semantics of the data transactions and provide interfaces for retrieving and performing operations on the stored data.

In the MDO environment, information integration techniques provide communications between designers and applications, and also automate data transfers between one application and another. For instance, Windows based user interfaces hide an application’s command lines and permit engineers to input and select design parameters via well-structured tables, views and pop-up dialogs.

In summary, application and information integration addresses human factors, applications and data sources in a holistic way, which considerably enhances interoperability among distributed engineers, dissimilar software packages, and heterogeneous data sources.

To avoid descriptive redundancy, we refer readers to our previous publications for technical details of the integration techniques [3,9–11].

Integration sets requisite basis for aerodynamic blade design to be smoothly streamlined into workflows and thus coordinated in alignment with well-established procedures. Based on integration of disciplinary codes and data, the MDO environment provides sophisticate project and workflow management techniques to support design integration and collaboration.

As shown in Fig. 2
                     , the MDO environment provides means to decompose blade aerodynamics design and analysis into a number of tasks, which are deliberately defined in terms of actors, precedence restraints and resources. Subsequently, workflows of aerodynamic blade design are built on basis of tasks, their pre- and post-conditions, triggering events, etc. Undoubtedly, workflow management techniques are of considerable significance to enhancing blade design efficiency and integrity.

In a general sense, aerodynamic blade design is a progressive process evolving from one-dimensional (1D) design, through 2D profile curvature modeling, to 3D surface approximation and flow performance analysis. More specifically, aerodynamic blade design and analysis is composed of computations of 1D meanline analysis, 2D streamsurfaces, basis section profiles, stacking, 3D airfoil modeling, 3D flow simulations, and prediction of efficiencies/losses.

Conceivably, a generic blade aerodynamic design process is an aggregation of several sub-processes, which are composed of a number of tasks. Logically, each design/analysis sub-process is a recursive loop of computational tasks, and, the global blade design process is an iterative loop of the sub-processes. Below, we compendiously discuss the major sub-processes of aerodynamic blade design and analysis.

Due to length limit, this section will not further address the workflow issues because detailed workflow specification, verification, and control techniques can be found in previous literature, such as the requirement-oriented automated framework for formal verification of service workflows [17]. Quite recently, Lwin et al. also developed a Web-based MDO framework that aimed at simultaneously integrating legacy code and workflow management, which were used for helicopter rotor blade design [18].

Despite the sophistication and improvement of 3D CFD technology, one-dimensional meanline analysis still has its irreplaceable role in the turbomachinery design process [8]. Consequentially, aerodynamic blade design often begins with one-dimensional or 1D meanline design/analysis that calculates global flow parameters along mid-height line of blades through the turbine stages.

1D meanline analysis calculates aerodynamic performance of the exhaust flow along a single streamline at mid-heights of blades through all turbine stages. Leaving vortex or rotational flows out of account, 1D meanline analysis depicts the velocity of the exhaust flow in two velocity vectors, absolute and relative velocities. Assuming constant axial flow velocity and meanline blade radius, the meanline analysis calculates velocity triangles at blade leading edges and trailing edges [19].

The objective of 1D meanline analysis is to determine blade/vane inlet and exit angles, pressure ratio per stage, the number of stages, numbers of blades and vanes of each stage, and annulus blade shapes, which provides inputs to subsequent calculations.

Normally, the exhaust flow from a combustor first enters a stator, called an inlet guided vane (IGV), the utility of which is to ready the flow velocity and direction. Then, the exhaust flow exiting the IGV with an absolute velocity enters the first stage rotor, which rotates with an angular velocity. The absolute velocity of exhaust fluids, the circumferential velocity at the mid-height of a blade, and the relative velocity of the fluids to blade constitute the well-known velocity triangle.

Through the first stage rotor the fluids transfer energy to the blades, which decreases fluid pressure and density. While the axial component of flow velocity remains constant, the circumferential component of flow velocity increases. After leaving the rotor, the fluids enter the first stage stator that regulates the flow velocity and direction for the second stage rotor. And, similar changes in fluid velocity, pressure and density take place in the subsequent turbine stages.

The velocity triangles enable engineers to select desirable inlet and exit angles at meanline radii of blades and vanes. 1D meanline analysis also helps engineers to make decisions on several critical aerodynamic parameters. For instance, fluid pressure drops through a rotor because of fluid expansion and energy extraction. Conceivably, pressure ratio of inlet pressure to outlet pressure in a rotor blade is of great significance to the aerodynamic efficiency and turbine structure. Pressure ratio in a turbine cascade is generally set larger than that in a compressor cascade, which permits less turbine stages to extract sufficient energy.

One dimensional meanline analysis helps engineers to choose pertinent values for a number of aerodynamic parameters. Categorically, flow coefficient determines the ratio of the axial velocity of fluids to circumferential velocity at a blade mean radius, which geometrically dominate flow turning angles. This parameter exerts impacts on mass flow rate and hence the blade throughflow areas. Stage loading coefficient is another decision parameter that determines the number of stages in a turbine, in conjunction with mass flow rate and required energy output.

In regard to the number of blades in a cascade, the pitch-to-chord ratio or solidity is a crucial parameter.

As axial velocity and blade radius remain constant throughout turbine stages, whereas gas density decreases down turbine stages. To counteract the effect of reduction in fluid density, the blade throughflow area, the annulus area, has to progressively increase from stage to stage. This leads to considerable increase in blade heights through stages.

As shown in Fig. 3
                        , the 1D meanline analysis yields preliminary design of turbine meridional flow path, number of stages, flow characteristics, etc. It is observed that there exist remarkable differences between blade numbers and shapes among turbine stages.

After performing 1D meanline analysis, engineers distribute geometric parameters along the radii, and proceed to perform two dimensional or 2D streamsurface analyses.

Two-dimensional aerodynamic blade design uses some streamsurface algorithms to ascertain the blade cross-section flows and throughflows that fulfill the aerodynamic requirements. In 2D aerodynamic computations, streamsurfaces, especially the so-called S1/S2 streamsurfaces, are formulated to control velocities and pressures of flows and determine blade profiles in terms of coordinates of critical points and surface curvatures.

The definition of blade-to-blade (S1) and hub-to-tip (S2) stream faces was introduced by Wu and this viewpoint dominated the subject until the early 1980s when fully three dimensional (3D) methods first became available [20].


                        Fig. 4
                         presents an illustration of the S1/S2 streamsurfaces. The axisymmetric S2 streamsurfaces calculate hub-to-tip throughflows, which is essential to work outputs of turbomachines. The natural formulation of the throughflow problem is to obtain the solution with a specified mass flowrate [20]. During the design process, the S2 streamsurfaces are solved in direct and inverse formulations. The direct S2 streamsurface solver calculates the flow velocity distribution when blade geometric variations are given. The inverse S2 streamsurface solver determines blade spanwise variations with given velocity distributions.

The S1 streamsurfaces, generally assumed surfaces of revolution, calculate flows from a blade to its adjacent blade. Like the S2 streamsurfaces, S1 streamsurfaces are also solved in two modes. S1 solvers either determine blade section profiles with given surface pressure distributions (the inverse design mode), or calculate blade surface pressure distribution with given blade section geometries.

There are many available numerical methods, such as streamline curvature and stream function methods, are applied to solve the S1/S2 stream surfaces. In this work, in-house developed ad hoc S1/S2 computation codes are applied to solve the direct and inverse streamsurface problems.

The major task following up 1D and 2D flow analysis is to design blade airfoils, in terms of 2D cross section profiles and 3D solid geometric models. As blades are dissimilar through stages, blade airfoil computations are repeatedly performed for each turbine stage.

With respect to designing a single baled airfoil, several cross section profiles, often known as basis sections, are first developed in accordance with calculations S1/S2 streamsurfaces. Design of a blade section profile attempts to attain curvature smoothness and reduction of profile losses. The profile or airfoil section is composed of four distinct curves, corresponding to the suction side, the pressure side, leading and trailing edges, and must be curvature continuous, at least retaining C2 continuity [21].

In this work, a number of interpolation and approximation algorithms are implemented to determine appropriate blade section profiles. As shown in Fig. 5
                        , the MDO environment may solve the section profiling problems with direct and inverse design methods.

With the inverse design method, the MDO environment first allows engineers to specify desirable velocity and pressure distributions, and then computes discrete boundary points that meet the requirements. Consequently, it generates section profiles by interpolating or approximating the control points that arise from aerodynamic computations. Obviously, the engineering efficiency largely depends on engineer’s knowledge of optimal velocity and pressure distributions, and benchmark data of previous designs.

Whereas, with the direct design method, the MDO environment allows veteran engineers to manually adjust positions of control points by mouse clicks and drags, and accordingly computes and displays aerodynamic characteristics of the airfoil variants. Apparently, this trial-and-error design method heavily depends on engineering experiences and know-hows about optimal profile curvatures.

2D section profiles provide detailed geometric parameters like inlet and outlet angles, stagger and wedge angles, thickness distributions, diameters of leading and trailing edges.

In practice, about 5 or up to 7 basis section profiles are normally created for a blade, in alignment with computation of S1/S2 streamsurfaces. These basis section profiles are further stacked along a radial stacking line, which heavily influences the 3D airfoil of a blade. Subsequently, 3D blade airfoils are generated by wrapping up the stacked section profiles with boundary surfaces defined by geometric interpolation or approximation algorithms. In general, a blade surface should be generated in such a way that the given section profiles are interpolated and each isoparametric line of the turbine blade surface representation (between the given profile curves) is a planar profile curve too and each profile planes are parallel [22].

Blade streamsurface computations are very time-consuming tasks, which are unlikely to attain optimal solutions in a few iterations. Hence, prohibitive computation costs make engineers unable and reluctant to manually validate many blade geometric variations for finding better flow characteristics. With recourse to the MDO environment, engineers are able to easily change the blade parameters such as inlet and exit angles, stagger angles, chord lengths, and thickness distributions to verify a larger number of flow simulations. And, sophisticated graphical representation means make engineers feel very easy to validate and judge the computation outcomes of aerodynamic parameters and geometric parameters.

Naturally, it is concerned if the desired aerodynamic performance will be achieved or not with 3D blade airfoils resulted from approximating surfaces that cover the skeletons of stacked basis sections. Hence, 3D flow analysis has to be conducted to validate the aerodynamics performance, by using CFD tools. The 3D flow analysis predicts flow characteristics through every turbine stage, which includes mass flow rate, power, efficiency, velocities, pressures, losses, etc.

3D flow analysis posterior to creation of 3D blade airfoils avoid high computation costs of extensively running CFD systems in the preliminary design stages. On the other hand, it allows engineers to precisely assess blade structures on basis of aerodynamic simulations. In a turbine, variations of geometric parameters exert considerable influences on loss mechanisms like secondary loss, tip clearance loss, and profile loss. Accordingly, the 3D flow analysis provides engineers with explicit performance criteria for incessantly refining blade airfoils until losses are effectively decreased.

This section further discusses geometric modeling techniques both for 2D and 3D blade airfoils in more detail. Even though CAD systems are integrated in many collaborative design platforms, there sound reasons of applying tailored geometric modeling techniques in aerodynamic blade design. Tailored geometric modeling techniques constitute rudimentary parts of the MDO environment.

In design of 2D blade profiles, geometries computed by the legacy problem-solvers are represented as coordinates of points on sectional surfaces, and stored in plain data files. It is very time consuming and tedious for engineers to manually process primitive geometric data and regenerate 2D blade models with a commercial CAD system. Apart from this drawback, commercial CAD systems do not permit 3D blade airfoils to be constructed by stacking and skinning 2D section profiles. Besides, using commercial CAD systems in aerodynamic blade design is quite likely to result in erroneous manipulation of data and lower work efficiency. Thus, it is computationally impracticable for engineers to regenerate blade geometric models in each aerodynamic computation by using a CAD system.

Therefore, it is a common practice for aerodynamic engineers to generate geometric blade models by using ad hoc geometric modeling tools instead of complex commercial CAD systems. To meet requirements of modeling blade airfoils, the MDO environment provides a number of curve and surface generation techniques by coding a number of polynomial interpolation and approximation algorithms.

As mentioned above, the quasi-3D blade engineering approach first generates a number of blade cross-sections, and then stacks these section profiles along a radial axis to form a 3D surface model of a blade.

Invariantly, a 2D/3D blade airfoil is composed of four components, i.e. the leading edge, suction, pressure, and trailing edge curves/surfaces. Aerodynamics engineers apply the inverse analysis algorithms to determine the desirable blade section profiles that satisfying prescribed velocity and pressure distributions. The profile curves are often controlled by a number of discrete control points.

A 2D blade section profile determines the blade-to-blade exhaust flow through the turbine cascade. In this work, the control points are either specified by global coordinates or by relative positions to the blade camber line. And, the four curve segments of a planar blade profile can be generated by a number of piecewise polynomial representations, such as simple cubic splines [5].

To avoid redundancy, this paper does not intend to depict the mathematical equations of various polynomial integration and approximation methods, which can be easily found in literature like [23]. The MDO environment has comprehensively implemented the commonly used curve interpolation/approximation methods, which allows engineers to model blade profiles with flexible combinations of curve representations.

First, the leading and trailing edges are represented by circular arcs while the suction and pressure curves are interpolated with cubic or higher order splines. Second, all the four curves are represented by B-splines or Bézier curves, a remarkable disadvantage of which is their incompetency of accurately representing circular arcs at the edges. Third, all the four curves are modeled by Non-Uniform Rational B-Splines (NURBS), the merits of which are using one uniform modeling method, and conveniently generating precise representations of circular leading and trailing edges.

After generating a blade section profile, engineers may interactively adjust suction and pressure curves for meeting specified blade thickness distributions, by numerically reconciling the geometric discrepancies. In this way, the MDO environment provides engineers with high flexibility of choosing pertinent ways to represent the blade profile curves. This enables engineers to efficiently validate different blade profile options, in terms of geometric parameters like stagger angle, inlet/outlet angles, solidity, thickness distributions, etc. By integrating direct and inverse streamsurface solvers and geometric modeling techniques, the MDO environment has created correlational mappings among blade section profiles, flow losses, efficiencies, and other characteristics. These correlational mappings make a change in one part automatically trigger changes in other parts. Based on these sophisticated correlational mappings, engineers can efficiently carry out a large number of interactive emulations to evaluate mutual influences between blade profiles and flow characteristics.

For instance, when engineer drag control points to designated positions on screen by mouse clicks, the system automatically regenerates the blade section profile and calculates consequential flow properties. On the other hand, when engineers modify inputs of aerodynamic performance, the system automatically calculates the resulting changes in control point positions, and regenerates blade section profiles.

After building a number of section profiles, the system helps engineers to create a solid blade airfoil by mounting up the profiles along a stacking axis and closely skinning the stacked sectional profiles. Obviously, there are many geometric parameters that considerably influence the final blade shape, and hence its aerodynamics performance. Unfortunately, there are no straightforward rules that can guarantee optimal selections of profile stacking and surface approximating parameters.

Apparently, the stacking and skinning processes are basically based on engineering know-hows and historical inveteracies. To provide engineers with a wide range of optional methods for profile stacking and boundary skinning, the MDO environment formalizes and keeps a set of heuristics and know-hows extracted from engineering experiences of veteran engineers, which allow guided selections of the control parameters.

For instance, it is recommended that stator vane sections be mounted up a stacking axis through the centers of the leading edges or trailing edges, whereas, rotor blade profiles be mounted up through their mass centers. This method of selecting stacking locations is believed of being able to maintain high structural integrity.

In practice, stacking axes are not always lines but frequently curves, which permit bending and twisting effects of blade airfoils. Therefore, apart from straight lines, the system permits stacking axes to be optionally approximated with Bezier or NURBS curves, which enable blades to lean or bend over in the circumferential or axial directions.

And, the NURBS formulation is used to create 3D blade surfaces because NURBS surfaces are generally believed of outperforming other surface approximations. Fig. 6
                        a presents an illustration of stacked blade sections, Fig. 6b a 3D blade airfoil of NURBS surfaces, and Fig. 6c an illustration of effects of stacking axes.

As noticed, design of blade airfoils are based on 1D and 2D aerodynamic computations, whereas, exhaust flows in axial turbines are actually three dimensional. Consequentially, it is natural that 3D flow analysis has to be conducted, often by using commercial CFD codes, to calculate exact velocity and pressure distributions on the blade profiles, to predict various losses hence incurred, and to precisely evaluate aerodynamic efficiencies of the blade cascades.

Aerodynamic blade design is a multiobjective optimization problem that tries to find a set of geometric parameters, which simultaneously minimize a group of global and disciplinary objective functions, while satisfying a number of constraints. Mathematically, an aerodynamic blade design problem may be formulated as below.
                        
                           (1)
                           
                              
                                 min
                              
                              
                                 
                                    F
                                 
                                 
                                    i
                                 
                              
                              (
                              X
                              )
                              
                              i
                              =
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              m
                           
                        
                     subject to
                        
                           (2)
                           
                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      h
                                                   
                                                   
                                                      l
                                                   
                                                
                                                (
                                                X
                                                )
                                                =
                                                0
                                                
                                                l
                                                =
                                                1
                                                ,
                                                2
                                                ,
                                                3
                                                ,
                                                …
                                                ,
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      g
                                                   
                                                   
                                                      j
                                                   
                                                
                                                (
                                                X
                                                )
                                                ≤
                                                0
                                                
                                                j
                                                =
                                                1
                                                ,
                                                2
                                                ,
                                                3
                                                ,
                                                …
                                                ,
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      i
                                                   
                                                   
                                                      -
                                                   
                                                
                                                ≤
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ≤
                                                
                                                   
                                                      x
                                                   
                                                   
                                                      i
                                                   
                                                   
                                                      +
                                                   
                                                
                                                
                                                i
                                                =
                                                1
                                                ,
                                                2
                                                ,
                                                3
                                                ,
                                                …
                                                ,
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     where X
                     =(x
                     1, x
                     2, …, xn
                     )∊
                     Rn
                      are decision variables, Fi
                     (X) are global and disciplinary objective functions, hi
                     (X) and gi
                     (X) are equality and inequality constraints.

Specifically, the objective functions in this work focus on blade weights, aerodynamic efficiencies or losses due to secondary flows. Weight reduction is simply formulated as reduction of blade volumes. On the other hand, mechanisms and formulations of secondary flow losses are somewhat complex. Apart from the main axial flows, there also exist a number of unsteady secondary flows in a turbine, which are very heterogeneous in terms of directions and velocity magnitudes. These secondary flows and their mixing with the main flows result in a variety of losses.

Losses in a blade cascade are normally categorized into secondary flow loss, profile loss, tip clearance loss, endwall loss, shock loss, etc. The term of secondary flow is generally used to address flows that have non-zero velocity components normal to main flows, which give rise to vortices and turbulences. It is widely accepted that losses caused by secondary flows constitute major part of energy losses in turbines.

The profile loss results from energy dissipation on blade boundary layers. The endwall loss is a kind of secondary flow losses result from mixing vortexes and energy dissipation near hub boundary layers.

The tip clearance loss results from flow leakage from pressure surfaces through cleavages between blade tips and the engine case to suction surfaces, due to pressure discrepancies. Tip leakage losses are caused by the facts that leakage flows produce no useful work, and they produce turbulent secondary flows when mixing with the main flows. Maintaining appropriate tip clearances is a difficult task. Smaller tip clearances definitely decrease leakage losses, however may not sufficiently allow for thermal growths of blade heights, which is likely to result in severe abrasion and failure. Larger tip clearances guarantee safe operations but result in considerable leakage losses.

Because of their crucial impacts on turbine efficiencies, a lot of mechanisms or models have been developed to interpret and calculate these losses. For instance, a classic formula for calculating the overall pressure loss caused by secondary flows is given below [24].
                        
                           (3)
                           
                              
                                 
                                    Y
                                 
                                 
                                    s
                                 
                              
                              =
                              4
                              λ
                              
                                 
                                    (
                                    tan
                                    
                                       
                                          α
                                       
                                       
                                          in
                                       
                                    
                                    -
                                    tan
                                    
                                       
                                          α
                                       
                                       
                                          out
                                       
                                    
                                    )
                                 
                                 
                                    2
                                 
                              
                              
                                 
                                    
                                       
                                          cos
                                       
                                       
                                          2
                                       
                                    
                                    
                                       
                                          α
                                       
                                       
                                          out
                                       
                                    
                                 
                                 
                                    cos
                                    
                                       
                                          α
                                       
                                       
                                          m
                                       
                                    
                                 
                              
                           
                        
                     where 
                        
                           λ
                        
                      is a parameter correlated with flow acceleration, αin
                     , αout
                      and αm
                      are respectively flow incidence angle, exit angle, and average angle in the blade cascade.

Accordingly, a variety of loss models are implemented in the system to provide engineers with tools for predicting losses commonly encountered in blade rows. For the sake of simplicity, we do not replicate these loss models in this paper, which may be found in previous literature, such as [24].

The system spontaneously displays flow characteristics in elaborate graphical representations, such as blade radial distributions of flow exit angles, pressures, and energy losses, etc., as shown in Fig. 7
                     . The graphical representations of flow characteristics serve as an indispensable booster to insightful comprehension of complex flows through turbine stages.

The ultimate goal 3D flow analysis is to manifestly show discrepancies between actual flows and desirable flows, which necessitate continual refinements of blade airfoils.

@&#CONCLUSIONS@&#

This paper presents outcomes of the initial pilot stage of implementing an MDO environment to aerodynamic blade design and analysis. In this work, application and information integration techniques are applied to build a shared cybernetic platform for engineering computations. Then, sophisticated means of engineering flow management are developed to effectively coordinate the design and analysis activities.

Technically, the aerodynamic blade design is implemented as an iterative engineering process that is rudimentarily composed of sub-processes of 1D meanline analysis, S1/S2 streamsurface computations, 2D section profiling, 3D airfoil approximations, and 3D flow analysis. Essentially, a number of curve/surface interpolation and approximation algorithms are coded to allow flexible generation of 2D/3D blade airfoils. The tailored geometric modeling utilities save engineers from inefficiency and incompetency of using commercial CAD systems.

Subsequently, the system enables engineers to efficiently conduct 3D flow analysis computations and to clearly comprehend fluid behaviors against given blade airfoils. This makes blade airfoils be iteratively improved until desirable aerodynamic performance is met.

It is also recognized that aerodynamic blade design is a knowledge intensive process where know-hows play an important role. In this work, the intangible engineering know-hows are dealt in two alternative ways. First, procedural rules are formally abstracted and coded to support decision-making activities. Second, a set of alternative approaches are provided in cases where no explicit procedural rule can be formulated, which allow engineers efficiently compare a number of design options.

Convincingly, the pilot application has yielded remarkable technical benefits that have greatly lessened suspicion about transferring conventional aerodynamic blade design to the new cybernetic platform. The fruitful outcomes of the pilot stage have effectively bolstered continual implementations of heat transfer analysis, structural analysis, and multidisciplinary design optimization in design of blades, discs, and other components. And, the extended technical applications of the MDO environment are to be addressed in following up papers.

@&#ACKNOWLEDGMENTS@&#

The author would thank his colleagues and postgraduate students who have taken part in the projects concerned with this work for their strenuous efforts to develop and implement the system. The author is also grateful to the aerodynamics engineers who considerably contribute to successful application of the computerized techniques. Finally, the author thanks the two anonymous reviewers for their constructive comments and suggestions for improving the paper.

@&#REFERENCES@&#

