@&#MAIN-TITLE@&#Inference of ranking functions for proving temporal properties by abstract interpretation

@&#HIGHLIGHTS@&#


               
                  
                  
                     
                        
                           
                           We present new static analysis methods for proving liveness properties of programs.


                        
                        
                           
                           We generalize an existing abstract interpretation framework for termination.


                        
                        
                           
                           We reuse existing abstract domains based on piecewise-defined ranking functions.


                        
                        
                           
                           The static analyses methods infer sufficient preconditions for the liveness properties.


                        
                        
                           
                           We provide a prototype implementation of these static analyses.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Static analysis

Abstract interpretation

Liveness

Temporal properties

Ranking functions

Termination

@&#ABSTRACT@&#


               
               
                  We present new static analysis methods for proving liveness properties of programs. In particular, with reference to the hierarchy of temporal properties proposed by Manna and Pnueli, we focus on guarantee (i.e., “something good occurs at least once”) and recurrence (i.e., “something good occurs infinitely often”) temporal properties.
                  We generalize the abstract interpretation framework for termination presented by Cousot and Cousot. Specifically, static analyses of guarantee and recurrence temporal properties are systematically derived by abstraction of the program operational trace semantics.
                  These methods automatically infer sufficient preconditions for the temporal properties by reusing existing numerical abstract domains based on piecewise-defined ranking functions. We augment these abstract domains with new abstract operators, including a dual widening.
                  To illustrate the potential of the proposed methods, we have implemented a research prototype static analyzer, for programs written in a C-like syntax, that yielded interesting preliminary results.
               
            

@&#INTRODUCTION@&#

Software verification addresses the problem of checking that programs satisfy certain properties. Lamport, in the late 1970s, suggested a classification of program properties into the classes of safety and liveness properties [1]. The class of safety properties is informally characterized as the class of properties stating that “something bad never happens”, that is, a program never reaches an unacceptable state. The class of liveness properties is informally characterized as the class of properties stating that “something good eventually happens”, that is, a program eventually reaches a desirable state.

Manna and Pnueli, in the late 1980s, suggested a more fine grained classification of program properties into a hierarchy [2], which distinguishes four basic classes making different claims about the frequency or occurrence of “something good” mentioned in the informal characterizations proposed by Lamport:
                        
                           •
                           
                              safety properties: “something good always happens”, i.e., the program never reaches an unacceptable state (e.g., partial correctness, mutual exclusion);


                              guarantee properties: “something good happens at least once”, i.e., the program eventually reaches a desirable state (e.g., total correctness, termination);


                              recurrence properties: “something good happens infinitely often”, i.e., the program reaches a desirable state infinitely often (e.g., starvation freedom);


                              persistence properties: “something good eventually always happens”, i.e., the program eventually reaches and stays in a desirable state (e.g., stabilization).

This paper concerns the verification of programs by static analysis. We set our work in the framework of Abstract Interpretation [3], a general theory of semantic approximation that provides a basis for various successful industrial-scale tools (e.g., Astrée [4]). Abstract Interpretation has to a large extent been concerned with safety properties and has only recently been extended to program termination [5], which is just a particular guarantee property.

In this paper, we generalize the framework proposed by Cousot and Cousot for termination [5] and we propose an abstract interpretation framework for proving guarantee and recurrence temporal properties of programs. Moreover, we present new static analysis methods for inferring sufficient preconditions for these temporal properties. Let us consider the program SIMPLE in Fig. 1
                     , where the program variables are interpreted in the set of mathematical integers. The first loop is an infinite loop for the values of the variable x greater than or equal to zero: at each iteration the value of x is increased by one. The second loop is an infinite loop for any value of the variable x: at each iteration, the value of x is increased by one or negated when it becomes greater than ten. Given the guarantee property “x=3 at least once”, where x=3 is the desirable state, our approach is able to automatically infer that the property is true if the initial value of x is smaller than or equal to three. Given the recurrence property “x=3 infinitely often”, our approach is able to automatically infer that the property is true if the initial value of x is strictly negative (i.e., if the first loop is not entered).

Our approach follows the traditional method for proving liveness properties by means of a well-founded argument (i.e., a function from the states of a program to a well-ordered set whose value decreases during program execution). More precisely, we build a well-founded argument for guarantee and recurrence properties in an incremental way: we start from the desirable program states, where the function has value zero (and is undefined elsewhere); then, we add states to the domain of the function, retracing the program backwards and counting the maximum number of performed program steps as value of the function. Additionally, for recurrence properties, this process is iteratively repeated in order to construct an argument that is also invariant with respect to program execution steps so that even after reaching a desirable state we know that the execution will reach a desirable state again. We formalize these intuitions into sound and complete guarantee and recurrence semantics that are systematically derived by abstract interpretation of the program operational trace semantics.

In order to achieve effective static analyses, we further abstract these semantics. Specifically, we leverage existing numerical abstract domains based on piecewise-defined ranking functions [6–8] by introducing new abstract operators, including a dual widening. The piecewise-defined ranking functions are attached to the program control points and represent an upper bound on the number of program execution steps before the program reaches a desirable state. They are automatically inferred through backward analysis and yield sufficient preconditions for the guarantee and recurrence temporal properties. We prove the soundness of the analysis, meaning that all program executions respecting these preconditions indeed satisfy the temporal properties, while a program execution that does not respect these preconditions might or might not satisfy the temporal properties.

To illustrate the potential of our approach, let us consider again the program SIMPLE in Fig. 1. Given the guarantee property “x=3 at least once”, the piecewise-defined ranking function inferred at program control point 1 is 
                        
                           
                              λ
                              x
                              .
                              {
                              
                                 
                                    
                                       
                                          −
                                          3
                                          x
                                          +
                                          10
                                       
                                       
                                          x
                                          <
                                          0
                                       
                                    
                                    
                                       
                                          −
                                          2
                                          x
                                          +
                                          6
                                       
                                       
                                          0
                                          ≤
                                          x
                                          ∧
                                          x
                                          ≤
                                          3
                                       
                                    
                                    
                                       
                                          undefined
                                       
                                       
                                          otherwise
                                       
                                    
                                 
                              
                           
                        
                     which bounds the wait (from the program control point 
                        1
                     ) for the desirable state x=3 by 
                        −
                        3
                        x
                        +
                        10
                      program execution steps when 
                        x
                        <
                        0
                     , and by 
                        −
                        2
                        x
                        +
                        6
                      execution steps when 
                        0
                        ≤
                        x
                        ∧
                        x
                        ≤
                        3
                     . The analysis is inconclusive when 
                        3
                        <
                        x
                     . In this case, when 
                        3
                        <
                        x
                     , the guarantee property is never satisfied. Thus, the precondition 
                        x
                        ≤
                        3
                      induced by the domain of the ranking function is the weakest precondition for “x=3 at least once”. Given the recurrence property “x=3 infinitely often”, the piecewise-defined ranking function at program point 1 bounds the wait for the next occurrence of the desirable state x=3 by 
                        −
                        3
                        x
                        +
                        10
                      program execution steps: 
                        
                           
                              λ
                              x
                              .
                              {
                              
                                 
                                    
                                       
                                          −
                                          3
                                          x
                                          +
                                          10
                                       
                                       
                                          x
                                          <
                                          0
                                       
                                    
                                    
                                       
                                          undefined
                                       
                                       
                                          otherwise
                                       
                                    
                                 
                              
                           
                        
                     which induces the precondition 
                        x
                        <
                        0
                     . Indeed, when 
                        0
                        ≤
                        x
                        ∧
                        x
                        ≤
                        3
                     , the desirable state x=3 does not occur infinitely often but only once. Again 
                        x
                        <
                        0
                      is the weakest precondition for “x=3 at least once”. At program point 3 (i.e., at the beginning of the second while loop), for both “x=3 infinitely at least” and “x=3 infinitely often”, we get the following piecewise-defined ranking function: 
                        
                           
                              λ
                              x
                              .
                              {
                              
                                 
                                    
                                       
                                          −
                                          3
                                          x
                                          +
                                          9
                                       
                                       
                                          x
                                          ≤
                                          3
                                       
                                    
                                    
                                       
                                          −
                                          3
                                          x
                                          +
                                          72
                                       
                                       
                                          3
                                          <
                                          x
                                          ≤
                                          10
                                       
                                    
                                    
                                       
                                          3
                                          x
                                          +
                                          12
                                       
                                       
                                          10
                                          <
                                          x
                                       
                                    
                                 
                              
                           
                        
                     which bounds the wait (from the program point 
                        3
                     ) for the next occurrence of x=3 by 
                        −
                        3
                        x
                        +
                        9
                      execution steps when 
                        x
                        ≤
                        3
                     , by 
                        −
                        3
                        x
                        +
                        72
                      execution steps when 
                        3
                        <
                        x
                        ≤
                        10
                     , and by 
                        3
                        x
                        +
                        12
                      execution steps when 
                        10
                        <
                        x
                     .


                     Our contribution: In summary, this paper makes the following contributions. First, we present an abstract interpretation framework for proving guarantee and recurrence program temporal properties. In particular, we generalize the framework proposed by Cousot and Cousot for termination [5]. Moreover, by means of piecewise-defined ranking function abstract domains [6–8], we design new static analysis methods to effectively infer sufficient preconditions for these temporal properties, and provide upper bounds in terms of program execution steps on the waiting time before a program reaches a desirable state. Finally, we provide a research prototype static analyzer for programs written in a C-like syntax.


                     Limitations: In general, liveness properties are used to specify the behavior of concurrent programs and are satisfied only under fairness hypotheses. In this paper, we model concurrent programs as non-deterministic sequential programs and we assume that the fair scheduler is explicitly represented within the program (e.g., see [9] and Example 16 in Section 9). We plan, as part of our future work, to extend our framework in order to explicitly express and handle fairness properties.


                     Outline of the paper: Section 2 introduces the preliminary notions used in the paper. In Section 3, we give a brief overview of Cousot and Cousot׳s abstract interpretation framework for termination. In Sections 4 and 5, we propose a small idealized programming language used to illustrate our work, and a small specification language used to describe guarantee and recurrence properties. The next two sections are devoted to the main contribution of the paper: we formalize our framework for guarantee and recurrence properties in Section 6 and in Section 7, respectively. In Section 8, we present decidable guarantee and recurrence abstractions based on piecewise-defined ranking functions. We describe our prototype static analyzer in Section 9. Finally, Section 10 discusses related work and Section 11 concludes.

In order to be independent from the choice of a particular programming language, following [11,3], we formalize programs as transition systems:
                        Definition 1
                        Transition system


                        A transition system is a pair 
                              〈
                              Σ
                              ,
                              τ
                              〉
                            where Σ is a (potentially infinite) set of states and the transition relation 
                              τ
                              ⊆
                              Σ
                              ×
                              Σ
                            describes the possible transitions between states.

Note that this model allows representing programs with (possibly unbounded) non-determinism. In some cases, a set 
                        I
                        ⊆
                        Σ
                      is designated as the set of initial states. The set of blocking or final states is 
                        Ω
                        
                           
                              =
                           
                           
                              def
                           
                        
                        {
                        s
                        ∈
                        Σ
                        |
                        ∀
                        
                           
                              s
                           
                           
                              ′
                           
                        
                        ∈
                        Σ
                        :
                        〈
                        s
                        ,
                        
                           
                              s
                           
                           
                              ′
                           
                        
                        〉
                        ∉
                        τ
                        }
                     .

We define the following functions to manipulate sets of program states.
                        Definition 2
                        Given a transition system 
                              〈
                              Σ
                              ,
                              τ
                              〉
                           , 
                              pre
                              :
                              P
                              (
                              Σ
                              )
                              →
                              P
                              (
                              Σ
                              )
                            maps a set of program states 
                              X
                              ∈
                              P
                              (
                              Σ
                              )
                            to the set of their predecessors with respect to the program transition relation τ:
                              
                                 (1)
                                 
                                    pre
                                    (
                                    X
                                    )
                                    
                                       
                                          =
                                       
                                       
                                          def
                                       
                                    
                                    {
                                    s
                                    ∈
                                    Σ
                                    |
                                    ∃
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    ∈
                                    X
                                    :
                                    〈
                                    s
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    〉
                                    ∈
                                    τ
                                    }
                                 
                              
                           
                        

Given a transition system 
                              〈
                              Σ
                              ,
                              τ
                              〉
                           , 
                              
                                 
                                    pre
                                 
                                 
                                    ˜
                                 
                              
                              :
                              P
                              (
                              Σ
                              )
                              →
                              P
                              (
                              Σ
                              )
                            maps a set of states 
                              X
                              ∈
                              P
                              (
                              Σ
                              )
                            to the set of states whose successors with respect to the program transition relation τ are all in the set X:
                              
                                 (2)
                                 
                                    
                                       
                                          pre
                                       
                                       
                                          ˜
                                       
                                    
                                    (
                                    X
                                    )
                                    
                                       
                                          =
                                       
                                       
                                          def
                                       
                                    
                                    {
                                    s
                                    ∈
                                    Σ
                                    |
                                    ∀
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    ∈
                                    Σ
                                    :
                                    〈
                                    s
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    〉
                                    ∈
                                    τ
                                    ⇒
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    ∈
                                    X
                                    }
                                 
                              
                           
                        

The semantics of a program is a mathematical characterization of all possible behaviors of the program when executed for all possible input data. The semantics generated by a transition system is the set of computations described by the transition system. We formally define this notion below.

Given a set 
                        S
                     , the set 
                        
                           
                              S
                           
                           
                              n
                           
                        
                        
                           
                              =
                           
                           
                              def
                           
                        
                        {
                        
                           
                              s
                           
                           
                              0
                           
                        
                        ⋯
                        
                           
                              s
                           
                           
                              n
                              −
                              1
                           
                        
                        |
                        ∀
                        i
                        <
                        n
                        :
                        
                           
                              s
                           
                           
                              i
                           
                        
                        ∈
                        S
                        }
                      is the set of all sequences of exactly n elements from 
                        S
                     . We write 
                        ε
                      to denote the empty sequence, i.e., 
                        
                           
                              S
                           
                           
                              0
                           
                        
                        ≜
                        {
                        ε
                        }
                     . In the following, let 
                        
                           
                              S
                           
                           
                              ⁎
                           
                        
                        
                           
                              =
                           
                           
                              def
                           
                        
                        
                           
                              ⋃
                           
                           
                              n
                              ∈
                              N
                           
                        
                        
                           
                              S
                           
                           
                              n
                           
                        
                      be the set of all finite sequences, 
                        
                           
                              S
                           
                           
                              +
                           
                        
                        
                           
                              =
                           
                           
                              def
                           
                        
                        
                           
                              S
                           
                           
                              ⁎
                           
                        
                        ⧹
                        
                           
                              S
                           
                           
                              0
                           
                        
                      be the set of all non-empty finite sequences, 
                        
                           
                              S
                           
                           
                              ω
                           
                        
                      be the set of all infinite sequences, 
                        
                           
                              S
                           
                           
                              +
                              ∞
                           
                        
                        
                           
                              =
                           
                           
                              def
                           
                        
                        
                           
                              S
                           
                           
                              +
                           
                        
                        ∪
                        
                           
                              S
                           
                           
                              ω
                           
                        
                      be the set of all non-empty finite or infinite sequences and 
                        
                           
                              S
                           
                           
                              ⁎
                              ∞
                           
                        
                        
                           
                              =
                           
                           
                              def
                           
                        
                        
                           
                              S
                           
                           
                              ⁎
                           
                        
                        ∪
                        
                           
                              S
                           
                           
                              ω
                           
                        
                      be the set of all finite or infinite sequences of elements from 
                        S
                     . In the following, in order to ease the notation, sequences of a single element 
                        s
                        ∈
                        S
                      are often written omitting the curly brackets, e.g., we write 
                        
                           
                              s
                           
                           
                              ω
                           
                        
                      and 
                        
                           
                              s
                           
                           
                              +
                              ∞
                           
                        
                      instead of 
                        
                           
                              {
                              s
                              }
                           
                           
                              ω
                           
                        
                      and 
                        
                           
                              {
                              s
                              }
                           
                           
                              +
                              ∞
                           
                        
                     . We write 
                        σ
                        
                           
                              σ
                           
                           
                              ′
                           
                        
                      for the concatenation of two sequences 
                        σ
                        ,
                        
                           
                              σ
                           
                           
                              ′
                           
                        
                        ∈
                        
                           
                              S
                           
                           
                              +
                              ∞
                           
                        
                      (with 
                        σ
                        ε
                        =
                        ε
                        σ
                        =
                        σ
                     , and 
                        σ
                        
                           
                              σ
                           
                           
                              ′
                           
                        
                        =
                        σ
                      when 
                        σ
                        ∈
                        
                           
                              S
                           
                           
                              ω
                           
                        
                     ), 
                        
                           
                              T
                           
                           
                              +
                           
                        
                        
                           
                              =
                           
                           
                              def
                           
                        
                        T
                        ∩
                        
                           
                              S
                           
                           
                              +
                           
                        
                      for the selection of the non-empty finite sequences of 
                        T
                        ⊆
                        
                           
                              S
                           
                           
                              +
                              ∞
                           
                        
                     , 
                        
                           
                              T
                           
                           
                              ω
                           
                        
                        
                           
                              =
                           
                           
                              def
                           
                        
                        T
                        ∩
                        
                           
                              S
                           
                           
                              ω
                           
                        
                      for the selection of the infinite sequences of 
                        T
                        ⊆
                        
                           
                              S
                           
                           
                              +
                              ∞
                           
                        
                      and 
                        T
                        ;
                        
                           
                              T
                           
                           
                              ′
                           
                        
                        
                           
                              =
                           
                           
                              def
                           
                        
                        {
                        σ
                        s
                        
                           
                              σ
                           
                           
                              ′
                           
                        
                        |
                        s
                        ∈
                        S
                        ∧
                        σ
                        s
                        ∈
                        T
                        ∧
                        s
                        
                           
                              σ
                           
                           
                              ′
                           
                        
                        ∈
                        
                           
                              T
                           
                           
                              ′
                           
                        
                        }
                      for the merging of sets of sequences 
                        T
                        ⊆
                        
                           
                              S
                           
                           
                              +
                           
                        
                      and 
                        
                           
                              T
                           
                           
                              ′
                           
                        
                        ⊆
                        
                           
                              S
                           
                           
                              +
                              ∞
                           
                        
                     , when a finite sequence in 
                        T
                      terminates with the initial state of a sequence in 
                        
                           
                              T
                           
                           
                              ′
                           
                        
                     .

Given a transition system 
                        〈
                        Σ
                        ,
                        τ
                        〉
                     , a trace is a non-empty sequence of states in Σ determined by the transition relation τ, that is, 
                        〈
                        s
                        ,
                        
                           
                              s
                           
                           
                              ′
                           
                        
                        〉
                        ∈
                        τ
                      for each pair of consecutive states s, 
                        
                           
                              s
                           
                           
                              ′
                           
                        
                        ∈
                        Σ
                      in the sequence. Note that the set of final states Ω and the transition relation τ can be understood as a set of traces of length one and a set of traces of length two, respectively. The set of all traces generated by a transition system is called partial trace semantics:
                        Definition 4
                        Partial trace semantics


                        The partial trace semantics 
                           
                              
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          ̇
                                       
                                    
                                 
                                 
                                    +
                                    ∞
                                 
                              
                              ∈
                              P
                              (
                              
                                 
                                    Σ
                                 
                                 
                                    +
                                    ∞
                                 
                              
                              )
                            generated by a transition system 
                              〈
                              Σ
                              ,
                              τ
                              〉
                            is defined as follows: 
                              
                                 
                                    
                                       
                                          
                                             
                                                τ
                                             
                                             
                                                ̇
                                             
                                          
                                       
                                       
                                          +
                                          ∞
                                       
                                    
                                    
                                       
                                          =
                                       
                                       
                                          def
                                       
                                    
                                    
                                       
                                          
                                             
                                                τ
                                             
                                             
                                                ̇
                                             
                                          
                                       
                                       
                                          +
                                       
                                    
                                    ∪
                                    
                                       
                                          τ
                                       
                                       
                                          ω
                                       
                                    
                                 
                              
                           where 
                              
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          ̇
                                       
                                    
                                 
                                 
                                    +
                                 
                              
                              ∈
                              P
                              (
                              
                                 
                                    Σ
                                 
                                 
                                    +
                                 
                              
                              )
                            is the set of finite traces: 
                              
                                 
                                    
                                       
                                          
                                             
                                                τ
                                             
                                             
                                                ̇
                                             
                                          
                                       
                                       
                                          +
                                       
                                    
                                    
                                       
                                          =
                                       
                                       
                                          def
                                       
                                    
                                    
                                       
                                          
                                             ⋃
                                          
                                          
                                             n
                                             >
                                             0
                                          
                                       
                                    
                                    {
                                    
                                       
                                          s
                                       
                                       
                                          0
                                       
                                    
                                    ⋯
                                    
                                       
                                          s
                                       
                                       
                                          n
                                          −
                                          1
                                       
                                    
                                    ∈
                                    
                                       
                                          Σ
                                       
                                       
                                          n
                                       
                                    
                                    |
                                    ∀
                                    i
                                    <
                                    n
                                    −
                                    1
                                    :
                                    〈
                                    
                                       
                                          s
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          i
                                          +
                                          1
                                       
                                    
                                    〉
                                    ∈
                                    τ
                                    }
                                 
                              
                           and 
                              
                                 
                                    τ
                                 
                                 
                                    ω
                                 
                              
                              ∈
                              P
                              (
                              
                                 
                                    Σ
                                 
                                 
                                    ω
                                 
                              
                              )
                            is the set of infinite traces: 
                              
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          ω
                                       
                                    
                                    
                                       
                                          =
                                       
                                       
                                          def
                                       
                                    
                                    {
                                    
                                       
                                          s
                                       
                                       
                                          0
                                       
                                    
                                    
                                       
                                          s
                                       
                                       
                                          1
                                       
                                    
                                    ⋯
                                    ∈
                                    
                                       
                                          Σ
                                       
                                       
                                          ω
                                       
                                    
                                    |
                                    ∀
                                    i
                                    ∈
                                    N
                                    :
                                    〈
                                    
                                       
                                          s
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          i
                                          +
                                          1
                                       
                                    
                                    〉
                                    ∈
                                    τ
                                    }
                                 
                              
                           
                        

Let 
                              Σ
                              =
                              {
                              a
                              ,
                              b
                              }
                            and 
                              τ
                              =
                              {
                              〈
                              a
                              ,
                              a
                              〉
                              ,
                              〈
                              a
                              ,
                              b
                              〉
                              }
                           . The partial trace semantics generated by 
                              〈
                              Σ
                              ,
                              τ
                              〉
                            is the set of traces 
                              
                                 
                                    a
                                 
                                 
                                    +
                                    ∞
                                 
                              
                              ∪
                              
                                 
                                    a
                                 
                                 
                                    ⁎
                                 
                              
                              b
                           .

In practice, given a transition system 
                        〈
                        Σ
                        ,
                        τ
                        〉
                     , and possibly a set of initial states 
                        I
                        ⊆
                        Σ
                     , the traces worth of consideration (start by an initial state in 
                        I
                      and) are either infinite or terminate with a final state in Ω. These traces define the maximal trace semantics 
                     
                        
                           
                              τ
                           
                           
                              +
                              ∞
                           
                        
                        ∈
                        P
                        (
                        
                           
                              Σ
                           
                           
                              +
                              ∞
                           
                        
                        )
                      and represent infinite computations or completed finite computations:
                        Definition 5
                        Maximal trace semantics


                        The maximal trace semantics 
                           
                              
                                 
                                    τ
                                 
                                 
                                    +
                                    ∞
                                 
                              
                              ∈
                              P
                              (
                              
                                 
                                    Σ
                                 
                                 
                                    +
                                    ∞
                                 
                              
                              )
                            generated by a transition system 
                              〈
                              Σ
                              ,
                              τ
                              〉
                            is defined as 
                              
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          +
                                          ∞
                                       
                                    
                                    
                                       
                                          =
                                       
                                       
                                          def
                                       
                                    
                                    
                                       
                                          τ
                                       
                                       
                                          +
                                       
                                    
                                    ∪
                                    
                                       
                                          τ
                                       
                                       
                                          ω
                                       
                                    
                                 
                              
                           where 
                              
                                 
                                    τ
                                 
                                 
                                    +
                                 
                              
                              ∈
                              P
                              (
                              
                                 
                                    Σ
                                 
                                 
                                    +
                                 
                              
                              )
                            is the set of finite traces terminating with a final state in Ω: 
                              
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          +
                                       
                                    
                                    
                                       
                                          =
                                       
                                       
                                          def
                                       
                                    
                                    
                                       
                                          
                                             ⋃
                                          
                                          
                                             n
                                             >
                                             0
                                          
                                       
                                    
                                    {
                                    
                                       
                                          s
                                       
                                       
                                          0
                                       
                                    
                                    ⋯
                                    
                                       
                                          s
                                       
                                       
                                          n
                                          −
                                          1
                                       
                                    
                                    ∈
                                    
                                       
                                          Σ
                                       
                                       
                                          n
                                       
                                    
                                    |
                                    ∀
                                    i
                                    <
                                    n
                                    −
                                    1
                                    :
                                    〈
                                    
                                       
                                          s
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          i
                                          +
                                          1
                                       
                                    
                                    〉
                                    ∈
                                    τ
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          n
                                          −
                                          1
                                       
                                    
                                    ∈
                                    Ω
                                    }
                                 
                              
                           
                        

The maximal trace semantics generated by the transition system 
                              〈
                              Σ
                              ,
                              τ
                              〉
                            of Example 1 is the set of traces 
                              
                                 
                                    a
                                 
                                 
                                    ω
                                 
                              
                              ∪
                              
                                 
                                    a
                                 
                                 
                                    ⁎
                                 
                              
                              b
                           . Note that, unlike the partial trace semantics of Example 1, the maximal trace semantics does not include partial computations, i.e., finite sequences of 
                              a
                              ∈
                              Σ
                           .

In practice, in case a set of initial states 
                        I
                        ⊆
                        Σ
                      is given, only the traces starting from an initial state 
                        s
                        ∈
                        I
                      are considered: 
                        {
                        s
                        σ
                        ∈
                        
                           
                              τ
                           
                           
                              +
                              ∞
                           
                        
                        |
                        s
                        ∈
                        I
                        }
                     .

In the following, we consider the fixpoint definition of the maximal trace semantics proposed by Cousot [11]:
                        
                           (3)
                           
                              
                                 
                                    τ
                                 
                                 
                                    +
                                    ∞
                                 
                              
                              =
                              
                                 
                                    lfp
                                 
                                 
                                    ⊑
                                 
                              
                              
                                 
                                    ϕ
                                 
                                 
                                    +
                                    ∞
                                 
                              
                              
                                 
                                    ϕ
                                 
                                 
                                    +
                                    ∞
                                 
                              
                              (
                              T
                              )
                              
                                 
                                    =
                                 
                                 
                                    def
                                 
                              
                              Ω
                              ∪
                              (
                              τ
                              ;
                              T
                              )
                           
                        
                     where 
                        〈
                        P
                        (
                        
                           
                              Σ
                           
                           
                              +
                              ∞
                           
                        
                        )
                        ,
                        ⊑
                        ,
                        ⊔
                        ,
                        ⊓
                        ,
                        
                           
                              Σ
                           
                           
                              ω
                           
                        
                        ,
                        
                           
                              Σ
                           
                           
                              +
                           
                        
                        〉
                      is a complete lattice for the computational order is 
                        
                           
                              T
                           
                           
                              1
                           
                        
                        ⊑
                        
                           
                              T
                           
                           
                              2
                           
                        
                        ⇔
                        
                           
                              T
                           
                           
                              1
                           
                           
                              +
                           
                        
                        ⊆
                        
                           
                              T
                           
                           
                              2
                           
                           
                              +
                           
                        
                        ∧
                        
                           
                              T
                           
                           
                              1
                           
                           
                              ω
                           
                        
                        ⊇
                        
                           
                              T
                           
                           
                              2
                           
                           
                              ω
                           
                        
                     . In Fig. 2
                     , we illustrate the fixpoint iterates. Intuitively, the traces belonging to the maximal trace semantics are built backwards by prepending transitions to them: the finite traces are built extending other finite traces from the set of final states Ω, and the infinite traces are obtained by selecting infinite sequences with increasingly longer prefixes forming traces. In particular, the i-th iterate builds all finite traces of length less than or equal to i, and selects all infinite sequences whose prefixes of length i form traces. At the limit we obtain all infinite traces and all finite traces that terminate in Ω.

The maximal trace semantics carries all information about a program. It is the most precise semantics and it fully describes the behavior of a program. However, to reason about a particular program property, it is not necessary to consider all aspects and details of the program behavior. In fact, reasoning is facilitated by the design of a semantics that abstracts away from irrelevant details about program executions. In particular, rather than deriving program semantics by intuition and justifying them a posteriori, Abstract Interpretation [3] offers an elegant and constructive way to systematically derive different program semantics by successive abstractions of the same maximal trace semantics.

We illustrate such idea in the following. We first systematically derive a well-adapted semantics for program termination. Then, we derive new program semantics dedicated to guarantee and recurrence properties.

The traditional method for proving program termination dates back to Turing [12] and Floyd [13]. It consists in inferring ranking functions, namely functions from program states to elements of a well-ordered set whose value decreases during program execution.
                        Definition 6
                        Ranking function


                        Given a transition system 
                              〈
                              Σ
                              ,
                              τ
                              〉
                           , a ranking function is a partial function 
                              f
                              :
                              Σ
                              ⇀
                              
                              W
                            from the set of states Σ into a well-ordered set 
                              〈
                              W
                              ,
                              ≤
                              〉
                            whose value decreases through transitions between states, that is 
                              ∀
                              s
                              ,
                              
                                 
                                    s
                                 
                                 
                                    ′
                                 
                              
                              ∈
                              dom
                              (
                              f
                              )
                              :
                              〈
                              s
                              ,
                              
                                 
                                    s
                                 
                                 
                                    ′
                                 
                              
                              〉
                              ∈
                              τ
                              ⇒
                              f
                              (
                              
                                 
                                    s
                                 
                                 
                                    ′
                                 
                              
                              )
                              <
                              f
                              (
                              s
                              )
                           .

The best known well-ordered sets are the natural numbers 
                        〈
                        N
                        ,
                        ≤
                        〉
                      and the ordinals 
                        〈
                        O
                        ,
                        ≤
                        〉
                     , and the most obvious ranking function maps each program state to the number of program execution steps until termination, or some well-chosen upper bound on this numbers.

In [5], Cousot and Cousot prove the existence of a most precise ranking function 
                     
                        
                           
                              τ
                           
                           
                              t
                           
                        
                        ∈
                        Σ
                        ⇀
                        O
                      that can be derived by abstract interpretation of the program maximal trace semantics and can be expressed as a least fixpoint as
                        
                           (4)
                           
                              
                                 
                                    τ
                                 
                                 
                                    t
                                 
                              
                              =
                              
                                 
                                    lfp
                                 
                                 
                                    
                                       
                                          ∅
                                       
                                       
                                          ̇
                                       
                                    
                                 
                                 
                                    ⊑
                                 
                              
                              
                                 
                                    ϕ
                                 
                                 
                                    t
                                 
                              
                              
                                 
                                    ϕ
                                 
                                 
                                    t
                                 
                              
                              (
                              f
                              )
                              
                                 
                                    =
                                 
                                 
                                    def
                                 
                              
                              λ
                              s
                              .
                              {
                              
                                 
                                    
                                       
                                          0
                                       
                                       
                                          s
                                          ∈
                                          Ω
                                       
                                    
                                    
                                       
                                          sup
                                          
                                          {
                                          
                                          f
                                          (
                                          
                                             
                                                s
                                             
                                             
                                                ′
                                             
                                          
                                          )
                                          +
                                          1
                                          |
                                          〈
                                          s
                                          ,
                                          
                                             
                                                s
                                             
                                             
                                                ′
                                             
                                          
                                          〉
                                          ∈
                                          τ
                                          }
                                       
                                       
                                          s
                                          ∈
                                          
                                             
                                                pre
                                             
                                             
                                                ˜
                                             
                                          
                                          (
                                          dom
                                          (
                                          f
                                          )
                                          )
                                       
                                    
                                    
                                       
                                          undefined
                                       
                                       
                                          otherwise
                                       
                                    
                                 
                              
                           
                        
                     where 
                        〈
                        Σ
                        ⇀
                        O
                        ,
                        ⊑
                        〉
                      forms a partially ordered set for the computational order 
                     
                        
                           
                              f
                           
                           
                              1
                           
                        
                        ⊑
                        
                           
                              f
                           
                           
                              2
                           
                        
                        ⇔
                        dom
                        (
                        
                           
                              f
                           
                           
                              1
                           
                        
                        )
                        ⊆
                        dom
                        (
                        
                           
                              f
                           
                           
                              2
                           
                        
                        )
                        ∧
                        ∀
                        x
                        ∈
                        dom
                        (
                        
                           
                              f
                           
                           
                              1
                           
                        
                        )
                        :
                        
                           
                              f
                           
                           
                              1
                           
                        
                        (
                        x
                        )
                        ≤
                        
                           
                              f
                           
                           
                              2
                           
                        
                        (
                        x
                        )
                      and 
                        
                           
                              lfp
                           
                           
                              
                                 
                                    ∅
                                 
                                 
                                    ̇
                                 
                              
                           
                        
                      denotes the least fixpoint greater than or equal to the totally undefined (ranking) function 
                        
                           
                              ∅
                           
                           
                              ̇
                           
                        
                     . The most precise ranking function 
                        
                           
                              τ
                           
                           
                              t
                           
                        
                      is defined starting from the final states in Ω, where the function has value zero, and retracing the program backwards while mapping each program state in Σ definitely leading to a final state (i.e., a program state such that all program traces to which it belong are terminating) to an ordinal in 
                        O
                      representing an upper bound on the number of program execution steps remaining to termination.
                        Example 3
                        Let us consider the following trace semantics: 
                              
                                 
                                    
                                       
                                          
                                       
                                    
                                 
                              
                           The fixpoint iterates of the most precise ranking function 
                              
                                 
                                    τ
                                 
                                 
                                    t
                                 
                              
                            are 
                              
                                 
                                    
                                       
                                          
                                       
                                    
                                 
                              
                           where unlabeled states are outside the domain of the function.

The domain of 
                        
                           
                              τ
                           
                           
                              t
                           
                        
                      is the set of states from which all program executions terminate; all traces branching from a state 
                        s
                        ∈
                        dom
                        (
                        
                           
                              τ
                           
                           
                              t
                           
                        
                        )
                      terminate in at most 
                        
                           
                              τ
                           
                           
                              t
                           
                        
                        (
                        s
                        )
                      execution steps, while at least one trace branching from a state 
                        s
                        ∉
                        dom
                        (
                        
                           
                              τ
                           
                           
                              t
                           
                        
                        )
                      does not terminate:
                        Theorem 1
                        
                           A program terminates for all traces starting from a given set of initial states 
                           
                              I
                            
                           if and only if 
                           
                              I
                              ⊆
                              dom
                              (
                              
                                 
                                    τ
                                 
                                 
                                    t
                                 
                              
                              )
                           .

See [5].□

Intuitively, a ranking function f
                     1 is more precise than another ranking function f
                     2 when it is defined over a larger set of program states, that is, it can prove termination for more program states, and when its value is always smaller, that is, the maximum number of program execution steps required for termination is smaller. Thus, we define the approximation order between ranking functions as 
                        
                           
                              f
                           
                           
                              1
                           
                        
                        ≼
                        
                           
                              f
                           
                           
                              2
                           
                        
                        ⇔
                        dom
                        (
                        
                           
                              f
                           
                           
                              1
                           
                        
                        )
                        ⊇
                        dom
                        (
                        
                           
                              f
                           
                           
                              2
                           
                        
                        )
                        ∧
                        ∀
                        x
                        ∈
                        dom
                        (
                        
                           
                              f
                           
                           
                              2
                           
                        
                        )
                        :
                        
                           
                              f
                           
                           
                              1
                           
                        
                        (
                        x
                        )
                        ≤
                        
                           
                              f
                           
                           
                              2
                           
                        
                        (
                        x
                        )
                     . Observe that the computational order used to define fixpoints and the approximation order often coincide but, in the general case, they are distinct and totally unrelated [14]. We will need to maintain this distinction throughout the rest of this paper.

In [5], Cousot and Cousot derive 
                        
                           
                              τ
                           
                           
                              t
                           
                        
                        ∈
                        Σ
                        ⇀
                        O
                      (cf. Eq. (4)) by means of successive abstractions of the maximal trace semantics 
                        
                           
                              τ
                           
                           
                              +
                              ∞
                           
                        
                        ∈
                        P
                        (
                        
                           
                              Σ
                           
                           
                              +
                              ∞
                           
                        
                        )
                      (cf. Eq. (3)). In the following, we briefly retrace their steps.

We define the neighborhood of a sequence 
                        σ
                        ∈
                        
                           
                              Σ
                           
                           
                              +
                              ∞
                           
                        
                      in a set of sequences 
                        T
                        ⊆
                        
                           
                              Σ
                           
                           
                              +
                              ∞
                           
                        
                      as the set of sequences 
                        
                           
                              σ
                           
                           
                              ′
                           
                        
                        ∈
                        T
                      with a common prefix with 
                        σ
                     :
                        
                           (5)
                           
                              nbhd
                              (
                              σ
                              ,
                              T
                              )
                              
                                 
                                    =
                                 
                                 
                                    def
                                 
                              
                              {
                              
                                 
                                    σ
                                 
                                 
                                    ′
                                 
                              
                              ∈
                              T
                              |
                              pf
                              (
                              σ
                              )
                              ∩
                              pf
                              (
                              
                                 
                                    σ
                                 
                                 
                                    ′
                                 
                              
                              )
                              ≠
                              ∅
                              }
                           
                        
                     where 
                        pf
                        ∈
                        
                           
                              Σ
                           
                           
                              +
                              ∞
                           
                        
                        →
                        P
                        (
                        
                           
                              Σ
                           
                           
                              +
                              ∞
                           
                        
                        )
                      yields the set of prefixes of a sequence 
                        σ
                        ∈
                        
                           
                              Σ
                           
                           
                              +
                              ∞
                           
                        
                     :
                        
                           (6)
                           
                              pf
                              (
                              σ
                              )
                              
                                 
                                    =
                                 
                                 
                                    def
                                 
                              
                              {
                              
                                 
                                    σ
                                 
                                 
                                    ′
                                 
                              
                              ∈
                              
                                 
                                    Σ
                                 
                                 
                                    +
                                    ∞
                                 
                              
                              |
                              ∃
                              σ
                              ″
                              ∈
                              
                                 
                                    Σ
                                 
                                 
                                    ⁎
                                    ∞
                                 
                              
                              :
                              σ
                              =
                              
                                 
                                    σ
                                 
                                 
                                    ′
                                 
                              
                              σ
                              ″
                              }
                              .
                           
                        
                     A program trace is terminating if and only if it is finite and its neighborhood in the program semantics consists only of finite traces, i.e., the trace terminates independently from the non-deterministic choices made during execution. The corresponding termination abstraction 
                     
                        
                           
                              α
                           
                           
                              t
                           
                        
                        :
                        P
                        (
                        
                           
                              Σ
                           
                           
                              +
                              ∞
                           
                        
                        )
                        →
                        P
                        (
                        
                           
                              Σ
                           
                           
                              +
                           
                        
                        )
                      is defined as follows:
                        
                           (7)
                           
                              
                                 
                                    α
                                 
                                 
                                    t
                                 
                              
                              (
                              T
                              )
                              
                                 
                                    =
                                 
                                 
                                    def
                                 
                              
                              {
                              σ
                              ∈
                              
                                 
                                    T
                                 
                                 
                                    +
                                 
                              
                              |
                              nhbd
                              (
                              σ
                              ,
                              
                                 
                                    T
                                 
                                 
                                    ω
                                 
                              
                              )
                              =
                              ∅
                              }
                              .
                           
                        
                     
                     
                        Example 4
                        Let 
                              T
                              =
                              {
                              ab
                              ,
                              aba
                              ,
                              ba
                              ,
                              bb
                              ,
                              
                                 
                                    ba
                                 
                                 
                                    ω
                                 
                              
                              }
                            be a set of sequences. Then, its termination abstraction is 
                              
                                 
                                    α
                                 
                                 
                                    t
                                 
                              
                              (
                              T
                              )
                              =
                              {
                              ab
                              ,
                              aba
                              }
                            since 
                              nbhd
                              (
                              ab
                              ,
                              
                                 
                                    T
                                 
                                 
                                    ω
                                 
                              
                              )
                              =
                              ∅
                            and 
                              nbhd
                              (
                              aba
                              ,
                              
                                 
                                    T
                                 
                                 
                                    ω
                                 
                              
                              )
                              =
                              ∅
                           . In fact, 
                              nbhd
                              (
                              ab
                              ,
                              
                                 
                                    T
                                 
                                 
                                    ω
                                 
                              
                              )
                              =
                              nbhd
                              (
                              ab
                              ,
                              {
                              
                                 
                                    ba
                                 
                                 
                                    ω
                                 
                              
                              }
                              )
                              =
                              ∅
                            (i.e., 
                              pf
                              (
                              ab
                              )
                              ∩
                              pf
                              (
                              
                                 
                                    ba
                                 
                                 
                                    ω
                                 
                              
                              )
                              =
                              ∅
                           , cf. Eq. (5)) and 
                              nbhd
                              (
                              aba
                              ,
                              
                                 
                                    T
                                 
                                 
                                    ω
                                 
                              
                              )
                              =
                              nbhd
                              (
                              aba
                              ,
                              {
                              
                                 
                                    ba
                                 
                                 
                                    ω
                                 
                              
                              }
                              )
                              =
                              ∅
                            (i.e., 
                              pf
                              (
                              aba
                              )
                              ∩
                              pf
                              (
                              
                                 
                                    ba
                                 
                                 
                                    ω
                                 
                              
                              )
                              =
                              ∅
                           ), while 
                              nbhd
                              (
                              ba
                              ,
                              
                                 
                                    T
                                 
                                 
                                    ω
                                 
                              
                              )
                              =
                              nbhd
                              (
                              ab
                              ,
                              {
                              
                                 
                                    ba
                                 
                                 
                                    ω
                                 
                              
                              }
                              )
                              =
                              {
                              ba
                              }
                              ≠
                              ∅
                            (i.e., 
                              pf
                              (
                              ba
                              )
                              ∩
                              pf
                              (
                              
                                 
                                    ba
                                 
                                 
                                    ω
                                 
                              
                              )
                              =
                              {
                              ba
                              }
                              ≠
                              ∅
                           ) and 
                              nbhd
                              (
                              bb
                              ,
                              
                                 
                                    T
                                 
                                 
                                    ω
                                 
                              
                              )
                              =
                              nbhd
                              (
                              bb
                              ,
                              {
                              
                                 
                                    ba
                                 
                                 
                                    ω
                                 
                              
                              }
                              )
                              =
                              {
                              b
                              }
                              ≠
                              ∅
                            (i.e., 
                              pf
                              (
                              bb
                              )
                              ∩
                              pf
                              (
                              
                                 
                                    ba
                                 
                                 
                                    ω
                                 
                              
                              )
                              =
                              {
                              b
                              }
                              ≠
                              ∅
                           ).

The termination semantics 
                     
                        
                           
                              τ
                           
                           
                              t
                           
                        
                        ∈
                        Σ
                        ⇀
                        
                        O
                      can now be explicitly defined as abstract interpretation of the maximal trace semantics 
                        
                           
                              τ
                           
                           
                              +
                              ∞
                           
                        
                        ∈
                        P
                        (
                        
                           
                              Σ
                           
                           
                              +
                              ∞
                           
                        
                        )
                     :
                        
                           (8)
                           
                              
                                 
                                    τ
                                 
                                 
                                    t
                                 
                              
                              
                                 
                                    =
                                 
                                 
                                    def
                                 
                              
                              
                                 
                                    α
                                 
                                 
                                    rk
                                 
                              
                              (
                              
                                 
                                    α
                                 
                                 
                                    t
                                 
                              
                              (
                              
                                 
                                    τ
                                 
                                 
                                    +
                                    ∞
                                 
                              
                              )
                              )
                           
                        
                     where the ranking abstraction 
                     
                        
                           
                              α
                           
                           
                              rk
                           
                        
                        :
                        P
                        (
                        
                           
                              Σ
                           
                           
                              +
                           
                        
                        )
                        →
                        (
                        Σ
                        ⇀
                        
                        O
                        )
                      is
                        
                           (9)
                           
                              
                                 
                                    α
                                 
                                 
                                    rk
                                 
                              
                              (
                              T
                              )
                              
                                 
                                    =
                                 
                                 
                                    def
                                 
                              
                              
                                 
                                    α
                                 
                                 
                                    v
                                 
                              
                              (
                              
                                 
                                    α
                                 
                                 
                                    →
                                 
                              
                              (
                              T
                              )
                              )
                           
                        
                     where the function 
                        
                           
                              α
                           
                           
                              →
                           
                        
                        :
                        P
                        (
                        
                           
                              Σ
                           
                           
                              +
                              ∞
                           
                        
                        )
                        →
                        P
                        (
                        Σ
                        ×
                        Σ
                        )
                      extracts from a set of sequences 
                        T
                        ⊆
                        
                           
                              Σ
                           
                           
                              +
                              ∞
                           
                        
                      the smallest transition relation 
                        r
                        ⊆
                        Σ
                        ×
                        Σ
                      that generates T: 
                        
                           
                              
                                 
                                    α
                                 
                                 
                                    →
                                 
                              
                              (
                              T
                              )
                              
                                 
                                    =
                                 
                                 
                                    def
                                 
                              
                              {
                              〈
                              s
                              ,
                              
                                 
                                    s
                                 
                                 
                                    ′
                                 
                              
                              〉
                              |
                              ∃
                              σ
                              ∈
                              
                                 
                                    Σ
                                 
                                 
                                    ⁎
                                 
                              
                              ,
                              
                                 
                                    σ
                                 
                                 
                                    ′
                                 
                              
                              ∈
                              
                                 
                                    Σ
                                 
                                 
                                    ⁎
                                    ∞
                                 
                              
                              :
                              σ
                              
                                 
                                    ss
                                 
                                 
                                    ′
                                 
                              
                              
                                 
                                    σ
                                 
                                 
                                    ′
                                 
                              
                              ∈
                              T
                              }
                           
                        
                     and where the function 
                        
                           
                              α
                           
                           
                              v
                           
                        
                        :
                        P
                        (
                        Σ
                        ×
                        Σ
                        )
                        →
                        (
                        Σ
                        ⇀
                        
                        O
                        )
                      provides the rank of the elements in the domain of a relation 
                        r
                        ⊆
                        Σ
                        ×
                        Σ
                     : 
                        
                           
                              
                                 
                                    α
                                 
                                 
                                    v
                                 
                              
                              (
                              r
                              )
                              s
                              
                                 
                                    =
                                 
                                 
                                    def
                                 
                              
                              {
                              
                                 
                                    
                                       
                                          0
                                       
                                       
                                          ∀
                                          
                                             
                                                s
                                             
                                             
                                                ′
                                             
                                          
                                          ∈
                                          Σ
                                          :
                                          〈
                                          s
                                          ,
                                          
                                             
                                                s
                                             
                                             
                                                ′
                                             
                                          
                                          〉
                                          ∉
                                          r
                                       
                                    
                                    
                                       
                                          sup
                                          {
                                          
                                             
                                                
                                                   α
                                                
                                                
                                                   v
                                                
                                             
                                             (
                                             r
                                             )
                                             
                                                
                                                   s
                                                
                                                
                                                   ′
                                                
                                             
                                             +
                                             1
                                             |
                                             
                                                
                                                   s
                                                
                                                
                                                   ′
                                                
                                             
                                             ∈
                                             dom
                                             (
                                             
                                                
                                                   α
                                                
                                                
                                                   v
                                                
                                             
                                             (
                                             r
                                             )
                                             )
                                             ∧
                                             〈
                                             s
                                             ,
                                             
                                                
                                                   s
                                                
                                                
                                                   ′
                                                
                                             
                                             〉
                                             ∈
                                             r
                                          
                                          }
                                       
                                       
                                          otherwise
                                       
                                    
                                 
                              
                           
                        
                     
                  

In Sections 6.1 and 7.1, we will follow the same abstract interpretation approach in order to systematically derive sound and complete semantics for proving guarantee and recurrence temporal properties of programs.

The formal treatment given in the previous section is language independent. In the following, for simplicity we consider a while language with some non-deterministic assignments and tests. The variables are statically allocated and the only data type is the set 
                        Z
                      of mathematical integers. Note that our implementation, described in Section 9, actually supports a subset of the C language sufficient to handle real examples from actual benchmarks (e.g., the benchmarks of the International Competition on Software Verification
                        1
                     
                     
                        1
                        
                           http://sv-comp.sosy-lab.org
                        
                     ).

In Fig. 3
                        , we define inductively the syntax of our programming language.

A program prog consists of an instruction followed by a unique label 
                           l
                           ∈
                           L
                        . Another unique label appears within each instruction. An instruction stmt is either a skip instruction, a variable assignment, a conditional if statement, a while loop or a sequential composition of instructions.

Arithmetic expressions aexp involve variables 
                           X
                           ∈
                           X
                        , numeric intervals 
                           [
                           a
                           ,
                           b
                           ]
                         and the arithmetic operators +, −, ⁎, 
                           /
                         for addition, subtraction, multiplication, and division. Numeric intervals have constant and possibly infinite bounds, and denote a random choice of a number in the interval. This provides a notion of non-determinism useful to model user input or to approximate arithmetic expressions that cannot be represented exactly in the language. Numeric constants are a particular case of numeric interval. We often write the constant c for the interval 
                           [
                           c
                           ,
                           c
                           ]
                        .

Boolean expressions bexp are built by comparing arithmetic expressions, and are combined using the boolean not, and, and or operators. The boolean expression ? represents a non-deterministic choice and is useful to provide a sequential encoding of concurrent programs by modeling a (possibly, but not necessarily, fair) scheduler. Whenever clear from the context, we frequently abuse notation and use the symbol ? to also denote the numeric interval 
                           [
                           −
                           ∞
                           ,
                           +
                           ∞
                           ]
                        .

In the following, we instantiate the definition of transition system (cf. Definition 1) with respect to programs written in our small imperative language.


                        Expression semantics: An environment 
                        
                           ρ
                           :
                           X
                           →
                           Z
                         maps each program variable 
                           X
                           ∈
                           X
                         to its value 
                           ρ
                           (
                           X
                           )
                           ∈
                           Z
                        . Let 
                           E
                         denote the set of all environments.

The semantics of an arithmetic expression aexp is a function 
                           〚
                           aexp
                           〛
                           :
                           E
                           →
                           P
                           (
                           Z
                           )
                         mapping an environment 
                           ρ
                           ∈
                           E
                         to the possible values for the expression aexp in the environment. Such semantics is standard, for the sake of completeness its formal definition is given in Appendix A. Note that the set of values for an expression may contain several elements because of the non-determinism in the expressions. It might also be empty due to undefined results (e.g., in case of divisions by zero).

Similarly, the semantics 
                           〚
                           bexp
                           〛
                           :
                           E
                           →
                           P
                           (
                           {
                           true
                           ,
                           false
                           }
                           )
                         of boolean expressions bexp maps an environment 
                           ρ
                           ∈
                           E
                         to the set of all possible truth values for the expression bexp in the environment. Such semantics is also standard, and its formal definition is given in Appendix A. In the following, we write true and false to represent a boolean expression that is always true and always false, respectively.


                        Transition systems: A program state 
                        
                           s
                           ∈
                           L
                           ×
                           E
                         is a pair consisting of a label 
                           l
                           ∈
                           L
                         and an environment 
                           ρ
                           ∈
                           E
                        , where the ρ defines the values of the program variables at the program point designated by l. Let Σ denote the set of all program states.

The initial control point 
                           i
                           〚
                           stmt
                           〛
                           ∈
                           L
                         (resp. 
                           i
                           〚
                           prog
                           〛
                           ∈
                           L
                        ) of an instruction stmt (resp. a program prog) defines where the execution of the instruction (resp. program) starts, and the final control point 
                           f
                           〚
                           stmt
                           〛
                           ∈
                           L
                         (resp. 
                           f
                           〚
                           prog
                           〛
                           ∈
                           L
                        ) defines where the execution of the instruction stmt (resp. program prog) ends. The formal definitions are given in Appendix A. A program execution starts at its initial program control point with any possible value for the program variables.

The set of initial states of a program prog is 
                           I
                           
                              
                                 =
                              
                              
                                 def
                              
                           
                           {
                           〈
                           i
                           〚
                           prog
                           〛
                           ,
                           ρ
                           〉
                           |
                           ρ
                           ∈
                           E
                           }
                        . The set of final states is 
                           Q
                           
                              
                                 =
                              
                              
                                 def
                              
                           
                           {
                           〈
                           f
                           〚
                           prog
                           〛
                           ,
                           ρ
                           〉
                           |
                           ρ
                           ∈
                           E
                           }
                        .
                           Remark 1
                           In Section 2 we defined the final states to have no successors with respect to the transition relation, meaning that the program halts: 
                                 Ω
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 {
                                 s
                                 ∈
                                 Σ
                                 |
                                 ∀
                                 
                                    
                                       s
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 Σ
                                 :
                                 〈
                                 s
                                 ,
                                 
                                    
                                       s
                                    
                                    
                                       ′
                                    
                                 
                                 〉
                                 ∉
                                 τ
                                 }
                              . This is the case when the program successfully terminates by reaching its final label, or when a run-time error occurs. For the sake of simplicity, the definition of program final states given in this section ignores possible run-time errors silently halting the program.

Let us consider again the program 
                                 SIMPLE
                               from Fig. 1. The set of program environments 
                                 E
                               contains functions 
                                 ρ
                                 :
                                 {
                                 x
                                 }
                                 →
                                 Z
                               mapping the program variable x to any possible value 
                                 ρ
                                 (
                                 x
                                 )
                                 ∈
                                 Z
                              . The set of program states 
                                 Σ
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 {
                                 1
                                 ,
                                 2
                                 ,
                                 3
                                 ,
                                 4
                                 ,
                                 5
                                 ,
                                 6
                                 ,
                                 7
                                 }
                                 ×
                                 E
                               consists of all pairs of numerical labels and environments; the initial states are 
                                 I
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 {
                                 〈
                                 1
                                 ,
                                 ρ
                                 〉
                                 |
                                 ρ
                                 ∈
                                 E
                                 }
                               and the final states are 
                                 Q
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 {
                                 〈
                                 7
                                 ,
                                 ρ
                                 〉
                                 |
                                 ρ
                                 ∈
                                 E
                                 }
                              .

We now define the transition relation 
                           τ
                           ∈
                           Σ
                           ×
                           Σ
                        . In particular, in Fig. 4
                        , we define the transition semantics 
                           τ
                           〚
                           stmt
                           〛
                           ∈
                           Σ
                           ×
                           Σ
                         of each program instruction stmt. Given an environment 
                           ρ
                           ∈
                           E
                        , a program variable 
                           X
                           ∈
                           X
                         and a value 
                           v
                           ∈
                           Z
                        , we denote by 
                           ρ
                           [
                           X
                           ←
                           v
                           ]
                         the environment obtained by writing v into X in ρ: 
                           
                              
                                 ρ
                                 [
                                 X
                                 ←
                                 v
                                 ]
                                 (
                                 x
                                 )
                                 =
                                 {
                                 
                                    
                                       
                                          
                                             v
                                          
                                          
                                             x
                                             =
                                             X
                                          
                                       
                                       
                                          
                                             ρ
                                             (
                                             x
                                             )
                                          
                                          
                                             x
                                             ≠
                                             X
                                          
                                       
                                    
                                 
                              
                           
                        The semantics of a skip instruction simply moves control from the initial label of the instruction to its final label. The execution of a variable assignment 
                           
                              
                                 X
                              
                              
                              
                              
                              
                              
                                 l
                              
                           
                           ≔
                           aexp
                         moves control from the initial label of the instruction to its final label, and modifies the current environment in order to assign any of the possible values of aexp to the variable X. The semantics of a conditional statement 
                           
                              if
                           
                           
                           
                              
                                 bexp
                              
                              
                              
                              
                              
                              
                                 l
                              
                           
                           
                           
                              then
                           
                           
                           
                              
                                 stmt
                              
                              
                                 1
                              
                           
                           
                           
                              else
                           
                           
                           
                              
                                 stmt
                              
                              
                                 2
                              
                           
                           
                           
                              fi
                           
                         moves control from the initial label of the instruction to the initial label of stmt
                        1, if true is a possible value for bexp, and to the initial label of stmt
                        2, if false is a possible value for bexp; then, stmt
                        1 and stmt
                        2 are executed. Similarly, the execution of a while statement 
                           
                              while
                           
                           
                           
                              
                                 bexp
                              
                              
                              
                              
                              
                              
                                 l
                              
                           
                           
                           
                              do
                           
                           
                           stmt
                           
                           
                              od
                           
                         moves control from the initial label of the instruction to its final label, if false is a possible value for bexp, and to the initial label of stmt
                        1, if true is a possible value for bexp; then stmt is executed. Note that control moves from the end of stmt to the initial label l of the while loop. Finally, the semantics of the sequential combination of instructions 
                           
                              
                                 stmt
                              
                              
                                 1
                              
                           
                           
                              
                                 stmt
                              
                              
                                 2
                              
                           
                         executes stmt
                        1 and stmt
                        2.

The transition relation 
                           τ
                           ∈
                           Σ
                           ×
                           Σ
                         of a program prog is defined by the semantics 
                           τ
                           〚
                           prog
                           〛
                           ∈
                           Σ
                           ×
                           Σ
                         of the program as 
                           τ
                           〚
                           prog
                           〛
                           =
                           τ
                           〚
                           
                              
                                 stmt
                              
                              
                                 l
                              
                           
                           〛
                           
                              
                                 =
                              
                              
                                 def
                              
                           
                           τ
                           〚
                           stmt
                           〛
                        .
                           Example 6
                           Let us consider again the program SIMPLE from Fig. 1. The program transition relation 
                                 τ
                                 ∈
                                 Σ
                                 ×
                                 Σ
                               is defined as follows: 
                                 
                                    
                                       τ
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       {
                                       〈
                                       1
                                       ,
                                       ρ
                                       〉
                                       →
                                       〈
                                       2
                                       ,
                                       ρ
                                       〉
                                       |
                                       ρ
                                       ∈
                                       E
                                       ∧
                                       true
                                       ∈
                                       〚
                                       0
                                       ≤
                                       x
                                       〛
                                       ρ
                                       }
                                       ∪
                                       {
                                       〈
                                       2
                                       ,
                                       ρ
                                       〉
                                       →
                                       〈
                                       1
                                       ,
                                       ρ
                                       [
                                       x
                                       ←
                                       ρ
                                       (
                                       x
                                       )
                                       −
                                       1
                                       ]
                                       〉
                                       |
                                       ρ
                                       ∈
                                       E
                                       }
                                       ∪
                                       {
                                       〈
                                       1
                                       ,
                                       ρ
                                       〉
                                       →
                                       〈
                                       3
                                       ,
                                       ρ
                                       〉
                                       |
                                       ρ
                                       ∈
                                       E
                                       ∧
                                       false
                                       ∈
                                       〚
                                       0
                                       ≤
                                       x
                                       〛
                                       ρ
                                       }
                                       ∪
                                       {
                                       〈
                                       3
                                       ,
                                       ρ
                                       〉
                                       →
                                       〈
                                       4
                                       ,
                                       ρ
                                       〉
                                       |
                                       ρ
                                       ∈
                                       E
                                       }
                                       ∪
                                       {
                                       〈
                                       4
                                       ,
                                       ρ
                                       〉
                                       →
                                       〈
                                       5
                                       ,
                                       ρ
                                       〉
                                       |
                                       ρ
                                       ∈
                                       E
                                       ∧
                                       true
                                       ∈
                                       〚
                                       x
                                       ≤
                                       10
                                       〛
                                       ρ
                                       }
                                       ∪
                                       {
                                       〈
                                       5
                                       ,
                                       ρ
                                       〉
                                       →
                                       〈
                                       3
                                       ,
                                       ρ
                                       [
                                       x
                                       ←
                                       ρ
                                       (
                                       x
                                       )
                                       +
                                       1
                                       ]
                                       〉
                                       |
                                       ρ
                                       ∈
                                       E
                                       }
                                       ∪
                                       {
                                       〈
                                       4
                                       ,
                                       ρ
                                       〉
                                       →
                                       〈
                                       6
                                       ,
                                       ρ
                                       〉
                                       |
                                       ρ
                                       ∈
                                       E
                                       ∧
                                       false
                                       ∈
                                       〚
                                       x
                                       ≤
                                       10
                                       〛
                                       ρ
                                       }
                                       ∪
                                       {
                                       〈
                                       6
                                       ,
                                       ρ
                                       〉
                                       →
                                       〈
                                       3
                                       ,
                                       ρ
                                       [
                                       x
                                       ←
                                       −
                                       ρ
                                       (
                                       x
                                       )
                                       ]
                                       〉
                                       |
                                       ρ
                                       ∈
                                       E
                                       }
                                    
                                 
                              
                           

In the following, we provide a structural definition of the fixpoint termination semantics 
                           
                              
                                 τ
                              
                              
                                 t
                              
                           
                           ∈
                           Σ
                           ⇀
                           
                           O
                         (cf. Eq. (4)) by induction on the syntax of programs written in our small imperative language.

We partition 
                           
                              
                                 τ
                              
                              
                                 t
                              
                           
                         with respect to the program control points: 
                           
                              
                                 τ
                              
                              
                                 t
                              
                           
                           ∈
                           L
                           →
                           (
                           E
                           ⇀
                           
                           O
                           )
                        . In this way, to each program control point 
                           l
                           ∈
                           L
                         corresponds a partial function 
                           f
                           :
                           E
                           ⇀
                           
                           O
                        , and to each program instruction stmt corresponds a termination semantics transformer 
                           
                              
                                 τ
                              
                              
                                 t
                              
                           
                           〚
                           stmt
                           〛
                           :
                           (
                           E
                           ⇀
                           
                           O
                           )
                           →
                           (
                           E
                           ⇀
                           
                           O
                           )
                        . Analogously to Eq. (4), the ranking function is built backwards: each transformer 
                           
                              
                                 τ
                              
                              
                                 t
                              
                           
                           〚
                           stmt
                           〛
                           :
                           (
                           E
                           ⇀
                           
                           O
                           )
                           →
                           (
                           E
                           ⇀
                           
                           O
                           )
                         takes as input a ranking function whose domain represents the terminating environments at the final control point of stmt, and determines a ranking function whose domain represents the terminating environments at the initial control point of stmt, and whose value represents an upper bound on the number of program execution steps remaining to termination.


                        Skip instruction: The termination semantics of a skip instruction takes as input a ranking function 
                           f
                           :
                           E
                           ⇀
                           
                           O
                         whose domain represents the terminating environments at the final label of the instruction, and increases its value by one to take into account that from the environments at the initial label of the instruction another program execution step is necessary before termination:
                           
                              (10)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       t
                                    
                                 
                                 〚
                                 
                                    
                                       
                                          skip
                                       
                                    
                                    
                                    
                                    
                                    
                                    
                                       l
                                    
                                 
                                 〛
                                 f
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 ρ
                                 ∈
                                 dom
                                 (
                                 f
                                 )
                                 .
                                 f
                                 (
                                 ρ
                                 )
                                 +
                                 1
                              
                           
                        
                     


                        Assignment instruction: Similarly, the termination semantics of a variable assignment 
                           
                              
                                 X
                              
                              
                              
                              
                              
                              
                                 l
                              
                           
                           ≔
                           aexp
                         takes as input a ranking function 
                           f
                           :
                           E
                           ⇀
                           O
                         whose domain represent the terminating environments at the final label of the instruction. The resulting ranking function is defined over the environments that when subject to the variable assignment always belong to the domain of the input ranking function. The value of the input ranking function for these environments is increased by one, to take into account another execution step before termination, and the value of the resulting ranking function is the least upper bound of these values, in order to take non-determinism into account:
                           
                              (11)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       t
                                    
                                 
                                 〚
                                 
                                    
                                       X
                                    
                                    
                                    
                                    
                                    
                                    
                                       l
                                    
                                 
                                 ≔
                                 aexp
                                 〛
                                 f
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 ρ
                                 .
                                 {
                                 
                                    
                                       
                                          
                                             sup
                                             {
                                             f
                                             (
                                             ρ
                                             [
                                             X
                                             ←
                                             v
                                             ]
                                             )
                                             +
                                             1
                                             |
                                             v
                                             ∈
                                             〚
                                             aexp
                                             〛
                                             ρ
                                             }
                                          
                                       
                                       
                                          
                                             
                                             〚
                                             aexp
                                             〛
                                             ρ
                                             ≠
                                             ∅
                                             ∧
                                             ∀
                                             
                                                
                                                   v
                                                
                                                
                                                   ′
                                                
                                             
                                             ∈
                                             〚
                                             aexp
                                             〛
                                             ρ
                                             :
                                             ρ
                                             [
                                             X
                                             ←
                                             
                                                
                                                   v
                                                
                                                
                                                   ′
                                                
                                             
                                             ]
                                             ∈
                                             dom
                                             (
                                             f
                                             )
                                          
                                       
                                       
                                          
                                             undefined
                                             
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        Note that all environments yielding a run-time error due to a division by zero do not belong to the domain of the termination semantics of the assignment.
                           Example 7
                           Let us consider again the program SIMPLE from Fig. 1. We assume that the following ranking function 
                                 f
                                 :
                                 E
                                 ⇀
                                 
                                 O
                               is valid at program point 
                                 3
                               during some iterate of the termination semantics: 
                                 
                                    
                                       f
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       λ
                                       ρ
                                       .
                                       {
                                       
                                          
                                             
                                                
                                                   0
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   =
                                                   3
                                                
                                             
                                             
                                                
                                                   undefined
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              and we consider the assignment 
                                 x
                                 ≔
                                 x
                                 +
                                 1
                               at program point 
                                 5
                              . The termination semantics of the assignment, given the ranking function, is 
                                 
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             t
                                          
                                       
                                       〚
                                       x
                                       ≔
                                       x
                                       +
                                       1
                                       〛
                                       f
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       λ
                                       ρ
                                       .
                                       {
                                       
                                          
                                             
                                                
                                                   1
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   =
                                                   2
                                                
                                             
                                             
                                                
                                                   undefined
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              In particular, note that the function is only defined when 
                                 ρ
                                 (
                                 x
                                 )
                                 =
                                 2
                              . In fact, when for example 
                                 ρ
                                 (
                                 x
                                 )
                                 =
                                 1
                              , we have 
                                 〚
                                 x
                                 +
                                 1
                                 〛
                                 ρ
                                 =
                                 {
                                 2
                                 }
                               and 
                                 ρ
                                 [
                                 x
                                 ←
                                 2
                                 ]
                                 ∉
                                 dom
                                 (
                                 f
                                 )
                              . Similarly, when for example 
                                 ρ
                                 (
                                 x
                                 )
                                 =
                                 3
                              , we have 
                                 〚
                                 x
                                 +
                                 1
                                 〛
                                 ρ
                                 =
                                 {
                                 4
                                 }
                               and 
                                 ρ
                                 [
                                 x
                                 ←
                                 4
                                 ]
                                 ∉
                                 dom
                                 (
                                 f
                                 )
                              .


                        Conditional instruction: Given a conditional 
                           
                              if
                           
                           
                           
                              
                                 bexp
                              
                              
                              
                              
                              
                              
                                 l
                              
                           
                           
                           
                              then
                           
                           
                           
                              
                                 stmt
                              
                              
                                 1
                              
                           
                           
                           
                              else
                           
                           
                           
                              
                                 stmt
                              
                              
                                 2
                              
                           
                           
                           
                              fi
                           
                        , its termination semantics takes as input a ranking function 
                           f
                           :
                           E
                           ⇀
                           
                           O
                        , whose value represents an upper bound on the number of execution steps to termination from the final control point of the instruction. Then, it derives the termination semantics 
                           
                              
                                 τ
                              
                              
                                 t
                              
                           
                           〚
                           
                              
                                 stmt
                              
                              
                                 1
                              
                           
                           〛
                           f
                         of stmt
                        1, in the following denoted by S
                        1, and the termination semantics 
                           
                              
                                 τ
                              
                              
                                 t
                              
                           
                           〚
                           
                              
                                 stmt
                              
                              
                                 2
                              
                           
                           〛
                           f
                         of stmt
                        2, in the following denoted by S
                        2. The value of S
                        1 (respectively, S
                        2) represents an upper bound on the number of execution steps from the initial control of stmt
                        1 (respectively, stmt
                        2). The termination semantics of the conditional instruction is defined by means of the ranking function 
                           
                              
                                 F
                              
                              
                                 1
                              
                           
                           :
                           E
                           ⇀
                           
                           O
                         whose domain is the set of environments 
                           ρ
                           ∈
                           E
                         that belong to the domain of S
                        1 and that must satisfy bexp: 
                           
                              
                                 
                                    
                                       F
                                    
                                    
                                       1
                                    
                                 
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 ρ
                                 ∈
                                 dom
                                 (
                                 
                                    
                                       S
                                    
                                    
                                       1
                                    
                                 
                                 )
                                 .
                                 {
                                 
                                    
                                       
                                          
                                             
                                                
                                                   S
                                                
                                                
                                                   1
                                                
                                             
                                             (
                                             ρ
                                             )
                                             +
                                             1
                                          
                                          
                                             〚
                                             bexp
                                             〛
                                             ρ
                                             =
                                             {
                                             true
                                             }
                                          
                                       
                                       
                                          
                                             undefined
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        and the ranking function 
                           
                              
                                 F
                              
                              
                                 2
                              
                           
                           :
                           E
                           ⇀
                           
                           O
                         whose domain is the set of environments that belong to the domain of S
                        2 and that cannot satisfy bexp: 
                           
                              
                                 
                                    
                                       F
                                    
                                    
                                       2
                                    
                                 
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 ρ
                                 ∈
                                 dom
                                 (
                                 
                                    
                                       S
                                    
                                    
                                       2
                                    
                                 
                                 )
                                 .
                                 {
                                 
                                    
                                       
                                          
                                             
                                                
                                                   S
                                                
                                                
                                                   2
                                                
                                             
                                             (
                                             ρ
                                             )
                                             +
                                             1
                                          
                                          
                                             〚
                                             bexp
                                             〛
                                             ρ
                                             =
                                             {
                                             false
                                             }
                                          
                                       
                                       
                                          
                                             undefined
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        and the ranking function 
                           F
                           :
                           E
                           ⇀
                           
                           O
                         whose domain is the set of environments that belong to the domain of S
                        1 and to the domain of S
                        2, and that due to non-determinism may both satisfy and not satisfy the boolean expression bexp: 
                           
                              
                                 F
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 ρ
                                 ∈
                                 dom
                                 (
                                 
                                    
                                       S
                                    
                                    
                                       1
                                    
                                 
                                 )
                                 ∩
                                 dom
                                 (
                                 
                                    
                                       S
                                    
                                    
                                       2
                                    
                                 
                                 )
                                 .
                                 {
                                 
                                    
                                       
                                          
                                             sup
                                             {
                                             
                                                
                                                   S
                                                
                                                
                                                   1
                                                
                                             
                                             (
                                             ρ
                                             )
                                             +
                                             1
                                             ,
                                             
                                                
                                                   S
                                                
                                                
                                                   2
                                                
                                             
                                             (
                                             ρ
                                             )
                                             +
                                             1
                                             }
                                          
                                          
                                             〚
                                             bexp
                                             〛
                                             ρ
                                             =
                                             {
                                             true
                                             ,
                                             false
                                             }
                                          
                                       
                                       
                                          
                                             undefined
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        The value of F
                        1, F
                        2, and F represents an upper bound on the execution steps to termination from the initial control point of the conditional instruction when only the first branch is taken, when only the second branch is takes, or when (due to non-determinism) both branches are taken, respectively. The resulting ranking function is defined joining F
                        1, F
                        2, and F:
                           
                              (12)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       t
                                    
                                 
                                 〚
                                 
                                    if
                                 
                                 
                                 
                                    
                                       bexp
                                    
                                    
                                    
                                    
                                    
                                    
                                       l
                                    
                                 
                                 
                                 
                                    then
                                 
                                 
                                 
                                    
                                       stmt
                                    
                                    
                                       1
                                    
                                 
                                 
                                 
                                    else
                                 
                                 
                                 
                                    
                                       stmt
                                    
                                    
                                       2
                                    
                                 
                                 
                                 
                                    fi
                                 
                                 〛
                                 f
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 
                                    
                                       F
                                    
                                    
                                       1
                                    
                                 
                                 
                                    
                                       ∪
                                    
                                    
                                       ̇
                                    
                                 
                                 
                                    
                                       F
                                    
                                    
                                       2
                                    
                                 
                                 
                                    
                                       ∪
                                    
                                    
                                       ̇
                                    
                                 
                                 F
                              
                           
                        where 
                           
                              
                                 ∪
                              
                              
                                 ̇
                              
                           
                         joins partial functions with disjoint domains: given 
                           
                              
                                 f
                              
                              
                                 1
                              
                           
                           :
                           A
                           ⇀
                           
                           B
                         and 
                           
                              
                                 f
                              
                              
                                 2
                              
                           
                           :
                           A
                           ⇀
                           
                           B
                         such that 
                           dom
                           (
                           
                              
                                 f
                              
                              
                                 1
                              
                           
                           )
                           ∩
                           dom
                           (
                           
                              
                                 f
                              
                              
                                 2
                              
                           
                           )
                           =
                           ∅
                        , 
                           (
                           
                              
                                 f
                              
                              
                                 1
                              
                           
                           
                              
                                 ∪
                              
                              
                                 ̇
                              
                           
                           
                              
                                 f
                              
                              
                                 2
                              
                           
                           )
                           (
                           x
                           )
                           =
                           
                              
                                 f
                              
                              
                                 1
                              
                           
                           (
                           x
                           )
                        , when 
                           x
                           ∈
                           dom
                           (
                           
                              
                                 f
                              
                              
                                 1
                              
                           
                           )
                        , and 
                           (
                           
                              
                                 f
                              
                              
                                 1
                              
                           
                           
                              
                                 ∪
                              
                              
                                 ̇
                              
                           
                           
                              
                                 f
                              
                              
                                 2
                              
                           
                           )
                           (
                           x
                           )
                           =
                           
                              
                                 f
                              
                              
                                 2
                              
                           
                           (
                           x
                           )
                        , when 
                           x
                           ∈
                           dom
                           (
                           
                              
                                 f
                              
                              
                                 2
                              
                           
                           )
                        . 
                           Example 8
                           Let us consider again the program SIMPLE from Fig. 1. We consider the conditional statement 
                                 
                                    if
                                 
                                 
                                 bexp
                                 
                                 
                                    then
                                 
                                 
                                 
                                    
                                       stmt
                                    
                                    
                                       1
                                    
                                 
                                 
                                 
                                    else
                                 
                                 
                                 
                                    
                                       stmt
                                    
                                    
                                       2
                                    
                                 
                                 
                                 
                                    fi
                                 
                               at program point 
                                 4
                              . We assume, given a ranking function 
                                 f
                                 :
                                 E
                                 ⇀
                                 
                                 O
                               valid at program point 
                                 3
                               during some iterate, that the termination semantics of stmt
                              1 is defined as 
                                 
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             t
                                          
                                       
                                       〚
                                       
                                          
                                             stmt
                                          
                                          
                                             1
                                          
                                       
                                       〛
                                       f
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       λ
                                       ρ
                                       .
                                       {
                                       
                                          
                                             
                                                
                                                   1
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   ≤
                                                   0
                                                
                                             
                                             
                                                
                                                   undefined
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              and that the termination semantics of stmt
                              2 is defined as 
                                 
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             t
                                          
                                       
                                       〚
                                       
                                          
                                             stmt
                                          
                                          
                                             2
                                          
                                       
                                       〛
                                       f
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       λ
                                       ρ
                                       .
                                       {
                                       
                                          
                                             
                                                
                                                   3
                                                
                                                
                                                   0
                                                   ≤
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                
                                             
                                             
                                                
                                                   undefined
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              Then, since the boolean expression bexp is 
                                 x
                                 ≤
                                 10
                              , the termination semantics of the conditional statement is 
                                 
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             t
                                          
                                       
                                       〚
                                       
                                          if
                                       
                                       
                                       
                                          
                                             bexp
                                          
                                          
                                          
                                          
                                          
                                          
                                             l
                                          
                                       
                                       
                                       
                                          then
                                       
                                       
                                       
                                          
                                             stmt
                                          
                                          
                                             1
                                          
                                       
                                       
                                       
                                          else
                                       
                                       
                                       
                                          
                                             stmt
                                          
                                          
                                             2
                                          
                                       
                                       
                                       
                                          fi
                                       
                                       〛
                                       f
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       λ
                                       ρ
                                       .
                                       {
                                       
                                          
                                             
                                                
                                                   2
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   ≤
                                                   0
                                                
                                             
                                             
                                                
                                                   4
                                                
                                                
                                                   3
                                                   <
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                
                                             
                                             
                                                
                                                   undefined
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              Instead, if bexp is for example the non-deterministic choice 
                                 
                                    ?
                                 
                              , we have 
                                 
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             t
                                          
                                       
                                       〚
                                       
                                          if
                                       
                                       
                                       
                                          
                                             bexp
                                          
                                          
                                          
                                          
                                          
                                          
                                             l
                                          
                                       
                                       
                                       
                                          then
                                       
                                       
                                       
                                          
                                             stmt
                                          
                                          
                                             1
                                          
                                       
                                       
                                       
                                          else
                                       
                                       
                                       
                                          
                                             stmt
                                          
                                          
                                             2
                                          
                                       
                                       
                                       
                                          fi
                                       
                                       〛
                                       f
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       λ
                                       ρ
                                       .
                                       {
                                       
                                          
                                             
                                                
                                                   4
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   =
                                                   0
                                                
                                             
                                             
                                                
                                                   undefined
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           


                        Loop instruction: The termination semantics of a loop 
                           
                              while
                           
                           
                           
                              
                                 bexp
                              
                              
                              
                              
                              
                              
                                 l
                              
                           
                           
                           
                              do
                           
                           
                           stmt
                           
                           
                              od
                           
                         takes as input a ranking function 
                           f
                           :
                           E
                           ⇀
                           
                           O
                         the domain of which represents the terminating environments at the final label of the instruction (i.e., after exiting the loop), and outputs the ranking function which is defined as a least fixpoint of the function 
                           
                              
                                 ϕ
                              
                              
                                 t
                              
                           
                           :
                           (
                           E
                           ⇀
                           
                           O
                           )
                           →
                           (
                           E
                           ⇀
                           
                           O
                           )
                         within 
                           〈
                           E
                           ⇀
                           O
                           ,
                           ⊑
                           〉
                        , analogously to Eq. (4):
                           
                              (13)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       t
                                    
                                 
                                 〚
                                 
                                    while
                                 
                                 
                                 
                                    
                                       bexp
                                    
                                    
                                    
                                    
                                    
                                    
                                       l
                                    
                                 
                                 
                                 
                                    do
                                 
                                 
                                 stmt
                                 
                                 
                                    od
                                 
                                 〛
                                 f
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 
                                    
                                       lfp
                                    
                                    
                                       
                                          
                                             ∅
                                          
                                          
                                             ̇
                                          
                                       
                                    
                                    
                                       ⊑
                                    
                                 
                                 
                                    
                                       ϕ
                                    
                                    
                                       t
                                    
                                 
                              
                           
                        The function 
                           
                              
                                 ϕ
                              
                              
                                 t
                              
                           
                           :
                           (
                           E
                           ⇀
                           
                           O
                           )
                           →
                           (
                           E
                           ⇀
                           
                           O
                           )
                         takes as input a ranking function 
                           x
                           :
                           E
                           ⇀
                           
                           O
                         and adds to its domain the environments for which one more loop iteration is needed before termination. In the following, the termination semantics 
                           
                              
                                 τ
                              
                              
                                 t
                              
                           
                           〚
                           stmt
                           〛
                           x
                         of the loop body is denoted by S. The function 
                           
                              
                                 ϕ
                              
                              
                                 t
                              
                           
                         is defined by means of the ranking function 
                           
                              
                                 F
                              
                              
                                 1
                              
                           
                           :
                           E
                           ⇀
                           
                           O
                         whose domain is the set of environments 
                           ρ
                           ∈
                           E
                         that belong to the domain of S and that must satisfy bexp: 
                           
                              
                                 
                                    
                                       F
                                    
                                    
                                       1
                                    
                                 
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 ρ
                                 ∈
                                 dom
                                 (
                                 S
                                 )
                                 .
                                 {
                                 
                                    
                                       
                                          
                                             S
                                             (
                                             ρ
                                             )
                                             +
                                             1
                                          
                                          
                                             〚
                                             bexp
                                             〛
                                             ρ
                                             =
                                             {
                                             true
                                             }
                                          
                                       
                                       
                                          
                                             undefined
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        and the ranking function 
                           
                              
                                 F
                              
                              
                                 2
                              
                           
                           :
                           E
                           ⇀
                           
                           O
                         whose domain is the set of environments that belong to the domain of the input function f and that cannot satisfy bexp: 
                           
                              
                                 
                                    
                                       F
                                    
                                    
                                       2
                                    
                                 
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 ρ
                                 ∈
                                 dom
                                 (
                                 f
                                 )
                                 .
                                 {
                                 
                                    
                                       
                                          
                                             f
                                             (
                                             ρ
                                             )
                                             +
                                             1
                                          
                                          
                                             〚
                                             bexp
                                             〛
                                             ρ
                                             =
                                             {
                                             false
                                             }
                                          
                                       
                                       
                                          
                                             undefined
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        and the ranking function 
                           F
                           :
                           E
                           ⇀
                           
                           O
                         whose domain is the set of environments that belong to the domain of S and to the domain of the input function f, and that may both satisfy and not satisfy the boolean expression bexp: 
                           
                              
                                 F
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 ρ
                                 ∈
                                 dom
                                 (
                                 S
                                 )
                                 ∩
                                 dom
                                 (
                                 f
                                 )
                                 .
                                 {
                                 
                                    
                                       
                                          
                                             sup
                                             {
                                             S
                                             (
                                             ρ
                                             )
                                             +
                                             1
                                             ,
                                             f
                                             (
                                             ρ
                                             )
                                             +
                                             1
                                             }
                                          
                                          
                                             〚
                                             bexp
                                             〛
                                             ρ
                                             =
                                             {
                                             true
                                             ,
                                             false
                                             }
                                          
                                       
                                       
                                          
                                             undefined
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        The resulting ranking function is defined joining F
                        1, F
                        2, and F:
                           
                              (14)
                              
                                 
                                    
                                       ϕ
                                    
                                    
                                       t
                                    
                                 
                                 (
                                 x
                                 )
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 
                                    
                                       F
                                    
                                    
                                       1
                                    
                                 
                                 
                                    
                                       ∪
                                    
                                    
                                       ̇
                                    
                                 
                                 
                                    
                                       F
                                    
                                    
                                       2
                                    
                                 
                                 
                                    
                                       ∪
                                    
                                    
                                       ̇
                                    
                                 
                                 F
                              
                           
                        
                     


                        Composition instruction: Finally, the termination semantics of the sequential combination of instructions 
                           
                              
                                 stmt
                              
                              
                                 1
                              
                           
                           
                              
                                 stmt
                              
                              
                                 2
                              
                           
                        , takes as input a ranking function 
                           f
                           :
                           E
                           ⇀
                           
                           O
                         at the final control point of stmt
                        2, determines from f the termination semantics 
                           
                              
                                 τ
                              
                              
                                 t
                              
                           
                           〚
                           
                              
                                 stmt
                              
                              
                                 2
                              
                           
                           〛
                           f
                         of stmt
                        2, and feeds it as input to the termination semantics of stmt
                        1 in order to get a ranking function at the initial control point of stmt
                        1:
                           
                              (15)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       t
                                    
                                 
                                 〚
                                 
                                    
                                       stmt
                                    
                                    
                                       1
                                    
                                 
                                 
                                    
                                       stmt
                                    
                                    
                                       2
                                    
                                 
                                 〛
                                 f
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 
                                    
                                       τ
                                    
                                    
                                       t
                                    
                                 
                                 〚
                                 
                                    
                                       stmt
                                    
                                    
                                       1
                                    
                                 
                                 〛
                                 (
                                 
                                    
                                       τ
                                    
                                    
                                       t
                                    
                                 
                                 〚
                                 
                                    
                                       stmt
                                    
                                    
                                       2
                                    
                                 
                                 〛
                                 f
                                 )
                              
                           
                        
                     


                        Program termination semantics: The termination semantics 
                           
                              
                                 τ
                              
                              
                                 t
                              
                           
                           〚
                           prog
                           〛
                           ∈
                           E
                           ⇀
                           
                           O
                         of a program prog is a ranking function whose domain represents the terminating environments, which is determined taking as input the zero function:
                           
                              (16)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       t
                                    
                                 
                                 〚
                                 prog
                                 〛
                                 =
                                 
                                    
                                       τ
                                    
                                    
                                       t
                                    
                                 
                                 〚
                                 
                                    
                                       stmt
                                    
                                    
                                       l
                                    
                                 
                                 〛
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 
                                    
                                       τ
                                    
                                    
                                       t
                                    
                                 
                                 〚
                                 stmt
                                 〛
                                 (
                                 λ
                                 ρ
                                 .0
                                 )
                                 .
                              
                           
                        Note that, as pointed out in Remark 1, possible run-time errors silently halting the program are ignored. More specifically, all environments leading to run-time errors are discarded and do not belong to the domain of the termination semantics.

In Sections 6.2 and 7.2, we provide a similar denotation for the guarantee properties semantics defined in Section 6.1 and for the recurrence properties semantics defined in Section 7.1.

In general, we define a program property as a set of sequences of program states. A program has a certain property if all its traces belong to the property. In this paper, with respect to the hierarchy of program properties proposed in [2], we focus on guarantee (“something good happens at least once”) and recurrence (“something good happens infinitely often”) properties. In particular, we consider guarantee and recurrence properties that are expressible by temporal logic.

We assume an underlying specification language, which is used to describe properties of program states. For instance, for our small imperative language, we define inductively the syntax of the state properties as follows: 
                        
                           
                              φ
                              ::=
                              bexp
                              |
                              l
                              :
                              bexp
                              |
                              φ
                              ∧
                              φ
                              |
                              φ
                              ∨
                              φ
                              
                              l
                              ∈
                              L
                           
                        
                     The predicate 
                        l
                        :
                        bexp
                      allows specifying a program state property at a particular program control point 
                        l
                        ∈
                        L
                     . When a program state 
                        s
                        ∈
                        Σ
                      satisfies the property φ, we write 
                        s
                        ⊨
                        φ
                      and we say that s is a φ-state. We also slightly abuse notation and write φ to also denote the set 
                        {
                        s
                        ∈
                        Σ
                        |
                        s
                        ⊨
                        φ
                        }
                      of states that satisfy the property φ.
                        Example 9
                        Let us consider again the program SIMPLE from Fig. 1. We write 
                              {
                              〈
                              x
                              ,
                              v
                              〉
                              }
                            to denote the environment 
                              ρ
                              :
                              {
                              x
                              }
                              →
                              Z
                            mapping the program variable x to the value 
                              v
                              ∈
                              Z
                           . An example of state property allowed by the specification language that we have defined is the property x=3. The set of states that satisfy this property is 
                              {
                              1
                              ,
                              2
                              ,
                              3
                              ,
                              4
                              ,
                              5
                              ,
                              6
                              ,
                              7
                              }
                              ×
                              {
                              〈
                              x
                              ,
                              3
                              〉
                              }
                           . Note, however, that 
                              〈
                              7
                              ,
                              {
                              〈
                              x
                              ,
                              3
                              〉
                              }
                              〉
                            is not reachable from the initial states. Another example of state property allowed by the specification language is 
                              7
                              :
                              x
                              =
                              3
                           , which is only satisfied by 
                              〈
                              7
                              ,
                              {
                              〈
                              x
                              ,
                              3
                              〉
                              }
                              〉
                           .

The guarantee and recurrence properties within the hierarchy are then defined by means of the temporal operators always 
                     
                        □
                      and eventually 
                     
                        ⋄
                     .

The class of guarantee properties is informally characterized as the class of properties stating that “something good happens at least once”, that is, a program eventually reaches a desirable state. The guarantee properties that we consider are expressible by a temporal formula of the following form: 
                           
                              
                                 ⋄
                                 φ
                              
                           
                        where φ is a state property. The temporal formula expresses that at least one program state in every program trace satisfies the property φ, but it does not promise any repetition. In general, these guarantee properties are used to ensure that some event happens once during a program execution.

A typical guarantee property is program termination, which ensures that all computations are finite, expressible by the temporal formula 
                           ⋄
                           (
                           
                              
                                 l
                              
                              
                                 e
                              
                           
                           :
                           
                              true
                           
                           )
                        , where 
                           
                              
                                 l
                              
                              
                                 e
                              
                           
                           ∈
                           L
                         denotes the program final control point.

Another typical guarantee property is program total correctness, which ensures that all computations starting in a φ-state terminate in a ψ-state, expressible by the temporal formula 
                           ⋄
                           (
                           
                              
                                 l
                              
                              
                                 i
                              
                           
                           :
                           ¬
                           φ
                           ∨
                           
                              
                                 l
                              
                              
                                 e
                              
                           
                           :
                           ψ
                           )
                        , where 
                           
                              
                                 l
                              
                              
                                 i
                              
                           
                        , 
                           
                              
                                 l
                              
                              
                                 e
                              
                           
                           ∈
                           L
                         respectively denote the initial and the final program control point.
                           Example 10
                           Let us consider again the program SIMPLE from Fig. 1. An example of guarantee property is 
                                 ⋄
                                 (
                                 x
                                 =
                                 3
                                 )
                              , which is satisfied when the program initial states are limited to the set 
                                 {
                                 〈
                                 1
                                 ,
                                 ρ
                                 〉
                                 ∈
                                 Σ
                                 |
                                 ρ
                                 (
                                 x
                                 )
                                 ≤
                                 3
                                 }
                              . In particular, note that when the initial states are limited to 
                                 {
                                 〈
                                 1
                                 ,
                                 ρ
                                 〉
                                 ∈
                                 Σ
                                 |
                                 0
                                 ≤
                                 ρ
                                 (
                                 x
                                 )
                                 ≤
                                 3
                                 }
                              , the guarantee property is satisfied within the first while loop. Instead, when the initial states are limited to 
                                 {
                                 〈
                                 1
                                 ,
                                 ρ
                                 〉
                                 ∈
                                 Σ
                                 |
                                 ρ
                                 (
                                 x
                                 )
                                 <
                                 0
                                 }
                              , the guarantee property is satisfied within the second while loop. Another example of guarantee property is 
                                 ⋄
                                 (
                                 3
                                 ≤
                                 x
                                 )
                              , which is always satisfied by the program whatever its initial states.

The class of recurrence properties is informally characterized as the class of properties stating that “something good happens infinitely often”, that is, a program reaches a desirable state infinitely often. The recurrence properties that we consider are expressible by a temporal formula of the following form: 
                           
                              
                                 □
                                 ⋄
                                 φ
                              
                           
                        where φ is a state property. The temporal formula expresses that infinitely many program states in every program trace satisfy the property φ. In general, these recurrence properties are used to ensure that some event happens infinitely many times during a program execution.

A typical recurrence property is starvation freedom, which ensures that a process will repeatedly enter its critical section, and which is expressible by the temporal formula 
                           □
                           ⋄
                           (
                           
                              
                                 l
                              
                              
                                 c
                              
                           
                           :
                           
                              true
                           
                           )
                        , where 
                           
                              
                                 l
                              
                              
                                 c
                              
                           
                           ∈
                           L
                         represents the critical section.
                           Example 11
                           Let us consider again the program SIMPLE from Fig. 1. The recurrence property represented by the formula 
                                 □
                                 ⋄
                                 x
                                 =
                                 3
                               is satisfied when the program initial states are limited to the set 
                                 {
                                 〈
                                 1
                                 ,
                                 ρ
                                 〉
                                 ∈
                                 Σ
                                 |
                                 ρ
                                 (
                                 x
                                 )
                                 <
                                 0
                                 }
                              . In particular, note that the recurrence property is satisfied only within the second while loop. Instead, the recurrence property 
                                 □
                                 ⋄
                                 3
                                 ≤
                                 x
                               is always satisfied by the program.

In the following, we generalize Section 3 from termination to guarantee properties. We define a sound and complete semantics for proving guarantee temporal properties by abstract interpretation of the program maximal trace semantics. The generalization is straightforward but provides a building block for proving recurrence temporal properties in the next Section 7.

The guarantee semantics, given a set of desirable states 
                           S
                           ⊆
                           Σ
                        , is a ranking function 
                           
                              
                                 τ
                              
                              
                                 g
                              
                           
                           [
                           S
                           ]
                           ∈
                           Σ
                           ⇀
                           
                           O
                         defined starting from the states in S, where the function has value zero, and retracing the program backwards while mapping every state in Σ definitely leading to a state in S (i.e., a state such that all the traces to which it belongs eventually reach a state in S) to an ordinal in 
                           O
                         representing an upper bound on the number of program execution steps remaining to S. The domain 
                           dom
                           (
                           
                              
                                 τ
                              
                              
                                 g
                              
                           
                           [
                           S
                           ]
                           )
                         of 
                           
                              
                                 τ
                              
                              
                                 g
                              
                           
                           [
                           S
                           ]
                         is the set of states definitely leading to a desirable state in S: all traces branching from a state 
                           s
                           ∈
                           dom
                           (
                           
                              
                                 τ
                              
                              
                                 g
                              
                           
                           [
                           S
                           ]
                           )
                         reach a state in S in at most 
                           
                              
                                 τ
                              
                              
                                 g
                              
                           
                           [
                           S
                           ]
                           s
                         execution steps, while at least one trace branching from a state 
                           s
                           ∉
                           dom
                           (
                           
                              
                                 τ
                              
                              
                                 g
                              
                           
                           [
                           S
                           ]
                           )
                         never reaches S.

Note that the program traces that satisfy a guarantee property can also be infinite traces. In particular, guarantee properties are satisfied by finite subsequences of possibly infinite traces. Thus, in order to reason about subsequences, we define the function 
                           sq
                           :
                           P
                           (
                           
                              
                                 Σ
                              
                              
                                 +
                                 ∞
                              
                           
                           )
                           →
                           P
                           (
                           
                              
                                 Σ
                              
                              
                                 +
                              
                           
                           )
                        , which extracts the finite subsequences of a set of sequences 
                           T
                           ⊆
                           
                              
                                 Σ
                              
                              
                                 +
                                 ∞
                              
                           
                        :
                           
                              (17)
                              
                                 sq
                                 (
                                 T
                                 )
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 {
                                 σ
                                 ∈
                                 
                                    
                                       Σ
                                    
                                    
                                       +
                                    
                                 
                                 |
                                 ∃
                                 
                                    
                                       σ
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 
                                    
                                       Σ
                                    
                                    
                                       ⁎
                                    
                                 
                                 ,
                                 σ
                                 ″
                                 ∈
                                 
                                    
                                       Σ
                                    
                                    
                                       ⁎
                                       ∞
                                    
                                 
                                 :
                                 
                                    
                                       σ
                                    
                                    
                                       ′
                                    
                                 
                                 σ
                                 σ
                                 ″
                                 ∈
                                 T
                                 }
                              
                           
                        We recall that the neighborhood of a sequence 
                           σ
                           ∈
                           
                              
                                 Σ
                              
                              
                                 +
                                 ∞
                              
                           
                         in a set of sequences 
                           T
                           ⊆
                           
                              
                                 Σ
                              
                              
                                 +
                                 ∞
                              
                           
                         is the set of sequences 
                           
                              
                                 σ
                              
                              
                                 ′
                              
                           
                           ∈
                           T
                         with a common prefix with 
                           σ
                         (cf. Eq. (5)). A finite subsequence of a program trace satisfies a guarantee property if and only if it terminates in the desirable set of states (and never encounter a desirable state before), and its neighborhood in the subsequences of the program semantics consists only of sequences that are terminating in the desirable set of states (and never encounter a desirable state before). The corresponding guarantee abstraction 
                        
                           
                              
                                 α
                              
                              
                                 g
                              
                           
                           [
                           S
                           ]
                           :
                           P
                           (
                           
                              
                                 Σ
                              
                              
                                 +
                                 ∞
                              
                           
                           )
                           →
                           P
                           (
                           
                              
                                 Σ
                              
                              
                                 +
                              
                           
                           )
                         is parameterized by a set of desirable states 
                           S
                           ⊆
                           Σ
                         and it is defined as follows:
                           
                              (18)
                              
                                 
                                    
                                       α
                                    
                                    
                                       g
                                    
                                 
                                 [
                                 S
                                 ]
                                 T
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 {
                                 
                                    σ
                                    s
                                    ∈
                                    sq
                                    (
                                    T
                                    )
                                    |
                                    σ
                                    ∈
                                    
                                       
                                          
                                             
                                                S
                                             
                                             
                                                ¯
                                             
                                          
                                       
                                       
                                          ⁎
                                       
                                    
                                    ,
                                    s
                                    ∈
                                    S
                                    ,
                                    nhbd
                                    (
                                    σ
                                    ,
                                    sf
                                    (
                                    T
                                    )
                                    ∩
                                    
                                       
                                          
                                             
                                                S
                                             
                                             
                                                ¯
                                             
                                          
                                       
                                       
                                          +
                                          ∞
                                       
                                    
                                    )
                                    =
                                    ∅
                                 
                                 }
                              
                           
                        where 
                           
                              
                                 S
                              
                              
                                 ¯
                              
                           
                           
                              
                                 =
                              
                              
                                 def
                              
                           
                           Σ
                           ⧹
                           S
                         and the function 
                           sf
                           :
                           P
                           (
                           
                              
                                 Σ
                              
                              
                                 +
                                 ∞
                              
                           
                           )
                           →
                           P
                           (
                           
                              
                                 Σ
                              
                              
                                 +
                                 ∞
                              
                           
                           )
                         yields the set of suffixes of a set of sequences 
                           T
                           ⊆
                           
                              
                                 Σ
                              
                              
                                 +
                                 ∞
                              
                           
                        :
                           
                              (19)
                              
                                 sf
                                 (
                                 T
                                 )
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 ⋃
                                 {
                                 σ
                                 ∈
                                 
                                    
                                       Σ
                                    
                                    
                                       +
                                       ∞
                                    
                                 
                                 |
                                 ∃
                                 
                                    
                                       σ
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 
                                    
                                       Σ
                                    
                                    
                                       ⁎
                                    
                                 
                                 :
                                 
                                    
                                       σ
                                    
                                    
                                       ′
                                    
                                 
                                 σ
                                 ∈
                                 T
                                 }
                                 .
                              
                           
                        
                        
                           Example 12
                           Let 
                                 T
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 {
                                 
                                    
                                       (
                                       abcd
                                       )
                                    
                                    
                                       ω
                                    
                                 
                                 ,
                                 
                                    
                                       (
                                       cd
                                       )
                                    
                                    
                                       ω
                                    
                                 
                                 ,
                                 
                                    
                                       a
                                    
                                    
                                       ω
                                    
                                 
                                 ,
                                 
                                    
                                       cd
                                    
                                    
                                       ω
                                    
                                 
                                 }
                               and let 
                                 S
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 {
                                 c
                                 }
                              . We have 
                                 sf
                                 (
                                 T
                                 )
                                 ∩
                                 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       +
                                       ∞
                                    
                                 
                                 =
                                 {
                                 
                                    
                                       a
                                    
                                    
                                       ω
                                    
                                 
                                 ,
                                 
                                    
                                       d
                                    
                                    
                                       ω
                                    
                                 
                                 }
                              . Then, we have 
                                 
                                    
                                       α
                                    
                                    
                                       g
                                    
                                 
                                 [
                                 S
                                 ]
                                 T
                                 =
                                 {
                                 c
                                 ,
                                 bc
                                 }
                              . In fact, let us consider the trace 
                                 
                                    
                                       (
                                       abcd
                                       )
                                    
                                    
                                       ω
                                    
                                 
                              : the subsequences of 
                                 
                                    
                                       (
                                       abcd
                                       )
                                    
                                    
                                       ω
                                    
                                 
                               that are terminating with c and never encounter c before are 
                                 {
                                 c
                                 ,
                                 bc
                                 ,
                                 abc
                                 ,
                                 dabc
                                 }
                              ; for abc, we have 
                                 pf
                                 (
                                 ab
                                 )
                                 ∩
                                 pf
                                 (
                                 
                                    
                                       a
                                    
                                    
                                       ω
                                    
                                 
                                 )
                                 =
                                 {
                                 a
                                 }
                                 ≠
                                 ∅
                               and, for dabc, we have 
                                 pf
                                 (
                                 dab
                                 )
                                 ∩
                                 pf
                                 (
                                 
                                    
                                       d
                                    
                                    
                                       ω
                                    
                                 
                                 )
                                 =
                                 {
                                 d
                                 }
                                 ≠
                                 ∅
                              . Similarly, let us consider 
                                 
                                    
                                       (
                                       cd
                                       )
                                    
                                    
                                       ω
                                    
                                 
                              : the subsequences of 
                                 
                                    
                                       (
                                       cd
                                       )
                                    
                                    
                                       ω
                                    
                                 
                               that are terminating with c and never encounter c before are 
                                 {
                                 c
                                 ,
                                 dc
                                 }
                              ; for dc, we have 
                                 pf
                                 (
                                 d
                                 )
                                 ∩
                                 pf
                                 (
                                 
                                    
                                       d
                                    
                                    
                                       ω
                                    
                                 
                                 )
                                 =
                                 {
                                 d
                                 }
                                 ≠
                                 ∅
                              .

We can now define the guarantee semantics 
                           
                              
                                 τ
                              
                              
                                 g
                              
                           
                           [
                           S
                           ]
                           ∈
                           Σ
                           ⇀
                           
                           O
                        :
                           Definition 7
                           Guarantee semantics


                           Given a desirable set of states 
                                 S
                                 ⊆
                                 Σ
                              , the guarantee semantics 
                              
                                 
                                    
                                       τ
                                    
                                    
                                       g
                                    
                                 
                                 [
                                 S
                                 ]
                                 ∈
                                 Σ
                                 ⇀
                                 
                                 O
                               is an abstract interpretation of the maximal trace semantics 
                                 
                                    
                                       τ
                                    
                                    
                                       +
                                       ∞
                                    
                                 
                                 ∈
                                 P
                                 (
                                 
                                    
                                       Σ
                                    
                                    
                                       +
                                       ∞
                                    
                                 
                                 )
                               (cf. Eq. (3)):
                                 
                                    (20)
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             g
                                          
                                       
                                       [
                                       S
                                       ]
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       
                                          
                                             α
                                          
                                          
                                             rk
                                          
                                       
                                       (
                                       
                                          
                                             α
                                          
                                          
                                             g
                                          
                                       
                                       [
                                       S
                                       ]
                                       (
                                       
                                          
                                             τ
                                          
                                          
                                             +
                                             ∞
                                          
                                       
                                       )
                                       )
                                    
                                 
                              where 
                                 
                                    
                                       α
                                    
                                    
                                       rk
                                    
                                 
                                 :
                                 P
                                 (
                                 
                                    
                                       Σ
                                    
                                    
                                       +
                                    
                                 
                                 )
                                 →
                                 (
                                 Σ
                                 ⇀
                                 
                                 O
                                 )
                               is the ranking abstraction (cf. Eq. (9)).

The guarantee semantics can be expressed as a least fixpoint within the partially ordered set 
                           〈
                           Σ
                           ⇀
                           
                           O
                           ,
                           ⊑
                           〉
                         as follows:
                           
                              (21)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       g
                                    
                                 
                                 [
                                 S
                                 ]
                                 =
                                 
                                    
                                       lfp
                                    
                                    
                                       
                                          
                                             ∅
                                          
                                          
                                             ̇
                                          
                                       
                                    
                                    
                                       ⊑
                                    
                                 
                                 
                                    
                                       ϕ
                                    
                                    
                                       g
                                    
                                 
                                 [
                                 S
                                 ]
                                 
                                    
                                       ϕ
                                    
                                    
                                       g
                                    
                                 
                                 [
                                 S
                                 ]
                                 f
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 s
                                 .
                                 {
                                 
                                    
                                       
                                          
                                             0
                                          
                                          
                                             s
                                             ∈
                                             S
                                          
                                       
                                       
                                          
                                             sup
                                             {
                                             f
                                             (
                                             
                                                
                                                   s
                                                
                                                
                                                   ′
                                                
                                             
                                             )
                                             +
                                             1
                                             |
                                             〈
                                             s
                                             ,
                                             
                                                
                                                   s
                                                
                                                
                                                   ′
                                                
                                             
                                             〉
                                             ∈
                                             τ
                                             }
                                          
                                          
                                             s
                                             ∉
                                             S
                                             ∧
                                             s
                                             ∈
                                             
                                                
                                                   pre
                                                
                                                
                                                   ˜
                                                
                                             
                                             (
                                             dom
                                             (
                                             f
                                             )
                                             )
                                          
                                       
                                       
                                          
                                             undefined
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           Example 13
                           Let us consider the following trace semantics: 
                                 
                                    
                                       
                                          
                                             
                                          
                                       
                                    
                                 
                              where the highlighted states are the set S of desirable states.

The fixpoint iterates of the guarantee semantics 
                                 
                                    
                                       τ
                                    
                                    
                                       g
                                    
                                 
                                 [
                                 S
                                 ]
                                 ∈
                                 Σ
                                 ⇀
                                 
                                 O
                               are 
                                 
                                    
                                       
                                          
                                             
                                          
                                       
                                    
                                 
                              where unlabeled states are outside the domain of the function.

Note that when the set of desirable states S is the set of final states Ω, unsurprisingly we rediscover the termination semantics presented in Section 3, since 
                           
                              
                                 ϕ
                              
                              
                                 g
                              
                           
                           [
                           Ω
                           ]
                           =
                           
                              
                                 ϕ
                              
                              
                                 t
                              
                           
                         (cf. Eq. (4)).

Let φ be a state property. The φ-guarantee semantics 
                        
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                           ∈
                           Σ
                           ⇀
                           
                           O
                        :
                           
                              (22)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       g
                                    
                                    
                                       φ
                                    
                                 
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 
                                    
                                       τ
                                    
                                    
                                       g
                                    
                                 
                                 [
                                 φ
                                 ]
                              
                           
                        is sound and complete for proving a guarantee property 
                           ⋄
                           φ
                        :
                           Theorem 2
                           
                              A program satisfies a guarantee property 
                              
                                 ⋄
                                 φ
                               
                              for all traces starting from a given set of initial states 
                              
                                 I
                               
                              if and only if 
                              
                                 I
                                 ⊆
                                 dom
                                 (
                                 
                                    
                                       τ
                                    
                                    
                                       g
                                    
                                    
                                       φ
                                    
                                 
                                 )
                              .

By Park׳s Fixpoint Induction Principle [15]. See Appendix B.

In the following, we provide a structural definition of the fixpoint guarantee semantics 
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                           ∈
                           Σ
                           ⇀
                           
                           O
                         (cf. Eq. (22)) by induction on the syntax of programs written in our small imperative language presented in Section 4.

We partition 
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                         with respect to the program control points: 
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                           ∈
                           L
                           →
                           (
                           E
                           ⇀
                           
                           O
                           )
                        . In this way, to each program control point 
                           l
                           ∈
                           L
                         corresponds a partial function 
                           f
                           :
                           E
                           ⇀
                           
                           O
                        , and to each program instruction stmt corresponds a guarantee semantics transformer 
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                           〚
                           stmt
                           〛
                           :
                           (
                           E
                           ⇀
                           
                           O
                           )
                           →
                           (
                           E
                           ⇀
                           
                           O
                           )
                        . Analogously to Eq. (21), the ranking function is built backwards: each transformer 
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                           〚
                           stmt
                           〛
                           :
                           (
                           E
                           ⇀
                           
                           O
                           )
                           →
                           (
                           E
                           ⇀
                           
                           O
                           )
                         takes as input a ranking function whose domain represents the environments always leading to φ from the final control point of stmt, and determines the ranking function whose domain represents the environments always leading to φ from the initial control point of stmt, and whose value represents an upper bound on the number of program execution steps remaining to φ.


                        Skip instruction: The guarantee semantics of a skip instruction resets the input ranking function 
                           f
                           :
                           E
                           ⇀
                           
                           O
                         for the environments that satisfy φ, and otherwise it increases its value (as the skip termination semantics, cf. Eq. (10)):
                           
                              (23)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       g
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 
                                    
                                       
                                          skip
                                       
                                    
                                    
                                    
                                    
                                    
                                    
                                       l
                                    
                                 
                                 〛
                                 f
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 ρ
                                 .
                                 {
                                 
                                    
                                       
                                          
                                             0
                                          
                                          
                                             〈
                                             l
                                             ,
                                             ρ
                                             〉
                                             ⊨
                                             φ
                                          
                                       
                                       
                                          
                                             f
                                             (
                                             ρ
                                             )
                                             +
                                             1
                                          
                                          
                                             〈
                                             l
                                             ,
                                             ρ
                                             〉
                                             ⊭
                                             φ
                                             ∧
                                             ρ
                                             ∈
                                             dom
                                             (
                                             f
                                             )
                                          
                                       
                                       
                                          
                                             undefined
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        
                     


                        Assignment instruction: Similarly, the guarantee semantics of a variable assignment 
                           
                              
                                 X
                              
                              
                              
                              
                              
                              
                                 l
                              
                           
                           ≔
                           aexp
                         
                        resets the value of the input ranking function 
                           f
                           :
                           E
                           ⇀
                           
                           O
                         for the environments that satisfy φ; otherwise, the resulting ranking function is defined over the environments that when subject to the variable assignment always belong to the domain of f (as the assignment termination semantics, cf. Eq. (11)):
                           
                              (24)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       g
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 
                                    
                                       X
                                    
                                    
                                    
                                    
                                    
                                    
                                       l
                                    
                                 
                                 ≔
                                 aexp
                                 〛
                                 f
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 ρ
                                 .
                                 {
                                 
                                    
                                       
                                          
                                             0
                                          
                                          
                                             〈
                                             l
                                             ,
                                             ρ
                                             〉
                                             ⊨
                                             φ
                                          
                                       
                                       
                                          
                                             sup
                                             {
                                             f
                                             (
                                             ρ
                                             [
                                             X
                                             ←
                                             v
                                             ]
                                             )
                                             +
                                             1
                                             |
                                             v
                                             ∈
                                             〚
                                             aexp
                                             〛
                                             ρ
                                             }
                                          
                                          
                                             〈
                                             l
                                             ,
                                             ρ
                                             〉
                                             ⊭
                                             φ
                                             ∧
                                          
                                       
                                       
                                          
                                          
                                             〚
                                             aexp
                                             〛
                                             ρ
                                             ≠
                                             ∅
                                             ∧
                                             ∀
                                             
                                                
                                                   v
                                                
                                                
                                                   ′
                                                
                                             
                                             ∈
                                             〚
                                             aexp
                                             〛
                                             ρ
                                             :
                                             ρ
                                             [
                                             X
                                             ←
                                             
                                                
                                                   v
                                                
                                                
                                                   ′
                                                
                                             
                                             ]
                                             ∈
                                             dom
                                             (
                                             f
                                             )
                                          
                                       
                                       
                                          
                                             undefined
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           Example 14
                           Let us consider again the program SIMPLE from Fig. 1. We consider the following ranking function 
                                 f
                                 :
                                 E
                                 ⇀
                                 
                                 O
                               valid at program point 
                                 3
                               during the first iterate of the guarantee semantics: 
                                 
                                    
                                       f
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       λ
                                       ρ
                                       .
                                       {
                                       
                                          
                                             
                                                
                                                   0
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   =
                                                   3
                                                
                                             
                                             
                                                
                                                   undefined
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              the assignment 
                                 x
                                 ≔
                                 x
                                 +
                                 1
                               at program point 
                                 5
                               and the guarantee property 
                                 ⋄
                                 (
                                 x
                                 =
                                 3
                                 )
                              . The guarantee semantics of the assignment, given the ranking function, is 
                                 
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             g
                                          
                                          
                                             x
                                             =
                                             3
                                          
                                       
                                       〚
                                       x
                                       ≔
                                       x
                                       +
                                       1
                                       〛
                                       f
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       λ
                                       ρ
                                       .
                                       {
                                       
                                          
                                             
                                                
                                                   1
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   =
                                                   2
                                                
                                             
                                             
                                                
                                                   0
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   =
                                                   3
                                                
                                             
                                             
                                                
                                                   undefined
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              Note that the function is defined when 
                                 ρ
                                 (
                                 x
                                 )
                                 =
                                 3
                              , even though 
                                 〚
                                 x
                                 +
                                 1
                                 〛
                                 ρ
                                 =
                                 {
                                 4
                                 }
                               and 
                                 ρ
                                 [
                                 x
                                 ←
                                 4
                                 ]
                                 ∉
                                 dom
                                 (
                                 f
                                 )
                              . Indeed, the environment 
                                 {
                                 〈
                                 x
                                 ,
                                 3
                                 〉
                                 }
                               satisfies the property x=3.


                        Conditional instruction: Given a conditional 
                           
                              if
                           
                           
                           
                              
                                 bexp
                              
                              
                              
                              
                              
                              
                                 l
                              
                           
                           
                           
                              then
                           
                           
                           
                              
                                 stmt
                              
                              
                                 1
                              
                           
                           
                           
                              else
                           
                           
                           
                              
                                 stmt
                              
                              
                                 2
                              
                           
                           
                           
                              fi
                           
                        , its guarantee semantics takes as input a ranking function 
                           f
                           :
                           E
                           ⇀
                           
                           O
                         and derives the guarantee semantics 
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                           〚
                           
                              
                                 stmt
                              
                              
                                 1
                              
                           
                           〛
                           f
                         and 
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                           〚
                           
                              
                                 stmt
                              
                              
                                 2
                              
                           
                           〛
                           f
                         of stmt
                        1, and stmt
                        2, respectively. Then, the guarantee semantics of the conditional instruction is defined by joining F
                        1, F
                        2, and F (defined exactly as for the if termination semantics, cf. Eq. (12), where S
                        1 is 
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                           〚
                           
                              
                                 stmt
                              
                              
                                 1
                              
                           
                           〛
                           f
                         and S
                        2 is 
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                           〚
                           
                              
                                 stmt
                              
                              
                                 2
                              
                           
                           〛
                           f
                        ), and resetting the value of the function for the environments that satisfy φ:
                           
                              (25)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       g
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 
                                    if
                                 
                                 
                                 
                                    
                                       bexp
                                    
                                    
                                    
                                    
                                    
                                    
                                       l
                                    
                                 
                                 
                                 
                                    then
                                 
                                 
                                 
                                    
                                       stmt
                                    
                                    
                                       1
                                    
                                 
                                 
                                 
                                    else
                                 
                                 
                                 
                                    
                                       stmt
                                    
                                    
                                       2
                                    
                                 
                                 
                                 
                                    fi
                                 
                                 〛
                                 f
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 ρ
                                 .
                                 {
                                 
                                    
                                       
                                          
                                             0
                                          
                                          
                                             〈
                                             l
                                             ,
                                             ρ
                                             〉
                                             ⊨
                                             φ
                                          
                                       
                                       
                                          
                                             G
                                             (
                                             ρ
                                             )
                                          
                                          
                                             〈
                                             l
                                             ,
                                             ρ
                                             〉
                                             ⊭
                                             φ
                                             ∧
                                             ρ
                                             ∈
                                             dom
                                             (
                                             G
                                             )
                                          
                                       
                                       
                                          
                                             undefined
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           G
                           
                              
                                 =
                              
                              
                                 def
                              
                           
                           
                              
                                 F
                              
                              
                                 1
                              
                           
                           
                              
                                 ∪
                              
                              
                                 ̇
                              
                           
                           
                              
                                 F
                              
                              
                                 2
                              
                           
                           
                              
                                 ∪
                              
                              
                                 ̇
                              
                           
                           F
                        . 
                           Example 15
                           Let us consider again the program SIMPLE from Fig. 1. We consider the guarantee property 
                                 ⋄
                                 (
                                 x
                                 =
                                 3
                                 )
                               and the conditional statement 
                                 
                                    if
                                 
                                 
                                 bexp
                                 
                                 
                                    then
                                 
                                 
                                 
                                    
                                       stmt
                                    
                                    
                                       1
                                    
                                 
                                 
                                 
                                    else
                                 
                                 
                                 
                                    
                                       stmt
                                    
                                    
                                       2
                                    
                                 
                                 
                                 
                                    fi
                                 
                               at program point 
                                 4
                              . We assume, given 
                                 f
                                 :
                                 E
                                 ⇀
                                 
                                 O
                               valid at program point 
                                 3
                               during some iterate, that the guarantee semantics of stmt
                              1 is defined as 
                                 
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             g
                                          
                                          
                                             x
                                             =
                                             3
                                          
                                       
                                       〚
                                       
                                          
                                             stmt
                                          
                                          
                                             1
                                          
                                       
                                       〛
                                       f
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       λ
                                       ρ
                                       .
                                       {
                                       
                                          
                                             
                                                
                                                   1
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   ≤
                                                   0
                                                
                                             
                                             
                                                
                                                   0
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   =
                                                   3
                                                
                                             
                                             
                                                
                                                   undefined
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              and that the guarantee semantics of stmt
                              2 is defined as 
                                 
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             g
                                          
                                          
                                             x
                                             =
                                             3
                                          
                                       
                                       〚
                                       
                                          
                                             stmt
                                          
                                          
                                             2
                                          
                                       
                                       〛
                                       f
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       λ
                                       ρ
                                       .
                                       {
                                       
                                          
                                             
                                                
                                                   3
                                                
                                                
                                                   0
                                                   ≤
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   <
                                                   3
                                                
                                             
                                             
                                                
                                                   0
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   =
                                                   3
                                                
                                             
                                             
                                                
                                                   3
                                                
                                                
                                                   3
                                                   <
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                
                                             
                                             
                                                
                                                   undefined
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              Then, since the boolean expression bexp is 
                                 x
                                 ≤
                                 10
                              , the guarantee semantics of the conditional statement is 
                                 
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             g
                                          
                                          
                                             x
                                             =
                                             3
                                          
                                       
                                       〚
                                       
                                          if
                                       
                                       
                                       
                                          
                                             bexp
                                          
                                          
                                          
                                          
                                          
                                          
                                             l
                                          
                                       
                                       
                                       
                                          then
                                       
                                       
                                       
                                          
                                             stmt
                                          
                                          
                                             1
                                          
                                       
                                       
                                       
                                          else
                                       
                                       
                                       
                                          
                                             stmt
                                          
                                          
                                             2
                                          
                                       
                                       
                                       
                                          fi
                                       
                                       〛
                                       f
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       λ
                                       ρ
                                       .
                                       {
                                       
                                          
                                             
                                                
                                                   2
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   ≤
                                                   0
                                                
                                             
                                             
                                                
                                                   0
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   =
                                                   3
                                                
                                             
                                             
                                                
                                                   4
                                                
                                                
                                                   3
                                                   <
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                
                                             
                                             
                                                
                                                   undefined
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              Instead, if bexp is for example the non-deterministic choice 
                                 
                                    ?
                                 
                              , we have 
                                 
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             g
                                          
                                          
                                             x
                                             =
                                             3
                                          
                                       
                                       〚
                                       
                                          if
                                       
                                       
                                       
                                          
                                             bexp
                                          
                                          
                                          
                                          
                                          
                                          
                                             l
                                          
                                       
                                       
                                       
                                          then
                                       
                                       
                                       
                                          
                                             stmt
                                          
                                          
                                             1
                                          
                                       
                                       
                                       
                                          else
                                       
                                       
                                       
                                          
                                             stmt
                                          
                                          
                                             2
                                          
                                       
                                       
                                       
                                          fi
                                       
                                       〛
                                       f
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       λ
                                       ρ
                                       .
                                       {
                                       
                                          
                                             
                                                
                                                   4
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   =
                                                   0
                                                
                                             
                                             
                                                
                                                   0
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   =
                                                   3
                                                
                                             
                                             
                                                
                                                   undefined
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              Note that, unlike Example 8, both functions are also defined when 
                                 ρ
                                 (
                                 x
                                 )
                                 =
                                 3
                              , since the environment 
                                 {
                                 〈
                                 x
                                 ,
                                 3
                                 〉
                                 }
                               satisfies the property x=3.


                        Loop instruction: The guarantee semantics of a loop 
                           
                              while
                           
                           
                           
                              
                                 bexp
                              
                              
                              
                              
                              
                              
                                 l
                              
                           
                           
                           
                              do
                           
                           
                           stmt
                           
                           
                              od
                           
                         takes as input a ranking function 
                           f
                           :
                           E
                           ⇀
                           
                           O
                         whose domain represents the environments leading to φ from the final label of the instruction (i.e., after exiting the loop), and outputs the ranking function which is defined as the least fixpoint of the function 
                           
                              
                                 ϕ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                           :
                           (
                           E
                           ⇀
                           
                           O
                           )
                           →
                           (
                           E
                           ⇀
                           
                           O
                           )
                         within 
                           〈
                           E
                           ⇀
                           
                           O
                           ,
                           ⊑
                           〉
                        , analogously to Eq. (21):
                           
                              (26)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       g
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 
                                    while
                                 
                                 
                                 
                                    
                                       bexp
                                    
                                    
                                    
                                    
                                    
                                    
                                       l
                                    
                                 
                                 
                                 
                                    do
                                 
                                 
                                 stmt
                                 
                                 
                                    od
                                 
                                 〛
                                 f
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 
                                    
                                       lfp
                                    
                                    
                                       
                                          
                                             ∅
                                          
                                          
                                             ̇
                                          
                                       
                                    
                                    
                                       ⊑
                                    
                                 
                                 
                                    
                                       ϕ
                                    
                                    
                                       g
                                    
                                    
                                       φ
                                    
                                 
                              
                           
                        The function 
                           
                              
                                 ϕ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                           :
                           (
                           E
                           ⇀
                           
                           O
                           )
                           →
                           (
                           E
                           ⇀
                           
                           O
                           )
                         takes as input a ranking function 
                           x
                           :
                           E
                           ⇀
                           
                           O
                        , resets its value for the environments that satisfy φ, and adds to its domain the environments for which one more loop iteration is needed before φ. The function 
                           
                              
                                 ϕ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                         is defined by joining the ranking functions F
                        1, F
                        2, and F (defined exactly as for the while termination semantics, cf. Eq. (14), where S is the guarantee semantics 
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                           〚
                           stmt
                           〛
                           x
                         of the loop body), and resetting the value of the function for the environments that satisfy φ:
                           
                              (27)
                              
                                 
                                    
                                       ϕ
                                    
                                    
                                       g
                                    
                                    
                                       φ
                                    
                                 
                                 (
                                 x
                                 )
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 ρ
                                 .
                                 {
                                 
                                    
                                       
                                          
                                             0
                                          
                                          
                                             〈
                                             l
                                             ,
                                             ρ
                                             〉
                                             ⊨
                                             φ
                                          
                                       
                                       
                                          
                                             G
                                             (
                                             ρ
                                             )
                                          
                                          
                                             〈
                                             l
                                             ,
                                             ρ
                                             〉
                                             ⊭
                                             φ
                                             ∧
                                             ρ
                                             ∈
                                             dom
                                             (
                                             G
                                             )
                                          
                                       
                                       
                                          
                                             undefined
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           G
                           
                              
                                 =
                              
                              
                                 def
                              
                           
                           
                              
                                 F
                              
                              
                                 1
                              
                           
                           
                              
                                 ∪
                              
                              
                                 ̇
                              
                           
                           
                              
                                 F
                              
                              
                                 2
                              
                           
                           
                              
                                 ∪
                              
                              
                                 ̇
                              
                           
                           F
                        .


                        Composition instruction: Finally, the guarantee semantics of the sequential combination of instructions 
                           
                              
                                 stmt
                              
                              
                                 1
                              
                           
                           
                              
                                 stmt
                              
                              
                                 2
                              
                           
                        , takes as input a ranking function 
                           f
                           :
                           E
                           ⇀
                           
                           O
                         at the final control point of stmt
                        2, determines from f the guarantee semantics 
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                           〚
                           
                              
                                 stmt
                              
                              
                                 2
                              
                           
                           〛
                           f
                         of stmt
                        2, and feeds it as input to the guarantee semantics of stmt
                        1 in order to get a ranking function at the initial control point of stmt
                        1:
                           
                              (28)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       g
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 
                                    
                                       stmt
                                    
                                    
                                       1
                                    
                                 
                                 
                                 
                                    
                                       stmt
                                    
                                    
                                       2
                                    
                                 
                                 〛
                                 f
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 
                                    
                                       τ
                                    
                                    
                                       g
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 
                                    
                                       stmt
                                    
                                    
                                       1
                                    
                                 
                                 〛
                                 (
                                 
                                    
                                       τ
                                    
                                    
                                       g
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 
                                    
                                       stmt
                                    
                                    
                                       2
                                    
                                 
                                 〛
                                 f
                                 )
                              
                           
                        
                     


                        Program guarantee semantics: The guarantee semantics 
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                           〚
                           prog
                           〛
                           ∈
                           E
                           ⇀
                           
                           O
                         of a program prog is a ranking function whose domain represents the environments eventually leading to φ, which is determined by taking as input the constant function equal to zero for the environments that satisfy φ, and undefined otherwise:
                           
                              (29)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       g
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 prog
                                 〛
                                 =
                                 
                                    
                                       τ
                                    
                                    
                                       g
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 
                                    
                                       stmt
                                    
                                    
                                       l
                                    
                                 
                                 〛
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 
                                    
                                       τ
                                    
                                    
                                       g
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 stmt
                                 〛
                                 (
                                 
                                    λ
                                    ρ
                                    .
                                    {
                                    
                                       
                                          
                                             
                                                0
                                             
                                             
                                                〈
                                                l
                                                ,
                                                ρ
                                                〉
                                                ⊨
                                                φ
                                             
                                          
                                          
                                             
                                                undefined
                                             
                                             
                                                otherwise
                                             
                                          
                                       
                                    
                                 
                                 )
                              
                           
                        
                     

Note that, as pointed out in Remark 1, possible run-time errors are ignored. More specifically, all environments leading to run-time errors are discarded and do not belong to the domain of the guarantee semantics.

We now define a sound and complete semantics for proving recurrence temporal properties by abstract interpretation of the program maximal trace semantics, following the same approach used in Section 6 for guarantee properties.

The recurrence semantics, given a set of desirable states 
                           S
                           ⊆
                           Σ
                        , is a ranking function 
                           
                              
                                 τ
                              
                              
                                 r
                              
                           
                           [
                           S
                           ]
                           ∈
                           Σ
                           ⇀
                           
                           O
                         defined starting from the states in S, where the function has value zero, and retracing the program backwards while mapping every state in Σ definitely leading infinitely often to a state in S (i.e., a state such that all the traces to which it belongs reach a state in S infinitely often) to an ordinal in 
                           O
                         representing an upper bound on the number of program execution steps remaining to the next state in S. The domain 
                           dom
                           (
                           
                              
                                 τ
                              
                              
                                 r
                              
                           
                           [
                           S
                           ]
                           )
                         of 
                           
                              
                                 τ
                              
                              
                                 r
                              
                           
                           [
                           S
                           ]
                         is the set of states definitely leading infinitely often to a desirable state in S: all traces branching from a state 
                           s
                           ∈
                           dom
                           (
                           
                              
                                 τ
                              
                              
                                 r
                              
                           
                           [
                           S
                           ]
                           )
                         reach the next state in S in at most 
                           
                              
                                 τ
                              
                              
                                 r
                              
                           
                           [
                           S
                           ]
                           s
                         execution steps, while at least one trace branching from a state 
                           s
                           ∉
                           dom
                           (
                           
                              
                                 τ
                              
                              
                                 r
                              
                           
                           [
                           S
                           ]
                           )
                         reaches S at most a finite number of times.

In particular, the recurrence semantics reuses the guarantee semantics of Section 6 as a building block: from the guarantee that some desirable event happens once during program execution, the recurrence semantics ensures that the event happens infinitely often. We define the set of subsequences of a program trace that satisfy a recurrence property using the set itself: a finite subsequence of a program trace satisfies a recurrence property if and only if it terminates in the desirable set of states (and never encounter a desirable state before), and its neighborhood in the subsequences of the program semantics consists only of sequences that are terminating in the desirable set of states (and never encounter a desirable state before), and that are prefixes of traces in the program semantics that reach infinitely often the desirable set of states. The corresponding recurrence abstraction 
                        
                           
                              
                                 α
                              
                              
                                 r
                              
                           
                           [
                           S
                           ]
                           :
                           P
                           (
                           
                              
                                 Σ
                              
                              
                                 +
                                 ∞
                              
                           
                           )
                           →
                           P
                           (
                           
                              
                                 Σ
                              
                              
                                 +
                              
                           
                           )
                         is parameterized by a set of desirable states 
                           S
                           ⊆
                           Σ
                         and it is defined as a fixpoint as follows:
                           
                              (30)
                              
                                 
                                    
                                       α
                                    
                                    
                                       r
                                    
                                 
                                 [
                                 S
                                 ]
                                 T
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 
                                    
                                       gfp
                                    
                                    
                                       
                                          
                                             α
                                          
                                          
                                             g
                                          
                                       
                                       [
                                       S
                                       ]
                                       T
                                    
                                    
                                       ⊆
                                    
                                 
                                 
                                    
                                       ψ
                                    
                                    
                                       r
                                    
                                 
                                 [
                                 T
                                 ,
                                 S
                                 ]
                                 
                                    
                                       ψ
                                    
                                    
                                       r
                                    
                                 
                                 [
                                 T
                                 ,
                                 S
                                 ]
                                 
                                    
                                       T
                                    
                                    
                                       ′
                                    
                                 
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 
                                    
                                       α
                                    
                                    
                                       g
                                    
                                 
                                 [
                                 
                                    
                                       pre
                                    
                                    
                                       ˜
                                    
                                 
                                 [
                                 T
                                 ]
                                 
                                    
                                       T
                                    
                                    
                                       ′
                                    
                                 
                                 ∩
                                 S
                                 ]
                                 T
                              
                           
                        where 
                           
                              
                                 pre
                              
                              
                                 ˜
                              
                           
                           [
                           T
                           ]
                           
                              
                                 T
                              
                              
                                 ′
                              
                           
                           
                              
                                 =
                              
                              
                                 def
                              
                           
                           {
                           s
                           ∈
                           Σ
                           |
                           ∀
                           σ
                           ∈
                           
                              
                                 Σ
                              
                              
                                 ⁎
                              
                           
                           ,
                           
                              
                                 σ
                              
                              
                                 ′
                              
                           
                           ∈
                           
                              
                                 Σ
                              
                              
                                 ⁎
                                 ∞
                              
                           
                           :
                           σ
                           s
                           
                              
                                 σ
                              
                              
                                 ′
                              
                           
                           ∈
                           T
                           ⇒
                           pf
                           (
                           
                              
                                 σ
                              
                              
                                 ′
                              
                           
                           )
                           ∩
                           
                              
                                 T
                              
                              
                                 ′
                              
                           
                           ≠
                           ∅
                           }
                         is the set of states whose successors all belong to a given set of subsequences, and 
                           
                              
                                 gfp
                              
                              
                                 
                                    
                                       α
                                    
                                    
                                       g
                                    
                                 
                                 [
                                 S
                                 ]
                              
                           
                         denotes the greatest fixpoint less than or equal to the guarantee abstraction 
                           
                              
                                 α
                              
                              
                                 g
                              
                           
                           [
                           S
                           ]
                           :
                           P
                           (
                           
                              
                                 Σ
                              
                              
                                 +
                                 ∞
                              
                           
                           )
                           →
                           P
                           (
                           
                              
                                 Σ
                              
                              
                                 +
                              
                           
                           )
                         (cf. Eq. (18)) of T.

To explain intuitively Eq. (30), we use the dual of Kleene׳s Fixpoint Theorem [11] to rephrase 
                           
                              
                                 α
                              
                              
                                 r
                              
                           
                           [
                           S
                           ]
                         as the following limit of a decreasing iteration: 
                           
                              
                                 
                                    
                                       α
                                    
                                    
                                       r
                                    
                                 
                                 [
                                 S
                                 ]
                                 T
                                 =
                                 
                                    
                                       
                                          ⋂
                                       
                                       
                                          i
                                          ∈
                                          N
                                       
                                    
                                 
                                 
                                    
                                       T
                                    
                                    
                                       i
                                       +
                                       1
                                    
                                 
                                 
                                    
                                       T
                                    
                                    
                                       i
                                       +
                                       1
                                    
                                 
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 
                                    
                                       [
                                       
                                          
                                             
                                                ψ
                                             
                                             
                                                r
                                             
                                          
                                          [
                                          T
                                          ,
                                          S
                                          ]
                                       
                                       ]
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 
                                    
                                       α
                                    
                                    
                                       g
                                    
                                 
                                 [
                                 S
                                 ]
                                 T
                                 )
                              
                           
                        Then, for i=0, we get the set 
                           
                              
                                 T
                              
                              
                                 1
                              
                           
                           =
                           
                              
                                 α
                              
                              
                                 g
                              
                           
                           [
                           S
                           ]
                           T
                         of subsequences of T that guarantee S at least once. For i=1, starting from T
                        1, we derive the set of states 
                           
                              
                                 S
                              
                              
                                 1
                              
                           
                           =
                           
                              
                                 pre
                              
                              
                                 ˜
                              
                           
                           [
                           T
                           ]
                           
                              
                                 T
                              
                              
                                 1
                              
                           
                           ∩
                           S
                         (i.e., 
                           
                              
                                 S
                              
                              
                                 1
                              
                           
                           ⊆
                           S
                        ) whose successors all belong to the subsequences in T
                        1, and we get the set 
                           
                              
                                 T
                              
                              
                                 2
                              
                           
                           =
                           
                              
                                 α
                              
                              
                                 g
                              
                           
                           [
                           
                              
                                 S
                              
                              
                                 1
                              
                           
                           ]
                           T
                         of subsequences of T that guarantee S
                        1 at least once and thus guarantee S at least twice. Note that all the subsequences in T
                        2 terminate with a state 
                           
                              
                                 s
                              
                              
                                 ′
                              
                           
                           ∈
                           
                              
                                 S
                              
                              
                                 1
                              
                           
                         and therefore are prefixes of subsequence of T that reach S at least twice. More generally, for each 
                           i
                           ∈
                           N
                        , we get the set 
                           
                              
                                 T
                              
                              
                                 i
                                 +
                                 1
                              
                           
                         of subsequences which are prefixes of subsequences of T that reach S at least 
                           i
                           +
                           1
                         times, i.e., the subsequences that guarantee S at least 
                           i
                           +
                           1
                         times. The limit thus guarantees S infinitely often.
                           Example 16
                           Let 
                                 T
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 {
                                 
                                    
                                       (
                                       cd
                                       )
                                    
                                    
                                       ω
                                    
                                 
                                 ,
                                 
                                    
                                       ca
                                    
                                    
                                       ω
                                    
                                 
                                 ,
                                 d
                                 
                                    
                                       (
                                       be
                                       )
                                    
                                    
                                       ω
                                    
                                 
                                 }
                               and let 
                                 S
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 {
                                 b
                                 ,
                                 c
                                 ,
                                 d
                                 }
                              . For i=0, we have 
                                 
                                    
                                       T
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 
                                    
                                       α
                                    
                                    
                                       g
                                    
                                 
                                 [
                                 S
                                 ]
                                 T
                                 =
                                 {
                                 b
                                 ,
                                 eb
                                 ,
                                 c
                                 ,
                                 d
                                 }
                              . For i=1, we derive 
                                 
                                    
                                       S
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 {
                                 b
                                 ,
                                 d
                                 }
                              , since 
                                 c
                                 
                                    
                                       (
                                       dc
                                       )
                                    
                                    
                                       ω
                                    
                                 
                                 ∈
                                 T
                               and 
                                 pf
                                 (
                                 
                                    
                                       (
                                       dc
                                       )
                                    
                                    
                                       ω
                                    
                                 
                                 )
                                 ∩
                                 
                                    
                                       T
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 {
                                 d
                                 }
                                 ≠
                                 ∅
                               but 
                                 
                                    
                                       ca
                                    
                                    
                                       ω
                                    
                                 
                                 ∈
                                 T
                               and 
                                 pf
                                 (
                                 
                                    
                                       a
                                    
                                    
                                       ω
                                    
                                 
                                 )
                                 ∩
                                 
                                    
                                       T
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 ∅
                              . We get 
                                 
                                    
                                       T
                                    
                                    
                                       2
                                    
                                 
                                 =
                                 
                                    
                                       α
                                    
                                    
                                       g
                                    
                                 
                                 [
                                 
                                    
                                       S
                                    
                                    
                                       1
                                    
                                 
                                 ]
                                 T
                                 =
                                 {
                                 b
                                 ,
                                 eb
                                 ,
                                 d
                                 }
                              . For i=2, we derive 
                                 
                                    
                                       S
                                    
                                    
                                       2
                                    
                                 
                                 =
                                 {
                                 b
                                 }
                              , since 
                                 d
                                 
                                    
                                       (
                                       be
                                       )
                                    
                                    
                                       ω
                                    
                                 
                                 ∈
                                 T
                               and 
                                 pf
                                 (
                                 
                                    
                                       (
                                       be
                                       )
                                    
                                    
                                       ω
                                    
                                 
                                 )
                                 ∩
                                 
                                    
                                       T
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 {
                                 b
                                 }
                                 ≠
                                 ∅
                               but 
                                 d
                                 
                                    
                                       (
                                       cd
                                       )
                                    
                                    
                                       ω
                                    
                                 
                                 ∈
                                 T
                               and 
                                 pf
                                 (
                                 
                                    
                                       (
                                       cd
                                       )
                                    
                                    
                                       ω
                                    
                                 
                                 )
                                 ∩
                                 
                                    
                                       T
                                    
                                    
                                       2
                                    
                                 
                                 =
                                 ∅
                              . We get 
                                 
                                    
                                       T
                                    
                                    
                                       3
                                    
                                 
                                 =
                                 
                                    
                                       α
                                    
                                    
                                       g
                                    
                                 
                                 [
                                 
                                    
                                       S
                                    
                                    
                                       2
                                    
                                 
                                 ]
                                 T
                                 =
                                 {
                                 b
                                 ,
                                 eb
                                 }
                               which is the greatest fixpoint: the only subsequences of sequences in T that guarantee S infinitely often start with b or eb.

We can now define the recurrence semantics 
                           
                              
                                 τ
                              
                              
                                 r
                              
                           
                           [
                           S
                           ]
                           ∈
                           Σ
                           ⇀
                           
                           O
                        :
                           Definition 8
                           Recurrence semantics


                           Given a desirable set of states 
                                 S
                                 ⊆
                                 Σ
                              , the recurrence semantics 
                              
                                 
                                    
                                       τ
                                    
                                    
                                       r
                                    
                                 
                                 [
                                 S
                                 ]
                                 ∈
                                 Σ
                                 ⇀
                                 
                                 O
                               is an abstract interpretation of the maximal trace semantics 
                                 
                                    
                                       τ
                                    
                                    
                                       +
                                       ∞
                                    
                                 
                                 ∈
                                 P
                                 (
                                 
                                    
                                       Σ
                                    
                                    
                                       +
                                       ∞
                                    
                                 
                                 )
                               (cf. Eq. (3)):
                                 
                                    (31)
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             r
                                          
                                       
                                       [
                                       S
                                       ]
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       
                                          
                                             α
                                          
                                          
                                             rk
                                          
                                       
                                       (
                                       
                                          
                                             α
                                          
                                          
                                             r
                                          
                                       
                                       [
                                       S
                                       ]
                                       (
                                       
                                          
                                             τ
                                          
                                          
                                             +
                                             ∞
                                          
                                       
                                       )
                                       )
                                    
                                 
                              where 
                                 
                                    
                                       α
                                    
                                    
                                       rk
                                    
                                 
                                 :
                                 P
                                 (
                                 
                                    
                                       Σ
                                    
                                    
                                       +
                                    
                                 
                                 )
                                 →
                                 (
                                 Σ
                                 ⇀
                                 
                                 O
                                 )
                               is the ranking abstraction (cf. Eq. (9)).

The recurrence semantics can be expressed as a least fixpoint within the partially ordered set 
                           〈
                           Σ
                           ⇀
                           
                           O
                           ,
                           ⊑
                           〉
                         as follows: 
                           
                              (32)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       r
                                    
                                 
                                 [
                                 S
                                 ]
                                 =
                                 
                                    
                                       gfp
                                    
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             g
                                          
                                       
                                       [
                                       S
                                       ]
                                    
                                    
                                       ⊑
                                    
                                 
                                 
                                    
                                       ϕ
                                    
                                    
                                       r
                                    
                                 
                                 [
                                 S
                                 ]
                                 
                                    
                                       ϕ
                                    
                                    
                                       r
                                    
                                 
                                 [
                                 S
                                 ]
                                 f
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 s
                                 .
                                 {
                                 
                                    
                                       
                                          
                                             f
                                             (
                                             s
                                             )
                                          
                                          
                                             s
                                             ∈
                                             dom
                                             (
                                             
                                                
                                                   τ
                                                
                                                
                                                   g
                                                
                                             
                                             [
                                             
                                                
                                                   pre
                                                
                                                
                                                   ˜
                                                
                                             
                                             (
                                             dom
                                             (
                                             f
                                             )
                                             )
                                             ∩
                                             S
                                             ]
                                             )
                                          
                                       
                                       
                                          
                                             undefined
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        
                     

Note that the recurrence semantics can be equivalently simplified as 
                           
                              (33)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       r
                                    
                                 
                                 [
                                 S
                                 ]
                                 =
                                 
                                    
                                       gfp
                                    
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             g
                                          
                                       
                                       [
                                       S
                                       ]
                                    
                                    
                                       ⊑
                                    
                                 
                                 
                                    
                                       ϕ
                                    
                                    
                                       r
                                    
                                 
                                 [
                                 S
                                 ]
                                 
                                    
                                       ϕ
                                    
                                    
                                       r
                                    
                                 
                                 [
                                 S
                                 ]
                                 f
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 s
                                 .
                                 {
                                 
                                    
                                       
                                          
                                             f
                                             (
                                             s
                                             )
                                          
                                          
                                             s
                                             ∈
                                             
                                                
                                                   pre
                                                
                                                
                                                   ˜
                                                
                                             
                                             (
                                             dom
                                             (
                                             f
                                             )
                                             )
                                          
                                       
                                       
                                          
                                             undefined
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        Indeed, there is no need to redefine 
                           
                              
                                 τ
                              
                              
                                 g
                              
                           
                           [
                           S
                           ]
                         at each iterate since we always have 
                           dom
                           (
                           f
                           )
                           ⊆
                           dom
                           (
                           
                              
                                 τ
                              
                              
                                 g
                              
                           
                           [
                           S
                           ]
                           )
                         and 
                           ∀
                           s
                           ∈
                           dom
                           (
                           f
                           )
                           :
                           f
                           (
                           s
                           )
                           =
                           
                              
                                 τ
                              
                              
                                 g
                              
                           
                           [
                           S
                           ]
                           (
                           s
                           )
                        .
                           Example 17
                           Let us consider the following trace semantics: 
                                 
                                    
                                       
                                          
                                             
                                          
                                       
                                    
                                 
                              where the highlighted states are the set S of desirable states.

The fixpoint iterates of the recurrence semantics 
                                 
                                    
                                       τ
                                    
                                    
                                       r
                                    
                                 
                                 [
                                 S
                                 ]
                                 ∈
                                 Σ
                                 ⇀
                                 
                                 O
                               are 
                                 
                                    
                                       
                                          
                                             
                                          
                                       
                                    
                                 
                              where unlabeled states are outside the domain of the function.

Let φ be a state property. The φ-recurrence semantics 
                        
                           
                              
                                 τ
                              
                              
                                 r
                              
                              
                                 φ
                              
                           
                           ∈
                           Σ
                           ⇀
                           
                           O
                        :
                           
                              (34)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       r
                                    
                                    
                                       φ
                                    
                                 
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 
                                    
                                       τ
                                    
                                    
                                       r
                                    
                                 
                                 [
                                 φ
                                 ]
                              
                           
                        is sound and complete for proving a recurrence property 
                           □
                           ⋄
                           φ
                        :
                           Theorem 3
                           
                              A program satisfies a recurrence property 
                              
                                 □
                                 ⋄
                                 φ
                               
                              for all traces starting from a given set of states 
                              
                                 I
                               
                              if and only if 
                              
                                 I
                                 ⊆
                                 dom
                                 (
                                 
                                    
                                       τ
                                    
                                    
                                       r
                                    
                                    
                                       φ
                                    
                                 
                                 )
                              .

The proof follows from the dual of Park׳s Fixpoint Induction Principle [15] and from Theorem 2. See Appendix B.

In the following, we provide a structural definition of the fixpoint recurrence semantics 
                           
                              
                                 τ
                              
                              
                                 r
                              
                              
                                 φ
                              
                           
                           ∈
                           Σ
                           ⇀
                           
                           O
                         (cf. Eq. (34)) by induction on the syntax of programs written in our idealized programming language of Section 4.

We partition 
                           
                              
                                 τ
                              
                              
                                 r
                              
                              
                                 φ
                              
                           
                         with respect to the program control points: 
                           
                              
                                 τ
                              
                              
                                 r
                              
                              
                                 φ
                              
                           
                           ∈
                           L
                           →
                           (
                           E
                           ⇀
                           
                           O
                           )
                        . In this way, to each program control point 
                           l
                           ∈
                           L
                         corresponds a partial function 
                           f
                           :
                           E
                           ⇀
                           
                           O
                        , and to each program instruction stmt corresponds a recurrence semantics transformer 
                           
                              
                                 τ
                              
                              
                                 r
                              
                              
                                 φ
                              
                           
                           〚
                           stmt
                           〛
                           :
                           (
                           E
                           ⇀
                           
                           O
                           )
                           →
                           (
                           E
                           ⇀
                           
                           O
                           )
                        . Analogously to Eq. (33), the ranking function is built backwards: each transformer 
                           
                              
                                 τ
                              
                              
                                 r
                              
                              
                                 φ
                              
                           
                           〚
                           stmt
                           〛
                           :
                           (
                           E
                           ⇀
                           
                           O
                           )
                           →
                           (
                           E
                           ⇀
                           
                           O
                           )
                         takes as input a ranking function whose domain represents the environments always leading infinitely often to φ from the final control point of stmt, and determines a ranking function whose domain represents the environments always leading infinitely often to φ from the initial control point of stmt, and whose value represents an upper bound on the number of program execution steps remaining to the next occurrence of φ. In particular, each transformer 
                           
                              
                                 τ
                              
                              
                                 r
                              
                              
                                 φ
                              
                           
                           〚
                           stmt
                           〛
                           ∈
                           (
                           E
                           ⇀
                           
                           O
                           )
                           →
                           (
                           E
                           ⇀
                           
                           O
                           )
                         behaves as the guarantee semantics transformer 
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                           〚
                           stmt
                           〛
                           ∈
                           (
                           E
                           ⇀
                           
                           O
                           )
                           →
                           (
                           E
                           ⇀
                           
                           O
                           )
                         defined in Section 6.2 and also ensures that each timeφ is satisfied, it will be satisfied again in the future: the value of the input ranking function is reset for the environments that satisfy φ only if all their successors by means of the instruction stmt belong to the domain of the input ranking function.


                        Skip instruction: The recurrence semantics of a skip instruction is defined analogously to its guarantee semantics (cf. Eq. (23)), except that it resets the value of the input ranking function 
                           f
                           :
                           E
                           ⇀
                           
                           O
                         for the environments that satisfy φ only when they already belong to its domain:
                           
                              (35)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       r
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 
                                    
                                       
                                          skip
                                       
                                    
                                    
                                    
                                    
                                    
                                    
                                       l
                                    
                                 
                                 〛
                                 f
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 ρ
                                 .
                                 {
                                 
                                    
                                       
                                          
                                             0
                                          
                                          
                                             〈
                                             l
                                             ,
                                             ρ
                                             〉
                                             ⊨
                                             φ
                                             ∧
                                             ρ
                                             ∈
                                             dom
                                             (
                                             f
                                             )
                                          
                                       
                                       
                                          
                                             f
                                             (
                                             ρ
                                             )
                                             +
                                             1
                                          
                                          
                                             〈
                                             l
                                             ,
                                             ρ
                                             〉
                                             ⊭
                                             φ
                                             ∧
                                             ρ
                                             ∈
                                             dom
                                             (
                                             f
                                             )
                                          
                                       
                                       
                                          
                                             undefined
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        
                     


                        Assignment instruction: Similarly, the recurrence semantics of a variable assignment 
                           
                              
                                 X
                              
                              
                              
                              
                              
                              
                                 l
                              
                           
                           ≔
                           aexp
                         is defined analogously to the assignment guarantee semantics (cf. Eq. (24)), except that it resets the value of the input ranking function 
                           f
                           :
                           E
                           ⇀
                           
                           O
                         only for the environments that satisfy φ and that when subject to the assignment always belong to the domain of f:
                           
                              (36)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       r
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 
                                    
                                       X
                                    
                                    
                                    
                                    
                                    
                                    
                                       l
                                    
                                 
                                 ≔
                                 aexp
                                 〛
                                 f
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 ρ
                                 .
                                 {
                                 
                                    
                                       
                                          
                                             0
                                          
                                          
                                             〈
                                             l
                                             ,
                                             ρ
                                             〉
                                             ⊨
                                             φ
                                             ∧
                                          
                                       
                                       
                                          
                                          
                                             〚
                                             aexp
                                             〛
                                             ρ
                                             ≠
                                             ∅
                                             ∧
                                             ∀
                                             
                                                
                                                   v
                                                
                                                
                                                   ′
                                                
                                             
                                             ∈
                                             〚
                                             aexp
                                             〛
                                             ρ
                                             :
                                             ρ
                                             [
                                             X
                                             ←
                                             
                                                
                                                   v
                                                
                                                
                                                   ′
                                                
                                             
                                             ]
                                             ∈
                                             dom
                                             (
                                             f
                                             )
                                          
                                       
                                       
                                          
                                             sup
                                             {
                                             f
                                             (
                                             ρ
                                             [
                                             X
                                             ←
                                             v
                                             ]
                                             )
                                             +
                                             1
                                             |
                                             v
                                             ∈
                                             〚
                                             aexp
                                             〛
                                             ρ
                                             }
                                          
                                          
                                             〈
                                             l
                                             ,
                                             ρ
                                             〉
                                             ⊭
                                             φ
                                             ∧
                                          
                                       
                                       
                                          
                                          
                                             〚
                                             aexp
                                             〛
                                             ρ
                                             ≠
                                             ∅
                                             ∧
                                             ∀
                                             
                                                
                                                   v
                                                
                                                
                                                   ′
                                                
                                             
                                             ∈
                                             〚
                                             aexp
                                             〛
                                             ρ
                                             :
                                             ρ
                                             [
                                             X
                                             ←
                                             
                                                
                                                   v
                                                
                                                
                                                   ′
                                                
                                             
                                             ]
                                             ∈
                                             dom
                                             (
                                             f
                                             )
                                          
                                       
                                       
                                          
                                             undefined
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           Example 18
                           Let us consider again the program SIMPLE from Fig. 1. We consider the following ranking function 
                                 f
                                 :
                                 E
                                 ⇀
                                 
                                 O
                               valid at program point 
                                 3
                               during the first iterate of the recurrence semantics: 
                                 
                                    
                                       f
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       λ
                                       ρ
                                       .
                                       {
                                       
                                          
                                             
                                                
                                                   0
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   =
                                                   3
                                                
                                             
                                             
                                                
                                                   undefined
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              the assignment 
                                 x
                                 ≔
                                 x
                                 +
                                 1
                               at program point 
                                 5
                               and the recurrence property 
                                 □
                                 ⋄
                                 (
                                 x
                                 =
                                 3
                                 )
                              . The recurrence semantics of the assignment is 
                                 
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             r
                                          
                                          
                                             x
                                             =
                                             3
                                          
                                       
                                       〚
                                       x
                                       ≔
                                       x
                                       +
                                       1
                                       〛
                                       f
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       λ
                                       ρ
                                       .
                                       {
                                       
                                          
                                             
                                                
                                                   1
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   =
                                                   2
                                                
                                             
                                             
                                                
                                                   undefined
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              Note that, unlike Example 14, the function is not defined when 
                                 ρ
                                 (
                                 x
                                 )
                                 =
                                 3
                              , since 
                                 {
                                 〈
                                 x
                                 ,
                                 3
                                 〉
                                 }
                               satisfies the property x=3 but 
                                 〚
                                 x
                                 +
                                 1
                                 〛
                                 ρ
                                 =
                                 {
                                 4
                                 }
                               and 
                                 ρ
                                 [
                                 x
                                 ←
                                 4
                                 ]
                                 ∉
                                 dom
                                 (
                                 f
                                 )
                              .


                        Conditional instruction: The recurrence semantics of a conditional instruction 
                           
                              if
                           
                           
                           
                              
                                 bexp
                              
                              
                              
                              
                              
                              
                                 l
                              
                           
                           
                           
                              then
                           
                           
                           
                              
                                 stmt
                              
                              
                                 1
                              
                           
                           
                           
                              else
                           
                           
                           
                              
                                 stmt
                              
                              
                                 2
                              
                           
                           
                           
                              fi
                           
                        , unlike its guarantee semantics (cf. Eq. (25)), resets the value of the function obtained by joining F
                        1, F
                        2, and F (cf. Eq. (12), where S
                        1 is 
                           
                              
                                 τ
                              
                              
                                 r
                              
                              
                                 φ
                              
                           
                           〚
                           
                              
                                 stmt
                              
                              
                                 1
                              
                           
                           〛
                           f
                         and S
                        2 is 
                           
                              
                                 τ
                              
                              
                                 r
                              
                              
                                 φ
                              
                           
                           〚
                           
                              
                                 stmt
                              
                              
                                 2
                              
                           
                           〛
                           f
                        ) only for the environments that satisfy φ and also belong to its domain:
                           
                              (37)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       g
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 
                                    if
                                 
                                 
                                 
                                    
                                       bexp
                                    
                                    
                                    
                                    
                                    
                                    
                                       l
                                    
                                 
                                 
                                 
                                    then
                                 
                                 
                                 
                                    
                                       stmt
                                    
                                    
                                       1
                                    
                                 
                                 
                                 
                                    else
                                 
                                 
                                 
                                    
                                       stmt
                                    
                                    
                                       2
                                    
                                 
                                 
                                 
                                    fi
                                 
                                 〛
                                 f
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 ρ
                                 .
                                 {
                                 
                                    
                                       
                                          
                                             0
                                          
                                          
                                             〈
                                             l
                                             ,
                                             ρ
                                             〉
                                             ⊨
                                             φ
                                             ∧
                                             ρ
                                             ∈
                                             dom
                                             (
                                             R
                                             )
                                          
                                       
                                       
                                          
                                             R
                                             (
                                             ρ
                                             )
                                          
                                          
                                             〈
                                             l
                                             ,
                                             ρ
                                             〉
                                             ⊭
                                             φ
                                             ∧
                                             ρ
                                             ∈
                                             dom
                                             (
                                             R
                                             )
                                          
                                       
                                       
                                          
                                             undefined
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           R
                           
                              
                                 =
                              
                              
                                 def
                              
                           
                           
                              
                                 F
                              
                              
                                 1
                              
                           
                           
                              
                                 ∪
                              
                              
                                 ̇
                              
                           
                           
                              
                                 F
                              
                              
                                 2
                              
                           
                           
                              
                                 ∪
                              
                              
                                 ̇
                              
                           
                           F
                        . 
                           Example 19
                           Let us consider again the program SIMPLE from Fig. 1. We consider the recurrence property 
                                 □
                                 ⋄
                                 (
                                 x
                                 =
                                 3
                                 )
                               and the conditional statement 
                                 
                                    if
                                 
                                 
                                 bexp
                                 
                                 
                                    then
                                 
                                 
                                 
                                    
                                       stmt
                                    
                                    
                                       1
                                    
                                 
                                 
                                 
                                    else
                                 
                                 
                                 
                                    
                                       stmt
                                    
                                    
                                       2
                                    
                                 
                                 
                                 
                                    fi
                                 
                               at program point 
                                 4
                              . We assume, given 
                                 f
                                 :
                                 E
                                 ⇀
                                 
                                 O
                               valid at program point 
                                 3
                               during some iterate, that the recurrence semantics of stmt
                              1 is defined as 
                                 
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             r
                                          
                                          
                                             x
                                             =
                                             3
                                          
                                       
                                       〚
                                       
                                          
                                             stmt
                                          
                                          
                                             1
                                          
                                       
                                       〛
                                       f
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       λ
                                       ρ
                                       .
                                       {
                                       
                                          
                                             
                                                
                                                   1
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   ≤
                                                   0
                                                
                                             
                                             
                                                
                                                   undefined
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              and that the recurrence semantics of stmt
                              2 is defined as 
                                 
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             r
                                          
                                          
                                             x
                                             =
                                             3
                                          
                                       
                                       〚
                                       
                                          
                                             stmt
                                          
                                          
                                             2
                                          
                                       
                                       〛
                                       f
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       λ
                                       ρ
                                       .
                                       {
                                       
                                          
                                             
                                                
                                                   3
                                                
                                                
                                                   0
                                                   ≤
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   <
                                                   3
                                                
                                             
                                             
                                                
                                                   0
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   =
                                                   3
                                                
                                             
                                             
                                                
                                                   3
                                                
                                                
                                                   3
                                                   <
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                
                                             
                                             
                                                
                                                   undefined
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              Then, since the boolean expression bexp is 
                                 x
                                 ≤
                                 10
                              , the recurrence semantics of the conditional statement is 
                                 
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             r
                                          
                                          
                                             x
                                             =
                                             3
                                          
                                       
                                       〚
                                       
                                          if
                                       
                                       
                                       
                                          
                                             bexp
                                          
                                          
                                          
                                          
                                          
                                          
                                             l
                                          
                                       
                                       
                                       
                                          then
                                       
                                       
                                       
                                          
                                             stmt
                                          
                                          
                                             1
                                          
                                       
                                       
                                       
                                          else
                                       
                                       
                                       
                                          
                                             stmt
                                          
                                          
                                             2
                                          
                                       
                                       
                                       
                                          fi
                                       
                                       〛
                                       f
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       λ
                                       ρ
                                       .
                                       {
                                       
                                          
                                             
                                                
                                                   2
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   ≤
                                                   0
                                                
                                             
                                             
                                                
                                                   4
                                                
                                                
                                                   3
                                                   <
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                
                                             
                                             
                                                
                                                   undefined
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              Instead, if bexp is for example the non-deterministic choice 
                                 
                                    ?
                                 
                              , we have 
                                 
                                    
                                       
                                          
                                             τ
                                          
                                          
                                             r
                                          
                                          
                                             x
                                             =
                                             3
                                          
                                       
                                       〚
                                       
                                          if
                                       
                                       
                                       
                                          
                                             bexp
                                          
                                          
                                          
                                          
                                          
                                          
                                             l
                                          
                                       
                                       
                                       
                                          then
                                       
                                       
                                       
                                          
                                             stmt
                                          
                                          
                                             1
                                          
                                       
                                       
                                       
                                          else
                                       
                                       
                                       
                                          
                                             stmt
                                          
                                          
                                             2
                                          
                                       
                                       
                                       
                                          fi
                                       
                                       〛
                                       f
                                       
                                          
                                             =
                                          
                                          
                                             def
                                          
                                       
                                       λ
                                       ρ
                                       .
                                       {
                                       
                                          
                                             
                                                
                                                   4
                                                
                                                
                                                   ρ
                                                   (
                                                   x
                                                   )
                                                   =
                                                   0
                                                
                                             
                                             
                                                
                                                   undefined
                                                
                                                
                                                   otherwise
                                                
                                             
                                          
                                       
                                    
                                 
                              Note that, unlike Example 15, both functions are undefined when 
                                 ρ
                                 (
                                 x
                                 )
                                 =
                                 3
                              , even though the property x=3 is satisfied by the environment 
                                 {
                                 〈
                                 x
                                 ,
                                 3
                                 〉
                                 }
                              . In fact, the ranking function for the then branch of the if is undefined when 
                                 ρ
                                 (
                                 x
                                 )
                                 =
                                 3
                              .


                        Loop instruction: The recurrence semantics of a loop 
                           
                              while
                           
                           
                           
                              
                                 bexp
                              
                              
                              
                              
                              
                              
                                 l
                              
                           
                           
                           
                              do
                           
                           
                           stmt
                           
                           
                              od
                           
                         takes as input a ranking function 
                           f
                           :
                           E
                           ⇀
                           
                           O
                         whose domain represents the environments leading infinitely often to φ from the final label of the instruction (i.e., after exiting the loop), and outputs the ranking function which is defined as a greatest fixpoint of the function 
                           
                              
                                 ϕ
                              
                              
                                 r
                              
                              
                                 φ
                              
                           
                           :
                           (
                           E
                           ⇀
                           
                           O
                           )
                           →
                           (
                           E
                           ⇀
                           
                           O
                           )
                         within 
                           〈
                           E
                           ⇀
                           
                           O
                           ,
                           ⊑
                           〉
                        :
                           
                              (38)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       r
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 
                                    while
                                 
                                 
                                 
                                    
                                       bexp
                                    
                                    
                                    
                                    
                                    
                                    
                                       l
                                    
                                 
                                 
                                 
                                    do
                                 
                                 
                                 stmt
                                 
                                 
                                    od
                                 
                                 〛
                                 f
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 
                                    
                                       gfp
                                    
                                    
                                       G
                                    
                                    
                                       ⊑
                                    
                                 
                                 
                                    
                                       ϕ
                                    
                                    
                                       r
                                    
                                    
                                       φ
                                    
                                 
                              
                           
                        where 
                           G
                           
                              
                                 =
                              
                              
                                 def
                              
                           
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                           〚
                           
                              while
                           
                           
                           
                              
                                 bexp
                              
                              
                              
                              
                              
                              
                                 l
                              
                           
                           
                           
                              do
                           
                           
                           stmt
                           
                           
                              od
                           
                           〛
                           f
                         is the guarantee semantics of the loop instruction defined in Eq. (26). In essence, from the guarantee that some desirable event eventually happens, the recurrence semantics ensures that the event happens infinitely often. The function 
                           
                              
                                 ϕ
                              
                              
                                 r
                              
                              
                                 φ
                              
                           
                           :
                           (
                           E
                           ⇀
                           
                           O
                           )
                           →
                           (
                           E
                           ⇀
                           
                           O
                           )
                         takes as input a ranking function 
                           x
                           :
                           E
                           ⇀
                           
                           O
                        , resets its value for the environments that belong to its domain and that satisfy φ, and adds to its domain the environments for which one more loop iteration is needed before the next occurrence of φ. The function 
                           
                              
                                 ϕ
                              
                              
                                 r
                              
                              
                                 φ
                              
                           
                        , unlike 
                           
                              
                                 ϕ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                         (cf. Eq. (27)), resets the value of the function obtained by joining F
                        1, F
                        2, and F (cf. Eq. (14), where S is 
                           
                              
                                 τ
                              
                              
                                 r
                              
                              
                                 φ
                              
                           
                           〚
                           stmt
                           〛
                           x
                        ) only for the environments that satisfy φ and also belong to its domain:
                           
                              (39)
                              
                                 
                                    
                                       ϕ
                                    
                                    
                                       r
                                    
                                    
                                       φ
                                    
                                 
                                 (
                                 x
                                 )
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 λ
                                 ρ
                                 .
                                 {
                                 
                                    
                                       
                                          
                                             0
                                          
                                          
                                             〈
                                             l
                                             ,
                                             ρ
                                             〉
                                             ⊨
                                             φ
                                             ∧
                                             ρ
                                             ∈
                                             dom
                                             (
                                             R
                                             )
                                          
                                       
                                       
                                          
                                             R
                                             (
                                             ρ
                                             )
                                          
                                          
                                             〈
                                             l
                                             ,
                                             ρ
                                             〉
                                             ⊭
                                             φ
                                             ∧
                                             ρ
                                             ∈
                                             dom
                                             (
                                             R
                                             )
                                          
                                       
                                       
                                          
                                             undefined
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           R
                           
                              
                                 =
                              
                              
                                 def
                              
                           
                           
                              
                                 F
                              
                              
                                 1
                              
                           
                           
                              
                                 ∪
                              
                              
                                 ̇
                              
                           
                           
                              
                                 F
                              
                              
                                 2
                              
                           
                           
                              
                                 ∪
                              
                              
                                 ̇
                              
                           
                           F
                        .


                        Composition instruction: Finally, the recurrence semantics of the sequential combination of instructions 
                           
                              
                                 stmt
                              
                              
                                 1
                              
                           
                           
                              
                                 stmt
                              
                              
                                 2
                              
                           
                        , takes as input a ranking function 
                           f
                           :
                           E
                           ⇀
                           
                           O
                         at the final control point of stmt
                        2, determines from f the recurrence semantics 
                           
                              
                                 τ
                              
                              
                                 r
                              
                              
                                 φ
                              
                           
                           〚
                           
                              
                                 stmt
                              
                              
                                 2
                              
                           
                           〛
                           f
                         of stmt
                        2, and feeds it as input to the recurrence semantics of stmt
                        1 in order to get a ranking function at the initial control point of stmt
                        1:
                           
                              (40)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       r
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 
                                    
                                       stmt
                                    
                                    
                                       1
                                    
                                 
                                 
                                 
                                    
                                       stmt
                                    
                                    
                                       2
                                    
                                 
                                 〛
                                 f
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 
                                    
                                       τ
                                    
                                    
                                       r
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 
                                    
                                       stmt
                                    
                                    
                                       1
                                    
                                 
                                 〛
                                 (
                                 
                                    
                                       τ
                                    
                                    
                                       r
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 
                                    
                                       stmt
                                    
                                    
                                       2
                                    
                                 
                                 〛
                                 f
                                 )
                              
                           
                        
                     


                        Program recurrence semantics: The recurrence semantics 
                           
                              
                                 τ
                              
                              
                                 r
                              
                              
                                 φ
                              
                           
                           〚
                           prog
                           〛
                           ∈
                           E
                           ⇀
                           
                           O
                         of a program prog is a ranking function whose domain represents the environments leading infinitely often to φ, which is determined by taking as input the totally undefined function, since the program final states cannot satisfy a recurrence property:
                           
                              (41)
                              
                                 
                                    
                                       τ
                                    
                                    
                                       r
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 prog
                                 〛
                                 =
                                 
                                    
                                       τ
                                    
                                    
                                       r
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 
                                    
                                       stmt
                                    
                                    
                                       l
                                    
                                 
                                 〛
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 
                                    
                                       τ
                                    
                                    
                                       r
                                    
                                    
                                       φ
                                    
                                 
                                 〚
                                 stmt
                                 〛
                                 
                                    
                                       ∅
                                    
                                    
                                       ̇
                                    
                                 
                              
                           
                        
                     

As pointed out in Remark 1, possible run-time errors are ignored. Thus, all environments leading to run-time errors are discarded and do not belong to the domain of the recurrence semantics.

The termination semantics 
                        
                           
                              τ
                           
                           
                              t
                           
                        
                      of Section 3, the φ-guarantee semantics 
                        
                           
                              τ
                           
                           
                              g
                           
                           
                              φ
                           
                        
                      of Section 6 and the φ-recurrence semantics 
                        
                           
                              τ
                           
                           
                              r
                           
                           
                              φ
                           
                        
                      of Section 7 are usually not computable (i.e., when the program state space is infinite).

In [6–8], we present decidable abstractions of 
                        
                           
                              τ
                           
                           
                              t
                           
                        
                      by means of piecewise-defined ranking functions over natural numbers [6], over ordinals [7] and with relational partitioning [8]. In the following, we will briefly recall the main characteristics of these abstractions and we will show how to modify the abstract domains in order to obtain decidable abstractions of 
                        
                           
                              τ
                           
                           
                              g
                           
                           
                              φ
                           
                        
                      and 
                        
                           
                              τ
                           
                           
                              r
                           
                           
                              φ
                           
                        
                      as well. We refer to [6–8] for more detailed discussions on the abstract domains.

The abstract termination semantics 
                           
                              
                                 τ
                              
                              
                                 t
                              
                              
                                 ♮
                              
                           
                           ∈
                           L
                           →
                           T
                         maps each program control point 
                           l
                           ∈
                           L
                         to an element 
                           t
                           ∈
                           T
                         of the decision trees abstract domain 
                           T
                        .


                        Decision trees abstract domain: The elements of the decision trees abstract domain 
                           T
                         are piecewise-defined ranking functions represented by decision trees, where the decision nodes are labeled with linear constraints in 
                           C
                           
                              
                                 =
                              
                              
                                 def
                              
                           
                           {
                           
                              
                                 c
                              
                              
                                 1
                              
                           
                           
                              
                                 X
                              
                              
                                 1
                              
                           
                           +
                           ⋯
                           +
                           
                              
                                 c
                              
                              
                                 k
                              
                           
                           
                              
                                 X
                              
                              
                                 k
                              
                           
                           +
                           
                              
                                 c
                              
                              
                                 k
                                 +
                                 1
                              
                           
                           ≥
                           0
                           |
                           
                              
                                 X
                              
                              
                                 1
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 X
                              
                              
                                 k
                              
                           
                           ∈
                           X
                           ,
                           
                              
                                 c
                              
                              
                                 1
                              
                           
                           ,
                           …
                           ,
                           
                              
                                 c
                              
                              
                                 k
                              
                           
                           ,
                           
                              
                                 c
                              
                              
                                 k
                                 +
                                 1
                              
                           
                           ∈
                           Z
                           }
                        , and the leaf nodes belong to an auxiliary abstract domain 
                           F
                         whose elements are natural-valued (or ordinal-valued [7]) functions of the program variables. The paths along the decision trees establish the shape of the pieces of the ranking functions, and the leaf nodes represent the value of the ranking functions within their pieces. A special element 
                           ⊥
                         denotes an undefined value within a piece. In the following, we slightly abuse notation and use 
                           ⊥
                         to also denote a decision tree with a single undefined leaf node.

The decision trees abstract domain is parametric in the choice between the expressivity and the cost of the numerical abstract domain [16–18] which underlies the linear constraints labeling the decision nodes, and the choice of the auxiliary abstract domain for the leaf nodes. For example, in [6] we consider piecewise-defined ranking functions represented using interval constraints based on the intervals abstract domain [16] at the decision nodes, and affine functions at the leaf nodes. We used the same parameterization to analyze the program SIMPLE of Fig. 1 for proving 
                           ⋄
                           (
                           x
                           =
                           3
                           )
                         and 
                           ⋄
                           (
                           x
                           =
                           3
                           )
                         and, in Fig. 5
                        a, we depict the decision tree inferred at program control point 
                           3
                        . The graphical representation of the ranking function is shown in Fig. 5b.


                        Abstract termination semantics: A sound abstract termination semantics transformer 
                           
                              
                                 τ
                              
                              
                                 t
                              
                              
                                 ♮
                              
                           
                           〚
                           stmt
                           〛
                           ∈
                           T
                           →
                           T
                         corresponds to each program instruction stmt. We define each function 
                           
                              
                                 τ
                              
                              
                                 t
                              
                              
                                 ♮
                              
                           
                           〚
                           stmt
                           〛
                         in Fig. 7 by means of the following operators in the decision trees abstract domain: 
                           
                              STEP
                           
                        , 
                           
                              B−ASSIGN
                           
                           〚
                           X
                           ≔
                           aexp
                           〛
                        , 
                           
                              FILTER
                           
                           〚
                           bexp
                           〛
                        , the join operator 
                           ⋎
                        , and the widening operator 
                           ▿
                        . The operator 
                           
                              STEP
                           
                         descends along each path of a decision tree up to a leaf node, where it simply increments the value of the ranking function (cf. Fig. 6
                        b) to count another program execution step. The operator 
                           
                              B−ASSIGN
                           
                           〚
                           X
                           ≔
                           aexp
                           〛
                         models a backward assignment by substituting the variable X with the expression aexp within the decision nodes as well as within the leaf nodes, and also increments the value of the ranking function within the leaf nodes (cf. Fig. 6c). The operator 
                           
                              FILTER
                           
                           〚
                           bexp
                           〛
                         discards all paths of a decision tree that do not satisfy the expression bexp, possibly introducing new decision nodes, and also increments the value of the ranking function within the remaining leaf nodes (cf. Fig. 6a). The join operator yields a piecewise-defined ranking function defined over the coarsest partition refining both partitions of the given decision trees (cf. Fig. 6d). The widening operator instead imposes the less refined partition of a given decision tree upon another given decision tree, possibly inducing a loss of precision but enforcing termination of the analysis. In Fig. 7
                        , 
                           
                              
                                 lfp
                              
                              
                                 ♮
                              
                           
                           
                              
                                 ϕ
                              
                              
                                 t
                              
                              
                                 ♮
                              
                           
                         denotes the limit of the iteration sequence with widening:
                           
                              (42)
                              
                                 
                                    
                                       y
                                    
                                    
                                       0
                                    
                                 
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 ⊥
                                 
                                    
                                       y
                                    
                                    
                                       n
                                       +
                                       1
                                    
                                 
                                 
                                    
                                       =
                                    
                                    
                                       def
                                    
                                 
                                 {
                                 
                                    
                                       
                                          
                                             
                                                
                                                   y
                                                
                                                
                                                   n
                                                
                                             
                                          
                                          
                                             
                                                
                                                   ϕ
                                                
                                                
                                                   t
                                                
                                                
                                                   ♮
                                                
                                             
                                             (
                                             
                                                
                                                   y
                                                
                                                
                                                   n
                                                
                                             
                                             )
                                             
                                                
                                                   ⊑
                                                
                                                
                                                   ♮
                                                
                                             
                                             
                                                
                                                   y
                                                
                                                
                                                   n
                                                
                                             
                                             ∧
                                             
                                                
                                                   ϕ
                                                
                                                
                                                   t
                                                
                                                
                                                   ♮
                                                
                                             
                                             (
                                             
                                                
                                                   y
                                                
                                                
                                                   n
                                                
                                             
                                             )
                                             
                                                
                                                   ≼
                                                
                                                
                                                   ♮
                                                
                                             
                                             
                                                
                                                   y
                                                
                                                
                                                   n
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   y
                                                
                                                
                                                   n
                                                
                                             
                                             ▿
                                             
                                                
                                                   ϕ
                                                
                                                
                                                   t
                                                
                                                
                                                   ♮
                                                
                                             
                                             (
                                             
                                                
                                                   y
                                                
                                                
                                                   n
                                                
                                             
                                             )
                                          
                                          
                                             otherwise
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           
                              
                                 ⊑
                              
                              
                                 ♮
                              
                           
                         and 
                           
                              
                                 ≼
                              
                              
                                 ♮
                              
                           
                         are the abstract counterparts of the computational 
                           ⊑
                         and approximation 
                           ≼
                         order, respectively. We refer to [6–8] for further details.

The transformers 
                           
                              
                                 τ
                              
                              
                                 t
                              
                              
                                 ♮
                              
                           
                           〚
                           stmt
                           〛
                         are combined together to compute a piecewise-defined ranking function for a program through backward analysis. The starting point is the constant function equal to zero at the program final control point 
                           f
                           〚
                           prog
                           〛
                        . This function is then propagated backwards towards the program initial control point 
                           i
                           〚
                           prog
                           〛
                         taking assignments and tests into account and, in case of loops, solving least fixpoints by iteration with widening.

The abstract termination semantics is sound with respect to the approximation order 
                           
                              
                                 v
                              
                              
                                 1
                              
                           
                           ≼
                           
                              
                                 v
                              
                              
                                 2
                              
                           
                           ⇔
                           dom
                           (
                           
                              
                                 v
                              
                              
                                 1
                              
                           
                           )
                           ⊇
                           dom
                           (
                           
                              
                                 v
                              
                              
                                 2
                              
                           
                           )
                           ∧
                           ∀
                           x
                           ∈
                           dom
                           (
                           
                              
                                 v
                              
                              
                                 2
                              
                           
                           )
                           :
                           
                              
                                 v
                              
                              
                                 1
                              
                           
                           (
                           x
                           )
                           ≤
                           
                              
                                 v
                              
                              
                                 2
                              
                           
                           (
                           x
                           )
                         (cf. Section 3). Thus, the backward analysis computes an over-approximation of the value of the termination semantics 
                           
                              
                                 τ
                              
                              
                                 t
                              
                           
                         and an under-approximation of its domain of definition 
                           dom
                           (
                           
                              
                                 τ
                              
                              
                                 t
                              
                           
                           )
                        . In this way, an abstraction provides sufficient preconditions for program termination: if the abstraction is defined on a program state, then all the program traces branching from that state are terminating, and the value of the function provides an upper bound on the number of execution steps before termination.

In the following, we describe how to reuse the decision trees abstract domain [6–8] briefly recalled in the previous section, and what changes are required in order to obtain decidable abstractions of 
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                         (cf. Eq. (22)).

We define the abstract φ-guarantee semantics 
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                                 ♮
                              
                           
                           ∈
                           L
                           →
                           T
                        : to each program control point 
                           l
                           ∈
                           L
                         corresponds a piecewise-defined ranking function 
                           t
                           ∈
                           T
                        , and for each program instruction stmt a sound guarantee semantics transformer 
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                                 ♮
                              
                           
                           〚
                           stmt
                           〛
                           ∈
                           T
                           →
                           T
                         is defined in Fig. 8
                        . In particular, we complement the operators briefly presented in the previous Section 8.1 with a new operator 
                           
                              RESET
                           
                           〚
                           φ
                           〛
                        , which possibly splits a given piecewise-defined ranking function into more pieces (by introducing new decision nodes in a decision tree) in order to distinguish the pieces that satisfy φ, and resets its value within those pieces (and leaves the other pieces unchanged). We propose an example of use of the 
                           
                              RESET
                           
                           〚
                           φ
                           〛
                         operator in Fig. 9
                        . Note that 
                           
                              RESET
                           
                           〚
                           φ
                           〛
                         operates also on undefined leaf nodes.

The transformers 
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                                 ♮
                              
                           
                           〚
                           stmt
                           〛
                         are again combined together through backward analysis. The starting point is now the constant function equal to zero only for the environments that satisfy the property φ, and undefined elsewhere (i.e., 
                           
                              RESET
                           
                           〚
                           φ
                           〛
                           ⊥
                        ), at the program final control point 
                           f
                           〚
                           prog
                           〛
                        . The backward analysis computes an over-approximation of the value of the φ-guarantee semantics 
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                         and an under-approximation of its domain of definition 
                           dom
                           (
                           
                              
                                 τ
                              
                              
                                 g
                              
                              
                                 φ
                              
                           
                           )
                        . In this way, an abstraction provides sufficient preconditions for the guarantee property 
                           ⋄
                           φ
                        : if the abstraction is defined on a program state, then all the program traces branching from that state eventually reach a state with the property φ, and the value of the function provides an upper bound on the number of execution steps before such state with the property φ.
                           Example 20
                           In Fig. 10
                              a, we depict the decision tree inferred for proving the guarantee property 
                                 ⋄
                                 (
                                 x
                                 =
                                 3
                                 )
                               at program control point 
                                 1
                               of the program SIMPLE of Fig. 1. The graphical representation of the ranking function is shown in Fig. 10b. Its domain yields the sufficient precondition 
                                 x
                                 ≤
                                 3
                               for 
                                 ⋄
                                 (
                                 x
                                 =
                                 3
                                 )
                              .

We now describe the required changes to the decision trees abstract domains in order to obtain a decidable abstraction of the φ-recurrence semantics 
                           
                              
                                 τ
                              
                              
                                 r
                              
                              
                                 φ
                              
                           
                         (cf. Eq. (34)).

We define the abstract φ-recurrence semantics 
                           
                              
                                 τ
                              
                              
                                 r
                              
                              
                                 φ
                                 ♮
                              
                           
                           ∈
                           L
                           →
                           T
                        : to each program control point 
                           l
                           ∈
                           L
                         corresponds a piecewise-defined ranking function 
                           t
                           ∈
                           T
                        , and for each program instruction stmt a sound abstract recurrence semantics transformer 
                           
                              
                                 τ
                              
                              
                                 r
                              
                              
                                 φ
                                 ♮
                              
                           
                           〚
                           stmt
                           〛
                           ∈
                           T
                           →
                           T
                         is defined in Fig. 11
                        . In particular, we modify the operator 
                           
                              RESET
                           
                           〚
                           φ
                           〛
                         presented in the previous Section 8.2 in order to reset the value of a ranking function only when the ranking function is already defined within the pieces that satisfy a given property φ. As an example, unlike Fig. 9, the decision tree in Fig. 6c is unmodified by the 
                           
                              RESET
                           
                           〚
                           x
                           =
                           3
                           〛
                         operator.

The starting point of the recurrence backward analysis is now the totally undefined function at the program final control point 
                           f
                           〚
                           prog
                           〛
                        , since the program final states cannot satisfy a recurrence property. This function is then propagated backwards towards the program initial control point 
                           i
                           〚
                           prog
                           〛
                        . In case of loops, a first increasing iteration with widening yields their abstract guarantee semantics, which is the starting point for the decreasing iteration with a new dual widening operator 
                           
                              
                                 ∇
                              
                              
                                 ¯
                              
                           
                        . The dual widening 
                           
                              
                                 ∇
                              
                              
                                 ¯
                              
                           
                         obeys:
                           
                              (i)
                              
                                 
                                    x
                                    ⊒
                                    x
                                    
                                       
                                          ∇
                                       
                                       
                                          ¯
                                       
                                    
                                    y
                                  and 
                                    y
                                    ⊒
                                    x
                                    
                                       
                                          ∇
                                       
                                       
                                          ¯
                                       
                                    
                                    y
                                 ;

for all decreasing sequences 
                                    
                                       
                                          X
                                       
                                       
                                          0
                                       
                                    
                                    ⊒
                                    
                                       
                                          X
                                       
                                       
                                          1
                                       
                                    
                                    ⊒
                                    ⋯
                                    ⊒
                                    
                                       
                                          X
                                       
                                       
                                          n
                                       
                                    
                                    ⊒
                                    ⋯
                                 , the decreasing sequence 
                                    
                                       
                                          Y
                                       
                                       
                                          0
                                       
                                    
                                    
                                       
                                          =
                                       
                                       
                                          def
                                       
                                    
                                    
                                       
                                          X
                                       
                                       
                                          0
                                       
                                    
                                 , 
                                    
                                       
                                          Y
                                       
                                       
                                          n
                                          +
                                          1
                                       
                                    
                                    
                                       
                                          =
                                       
                                       
                                          def
                                       
                                    
                                    
                                       
                                          Y
                                       
                                       
                                          n
                                       
                                    
                                    
                                       
                                          ▿
                                       
                                       
                                          ¯
                                       
                                    
                                    
                                       
                                          X
                                       
                                       
                                          n
                                          +
                                          1
                                       
                                    
                                  stabilizes, that is, 
                                    ∃
                                    l
                                    ≥
                                    0
                                    :
                                    ∀
                                    j
                                    ≥
                                    l
                                    :
                                    
                                       
                                          y
                                       
                                       
                                          j
                                       
                                    
                                    =
                                    
                                       
                                          y
                                       
                                       
                                          l
                                       
                                    
                                 .

The analysis computes an over-approximation of the value of the φ-recurrence semantics 
                           
                              
                                 τ
                              
                              
                                 r
                              
                              
                                 φ
                              
                           
                         and an under-approximation of its domain of definition 
                           dom
                           (
                           
                              
                                 τ
                              
                              
                                 r
                              
                              
                                 φ
                              
                           
                           )
                        . In this way, an abstraction provides sufficient preconditions for the recurrence property 
                           □
                           ⋄
                           φ
                        : if the abstraction is defined on a program state, then all the program traces branching from that state always reach a state with the property φ infinitely often, and the value of the function provides an upper bound on the number of execution steps before the next occurrence of a state with the property φ.
                           Example 21
                           In Fig. 13
                              a, we depict the decision tree inferred for proving the recurrence property 
                                 □
                                 ⋄
                                 (
                                 x
                                 =
                                 3
                                 )
                               at program control point 
                                 1
                               of the program SIMPLE of Fig. 1. The graphical representation of the ranking function is shown in Fig. 13b. Its domain yields the sufficient precondition 
                                 x
                                 <
                                 0
                               for 
                                 □
                                 ⋄
                                 (
                                 x
                                 =
                                 3
                                 )
                              .

@&#IMPLEMENTATION@&#

We have incorporated the static analysis methods for guarantee and recurrence temporal properties that we have presented into our prototype static analyzer FuncTion based on piecewise-defined ranking functions.

The prototype accepts (non-deterministic) programs written in a C-like syntax, without struct and union types. It provides only a limited support for arrays and pointers. The mathematical integers are the only basic data type, deviating from the standard semantics of C. When the guarantee or recurrence analysis methods are selected, it accepts state properties written as C-like pure expressions. The prototype is written in OCaml and, at the time of writing, the available numerical abstractions to control the pieces of the ranking functions are based on the intervals abstract domain [16], the convex polyhedra abstract domain [17], and the octagons abstract domain [18], and the available abstraction to represent the value of the ranking functions is based on affine functions. The numerical abstract domains are provided by the APRON library [21]. It is also possible to activate the extension to ordinal-valued ranking functions [7], and tune the precision of the analysis by adjusting the widening delay.

To improve precision, we avoid trying to compute a ranking function for the non-reachable states: FuncTion runs a forward analysis to over-approximate the reachable states using a numerical abstract domain [16–18]. Then, it runs the backward analysis to infer a ranking function, intersecting its domain at each step with the states identified by the previous analysis.

The analysis proceeds by structural induction on the program syntax, iterating loops with widening (and, for recurrence properties, both widening and dual widening) until stabilization. In case of nested loops, the analysis stabilizes the inner loop for each iteration of the outer loop, following [22].

To illustrate the effectiveness of our new static analysis methods, we consider more examples besides the program SIMPLE of Fig. 1, and we present the results automatically produced by our analyzer.
                        Example 22
                        Let us consider the program COUNT-DOWN in Fig. 14
                           . Each iteration of the outer loop assigns to the variable x the value of some counter c, which initially has value one; then, the inner loop decreases the value of x and increases the value of c until the value of x becomes less than or equal to zero.


                           FuncTion, parameterized by the intervals abstract domain 
                           [16] and using affine functions to represent the value of the ranking functions, is able to prove that the recurrence property 
                              □
                              ⋄
                              (
                              x
                              =
                              0
                              )
                            is always satisfied by the program. The piecewise-defined ranking function inferred at program control point 
                              1
                            bounds the wait for the next occurrence of the desirable state x=0 by five program execution steps (i.e., executing the variable assignment 
                              c
                              ≔
                              1
                           , testing the outer loop condition, executing the assignment 
                              x
                              ≔
                              c
                           , testing the inner loop condition and executing the assignment 
                              x
                              ≔
                              x
                              −
                              1
                           ). The analysis infers a more interesting raking function associated to program control point 
                              4
                           . The function bounds the wait for the next occurrence of x=0 by 
                              3
                              c
                              +
                              2
                            execution steps when 
                              x
                              <
                              0
                              ∧
                              0
                              <
                              c
                           , by 3 execution steps when 
                              x
                              <
                              0
                              ∧
                              c
                              =
                              0
                            (i.e., testing the inner loop condition, testing the outer loop condition and executing the assignment 
                              x
                              ≔
                              c
                           ), by 1 execution step when 
                              x
                              =
                              0
                              ∧
                              0
                              ≤
                              c
                            (i.e., testing the inner loop condition) and by 
                              3
                              x
                              −
                              1
                            execution steps when 
                              (
                              x
                              =
                              1
                              ∧
                              −
                              1
                              ≤
                              c
                              )
                              ∨
                              (
                              2
                              ≤
                              x
                              ∧
                              −
                              2
                              ≤
                              c
                              )
                           : 
                              
                                 
                                    λ
                                    x
                                    .
                                    λ
                                    c
                                    .
                                    {
                                    
                                       
                                          
                                             
                                                3
                                                c
                                                +
                                                2
                                             
                                             
                                                x
                                                <
                                                0
                                                ∧
                                                0
                                                <
                                                c
                                             
                                          
                                          
                                             
                                                3
                                             
                                             
                                                x
                                                <
                                                0
                                                ∧
                                                c
                                                =
                                                0
                                             
                                          
                                          
                                             
                                                1
                                             
                                             
                                                x
                                                =
                                                0
                                                ∧
                                                0
                                                ≤
                                                c
                                             
                                          
                                          
                                             
                                                3
                                                x
                                                −
                                                1
                                             
                                             
                                                (
                                                x
                                                =
                                                1
                                                ∧
                                                −
                                                1
                                                ≤
                                                c
                                                )
                                                ∨
                                                (
                                                2
                                                ≤
                                                x
                                                ∧
                                                −
                                                2
                                                ≤
                                                c
                                                )
                                             
                                          
                                          
                                             
                                                undefined
                                             
                                             
                                                otherwise
                                             
                                          
                                       
                                    
                                 
                              
                           In the last case there is a precision loss due to a lack of expressiveness of the intervals abstract domain: if x is strictly positive at program control point 
                              4
                           , the weakest precondition ensuring infinitely many occurrences of the desirable state x=0 is 
                              −
                              x
                              ≤
                              c
                           , which is not representable by the intervals abstract domain.

Let us consider the program SINK in Fig. 15
                           . Each iteration of the outer loop resets the value of the program variable x with the non-deterministic assignment 
                              x
                              ≔
                              
                                 ?
                              
                           ; then, the inner loop decreases (when x is positive) or increases (when x is negative) the value of x until it becomes equal to zero.

The recurrence property 
                              □
                              ⋄
                              (
                              x
                              =
                              0
                              )
                            is clearly satisfied by the program. However, because of the non-deterministic assignment 
                              x
                              ≔
                              
                                 ?
                              
                           , the number of execution steps between two occurrences of the desirable state x=0 is unbounded. FuncTion, parameterized by the intervals abstract domain 
                           [16] and using ordinal-valued affine functions 
                           [7] to represent the value of the ranking functions, is able to prove that the property is satisfied. The ranking function at program control point 
                              1
                           : 
                              
                                 
                                    λ
                                    x
                                    .
                                    ω
                                    +
                                    8
                                 
                              
                           means that, whatever the value of x, the number of execution steps between two occurrences of x=0 is unbounded but finite. Indeed, since ordinals are a well-ordered set, any strictly decreasing sequence starting at 
                              ω
                              +
                              8
                            is necessarily finite. Thus, the value 
                              ω
                              +
                              8
                            proves that x=0 necessarily happens infinitely often.

Let us consider the program PETERSON, Peterson׳s algorithm for mutual exclusion, in Fig. 16
                           . Note that weak fairness 
                           [9] assumptions are required in order to guarantee bounded bypass (i.e., a process cannot be bypassed by any other process in entering the critical section for more than a finite number of times). At the moment our prototype FuncTion is not able to directly analyze concurrent programs. Thus, we have modeled the algorithm as a fair non-deterministic sequential program which interleaves execution steps from both processes while enforcing 1-bounded bypass (i.e., a process cannot be bypassed by any other process in entering the critical section for more than once). FuncTion, parameterized by the intervals abstract domain 
                           [16] and using affine functions to represent the value of the ranking functions, is able to prove the recurrence property 
                              □
                              ⋄
                              (
                              8
                              :
                              
                                 true
                              
                              )
                           , meaning that both processes are allowed to enter their critical section infinitely often.

These and additional examples are available from FuncTion web interface: http://www.di.ens.fr/~urban/FuncTion.html. We refer to [8,23] for more extensive experimental evaluations restricted to program termination.

@&#RELATED WORK@&#

In the recent past, a large body of work has been devoted to proving liveness properties of (concurrent) programs.

A successful approach for proving liveness properties is based on a transformation from model checking of liveness properties to model checking of safety properties [24]. The approach looks for and exploits lasso-shaped counterexamples. A similar search for lasso-shaped counterexamples has been used to generalize the model checking algorithm IC3 to deal with liveness properties [25]. However, in general, counterexamples to liveness properties in infinite-state systems are not necessarily lasso-shaped. Our approach is not counterexample-based and is meant for proving liveness properties directly, without reduction to safety properties.

In [26], Podelski and Rybalchenko present a method for the verification of liveness properties based on transition invariants [27]. The approach, as in [28], reduces the proof of a liveness property to the proof of fair termination by means of a program transformation. It is at the basis of the industrial-scale tool Terminator 
                     [29]. By contrast, our method is meant for proving liveness properties directly, without reduction to termination (the same argument applies to other approaches based on the size-change termination principle [30]). Moreover, our method avoids the cost of explicit checking for the well-foundedness of the transition invariants. In [31], transition invariants are computed by an off-the-shelf forward abstract interpretation, while our abstract domains are specifically dedicated to the inference of ranking functions via backward analysis.

A distinguishing aspect of our work is the use of infinite height abstract domains, equipped with (dual) widening. We are aware of only one other such work: in [32], Damien Massé proposes a method for proving arbitrary temporal properties based on abstract domains for lower closure operators. A small analyzer is presented in [33] but the approach remains mainly theoretical. We believe that our framework, albeit less general, is more straightforward and of practical use.

An emerging trend focuses on proving existential temporal properties (e.g., proving that there exists a particular execution trace). The most recent approaches [34,35] are based on counterexample-guided abstraction refinement [36]. Our work is designed for proving universal temporal properties (i.e., valid for all program execution traces). We leave proving existential temporal properties, as well as proving more expressive temporal properties such as CTL and CTL* properties [37,38], as part of our future work.

Finally, to our knowledge, the inference of sufficient preconditions for guarantee and recurrence properties (as opposed to proving a temporal property unconditionally), and the ability to provide upper bounds on the waiting time before a program reaches a desirable state, are unique to our work. In particular, the ability to infer preconditions is key to enable modular analyses, which allow reasoning on a portion of the code at a time without any knowledge about its context in the complete program. We are aware of only few works that have addressed the problem of finding sufficient preconditions for program termination. In [39], preconditions are acquired in order to strengthen a termination argument, while our preconditions are inherently obtained from the inferred ranking functions as the set of program states for which the ranking function is defined. Thus, our preconditions are derived by under-approximation of the set of terminating states as opposed to the approaches presented in [40,41] where the preconditions are derived by (complementing an) over-approximation of the non-terminating states.

In this paper, we have presented an abstract interpretation framework for proving guarantee and recurrence temporal properties of programs. We have systematically derived by abstract interpretation new sound static analysis methods to effectively infer sufficient preconditions for these temporal properties, and to provide upper bounds on the wait before a program reaches a desirable state.

It remains for future work to explicitly express and handle fairness properties. Another natural future direction is analyzing concurrent programs directly, without resorting to their sequential encoding. We also plan to extend the present framework to the full hierarchy of temporal properties presented in [2] (to the class of persistence properties, in particular) and more generally to arbitrary (universal and existential) liveness properties.

@&#ACKNOWLEDGMENTS@&#

The research leading to these results has received funding from the French Agence Nationale de la Recherche (Project ANR-11-INSE-014).

The semantics 
                        〚
                        aexp
                        〛
                        :
                        E
                        →
                        P
                        (
                        Z
                        )
                      of an arithmetic expression aexp is defined in Fig. A1
                     . Similarly, the semantics 
                        〚
                        bexp
                        〛
                        :
                        E
                        →
                        P
                        (
                        {
                        true
                        ,
                        false
                        }
                        )
                      of a boolean expression bexp is presented in Fig. A2
                     . The initial control point 
                        i
                        〚
                        stmt
                        〛
                        ∈
                        L
                      (resp. 
                        i
                        〚
                        prog
                        〛
                        ∈
                        L
                     ) of an instruction stmt (resp. a program prog), and the final control point 
                        f
                        〚
                        stmt
                        〛
                        ∈
                        L
                      (resp. 
                        f
                        〚
                        prog
                        〛
                        ∈
                        L
                     ) of an instruction stmt (resp. a program prog) are formally defined in Figs. A3 and A4
                     
                     , respectively.


                     
                        Theorem 2
                        
                           A program satisfies a guarantee property 
                           
                              ⋄
                              φ
                            
                           for all traces starting from a given set of initial states 
                           
                              I
                            
                           if and only if 
                           
                              I
                              ⊆
                              dom
                              (
                              
                                 
                                    τ
                                 
                                 
                                    g
                                 
                                 
                                    φ
                                 
                              
                              )
                           .

The proof follows by Park׳s Fixpoint Induction Principle [15]. More specifically, we have 
                              I
                              ⊆
                              dom
                              (
                              
                                 
                                    τ
                                 
                                 
                                    g
                                 
                                 
                                    φ
                                 
                              
                              )
                            if and only if 
                              ∃
                              v
                              :
                              Σ
                              ⇀
                              
                              O
                              :
                              
                                 
                                    τ
                                 
                                 
                                    g
                                 
                                 
                                    φ
                                 
                              
                              ⊑
                              v
                              ∧
                              I
                              ⊆
                              dom
                              (
                              v
                              )
                           . Then we have
                              
                                 
                                    
                                       
                                          τ
                                       
                                       
                                          g
                                       
                                       
                                          φ
                                       
                                    
                                    ⊑
                                    v
                                    ⇔
                                    
                                       
                                          lfp
                                       
                                       
                                          
                                             
                                                ∅
                                             
                                             
                                                ̇
                                             
                                          
                                       
                                       
                                          ⊑
                                       
                                    
                                    
                                       
                                          ϕ
                                       
                                       
                                          g
                                       
                                    
                                    [
                                    φ
                                    ]
                                    ⊑
                                    v
                                    
                                    (
                                    from
                                    
                                    Eqs
                                    .
                                    
                                    
                                       (22)
                                    
                                    
                                    and
                                    
                                    
                                       (21)
                                    
                                    )
                                    ⇔
                                    ∃
                                    
                                       
                                          v
                                       
                                       
                                          ′
                                       
                                    
                                    :
                                    Σ
                                    ⇀
                                    
                                    O
                                    :
                                    
                                       
                                          ∅
                                       
                                       
                                          ̇
                                       
                                    
                                    ⊑
                                    
                                       
                                          v
                                       
                                       
                                          ′
                                       
                                    
                                    ∧
                                    
                                       
                                          ϕ
                                       
                                       
                                          g
                                       
                                    
                                    [
                                    φ
                                    ]
                                    (
                                    
                                       
                                          v
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    ⊑
                                    
                                       
                                          v
                                       
                                       
                                          ′
                                       
                                    
                                    ∧
                                    
                                       
                                          v
                                       
                                       
                                          ′
                                       
                                    
                                    ⊑
                                    v
                                    
                                    (
                                    from
                                    
                                    Park׳s
                                    
                                    Fixpoint
                                    
                                    Induction
                                    
                                    Principle
                                    
                                    [
                                    15
                                    ]
                                    )
                                    ⇔
                                    
                                       
                                          ϕ
                                       
                                       
                                          g
                                       
                                    
                                    [
                                    φ
                                    ]
                                    (
                                    v
                                    )
                                    ⊑
                                    v
                                    
                                    (
                                    by
                                    
                                    definition
                                    
                                    of
                                    
                                    ⊑
                                    
                                    and
                                    
                                    choosing
                                    
                                    
                                       
                                          v
                                       
                                       
                                          ′
                                       
                                    
                                    =
                                    v
                                    )
                                    ⇔
                                    dom
                                    (
                                    
                                       
                                          ϕ
                                       
                                       
                                          g
                                       
                                    
                                    [
                                    φ
                                    ]
                                    (
                                    v
                                    )
                                    )
                                    ⊆
                                    dom
                                    (
                                    v
                                    )
                                    ∧
                                    ∀
                                    s
                                    ∈
                                    dom
                                    (
                                    
                                       
                                          ϕ
                                       
                                       
                                          g
                                       
                                    
                                    [
                                    φ
                                    ]
                                    (
                                    v
                                    )
                                    )
                                    :
                                    
                                       
                                          ϕ
                                       
                                       
                                          g
                                       
                                    
                                    [
                                    φ
                                    ]
                                    (
                                    v
                                    )
                                    s
                                    ≤
                                    v
                                    (
                                    s
                                    )
                                    
                                    (
                                    by
                                    
                                    definition
                                    
                                    of
                                    
                                    ⊑
                                    )
                                    ⇔
                                    ∀
                                    s
                                    ∈
                                    dom
                                    (
                                    v
                                    )
                                    :
                                    (
                                    ∃
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    ∈
                                    dom
                                    (
                                    v
                                    )
                                    :
                                    〈
                                    s
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    〉
                                    ∈
                                    τ
                                    )
                                    ⇒
                                    
                                    ∀
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    ∈
                                    Σ
                                    :
                                    〈
                                    s
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    〉
                                    ∈
                                    τ
                                    ⇒
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    ∈
                                    dom
                                    (
                                    v
                                    )
                                    ∧
                                    v
                                    (
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    <
                                    v
                                    (
                                    s
                                    )
                                    
                                    (
                                    by
                                    
                                    definition
                                    
                                    of
                                    
                                    
                                       
                                          ϕ
                                       
                                       
                                          g
                                       
                                    
                                    [
                                    φ
                                    ]
                                    ,
                                    
                                    cf.Eq.
                                    
                                    
                                       (21)
                                    
                                    )
                                 
                              
                           Now, from Definition 6, 
                              v
                              :
                              Σ
                              ⇀
                              
                              O
                            is a ranking function. Thus, choosing 
                              I
                              ⊆
                              dom
                              (
                              v
                              )
                           , concludes the proof.


                           A program satisfies a recurrence property 
                           
                              □
                              ⋄
                              φ
                            
                           for all traces starting from a given set of states 
                           
                              I
                            
                           if and only if 
                           
                              I
                              ⊆
                              dom
                              (
                              
                                 
                                    τ
                                 
                                 
                                    r
                                 
                                 
                                    φ
                                 
                              
                              )
                           .

The proof follows from the dual of Park׳s Fixpoint Induction Principle [15] and from Theorem 2. More specifically, we have 
                              I
                              ⊆
                              dom
                              (
                              
                                 
                                    τ
                                 
                                 
                                    r
                                 
                                 
                                    φ
                                 
                              
                              )
                            if and only if 
                              ∃
                              v
                              :
                              Σ
                              ⇀
                              O
                              :
                              v
                              ⊑
                              
                                 
                                    τ
                                 
                                 
                                    r
                                 
                                 
                                    φ
                                 
                              
                              ∧
                              I
                              ⊆
                              dom
                              (
                              v
                              )
                           . Then we have 
                              
                                 
                                    v
                                    ⊑
                                    
                                       
                                          τ
                                       
                                       
                                          r
                                       
                                       
                                          φ
                                       
                                    
                                    ⇔
                                    v
                                    ⊑
                                    
                                       
                                          gfp
                                       
                                       
                                          
                                             
                                                τ
                                             
                                             
                                                g
                                             
                                          
                                          [
                                          φ
                                          ]
                                       
                                       
                                          ⊑
                                       
                                    
                                    
                                       
                                          ϕ
                                       
                                       
                                          r
                                       
                                    
                                    [
                                    φ
                                    ]
                                    
                                    (
                                    from
                                    
                                    Eqs.
                                    
                                    
                                       (34)
                                    
                                    
                                    and
                                    
                                    
                                       (33)
                                    
                                    )
                                    ⇔
                                    ∃
                                    
                                       
                                          v
                                       
                                       
                                          ′
                                       
                                    
                                    :
                                    Σ
                                    ⇀
                                    
                                    O
                                    :
                                    
                                       
                                          v
                                       
                                       
                                          ′
                                       
                                    
                                    ⊑
                                    
                                       
                                          τ
                                       
                                       
                                          g
                                       
                                    
                                    [
                                    φ
                                    ]
                                    ∧
                                    
                                       
                                          v
                                       
                                       
                                          ′
                                       
                                    
                                    ⊑
                                    
                                       
                                          ϕ
                                       
                                       
                                          r
                                       
                                    
                                    [
                                    φ
                                    ]
                                    (
                                    
                                       
                                          v
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    ∧
                                    v
                                    ⊑
                                    
                                       
                                          v
                                       
                                       
                                          ′
                                       
                                    
                                    
                                    (
                                    from
                                    
                                    the
                                    
                                    dual
                                    
                                    of
                                    
                                    Park׳s
                                    
                                    Fixpoint
                                    
                                    Induction
                                    
                                    Principle
                                    
                                    [
                                    15
                                    ]
                                    )
                                    ⇔
                                    v
                                    ⊑
                                    
                                       
                                          ϕ
                                       
                                       
                                          r
                                       
                                    
                                    [
                                    φ
                                    ]
                                    (
                                    v
                                    )
                                    ⊑
                                    
                                       
                                          τ
                                       
                                       
                                          g
                                       
                                    
                                    [
                                    φ
                                    ]
                                    
                                    (
                                    by
                                    
                                    definition
                                    
                                    of
                                    
                                    ⊑
                                    
                                    and
                                    
                                    choosing
                                    
                                    
                                       
                                          v
                                       
                                       
                                          ′
                                       
                                    
                                    =
                                    v
                                    )
                                    ⇔
                                    dom
                                    (
                                    v
                                    )
                                    ⊆
                                    dom
                                    (
                                    
                                       
                                          ϕ
                                       
                                       
                                          r
                                       
                                    
                                    [
                                    φ
                                    ]
                                    (
                                    v
                                    )
                                    )
                                    ⊆
                                    dom
                                    (
                                    
                                       
                                          τ
                                       
                                       
                                          g
                                       
                                    
                                    [
                                    φ
                                    ]
                                    )
                                    ∧
                                    ∀
                                    s
                                    ∈
                                    dom
                                    (
                                    v
                                    )
                                    :
                                    v
                                    (
                                    s
                                    )
                                    ≤
                                    
                                       
                                          ϕ
                                       
                                       
                                          r
                                       
                                    
                                    [
                                    φ
                                    ]
                                    (
                                    v
                                    )
                                    s
                                    ≤
                                    
                                       
                                          τ
                                       
                                       
                                          g
                                       
                                    
                                    [
                                    φ
                                    ]
                                    (
                                    s
                                    )
                                    
                                    (
                                    by
                                    
                                    definition
                                    
                                    of
                                    
                                    ⊑
                                    )
                                    ⇔
                                    ∀
                                    s
                                    ∈
                                    dom
                                    (
                                    v
                                    )
                                    :
                                    (
                                    ∃
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    ∈
                                    dom
                                    (
                                    v
                                    )
                                    :
                                    〈
                                    s
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    〉
                                    ∈
                                    τ
                                    )
                                    ⇒
                                    ∀
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    ∈
                                    Σ
                                    :
                                    〈
                                    s
                                    ,
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    〉
                                    ∈
                                    τ
                                    ⇒
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    ∈
                                    dom
                                    (
                                    v
                                    )
                                    ∧
                                    v
                                    (
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    ≤
                                    
                                       
                                          τ
                                       
                                       
                                          g
                                       
                                    
                                    [
                                    φ
                                    ]
                                    (
                                    
                                       
                                          s
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                    <
                                    v
                                    (
                                    s
                                    )
                                    ≤
                                    
                                       
                                          τ
                                       
                                       
                                          g
                                       
                                    
                                    [
                                    φ
                                    ]
                                    (
                                    s
                                    )
                                    
                                    (
                                    by
                                    
                                    definition
                                    
                                    of
                                    
                                    
                                       
                                          ϕ
                                       
                                       
                                          r
                                       
                                    
                                    [
                                    φ
                                    ]
                                    ,
                                    
                                    cf.
                                    
                                    Eq.
                                    
                                    
                                       (33)
                                    
                                    )
                                 
                              
                           Now, from Theorem 2 and Definition 6, 
                              v
                              :
                              Σ
                              ⇀
                              
                              O
                            is a ranking function. Thus, choosing 
                              I
                              ⊆
                              dom
                              (
                              v
                              )
                           , concludes the proof.□

@&#REFERENCES@&#

