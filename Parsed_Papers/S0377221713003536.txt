@&#MAIN-TITLE@&#A heuristic algorithm for the free newspaper delivery problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We model the problem of distributing free newspapers in an urban area.


                        
                        
                           
                           We highlights the peculiarities of the problem that makes it different from classical problems in the routing literature.


                        
                        
                           
                           We propose a two phase and a hybrid solution approach.


                        
                        
                           
                           We tested the approaches on a set of instances derived from real data.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Vehicle routing problem with time windows

Inventory routing

Production schedule

Metaheuristics

Hybrid methods

@&#ABSTRACT@&#


               
               
                  This paper addresses the problem of finding an effective distribution plan to deliver free newspapers from a production plant to subway, bus, or tram stations. The overall goal is to combine two factors: first, the free newspaper producing company wants to minimize the number of vehicle trips needed to distribute all newspapers produced at the production plant. Second, the company is interested in minimizing the time needed to consume all newspapers, i.e., the time needed to get all the newspapers taken by the final readers. The resulting routing problem combines aspects of the vehicle routing problem with time windows, the inventory routing problem, and additional constraints related to the production schedule. We propose a formulation and different heuristic approaches, as well as a hybrid method. Computational tests with real world data show that the hybrid method is the best in various problem settings.
               
            

@&#INTRODUCTION@&#

In the context of large public transport networks, free newspaper companies produce daily newspapers that public transport users (consumers) can read while commuting in the morning. Consumers take the newspapers for free from distribution boxes located at underground, tramway and bus stations, so advertisements are the only source of revenue for these companies. However, advertising rates depend on the market share of the free newspaper companies, such that the company with the highest number of daily consumed newspapers can charge the highest rates for its advertising space. It is therefore crucial for these companies to maximize their market share, as measured by their daily consumption, which in turn requires increased production (printing). However, the potential for consumption is not infinite, and newspapers must be present at the right place and right time to be consumed; otherwise, large quantities of printed newspapers remain unconsumed. For marketing reasons, the newspaper companies prefer to avoid unconsumed newspapers left in the boxes at the end of the day, which is likely to damage users’ opinions of the newspaper and possibly decrease its market share. Thus, the company deals with the trade-off between producing as many newspapers as possible while avoiding unconsumed newspapers at the end of the day. In practice, production aims to attain the level of a portion of the estimated demand, even if doing so runs the risk of stockouts, such that some portion of the demand will not be satisfied.

Consumer traffic at public transport stations is quite regular; most people go to work every day at the same time. Predictive consumption thus can be derived from traffic information. Stochasticity is not really an issue, as long as the consumers are used to seeing newspapers in the boxes and are always able to pick up newspapers if they so choose. If the boxes are alternately full and empty during the morning, consumers who want to pick up a copy but find an empty box lose interest in the long term. Therefore, it is a sensible policy to avoid temporary stockouts during the consumption period, to retain consumer interest in the long term and support high, predictable consumption.

The free newspapers arrive at the various public transport stations on vehicles that depart from the production factory. Because they want to maximize consumption, the newspaper companies provide interesting news to the readers and attempt to print the latest, most up-to-date stories. In this sense, newspapers are highly perishable, and the later a print run starts, the better. However, printing capabilities are limited, and the number of copies demanded can be quite high. In practice then, the delivery trips start while the printing is still continuing, and the companies must synchronize production at the factory with delivery trips. The vehicles must wait until the newspapers they are supposed to deliver are printed, and the trips have to be scheduled according to the production schedule.

Maximizing the profit of such a company is therefore a complex process with many decisions, including pricing, production scheduling, and combined routing and scheduling. For this study, we assume that decisions about pricing and printing already have been made and that the production schedule is a given. We thus can concentrate on the combined routing and scheduling problem. On the one hand, a tactical objective is to consume all produced newspapers as quickly as possible, which helps the company justify high advertising prices. On the other hand, the delivery trips are typically outsourced to a company that bills a fixed price for each trip, so minimizing the total number of trips required is an operational objective.

The contribution of this paper is twofold. First, we introduce a new problem, the Free Newspaper Delivery Problem (FNDP), that reflects a compelling trait of modern societies; we provide a mathematical model for this problem and study its peculiarities. Second, we propose solution techniques for the FNDP. These methods involve a decomposition, heuristic and exact approaches for the subproblems, as well as a hybrid method.

The remainder of this paper is organized as follows: In the next section, we give a more detailed description of the FNDP and the application we consider, which concerns a free newspaper company working in Vienna. In Section 3, we review publications dealing with problems that are related to the FNDP. After we discuss the peculiarities of the problem in Section 4, we present an extended formulation in Section 5. In Section 6 we describe the solution approaches we propose for the FNDP. Finally, computational tests on real data are presented in Section 7.

A central depot is given which corresponds to the production plant where the newspapers are produced and stored. The starting production time and the production rate are constant over time. Once the total amount of newspapers prescribed has been produced, production stops. The distribution of the newspapers to subway and tramway stations relies on a fleet of identical vehicles. Each vehicle can perform one or several trips; we define a trip as a tour that starts at the production plant (or depot), visits a certain number of stations, and returns to the production plant. Time gets consumed by vehicles when they travel from one station to another (travel time) and when they perform the deliveries (service time). Additionally, vehicles can wait at stations before performing a delivery (waiting time). Therefore the total duration of a trip is the sum of the total travel time, total service time, and total waiting time. The time at which the distribution starts is established and constant over time (and obviously later than the starting production time), and all the newspapers must be delivered within a fixed due time, typically fixed at 9:00 am, when the last demand peak occurs. The demand occuring after this last peak appears so small that it can be ignored. Thus, the time horizon spans from the start of the distribution operations to their end. The newspaper consumption rate is not stationary over time and space, meaning that it varies on the basis of the stations and on time. For example, central stations typically exhibit a higher consumption rate than suburb stations, and during the time horizon, consumption typically shows two peaks at 7:00 am and 9:00 am. At the stations, newspapers are stored in boxes with a given capacity, such that the number of boxes at a station indicates its total capacity. The goal is thus (i) to satisfy demand by distributing all the produced newspapers to the stations where they are actually consumed, as well as (ii) to minimize the number of vehicle trips used to deliver the newspapers.

Alternating between empty and full boxes can have a negative impact on consumer’s interest on the long term though and lead to lower and/or unpredictable consumption. The company rather wants to avoid alternating stockout and replenishment at each station, instead demand needs to be satisfied continuously, and stockout has to occur only once (at the end of the time horizon or even before). Once a station has incurred a stockout situation, it will not be replenished. In practice, the company plans its distribution on the basis of forecasted demands. Each station keeps receiving a quantity that is sufficient to cover the forecasted demand in each period until the deliveries stop. At this point, the station should face a stockout situation, though it does not necessarily occur at every station at the same time.

We now present the problem input as well as the resources available.

The fleet is homogeneous. Each vehicle performs only one route, but one route can be formed by a sequence of several consecutive trips. The capacity volume is fixed, but because the thickness of newspapers can change from day to day, vehicle capacity in terms of the number of newspapers carried also changes daily. Moreover, newspapers are grouped into batches with a set number of copies. Because the thickness of one newspaper copy can change, the volume of one batch also differs on a daily basis. These batches are the standard unit used in capacity measures in the following. Each station has a set of boxes, which may be of four types, each with different capacities. The number of boxes and their capacities determine the total capacity of a station. Some stations also offer the possibility of delivering newspapers outside of a box, such as leaving them on a table or a bench. These stations typically have a small demand, and an infinite capacity is assumed in such a case. The consumption rate changes for every (station, period) pair.

The planning horizon starts at 4:00 am and ends at 9:00 am, divided into periods (e.g., 10 periods of 30minutes). Consumption at the stations starts only after 5:00 am, and finishes at 9:00 am. Newspapers consumed at a given station at period t have to be delivered to this station within period t. All stations that are not visited during or before the first period of consumption (between 5:00 am and 5:30 am) enter stockout, such that their consumption is lost for the whole horizon. However, in the application considered herein, for contractual reasons, the company must serve each station at least once, so all stations will be served in the first period of consumption.

The central depot produces newspapers from 1:00 am to 7:00 am. It produces 40,000 newspapers per hour, and fresh production is only available at the end of the hour. For instance, nothing is available at 1:59 am, but 40,000 newspapers are available at 2:00 am. In practice, the distribution operations start at 4:00 am with an available stock of 120,000 newspapers. In total, 240,000 newspapers are produced; they must all be consumed by the end of the horizon, which is at 9:00 am.

It is important to notice that some stations need to be visited only once. These are typically small suburb stations, distant from the depot. Their capacity allows them to handle their total consumption over the whole horizon.

Moreover, newspapers thickness changes everyday and thus has an impact on capacity, both of the vehicles and at the stations. Thus, the problem differs from one day to another. We will focus on this daily problem and the need to organize the distribution operations of a single day.

To earn the maximum possible revenue from the advertisements placed in newspapers, the company must guarantee that, at the end of the day, no newspaper remains at the production plant (all newspapers are distributed) and no newspaper remains at the stations (all newspapers are consumed). This requirement has a direct consequence: The total daily production is not larger than the estimated total daily consumption (typically, it is lower). Furthermore, the company wants the newspapers to be consumed as soon as possible. It also wants to minimize the number of trips, because it pays a fixed fee for each trip.

The final objective considered by the company is composed by two terms. The primary objective is to minimize the time period at which all stations are subject to stockout, while the secondary objective is to minimize the total number of trips.

@&#LITERATURE REVIEW@&#

The FNDP combines aspects of vendor-managed inventory routing, distribution of perishable products, and combined production and distribution. Prior literature on inventory routing problems (IRPs) is abundant; we recommend the surveys by Bertazzi et al. [1] and Andersson et al. [2] for good introductions. To our knowledge, the FNDP has never been studied, although the following publications share some of its aspects. In particular, we are not aware of any research that combines the stockout constraints, the production schedule, and routes spanning several periods. The combination of these last two aspects presents an original challenge, as we discuss in Section 4. Here we focus on contributions related to the optimization of vendor-managed inventory problems, integrating both production and distribution aspects, as well as the concern about perishable products.

Hurter and Van Buer tackle the problem of delivering newspapers to private subscribers [3]. They present a case study of a company that produces various newspapers and distributes them to dropoff points, using the same fleet (these dropoff points actually are the starting points for last-mile delivery routes, which are not considered). Decisions include the production schedule and routing to the dropoff points; and the main constraint is that every dropoff point should be visited before 4:30 am, when the last-mile routes start. Demand at each dropoff point may consist of various quantities of different newspapers. Van Buer et al. [4] also work on this problem and add flexibility by allowing multiple trips per vehicle. Because each vehicle incurs a fixed cost, substantial gains are possible from a reduction in the number of trips. The authors develop various heuristics for this new version of the problem.

Russel et al. [5] deal with the synchronization of production and distribution of daily newspapers. In this multi-product problem the newspaper company produces different kinds of newspapers that must be distributed to targeted customers. The distribution phase must be synchronized with the production phase, because it starts when the production is still taking place. However, this problem is different from the FNDP as the demand of each customer can be satisfied in a single delivery and has no relation to the time the customer is served. Moreover, each vehicle makes a single trip from the production plant to the customers.

The production and delivery of a weekly newspaper in Brazil, as studied by Cunha and Mutarelli [6], involves several production facilities that must be selected from among the set of available facilities. Newspapers are then delivered from the selected facilities to so-called primary destinations, using single-customer routes that can be performed by either air freight or truck. This problem actually is a location problem with additional constraints, including assessing the proximity between the facility and primary destination and determining the minimum amount of products for opening a facility. The problem is formulated as a mixed integer linear program (MILP) and can be solved using Excel solver, with instances up to 6 facilities and 22 primary destinations.

Ahumada and Villalobos [7] tackle the tactical problem of planning the production and distribution of fresh products. The objective is to maximize the yearly profit of a large fresh products grower in Mexico. Notable features include distribution and inventory costs, product decay, price dynamics, and the possibility to grow certain products at certain times of the year. The proposed model is solved using a commercial MILP solver.

The problem of coordinating the production and distribution of products, not restricted to the class of perishable products, also has been studied by different authors.

Vidyarthi et al. [8] consider a multi-product, two-echelon, production and distribution problem, taking into account inventory-related constraints. A subset of plants has to be selected, at which production occurs. Then a subset of delivery centers (DCs) needs to be selected in turn. Products stored at these DCs ultimately get shipped to retailers. Pooling the inventory at the DCs prevents stockouts for the retailers. The authors propose a Lagrangean relaxation based on a strengthened formulation, as well as heuristics.

Bilgen and Günther [9] propose a model for optimizing the production and distribution of perishable products. The considered objective integrates costs for production, inventory holding, and distribution. The application of their proposed model uses a case study with 6 production lines, 19 product types, and 3 distribution centers, and they solve it using a commercial MILP solver.

Fumero and Vercellis [10] tackle the problem of synchronized production, inventory, and distribution schedules. In this multi-product IRP, the production schedule for each product is also a part of the decision process. Split deliveries within the same period are allowed. Production includes fixed and variable costs, such that it is a bad idea to produce every product at every period. The authors propose a MILP formulation, a Lagrangean relaxation, and a decomposition approach using heuristics, which they apply to solve instances with up to 8 periods, 10 products and 12 customers.

Chen and Vairaktarakis [11] study a combined production and routing problem. They take as examples the assembly of computers and food order preparation, which involve no stocking, no setup time or cost, and fixed production costs. The aim is to minimize routing costs while maximizing customer service, measured by the earliness of the deliveries; these two objectives are aggregated using a weighted sum. A route can only start when all its orders are ready, and preparing the orders consists of solving a parallel machines scheduling problem involving a set of jobs for each order. They provide polynomial algorithms for special cases and heuristics for the NP-hard general case.

Lei et al. [12] introduce an integrated production, inventory, and distribution routing problem (PIDRP), which essentially combines an IRP with a lot-sizing problem; multiple production facilities are considered. They propose a two-phase approach: In the first phase, the routing aspect is dismissed, and direct delivery is assumed. This stage leads to a new formulation, which can be solved using a MILP solver. From this solution, they generate a set of capacitated vehicle routing problems, one per facility, which can be solved using a heuristic. Using this two-phase approach, instances with 2 plants, 12 periods, and 13 demand centers are solved.

Bard and Nananukul [13] consider a single-facility, single-commodity PIDRP and use an approach similar in principle to that of Lei et al. [12] from which they produce a starting solution. This solution then can be improved using a neighborhood search. Instances with up to 200 customers and 20 periods are solved. In a more recent publication [14], the same authors present a branch-and-price procedure for the same problem, and they solve an instance with 6 periods and 50 demand centers, as well as another with 8 periods and 40 demand centers within an hour.

Boudia et al. [15] also solve a single-facility, single-commodity PIDRP, which includes setup costs for production, inventory holding costs, and routing costs. The authors present a GRASP algorithm, which they hybridize with path relinking, to solve the combined problem. Later, Boudia and Prins improve these results using a memetic algorithm with population management [16]. A similar problem has been studied by Archetti et al. [17], who propose a branch-and-cut procedure and a local search algorithm.

Savelsbergh and Song [18] introduce the IRP with continuous moves (IRP-CM), which to the best of our knowledge is the only periodic routing problem that includes routes spanning over several periods. The vehicles also may refill during the trip, at any of the several available facilities. They propose three greedy heuristic methods and a post-processing optimization of the delivery volumes. In a second paper [19], the same authors present a branch-and-cut method for this problem too.

Bolduc et al. [20] present the vehicle routing problem with production and demand calendars (VRPPDC). Similar to the FNDP, a schedule (or calendar) of production and demand is known in advance. The main aspects of the FNDP that do not appear in the VRPPDC are (i) routes spanning over several periods and (ii) the stockout constraints. However, some specific aspects of the VRPPDC include multiple products, the possibility of outsourcing deliveries (at cost) and holding costs at the delivery center. A tabu search procedure is proposed to solve the VRPPDC.

In the context of preliminary research on the FNDP, we already directed two master theses on related problems. Krapf [21] uses the same data as we did in this paper, but models the FNDP as a simpler problem, focusing on routing aspects. Krenbek [22] also uses the same data, and considers a similar (albeit relaxed) problem as ours. Her work has an emphasis on sensitivity analysis for determining policies.

Although we find no other existing work on the FNDP, many studies consider related problems and challenges. Yet, the production problems related to IRPs typically differ from those encountered in the FNDP, such that production typically is part of the decision process and has a cost. In our case, production occurs as quickly as possible though not quickly enough to ensure that every product is available from the beginning of the horizon. This situation creates a concern, because many stations face stockouts early in their schedule due to limitations in the product available. We also note that other than works by Savelsbergh and Song [18,19], no studies address the multi-period routing problems when routes span over several periods. Therefore, we specify the unique characteristics of the FNDP in the next section.

The FNDP represents a routing problem with specific characteristics that prevent it from being classified into the classes of routing problems already known in prior literature. The main peculiarities that complicate the organization of the distribution plan are the coordination between production and distribution and the management of time periods. The production rate indicates the total amount of newspapers available at the end of each release cycle; in this case a release cycle is a production cycle that corresponds to a duration of 1hour. However, each vehicle trip can last more than one release cycle. Thus, suppose that a trip starts from the depot at 5:00 am and visits the last station at 6:30 am. Clearly, the quantity delivered by the trip has to be feasible with respect to the production available at 5:00 am, even if at 6:00 am a fresh production batch becomes available. This limitation creates several problems for building solution approaches based on classical insertion or removal moves, as Example 4.1 details.
                        Example 4.1
                        Consider an insertion move for which we have a vehicle trip and we want to insert a new station into it. The trip starts at 5:00 am and ends at 7:00 am; we want to insert the new station at the end of the trip (visiting the station in the time period between 7:00 am and 7:30 am). The available stock at the production plant is given in Fig. 1
                           . At 5:00 am, 160,000 newspapers have been produced, of which 158,000 have already been distributed by trips starting before 6:00 am. Thus, a maximum of 2000 newspapers can be delivered to the new station. However, the stock available at production plant at time 6:00 am is less than 2000 newspapers, because 200,000 newspapers have been produced, of which 158,000 has been delivered by trips starting before 6:00 am, and 41,000 are delivered by trips scheduled to start at 6:00 am. Thus, the available stock at 6:00 am is 1000 newspapers. To overcome the stockout situation, one possibility is to serve the new station with a route starting at 7:00 am, when the stock available at the production plant is 20,000 newspapers.

To evaluate an insertion move, we first have to consider its feasibility with respect to the available stock at the production plant, over time. As this example clearly shows, long trips are good for minimizing the total number of trips, but they also should be avoided because they “anticipate” future consumption, reducing the stock available for deliveries that must be made within the release cycle and tightening stockout constraints at the production plant.

In this section we give an extended formulation of the FNDP, though we start by introducing some notations. The following mathematical model is based on the assumption that each station can be visited at most once in each time period.
                        
                           
                              
                              
                              
                                 
                                    
                                       Notation
                                    
                                 
                                 
                                    
                                       
                                          
                                             C
                                          
                                       
                                    
                                    set of stations
                                 
                                 
                                    
                                       H
                                    
                                    end of the time horizon, corresponding to the end of delivery operations. The final inventory level at each station is evaluated at time H
                                       +1. Note that H
                                       +1 does not correspond to the period that immediately follows the end of the delivery operations. It rather corresponds to the end of consumption; we call it H
                                       +1 for the ease of notation
                                 
                                 
                                    
                                       
                                          
                                             T
                                             =
                                             {
                                             t
                                             =
                                             1
                                             ,
                                             …
                                             ,
                                             H
                                             }
                                          
                                       
                                    
                                    set of delivery periods
                                 
                                 
                                    
                                       
                                          
                                             R
                                          
                                       
                                    
                                    set of all feasible trips
                                 
                                 
                                    
                                       d
                                       
                                          it
                                       
                                    
                                    consumption rate of station i at time period 
                                          
                                             t
                                             ,
                                             
                                             i
                                             ∈
                                             C
                                             ,
                                             
                                             t
                                             ∈
                                             T
                                          
                                       
                                    
                                 
                                 
                                    
                                       p
                                       
                                          t
                                       
                                    
                                    production rate at the plant for time period t
                                    
                                 
                                 
                                    
                                       σ
                                       
                                          irt
                                       
                                    
                                    equal to 1 if trip r visits station i at period 
                                          
                                             t
                                             ,
                                             
                                             r
                                             ∈
                                             R
                                             ,
                                             
                                             i
                                             ∈
                                             C
                                             ,
                                             
                                             t
                                             ∈
                                             T
                                          
                                       
                                    
                                 
                                 
                                    
                                       δ
                                       
                                          rt
                                       
                                    
                                    equal to 1 if trip r leaves from the depot at period 
                                          
                                             t
                                             ,
                                             
                                             r
                                             ∈
                                             R
                                             ,
                                             
                                             t
                                             ∈
                                             T
                                          
                                       
                                    
                                 
                                 
                                    
                                       K
                                       
                                          i
                                       
                                    
                                    capacity limit of station 
                                          
                                             i
                                             ,
                                             
                                             i
                                             ∈
                                             C
                                          
                                       
                                    
                                 
                                 
                                    
                                       Q
                                    
                                    vehicle capacity
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   B
                                                
                                                
                                                   ¯
                                                
                                             
                                          
                                       
                                    
                                    inventory level at period t
                                       =1 at the production plant
                                 
                                 
                                    
                                       P
                                    
                                    total quantity produced at the plant
                                 
                                 
                                    
                                       
                                    
                                 
                                 
                                    
                                       Decision variables
                                    
                                 
                                 
                                    
                                       z
                                       
                                          r
                                       
                                    
                                    binary variable equal to 1 if trip r is used, 
                                          
                                             r
                                             ∈
                                             R
                                          
                                       
                                    
                                 
                                 
                                    
                                       q
                                       
                                          r
                                       
                                    
                                    quantity delivered by trip 
                                          
                                             r
                                             ,
                                             
                                             r
                                             ∈
                                             R
                                          
                                       
                                    
                                 
                                 
                                    
                                       x
                                       
                                          irt
                                       
                                    
                                    quantity delivered at station i at period t by trip 
                                          
                                             r
                                             ,
                                             
                                             i
                                             ∈
                                             C
                                             ,
                                             
                                             t
                                             ∈
                                             T
                                             ,
                                             
                                             r
                                             ∈
                                             R
                                          
                                       
                                    
                                 
                                 
                                    
                                       I
                                       
                                          it
                                       
                                    
                                    inventory level at station i at period 
                                          
                                             t
                                             ,
                                             
                                             i
                                             ∈
                                             C
                                             ,
                                             
                                             t
                                             =
                                             1
                                             ,
                                             …
                                             ,
                                             H
                                             +
                                             1
                                          
                                       
                                    
                                 
                                 
                                    
                                       B
                                       
                                          t
                                       
                                    
                                    inventory level at the plant at period t, t
                                       =1,…,
                                       H
                                       +1
                                 
                                 
                                    
                                       S
                                       
                                          it
                                       
                                    
                                    binary variable equal to 1 if inventory level at period t at station i is enough to cover the corresponding demand, 0 otherwise
                                 
                                 
                                    
                                       S
                                       
                                          t
                                       
                                    
                                    binary variable equal to 1 if 
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   ∈
                                                   C
                                                
                                             
                                             
                                                
                                                   S
                                                
                                                
                                                   it
                                                
                                             
                                             >
                                             0
                                          
                                       , 0 otherwise
                                 
                              
                           
                        
                     
                  


                     Formulation
                  

The FNDP is as follows:
                        
                           (1)
                           
                              min
                              
                              α
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       t
                                       ∈
                                       T
                                    
                                 
                              
                              
                                 
                                    S
                                 
                                 
                                    t
                                 
                              
                              +
                              β
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       r
                                       ∈
                                       R
                                    
                                 
                              
                              
                                 
                                    z
                                 
                                 
                                    r
                                 
                              
                           
                        
                     
                     
                        
                           (2)
                           
                              
                                 
                                    I
                                 
                                 
                                    it
                                    +
                                    1
                                 
                              
                              =
                              
                                 
                                    I
                                 
                                 
                                    it
                                 
                              
                              +
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       r
                                       ∈
                                       R
                                    
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    irt
                                 
                              
                              -
                              
                                 
                                    d
                                 
                                 
                                    it
                                 
                              
                              
                              i
                              ∈
                              C
                              
                              t
                              =
                              1
                              ,
                              …
                              ,
                              H
                           
                        
                     
                     
                        
                           (3)
                           
                              
                                 
                                    B
                                 
                                 
                                    t
                                    +
                                    1
                                 
                              
                              =
                              
                                 
                                    B
                                 
                                 
                                    t
                                 
                              
                              +
                              
                                 
                                    p
                                 
                                 
                                    t
                                 
                              
                              -
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       r
                                       ∈
                                       R
                                    
                                 
                              
                              
                                 
                                    δ
                                 
                                 
                                    rt
                                 
                              
                              
                                 
                                    q
                                 
                                 
                                    r
                                 
                              
                              
                              t
                              =
                              1
                              ,
                              …
                              ,
                              H
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    B
                                 
                                 
                                    H
                                    +
                                    1
                                 
                              
                              =
                              0
                           
                        
                     
                     
                        
                           (5)
                           
                              
                                 
                                    B
                                 
                                 
                                    1
                                 
                              
                              =
                              
                                 
                                    B
                                 
                                 
                                    ¯
                                 
                              
                           
                        
                     
                     
                        
                           (6)
                           
                              
                                 
                                    I
                                 
                                 
                                    it
                                 
                              
                              ⩽
                              
                                 
                                    K
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    S
                                 
                                 
                                    it
                                 
                              
                              
                              i
                              ∈
                              C
                              
                              t
                              =
                              1
                              ,
                              …
                              ,
                              H
                              +
                              1
                           
                        
                     
                     
                        
                           (7)
                           
                              
                                 
                                    I
                                 
                                 
                                    it
                                 
                              
                              ⩾
                              -
                              Δ
                              (
                              1
                              -
                              
                                 
                                    S
                                 
                                 
                                    it
                                 
                              
                              )
                              
                              i
                              ∈
                              C
                              
                              t
                              =
                              1
                              ,
                              …
                              ,
                              H
                              +
                              1
                           
                        
                     
                     
                        
                           (8)
                           
                              
                                 
                                    I
                                 
                                 
                                    i
                                    1
                                 
                              
                              =
                              0
                              
                              i
                              ∈
                              C
                           
                        
                     
                     
                        
                           (9)
                           
                              
                                 
                                    I
                                 
                                 
                                    iH
                                    +
                                    1
                                 
                              
                              ⩽
                              0
                              
                              i
                              ∈
                              C
                           
                        
                     
                     
                        
                           (10)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       r
                                       ∈
                                       R
                                    
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    irt
                                 
                              
                              ⩽
                              
                                 
                                    K
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    S
                                 
                                 
                                    it
                                 
                              
                              
                              i
                              ∈
                              C
                              
                              t
                              =
                              2
                              ,
                              …
                              ,
                              H
                           
                        
                     
                     
                        
                           (11)
                           
                              
                                 
                                    q
                                 
                                 
                                    r
                                 
                              
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       ∈
                                       C
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       t
                                       ∈
                                       T
                                    
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    irt
                                 
                              
                              
                              r
                              ∈
                              R
                           
                        
                     
                     
                        
                           (12)
                           
                              
                                 
                                    q
                                 
                                 
                                    r
                                 
                              
                              ⩽
                              
                                 
                                    Qz
                                 
                                 
                                    r
                                 
                              
                              
                              r
                              ∈
                              R
                           
                        
                     
                     
                        
                           (13)
                           
                              
                                 
                                    x
                                 
                                 
                                    irt
                                 
                              
                              ⩽
                              
                                 
                                    K
                                 
                                 
                                    i
                                 
                              
                              
                                 
                                    σ
                                 
                                 
                                    irt
                                 
                              
                              
                                 
                                    z
                                 
                                 
                                    r
                                 
                              
                              
                              i
                              ∈
                              C
                              
                              t
                              ∈
                              T
                              
                              r
                              ∈
                              R
                           
                        
                     
                     
                        
                           (14)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       i
                                       ∈
                                       C
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       r
                                       ∈
                                       R
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       t
                                       ∈
                                       T
                                    
                                 
                              
                              
                                 
                                    x
                                 
                                 
                                    irt
                                 
                              
                              =
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       r
                                       ∈
                                       R
                                    
                                 
                              
                              
                                 
                                    q
                                 
                                 
                                    r
                                 
                              
                              =
                              P
                           
                        
                     
                     
                        
                           (15)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       r
                                       ∈
                                       R
                                    
                                 
                              
                              
                                 
                                    σ
                                 
                                 
                                    irt
                                 
                              
                              
                                 
                                    z
                                 
                                 
                                    r
                                 
                              
                              
                              ⩽
                              1
                              
                              i
                              ∈
                              C
                              
                              t
                              ∈
                              T
                           
                        
                     
                     
                        
                           (16)
                           
                              
                                 
                                    S
                                 
                                 
                                    i
                                    ,
                                    t
                                    -
                                    1
                                 
                              
                              
                              ⩾
                              
                                 
                                    S
                                 
                                 
                                    it
                                 
                              
                              
                              i
                              ∈
                              C
                              
                              t
                              =
                              2
                              ,
                              …
                              ,
                              H
                              +
                              1
                           
                        
                     
                     
                        
                           (17)
                           
                              
                                 
                                    S
                                 
                                 
                                    t
                                 
                              
                              ⩾
                              
                                 
                                    S
                                 
                                 
                                    it
                                 
                              
                              
                              i
                              ∈
                              C
                              
                              t
                              =
                              1
                              ,
                              …
                              ,
                              H
                              +
                              1
                           
                        
                     
                     
                        
                           (18)
                           
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       r
                                       ∈
                                       R
                                    
                                 
                              
                              
                                 
                                    
                                       ∑
                                    
                                    
                                       t
                                       ∈
                                       T
                                    
                                 
                              
                              
                                 
                                    σ
                                 
                                 
                                    irt
                                 
                              
                              
                                 
                                    z
                                 
                                 
                                    r
                                 
                              
                              ⩾
                              1
                              
                              i
                              ∈
                              C
                           
                        
                     
                     
                        
                           (19)
                           
                              
                                 
                                    z
                                 
                                 
                                    r
                                 
                              
                              ∈
                              {
                              0
                              ;
                              1
                              }
                              
                              r
                              ∈
                              R
                           
                        
                     
                     
                        
                           (20)
                           
                              
                                 
                                    S
                                 
                                 
                                    it
                                 
                              
                              ∈
                              {
                              0
                              ;
                              1
                              }
                              
                              i
                              ∈
                              C
                              
                              t
                              =
                              1
                              ,
                              …
                              ,
                              H
                              +
                              1
                           
                        
                     
                     
                        
                           (21)
                           
                              
                                 
                                    q
                                 
                                 
                                    r
                                 
                              
                              ⩾
                              0
                              
                              r
                              ∈
                              R
                           
                        
                     
                     
                        
                           (22)
                           
                              
                                 
                                    x
                                 
                                 
                                    irt
                                 
                              
                              ⩾
                              0
                              
                              i
                              ∈
                              C
                              
                              t
                              ∈
                              T
                              
                              r
                              ∈
                              R
                           
                        
                     
                     
                        
                           (23)
                           
                              
                                 
                                    B
                                 
                                 
                                    t
                                 
                              
                              ⩾
                              0
                              
                              t
                              =
                              1
                              ,
                              …
                              ,
                              H
                              +
                              1
                           
                        
                     
                  

In the formulation, α and β are weights given to the different components of the objective function, and Δ is a big constant.

The objective function (1) is the combination of the two objectives. On the one hand, we want to get rid of all newspapers delivered and consumed as soon as possible. On the other hand, we want to minimize the number of trips needed to distribute all newspapers from the production plant to the subway stations. To ensure that the primary objective – the minimization of the time period during which stockouts occur – gets optimized first, we must set α and β properly. The decomposition approach developed in the following sections optimizes the two objectives one after the other, following their relative importance, and never allow the primary objective value to degrade. A direct result is that our solution methods only consider solutions that are optimal with respect to the primary objective; therefore, finding appropriate values for α and β does not really matter in the context of this study.

Constraints (2) and (3) define the inventory level at the stations and at the production plant, respectively. Constraint (4) assures that all newspapers are delivered within the end of the time horizon while (5) defines the starting inventory level at the production plant. Constraints (6) define the capacity limit at each station. Constraints (7) force the S
                     
                        it
                      variables to take value 0 if the inventory level at station i and period t is negative. Inequalities (8) define the starting inventory level at each station while (9) impose that all newspapers are consumed by the end of the time horizon. Constraints (10) assure that no newspaper is delivered to a station that is in a stockout situation. Constraints (11) define the vehicle loads while (12) are vehicle capacity constraints. The link between the x and z variables is defined in (13). Constraint (14) imposes that all newspapers produced have to be delivered while (15) establishes that each station can be visited at most once in each time period. Constraints (16) enforce that stockout only happens once and forever at each station. Constraints (17) state that “global” stockout occurs if stockout occurs at each station. Constraints (18) enforce that every station has at least one delivery. Finally, (19)–(23) are variables definition. In the following, we will call formulation (1)–(23) the trip-based model.

This model can be changed easily to take into account waiting time of the vehicles between two consecutive trips and stockout costs.

Note that the trip-based model has an exponential number of variables and thus cannot be solved explicitly. However, our aim is not to solve the model exactly (and thus find the optimal solution to the FNDP) but instead to use it to solve subproblems as a procedure embedded in the heuristic algorithm, as described in the next section.

Considering the high complexity of the problem, we propose a decomposition approach that solves the FNDP in two phases. In the first phase, a delivery plan is created, i.e., the quantities to be delivered to each station in each time period are determined but the routing part is not treated. The goal of the first phase is to optimize the first objective, i.e., minimize the period during which all stations incur a stockout situation. The delivery plan is then fixed, and the resulting routing problem can be solved in the second phase. The problem resulting in the second phase is a variant of the vehicle routing problem with time windows (VRPTW) where time windows are defined by the beginning and ending of each time period. The problem is complicated by the peculiarities shown in Section 4 (in relation to the production schedule). If a station is visited multiple times on the delivery plan, then it will be replicated and associated with several different stations in the VRPTW instance. We describe each phase in detail.

We first propose a mathematical formulation for the problem of determining a delivery plan that minimizes the stockout period. Let us introduce the following decision variables:
                           
                              •
                              
                                 x
                                 
                                    it
                                 : quantity delivered to station i at period 
                                    
                                       t
                                       ,
                                       
                                       i
                                       ∈
                                       C
                                       ,
                                       
                                       t
                                       ∈
                                       T
                                    
                                 .


                                 b
                                 
                                    it
                                 : binary variable equal to 1 if a delivery to station i takes place at period t, 0 otherwise; 
                                    
                                       i
                                       ∈
                                       C
                                       ,
                                       
                                       t
                                       ∈
                                       T
                                    
                                 .

The delivery plan creation problem is as follows:
                           
                              (24)
                              
                                 min
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          t
                                          ∈
                                          T
                                       
                                    
                                 
                                 
                                    
                                       S
                                    
                                    
                                       t
                                    
                                 
                              
                           
                        
                        
                           
                              (25)
                              
                                 
                                    
                                       I
                                    
                                    
                                       it
                                       +
                                       1
                                    
                                 
                                 =
                                 
                                    
                                       I
                                    
                                    
                                       it
                                    
                                 
                                 +
                                 
                                    
                                       x
                                    
                                    
                                       it
                                    
                                 
                                 -
                                 
                                    
                                       d
                                    
                                    
                                       it
                                    
                                 
                                 
                                 i
                                 ∈
                                 C
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 H
                              
                           
                        
                        
                           
                              (26)
                              
                                 
                                    
                                       B
                                    
                                    
                                       t
                                       +
                                       1
                                    
                                 
                                 =
                                 
                                    
                                       B
                                    
                                    
                                       t
                                    
                                 
                                 +
                                 
                                    
                                       p
                                    
                                    
                                       t
                                    
                                 
                                 -
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          C
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       it
                                    
                                 
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 H
                              
                           
                        
                        
                           
                              (27)
                              
                                 
                                    
                                       B
                                    
                                    
                                       H
                                       +
                                       1
                                    
                                 
                                 =
                                 0
                              
                           
                        
                        
                           
                              (28)
                              
                                 
                                    
                                       B
                                    
                                    
                                       1
                                    
                                 
                                 =
                                 
                                    
                                       B
                                    
                                    
                                       ¯
                                    
                                 
                              
                           
                        
                        
                           
                              (29)
                              
                                 
                                    
                                       I
                                    
                                    
                                       it
                                    
                                 
                                 ⩽
                                 
                                    
                                       K
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       S
                                    
                                    
                                       it
                                    
                                 
                                 
                                 i
                                 ∈
                                 C
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 H
                                 +
                                 1
                              
                           
                        
                        
                           
                              (30)
                              
                                 
                                    
                                       I
                                    
                                    
                                       it
                                    
                                 
                                 
                                 ⩾
                                 -
                                 Δ
                                 (
                                 1
                                 -
                                 
                                    
                                       S
                                    
                                    
                                       it
                                    
                                 
                                 )
                                 
                                 i
                                 ∈
                                 C
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 H
                                 +
                                 1
                              
                           
                        
                        
                           
                              (31)
                              
                                 
                                    
                                       I
                                    
                                    
                                       i
                                       1
                                    
                                 
                                 =
                                 0
                                 
                                 i
                                 ∈
                                 C
                              
                           
                        
                        
                           
                              (32)
                              
                                 
                                    
                                       I
                                    
                                    
                                       iH
                                       +
                                       1
                                    
                                 
                                 ⩽
                                 0
                                 
                                 i
                                 ∈
                                 C
                              
                           
                        
                        
                           
                              (33)
                              
                                 
                                    
                                       x
                                    
                                    
                                       it
                                    
                                 
                                 ⩽
                                 
                                    
                                       K
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       S
                                    
                                    
                                       it
                                    
                                 
                                 
                                 i
                                 ∈
                                 C
                                 
                                 t
                                 =
                                 2
                                 ,
                                 …
                                 ,
                                 H
                              
                           
                        
                        
                           
                              (34)
                              
                                 
                                    
                                       S
                                    
                                    
                                       i
                                       ,
                                       t
                                       -
                                       1
                                    
                                 
                                 ⩾
                                 
                                    
                                       S
                                    
                                    
                                       it
                                    
                                 
                                 
                                 i
                                 ∈
                                 C
                                 
                                 t
                                 =
                                 2
                                 ,
                                 …
                                 ,
                                 H
                                 +
                                 1
                              
                           
                        
                        
                           
                              (35)
                              
                                 
                                    
                                       S
                                    
                                    
                                       t
                                    
                                 
                                 ⩾
                                 
                                    
                                       S
                                    
                                    
                                       it
                                    
                                 
                                 
                                 i
                                 ∈
                                 C
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 H
                                 +
                                 1
                              
                           
                        
                        
                           
                              (36)
                              
                                 
                                    
                                       x
                                    
                                    
                                       it
                                    
                                 
                                 ⩽
                                 Δ
                                 
                                 *
                                 
                                 
                                    
                                       b
                                    
                                    
                                       it
                                    
                                 
                                 
                                 i
                                 ∈
                                 C
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 H
                              
                           
                        
                        
                           
                              (37)
                              
                                 
                                    
                                       x
                                    
                                    
                                       it
                                    
                                 
                                 
                                 ⩾
                                 
                                    
                                       b
                                    
                                    
                                       it
                                    
                                 
                                 
                                 i
                                 ∈
                                 C
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 H
                              
                           
                        
                        
                           
                              (38)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          t
                                          ∈
                                          T
                                       
                                    
                                 
                                 
                                    
                                       b
                                    
                                    
                                       it
                                    
                                 
                                 ⩾
                                 1
                                 
                                 i
                                 ∈
                                 C
                              
                           
                        
                        
                           
                              (39)
                              
                                 
                                    
                                       x
                                    
                                    
                                       it
                                    
                                 
                                 ⩾
                                 0
                                 
                                 i
                                 ∈
                                 C
                                 
                                 t
                                 ∈
                                 T
                              
                           
                        
                        
                           
                              (40)
                              
                                 
                                    
                                       B
                                    
                                    
                                       t
                                    
                                 
                                 ⩾
                                 0
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 H
                                 +
                                 1
                              
                           
                        
                        
                           
                              (41)
                              
                                 
                                    
                                       b
                                    
                                    
                                       it
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ;
                                 1
                                 }
                                 
                                 i
                                 ∈
                                 C
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 H
                              
                           
                        
                        
                           
                              (42)
                              
                                 
                                    
                                       S
                                    
                                    
                                       it
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ;
                                 1
                                 }
                                 
                                 i
                                 ∈
                                 C
                                 
                                 t
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 H
                                 +
                                 1
                              
                           
                        
                     

The solution of the delivery plan creation problem gives an optimal delivery plan with respect to the first objective, i.e., consuming all newspapers as soon as possible. The delivery plan establishes the quantities to be delivered to each station at each period. This solution constitutes the instance of the variant of the VRPTW, which is then solved in the second phase as described in Section 6.2.

We next analyze the computational complexity of the delivery plan creation problem.
                           Theorem 6.1
                           
                              The delivery plan creation problem is NP-hard.
                           

By reduction from the Knapsack problem (KP). Let us first define the KP.
                                 
                                    INSTANCE: A capacity C, a finite set I of items, for each item i
                                       ∈
                                       I a positive weight w
                                       
                                          i
                                       
                                       ⩽
                                       B and a positive profit s
                                       
                                          i
                                       , K
                                       ⩾0.

QUESTION: Is there a subset I′⊆
                                       I such that 
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   ∈
                                                   
                                                      
                                                         I
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             
                                             w
                                             (
                                             i
                                             )
                                             ⩽
                                             C
                                          
                                        and 
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   ∈
                                                   
                                                      
                                                         I
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                
                                             
                                             p
                                             (
                                             i
                                             )
                                             ⩾
                                             K
                                          
                                       ?

Let us consider an instance of the KP. We now associate to this instance an instance of the delivery plan creation problem constructed as follows. Let H
                              >3 and 
                                 
                                    |
                                    C
                                    |
                                    =
                                    |
                                    I
                                    |
                                 
                              . Moreover, for each 
                                 
                                    i
                                    ∈
                                    C
                                    ,
                                    
                                    
                                       
                                          K
                                       
                                       
                                          i
                                       
                                    
                                    =
                                    +
                                    ∞
                                    ,
                                    
                                    
                                       
                                          d
                                       
                                       
                                          i
                                          1
                                       
                                    
                                    =
                                    1
                                    ,
                                    
                                    
                                       
                                          d
                                       
                                       
                                          i
                                          2
                                       
                                    
                                    =
                                    
                                       
                                          w
                                       
                                       
                                          i
                                       
                                    
                                    ,
                                    
                                    
                                       
                                          d
                                       
                                       
                                          i
                                          3
                                       
                                    
                                    =
                                    
                                       
                                          s
                                       
                                       
                                          i
                                       
                                    
                                 
                               and d
                              
                                 it
                              
                              =0 for t
                              >3. Finally, 
                                 
                                    
                                       
                                          B
                                       
                                       
                                          ¯
                                       
                                    
                                    =
                                    0
                                    ,
                                    
                                    
                                       
                                          p
                                       
                                       
                                          1
                                       
                                    
                                    =
                                    |
                                    I
                                    |
                                    ,
                                    
                                    
                                       
                                          p
                                       
                                       
                                          2
                                       
                                    
                                    =
                                    C
                                    ,
                                    
                                    
                                       
                                          p
                                       
                                       
                                          3
                                       
                                    
                                    =
                                    K
                                 
                               and p
                              
                                 t
                              
                              =0 for t
                              >3. Note that any feasible solution to the delivery plan creation problem has an objective value which is not lower than 3. In particular, 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          t
                                          ∈
                                          T
                                       
                                    
                                    
                                       
                                          S
                                       
                                       
                                          t
                                       
                                    
                                    =
                                    3
                                 
                               if and only if all newspapers are distributed and consumed within t
                              =3. Now, at period t
                              =1 all stations are visited and the entire production p
                              1 is consumed. At period t
                              =2 the maximum amount of newspapers that can be distributed is equal to p
                              2
                              =
                              C. Since the objective is to minimize 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          t
                                          ∈
                                          T
                                       
                                    
                                    
                                       
                                          S
                                       
                                       
                                          t
                                       
                                    
                                 
                               and 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          C
                                       
                                    
                                    
                                       
                                          d
                                       
                                       
                                          i
                                          2
                                       
                                    
                                    >
                                    C
                                 
                               (otherwise the solution of the KP is trivial), then all newspapers produced at period t
                              =2 are distributed at t
                              =2. However, not all stations can be entirely served in t
                              =2 (as 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          C
                                       
                                    
                                    
                                       
                                          d
                                       
                                       
                                          i
                                          2
                                       
                                    
                                    >
                                    C
                                 
                              ). Those stations which receive a quantity which is lower than d
                              
                                 i2 will have a stockout and thus cannot be served any more. Thus, in order to be able to distribute all newspapers produced at period t
                              =3 (which are equal to K), it is necessary to select at period t
                              =2 a subset 
                                 
                                    
                                       
                                          C
                                       
                                       
                                          ′
                                       
                                    
                                 
                               of stations to be entirely served such that 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          
                                             
                                                C
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                    
                                       
                                          d
                                       
                                       
                                          i
                                          2
                                       
                                    
                                    ⩽
                                    C
                                 
                               and 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          
                                             
                                                C
                                             
                                             
                                                ′
                                             
                                          
                                       
                                    
                                    
                                       
                                          d
                                       
                                       
                                          i
                                          3
                                       
                                    
                                    ⩾
                                    K
                                 
                              . Thus, the KP has a “yes” answer if and only if the delivery plan creation problem has an optimal solution equal to 3. □

The delivery plan creation problem can be solved easily by a standard commercial solver: in fact, it can be solved to optimality within a few seconds even for the largest instances considered in our computational tests (212 stations, 10 periods). However, no particular care is given to producing a delivery plan that will generate a routing solution with few trips. Rather, it is likely that the solution of the delivery plan creation problem results in a routing problem that requires many trips, because the only objective is to have stockout everywhere as early as possible.

Note that typically there are many optimal solutions to the delivery plan creation problem. The delivery plan creation model (24)–(42) cannot distinguish among them. However, they can differ greatly in terms of the routing solution they generate. Thus, we decided to focus the attention on the solution of the delivery plan creation problem with minimum deliveries, that is, the problem in which we minimize the latest stockout period and the number of deliveries. The rationale is that fewer deliveries helps identify a routing solution with fewer trips. The problem becomes a multi-objective problem, and its solution is much more difficult than the solution of the delivery plan creation problem. Thus, we decided to solve it through heuristic methods.

One possibility would be to apply a local search procedure to the delivery plan produced by the solution of the delivery plan creation problem. However, we prefer to focus on construction heuristics, because the constraints of the delivery plan creation model (24)–(42) are so tight that it is difficult to modify a solution without making it infeasible. We use the information obtained from the optimal solution of the delivery plan creation problem and look for a different solution with the same objective value, i.e., the latest stockout period, but with fewer deliveries.

Before presenting the heuristic algorithms we implemented, we discuss the difficulty of building a delivery plan that minimizes the latest stockout time and the number of deliveries. The production plant produces newspapers in big buckets (40,000 newspapers per bucket), and the newspapers are available only when the entire bucket is produced. We define a product release as the end of a bucket production, when the corresponding quantity of newspapers is available to be distributed. A major difficulty lies in the stockout constraints: at any given period, there might be not enough product available at the factory to make deliveries to every station, so stockouts occur earlier at some stations than others, and we must decide which ones. However, once stockout occurs at a station, this station cannot be used to consume the product that is released later; so we should not let stockout occur at a station with late high consumption.

To overcome this problem, a first policy is to deliver to each station as few products as possible so that the next product release is reached without stockout at any station. This approach leads to delaying stockout at each station as much as possible, but it results in an increased number of deliveries, which means that the routing solution will require more trips. Moreover, at a given product release, it is not guaranteed that enough product is available to support this policy. Another option is to select a subset of stations at which stockout will occur as late as possible and schedule large deliveries to these stations. This method will minimize the number of deliveries, thus allowing for a routing problem that involves fewer trips. However, it is not trivial to find a set of stations that feasibly permits the consumption of all products before a specified period (in our case, the stockout period given by the optimal solution of the delivery plan creation problem).

Thus neither policy guarantees an easy path to finding a feasible plan, mostly because of the conjunction of product availability and stockout constraints. The first rather focuses on feasibility, whereas the second focuses more on decreasing routing costs.

We now present three constructive heuristics, DP0, DP1, and DP2, each based on both policies. They are also based on the idea that if we want to obtain a routing solution with few trips, then we should produce a delivery plan with as few deliveries as possible. This is especially true in our case, because of the presence of time windows. Vehicle capacity is typically not an issue when delivering newspapers though, so scheduling large deliveries has no negative impact on the number of vehicles (trips) required. We define DP0 as the basic heuristic procedure, whereas DP1 and DP2 feature slight modifications to DP0. Thus, we first give a description of DP0.

The initialization phase sets all x
                           
                              it
                            variables to 0 while the values of variables I
                           
                              it
                            is calculated according to constraints (25). Similarly, all B
                           
                              t
                            variables are calculated according to constraints (26).

Because each station must be visited at least once, the first step of the algorithm is to insert a visit to each station. In order to avoid immediate stockout, every station has to be visited before consumption begins. Let us denote as b the period at which consumption starts. As typically b is greater than 1, there is a flexibility regarding the period of the first delivery to each station. We exploit it as follows: All stations are sorted according to their distance to the depot and divided into b groups of equal size. The first group receives its first delivery at period t
                           =1, the second group at t
                           =2, and so on, until t
                           =
                           b. For a given station i, we define the period of the first delivery as ϕ
                           
                              i
                           .

The heuristic DP0 makes intensive use of the subroutine addNextDelivery(i, next), which adds a delivery to station i while ensuring that stockout occurs at period next. We introduce here the notation s(i) for convenience; it denotes the period at which stockout first occurs at station i in the current schedule, or 0 if no delivery is scheduled yet at station i. The function addNextDelivery(i, next) returns true if a delivery is added at station i, false otherwise. The subroutine is described in Algorithm 1.
                              Algorithm 1
                              
                                 addNextDelivery(i, next)
                                    
                                       
                                          
                                          
                                             
                                                1: z
                                                   
                                                      next
                                                   
                                                   ←0
                                             
                                             
                                                2: for 
                                                   t
                                                   ←
                                                   next
                                                   −1 down to 0 do
                                                
                                             
                                             
                                                3:  
                                                   z
                                                   
                                                      t
                                                   
                                                   ←
                                                   z
                                                   
                                                      t+1
                                                   +
                                                   d
                                                   
                                                      it
                                                   
                                                   −
                                                   x
                                                   
                                                      it
                                                   
                                                
                                             
                                             
                                                4: end for
                                                
                                             
                                             
                                                5: if 
                                                   s(i)=0 then
                                                
                                             
                                             
                                                6:  
                                                   τ
                                                   ←
                                                   ϕ
                                                   
                                                      i
                                                   
                                                
                                             
                                             
                                                7: else
                                                
                                             
                                             
                                                8:  
                                                   τ
                                                   ←
                                                   s(i)−1
                                             
                                             
                                                9: end if
                                                
                                             
                                             
                                                10: if 
                                                   I
                                                   
                                                      i,τ
                                                   
                                                   <0 then
                                                
                                             
                                             
                                                11:return false
                                                
                                             
                                             
                                                12: end if
                                                
                                             
                                             
                                                13: qty
                                                   ←
                                                   z
                                                   
                                                      τ
                                                   
                                                   −
                                                   I
                                                   
                                                      iτ
                                                   
                                                
                                             
                                             
                                                14: qty
                                                   ←
                                                   Min(qty, K
                                                   
                                                      i
                                                   
                                                   −
                                                   I
                                                   
                                                      i,τ
                                                   
                                                   +
                                                   d
                                                   
                                                      i,τ
                                                   , K
                                                   
                                                      i
                                                   )
                                             
                                             
                                                15: for 
                                                   t
                                                   ←
                                                   τ to next
                                                   −1 do
                                                
                                             
                                             
                                                16:
                                                   qty
                                                   ←
                                                   Min(qty, B
                                                   
                                                      t
                                                   )
                                             
                                             
                                                17: end for
                                                
                                             
                                             
                                                18: nextStockout
                                                   ←
                                                   τ
                                                   +1
                                             
                                             
                                                19: while 
                                                   nextStockout
                                                   <
                                                   next
                                                   ∧
                                                   I
                                                   
                                                      i, nextStockout
                                                   
                                                   +
                                                   qty
                                                   ⩾0 do
                                                
                                             
                                             
                                                20:
                                                   nextStockout
                                                   ←
                                                   nextStockout
                                                   +1
                                             
                                             
                                                21: end while
                                                
                                             
                                             
                                                22: if 
                                                   nextStockout
                                                   <
                                                   next
                                                   ∧
                                                   qty
                                                   <
                                                   B
                                                   
                                                      next−1 
                                                   then
                                                
                                             
                                             
                                                23:
                                                   qty
                                                   ←
                                                   Min(qty,0−
                                                   I
                                                   
                                                      i, nextStockout−1)
                                             
                                             
                                                24: end if
                                                
                                             
                                             
                                                25: if 
                                                   qty
                                                   >0 then
                                                
                                             
                                             
                                                26:
                                                   x
                                                   
                                                      iτ
                                                   
                                                   ←
                                                   qty
                                                
                                             
                                             
                                                27:
                                                   for 
                                                   t
                                                   ←
                                                   τ to H 
                                                   do
                                                
                                             
                                             
                                                28:
                                                   B
                                                   
                                                      t
                                                   
                                                   ←
                                                   B
                                                   
                                                      t
                                                   
                                                   −
                                                   x
                                                   
                                                      iτ
                                                   
                                                
                                             
                                             
                                                29:
                                                   I
                                                   
                                                      it
                                                   
                                                   ←
                                                   I
                                                   
                                                      it
                                                   
                                                   +
                                                   x
                                                   
                                                      iτ
                                                   
                                                
                                             
                                             
                                                30:
                                                   end for
                                                
                                             
                                             
                                                31:return true
                                                
                                             
                                             
                                                32: else
                                                
                                             
                                             
                                                33:return false
                                                
                                             
                                             
                                                34: end if
                                                
                                             
                                          
                                       
                                    
                                 
                              

We now give a detailed explanation of this routine.

The local variables z
                           
                              t
                            represents how much can still be consumed at station i at period t without involving a positive inventory level at period next. Lines 1–4 compute the values of z
                           
                              t
                           . Lines 5–9 initialize τ, which stores the next period at which a delivery should take place at station i. As a heuristic rule, we choose to refill stations just before stockout occurs. Lines 10–12 detect the case where stockout already occured at station i at period τ: then no more delivery should take place at station i so the algorithm return false. If this is not the case, i.e., I
                           
                              iτ
                           
                           ⩾0, then station i can still receive a delivery, so we must determine the quantity to deliver, which we call qty. In a first stage, we compute the maximal value for qty, given by the difference between the maximum quantity that can be delivered without involving a positive inventory level at period next and the current inventory level (line 13). Then at line 14, we enforce the capacity constraints (29) and (33). We must also ensure that the product delivered is available at the plant at time τ and later (lines 15–17). This way, we obtain a valid upper bound on the quantity that can be added for a delivery at station i at period τ. Now let nextStockout be the earliest period at which stockout will occur at station i if qty is scheduled for delivery (lines 18–21). What is done in the next step is to reduce qty to the minimum amount required so that stockout still occurs at period nextStockout, as performed by lines 22–24. It can happen that qty is equal to 0 (e.g., if the product is not available at the factory or if there is no consumption at station i during some time periods). If the quantity is strictly positive, the delivery is scheduled (line 26) and the station and factory inventories are updated (lines 27–30), then the procedure returns true, because a delivery has been added. Otherwise the procedure returns false, meaning that no delivery has been scheduled.

To summarize, function addNextDelivery(i, next) adds a delivery at station i while ensuring that stockout occurs at period next or earlier. This function is embedded into procedure DP0, which computes a solution for the delivery plan creation problem with minimum deliveries. Procedure DP0 is described in Algorithm 2.
                              Algorithm 2
                              
                                 DP0 
                                    
                                       
                                          
                                          
                                             
                                                1: stockoutPeriod
                                                   ←
                                                   optimalPeriod()
                                             
                                             
                                                2: ν
                                                   ←2
                                             
                                             
                                                3: while 
                                                   ν
                                                   <
                                                   stockoutPeriod
                                                   ∧
                                                   p
                                                   
                                                      ν
                                                   
                                                   =0 do
                                                
                                             
                                             
                                                4:  
                                                   ν
                                                   ←
                                                   ν
                                                   +1
                                             
                                             
                                                5: end while
                                                
                                             
                                             
                                                6: for all 
                                                   
                                                      
                                                         i
                                                         ∈
                                                         C
                                                      
                                                    
                                                   do
                                                
                                             
                                             
                                                7:  
                                                   addNextDelivery(i, ν)
                                             
                                             
                                                8: end for
                                                
                                             
                                             
                                                9: 
                                                      
                                                         
                                                            
                                                               C
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         ←
                                                         selectNodes
                                                         (
                                                         stockoutPeriod
                                                         )
                                                      
                                                   
                                                
                                             
                                             
                                                10: ν
                                                   ←2
                                             
                                             
                                                11: while 
                                                   ν
                                                   <
                                                   stockoutPeriod
                                                   ∧
                                                   B
                                                   
                                                      H
                                                   
                                                   >0 do
                                                
                                             
                                             
                                                12:
                                                   ν
                                                   ←
                                                   ν
                                                   +1
                                             
                                             
                                                13:
                                                   while 
                                                   ν
                                                   <
                                                   stockoutPeriod
                                                   ∧
                                                   p
                                                   
                                                      ν
                                                   
                                                   =0 do
                                                
                                             
                                             
                                                14:
                                                   ν
                                                   ←
                                                   ν
                                                   +1
                                             
                                             
                                                15:
                                                   end while
                                                
                                             
                                             
                                                16:
                                                   repeat
                                                
                                             
                                             
                                                17:
                                                   atLeastOne
                                                   ←
                                                   false
                                                
                                             
                                             
                                                18:
                                                   for all 
                                                   
                                                      
                                                         i
                                                         ∈
                                                         
                                                            
                                                               C
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      
                                                    
                                                   do
                                                
                                             
                                             
                                                19:
                                                   
                                                   if 
                                                   addNextDelivery(i, ν) then
                                                
                                             
                                             
                                                20:
                                                   
                                                   atLeastOne
                                                   ←
                                                   true
                                                
                                             
                                             
                                                21:
                                                   
                                                   end if
                                                
                                             
                                             
                                                22:
                                                   end for
                                                
                                             
                                             
                                                23:
                                                   until 
                                                   atLeastOne
                                                   =
                                                   false
                                                
                                             
                                             
                                                24: end while
                                                
                                             
                                          
                                       
                                    
                                 
                              

The optimal latest stockout period is computed by solving the delivery plan creation problem 
                           (24)–(42) (line 1). Then lines 2–8 schedule a delivery to each station: the period of the second release cycle is stored in variable ν (lines 2–5), and then an early delivery is scheduled to each station (lines 6–8). This way we guarantee that each station is visited at least once. In a second stage, we select a subset 
                              
                                 
                                    
                                       C
                                    
                                    
                                       ′
                                    
                                 
                                 ∈
                                 C
                              
                            of stations that will consume the remaining products (line 9, detailed later). Then a loop takes place that iteratively (i) computes the period of next release (lines 12–15) and (ii) adds as many deliveries as possible for this release cycle but only to stations in 
                              
                                 
                                    
                                       C
                                    
                                    
                                       ′
                                    
                                 
                              
                            (lines 16–23).

For each product release, occurring at period ν, deliveries are scheduled to a set of selected stations so that a stockout does not occur before ν. The selection of these stations, by function selectNodes(stockoutPeriod), is detailed in Algorithm 3.
                              Algorithm 3
                              
                                 selectNodes(stockoutPeriod) 
                                    
                                       
                                          
                                          
                                             
                                                1: 
                                                      
                                                         
                                                            
                                                               C
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         ←
                                                         ∅
                                                      
                                                   
                                                
                                             
                                             
                                                2: for all 
                                                   
                                                      
                                                         i
                                                         ∈
                                                         C
                                                      
                                                    
                                                   do
                                                
                                             
                                             
                                                3:  
                                                   z
                                                   
                                                      i
                                                   
                                                   ←0
                                             
                                             
                                                4:  
                                                   for 
                                                   t
                                                   ←1 to stockoutPeriod
                                                   −1 do
                                                
                                             
                                             
                                                5:  
                                                   z
                                                   
                                                      i
                                                   
                                                   ←
                                                   z
                                                   
                                                      i
                                                   
                                                   +
                                                   d
                                                   
                                                      it
                                                   
                                                   −
                                                   x
                                                   
                                                      it
                                                   
                                                
                                             
                                             
                                                6:  
                                                   end for
                                                
                                             
                                             
                                                7: end for
                                                
                                             
                                             
                                                8: 
                                                      
                                                         sortedNodes
                                                         ←
                                                         sortByDecreasingScore
                                                         (
                                                         C
                                                         )
                                                      
                                                   
                                                
                                             
                                             
                                                9: for all 
                                                   t
                                                   ∈
                                                   H 
                                                   do
                                                
                                             
                                             
                                                10:
                                                   stock
                                                   
                                                      t
                                                   
                                                   ←
                                                   B
                                                   
                                                      t
                                                   
                                                
                                             
                                             
                                                11: end for
                                                
                                             
                                             
                                                12: while 
                                                   stock
                                                   
                                                      H
                                                   
                                                   >0 do
                                                
                                             
                                             
                                                13:
                                                   i
                                                   ←
                                                   pop(sortedNodes)
                                             
                                             
                                                14:
                                                   
                                                      
                                                         
                                                            
                                                               C
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         ←
                                                         
                                                            
                                                               C
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                         ∪
                                                         {
                                                         i
                                                         }
                                                      
                                                   
                                                
                                             
                                             
                                                15:
                                                   for all 
                                                   t
                                                   ∈
                                                   H 
                                                   do
                                                
                                             
                                             
                                                16:
                                                   consumed
                                                   ←
                                                   Min(d
                                                   
                                                      it
                                                   
                                                   −
                                                   x
                                                   
                                                      it
                                                   , stock
                                                   
                                                      t
                                                   )
                                             
                                             
                                                17:
                                                   for 
                                                   k
                                                   ←
                                                   t to H 
                                                   do
                                                
                                             
                                             
                                                18:
                                                   
                                                   stock
                                                   
                                                      k
                                                   
                                                   ←
                                                   stock
                                                   
                                                      k
                                                   
                                                   −
                                                   consumed
                                                
                                             
                                             
                                                19:
                                                   end for
                                                
                                             
                                             
                                                20:
                                                   end for
                                                
                                             
                                             
                                                21: end while
                                                
                                             
                                             
                                                22: return 
                                                      
                                                         
                                                            
                                                               C
                                                            
                                                            
                                                               ′
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              

Basically, this algorithm sorts all stations in decreasing order of consumption, then iteratively adds them to the set 
                              
                                 
                                    
                                       C
                                    
                                    
                                       ′
                                    
                                 
                              
                            of selected stations. Every time a station is added to 
                              
                                 
                                    
                                       C
                                    
                                    
                                       ′
                                    
                                 
                              
                           , its consumption is removed from the remaining available product, and the procedure stops when enough stations have been selected. The algorithm relies on functions sortByDecreasingScore(A), which returns a sequence of elements in set A, ordered decreasingly by a given score. This score corresponds to the consumption of each station, i.e., to z
                           
                              i
                           . It also relies on the standard function pop(L), which removes the first element from a sequence L and returns this element.

Algorithm DP0 constructs a delivery plan in which the latest stockout occurs at the the same time period as the one corresponding to the optimal solution of the delivery plan creation problem, but with a limited number of deliveries. However, it is still possible to reduce the number of deliveries obtained in the solution given by DP0. One possibility is to merge consecutive deliveries to the same station when possible. Two deliveries at a station i at period t and u, with t
                           <
                           u, can be merged if:
                              
                                 •
                                 Capacity at i is respected, i.e., I
                                    
                                       i, t+1
                                    +
                                    x
                                    
                                       iu
                                    
                                    ⩽
                                    K
                                    
                                       i
                                    .

The product is available at the production plant, i.e., B
                                    
                                       v
                                    
                                    ⩾
                                    x
                                    
                                       iu
                                    , ∀v
                                    ∈{t
                                    …
                                    u
                                    −1}.

Post-processing simply consists in merging deliveries whenever possible at each station, from the earliest to the latest delivery. Algorithm DP1 applies this post-processing procedure after DP0.

Algorithms DP0 and DP1 select a subset of stations to consume the product. However, it is possible to consider the entire set of stations, as in DP2. In this procedure, we consider (i) DP0 for the entire set of stations and (ii) post-processing the delivery plan, as in DP1.

To summarize:
                              
                                 •
                                 In DP0 we (i) insert one delivery to each station, (ii) select a subset of stations to consume the remaining products and (iii) add deliveries to this subset of stations in order to consume all products.

In DP1 we (i) call DP0 and (ii) post-process the delivery plan to merge two deliveries at the same node whenever possible.

In DP2 we (i) call DP0 while skipping the subset selection step, using all stations to consume the products, and (ii) post-process as in DP1.

The delivery plan created in phase 1 specifies, for each station 
                           
                              i
                              ∈
                              C
                           
                        , what is the quantity that has to be delivered at each time period 
                           
                              t
                              ∈
                              T
                           
                        . This quantity is given by the value of variables x
                        
                           it
                        . The objective of the second phase is to construct a set of routes such that, for each variable x
                        
                           it
                        , the corresponding quantity is delivered to station i within the time window defined by the beginning and ending of period t. So, each station with several visits in the delivery plan is associated with several stations in the routing problem, each with a different time window. Additionally, the availability of products at the factory must be taken into account, as described in Section 4. We define the resulting problem as a vehicle routing problem with production schedule and time windows (VRPPSTW). The objective is to minimize the total number of trips, that is, the number of tours starting and ending at the production facility. Note that a single vehicle can perform more than one trip, one after the other, and this sequence of consecutive trips performed by a single vehicle is called a route.

As explained earlier, a major difficulty associated with solving the VRPPSTW arises because inserting a station in a trip starting at period t might invalidate trips starting later, because they rely on the products left at the factory at t.

In the following we assume that each station can be reached from the production plant within one period.

To construct a feasible solution to the VRPPSTW, we propose a heuristic approach based on the I1 algorithm by Solomon [23]. For a given product release r, we can compute a set N
                           
                              r
                            of stations that have to be serviced by a trip starting before release r
                           +1. Let us define t
                           
                              r
                            the period at which product release r takes place, d as the duration of a production cycle, and [e
                           
                              i
                           , l
                           
                              i
                           ] as the time window associated with i. Then i
                           ∈
                           N
                           
                              r
                            if t
                           
                              r
                           
                           +
                           d
                           >
                           l
                           
                              i
                           .

The heuristic approach we use to build a solution for the VRPPSTW is a construction heuristic, which we call releaseStepConstruction; it is defined in Algorithm 4. It makes use of the subroutine releaseStepI1(t
                           
                              r
                           , trips, stations) where trips is the set of trips already built. Starting from the first product release r, the set N
                           
                              r
                            is identified, and the trips visiting all stations in N
                           
                              r
                            are constructed through an adaptation of the I1 Solomon heuristic [23]. Then, for the following product releases, the procedure is repeated. Note that when r
                           >1, a station in N
                           
                              r
                            can be served by a trip starting in t
                           
                              r
                            or by a trip already built before and thus starting before t
                           
                              r
                           . To minimize the number of trips, it is preferable to insert a station in an already constructed trip instead of building a new trip starting at t
                           
                              r
                           . However, doing so may cause infeasibility due to stockouts at the production facility.
                              Algorithm 4
                              
                                 releaseStepConstruction 
                                 
                                    
                                       
                                          
                                          
                                             
                                                1: trips
                                                   ←∅
                                             
                                             
                                                2: for all product release r 
                                                   do
                                                
                                             
                                             
                                                3:
                                                   trips
                                                   ←
                                                   releaseStepI1(t
                                                   
                                                      r
                                                   , trips, N
                                                   
                                                      r
                                                   )
                                             
                                             
                                                4: end for
                                                
                                             
                                             
                                                5: return trips
                                                
                                             
                                          
                                       
                                    
                                 
                              

The procedure releaseStepI1(t
                           
                              r
                           , trips, N
                           
                              r
                           ) returns a set of trips corresponding to the newly built solution. It is based on the I1 heuristic by Solomon [23]; we now provide a quick summary of this heuristic.

The original I1 heuristic iteratively inserts nodes into routes using the following principle at each iteration: (i) compute for each node the best possible insertion with regard to criterion c
                           1 and (ii) considering the best insertion point for all nodes, perform the best one with respect to criterion c
                           2. Solomon provides recommendations for those criteria, and one of the most efficient is the recommendation to minimize travel cost for c
                           1 and minimize travel times for c
                           2. This leads to cheap insertions that make good use of the waiting time. When no insertion is possible, a new route is seeded with a distant node.

In the context of the VRPPSTW, we still deal with time windows, but the heuristic must be adapted to the specifics of the problem. The two criteria used to build the trips are the minimization of travel time (excluding waiting time) and the minimization of total trip duration (including waiting time). There are two major differences with the original I1:
                              
                                 •
                                 A new trip is created as soon as there exists one station that cannot be inserted in any of the current trips; in the original I1, a new trip is created when it is not possible to insert any node in the current trips.

An insertion is feasible if it does not create a product shortage at the production plant when it is inserted, or later.

In addition, the new trips that are created always start at period t
                           
                              r
                           , which is a parameter of the function indicating the product release being treated. As shown in Algorithm 4, releaseStepI1 is called for each product release.

To improve the solution found by the constructive approach, we implemented a large neighborhood search (LNS) algorithm for the VRPPSTW. Large neighborhood search, also called ruin and recreate, is a metaheuristic introduced by Shaw [24]. The basic principle is to iteratively destroy and repair a solution using appropriate operators. The possible ways to successively destroy and repair a solution yield a large neighborhood (hence the name). Thus far, LNS has been used almost exclusively to solve vehicle routing problems. Shaw [24] uses it in a constraint programming framework to solve the vehicle routing problem with time windows (VRPTW). Two years later, a similar principle introduced by Schrimpf et al. [25], under the name ruin and recreate, was applied to the traveling salesman problem, the VRPTW, and network optimization. Pisinger and Ropke [26] develop a general-purpose adaptive LNS method for a wide range of routing problems, including the capacitated vehicle routing problem, VRPTW, site-dependent vehicle routing problem, multi-depot vehicle routing problem, and open vehicle routing problem. All these contributions are reviewed in a recent survey by Pisinger and Ropke [27].

The algorithm we implemented is a very simple version of LNS, with only two destroy operators. The first removes randomly selected trips from the solution. The second iteratively removes stations from the solution, selecting the station with the highest removal gain, where gain is defined as the difference in total travel time of the solution induced by joining the predecessor and the successor of the station being removed. In both cases, the solution is destroyed until a certain quantity of removed stations is reached. After running some preliminary experiments, we set this quantity to a random number between 1% and 30% of the total number of stations. Regarding the repair operation, we use the releaseStepConstruction procedure defined in the previous section. A new solution is accepted as incumbent if it has fewer trips than the previous one, or as many trips and a lower total travel time.

Once phase 1 and phase 2 described in the previous sections are solved, we obtain a feasible solution for the FNDP. In this section, we describe a hybrid approach that aims to improve the solution found by the two-phase algorithm described in Sections 6.1 and 6.2. The objective is to decrease the number of trips while retaining the optimal value of the variables S
                        
                           t
                         determined in the optimal solution of the delivery plan creation problem.

The hybrid algorithm works as follows: First, a delivery plan is created by solving either the delivery plan creation problem (Section 6.1) or the delivery plan creation problem with minimum deliveries (Section 6.1.1). In the second case, the delivery plan creation problem with minimum deliveries is solved by DP0, DP1, or DP2. Second, a routing solution is created by applying the construction approach and the LNS (Section 6.2.2), such that we obtain a feasible starting solution for the FNDP. This solution then can be improved by repeatedly applying the trip-based model (Section 5), modified such that the objective function becomes:
                           
                              
                                 min
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          r
                                          ∈
                                          R
                                       
                                    
                                 
                                 
                                    
                                       z
                                    
                                    
                                       r
                                    
                                 
                              
                           
                        and the following constraint is added:
                           
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          t
                                          ∈
                                          T
                                       
                                    
                                 
                                 
                                    
                                       S
                                    
                                    
                                       t
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             ^
                                          
                                       
                                    
                                    
                                       t
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    
                                       
                                          S
                                       
                                       
                                          ^
                                       
                                    
                                 
                                 
                                    t
                                 
                              
                           
                         is the value of the optimal solution of the delivery plan creation problem.


                        Algorithm 5 gives a rough sketch of the method.
                           Algorithm 5
                           Hybrid method for the FNDP 
                                 
                                    
                                       
                                       
                                          
                                             1: trips
                                                ←
                                                startingSolution()
                                          
                                          
                                             2: repeat
                                             
                                          
                                          
                                             3:
                                                trips
                                                ←
                                                solveTripModel(trips)
                                          
                                          
                                             4:
                                                trips
                                                ←
                                                LNS(trips)
                                          
                                          
                                             5: until an improving solution is found
                                          
                                       
                                    
                                 
                              
                           

The startingSolution() procedure constructs an initial solution for the FNDP. In phase 1, we solve either the delivery plan creation problem (Section 6.1) or the delivery plan creation problem with minimum deliveries (Section 6.1.1). Phase 2 relies on the releaseStepConstruction procedure (Section 6.2.1). Then the trip-based model is solved by setting 
                           
                              R
                           
                         to the set of trips in the current solution. After the trip-based model has been solved, a new (and possibly better) feasible solution of the FNDP emerges, with a different number of trips and different delivery quantities. In particular, it can happen that the solution of the trip-based model sets some x
                        
                           it
                         variables to 0. In this case, the corresponding station is removed from the trip that visited it in the previous solution at period t. The new solution is then passed to the LNS for a possible further improvement. The procedure is a simple descent method that stops as soon as no further improved solution can be found. Every time the trip-based model is solved, only the trips of the current solution are inserted in the set 
                           
                              R
                           
                        . An alternative possibility is to keep in 
                           
                              R
                           
                         also the trips of the previous solutions. However, preliminary experiments show that the approach we implemented is faster and gives better results. In all the experiments we ran, the largest number of iterations of Algorithm 5 before convergence is 20, while on average we needed only 5.25 iterations.

For our computational experiments, we turned to a test bed of instances built using real data from a company working in Vienna. The production plant is close to the city center while the distribution phase is outsourced to a carrier. The carrier is paid on the basis of the number of trips made to distribute the newspapers. Each trip starts and ends at the production plant. The instance related to the real application has 212 stations and 10 time periods. We constructed smaller instances by starting from this basic one and reducing the number of stations and number of periods. When reducing the number of stations, stations with higher indices where removed; when reducing the number of periods, later periods where removed. In every case, the amount of removed consumption was also subtracted from the production schedule, always as late as possible, i.e. removed from the latest period where production took place. We obtained in total 9 instances, which we refer to as FNDP_a_b, where a corresponds to the number of stations and b to the number of periods. Each instance has a different total production and total consumption. In the following, we call the ratio of these two values the production ratio, and we specify it in the tables. This value should always be lower than one, because otherwise there would be more production than consumption, and it would be impossible to consume all products.

All previously described algorithms are implemented in C++ and run on a 2.67gigahertz Intel Xeon CPU. The MIP solver used to solve the trip model is CPLEX 12. We compare four solution approaches for the FNDP. The first method, called Basic, consists in solving phase 1 and then applying the releaseStepConstruction procedure to find the trips. The second and third methods, respectively, the Trip Model and the LNS, consist in applying the trip-based model or the LNS to the solution found by the basic method. Finally, the Hybrid method is Algorithm 5. For each solution method, we report the solution value, i.e. number of trips. The longest CPU time needed for the Basic algorithm in all our experiments is 2.4seconds, and in 95% of the cases it required less than 1second; because it is always very short, we do not report this CPU effort. In order to provide a fair comparison between LNS and Hybrid, we allow them to run for the same amount of time. Because Hybrid stops after converging, whereas LNS can run indefinitely, we simply allow LNS to run for the exact amount of time that was required by Hybrid. Therefore one single CPU time value gives the CPU effort for each method. In bold we report the best solution found. Remember that the only objective is to minimize the total number of trips as the first objective, i.e., the minimization of the stockout time, is set to the value found by the exact solution of the delivery plan creation problem.

In a first set of experiments, we compare all four methods where phase 1 is solved through the optimal solution of (24)–(42) with a MIP solver (Cplex 12). We also indicate the number of deliveries in the starting delivery plan (column “# deliveries”). The results are summarized in Table 1
                     . The results show that the basic method is very fast but finds bad quality solutions. The trip model method is still fast, with a computing time that is always lower than 1second, except for two cases. It also improves the solution of the basic method, especially for instance FNDP_212_8, where the number of trips is almost a half of the one of the basic model, but the quality remains very poor. Both LNS and the hybrid method increase the computation time remarkably, which is often more than two orders of magnitude of the time required by the trip model and always greater than the double. However, the solution quality is clearly superior to the previous methods. In fact, the hybrid method offers a maximum reduction in the number of trips of 43.33% with respect to the trip model and of 70.23% with respect to the basic method. The hybrid method is the one that outperforms all other methods on all instances, with the same CPU effort as LNS. From these first experiments, we conclude that when using a delivery plan built without special care for minimizing the number of deliveries, the hybrid method is the best, probably because the hybrid method can perform modifications to both the delivery plan and the routes: LNS can only modify the routes, and the trip model can only modify the delivery plan.

In a second experiment, we use DP1 to solve phase 1. We then run the same algorithms again; the results are summarized in Table 2
                     . First of all, we note that all the methods perform better than in the previous setting, and that the gap between the methods is much smaller than previously. In fact, while there was a reduction of 70.23% in the number of trips between the solution of the basic method and the solution of the hybrid method when using the MIP delivery plan for the instance FNDP_212_8, when using DP1 this difference has been reduced to 42.5%. This time, LNS and the hybrid method provide results of comparable quality. This is consistent with our previous observation: LNS lacks the ability to improve the delivery plan, but if we provide it with a good delivery plan to start with, it does a good job in improving the routing. Furthermore the “trip model” portion of the hybrid method is useful only if there is something to improve in the delivery plan.

In a third experiment, we use DP2 to solve phase 1, again comparing the same algorithms. DP2 aims at balancing the consumption over all stations. Table 3
                      summarizes the results of this set of experiments. It appears that using DP1 or DP2 does not make a big difference in terms of solution quality. In fact they both use aggregation to minimize the number of deliveries, but DP1 focuses on a subset of stations, whereas DP2 uses all stations. However, both of them produce plans for visiting each station at least once during the first product release. This is a constraint of the practical application we studied and represents a bottleneck of the problem: many stations have to be visited at roughly the same time (before consumption starts), therefore many vehicles are necessary at this time. The choice of the subset of stations to serve can be made only after the first delivery, so it does not have a significant impact on the global solution.

In order to provide insight and understanding, we produce a fourth set of experiments using DP0 to solve phase 1. DP0 is the basis for DP1 and DP2, but does not use aggregation, therefore produces delivery plans with more deliveries. These results are summarized in Table 4
                     . We observe that with a slightly worse heuristic for building a delivery plan, there is already a small gap in performance between LNS and the hybrid method, in favor of the hybrid method. In fact, while the LNS finds 7 best solutions when using DP1 and 6 when using DP2, it is not able to find any best solution when using DP0. This correlates with our previous remark: LNS is good for routing but cannot improve the delivery plan, so it produces results that are as good as the delivery plan provided. When observing all four tables, it appears that LNS is comparable to the hybrid method when the number of deliveries in the delivery plan is the smallest. We can conclude that LNS is a good option if we are able to provide a good delivery plan. Building a good delivery plan (or even a feasible one) is not a trivial task though, and the fact that DP1 and DP2 work for all the instances tested here does not mean that they would on other instances. However, it is always possible to use a MIP solver to produce a feasible delivery plan which is optimal with respect to the objective of minimizing the period of the latest stockout, then use the hybrid method for optimizing the routing while improving the delivery plan.

Additionally, we note that the variations in methods’ performance are less noticeable when the production ratio gets close to one. This makes sense, since those instances allow less flexibility regarding where products should be consumed. If this ratio was equal to one, all consumption at each node and each period would have to be used; as the ratio decreases, there are more possibilities to plan deliveries at stations that allow for better solutions, as well as to disregard for instance the stations far away from the depot and with low consumptions.

@&#CONCLUSIONS@&#

We have analyzed the Free Newspaper Delivery Problem (FNDP) which is the problem of distributing free newspapers to a number of points (e.g., subway or tramway stations) in such a way that newspaper consumption is maximized and the total number of vehicle trips is minimized. The resulting problem can be classified as a routing problem with time windows and constraints on production schedule, which makes it very difficult to solve. Considering the complexity of the problem, we have presented a solution approach that decomposes the problem into two phases: the first creates a delivery plan, and then the second constructs the vehicle routes. Different approaches are proposed to solve both phases thus obtaining several heuristic algorithms. In addition, we conducted computational experiments with a set of instances derived from real data related to an application in the city of Vienna. The results show that the hybrid algorithm, which improves a starting solution by repeatedly solving to optimality a MILP model, is the best approach, especially when the solution of the first phase is of poor quality. When the solution of the first phase is of reasonable quality, a simpler heuristic for the second phase, such as an LNS, can give a good final solution and can thus constitute a good compromise between quality and implementation effort and/or time.

Future work should pursue the development of more sophisticated solution methods for the construction of routes and of integrated approaches that can tackle the first and second phases at the same time. It also would be interesting to study the impact of different binding constraints on the value of the solution, such as the constraint that imposes at least one visit to each station and the constraint that forbids a station to be served once stockout has occurred. Finally, variants and generalizations of the problem should be analyzed, including for example the presence of a service time for each station, depending on the amount of newspapers delivered.

@&#REFERENCES@&#

