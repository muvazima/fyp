@&#MAIN-TITLE@&#The mixed capacitated arc routing problem with non-overlapping routes

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We define the concept of overlapping nodes.


                        
                        
                           
                           We present a model which evaluates the node overlapping of the service zones.


                        
                        
                           
                           A new model obtains the routes ensuring a limited overlapping of the service zones.


                        
                        
                           
                           The obtained zones exhibit nice characteristics to be implemented in practice.


                        
                        
                           
                           Nice proximity and connectivity intra zones, and limited overlapping inter zones.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Routing

Integer linear programming

Heuristics

District design

Capacitated arc routing

@&#ABSTRACT@&#


               
               
                  Real world applications for vehicle collection or delivery along streets usually lead to arc routing problems, with additional and complicating constraints. In this paper we focus on arc routing with an additional constraint to identify vehicle service routes with a limited number of shared nodes, i.e. vehicle service routes with a limited number of intersections. This constraint leads to solutions that are better shaped for real application purposes. We propose a new problem, the bounded overlapping MCARP (BCARP), which is defined as the mixed capacitated arc routing problem (MCARP) with an additional constraint imposing an upper bound on the number of nodes that are common to different routes. The best feasible upper bound is obtained from a modified MCARP in which the minimization criteria is given by the overlapping of the routes. We show how to compute this bound by solving a simpler problem. To obtain feasible solutions for the bigger instances of the BCARP heuristics are also proposed. Computational results taken from two well known instance sets show that, with only a small increase in total time traveled, the model BCARP produces solutions that are more attractive to implement in practice than those produced by the MCARP model.
               
            

@&#INTRODUCTION@&#

Capacitated arc routing mathematical models are often used to formulate delivering or collecting problems where the demands are associated with the links of the underlying network.

There are many variants of these problems. In the typical capacitated arc routing problem (CARP) the objective is to identify minimum cost (or time) routes to be traversed by the vehicles of a given fleet to perform the service in the streets of a network, starting and ending at a depot. The street segments demanding for service are called tasks, and have a given demand to be satisfied by one of the vehicles. The fleet is homogeneous, and the vehicles capacity must be respected.

The CARP was introduced by Golden and Wong (1981), and originally defined on undirected graphs. Since then, several CARP variations and generalizations have been reported in the literature, many of them motivated by real life applications, like waste collection, postal distribution or winter gritting. Dror (2000), Wøhlk (2008), and Corberán and Prins (2010) survey the research on the CARP and its variations, as well as their applications.

The Mixed CARP (MCARP) generalizes the CARP for mixed graphs, that is, graphs with arcs and edges. The MCARP is more suited to situations where the direction of the traversals has to be taken into account. This is the case of household waste collection (see e.g. Bautista, Fernández, and Pereira, 2008; Belenguer, Benavent, Lacomme, and Prins, 2006; Ghiani, Guerriero, Improta, and Musmanno, 2005; Gouveia, Mourão, and Pinto, 2010; Mourão and Amado, 2005; Mourão, Nunes, and Prins, 2009), or road network maintenance (see e.g. Amaya, Langevin, and Trépanier, 2007). The MCARP is NP-hard, since it generalizes the CARP, which is known to be NP-hard (Golden and Wong, 1981).

Since this work is motivated by a refuse collection problem, henceforward the task demands represent the amounts of refuse to collect.

Real world applications often require other constraints that must be added to the basic MCARP model. In some cases, it is not even easy to decide how to measure the additional specifications. Examples of such situations arise when workloads need to be equitably distributed among the vehicles, or different vehicle routes have to be constrained to separated geographical regions. On the recent paper of Ghiani, Laganà, Manni, Musmanno, and Vigo (2014) strategic and tactical issues involving these type of constraints are surveyed for solid waste management systems.

Also, too many intersections of the service areas of different vehicles can complicate the activities to be held in a region (see e.g., Mourgaya and Vanderbeck, 2007; Muyldermans, Cattrysse, Van Oudheusden, and Lotan, 2002). According to Kim, Kim, and Sahoo (2006) and Poot, Kant, and Wagelmans (2002) for instance, solutions with an excessive number of vehicle crossovers tend to be rejected by the practitioners. Kim et al. (2006) also remark that the overlapping of service areas is strongly related to the intersection of the vehicle routes. The number of intersections may decrease if each vehicle service area is concentrated in a geographical region.

An adequate definition of these “nice” regions (sets of arcs and edges) is not easy to state since besides needing to be separated and workload balanced, their shape should have other “nice” characteristics. These, apart from being subjective, also allow practitioners to accept or reject a solution after a single viewing. A survey on measures used in the literature for the classification of the regions is provided later in Section 2.

Two of these “attractive” characteristics for the service areas are: (i) connectivity and (ii) compactness. While connectivity can be clearly defined as the possibility of traveling between any two points of a region without leaving it, there are different measures of the compactness of a region (MacEachren, 1985). In general, these measures compare the region against an “ideal compact shape”, such as a circle or a square, or they are based on the distances between points in the region – higher distances mean, in general, less compact regions.

Typical solutions for MCARP models are usually very unsatisfactory in terms of the above criteria. Fig. 1
                     a depicts the optimal MCARP solution for instance lpra2 (see Section 6.1 for a description of the data set), where we can see the overlap of several different vehicle routes (identified by a different color) and very irregular (thus, not “nice”) regions served by each route. Furthermore, we even observe disconnected sequences of tasks within each vehicle service. Thus, solutions resulting from solving the “pure” MCARP can be very inadequate to implement in practice.

The disconnected components observed in the MCARP solutions has motivated our first attempt to improve the shape characteristics of the routes. In this approach, we have imposed constraints guaranteeing that the set of tasks within each route are connected. We omit from this paper the details of how we have modeled and implemented this approach. However, we refer the reader to Fig. 1b, which illustrates the solution for the instance lpra2 obtained after adding such “connectivity” constraints to the model. It is quite clear that this solution, despite having connected sets of tasks, still exhibits several undesirable situations such as vehicle routes that overlap and spread (being non compact) in the collection zone.

This attempt to model the “nice” features of the routes by adding connectivity constraints illustrates what we have mentioned before, namely that it may not be straightforward to measure and describe the “attractiveness” specification of the routes, in a mathematical way.

Motivated by this unsuccessful experiment, in this paper we propose, study and test a new model that uses a constraint simpler to formulate and that is based on a different way to measure the non-overlapping of the vehicle routes. We call this new problem the bounded overlapping MCARP (BCARP). The overlapping is measured in terms of the number of nodes that are common to the tasks of different routes.

One motivation for considering this measure is as follows. We may interpret the set of these common (shared) nodes as representing the boundaries between the regions served by each route, and their number as the length of the corresponding boundaries. Thus, one way to promote “nice” (disjoint and compact) regions is by limiting the length of their boundaries.


                     Fig. 1 c depicts the optimal BCARP solution for instance lpra2, where we have included the new constraint on non-overlapping routes. It is interesting to compare the three solutions in the figure in order to see the advantage of the latest approach, in terms of compactness and separation of the regions served by each route. Moreover, although connectivity was not enforced in the BCARP model, the resulting solution has connected sets of tasks in each route.

In this work we consider three main measures to evaluate the “nice” characteristics of solutions. While the first one measures the connectivity, the other two try to measure the compactness, as detailed in Section 5.

This paper is organized as follows. After the review literature (Section 2), the relevant notation is presented in Section 3.1. Next, in Section 3.2 we review a model for the MCARP from Gouveia et al. (2010) which will be used as a backbone to model the more restrictive version of the MCARP here studied. In Section 3.3 we describe a variant where we want to minimize the number of shared nodes, named as the non overlapping MCARP (NOMCARP). The value of the NOMCARP objective function is then used to define the upper bound for the number of overlapping nodes in the MCARP. In Section 3.4 we propose a model for the BCARP that is obtained from combining the MCARP model with constraints from the NOMCARP, and a constraint guaranteeing the referred bounded overlapping. Section 4 is devoted to the methodology employed to find feasible solutions for the BCARP. Solutions for small sized instances are obtained by solving the models in sequence as described above. Heuristics are developed and used to obtain solutions for the larger sized instances. The measures introduced to evaluate the solutions (Section 5) precede the computational results. These involve two sets of well known benchmark instances and are presented and analyzed in Section 6, before the conclusions, in Section 7.

@&#LITERATURE REVIEW@&#

This section reviews the literature on the solution methodologies and the numerical measures used to obtain and evaluate the “nice” attributes for zones, concerning regions partitioning for routing applications.

When partitioning a region in smaller “nice” zones either for arc or node routing applications, three main approaches have been discussed in the literature. In the first approach, the partitioning and the routing problems are sequentially solved, using multi phase methods (Mourão et al., 2009; Teixeira, Antunes, and Sousa, 2004). In the second, the partitioning and the routing are solved together as a whole problem (Kim et al., 2006; Mourão et al., 2009; Ramos and Oliveira, 2011). In the last one, only the partitioning problem is solved. In some cases, the partitioning is solved keeping in mind that the application is an arc routing problem (Assis, Franca, and Usberti, 2014; Muyldermans, Cattrysse, and Van Oudheusden, 2003; Muyldermans et al., 2002; Perrier, Langevin, and Campbell, 2008) and in others that the application is on a node routing problem (Gonzalez-Ramírez, Smith, Askin, Miranda, and Sánchez, 2011; Jarrah and Bard, 2012; Lei, Laporte, and Guo, 2012; Lin and Kao, 2008; Mourgaya and Vanderbeck, 2007; Ríos-Mercado and Fernández, 2009; Salazar-Aguilar, Ríos-Mercado, González-Velarde, and Molina, 2012).

Among the attributes regarded as relevant when designing zones for routing applications we may highlight the compactness, the non-overlapping, and the connectivity within each zone.

Compactness is one of the most frequently mentioned characteristics, although not always clearly defined. Furthermore, the meaning of compactness slightly differs from author to author, being, for instance, associated with: (i) zones shapes as close as possible to circles, squares or rectangles (Gonzalez-Ramírez et al., 2011; Jarrah and Bard, 2012; Lin and Kao, 2008); (ii) geographically or visually compact zones (Lei et al., 2012; Perrier et al., 2008); or (iii) the proximity between the demand entities in the same zone (Assis et al., 2014; Kim et al., 2006; Muyldermans et al., 2003; Poot et al., 2002; Ríos-Mercado and Fernández, 2009; Salazar-Aguilar et al., 2012; Tang and Miller-Hooks, 2006).

Several compactness measures have thus been considered in the literature, whether to evaluate the final solutions, to evaluate compactness during the execution of the solution methods, or both. Generically, these measures try to evaluate the proximity between elements belonging to the same zone, as next detailed.

We may find measures based on maximum travel times (Gonzalez-Ramírez et al., 2011; Mourão et al., 2009); on maximum Euclidean distances (Assis et al., 2014; Ríos-Mercado and Fernández, 2009); on the sum of the Euclidean distances (Kim et al., 2006; Mourgaya and Vanderbeck, 2007; Salazar-Aguilar et al., 2012); on the averages and standard deviations of distances, or travel times between customers, or to a reference point in a zone (Mourão et al., 2009; Poot et al., 2002; Tang and Miller-Hooks, 2006); on the perimeters of the zones (Lei et al., 2012); or even perimeters and areas of the zones (Lin and Kao, 2008). Jarrah and Bard (2012) define clusters of clients in the plane in such a way that the ratio of the difference between the maximum and the minimum x coordinate and the difference of the maximum and the minimum y coordinate lies within a given interval. Poot et al. (2002) and Tang and Miller-Hooks (2006) also consider the average number of customers in a zone which are closer to the reference point of a different zone rather than to its own, representing costumers who are not well positioned. While Poot et al. (2002) reference point refers to the center of gravity, Tang and Miller-Hooks (2006) opt to use the customer closer to this point, named as the median of the tour. Tang and Miller-Hooks (2006) compute the measures based on network travel times instead of Euclidean distances.

In some cases, these evaluation compactness measures are also embedded in the heuristic processes (Assis et al., 2014; Gonzalez-Ramírez et al., 2011; Kim et al., 2006; Lei et al., 2012; Ríos-Mercado and Fernández, 2009; Salazar-Aguilar et al., 2012; Tang and Miller-Hooks, 2006). In other cases, authors devise compactness indicators only embedded in the solution methods (Lin and Kao, 2008; Mourgaya and Vanderbeck, 2007). Although not specifically devised for routing application, it is worth to refer compactness measures that compare the region with that of an ideal shape (Bozkaya, Erkut, and Laporte, 2003; MacEachren, 1985).

Non-overlapping may be defined as zones with clear geographical borders (Cattrysse, Van Oudheusden, and Lotan, 1997; Muyldermans et al., 2003), from routes overlapping (Kim et al., 2006; Lu and Dessouky, 2006; Poot et al., 2002; Tang and Miller-Hooks, 2006) or boundary crossing points (Lin and Kao, 2008). However, the literature has been scarce on the evaluation of zones overlapping. Poot et al. (2002) and Kim et al. (2006) evaluate the overlapping of the solutions by counting the number of nodes in more than one convex hull of clusters of nodes (each cluster formed by the stops of a route). Lu and Dessouky (2006) define the crossing length percentage of a trip as the sum of the crossed length of all the crossings divided by the total length of the trip. Tang and Miller-Hooks (2006) claim that by minimizing the number of customers closer to the reference point of another tour, they also minimize the overlapping of the tours. In the mathematical model proposed by Lin and Kao (2008), an upper limit for the number of boundary crossing points is imposed, and the number of such points is also used to evaluate the overlapping of the final solutions. These authors consider a predefined set of small land parcels, representing small collection areas regarding the amount of refuse to collect, and with the road lengths per parcel previously computed. The aim is to assign the parcels into balanced regions, regarding the refuse to collect and the road lengths. In the models here proposed no predefined routes or areas are imposed, and the crossing points are determined by the models.


                     Matis (2008) measures the visual attractiveness of a tour by combining, in only one equation, the number of crossings among different routes; the compactness (defined from the distances between customers in the same route); and the number of customers in a route which are closer to the center of gravity of another route.

Note that in this paper, the definition of attractive routes does not consider the location of the depot (the same applies to the definitions given in the previous references). This implies that the design and cost of the optimal solutions may be influenced by the time taken traveling from the depot to the first service, and from the last service back to the depot. On the other hand, the alternative approach (incorporating the location of the depot in the definition of attractive routes) may produce lopsided shaped routes or even routes with more odd shapes. A computational study to compare the two approaches may shed some light on the advantages and disadvantages of each approach. Such is the purpose of future work.

Zones contiguity is generally related to the connectivity between all of its demand entities (Assis et al., 2014; Muyldermans et al., 2003; Perrier et al., 2008) or the possibility to reach all of them within the zone (Ríos-Mercado and Fernández, 2009; Salazar-Aguilar et al., 2012).

In this paper, we propose an exact method, based on a model that simultaneously designs sectors and builds routes, and a heuristic solution method which sequentially solves the two problems. In fact, by solving a MCARP with an upper bound on the number of overlapping areas, we are able to design “nice” routes. These methods may then directly be applied to a sectors design problem, if each sector is assigned to one vehicle.

In this section we review and present models for three related problems, (i) the MCARP; (ii) the non overlapping MCARP (NOMCARP), which also identifies vehicle routes as in the MCARP, but the minimization criteria is on non-overlapping; and (iii) the BCARP, which is the MCARP with an additional constraint on the number of overlappings. We also show that the NOMCARP may be solved by a simpler model, with the same objective, but only requiring the allocation of tasks to the vehicle routes (the design of routes is not required). The new and simpler model is called as the non overlapping routes model (nor).

For simplicity, and without loss of generality, we assume that no demand links are incident into the depot. In the other cases, a dummy depot is considered, only linked with the depot, and from where vehicle routes must start and end, being the depot treated as a common node. We also considered that each zone is served by only one vehicle route.

The initial mixed network, (N, AD, AR, ER
                        ), includes deadheading, i.e. links with no demand for service, and required (or demand) links. N is the set of nodes, representing the depot (node s), and street crossings or alleys. All deadheading links are represented by arcs in AD
                        . To identify the links having a service to be performed, and called required links or tasks, we use the sets AR
                         and ER
                        , corresponding to the set of the required arcs and the set of required edges, respectively.

For the directed formulations that we will use, we define the directed graph G = (N, A) as next detailed. All links are represented by arcs in A = AD
                        ∪R where 
                           
                              R
                              =
                              
                                 A
                                 R
                              
                              ∪
                              
                                 A
                                 
                                    E
                                    R
                                 
                              
                           
                         is the set of required arcs, with 
                           
                              
                                 A
                                 
                                    E
                                    R
                                 
                              
                              =
                              
                                 {
                                 
                                    (
                                    i
                                    ,
                                    j
                                    )
                                 
                                 ,
                                 
                                    (
                                    j
                                    ,
                                    i
                                    )
                                 
                                 :
                                 
                                    {
                                    i
                                    ,
                                    j
                                    }
                                 
                                 ∈
                                 
                                    E
                                    R
                                 
                                 ∧
                                 i
                                 <
                                 j
                                 }
                              
                           
                        . That is, in the directed graph G = (N, A), each required edge {i, j} ∈ ER
                         is replaced by two opposite arcs, (i, j) and (j, i), with the same associated data as the original edge. Only one of these two arcs is required to be served. Thus, |R| = |AR
                        | + 2|ER
                        |, and |AR
                        | + |ER
                        | is the number of tasks.

We assume that both G and its subgraph spanned by N∖{s} are strongly connected graphs. For simplicity, all nodes in N∖{s} are endpoints of at least one task. Thus, nodes i ≠ s which are not endpoints of a task are removed from the network and connections in the original network using these nodes are reestablished by adding arcs with durations corresponding to shortest deadheading path values in the original network.

The following notation is also needed to describe the models.

                           
                              •
                              For each link, arc (i, j) or edge {i, j}, dij
                                  > 0 is its deadheading time, i.e., the time needed to traverse the street without serving it. Additionally, each required link (i, j) or {i, j} has an associated demand, qij
                                  > 0, and a service time, tij
                                  ≥ dij
                                 .

A fleet of P identical vehicles is available, each with a capacity of W. The time needed to empty a vehicle is λ.


                                 v(.) is the optimal value of model (.) or the value of a feasible solution obtained with model (.).

Here, we briefly review the model of Gouveia et al. (2010), named by (mcar).

Thus, for each route p = 1, …, P, let:

                           
                              •
                              
                                 
                                    
                                       x
                                       
                                          i
                                          j
                                       
                                       p
                                    
                                  be 1 if arc (i, j) ∈ R is served by route p, and 0 otherwise.


                                 
                                    
                                       y
                                       
                                          i
                                          j
                                       
                                       p
                                    
                                  be the number of times that arc (i, j) ∈ A is deadheaded by route p.


                                 
                                    
                                       f
                                       
                                          i
                                          j
                                       
                                       p
                                    
                                  be the flow in arc (i, j) ∈ A, related to (part of) the route demand, needed to guarantee the routes connectivity.

The objective function (1a) minimizes the total traveling time, given by the deadheading, the service and the dump times. Constraints (1b) and (1c) ensure that all the tasks are served by vehicle routes; (1d) impose the continuity of routes at each node; (1e) are needed to adequately charge the dump cost in the objective function and to ensure that no more than P vehicles are used; (1f) and (1g) are flow conservation constraints, that together with the linking constraints (1h)–(1i) force the connectivity of the routes. Constraints (1h)–(1i) are also used to guarantee that each route total demand is compatible with the vehicles capacity, W.

Since this model has symmetric optimal solutions, we have tried symmetry-breaking inequalities similar to the ones suggested in Benavent, Corberán, Gouveia, Mourão, and Pinto (2014). However, as no more instances were solved by its inclusion in the models we drooped this additional constraints in the models here proposed.

In this subsection we describe two models for the NOMCARP, named as (nomcar) and (nor). The objective is to assign tasks (corresponding to arcs or edges) to vehicle routes while minimizing the overlapping. One way to measure this overlapping is by counting the number of routes each end node of a task is assigned to.

For p = 1, …, P, and o ∈ N, let 
                              
                                 n
                                 o
                                 p
                              
                            be a binary variable, indicating whether node o is an end node of a task assigned to route p. With these variables the expression 
                              
                                 
                                    ∑
                                    
                                       p
                                       =
                                       1
                                       ,
                                       …
                                       ,
                                       P
                                    
                                 
                                 
                                    n
                                    o
                                    p
                                 
                              
                            represents the number of routes node o belongs to. Thus, in our models, the summation term (2) represents the number of routes graph nodes belong to, and is used to measure the overlapping.

                              
                                 (2)
                                 
                                    
                                       
                                          ∑
                                          
                                             o
                                             ∈
                                             N
                                          
                                       
                                       
                                          ∑
                                          
                                             p
                                             =
                                             1
                                          
                                          P
                                       
                                       
                                          n
                                          o
                                          p
                                       
                                    
                                 
                              
                           
                        

To obtain a model to minimize the overlapping of the vehicle routes, we can replace the objective function (1a) of the MCARP model by the minimization of (2),

                              
                                 (3)
                                 
                                    
                                       min
                                       
                                       
                                          ∑
                                          
                                             o
                                             ∈
                                             N
                                          
                                       
                                       
                                          ∑
                                          
                                             p
                                             =
                                             1
                                          
                                          P
                                       
                                       
                                          n
                                          o
                                          p
                                       
                                    
                                 
                              
                           and include the following constraints, which force 
                              
                                 n
                                 o
                                 p
                              
                            to be one if node o is an end node of a task belonging to vehicle route p:

                              
                                 (4a)
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                
                                                   x
                                                   
                                                      i
                                                      j
                                                   
                                                   p
                                                
                                                ⩽
                                                
                                                   n
                                                   
                                                      o
                                                   
                                                   p
                                                
                                                
                                                ∀
                                                
                                                   (
                                                   i
                                                   ,
                                                   j
                                                   )
                                                
                                                ∈
                                                
                                                   A
                                                   R
                                                
                                                ;
                                                
                                                o
                                                =
                                                i
                                                ,
                                                j
                                                ;
                                                
                                                ∀
                                                p
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (4b)
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                
                                                   x
                                                   
                                                      i
                                                      j
                                                   
                                                   p
                                                
                                                +
                                                
                                                   x
                                                   
                                                      j
                                                      i
                                                   
                                                   p
                                                
                                                ⩽
                                                
                                                   n
                                                   
                                                      o
                                                   
                                                   p
                                                
                                                
                                                ∀
                                                
                                                   (
                                                   i
                                                   ,
                                                   j
                                                   )
                                                
                                                ∈
                                                
                                                   A
                                                   
                                                      E
                                                      R
                                                   
                                                
                                                :
                                                i
                                                <
                                                j
                                                
                                                ;
                                                
                                                o
                                                =
                                                i
                                                ,
                                                j
                                                ;
                                                
                                                ∀
                                                p
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (4c)
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                
                                                   
                                                      n
                                                      o
                                                      p
                                                   
                                                   ∈
                                                
                                                
                                                   {
                                                   0
                                                   ,
                                                   1
                                                   }
                                                
                                                
                                                ∀
                                                
                                                o
                                                ∈
                                                N
                                                ;
                                                
                                                ∀
                                                p
                                             
                                          
                                       
                                    
                                 
                              
                           
                        

Let us denote by (nomcar) the model resulting from the (mcar) model by replacing the objective function (1a) with (3), and including the additional constraints (4a) to (4c).

We observe that for the new given objective (3) we need no information about the vehicle routes that are used to visit the tasks (this statement will be clarified later on). Hence, we can reformulate and simplify the model as follows.

For p = 1, …, P, let 
                              
                                 z
                                 
                                    a
                                    
                                       i
                                       j
                                    
                                    p
                                 
                              
                            be a binary variable equal to one iff task (i, j) ∈ AR
                            is assigned to vehicle p, and let 
                              
                                 z
                                 
                                    e
                                    
                                       i
                                       j
                                    
                                    p
                                 
                              
                            be a binary variable equal to one iff task {i, j} ∈ ER
                            is assigned to vehicle p. Thus, variables 
                              
                                 z
                                 
                                    a
                                    
                                       i
                                       j
                                    
                                    p
                                 
                              
                            and 
                              
                                 z
                                 
                                    e
                                    
                                       i
                                       j
                                    
                                    p
                                 
                              
                            correspond, respectively, to 
                              
                                 x
                                 
                                    i
                                    j
                                 
                                 p
                              
                            for (i, j) ∈ AR
                           , and to 
                              
                                 
                                    x
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 +
                                 
                                    x
                                    
                                       j
                                       i
                                    
                                    p
                                 
                              
                            for {i, j} ∈ ER
                            in the previous models (mcar) and (nomcar).

Consider the following model:

                              
                                 (3)
                                 
                                    
                                       
                                          
                                             
                                                
                                                   (
                                                   nor
                                                   )
                                                
                                                
                                                
                                                
                                                
                                             
                                          
                                          
                                          
                                             
                                          
                                       
                                       
                                          
                                             
                                                N
                                                O
                                                =
                                                min
                                                
                                                   ∑
                                                   
                                                      o
                                                      ∈
                                                      N
                                                   
                                                
                                                
                                                   ∑
                                                   
                                                      p
                                                      =
                                                      1
                                                   
                                                   P
                                                
                                                
                                                   n
                                                   o
                                                   p
                                                
                                             
                                          
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (5a)
                                 
                                    
                                       
                                          
                                             s.t.:
                                          
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      p
                                                      =
                                                      1
                                                   
                                                   P
                                                
                                                
                                                   z
                                                   
                                                      a
                                                      
                                                         i
                                                         j
                                                      
                                                      p
                                                   
                                                
                                                =
                                                1
                                                
                                                ∀
                                                
                                                   (
                                                   i
                                                   ,
                                                   j
                                                   )
                                                
                                                ∈
                                                
                                                   A
                                                   R
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (5b)
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      p
                                                      =
                                                      1
                                                   
                                                   P
                                                
                                                
                                                   z
                                                   
                                                      e
                                                      
                                                         i
                                                         j
                                                      
                                                      p
                                                   
                                                
                                                =
                                                1
                                                
                                                ∀
                                                
                                                   {
                                                   i
                                                   ,
                                                   j
                                                   }
                                                
                                                ∈
                                                
                                                   E
                                                   R
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (5c)
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      
                                                         (
                                                         i
                                                         ,
                                                         j
                                                         )
                                                      
                                                      ∈
                                                      
                                                         A
                                                         R
                                                      
                                                   
                                                
                                                
                                                   q
                                                   
                                                      i
                                                      j
                                                   
                                                
                                                z
                                                
                                                   a
                                                   
                                                      i
                                                      j
                                                   
                                                   p
                                                
                                                +
                                                
                                                   ∑
                                                   
                                                      
                                                         {
                                                         i
                                                         ,
                                                         j
                                                         }
                                                      
                                                      ∈
                                                      
                                                         E
                                                         R
                                                      
                                                   
                                                
                                                
                                                   q
                                                   
                                                      i
                                                      j
                                                   
                                                
                                                z
                                                
                                                   e
                                                   
                                                      i
                                                      j
                                                   
                                                   p
                                                
                                                ⩽
                                                W
                                                
                                                ∀
                                                p
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (5d)
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                z
                                                
                                                   a
                                                   
                                                      i
                                                      j
                                                   
                                                   p
                                                
                                                ⩽
                                                
                                                   n
                                                   
                                                      o
                                                   
                                                   p
                                                
                                                
                                                ∀
                                                
                                                   (
                                                   i
                                                   ,
                                                   j
                                                   )
                                                
                                                ∈
                                                
                                                   A
                                                   R
                                                
                                                ;
                                                o
                                                =
                                                i
                                                ,
                                                j
                                                ;
                                                
                                                ∀
                                                p
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (5e)
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                z
                                                
                                                   e
                                                   
                                                      i
                                                      j
                                                   
                                                   p
                                                
                                                ⩽
                                                
                                                   n
                                                   
                                                      o
                                                   
                                                   p
                                                
                                                
                                                ∀
                                                
                                                   {
                                                   i
                                                   ,
                                                   j
                                                   }
                                                
                                                ∈
                                                
                                                   E
                                                   R
                                                
                                                ;
                                                o
                                                =
                                                i
                                                ,
                                                j
                                                ;
                                                
                                                ∀
                                                p
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (5f)
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                
                                                   z
                                                   
                                                      a
                                                      
                                                         i
                                                         j
                                                      
                                                      p
                                                   
                                                   ∈
                                                
                                                
                                                   {
                                                   0
                                                   ,
                                                   1
                                                   }
                                                
                                                
                                                ∀
                                                
                                                   (
                                                   i
                                                   ,
                                                   j
                                                   )
                                                
                                                ∈
                                                
                                                   A
                                                   R
                                                
                                                ;
                                                
                                                ∀
                                                p
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (5g)
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                
                                                   z
                                                   
                                                      e
                                                      
                                                         i
                                                         j
                                                      
                                                      p
                                                   
                                                   ∈
                                                
                                                
                                                   {
                                                   0
                                                   ,
                                                   1
                                                   }
                                                
                                                
                                                ∀
                                                
                                                   {
                                                   i
                                                   ,
                                                   j
                                                   }
                                                
                                                ∈
                                                
                                                   E
                                                   R
                                                
                                                ;
                                                
                                                ∀
                                                p
                                             
                                          
                                       
                                    
                                 
                              
                           
                           
                              
                                 (4c)
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                
                                                
                                                   
                                                      n
                                                      o
                                                      p
                                                   
                                                   ∈
                                                
                                                
                                                   {
                                                   0
                                                   ,
                                                   1
                                                   }
                                                
                                                
                                                ∀
                                                
                                                o
                                                ∈
                                                N
                                                ;
                                                
                                                ∀
                                                p
                                             
                                          
                                       
                                    
                                 
                              
                           In the (nor) model the objective function (3) minimizes the number of nodes visits. Constraints (5a) and (5b) assign each task to only one vehicle, and (5c) ensures that this assignment respects the vehicles capacity. Linking constraints (5d) and (5e) are needed to relate the assigned tasks with the task nodes variables.

In order to see that the two models, (nor) and (nomcar), are equivalent, we state and prove (see Appendix A) the following result.

                              Proposition
                              Given a feasible solution of any one of the models (nor) and (nomcar), there is a feasible solution of the other model, with the same objective value.

We can use the optimal value of the problem defined in Section 3.3 to define a tight upper bound for the non-overlapping constraint in the model for the BCARP, named as (bcar). As referred before, the BCARP is a MCARP with a bounded number of overlapping areas.

Besides (1a)–(1l), which are taken from the MCARP model, we add a constraint, (6), imposing the previously mentioned upper bound, NO, on the number of times that the nodes are shared, and the linking constraints between node and routing variables are also needed and stated by (4a)–(4c).

                           
                              (6)
                              
                                 
                                    
                                       ∑
                                       
                                          o
                                          ∈
                                          N
                                       
                                    
                                    
                                       ∑
                                       
                                          p
                                          =
                                          1
                                       
                                       P
                                    
                                    
                                       n
                                       o
                                       p
                                    
                                    ⩽
                                    N
                                    O
                                 
                              
                           
                        
                     

As we will see in the computational results, the MIP solver, within a time limit of one hour, is not able to find feasible solutions for the biggest tested instances with the (bcar) model. In order to overcome this disadvantage we have developed a heuristic, described in Section 4.

To solve instances of the BCARP we hopefully solve the two models, (nor) and (bcar) (see Section 4.1). However, in situations where the MIP solver does not provide the optimal solution within the prescribed time limit for one of the two models, we use heuristics as detailed in Sections 4.2 and 4.3. In the computational results section, we compare the solutions produced by the heuristic and by the (bcar) model, when possible.

In theory, optimal solutions for BCARP instances may be obtained if a MIP solver is sequentially applied to the two models. To solve a given instance, we first solve the corresponding (nor) model to identify the upper bound on the number of shared nodes, NO. The model (bcar) is then solved. This methodology, as it will be computationally confirmed in Section 6, only works for small instances, since the MIP solver used (CPLEX) fails to solve (bcar) or even (nor) for medium size instances (from 30/40 nodes, 100/90 links and 11 vehicles for mval instances and from 145 nodes, 360 links and 8 vehicles for lpr instances) within the time limit of one hour. Feasible solutions for the bigger instances are found through the heuristics next detailed.

Whenever the MIP solver fails to solve to optimality or even to find a feasible solution for (nor) we resort to a heuristic. With that purpose, P seed-tasks are first selected, chosen far from the depot and from each other, and assigned to the vehicles. Let vp
                         be the seed-task of vehicle p. A new objective function which measures the distances between tasks and the seed-tasks is defined. Let 
                           
                              d
                              i
                              s
                              
                                 t
                                 
                                    u
                                    
                                       v
                                       p
                                    
                                 
                              
                           
                         be the undirected distance between task u = (i, j) ∈ AR
                         or u = {i, j} ∈ ER
                         and the seed-task vp
                         ∈ AR
                        ∪ER
                        , i.e., the shortest path deadheading time computed ignoring the orientation of the arcs, and not including du
                         nor 
                           
                              d
                              
                                 v
                                 p
                              
                           
                        . The objective function (3) is replaced by

                           
                              (7)
                              
                                 
                                    min
                                    
                                       ∑
                                       
                                          p
                                          =
                                          1
                                       
                                       P
                                    
                                    
                                       (
                                       
                                          ∑
                                          
                                             u
                                             ∈
                                             
                                                A
                                                R
                                             
                                          
                                       
                                       d
                                       i
                                       s
                                       
                                          t
                                          
                                             u
                                             
                                                v
                                                p
                                             
                                          
                                       
                                       z
                                       
                                          a
                                          u
                                          p
                                       
                                       +
                                       
                                          ∑
                                          
                                             u
                                             ∈
                                             
                                                E
                                                R
                                             
                                          
                                       
                                       d
                                       i
                                       s
                                       
                                          t
                                          
                                             u
                                             
                                                v
                                                p
                                             
                                          
                                       
                                       z
                                       
                                          e
                                          u
                                          p
                                       
                                       )
                                    
                                 
                              
                           
                        and a feasible solution to (nor) is obtained by (7) within constraints (5a), (5b), (5c), (5f) and (5g).

We first observe that this variant of the (nor), named as (hnor), is easier to solve since we have omitted the variables 
                           
                              n
                              o
                              p
                           
                         and the corresponding constraints. Moreover, with the fixed seeds and (7) the symmetric assignments of the (nor) model are avoided. The underlying idea of the new objective is to fix tasks that are close to the seed-tasks.

The optimal solution for (hnor) is then used as follows: tasks such that the two end-nodes belong to only one vehicle in the (hnor) solution are fixed to that vehicle, and we then solve a restricted (nor) with these tasks fixed. By first solving the (hnor), the restricted (nor) becomes easier to solve (through the fixing of variables – corresponding to task assignments).

The value of NO to be used in the (bcar) model, and in the 2-phase heuristic described in the next section, is then the best of the following two values: (i) the overlapping in the solution described above, computed by (2); (ii) the best value obtained by the MIP solver for the (nor) model.

A feasible solution for (bcar) can be obtained by solving a mixed arc routing problem per vehicle, after solving (nor). In the first phase, model (nor) is used to obtain an assignment of tasks to vehicles, and then, in the second phase, this assignment is used to build the routes of each vehicle.

Note that each vehicle subproblem is non-capacitated, as (nor) assigns tasks taking vehicle capacities into account. The resulting subproblems are thus substantially easier to solve than the original MCARP, since the values of the variables for the assignment of tasks to routes are already chosen, except for the direction for servicing the required edges.

In the computational section we compare, whenever possible, the solutions obtained by this heuristic with the solutions obtained with (bcar).

As referred, “nice” solutions stand for connected and compact solutions. To evaluate the connectivity and the compactness of a solution we propose three measures. We opted for normalized measures as this helps examining and classifying solutions of different characteristics, as well as isolated solutions. The proposed measures are designed mainly to evaluate solutions in urban environments. It is often the case in many cities that the geometry of streets is rectangular, and |AD
                     | is small when compared with |AR
                     ∪ER
                     |.

                        
                           •
                           
                              Connectivity Index (CI) is the average number of connected components (CC) of the set of tasks in the service zones, given by 
                                 
                                    C
                                    I
                                    =
                                    
                                       
                                          C
                                          C
                                       
                                       
                                          |
                                          r
                                          o
                                          u
                                          t
                                          e
                                          s
                                          |
                                       
                                    
                                    ,
                                 
                               where |routes| is the number of routes of the solution under evaluation. In the “ideal” situation the tasks of each zone are all connected and the value of CI is equal to one.


                              Average Tasks Distance (ATD) is the average of the shortest path deadheading times between tasks within service zones, computed by Eq. (8),

                                 
                                    (8)
                                    
                                       
                                          A
                                          T
                                          D
                                          =
                                          
                                             1
                                             
                                                |
                                                r
                                                o
                                                u
                                                t
                                                e
                                                s
                                                |
                                             
                                          
                                          
                                          
                                             ∑
                                             
                                                p
                                                =
                                                1
                                             
                                             P
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      a
                                                      ,
                                                      b
                                                      
                                                      served
                                                      
                                                      by
                                                      
                                                      p
                                                   
                                                
                                                
                                                   D
                                                   
                                                      a
                                                      b
                                                   
                                                
                                             
                                             
                                                |
                                                t
                                                a
                                                s
                                                k
                                                p
                                                a
                                                i
                                                r
                                                s
                                                |
                                             
                                          
                                       
                                    
                                 
                              where 
                                 
                                    
                                       |
                                       t
                                       a
                                       s
                                       k
                                       p
                                       a
                                       i
                                       r
                                       s
                                       |
                                    
                                    =
                                    
                                       
                                          
                                             |
                                          
                                          
                                             A
                                             R
                                          
                                          ∪
                                          
                                             E
                                             R
                                          
                                          
                                             |
                                             ×
                                             (
                                             |
                                          
                                          
                                             A
                                             R
                                          
                                          ∪
                                          
                                             E
                                             R
                                          
                                          
                                             |
                                             −
                                             |
                                             r
                                             o
                                             u
                                             t
                                             e
                                             s
                                             |
                                             )
                                          
                                       
                                       
                                          2
                                          ×
                                          
                                             
                                                |
                                                r
                                                o
                                                u
                                                t
                                                e
                                                s
                                                |
                                             
                                             2
                                          
                                       
                                    
                                 
                               represents an approximation for the mean value of the number of task pairs per route, and Dab
                               is the minimum deadheading time from task a to task b, not including da
                               nor db
                              . These values represent the minimum between at most eight shortest deadheading travel times, as we are dealing with mixed graphs. In fact, if both a, b ∈ ER
                              , eight distances are considered to compute Dab
                               (see Mourão et al., 2009), resulting in a symmetric distance matrix D. Note that, “nicer” solutions are obtained with a smaller ATD value. We can observe that routing distances tend to increase when the shape of the service zones deviates from “nice” compact shapes such as circles or squares.


                              Routes Overlapping Index (ROI), given by Eq. (9), measures the node overlapping in the solution obtained when compared with the one in an “ideal” solution. Again, smaller values of this index correspond to “nicer” solutions.

                                 
                                    (9)
                                    
                                       
                                          R
                                          O
                                          I
                                          =
                                          
                                             
                                                N
                                                O
                                                −
                                                |
                                                N
                                                |
                                             
                                             
                                                
                                                   
                                                      (
                                                      
                                                         
                                                            |
                                                            r
                                                            o
                                                            u
                                                            t
                                                            e
                                                            s
                                                            |
                                                         
                                                      
                                                      +
                                                      
                                                         
                                                            |
                                                            N
                                                            |
                                                         
                                                      
                                                      −
                                                      1
                                                      )
                                                   
                                                   2
                                                
                                                −
                                                
                                                   |
                                                   N
                                                   |
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           

In Eq. (9), NO − |N| is the node overlapping of the solution under evaluation, with NO here computed by (2), while 
                        
                           
                              
                                 (
                                 
                                    
                                       |
                                       r
                                       o
                                       u
                                       t
                                       e
                                       s
                                       |
                                    
                                 
                                 +
                                 
                                    
                                       |
                                       N
                                       |
                                    
                                 
                                 −
                                 1
                                 )
                              
                              2
                           
                           −
                           
                              |
                              N
                              |
                           
                        
                      represents the node overlapping in an “ideal” solution for an hypothetical instance, as next detailed.

In order to motivate the index ROI, we consider a hypothetical instance with |N| = n
                     2 nodes and |routes| = r
                     2 service zones, with n and r integer and n − 1 multiple of r. Assume further that nodes are placed uniformly in a square in the plane. In the “ideal” partition of this square, each of the |routes| service zones is contained in a smaller square with [1 + (n − 1)/r]2 nodes each (see Fig. 2
                     , where n = 13 and r = 3). Most nodes belong to only one of these squares, others belong to two and some belong to four. The sum of the number of squares each node belongs to is given by |routes| × [1 + (n − 1)/r]2 = (r + n − 1)2. Hence, the overlapping is calculated by 
                        
                           
                              
                                 (
                                 
                                    
                                       |
                                       r
                                       o
                                       u
                                       t
                                       e
                                       s
                                       |
                                    
                                 
                                 +
                                 
                                    
                                       |
                                       N
                                       |
                                    
                                 
                                 −
                                 1
                                 )
                              
                              2
                           
                           −
                           
                              |
                              N
                              |
                           
                        
                     . We use this formula even if the above assumptions on |N| and |routes| are not satisfied. Observe that no conditions on the tasks are imposed. It may happen that some nodes that belong to more than one square are only visited by one route from a single sector. In order to have it simpler, the definition of the third measure omit these situations. Note that, this simplification does not spoil the “significance” and “information” of the measure.


                     Table 1
                      presents the values for the “nice” solution measures, that are used to compare connectivity and compactness for the optimal lpra2 solution (Fig. 1) computed with the three models ((mcar), connectivity model, and (bcar)). This instance has 104 tasks and 3 routes are needed. The connectivity index, CI, is higher for the MCARP solution, thus indicating a less “nice” solution. The BCARP model, although not explicitly enforcing the connectivity constraints, produces solutions that are, in terms of connectivity, as good as the ones obtained by the connectivity model. We observe a similar behavior concerning the other measures, ATD and ROI; the solutions obtained from the MCARP model are always worse than the ones obtained from the connectivity model, which, in turn, are outperformed by the solutions generated by the BCARP model.

Through our computational experiments, we will confirm these results, namely we will see that feasible vehicle routes obtained with the BCARP model are substantially more compact and then more attractive to the users.

In this section we describe computational results from the approaches previously proposed and discussed. The results for the MCARP and BCARP models and the heuristic are analyzed and compared under three different view-points to evaluate the effect of the new overlapping constraint on the routes:

                        
                           (i)
                           The impact on the objective values (total traveling time).

The impact on the gap values and CPU times.

The shape of the solutions.

Exact and heuristic approaches are also compared for the BCARP to access the quality of the proposed heuristic, and also to evaluate the size of the instances that can be solved to optimality by the proposed ILP model.

The shape of the solutions is evaluated according to the measures described in Section 5.

The computational results were obtained with the MIP solver CPLEX 12.5, on a personal computer (Intel Core i7-3520M 2.90 gigahertz processor and 8 gigabytes of RAM, under 64-bit Windows 7 Professional), for two sets of benchmark MCARP instances detailed in Section 6.1. The analysis of the results is provided in Section 6.2.

Computational experiments were conducted with the MCARP instances also used in Belenguer et al. (2006) and Gouveia et al. (2010), named lpr and mval. The instances characteristics are displayed in Tables 2
                         and 3
                        .

The first column in these tables indicates the instance name, followed by the number of nodes, |N|. Third to fifth columns depict the total number of links, |A′| = |AD
                        | + |AR
                        | + |ER
                        |, the number of required arcs, |AR
                        |, and the number of required edges, |ER
                        |. The number of vehicles, P, its capacity, W, and the total network demand, QT
                        , are shown in the three last columns. In the 34 mval instances (Table 3) all links have an associated service, and then the total number of links, |A′|, is given by summing the number of arc and edge tasks, |AR
                        | + |ER
                        |.

Relevant computational results, comparing solution values deviations and CPU times of the methods, are displayed in Tables 4
                         and 5
                        , respectively for the mval and for the lpr instances. As before, the first column indicates the instance name.

The second column in Tables 4 and 5 give information on the increase in (bcar) objective value, measured in percentage, from the optimum value of (mcar), while column three depicts the same percentage comparing the solution values of the BCARP heuristic with (mcar) optimum values.

The second column (Tables 4 and 5), shows, as expected, an increase in (bcar) feasible solution values when compared with (mcar) optimum values.

From the values reported in the third column, we may realize that the heuristic performs better on the lpr instances rather than on the mval ones. In fact, it produces significantly smaller deviations for the lpr. Regarding the increase on the objective values, the behavior of (bcar) and the heuristic are similar, the latter being able to solve all the instances.

To evaluate the impact of the extra constraints limiting the overlapping, we also compare gap values (in percentage) and CPU times (in seconds) for the MCARP with the ones of the two proposed methods for the BCARP, solving the model exactly and using the heuristic (Tables 4 and 5, columns 4–9).

A time limit of one hour was imposed on the MIP solver to run each model, (nor), (bcar), and the model defined for the second phase of the heuristic. The CPU times presented in columns 7 and 9, respectively for the (bcar) and the heuristic, already include the (nor) CPU time to enable comparisons with the (mcar) CPU times. This also justifies the imposed time limit of two hours for (mcar). The instances for which (nor) was optimally solved by the MIP solver within one hour are marked with * in column 6 (the (bcar) gaps).

Gap values are computed by 
                              
                                 g
                                 a
                                 p
                                 =
                                 
                                    
                                       U
                                       b
                                       −
                                       L
                                       b
                                    
                                    
                                       L
                                       b
                                    
                                 
                                 ×
                                 100
                                 %
                                 ,
                              
                            where Ub is the MIP solver upper bound for the respective model. The MCARP lower bound (LbF) is computed using the MIP solver with the models by Gouveia et al. (2010), within a time limit of two hours.

Since a lower bound for the MCARP is also a lower bound for the BCARP, the gap for (bcar) is measured with the lower bound (LbB) given by the maximum between (LbF) and the (bcar) lower bound obtained by the MIP solver within a time limit of one hour. The heuristic gap is also given in terms of the (bcar) lower bound (LbB), as this value represents a valid lower bound for the problem under study.

More feasible solutions are found (34 against 24 for mval, and 11 against 7 for lpr) by using (mcar) rather than with (bcar). However, comparing the CPU times (columns 5 and 7), we may observe cases for which (bcar) feasible solutions are obtained faster than the (mcar) ones. Concerning (bcar), 11 out of 34 and 5 out of 15 optimal solutions are found (respectively for mval and lpr instances), whilst (mcar) optimally solves 12 more mval and the same lpr instances. These observations appear to indicate that (bcar) is harder to solve than (mcar).

The heuristic, that achieves feasible solutions with reasonable gap values for all instances, appears to be a useful method to solve the bigger sized instances.

We should emphasize that the bigger gap values, associated with the heuristic upper bounds, refer to instances that were not solved by the exact models. In many situations, the MIP solver was not even able to find a feasible solution within the time limit.

Here we compare the solutions produced by BCARP (either by solving the problem exactly or by the heuristic) with the solutions of the MCARP in terms of the three indexes.

As the results show (see Tables 6
                            and 7
                           ), together with its simplicity, the other advantage of the overlapping constraints here defined is that they also produce good shape solutions in what concerns the compactness and the connectivity.

In these tables, results are grouped for evaluating connectivity (CI) and compactness (ATD and ROI). In each of these groups, columns (mcar), (bcar) and H present the corresponding values for models (mcar) and (bcar) and for the heuristic, respectively. As usual, the first column refers to the instance name.

It should be remarked that model (nor), through a MIP solver or the heuristic, assigns tasks to vehicles, and its solutions are used both by (bcar) and the BCARP heuristic. That is, the minimum objective value computed, NO, is imposed as an upper bound for the number of shared nodes in (bcar), and the tasks assigned to each vehicle in the best (nor) solution are used by the heuristic to design each vehicle route.

Note that a connectivity index value equal to one refers to an optimal solution under this measure, with one connected component per route, as it is observed (see Tables 6 and 7) for the majority of the cases for both the (bcar) and the heuristic, and contrary to the values achieved by (mcar). In fact, even for larger lpr instances, when available, this comparison favors the heuristic that produces values equal to 1 (except for lpra3), whereas the corresponding values for (mcar) are greater than 10.

Again, routes compactness, evaluated through indexes ATD and ROI (Tables 6 and 7), show the advantages of imposing the new constraint.

Although identical values are obtained by (bcar) and the heuristic for the connectivity and the compactness indexes, it should be emphasized that the second phase of the heuristic always gets a feasible solution within the time limit of one hour.

To sum up, solution objective values given by (bcar) greater than the ones from (mcar) are expected, since additional conditions are imposed to the vehicle routes. Nevertheless, these increases in the objective values may be considered acceptable, as they are compensated by “nicer” solution shapes.

@&#CONCLUSIONS@&#

In this paper we have introduced the BCARP problem, which is defined as the MCARP with an upper bound on the number of common nodes to different routes.

Quite often the optimal solutions produced by MCARP do not exhibit nice characteristics to be implemented in practice, namely the shape of the routes are not attractive to practitioners.

By defining the concept of overlapped nodes and by imposing a constraint bounding the number of such nodes on the solutions of the original MCARP, our results show that the resulting solutions exhibit much better characteristics according to three “nicety” measures proposed in the paper.

As expected the optimal solutions of the new problem are more costly than the corresponding optimal solutions of the problem without the extra constraint. However, the increase in the cost is acceptable when we compare what we gain by making the routes “nicer”.

We have also developed a heuristic that produces acceptable solutions for the instances that are not easy solved by the proposed MIP model. This method also provides “nice” feasible solutions, with acceptable gap values in small computational times. The heuristic suggested in Section 4.2 for the NOMCARP subproblem allows us to improve the feasible solutions for the BCARP as well as to improve the “nice” characteristics.

Future work will deepen the study on the properties of attractive routes. These will also address the inclusion or exclusion of the depot from the route shaping process.

@&#ACKNOWLEDGMENTS@&#

This work is supported by National Funding from FCT-Fundação para a Ciência e a Tecnologia, under the projects PEsT-OE/MAT/ UI0152 and PTDC/EGE-GES/121406/2010. The authors wish to thank the two anonymous referees for their careful reading of the manuscript and their comments and suggestions that have contributed to improve the paper.


                     
                        Proof
                        Given a feasible solution 
                              
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 f
                                 ,
                                 n
                                 )
                              
                            of (nomcar), consider 
                              
                                 (
                                 z
                                 ,
                                 n
                                 )
                              
                            with the same vector 
                              
                                 n
                                 ,
                              
                            and 
                              z
                            defined by 
                              
                                 z
                                 
                                    a
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 =
                                 
                                    x
                                    
                                       i
                                       j
                                    
                                    p
                                 
                              
                            for (i, j) ∈ AR
                            and 
                              
                                 z
                                 
                                    e
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 =
                                 
                                    x
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 +
                                 
                                    x
                                    
                                       j
                                       i
                                    
                                    p
                                 
                              
                            for {i, j} ∈ ER
                           . We show that 
                              
                                 (
                                 z
                                 ,
                                 n
                                 )
                              
                            is feasible for (nor) and has the same objective value as the given solution of (nomcar). Indeed, the objective functions are the same; satisfaction of constraints (5a) and (5b) follows from the definition of 
                              z
                            and from (1b) and (1c); satisfaction of constraints (5d) and (5e) also follows from the definition of the variables and from (4a) and (4b); satisfaction of constraints (5f) and (5g) follows from (1b), (1c), and (1j). To see that capacity constraints (5c) are satisfied, observe that for all p we have

                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      
                                                         (
                                                         i
                                                         ,
                                                         j
                                                         )
                                                      
                                                      ∈
                                                      
                                                         A
                                                         R
                                                      
                                                   
                                                
                                                
                                                   q
                                                   
                                                      i
                                                      j
                                                   
                                                
                                                z
                                                
                                                   a
                                                   
                                                      i
                                                      j
                                                   
                                                   p
                                                
                                             
                                          
                                          
                                          
                                             
                                                +
                                                
                                                
                                                   ∑
                                                   
                                                      
                                                         {
                                                         i
                                                         ,
                                                         j
                                                         }
                                                      
                                                      ∈
                                                      
                                                         E
                                                         R
                                                      
                                                   
                                                
                                                
                                                   q
                                                   
                                                      i
                                                      j
                                                   
                                                
                                                z
                                                
                                                   e
                                                   
                                                      i
                                                      j
                                                   
                                                   p
                                                
                                                =
                                                
                                                   ∑
                                                   
                                                      (
                                                      i
                                                      ,
                                                      j
                                                      )
                                                      ∈
                                                      R
                                                   
                                                
                                                
                                                   q
                                                   
                                                      i
                                                      j
                                                   
                                                
                                                
                                                   x
                                                   
                                                      i
                                                      j
                                                   
                                                   p
                                                
                                                
                                                =
                                                
                                                
                                                   ∑
                                                   
                                                      (
                                                      s
                                                      ,
                                                      j
                                                      )
                                                      ∈
                                                      A
                                                   
                                                
                                                
                                                   f
                                                   
                                                      s
                                                      j
                                                   
                                                   p
                                                
                                                ≤
                                                W
                                                
                                                   ∑
                                                   
                                                      (
                                                      s
                                                      ,
                                                      j
                                                      )
                                                      ∈
                                                      A
                                                   
                                                
                                                
                                                   y
                                                   
                                                      s
                                                      j
                                                   
                                                   p
                                                
                                                ≤
                                                W
                                                ,
                                             
                                          
                                       
                                    
                                 
                              
                           where the first equality follows from the definition of the 
                              z
                            variables, and the second from constraints (1g). The first inequality follows from (1i), as {(s, j) ∈ A}⊆AD
                           , and the second from (1e).

Conversely, consider a solution 
                              
                                 (
                                 z
                                 ,
                                 n
                                 )
                              
                            feasible for (nor). We build a solution 
                              
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 f
                                 ,
                                 n
                                 )
                              
                            for (nomcar) with the same 
                              n
                            variables. For each p, if 
                              
                                 
                                    z
                                    p
                                 
                                 =
                                 0
                              
                            let 
                              
                                 
                                    x
                                    p
                                 
                                 =
                                 0
                                 ,
                              
                           
                           
                              
                                 
                                    y
                                    p
                                 
                                 =
                                 0
                              
                            and 
                              
                                 
                                    f
                                    p
                                 
                                 =
                                 0
                              
                           ; otherwise, let 
                              
                                 
                                    x
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 =
                                 z
                                 
                                    a
                                    
                                       i
                                       j
                                    
                                    p
                                 
                              
                            for (i, j) ∈ AR
                           , and 
                              
                                 
                                    x
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 =
                                 z
                                 
                                    e
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 ,
                              
                           
                           
                              
                                 
                                    x
                                    
                                       j
                                       i
                                    
                                    p
                                 
                                 =
                                 0
                              
                            for {i, j} ∈ ER
                           .

To define variables 
                              
                                 y
                                 
                                    i
                                    j
                                 
                                 p
                              
                            and 
                              
                                 
                                    f
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 ,
                              
                            find a route Up
                            = (u
                           1, u
                           2, …, uT
                           ) starting and ending in the depot s, passing through all arcs u = (i, j) such that 
                              
                                 
                                    x
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 =
                                 1
                                 ,
                              
                            without visiting node s except as the start and end of the route. Such a route exists because of the strong connectivity assumption on the subgraph of G spanned by N∖{s}, although it may pass more than once on some arcs. Observe that u
                           1, …, uT
                            depend on p, but to make the notation lighter we omit the superscript p from this and other terms for which that dependence follows from the context.

Let 
                              
                                 y
                                 
                                    i
                                    j
                                 
                                 p
                              
                            be the number of times arc (i, j) is traversed without service in route Up
                           , that is, 
                              
                                 
                                    y
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 =
                                 
                                    |
                                    
                                       {
                                       t
                                       :
                                       
                                          u
                                          t
                                       
                                       =
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                       
                                       }
                                    
                                    |
                                 
                              
                            if (i, j) ∈ AD
                            and 
                              
                                 
                                    y
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 =
                                 
                                    |
                                    
                                       {
                                       t
                                       :
                                       
                                          u
                                          t
                                       
                                       =
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                       
                                       }
                                    
                                    |
                                 
                                 −
                                 
                                    x
                                    
                                       i
                                       j
                                    
                                    p
                                 
                              
                            if (i, j) ∈ R. 
                              
                                 f
                                 
                                    i
                                    j
                                 
                                 p
                              
                            can be defined as follows. For t = 1, …, T, let 
                              
                                 φ
                                 
                                    u
                                    t
                                 
                              
                            be the total demand in the set of arcs St
                            = {ut
                           , …, uT
                           } (without repetitions) that is satisfied in route p, that is 
                              
                                 
                                    φ
                                    
                                       u
                                       t
                                    
                                 
                                 =
                                 
                                    ∑
                                    
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                       
                                       ∈
                                       
                                          S
                                          t
                                       
                                       ∩
                                       R
                                    
                                 
                                 
                                    q
                                    
                                       i
                                       j
                                    
                                 
                                 
                                    x
                                    
                                       i
                                       j
                                    
                                    p
                                 
                              
                           . Finally, let 
                              
                                 
                                    f
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 =
                                 
                                    ∑
                                    
                                       t
                                       :
                                       
                                          u
                                          t
                                       
                                       =
                                       
                                          (
                                          i
                                          ,
                                          j
                                          )
                                       
                                    
                                 
                                 
                                    φ
                                    
                                       u
                                       t
                                    
                                 
                              
                           . Observe that 
                              
                                 
                                    f
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 =
                                 0
                              
                            if (i, j)∉Up
                           .

We show that 
                              
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 f
                                 ,
                                 n
                                 )
                              
                            is feasible for (nomcar). Satisfaction of constraints (1j), (1k), (1l) and (4c) follows from the definition of the variables; constraints (1b) and (1c) follow from the definition of 
                              x
                            and from (5a) and (5b).

To see that constraints (1d) are satisfied, let p ∈ {1, …, P} and i ∈ N. Hence, from the definition of 
                              
                                 
                                    y
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 ,
                              
                           
                           
                              
                                 
                                    
                                       
                                          
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      j
                                                      :
                                                      (
                                                      i
                                                      ,
                                                      j
                                                      )
                                                      ∈
                                                      A
                                                   
                                                
                                                
                                                   y
                                                   
                                                      i
                                                      j
                                                   
                                                   p
                                                
                                                −
                                                
                                                   ∑
                                                   
                                                      j
                                                      :
                                                      (
                                                      j
                                                      ,
                                                      i
                                                      )
                                                      ∈
                                                      A
                                                   
                                                
                                                
                                                   y
                                                   
                                                      j
                                                      i
                                                   
                                                   p
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                             =
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      j
                                                      :
                                                      
                                                         (
                                                         i
                                                         ,
                                                         j
                                                         )
                                                      
                                                      ∈
                                                      
                                                         A
                                                         D
                                                      
                                                   
                                                
                                                
                                                   |
                                                
                                                
                                                   {
                                                   t
                                                   :
                                                   
                                                      u
                                                      t
                                                   
                                                   =
                                                   
                                                      (
                                                      i
                                                      ,
                                                      j
                                                      )
                                                   
                                                   }
                                                
                                                
                                                   |
                                                   −
                                                
                                                
                                                   ∑
                                                   
                                                      j
                                                      :
                                                      
                                                         (
                                                         j
                                                         ,
                                                         i
                                                         )
                                                      
                                                      ∈
                                                      
                                                         A
                                                         D
                                                      
                                                   
                                                
                                                
                                                   |
                                                   
                                                      {
                                                      t
                                                      :
                                                      
                                                         u
                                                         t
                                                      
                                                      =
                                                      
                                                         (
                                                         j
                                                         ,
                                                         i
                                                         )
                                                      
                                                      }
                                                   
                                                   |
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                
                                                +
                                                
                                                   ∑
                                                   
                                                      j
                                                      :
                                                      (
                                                      i
                                                      ,
                                                      j
                                                      )
                                                      ∈
                                                      R
                                                   
                                                
                                                
                                                   (
                                                   
                                                      |
                                                   
                                                   
                                                      {
                                                      t
                                                      :
                                                      
                                                         u
                                                         t
                                                      
                                                      =
                                                      
                                                         (
                                                         i
                                                         ,
                                                         j
                                                         )
                                                      
                                                      }
                                                   
                                                   
                                                      |
                                                      −
                                                   
                                                   
                                                      x
                                                      
                                                         i
                                                         j
                                                      
                                                      p
                                                   
                                                   )
                                                
                                                
                                                −
                                                
                                                
                                                   ∑
                                                   
                                                      j
                                                      :
                                                      (
                                                      j
                                                      ,
                                                      i
                                                      )
                                                      ∈
                                                      R
                                                   
                                                
                                                
                                                   (
                                                   
                                                      |
                                                   
                                                   
                                                      {
                                                      t
                                                      :
                                                      
                                                         u
                                                         t
                                                      
                                                      =
                                                      
                                                         (
                                                         j
                                                         ,
                                                         i
                                                         )
                                                      
                                                      }
                                                   
                                                   
                                                      |
                                                      −
                                                   
                                                   
                                                      x
                                                      
                                                         j
                                                         i
                                                      
                                                      p
                                                   
                                                   )
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                             =
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      j
                                                      :
                                                      (
                                                      i
                                                      ,
                                                      j
                                                      )
                                                      ∈
                                                      A
                                                   
                                                
                                                
                                                   |
                                                
                                                
                                                   {
                                                   t
                                                   :
                                                   
                                                      u
                                                      t
                                                   
                                                   =
                                                   
                                                      (
                                                      i
                                                      ,
                                                      j
                                                      )
                                                   
                                                   }
                                                
                                                
                                                   |
                                                   −
                                                   
                                                
                                                
                                                   ∑
                                                   
                                                      j
                                                      :
                                                      (
                                                      j
                                                      ,
                                                      i
                                                      )
                                                      ∈
                                                      A
                                                   
                                                
                                                
                                                   |
                                                   
                                                      {
                                                      t
                                                      :
                                                      
                                                         u
                                                         t
                                                      
                                                      =
                                                      
                                                         (
                                                         j
                                                         ,
                                                         i
                                                         )
                                                      
                                                      }
                                                   
                                                   |
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                          
                                             
                                                
                                                −
                                                
                                                
                                                   ∑
                                                   
                                                      j
                                                      :
                                                      (
                                                      i
                                                      ,
                                                      j
                                                      )
                                                      ∈
                                                      R
                                                   
                                                
                                                
                                                   x
                                                   
                                                      i
                                                      j
                                                   
                                                   p
                                                
                                                +
                                                
                                                   ∑
                                                   
                                                      j
                                                      :
                                                      (
                                                      j
                                                      ,
                                                      i
                                                      )
                                                      ∈
                                                      R
                                                   
                                                
                                                
                                                   x
                                                   
                                                      j
                                                      i
                                                   
                                                   p
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                             =
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      j
                                                      :
                                                      (
                                                      j
                                                      ,
                                                      i
                                                      )
                                                      ∈
                                                      R
                                                   
                                                
                                                
                                                   x
                                                   
                                                      j
                                                      i
                                                   
                                                   p
                                                
                                                −
                                                
                                                   ∑
                                                   
                                                      j
                                                      :
                                                      (
                                                      i
                                                      ,
                                                      j
                                                      )
                                                      ∈
                                                      R
                                                   
                                                
                                                
                                                   x
                                                   
                                                      i
                                                      j
                                                   
                                                   p
                                                
                                                .
                                             
                                          
                                       
                                    
                                 
                              
                           The last equality follows from Up
                            being a route, so the two left sums in the third expression are equal for all i ∈ N.

Satisfaction of constraints (1e) follows from the fact that route Up
                            leaves s at most once, through a non-service arc, for each p ∈ {1, …, P}. Now from the definition of 
                              
                                 f
                                 ,
                              
                            we have for all p and i ∈ N∖{s}

                              
                                 
                                    
                                       
                                          ∑
                                          
                                             j
                                             :
                                             (
                                             j
                                             ,
                                             i
                                             )
                                             ∈
                                             A
                                          
                                       
                                       
                                          f
                                          
                                             j
                                             i
                                          
                                          p
                                       
                                       −
                                       
                                          ∑
                                          
                                             j
                                             :
                                             (
                                             i
                                             ,
                                             j
                                             )
                                             ∈
                                             A
                                          
                                       
                                       
                                          f
                                          
                                             i
                                             j
                                          
                                          p
                                       
                                       =
                                       
                                          ∑
                                          
                                             t
                                             :
                                             
                                                u
                                                t
                                             
                                             =
                                             
                                                (
                                                j
                                                ,
                                                i
                                                )
                                             
                                             ∈
                                             A
                                          
                                       
                                       
                                          φ
                                          
                                             u
                                             t
                                          
                                       
                                       −
                                       
                                          ∑
                                          
                                             
                                                t
                                                ′
                                             
                                             :
                                             
                                                u
                                                
                                                   t
                                                   ′
                                                
                                             
                                             =
                                             
                                                (
                                                i
                                                ,
                                                k
                                                )
                                             
                                             ∈
                                             A
                                          
                                       
                                       
                                          φ
                                          
                                             u
                                             
                                                t
                                                ′
                                             
                                          
                                       
                                       .
                                    
                                 
                              
                           Observe that for i ∈ N∖{s} and t ∈ {1, …, T − 1}, ut
                            = (j, i) ∈ A if and only if u
                           
                              t + 1 = (i, k) ∈ A, so the above expression equals

                              
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      t
                                                      :
                                                      
                                                         u
                                                         t
                                                      
                                                      =
                                                      
                                                         (
                                                         j
                                                         ,
                                                         i
                                                         )
                                                      
                                                      ∈
                                                      A
                                                   
                                                
                                                
                                                   (
                                                   
                                                      φ
                                                      
                                                         u
                                                         t
                                                      
                                                   
                                                   −
                                                   
                                                      φ
                                                      
                                                         u
                                                         
                                                            t
                                                            +
                                                            1
                                                         
                                                      
                                                   
                                                   )
                                                
                                             
                                          
                                          
                                             =
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      t
                                                      :
                                                      
                                                         u
                                                         t
                                                      
                                                      =
                                                      
                                                         (
                                                         j
                                                         ,
                                                         i
                                                         )
                                                      
                                                      ∈
                                                      A
                                                   
                                                
                                                
                                                   (
                                                   
                                                      ∑
                                                      
                                                         
                                                            (
                                                            k
                                                            ,
                                                            l
                                                            )
                                                         
                                                         ∈
                                                         
                                                            S
                                                            t
                                                         
                                                         ∩
                                                         R
                                                      
                                                   
                                                   
                                                      q
                                                      
                                                         k
                                                         l
                                                      
                                                   
                                                   
                                                      x
                                                      
                                                         k
                                                         l
                                                      
                                                      p
                                                   
                                                   −
                                                   
                                                      ∑
                                                      
                                                         
                                                            (
                                                            k
                                                            ,
                                                            l
                                                            )
                                                         
                                                         ∈
                                                         
                                                            S
                                                            
                                                               t
                                                               +
                                                               1
                                                            
                                                         
                                                         ∩
                                                         R
                                                      
                                                   
                                                   
                                                      q
                                                      
                                                         k
                                                         l
                                                      
                                                   
                                                   
                                                      x
                                                      
                                                         k
                                                         l
                                                      
                                                      p
                                                   
                                                   )
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                             =
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      t
                                                      :
                                                      
                                                         u
                                                         t
                                                      
                                                      =
                                                      
                                                         (
                                                         j
                                                         ,
                                                         i
                                                         )
                                                      
                                                      ∈
                                                      R
                                                   
                                                
                                                
                                                   q
                                                   
                                                      j
                                                      i
                                                   
                                                
                                                
                                                   x
                                                   
                                                      j
                                                      i
                                                   
                                                   p
                                                
                                                =
                                                
                                                   ∑
                                                   
                                                      j
                                                      :
                                                      (
                                                      j
                                                      ,
                                                      i
                                                      )
                                                      ∈
                                                      R
                                                   
                                                
                                                
                                                   q
                                                   
                                                      j
                                                      i
                                                   
                                                
                                                
                                                   x
                                                   
                                                      j
                                                      i
                                                   
                                                   p
                                                
                                                ,
                                             
                                          
                                       
                                    
                                 
                              
                           where the first equality follows from the definition of 
                              
                                 φ
                                 
                                    u
                                    t
                                 
                              
                            and the last is true because route Up
                            visits all arcs (k, l) ∈ R such that 
                              
                                 
                                    x
                                    
                                       k
                                       l
                                    
                                    p
                                 
                                 =
                                 1
                              
                           . Hence, constraints (1f) are satisfied.

Constraints (1g) follow from the fact that for all p, route Up
                            leaves node s at most once and, when it does it, it uses arc u
                           1 ∈ AD
                           . Therefore

                              
                                 
                                    
                                       
                                          ∑
                                          
                                             (
                                             s
                                             ,
                                             j
                                             )
                                             ∈
                                             A
                                          
                                       
                                       
                                          f
                                          
                                             s
                                             j
                                          
                                          p
                                       
                                       =
                                       
                                          f
                                          
                                             
                                                u
                                                1
                                             
                                          
                                          p
                                       
                                       =
                                       
                                          φ
                                          
                                             
                                                u
                                                1
                                             
                                          
                                          p
                                       
                                       =
                                       
                                          ∑
                                          
                                             
                                                (
                                                i
                                                ,
                                                j
                                                )
                                             
                                             ∈
                                             
                                                S
                                                1
                                             
                                             ∩
                                             R
                                          
                                       
                                       
                                          q
                                          
                                             i
                                             j
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             j
                                          
                                          p
                                       
                                       =
                                       
                                          ∑
                                          
                                             (
                                             i
                                             ,
                                             j
                                             )
                                             ∈
                                             R
                                          
                                       
                                       
                                          q
                                          
                                             i
                                             j
                                          
                                       
                                       
                                          x
                                          
                                             i
                                             j
                                          
                                          p
                                       
                                       ,
                                    
                                 
                              
                           because route Up
                            visits all arcs u ∈ R such that 
                              
                                 
                                    x
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 =
                                 1
                              
                           .

If 
                              
                                 
                                    f
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 =
                                 0
                                 ,
                              
                            constraints (1h) or (1i) are satisfied because 
                              
                                 
                                    x
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 ,
                                 
                                    y
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 ,
                                 W
                                 ≥
                                 0
                              
                           . Suppose 
                              
                                 
                                    f
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 >
                                 0
                              
                           . Thus,

                              
                                 
                                    
                                       
                                          
                                             
                                                f
                                                
                                                   i
                                                   j
                                                
                                                p
                                             
                                          
                                          
                                             =
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      t
                                                      :
                                                      
                                                         u
                                                         t
                                                      
                                                      =
                                                      
                                                         (
                                                         i
                                                         ,
                                                         j
                                                         )
                                                      
                                                   
                                                
                                                
                                                   φ
                                                   
                                                      u
                                                      t
                                                   
                                                
                                                =
                                                
                                                   ∑
                                                   
                                                      t
                                                      :
                                                      
                                                         u
                                                         t
                                                      
                                                      =
                                                      
                                                         (
                                                         i
                                                         ,
                                                         j
                                                         )
                                                      
                                                   
                                                
                                                
                                                   ∑
                                                   
                                                      
                                                         (
                                                         k
                                                         ,
                                                         l
                                                         )
                                                      
                                                      ∈
                                                      
                                                         S
                                                         t
                                                      
                                                      ∩
                                                      R
                                                   
                                                
                                                
                                                   q
                                                   
                                                      k
                                                      l
                                                   
                                                
                                                
                                                   x
                                                   
                                                      k
                                                      l
                                                   
                                                   p
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                             ≤
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      t
                                                      :
                                                      
                                                         u
                                                         t
                                                      
                                                      =
                                                      
                                                         (
                                                         i
                                                         ,
                                                         j
                                                         )
                                                      
                                                   
                                                
                                                
                                                   ∑
                                                   
                                                      (
                                                      k
                                                      ,
                                                      l
                                                      )
                                                      ∈
                                                      R
                                                   
                                                
                                                
                                                   q
                                                   
                                                      k
                                                      l
                                                   
                                                
                                                
                                                   x
                                                   
                                                      k
                                                      l
                                                   
                                                   p
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                             =
                                          
                                          
                                             
                                                
                                                   ∑
                                                   
                                                      t
                                                      :
                                                      
                                                         u
                                                         t
                                                      
                                                      =
                                                      
                                                         (
                                                         i
                                                         ,
                                                         j
                                                         )
                                                      
                                                   
                                                
                                                
                                                   (
                                                   
                                                      ∑
                                                      
                                                         
                                                            (
                                                            k
                                                            ,
                                                            l
                                                            )
                                                         
                                                         ∈
                                                         
                                                            A
                                                            R
                                                         
                                                      
                                                   
                                                   
                                                      q
                                                      
                                                         k
                                                         l
                                                      
                                                   
                                                   z
                                                   
                                                      a
                                                      
                                                         k
                                                         l
                                                      
                                                      p
                                                   
                                                   +
                                                   
                                                      ∑
                                                      
                                                         
                                                            {
                                                            k
                                                            ,
                                                            l
                                                            }
                                                         
                                                         ∈
                                                         
                                                            E
                                                            R
                                                         
                                                      
                                                   
                                                   
                                                      q
                                                      
                                                         k
                                                         l
                                                      
                                                   
                                                   z
                                                   
                                                      e
                                                      
                                                         k
                                                         l
                                                      
                                                      p
                                                   
                                                   )
                                                
                                             
                                          
                                       
                                       
                                          
                                          
                                             ≤
                                          
                                          
                                             
                                                W
                                                |
                                                {
                                                t
                                                :
                                                
                                                   u
                                                   t
                                                
                                                =
                                                
                                                   (
                                                   i
                                                   ,
                                                   j
                                                   )
                                                
                                                }
                                                |
                                                ,
                                             
                                          
                                       
                                    
                                 
                              
                           where the last inequality follows from (5c). The last term is equal to 
                              
                                 W
                                 (
                                 
                                    y
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 +
                                 
                                    x
                                    
                                       i
                                       j
                                    
                                    p
                                 
                                 )
                              
                            if (i, j) ∈ R, and equal to 
                              
                                 W
                                 
                                    y
                                    
                                       i
                                       j
                                    
                                    p
                                 
                              
                            if (i, j) ∈ AD
                           . Hence constraints (1h) and (1i) are also satisfied in this case.

Therefore, 
                              
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 f
                                 ,
                                 n
                                 )
                              
                            is feasible for (nomcar). Since variables 
                              n
                            and the objective function are the same in both models, it follows that 
                              
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 f
                                 ,
                                 n
                                 )
                              
                            and 
                              
                                 (
                                 z
                                 ,
                                 n
                                 )
                              
                            have the same value. This concludes the proof.□

@&#REFERENCES@&#

