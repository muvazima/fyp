@&#MAIN-TITLE@&#Interpreting the semantics of GD&T specifications of a product for tolerance analysis

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           STEP models are not capable for interpreting the product data semantics automatically.


                        
                        
                           
                           We discussed mapping of STEP models to OWL-based ontology.


                        
                        
                           
                           Product’s GD&T information mapped from STEP to OWL-based models.


                        
                        
                           
                           Implementations have been carried out in Protégé using NIST’s OntoSTEP plug-in.


                        
                        
                           
                           Ontology based model is used to interpret GD&T semantics for tolerance analysis.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Product modeling

STEP

EXPRESS

OWL

Semantic

GD

&

T

Tolerance analysis

@&#ABSTRACT@&#


               
               
                  The representation and management of product information in its life cycle require standardized data exchange protocols. ISO 10303, informally known as the Standard for Exchange of Product model data (STEP), is such a standard that has been used widely by the industries. The information language used for STEP is EXPRESS. Even though the EXPRESS language is capable of developing well defined and syntactically correct product models, the semantics of product data are represented implicitly. Hence, it is difficult to interpret the semantics of data for different product life cycle phases for different application domains. OntoSTEP, developed at NIST, provides semantically enriched product models in OWL. In this paper, we would like to present how to interpret the Geometric Dimensioning and Tolerancing (GD&T) specifications in STEP for tolerance analysis by utilizing OntoSTEP. This process requires (1) developing the tolerance-analysis-oriented information model in EXPRESS, (2) combining this model with the ISO 10303 product model, (3) translating the combined model into OWL and (4) defining semantic web rule language to map the GD&T specifications to the specifications needed for the tolerance analysis. This study will help users interpret the GD&T specifications of a product differently as required in different phases of the product’s life cycle.
               
            

@&#INTRODUCTION@&#

The Standard for the Exchange of Product model data (STEP), which is published formally as ISO 10303  [1], has been developed to support the exchange of product data throughout a product’s life cycle. STEP enables representing the information required for designing, building and maintaining products. These STEP data models (or schemas) are represented in EXPRESS  [2] as a network of concepts: entities and properties of these entities. EXPRESS-based STEP information models are syntactically correct and well defined. The schemas are well suited to represent the syntax of the product model; however, EXPRESS has great difficulty in expressing the explicit data semantics for different application domains at different product life cycle phases. The tolerance specification of a product is possible in STEP (using AP 214 constructs  [3]), and in the NIST-led work of AP 242. But unless the semantic representations of those tolerance specifications are explicitly available, a user cannot carry out semantic interpretation of this specification data in areas like tolerance analysis, product manufacturing, assembly or inspection. Recently, semantically enriched STEP product models called OntoSTEP  [4,5] were developed at NIST using OWL 2 (Web Ontology Language). These models make it possible to develop a consistent formal model (including both syntactically and semantically correct information) for products that is useful in carrying out the effective computational (both quantitative and qualitative) analyses in different domains of applications as they may be required in different product life cycle phases.

In this paper, we develop the semantic interpretations of the GD&T (geometric dimension and tolerance) design specifications and use it for the linear, stack-up tolerance analysis. The standard for the representation of GD&T, ASME Y14.5  [6], was selected for our research as it defines how to show nominal dimensions, dimensional and geometric tolerances and symbols for these specifications. The assigned GD&T specifications cause a built-up variation in the final assembly. Because of that reason, in a tolerance analysis, the GD&T specifications have the following varying effects in an assembly: converted geometric tolerance, bonus tolerance, datum feature shift and assembly shift. These variation terms are discussed in detail under Section  3.1.

To develop the semantic interpretations of the GD&T specifications, the development of a tolerance-analysis-oriented information model in EXPRESS (based on the given GD&T specifications) is required first. This embellished GD&T model would then be merged with the GD&T model available in AP 214  [3]. In the next step, this combined STEP schema (model) is translated in OWL 2 using the OntoSTEP plug-in so that the OWL model of the GD&T specifications is now available for further reasoning purposes. The Semantic Web Rule Language (SWRL)  [7] rules inferred by the Pellet  [8] reasoning tool were chosen to map these GD&T specifications to the specifications needed for the tolerance analysis.

The organization of the paper is as follows: in Section  2, the OntoSTEP and other ontology-based product models are reviewed. In Section  3, the proposed methodology for interpreting the GD&T specifications for tolerance analysis is explained. In Section  4, a case study is given to apply the methodology with examples. The conclusion of this work is explained in Section  5. The paper ends with a conclusion.

Different modeling languages are used at different product life cycle stages, for example STEP’s EXPRESS may be used at a detailed design stage, while Unified Modeling Language (UML) may be used for initial design stages. It is necessary to consolidate product information created using these different languages to build a coherent knowledge base. The STEP APs are modeled using the EXPRESS (ISO 10303-11) language  [2]. EXPRESS was developed for representing product models and providing support to describe the information required for designing, building, and maintaining products. Data models (or schemas) are represented in EXPRESS as a network of concepts (entities), and concepts can have properties (attributes). Entities and attributes are therefore the basic constructs of EXPRESS. The use of EXPRESS is not particularly suited for the integration of STEP data with other STEP or non-STEP product data.

Semantics aims at providing a common meaning to the terms in a particular domain. Lack of explicit semantics and contexts in the content to be shared across PLM applications is a major problem. Making data semantics explicit and context aware and sharable among product life cycle applications is a major challenge. For an evolving organization to function, an information infrastructure that supports well-defined information exchange among the participants is critical. One language that provides such capabilities is OWL (Ontology Web Language)  [9]. The OWL representations are generic and OWL is evolving to become the language of the Semantic Web. A comprehensive review on knowledge representation, management and capture of the knowledge in product development processes is given by Chandrasegaran et al.  [10]. The role of ontologies for capturing knowledge and supporting semantic interoperability is also highlighted in that study.

There are many studies available in the literatures; they discuss how to develop generic product information models based on STEP information models (i.e., integrated resources and application protocols of STEP as well as newly developed STEP entities) for integrating product design and manufacturing activities. The main objective of these studies is to use STEP product models for communicating between different CAD/CAM (Computer-aided Design and Manufacturing) systems. However, these studies do not provide any interpretation mechanisms that may help understand the semantics of product data in different applications or at different stages of the product life cycle. As an example, Gu and Chan  [11] developed a generic product modeling system based on STEP product models to support data exchange between different computer based manufacturing systems. Zha and Du  [12] also developed a STEP based generic product information model for the integration of the following applications: product design, assembly design, assemblability evaluation, assembly sequence evaluation and assembly planning.

The number of data exchange standards is also increased due to the ubiquitous need of electronic data exchange between applications used in a product life cycle. Gielingh  [13] discussed many issues related to these data exchange standards and the industry adaption of these standards. The most important one is that there are wide varieties in information requirements of different product model representations for the application programs, and the data exchange standards could not represent all of them under a single model. Also, it has been emphasized that the semantics of product information for different disciplines (i.e. different views of product data) cannot be interpreted successfully.

Burkett  [14] developed a product data markup language to integrate the information requirements of different application systems by using XML. He utilized STEP to create an integrated information model as a master model and then any necessary product data for a particular application is mapped in to an XML file. The XML file represents a particular application view and carries the necessary semantics. However, it is not possible to infer the semantics of the product data for any other application view automatically by computers in this method.

Integration of different application systems is highly dependent on capturing the semantics of the product information. It is not just a simple data exchange of bits. For example, Lee  [15] suggested integrating CAD and CAE systems by creating all possible geometric models for both CAD and CAE simultaneously under a master model. By this method, the idealization of the geometric features or detailing of the analysis features can be achieved directly. However, the number of required geometric models might increase drastically based on the different applications.

Since this paper is based on NIST’s OntoSTEP  [4] work, it is necessary to review briefly the details of OntoSTEP to understand the proposed methodology. OntoSTEP was developed to provide semantic product models that include geometry, function and behavior information. In OntoSTEP, the geometry information is defined by the STEP models whereas the function and behavior information are defined by NIST’s Core Product Model (CPM)  [16] and the Open Assembly Model (OAM)  [17]. The steps required to develop the OntoSTEP-based product model are given in Fig. 1
                     . First, the EXPRESS model of a STEP application protocol (the implementable portion of STEP) is translated into OWL 2 via the OntoSTEP plug-in  [5], and the OWL schema of the STEP AP is created in Protégé  [18]. In the second step, the STEP file, which includes the physical product data that is encoded with respect to the STEP AP, is translated into the OWL file. In the third step, the ontology representation of the CPM/OAM model  [19] is merged into the OntoSTEP ontology to represent the function and behavior information for products. For details regarding the Fig. 1, please refer to  [4].

In the literature, there are other relevant studies  [20–23] that focus on ontology-based product models to capture the semantics of the product data. Rezgui et al.  [20] highlighted the limitations of data integration in the construction industry when developing and deploying data exchange standards like STEP. They suggested a three-layer ontological architecture to overcome these limitations: (1) the abstract core concepts are defined at the highest level; (2) the discipline-oriented concepts are modeled as sub-ontology at the second layer; (3) at the bottom layer, the semantic product data are represented based on the second layer. The different views of product data for the construction industry are represented as sub-ontology models. The relationships between the views (i.e., disciplines) are provided through the core ontology. This is similar to the method used in this paper: the STEP AP 214
                        1
                     
                     
                        1
                        If the merge of AP 214 and AP 203 into AP 242 is achieved this work can easily be extended to work with GD&T specifications as per AP 242.
                      schema was used as a core model to represent GD&T specifications. The tolerance analysis information model was developed as an application view. In addition to this method, the semantic interpretations of GD&T for tolerance analysis were developed using semantic reasoning techniques.

Kim et al.  [21] developed the assembly design ontology to represent explicitly and formally the assembly design information to map the assembly constraints to the design intent in a heterogeneous design environment (i.e., an environment with different application programs used for creating product designs). OWL and SWRL are used in the development of their ontology. Even though it is possible to represent the assembly design information explicitly in OWL, their work is not integrated with STEP. For the interpretation of the GD&T information for tolerance analysis, all product structure, geometry and GD&T information are needed to be developed in that ontology. In our work, we used the STEP information models to have explicit semantic information representation.

Panetto et al.  [22] developed ONTO-PDM to facilitate the interoperability among product data management (PDM) systems, enterprise resource planning (ERP) systems and manufacturing execution systems (MES). ONTO-PDM (framework shown in Fig. 2
                     ) is the integration of ISO 10303 AP203  [24] and IEC 62264  [25], which is the standard for integrating enterprise control systems. In that study, the concepts are compared between the two standards first, and then mapped to conceptualized UML models for representation of the information regarding the common concepts. They used the first order logic to represent the semantics of each construct of the standard’s conceptual models. First order logic axioms formalize the representation of mappings between the concepts of ISO 10303 and IEC 62264. The developed ONTO-PDM provides a product-centric interoperability. Its scope is the higher-level data for the management of the information. In Fig. 2, the B2MML or Business To Manufacturing Markup Language is an XML implementation of the IEC/ISO 62264. B2MML consists of a set of XML schemas that implement the data models in the IEC 62264 standard.

Matsokis and Kiritsis  [23] developed an ontology-based semantic model for the representation and management of product life cycle data and knowledge by mapping the UML model of Product Data and Knowledge Management Semantic Object Model (SOM) defined in the Promise-PLM European project  [26]. They used the description logic, SWRL and Pellet reasoning mechanisms to check the consistency of the ontology and to reclassify the classes to the correct position in the model.

The SOM is a product information model with capabilities of information tracking and flow management. The SOM is particularly applicable to the use, service and maintenance phases of the product life cycle.

In this section, the mechanism to interpret the semantics of GD&T specifications for tolerance analysis is described. The schematic representation of the mechanism is shown in Fig. 3
                     . The first step was to develop the information model for tolerance analysis in EXPRESS so that this model can be integrated with the AP 214 EXPRESS model (because the product, geometry, structure and GD&T information is defined in AP 214). The second step was to translate this EXPRESS model into OWL 2 through the OntoSTEP Protégé plug-in. Then, the SWRL  [7] rules were developed to map the GD&T specifications into the tolerance analysis application domain. The obtained ontology in OWL was used for developing the complete product data instances. SPARQL (pronounced “sparkle”) is a recursive acronym for SPARQL Protocol and RDF Query Language.

3-D product models were created in CAD systems. These models were then exported into STEP neutral format. Since the current STEP translators do not create GD&T specifications, these specifications have to be added manually to the STEP file. The final STEP file is translated to the developed OWL schema to take advantage of inferencing and reasoning mechanisms not currently available to support STEP AP schemas. The details of these steps are discussed in the following sub-sections: (1) the development of the tolerance analysis information model; (2) the translation of AP 214 and tolerance analysis EXPRESS models into OWL 2; and (3) the mapping of GD&T specifications to the specifications needed for tolerance analysis.

The tolerance analysis helps evaluate the effects of assigned tolerances on a product. The GD&T assigned to a product leads to five main types of variation that need to be interpreted in a tolerance analysis: (1) dimensional tolerance; (2) converted geometric tolerance; (3) bonus tolerance; (4) datum feature shift and (5) assembly shift. In this section, an information model in EXPRESS for the representation of these variation items (except the dimensional tolerance) was developed. The dimensional tolerance representation is already available in AP 214. In the following discussion, the entity names are shown in bold. The names of attributes, select types and enumeration types are shown in italic.

The converted_geometric_tolerance represents the plus or minus tolerance converted from a geometric tolerance. The EXPRESS-G
                              2
                           
                           
                              2
                              EXPRESS-G is a standard graphical notation for information models. It is a useful companion to the EXPRESS language for displaying the entity and type definitions, relationships and cardinality. This graphical notation supports a subset of the EXPRESS language.
                            representation of the converted_geometric_tolerance is shown in Fig. 4
                           . The first attribute is belongs_to, which associates the converted_geometric_tolerance to the shape_aspect (used to define part of the shape of a product in AP 214). The g_tolerance attribute refers to the geometric_tolerance defined for the shape_aspect. The effect of the geometric_tolerance is represented as plus or minus tolerance by the tolerance attribute.

In a tolerance analysis, any geometric tolerance definition, which is assigned to a feature of size and which has a material modifier might have an effect called bonus tolerance. A bonus tolerance   [27,28] is the maximum amount of variation in the tolerance zone, when the size of the as-produced feature deviates from the material modifier condition. The EXPRESS-G representation of the bonus_tolerance is given in Fig. 5
                           . The attribute is belongs_to, associates the bonus_tolerance to the shape_aspect. The size attribute refers to the dimensional size definition, which has a geometric tolerance with modifier. The g_tolerance attribute refers to the geometric_tolerance defined for the feature of size. The modifier attribute is used to represent the material modifier condition defined for the geometric_tolerance. The tolerance attribute shows the effect of the bonus_tolerance on the tolerance analysis as a plus/minus tolerance.

Any geometric tolerance with a modified datum might have an effect of datum feature shift on tolerance analysis. A datum feature shift   [27,28] is the maximum variation that may be caused while inspecting features related to the datum features of size specified at the maximum material condition (MMC) or the least material condition (LMC). There is no datum feature shift for the datum features of size specified regardless of the feature of size (RFS). The described variation is represented as the datum_feature_shift in Fig. 6
                           . The belongs_to attribute associates the datum_feature_shift to the shape_aspect. The datum_modifier attribute refers to the modified datum. The datum_size attribute refers to the dimensional_size definition of the referred datum. If there is any geometric tolerance with material modifier for the datum feature, it will be referred by datum_g_tolerance. Then, the effect of the datum feature shift is represented as a plus/minus tolerance by tolerance_value.

An assembly shift might have an effect on tolerance analysis because of the clearance in between hole features and fasteners as well as between keys and keyways  [27,28]. This effect is represented as the assembly_shift in Fig. 7
                           . It has two attributes that provide the association between the assembly_shift and any loop_element. They are the hole_feature and the shaft_feature attributes, which stand for an internal feature and an external feature, respectively. The dimensional_size definitions of internal feature and external feature are referred by the i_f_size and the e_f_size, respectively. If the internal feature has any geometric tolerance, it will affect the assembly shift. Because of that, the geometric tolerance of internal feature is referred by the i_f_g_tolerance. Finally, any effect of the assembly shift is represented as plus or minus tolerances by the tolerance_value.

In this section, we discuss how to translate and import EXPRESS models into an OWL schema using OntoSTEP plug-in. In this translation process, entities and instances in EXPRESS are mapped to classes and individuals in the OWL schema, respectively. In Fig. 8
                        , the translation process is shown schematically. The EXPRESS definition of the bonus_tolerance is translated into the functional syntax representation of OWL in Fig. 8. The bonus_tolerance entity is mapped to the corresponding class with the same name in OWL. The attributes of this entity are mapped to ObjectProperties in OWL. For example, the size attribute is mapped to the bonus_tolerance_has_sizeObjectProperty. In OWL, the domain and range of the properties are constrained explicitly. For the translation, the domain is the class name representing the translated entity (e.g., the bonus_tolerance) and range is the class name that represents entity type of attribute (e.g.,  dimensional_size). Unless the properties are restricted in OWL, they can be used to connect each individual of their domain to many individuals of their range. Hence, the use of the bonus_tolerance_has_size property has to be restricted with the cardinality definition of “ObjectExactCardinality” construct in OWL (Fig. 8). The range of this property has to be restricted with the “ObjectAllValuesFrom”.

Further details of translating the STEP models into an OWL schema can be found in  [4]. In our study, the EXPRESS definitions of the converted_geometric_tolerance, the bonus_tolerance, the datum_feature_shift and the assembly_shift are combined with the AP 214 EXPRESS schema. Then, this schema is imported into the OWL schema using the OntoSTEP plug-in.

In this study, the rule-based reasoning is used for the interpretation of the GD&T specifications for tolerance analysis. The rules are developed in SWRL.

Before developing the rules, it should be noted that Protégé and associated SWRL have limited capabilities for reasoning. Some of the limitations that we encountered during the mapping process are as follows: 
                           
                              •
                              SWRL rules cannot be used to create new individuals (specific instances of the OWL classes) in an ontology. These rules can only be used for reclassifying an individual’s class definition and/or add new relationships between the available individuals.

Protégé is not a computational application program. The calculations necessary for the creation of the concepts of the tolerance analysis from the GD&T require computational tools. With the SWRL rules, only simple addition, subtraction, multiplication and division can be done once. It is not possible to make calculations involving several mathematical operations to infer a fact. This prevents the calculation of values of the tolerance analysis concepts directly from the GD&T into Protégé.

To cater to these limitations, the values of datum feature shift and assembly shift are calculated beforehand and corresponding individuals in the OWL schema are created manually. The Pellet-based  [8] reasoning mechanism is then used to infer the additional relationships required for the complete class definitions of converted_geometric_tolerance, bonus_tolerance, datum_feature_shift, etc. In the following sub-sections, the development of the SWRL rules for (1) the converted geometric tolerance, (2) the bonus tolerance and (3) the datum feature shift are discussed.

Since any geometric tolerance has to be converted to plus or minus tolerances in a tolerance analysis process, we would like to infer the values of these plus or minus tolerances as well as the relationships required for the converted_geometric_tolerance. It should be noted that the structure of the information is defined in Section  3.1.1 for this concept.

The SWRL rules developed for inferring the instances of the converted_geometric_tolerance are given in Table 1
                           . The difference between these two rules is that in the first rule, the positive tolerance value of the plus or minus tolerances is inferred for theconverted_geometric_tolerance whereas in the second rule, the negative tolerance value is inferred.

In Table 1, the antecedent column shows the requirements of the rules for the application of reasoning whereas the consequent column shows the results that will be inferred after reasoning. Both of the rules in Table 1 require the following conditions:
                              
                                 •
                                 a geometric tolerance with a unit and a value component should be defined; 
                                       
                                          –
                                          this geometric tolerance should be assigned to a shape aspect;

an instance of the converted_geometric_tolerance should be available; 
                                       
                                          –
                                          this instance should be connected to the geometric tolerance as well as the instance for the plus/minus tolerance (i.e.,  tolerance_value).

If these conditions are satisfied, the reasoning mechanism will infer automatically the values and units of the plus or minus tolerances for the instance of the converted_geometric_tolerance. The relationship between the instance of the converted_geometric_tolerance and the shape_aspect will be inferred as well.

In this section, the development of the SWRL rules for inferring the bonus tolerance from the available GD&T information is discussed. The information structure needed for the development of the SWRL rules has been given in Section  3.1.2.

Since a bonus tolerance is calculated for a feature of size that has a dimension and a geometric tolerance with a material modifier, there are two rules developed for the bonus tolerance (Table 2
                           ). Rule-1 is considered for a feature of size that has a geometric tolerance with the LMC as the material modifier; whereas the Rule-2 is considered when the geometric tolerance has the material modifier of the MMC. Other than this distinction, the conditions required for both rules are given as follows:
                              
                                 •
                                 a dimension and a geometric tolerance should be assigned to a feature of size;

the value and unit components of the plus/minus tolerances for the dimension should be defined;

the assigned geometric tolerance should have a material modifier;

the instance of the bonus_tolerance should be connected to the feature of size (i.e.,  shape_aspect).

The inferencing mechanism will infer the following information once the conditions described above are true: 
                              
                                 •
                                 the plus or minus tolerances for the bonus tolerance;

the dimensional size used for the bonus tolerance;

the geometric tolerance used for the bonus tolerance;

the material modifier used for the bonus tolerance.

The datum feature shift in a tolerance analysis process is defined for any geometric tolerance with a modified datum. The geometric tolerance assigned to the datum feature can have three different material modifiers: the RFS, the MMC and the LMC. The RFS condition does not yield any datum feature shift. Because of that reason, only two cases were considered for the development of the SWRL rules in this study: the MMC and the LMC.

The conversion of the datum feature shift from the GD&T is dependent on the type of the datum feature (i.e., internal feature or external feature), the geometric tolerance assigned to the datum feature and the material modifier defined for this geometric tolerance. Different use cases for the datum feature shift are presented in Table 3
                           . It is divided into three main sections. The first row shows that there is no datum feature shift for a geometric tolerance definition without a modified datum. The second row is used when a geometric tolerance has a modified datum but the datum feature does not have any geometric tolerance. The third row in the table is used for any geometric tolerance with a modified datum and when the datum feature has a geometric tolerance.

For the first use case, there is no datum feature shift and there is no need to define any rule. The rules defined for the second case are subsets of the rules defined for the third case; however, this relationship between the rules creates a problem for the reasoning purposes.

The reasoning mechanism will infer both of the rules (i.e., the second case and the third case rules) are true and generate the new inferred information. The cause of this problem is that in the second rule, we should be able to define the rule for a geometric tolerance with modified datum and the corresponding datum feature should not have any geometric tolerance. This is not possible to define in an ontology because of the open world assumption. In the ontology, a datum feature without a geometric tolerance does not mean it will not have any geometric tolerance. It only means this geometric tolerance information is not yet available. Therefore, we only concentrated on the last row, which is showing how to calculate the datum feature shift for a geometric tolerance with modified datum and when the corresponding datum feature has a geometric tolerance with material modifier.

The SWRL rules developed for inferring the instances of the datum_feature_shift are given in Table 4
                           . The information structure needed for the development of the SWRL rules has been given in Section  3.1.3. The first rule is developed for the MMC condition in Table 3 whereas the second rule is developed for the LMC condition. Both of the rules defined in Table 4 require the following conditions:


                           
                              
                                 •
                                 a geometric tolerance with a modified datum should be defined for a feature (i.e.,  shape_aspect);

the corresponding datum feature should have a geometric tolerance with a material modifier;

the datum feature has to be a feature of size;

the instance of the datum_feature_shift should be connected to the geometric_tolerance.

If these conditions are satisfied the reasoning mechanism will infer automatically the relationship between the datum feature shift and the following: 
                              
                                 •
                                 the referenced_modified_datum;

the dimensional_size defined for the datum_feature;

the toleranced feature (i.e, shape_aspect) that is associated with the datum feature shift.

In this section, an example of the tolerance analysis problem is discussed to verify the interpretation mechanism developed in this study. The details of the problem are described in Section  4.1. Section  4.2 presents the implementation of the model and the new inferred interpretations. Section  4.3 presents the tolerance analysis results.

A typical bolted assembly (Fig. 9
                        ) is used to illustrate our proposed methodology. The complete GD&T specifications with necessary dimension loop from A to J have been given in the figure. The goal of the analysis is to determine the minimum and maximum gap between part 5 and part 6 (i.e., between A and J). The details of base plate (part 1) and L-bracket (part 2) are given in Figs. 10 and 11
                        
                         respectively. The specified geometric tolerances are as follows: (1) the patterns of holes in both the base plate and the L-bracket have positional tolerances, and (2) the L-bracket has a profile tolerance.

To be able to carry out the tolerance analysis, the specifications needed for this analysis have to be created. These requirements are as follows: 
                           
                              •
                              any geometric tolerance, which has an effect on the gap variation, has to be converted to the plus or minus tolerance. In Fig. 10, the positions of holes on the base plate have to be converted to the respective plus/minus tolerances. In Fig. 11, the profile of the flange face and the positions of holes on the L-bracket have to be converted to plus or minus tolerance;

in Fig. 9, the assembly shifts at points E and F for possible position changes of the parts have to be calculated. These shifts are the maximum assembly shifts;

any applicable bonus tolerance associated with the specified geometric tolerance has to be defined. In Fig. 10, there is a bonus tolerance for the positions of the holes on the base plate. In Fig. 11, there is no bonus tolerance to be considered for the profile tolerances because they are specified at RFS. There is also no bonus tolerance for the positions of the holes on the L-brackets because the pattern of holes is the secondary datum and this pattern locates other features;

any applicable datum feature shift of the specified geometric tolerance has to be defined. A datum feature shift for the positions of the holes on both the L-bracket (Fig. 11) and the base plate (Fig. 10) is not applicable, because the datum features are not features of size; they are planar features. In Fig. 11, the datum feature shift for the profile tolerance of the L-bracket has to be calculated.

@&#IMPLEMENTATION@&#

We used Pro/E  [29] to model the assembly defined in the previous section. The 3-D model of the assembly is shown in Fig. 12
                        . Then, all product information for the assembly is translated into STEP AP214 format with Pro/E translator. Unfortunately, the Pro/E translator cannot translate the GD&T specifications. Because of that reason, the STEP instances for the GD&T specifications are added manually to the STEP file.

To test the model, the obtained STEP file was imported to the ontology in OWL using OntoSTEP plug-in. This process directly creates all the OWL individuals defined in the STEP file. In the following two sections, first the individuals required for tolerance analysis are defined and then, the inferred new information created after inferencing is discussed.

In this section, the instances for the classes in addition to the instances provided in the STEP file are presented with their properties needed for the ontology. These instances are the members of classes: the converted_geometric_tolerance, the tolerance_value, the bonus_tolerance and the datum_feature_shift.

There are two geometric tolerances converted to plus or minus tolerances for our tolerance analysis problem: the profile tolerance on the L-bracket and the positional tolerance on the base plate. In Table 5
                           , the instances created for the converted_geometric_tolerance are given. The instances of the classes that are connected to the instances of the converted_geometric_tolerance with asserted properties are given in rows. The letter “D” represents the domain of the property whereas the letter “R” represents the range of the property.

The instances of the tolerance_value required for the instances of the converted_geometric_tolerance were created in the ontology as well. They are shown in Table 6
                           .

There is only one bonus tolerance for our tolerance analysis problem: it is defined for the pattern of holes on the base plate. In Table 7
                           , the instance created for the bonus_tolerance is given. This instance is connected to the instance of the shape_aspect through the bonus_tolerance_has_belongs_to property. This instance of the shape_aspect is used for the definition of the positional tolerance on the base plate.

In our tolerance analysis problem, there is only one datum feature shift that is due to the profile tolerance on the L-bracket. In Table 8
                           , the instance created for the datum_feature_shift is given. This instance is connected to an instance of the geometric_tolerance through the datum_feature_shift_has_g_tolerance property. The instance of the geometric_tolerance in Table 8 is the positional tolerance on the L-bracket, which is used to find out the datum feature shift. Other than this property, the instance of the datum_feature_shift is also connected to the tolerance_value through the datum_feature_shift_has_tolerance.

In this section, the new knowledge inferred by the reasoner (Pellet  [8]) and the SWRL rules are discussed. As a result of reasoning, the new properties are inferred for the instances of the converted_geometric_tolerance, the bonus_tolerance and the datum_feature_shift.

The instances of the converted_geometric_tolerance were connected to the instances of the shape_aspect by the reasoner. These instances of the shape_aspect were used for the definition of the profile tolerance on the L-bracket and the positional tolerance on the base plate. The inferred instances are given in Table 9
                           . Additionally, the following information was inferred by the reasoner for the instances of the tolerance_value that are connected to the instances of the converted_geometric_tolerance:
                              
                                 •
                                 the units assigned to the instances of the geometric tolerances are assigned to the instances of the tolerance_value;

division of the geometric tolerance value to “2” is assigned as the upper bound of the tolerance_value;

division of the geometric tolerance value to “−2” is assigned as the lower bound of the tolerance_value.

The reasoner created four new properties for the instance of the bonus_tolerance (Table 10
                           ). These properties define the relationship between the instance of the bonus_tolerance and the instances of any of the tolerance_value, the dimensional_size, the geometric_tolerance and the modified_geometric_tolerance. The inferred information was needed for the calculation of the instance of the bonus_tolerance. A snapshot of the Protégé is given to show the inferred new information in Fig. 13
                           .

For the instance of the datum_feature_shift, we have three new inferred properties. They connect the instance of the datum_feature_shift to the instances of the referenced_modified_datum, the dimensional_size and the geometric_tolerance as shown in Table 11
                           .

A detailed representation of the specifications needed for our tolerance analysis problem is given in Fig. 14
                        . In this figure, each specification is numbered. Our inferencing mechanism created all these specifications that are different than the GD&T specifications. In this tolerance analysis process, a dimension loop was created from A through J. The dimensions from right to left were subtracted from the sum of the dimensions from left to right. This yielded a nominal gap of 5.9 mm. The variation was calculated by summing the values of all plus/minus tolerances including the converted geometric tolerances, bonus tolerances, datum feature shifts and assembly shifts. The dimensional variation was calculated as ±10 mm.

@&#CONCLUSION@&#

It is difficult to extract any semantic information from the STEP-based product models for any reasoning purposes required in different product life cycle phases. This paper discussed how to map the STEP-based product information model into OWL-based ontological environment so that an appropriate semantic reasoning could be facilitated. In this study, we reported the mapping of a product’s GD&T information content from STEP to OWL-based models in Protégé using NIST’s OntoSTEP plug-in and showed how this ontology-based model could be used for interpreting the semantics of GD&T needed for tolerance analysis.

It should be noted that GD&T requirements are decided for a product in its design phase only but, different types of interpretation are needed to be inferred from the requirements during different phases of the product life cycle. As we have seen, during the tolerance analysis phase, we need to extract such information regarding the bonus tolerance, datum feature shift and assembly shift, which were not explicit in the GD&T specifications (those were derived from these specifications); whereas we need information regarding the virtual boundary conditions, gauge attributes (go/no-go gauge specifications, etc.) for product inspection purposes. These pieces of information are still inferred from the same GD&T specifications attached in the product’s STEP model. We can follow the proposed methodology in a similar way to reason about the inspection activities that are needed for product inspection purposes. For other product life cycle phases, we may need different interpretations of the specified GD&T and we can still apply the same methodology as required. The wider application of this method is mainly restricted by the inherent limitations of Protégé, SWRL, and reasoning capabilities of their inference mechanisms.

The ultimate aim for scientists in this field is to achieve the automatic interpretation of product information by machines, without any human intervention, for any application at any product life cycle phase. However, intelligent machines that interpret the retrieved product information and know what to do without any human intervention seem not possible in the near future due to the following reasons:
                        
                           •
                           the information modeling languages used in developing product models have different capabilities, and the automatic translation does not yield always the same semantics;

the information models developed in the same modeling language (e.g., EXPRESS) use different terminologies and different conceptualization. This is the case when different models represent the same type of product information in different stages of the product’s life cycle. Even though the same modeling language is used, semantic interpretation requires developing semantic rules;

one solution might appear to model and to cover the complete product life cycle like ISO 10303 (STEP). However, even STEP application protocols are different information models because they are evolving based on the application domains (i.e., automotive design, airplanes, ships). Also, any application requires variable type of product information. Hence, human intervention is needed for the interpretation of the product data semantics exchanged from any other application domain.

The current solution to the problem is that humans study and understand the information models of different application domains and then develop the logic rules for automatic machine interpretation of product information as presented in this study.

Certain commercial software products are identified in this paper. These products were used only for demonstration purposes. This use does not imply approval or endorsement by Syracuse University or the National Institute of Standards and Technology, nor does it imply that these products are necessarily the best for the purpose.

@&#ACKNOWLEDGMENTS@&#

We would like to thank Mr. Raphael Barbau for his help in setting up and using OntoSTEP plug-in for Protégé in our computers at Syracuse University, and Dr. Jae Hyun Lee for his technical contributions to this paper. We would like to thank Sharon Kemmerer, Deputy Division Chief, Systems Integration Division for her valuable comments and suggestions for improving the paper.

@&#REFERENCES@&#

