@&#MAIN-TITLE@&#Development and evaluation of a biomedical search engine using a predicate-based vector space model

@&#HIGHLIGHTS@&#


               
                  
                  
                     
                        
                           
                           Predicates, called triples, contain more structured information than keywords.


                        
                        
                           
                           We propose a new predicate-based search engine approach for biomedical texts.


                        
                        
                           
                           We develop a new vector space model and query-document similarity function.


                        
                        
                           
                           It achieves higher precision and relevance score than traditional keyword approach.


                        
                        
                           
                           Predicates can support more precise information search than keywords.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Search engine

Triple

Predicate

Information retrieval

Vector space model

@&#ABSTRACT@&#


               
               
                  Although biomedical information available in articles and patents is increasing exponentially, we continue to rely on the same information retrieval methods and use very few keywords to search millions of documents. We are developing a fundamentally different approach for finding much more precise and complete information with a single query using predicates instead of keywords for both query and document representation. Predicates are triples that are more complex datastructures than keywords and contain more structured information. To make optimal use of them, we developed a new predicate-based vector space model and query-document similarity function with adjusted tf-idf and boost function. Using a test bed of 107,367 PubMed abstracts, we evaluated the first essential function: retrieving information. Cancer researchers provided 20 realistic queries, for which the top 15 abstracts were retrieved using a predicate-based (new) and keyword-based (baseline) approach. Each abstract was evaluated, double-blind, by cancer researchers on a 0–5 point scale to calculate precision (0 versus higher) and relevance (0–5 score). Precision was significantly higher (p
                     <.001) for the predicate-based (80%) than for the keyword-based (71%) approach. Relevance was almost doubled with the predicate-based approach—2.1 versus 1.6 without rank order adjustment (p
                     <.001) and 1.34 versus 0.98 with rank order adjustment (p
                     <.001) for predicate—versus keyword-based approach respectively. Predicates can support more precise searching than keywords, laying the foundation for rich and sophisticated information search.
               
            

@&#INTRODUCTION@&#

The availability of online medical and biomedical information has increased dramatically in recent years [1]. For example, PubMed currently contains over 19 million articles covering biomedicine and health-related research, and adds approximately 0.7 million abstracts per year. Although search engines have been developed into highly efficient and effective tools, the availability of more advanced underlying data structures and associated user interfaces would make paradigm shifting improvements and alternate uses possible.

Search engines and digital libraries are focused on, but also limited to, using strings of words. This is reflected in each user interface—users are limited to typing a list of words, and, at most, can indicate which words need to be combined or excluded by using quotes or “not.” This limitation is a consequence of the underlying phrase-based index which requires documents to be matched to words and phrases and it lends itself to a user interface which encourages suboptimal user search habits. For example, it has been shown that people continue to use very few keywords, only 2–3 on average [2–7], regardless of the topic of our search [7]. This existing keyword search technique results in imprecise queries as shown in Section 6.3.

To remedy the short queries, query expansion techniques have been researched and are currently used by search engines. Varying degrees of success are achieved when adding different numbers of keywords [8–10], using the most frequent terms [11], or using terms from different parts of documents [12–14]. However, people do not like automated methods [15] and so interactive query expansion is preferred. This has led to the modern query expansion, popularized by many search engines, to select a query from a popup with queries already used by others [16,17].

Unfortunately, today’s query expansion reduces the overall diversity of searches thereby also reducing the information available. Exacerbating the problem is that many search engines ignore portions of the queries. In most conventional keyword search engines, relationships between keywords are not captured or used to retrieve and rank the documents. Consequently, the search results show irrelevant results that contain the keywords but not the relationship between them. For example, using PubMed to find articles about “NBS1 interacts with endocytic proteins to affect the central nervous system,” the query “NBS1, endocytosis, central nervous system,” results in 329 documents of which only one of the top 20 documents were related to the query intent. In this example, the relation “interacts with” between “NBS1” and “endocytic protein,” and the relation “affect” between “NBS1” and “central nervous system” were not captured, and as a result most of the retrieved documents are about irrelevant matters (DNA damage, functional polymorphisms in the NBS1, etc.).

Many improvements are possible, such as recognizing entities or visualizing results, and they are the topic of much research and development. Our work focuses on one such aspect—the inclusion of the relationship between the keywords in a search query. We define such a relationship as a predicate and store these as triples in the search engine index. The triples are a natural way of describing the vast majority of online data and resources [18]. Moreover, triples consisting of subject, verb or preposition (predicate), and object and form an elementary sentence that represents the basic information of the search [1,18].

This study describes the development and evaluation of a predicate-based search engine that uses predicates in addition to keywords. Evaluated using a collection of more than 100,000 Medline abstracts the results showed that a basic implementation of this new, hybrid approach outperformed a basic implementation of the baseline approach (keyword-based search). In our study, the average precision of the predicate-based search was significantly improved by 9.17% compared to that of a keyword-based approach. The average relevance of the predicate-based search was significantly improved by 31.25% compared to that of a keyword-based approach. Our pilot study [19] showed for three examples that our approach to predicate-based search is an improvement. The contribution of this work is the further improvement of algorithms which are then evaluated with a new user study demonstrating the strength of predicate-based searching in biomedicine, a necessary first step in laying a foundation for future general search mechanisms. Although the approach can be applied to other types of text, scientific texts that describe relationships between variables are highly suited to our project.

@&#RELATED WORK@&#

The search engine field is diverse with applications ranging from finding a document to finding a new house or partner. While many different text search engines and digital libraries exist, all of their main components are the same—they match input items, usually words, to elements stored in their collection. Text search engines store documents, or links to those documents, and indexes. User queries are interpreted and related to the documents by means of those indexes [20,21]. Most search engines operate on vast collections of documents and various indexing and searching algorithms, such as the Boolean retrieval model, term-document incidence matrix, and inverted index, are required to find the desired documents from the collection with sufficient accuracy and speed. For example, in the Boolean retrieval model, queries are represented in the form of a Boolean expression of terms using operators such as AND, OR, and NOT, and the search results are derived by posing the queries against the term-document incidence matrix.

Indexing is used to avoid linearly scanning all available documents for each query. The term-document incidence matrix, which consists of documents, terms, and frequencies of the terms in each document, is the most popular way of indexing [20,21]. The size of this incidence matrix increases enormously as more documents are added to the collection. However, since the data in this matrix is sparse, an inverted index is used to record only the non-zero entries of the matrix. The major components in the inverted index are the dictionary, i.e., the list of terms, term frequency, and the link from the term to the original documents, i.e., the identifiers’ list of documents that contains the term. Search engines use this index to find documents and rank them giving a higher weight to the documents with the highest frequency of the search terms [20]. This inverted index is used to represent term weights in the vector space model and is the most commonly implemented model of most current search engines [21].

Meanwhile, many approaches have been suggested and discussed to address the word mismatch problem of the traditional word matching methods. Query expansion techniques improve search performance by evaluating user search queries and expanding them with additional terms [22]. These techniques also include the use of synonyms or additional morphological forms of terms in the query [23,24]. Other approaches have focused on linguistic concepts, which can be defined in lexical resources such as WordNet [25]. Latent Semantic Indexing (LSI), for example, aims to extract latent concepts from the text, construct meaningful groups of words, and search for such latent concepts by applying Singular Value Decomposition (SVD) to the original term-document matrix [26]. Latent Dirichlet Allocation (LDA) is a probabilistic latent topic model whose basic idea is to represent multi-lingual documents by a mixture of latent concepts or topics [24,27–29]. While query expansion or approaches based on latent concepts have become common, these techniques rely on reusing queries from others or lexical resources based on concepts and topics, not additional user information.

While the above improvements are possible for search engines, our work focuses on the central component—the representation of information in the underlying index and how to match this to the user’s query. We first review the current approach—the vector space model. To calculate the similarity between query and document search engines use the vector space model which represents both query and document as a vector of keywords. Weights represent the importance of the keywords in document d and query q within the entire document collection [30].
                           
                              (1)
                              
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 (
                                 
                                    
                                       w
                                    
                                    
                                       i
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       i
                                       2
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       it
                                    
                                 
                                 )
                              
                           
                        
                        
                           
                              (2)
                              
                                 q
                                 =
                                 (
                                 
                                    
                                       w
                                    
                                    
                                       q
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       q
                                       2
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       w
                                    
                                    
                                       qs
                                    
                                 
                                 )
                              
                           
                        
                     

Term weights can be defined in various ways in a document vector. The common, basic approach is to use the tf-idf method [31] in which the weight of a term is determined by two factors, (1) how often the term j occurs in a document di
                         (term frequency tfi,j
                        ) combined with (2) how often the term j occurs in the document collection (document frequency dfj
                        ). Document frequency dfj
                         is needed to scale a term’s weight in the document collection. Denoting the total number of documents in the document collection by N, the inverse document frequency (idfj
                        ) of a term j can be defined as in (3). This makes the idf of a rare term high but makes the idf of a frequent term low [20]. The composite weight for a term in each document combines term frequency and inverse document frequency. Thus, when using tf-idf weighting, the weight of a term j in document di
                         is defined by (4).
                           
                              (3)
                              
                                 
                                    
                                       idf
                                    
                                    
                                       j
                                    
                                 
                                 =
                                 log
                                 
                                    
                                       N
                                    
                                    
                                       
                                          
                                             df
                                          
                                          
                                             j
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    
                                       w
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       tf
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 ×
                                 
                                    
                                       idf
                                    
                                    
                                       j
                                    
                                 
                                 =
                                 
                                    
                                       tf
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 ×
                                 log
                                 N
                                 /
                                 
                                    
                                       df
                                    
                                    
                                       j
                                    
                                 
                              
                           
                        
                     

This method results in higher weights for terms that appear frequently in a small number of documents within the document set [4,5].

Based on the tf-idf method, the vector space model calculates cosine between the query and document vectors to measure the similarity of the query and a document [4,5]. The cosine similarity (cos
                           θ) of the vector representations of di
                         of (1) and q of (2) is derived as (5) by using the dot product of two vectors and the product of their Euclidean lengths.
                           
                              (5)
                              
                                 cos
                                 θ
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   d
                                                
                                                
                                                   →
                                                
                                             
                                          
                                          
                                             i
                                          
                                       
                                       ·
                                       
                                          
                                             q
                                          
                                          
                                             →
                                          
                                       
                                    
                                    
                                       |
                                       
                                          
                                             
                                                
                                                   d
                                                
                                                
                                                   →
                                                
                                             
                                          
                                          
                                             i
                                          
                                       
                                       |
                                       |
                                       
                                          
                                             q
                                          
                                          
                                             →
                                          
                                       
                                       |
                                    
                                 
                              
                           
                        
                     

From the Eq. (5), the dot product 
                           
                              (
                              
                                 
                                    
                                       
                                          d
                                       
                                       
                                          →
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              ·
                              
                                 
                                    q
                                 
                                 
                                    →
                                 
                              
                              )
                           
                         is defined as 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    j
                                    =
                                    1
                                 
                                 
                                    V
                                 
                              
                              
                                 
                                    w
                                 
                                 
                                    q
                                    ,
                                    j
                                 
                              
                              ×
                              
                                 
                                    w
                                 
                                 
                                    i
                                    ,
                                    j
                                 
                              
                           
                        , where V is the term size and wq,j
                         is the weight of term 
                           j
                         in the query 
                           q
                        . The denominator 
                           
                              (
                              |
                              
                                 
                                    
                                       
                                          d
                                       
                                       
                                          →
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              |
                              |
                              
                                 
                                    q
                                 
                                 
                                    →
                                 
                              
                              |
                              )
                           
                        , the product of Euclidean lengths, is defined as 
                           
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          V
                                       
                                    
                                    
                                       
                                          w
                                       
                                       
                                          q
                                          ,
                                          j
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          V
                                       
                                    
                                    
                                       
                                          w
                                       
                                       
                                          i
                                          ,
                                          j
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                           
                        , which is the normalization factor to discard the effect of document length. Combining these elements shows how the similarity between a document 
                           di
                           
                         and a query 
                           q
                         is defined as
                           
                              (6)
                              
                                 sim
                                 (
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 q
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             ∑
                                          
                                          
                                             j
                                             =
                                             1
                                          
                                          
                                             V
                                          
                                       
                                       
                                          
                                             w
                                          
                                          
                                             q
                                             ,
                                             j
                                          
                                       
                                       ×
                                       
                                          
                                             w
                                          
                                          
                                             i
                                             ,
                                             j
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   j
                                                   =
                                                   1
                                                
                                                
                                                   V
                                                
                                             
                                             
                                                
                                                   w
                                                
                                                
                                                   q
                                                   ,
                                                   j
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                       
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   j
                                                   =
                                                   1
                                                
                                                
                                                   V
                                                
                                             
                                             
                                                
                                                   w
                                                
                                                
                                                   i
                                                   ,
                                                   j
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        where V is the term size, wq,j
                         is the weight of term 
                           j
                         in the query 
                           q
                        , and wi,j
                         is the weight of term 
                           j
                         in document 
                           i
                        . Unfortunately, the computation of the normalization factor is expensive, because to calculate 
                           
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          V
                                       
                                    
                                    
                                       
                                          w
                                       
                                       
                                          i
                                          ,
                                          j
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                           
                        , the Euclidean length of document 
                           di
                           
                        , every term in the document needs to be accessed [30]. Therefore, the following simpler approximations are usually used instead of the full vector space model:
                           
                              (7)
                              
                                 sim
                                 (
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 q
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          V
                                       
                                    
                                 
                                 
                                    
                                       w
                                    
                                    
                                       q
                                       ,
                                       j
                                    
                                 
                                 ×
                                 
                                    
                                       w
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 /
                                 
                                    
                                       #
                                       of
                                       ·
                                       terms
                                       ·
                                       in
                                       ·
                                       
                                          
                                             d
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                           
                        
                     

The formula (7) approximates the effect of normalization by using the square root of the number of terms in a document. The drawback to this vector space model approach is that the relational information between terms cannot be considered.

In biomedical information retrieval recognizing biomedical entities, e.g., disease names, symptoms, special medications, and the relations between them, e.g., prooxidant causes hormonal disturbances, improves searching for biomedical texts [32]. Such relations can be described as triples and several research projects have focused on the usefulness of triples and how to extract them [32–36].

To extract triples, both rule-based and statistical methods are used. Rule-based methods utilize a set of rules and mathematical models. For example, Sohn et al. developed 12 rules to extract drug side effects from clinical narratives of psychiatry and psychology patients and their approach achieved precision and recall of over 80% [37]. Xu et al. also constructed a rule-based system to extract relational information from narrative clinical discharge summaries [38]. On the other hand, Gurulingappa et al. developed a statistical relation extraction system based on support vector machines (SVM) to identify potential adverse drug events from medical case reports [39] and Zheng et al. also used SVM to detect co-reference in clinical narratives [40]. While this approach is widely applicable and generally achieves high precision and recall for the described triples, the parsers tend to have narrow coverage and are unable to recognize the entire variety of triple patterns. In contrast, parsers with broad coverage may over-detect irrelevant and incorrect predicates [33]. In contrast to the rule-base methods statistical methods use a training dataset of potential predicates so that they can learn to classify them as being correct or incorrect. Methods that derive decision boundaries by using a training dataset to classify the correct predicates typically outperform other statistical learning approaches such as feature-based methods [33,34,41–44], but achieve substandard results compared to rule-based methods [33,45].

By taking into account the advantages and disadvantages of the rule-based methods and the statistical methods, we developed a new parser for identifying and extracting predicates from text. Our approach combines rule-based and statistical methods in the form of Finite State Automata (FSA) and Support Vector Machines (SVM). FSA were used to split a parse tree generated by the Stanford Parser (available at http://nlp.stanford.edu/software) [46,47] into subtrees that may contain triples. SVM were used to classify each subtree based on whether or not it contained a relevant triple. The evaluation results showed that using two generic triple patterns for FSA increased recall, and the kernel-based SVM classifier based on the training data improved precision. Thus our combined approach leveraged the strengths of each to compensate for the other’s weaknesses. Using this combination of algorithms to identify triples precisely in the text allows us to then extract them from the text [48].

To our knowledge, only two similar parsers exist. The first is SemRep/MetaMap, which extracts information from text [49–52] and maps it to concepts in the Unified Medical Language System (UMLS) Metathesaurus [53]. Another is GeneNetScene, formerly called Genescene, a parser that allows visualization of biomedical predicates [54]. Our approach differs from both because our predicates are not the final product but form the basis for information retrieval. We do not limit users to information contained in predicates, but instead use predicates to improve access to entire documents. This is accomplished by using the predicates in the index of a search engine.

Our research interest lies in the development of a search engine that is not limited to keyword-based search. We focus on predicates to enhance the search mechanisms, since a predicate can provide much more information, can be extracted automatically from text, and can be augmented with proven weighting techniques for matching queries to documents. We have conducted preliminary studies showing that a suitable user interface using query diagrams would make such querying feasible for users. The first component, the triple parser, was discussed in [24]. In this work, we focus on the second essential component, the development and evaluation of a Predicate-based Vector Space Model, to utilize predicates as the underlying data structure to calculate similarity scores between the query and documents.

The two main components of any search engine are the front-end (i.e., search interface) and back-end (i.e., search engine), and we have completed preliminary work for both. To use predicates in a query the currently-used text box will not be suitable. Instead, we envision a search engine where diagrams can be used to submit a query. Such diagrams are a natural and intuitive approach to using predicates. We have tested this approach using a paper–pencil prototype and have evidence that it is intuitive and leads to better queries [55]. To develop a new back-end using predicates it is necessary that these predicates be extracted from text automatically. We have successfully developed and evaluated such a predicate parser [48]. This preliminary work allows us to focus on the chief technical advancement of the search engine: the predicate-based indexing and searching (see Fig. 1
                     ). Using predicates requires a new approach to be capable of indexing predicates and matching queries to documents via that index. To this end we started with the Vector Space Model and extended it with a triple-index and a triple-matcher. The term ‘triple’ is a synonym for ‘predicate’ which is more commonly used in database literature. We have adopted ‘triple’ below to describe our back-end database component and use ‘predicate’ when referring to the overall search engine.

The traditional vector space model was augmented to combine triple matching with term matching. To understand the impact of including triples in the vector and the index we compared a pure keyword-based approach and a pure predicate-based approach against an additive approach that combined the keyword-based and predicate-based approaches. Keyword-based scores for a query were calculated in the conventional method as described above (8), while triple scores were calculated as in (9), and their combined scores were gained by adding them (10)
                        
                           
                              (8)
                              
                                 
                                    
                                       S
                                    
                                    
                                       term
                                    
                                 
                                 (
                                 q
                                 ,
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          V
                                       
                                    
                                 
                                 
                                    
                                       w
                                    
                                    
                                       q
                                       ,
                                       j
                                    
                                 
                                 ×
                                 
                                    
                                       w
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 /
                                 
                                    
                                       #
                                       of
                                       ·
                                       terms
                                       ·
                                       in
                                       ·
                                       
                                          
                                             d
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       S
                                    
                                    
                                       triple
                                    
                                 
                                 (
                                 q
                                 ,
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          M
                                       
                                    
                                 
                                 (
                                 
                                    
                                       wt
                                    
                                    
                                       q
                                       ,
                                       k
                                    
                                 
                                 ×
                                 
                                    
                                       wt
                                    
                                    
                                       i
                                       ,
                                       k
                                    
                                 
                                 +
                                 σ
                                 
                                    
                                       t
                                    
                                    
                                       k
                                    
                                 
                                 )
                                 /
                                 
                                    
                                       #
                                       of
                                       ·
                                       triples
                                       ·
                                       in
                                       ·
                                       
                                          
                                             d
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    
                                       S
                                    
                                    
                                       additive
                                    
                                 
                                 =
                                 
                                    
                                       S
                                    
                                    
                                       triple
                                    
                                 
                                 +
                                 
                                    
                                       S
                                    
                                    
                                       term
                                    
                                 
                              
                           
                        
                        
                           
                              (11)
                              
                                 
                                    
                                       wt
                                    
                                    
                                       i
                                       ,
                                       k
                                    
                                 
                                 =
                                 
                                    
                                       tf
                                    
                                    
                                       i
                                       ,
                                       k
                                    
                                 
                                 ·
                                 
                                    
                                       idf
                                    
                                    
                                       k
                                    
                                 
                              
                           
                        
                        
                           
                              (12)
                              
                                 
                                    
                                       wt
                                    
                                    
                                       q
                                       ,
                                       k
                                    
                                 
                                 =
                                 
                                    
                                       tf
                                    
                                    
                                       q
                                       ,
                                       k
                                    
                                 
                                 ·
                                 
                                    
                                       idf
                                    
                                    
                                       k
                                    
                                 
                              
                           
                        
                     


                        wti
                        
                        ,
                        
                           k
                         
                        (11) is the weight of triple 
                           k
                         in document 
                           i
                        , wtq
                        
                        ,
                        
                           k
                         
                        (12) denotes the weight of triple 
                           k
                         in the query 
                           q
                         and 
                           M
                         is the total number of triples in document 
                           i
                        . σtk
                         
                        (13) is a boosting factor for partial matching between triples; it is the weight of the partial match between the triple 
                           k
                         in the query and the triple 
                           k
                         in document 
                           i
                        .
                           
                              (13)
                              
                                 σ
                                 
                                    
                                       t
                                    
                                    
                                       k
                                    
                                 
                                 =
                                 
                                    
                                       (
                                       1
                                       -
                                       δ
                                       )
                                    
                                    
                                       2
                                    
                                 
                                 
                                    
                                       f
                                       (
                                       
                                          
                                             st
                                          
                                          
                                             q
                                             ,
                                             k
                                          
                                       
                                       ∩
                                       
                                          
                                             st
                                          
                                          
                                             i
                                             ,
                                             k
                                          
                                       
                                       )
                                    
                                    
                                       f
                                       (
                                       
                                          
                                             st
                                          
                                          
                                             q
                                             ,
                                             k
                                          
                                       
                                       )
                                    
                                 
                                 +
                                 δ
                                 
                                    
                                       f
                                       (
                                       
                                          
                                             pt
                                          
                                          
                                             q
                                             ,
                                             k
                                          
                                       
                                       ∩
                                       
                                          
                                             pt
                                          
                                          
                                             i
                                             ,
                                             k
                                          
                                       
                                       )
                                    
                                    
                                       f
                                       (
                                       
                                          
                                             pt
                                          
                                          
                                             q
                                             ,
                                             k
                                          
                                       
                                       )
                                    
                                 
                                 +
                                 
                                    
                                       (
                                       1
                                       -
                                       δ
                                       )
                                    
                                    
                                       2
                                    
                                 
                                 
                                    
                                       f
                                       (
                                       
                                          
                                             ot
                                          
                                          
                                             q
                                             ,
                                             k
                                          
                                       
                                       ∩
                                       
                                          
                                             ot
                                          
                                          
                                             i
                                             ,
                                             k
                                          
                                       
                                       )
                                    
                                    
                                       f
                                       (
                                       
                                          
                                             ot
                                          
                                          
                                             q
                                             ,
                                             k
                                          
                                       
                                       )
                                    
                                 
                              
                           
                        In Eq. (13) 
                        δ is a factional number between 0 and 1 indicating the weight of partial predicate matches in the triple matching score. The predicate of the triple contains the relationship between the subject and object thus δ sets the weight of a match between the relationship in the query and the relationship in the triple extracted from the document. 
                           
                              δ
                              =
                              
                                 
                                    1
                                 
                                 
                                    3
                                 
                              
                           
                         evenly weights matches in each component of the triple. 
                           
                              δ
                              >
                              
                                 
                                    1
                                 
                                 
                                    3
                                 
                              
                           
                         gives greater weight to matches in the predicate in turn giving greater emphasis on the relationship between terms. 
                           
                              δ
                              <
                              
                                 
                                    1
                                 
                                 
                                    3
                                 
                              
                           
                         gives greater weight to matches in the subject and object of the predicate. Initially we set δ
                        =0.2 as we think noun phrases are slightly more important than predicates, but further studies will be needed to find the optimal value. f(xt) is the number of terms in component 
                           x
                         of the triple where 
                           x
                         can be 
                           s
                         for the subject of the triple, 
                           p
                         for the predicate of the triple or 
                           o
                         for the object of the triple. For example, f(stq
                        
                        ,
                        
                           k
                        ) is the number of terms of the triple 
                           k
                        ’s subject in query 
                           q
                         and f(sti
                        
                        ,
                        
                           k
                        ) is the number of terms of the triple 
                           k
                        ’s subject in document 
                           i
                        . The number of terms in common between the subject of triple 
                           k
                         in query 
                           q
                         and the subject of triple 
                           k
                         in document 
                           i
                         is expressed as f(stq
                        
                        ,
                        
                           k
                        
                        ∩
                        sti
                        
                        ,
                        
                           k
                        ). f(ptq
                        
                        ,
                        
                           k
                        ), f(pti
                        
                        ,
                        
                           k
                        ), f(ptq
                        
                        ,
                        
                           k
                        
                        ∩
                        pti
                        
                        ,
                        
                           k
                        ), f(otq
                        
                        ,
                        
                           k
                        ), f(oti
                        
                        ,
                        
                           k
                        ), and f(otq
                        
                        ,
                        
                           k
                        
                        ∩
                        oti
                        
                        ,
                        
                           k
                        ) are defined in similar ways as f(stq
                        
                        ,
                        
                           k
                        ), f(sti
                        
                        ,
                        
                           k
                        ),and f(stq
                        
                        ,
                        
                           k
                        
                        ∩
                        sti
                        
                        ,
                        
                           k
                        ) for the predicate and object of the triple, respectively.

We conducted a pilot study using three cancer-related queries [19] to compare the three search schemes defined in Eqs. (8)–(10). The additive approach always outperformed the two other approaches, both of which achieved similar performance. However, this pilot study also showed that results could be improved by integrating the triple scores and keyword scores at the triple level instead of simply adding the triple score and keyword score as was done in Eq. (10).

We therefore developed a new hybrid similarity score (14). It is calculated by summing the product of the 
                           tf
                        -
                           idf
                         weights of the query and document triples (wtq
                        
                        ,
                        
                           k
                        
                        ×
                        wti
                        
                        ,
                        
                           k
                        ) with a keyword-based score vt(tk,di) 
                        (15) multiplied by the boosting factor for partial matching between triples (1+
                        σtk
                        ). The keyword based score is calculated in the same way as Sterm
                         
                        (8) where tk
                         is a set of all terms in the kth triple of the query. The value of the term σtk
                         
                        (13) ranges between 0 and 3, which is not the same scale as the product of the 
                           tf-idf
                         weights. Using (1+
                        σtk
                        ) as a boosting factor multiplied by the keyword-based score gives partial matches between components of the query triple and document triple considerably more weight then they were given in (9). This modification is expected to improve the merge effects of the two approaches by combining scores on a more detailed level, because the term-based score will represent the importance (i.e., weight) of a term in a triple.
                           
                              (14)
                              
                                 
                                    
                                       S
                                    
                                    
                                       Hybrid
                                    
                                 
                                 (
                                 q
                                 ,
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          k
                                          =
                                          1
                                       
                                       
                                          M
                                       
                                    
                                 
                                 (
                                 
                                    
                                       wt
                                    
                                    
                                       q
                                       ,
                                       k
                                    
                                 
                                 ×
                                 
                                    
                                       wt
                                    
                                    
                                       i
                                       ,
                                       k
                                    
                                 
                                 +
                                 (
                                 1
                                 +
                                 σ
                                 
                                    
                                       t
                                    
                                    
                                       k
                                    
                                 
                                 )
                                 ×
                                 ν
                                 t
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       k
                                    
                                 
                                 ,
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 )
                                 /
                                 
                                    
                                       #
                                       of
                                       ·
                                       triples
                                       ·
                                       in
                                       ·
                                       
                                          
                                             d
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (15)
                              
                                 ν
                                 t
                                 (
                                 
                                    
                                       t
                                    
                                    
                                       k
                                    
                                 
                                 ,
                                 
                                    
                                       d
                                    
                                    
                                       i
                                    
                                 
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          V
                                       
                                    
                                 
                                 
                                    
                                       w
                                    
                                    
                                       
                                          
                                             t
                                          
                                          
                                             k
                                          
                                       
                                       ,
                                       j
                                    
                                 
                                 ×
                                 
                                    
                                       w
                                    
                                    
                                       i
                                       ,
                                       j
                                    
                                 
                                 /
                                 
                                    
                                       #
                                       of
                                       ·
                                       terms
                                       ·
                                       in
                                       ·
                                       
                                          
                                             d
                                          
                                          
                                             i
                                          
                                       
                                    
                                 
                              
                           
                        
                     

As in Eq. (6) 
                        V is the term size, 
                           
                              
                                 
                                    w
                                 
                                 
                                    
                                       
                                          t
                                       
                                       
                                          k
                                       
                                    
                                    ,
                                    j
                                 
                              
                           
                         is the weight of term 
                           j
                         in tk
                        , which is a set of all terms in the kth
                         triple of the query, and wi,j
                         is the weight of term 
                           j
                         in document 
                           i
                        .


                        Figs. 2
                        a and b show examples of the keyword-based and predicate-based queries that represent the same query intent. This query was provided as part of our user study which is discussed in detail below. The keyword-based search uses four words (Fig. 2a) and the predicate-based search uses a query diagram that consists of 2 triples, each triple containing 4–6 words (Fig. 2b).

The keyword-based search calculates the similarity score using formula (8), which is the sum of the 
                           tf
                        -
                           idf
                         values of keywords in the query. Our predicate-based search reflecting both keywords and predicates uses formula (14) to calculate the similarity score. In our example there are two triples expressed as “cause (mutated NBS1, CNS damage)” and “interfere with (mutated NBS1, Neurotransmitter release).” Each triple is considered one unit and treated in the same manner as keywords are treated in the conventional approach. As described in (14), the predicate-based search algorithm combines two components. The first component (wtq
                        
                        ,
                        
                           k
                        
                        ×
                        wti
                        
                        ,
                        
                           k
                        ) is the 
                           tf
                        -
                           idf
                         of triples in the query. The second component 
                           
                              (
                              1
                              +
                              σ
                              
                                 
                                    t
                                 
                                 
                                    k
                                 
                              
                              )
                              ×
                              vt
                              (
                              
                                 
                                    t
                                 
                                 
                                    k
                                 
                              
                              ,
                              d
                              )
                              i
                              )
                           
                         takes into account the number of similar words in a query triple and document triples. The more words they have in common, the higher the score due to the multiplication of the 
                           tf
                        -
                           idf
                         
                        νt(tk
                        ,
                        di
                        ) of the words in the triple and a boosting component. νt(tk
                        ,
                        di
                        ) of words in a triple is calculated in the same way as the keyword-based scheme; “cause, mutated, NBS1, CNS, damage” are used as words in the first triple and “interfere, with, mutated, NBS1, Neurotransmitter release” are considered as words for the second triple.

The boosting component (1+
                        σtj
                        ) is calculated by comparing the overlap in words in each element (subject, predicate, object) of the triples. For example, for a query containing the triple: [mutated NBS1], [causes], and [CNS damage], and a document containing the following triple: [NBS1 deletion], [causes], and [CNS damage], the number of common words between query subjects of the query triple and the document triple is 1 (NBS1) out of 2 subject words (mutated NBS1) of the query triple. The number of common words between the predicates is 1 (causes) out of 1 predicate words (causes) of the query triple. The number of common words between the objects is 2 (CNS damage) out of 2 object words (CNS damage) of the query triple. When δ, which is the degree of a predicate’s importance for the triple matching, is 0.2, σtj
                         is calculated as follows:
                           
                              
                                 σ
                                 t
                                 =
                                 
                                    
                                       0.8
                                    
                                    
                                       2
                                    
                                 
                                 ×
                                 
                                    
                                       1
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 0.2
                                 ×
                                 
                                    
                                       1
                                    
                                    
                                       1
                                    
                                 
                                 +
                                 
                                    
                                       0.8
                                    
                                    
                                       2
                                    
                                 
                                 ×
                                 
                                    
                                       2
                                    
                                    
                                       2
                                    
                                 
                                 =
                                 0.2
                                 +
                                 0.2
                                 +
                                 0.4
                                 =
                                 0.8
                              
                           
                        
                     

This score shows the degree of similarity between triples and can be used to score documents that contain triples similar to those of the query. Fig. 3
                         describes the pseudo code of calculating a similarity score using the predicate-based search algorithm.

Since a search engine works with a large collection of indexed documents, an algorithm matching queries to this index cannot be slow. For the complexity analysis of our algorithm, we assume that there are N documents in the collection, T triples in a query, and K terms in a triple. The time necessary for calculating the predicate-based similarity scores is (T(N+KN)+
                     N), which is translated using Big-O analysis to O(N). The time necessary for sorting the documents based on the similarity score is (N log N). Therefore, the overall complexity is O(N log N).

To conduct a complete user study we worked with two cancer researchers at the University of Arizona Cancer center who provided queries and evaluated results. Each cancer researcher has a Ph.D. in molecular and cellular biology, and has extensive research experience in the causes and remedies of specific cancers. To develop a reasonable test bed relevant to these researchers, we requested that they list keywords that broadly describe their ongoing research. They provides us with the following terms: rds, mdm2, bmh1, bmh2, 14-3-3, p53, egfr, 53bp1, hsp90, hsc70, nbs1, cns, chk2, a.l.l., atr, tel1, xrs2, cdc20, g1/s, nbs, and dsb.

We downloaded the entire collection of Medline abstracts as provided by the National Library of Medicine (NLM) for research purposes. These abstracts were provided as compressed XML files and each file contained hundreds of thousands of Medline abstracts with complete information, i.e., title, abstract, authors, etc. We developed an XML parser to extract each abstract that contained any of the above keywords. This resulted in a collection of 107,367 abstracts each of which contained one or more of the keywords. All abstracts for our test bed were stored locally on a MS SQL Server and the title and abstract was parsed using our triple parser [48] resulting in more than 4,500,000 triples (see Table 1
                        ) which were stored in the database.

To evaluate the predicate-based searching algorithm, 20 test queries were collected by the cancer researchers. These are ‘real’ queries used by the cancer researchers as part of their ongoing research, collected over a period of two weeks, and used for searching the Medline abstract database. For each query, the cancer researchers provided a written description of the intent of the query, keywords for keyword-based search, and a query diagram for the triple-based search that shows the triples to be used for searching. For example, in one instance a researcher wrote that the researcher intended to determine if “ATR binds to NBS1 causing inhibition of endocytosis.” In order to search for this he used the following three keywords to search PubMed; “ATR, NBS1, endocytosis”. The research then, using pencil and paper, drew a search diagram to represent his search. The search diagram provided the following two triples: “bind (ATR, NBS1)” and “inhibits (NBS1, Endocytosis)”.

We used the 20 queries provided by the researchers to compare two search schemes (independent variable): a keyword-based search (baseline) versus the new predicate-based search. The queries were submitted to keyword and predicate-based search algorithms. In executing our baseline search method we needed to avoid oversimplification while also using only the keywords in order to avoid confounded variables. We therefore used the Apache Lucene search engine core, widely recognized and used in many companies, to execute the baseline keyword search.

For each query evaluation we used the top 15 abstracts retrieved, and the ranking of the abstracts depended on the score received in each approach. We combined all abstracts per query and randomized their order. The cancer researchers then evaluated each abstract with respect to their original query intent. They did not know through which approach an abstract was retrieved, allowing us to conduct this experiment in double-blind fashion.

To ensure a detailed evaluation, the cancer researchers scored each abstract using a modified 5-point Likert scale. If a document was not relevant at all to the search intention it was given a 0 (zero). If a document is considered to be relevant, it is given a value between 1 and 5 inclusive with 5 indicating strong relevance. So, if a retrieved abstract is strongly relevant to the query, its score will be 5 and if the abstract is weakly relevant to the query, its score will be 1. For our study, we averaged the scores per abstract for the two cancer researchers.

Using these scores, we calculated precision, relevance, and weighted relevance (dependent variables). We did not calculate recall since this would require the evaluation of each abstract in our entire collection for each query. Precision was measured to evaluate the correctness of the retrieved documents. It was calculated by dividing the number of relevant documents (score of 1 or higher) by the number of retrieved documents. Relevance was the score average (0–5) given to each document by evaluators. To measure the performance and impact of the ranking algorithm the weighted relevance was calculated as the score average weighted by the retrieved order. The scores were adjusted by multiplying with weight representing rank. For example, when 15 documents were retrieved, the first ranked abstract was multiplied by 1.0, the second ranked abstract by 1-1/15, the third ranked abstract by 1-2/15, and so on.
                           
                              (16)
                              
                                 precision
                                 =
                                 #
                                 of relevant documents
                                 /
                                 #
                                 of retrieved documents
                              
                           
                        
                        
                           
                              (17)
                              
                                 relevance
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            i
                                                            =
                                                            1
                                                         
                                                         
                                                            m
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        ∑
                                                                     
                                                                     
                                                                        j
                                                                        =
                                                                        1
                                                                     
                                                                     
                                                                        n
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        score
                                                                     
                                                                     
                                                                        ij
                                                                     
                                                                  
                                                               
                                                               
                                                                  n
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 m
                              
                           
                        
                        
                           
                              (18)
                              
                                 weighted relevance
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            i
                                                            =
                                                            1
                                                         
                                                         
                                                            m
                                                         
                                                      
                                                   
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        ∑
                                                                     
                                                                     
                                                                        j
                                                                        =
                                                                        1
                                                                     
                                                                     
                                                                        n
                                                                     
                                                                  
                                                                  
                                                                     
                                                                        score
                                                                     
                                                                     
                                                                        ij
                                                                     
                                                                  
                                                               
                                                               
                                                                  n
                                                               
                                                            
                                                         
                                                      
                                                   
                                                   ×
                                                   
                                                      
                                                         ω
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 m
                                 ,
                                 
                                    
                                       ω
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       n
                                       -
                                       
                                          
                                             r
                                          
                                          
                                             i
                                          
                                       
                                    
                                    
                                       n
                                    
                                 
                              
                           
                        where 
                           m
                         is the number of retrieved documents, 
                           n
                         is the number of evaluators (i.e., cancer researchers), 
                           scoreij
                           
                         is the score given to document 
                           i
                         by evaluator 
                           j
                         and 
                           ri
                           
                         is the rank of document 
                           i
                         (0⩽
                        ri
                           
                        ⩽
                        n
                        −1).

@&#RESULTS@&#

Submitting the 20 queries using both search schemes and retaining the top 15 of the retrieved abstracts, resulted in 600 abstracts (20queries×2search schemes×15abstracts). After removing duplicate abstracts, 480 unique abstracts remained.


                        Tables 2–5
                        
                        
                        
                         show the experiment results for the keyword-based and predicate-based searches. We conducted paired-samples t-test for all three evaluation metrics to compare both conditions since each query was evaluated (repeated) for both approaches. In each table, highest scores were marked in bold.

As shown in Table 2 the precision was on average 70.83% for keyword-based searches and 80.00% for predicate-based searches—a 9.17% improvement. The paired-samples t-test showed that the difference between the two approaches is statistically significant (t(19)=−6.011, p
                        <0.001). The predicate-based approach clearly produced a performance improvement that is consistent—16 out of 20 queries achieved higher precision. That is, the triples and the search scheme allowed more precise searching and retrieval of abstracts.


                        Table 3 shows that the relevance for the keywords-based approach was on average 1.60 while it was on average 2.10 for the predicate-based approach, a 31.25% improvement. A paired-samples t-test showed the difference was statistically significant (t(19)=−8.944, p
                        <0.001), and relevance showed the same pattern of improvement as precision. Relevance was higher with the predicate-based approach for all but one query (query 19).

The weighted relevance, shown in Table 4, was on average 0.98 for the keyword-based search and 1.34 for the predicate-based search, a 36.73% improvement. Similar to the average evaluation scores, a paired-samples t-test showed a significant difference between the two weighted scores (t(19)=−10.348, p
                        <0.001). Weighted relevance was again higher for the predicate-based approach for all but one query (Query 19).

Both relevance scores of the predicate-based search increased by more than 30% compared to the keyword-based search. In addition, the rank weighted relevance scores were improved over the regular relevance score (31.25%→36.73%), indicating that the predicate-based search enhanced the ranking performance compared to the keyword-based search.

It should be noted that the relevance scores (1.60 and 2.10) and weighted relevance scores (0.98 and 1.34) of two search schemes seem to be relatively small on a 5-point Likert scale. That is because 6–8 of the top 15 retrieved documents per query were evaluated less relevant or not relevant to the search intent, (with scores of 0, 1 or 2), thereby reducing the overall average. We may have achieved higher relevance scores by reducing the number of abstracts per query, for example, the top 10 instead of 15. However, we opted for this larger set of abstracts to be able to conduct a more detailed analysis of strengths and weaknesses of this approach.

In Table 5 we displayed the scores of all 20 queries to demonstrate the consistency of our approach. A detailed example demonstrates the impact of limiting our evaluation to a smaller set of abstracts. The query example discussed in the introduction (see Figs. 2a and b) was Query 1 in our test bed. The researchers considered on average 9 out of 15 retrieved abstracts relevant for the keyword-based search and 11 out of 15 relevant for the predicate-based search. The average relevance score of Query 1 for the predicate-based search was improved from 1.23 to 2.00 compared to the keyword-based search. Had we limited our evaluation to the top 5 abstracts, the average relevance scores would have been 3.06 and 2.35 for the predicate-based and keyword-based search respectively.

There is one interesting exception in our results. The relevance scores of the predicate-based search for Query 19 were not improved. Upon examination, we found that most of triples in the query do not fully match the triples from the documents, resulting in the decrease of the similarity scores in the predicate-based search.

@&#CONCLUSION@&#

Our goal is to develop a search engine that can retrieve precisely matched information. To make this possible, a richer data structure is needed to match documents to queries. Switching from keywords to predicates, i.e., triples consisting of a subject, object, and predicate (verb or preposition) may provide the answer. Since we have preliminary evidence that an intuitive interface can be developed for this new approach using search diagrams, and we have developed an effective predicate parser, we focused this study on the essential back-end component—the search engine index and its matching/searching algorithms. We developed the new required predicate-based query-document matching algorithms, evaluated the results in a user study with 20 queries tested against a test bed of more than 100,000 Medline abstracts, and had them evaluated in double-blind test by two cancer researchers. Our study showed significantly increased precision and relevance of documents retrieved by the predicate-based versus the keyword-based approach. Precision of the predicate-based search was improved by 9.17% over the keyword-based approach. Relevance for the predicate-based search was improved by 31.25% compared to relevance with the keyword-based approach, while the weighted relevance of the predicate-based approach, which takes order into account, was improved by 36.73% compared to weighted relevance of the keyword-based approach.

Although our approach showed promise, there is room for improvement. The first limitation of our approach was the literal matching of terms. In future research we will include stemming and also evaluate the use of synonyms to improve document matches. The second limitation is that all triples were treated equally in our approach. We believe that by adjusting the scoring for ‘important’ triples, we will be able to improve our approach. The importance of a triple may depend on a variety of factors such as content or placing in the query diagram. The third limitation is that active voice predicates and passive voice predicates are treated as two different predicates in our model even when they are semantically the same. We believe that a solution to this problem could significantly improve performance. The fourth limitation is that the textual interface of traditional search engines may allow users to enter searches more quickly than the query diagram interface describe in our approach. It would require additional effort to create a working query diagram interface convenient enough for users; however, we demonstrated the possibility that query creation could be easy to use for a wide variety of people in our previous study [55] with a paper-based prototype. Additionally, touch screen interfaces in which various diagrams and search objects such as text boxes and arrows can be easily created and manipulated are increasingly being adopted in today’s computers and we believe that touch screen adoption rates will continue to increase in the future. Finally, we will evaluate search speed and take it into account for further development. Search engines process millions of documents, which result in billions of triples. A triple store that allows management of such vast data may be needed, e.g., HBase.

We believe our approach may lay the foundation for a very different type of search approach, allowing for greater sophistication even with small interfaces such as mobile devices. Our future work will not only include improvements of the triple based approach, but also the development of an intuitive user interface. Finally, we believe that our approach will be especially useful with full text documents instead of abstracts where much more text is available for matching query triples.


                     
                        
                           
                              
                              
                              
                              
                                 
                                    Query intent
                                    Keywords
                                    Diagram query
                                 
                              
                              
                                 
                                    1. TEL1 activates XRS2 which binds to CDC20, causing a cell cycle delay.
                                    TEL1, XRS2, CDC20, Cell Cycle Delay
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    2. DSBreaks in Nijmegen Break Syndrome (NBS) are not the cause of the CNS defects in these patients.
                                    Double Strand DNA breaks, Nijmegen, CNS
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    3. NBS1 interacts with endocytic proteins to affect the central nervous system.
                                    NBS1, Endocytosis, CNS
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    4. Mutated NBS1 causes decreased neurotransmitter release, which results in CNS damage.
                                    NBS1, Neurotransmitter, CNS damage
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    5. Defects in endocytosis change the subcellular localization of XRS2 leading to increased DNA damage.
                                    Endocytosis, Subcelluler localization, XRS2, DNA damage
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    6. 14-3-3 proteins regulate the G1/S checkpoint by binding to cyclins.
                                    14-3-3, G1/S checkpoint
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    7. TEL1 binds XRS2 and the complex modulates the cell cycle via CDC20.
                                    TEL1, XRS2, Cell cycle, CDC20
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    8. Defective NBS1 causes DNA double-strand breaks which lead to neurologic damage.
                                    NBS1, Mutation, DNA double-strand breaks, Neurologic damage
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    9. ATR binds to NBS1 causing inhibition of endocytosis.
                                    ATR, NBS1, Endocytosis
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    10. Do patients treated for A.L.L (acute lymphocytic leukemia) develop cognitive defects?
                                    Acute Lymphocytic Leukemia, Cognition, Therapy
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    11. The relationship between heat-shock and DNA damage response pathway.
                                    Heat-shock, DNA damage response
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    12. Relationship between HSC70 and P53
                                    HSC70, P53
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    13. Relationship between HSP90 and P53 activation
                                    HSP90, P53
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    14. Relationship between 53BP1 and P53 activation
                                    53BP1, P53
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    15. The role of Mdm2 in regulation of P53 nuclear transport
                                    Mdm2, P53
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    16. The effect of Deoxycholic Acid and Reception Endocytosis
                                    Deoxycholic Acid, Endocytosis
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    17. The effect of Deoxycholic Acid and EGFR Localization
                                    Deoxycholic Acid, EGFR
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    18. The effect of Deoxycholic Acid and EGFR Signaling
                                    Deoxycholic Acid, EGFR
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    19. Mutations of NBS1 inhibit endocytosis by binding endocytic proteins
                                    Mutation, NBS1, Endocytosis
                                    
                                       
                                          
                                       
                                    
                                 
                                 
                                    20. Isoforms 14-3-3 proteins bind to ChK2 to activate (inhibit) checkpoint activity
                                    14-3-3, Isoforms, ChK2, Checkpoint
                                    
                                       
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                  

@&#REFERENCES@&#

