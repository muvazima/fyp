@&#MAIN-TITLE@&#PCLab – A software with interactive graphical user interface for Monte Carlo and finite element analysis of microstructure-based layered composites

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           An object-oriented software with interactive GUI interface has been developed.


                        
                        
                           
                           Integrated MC and FEA modules can sequentially analyze microstructure evolution and mechanical performance.


                        
                        
                           
                           PCLab provides an efficient tool for faster material design and application.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Object-oriented programming

Graphical user interface

Monte Carlo/finite element method

Microstructure-based layered composites

@&#ABSTRACT@&#


               
               
                  To effectively investigate the mechanical performance of microstructure-based layered composites, an object-oriented software with interactive graphical user interface has been developed. This software, named PCLab, is able to analyze the microstructure evolution and mechanical performance by both Monte Carlo (MC) simulation and the Finite Element method (FEM). The software has integrated preprocessors, solvers and postprocessors. Some examples are tested and explored the functionality of the software package. It shows that the PCLab software with a user-friendly graphical interface provides an efficient tool for faster material analysis, design and application. It also provides a flexible, robust platform for the future extensity in the material multi-physics research.
               
            

@&#INTRODUCTION@&#

Layered composites, especially layered ceramics, are considered to be a very promising material for different engineering applications because of their excellent mechanical properties such as high hardness, high strength and high fracture toughness, instead of a catastrophic fracture behavior of monolithic ceramics. As we know, the grain structure is an important microstructural feature of a material, which will greatly affect the mechanical properties such as strength and toughness. During the last few decades, many researchers have made great efforts in the study of microstructure evolution by numerical simulation methods such as cellular automaton [1], phase field [2] and Monte Carlo (MC) [3] methods. The MC Potts model is a popular approach for studying grain growth kinetics, owing to its simplicity and flexibility. Many other researchers devoted to investigate the microstructure evolution of materials with single phase [3–6], two phases [7,8], or multiple phases [9], using MC or modified MC methods [10–12]. The Monte Carlo method has gained its popularity for microstructure evolution in the past decades, while the finite element method is being widely employed for solving structural problems. In our previous work [13], the numerical simulation was successfully applied by combining MC and FEM to perform the stress analysis of the polycrystalline materials during the microstructure evolution by Matlab and C++ console application.

Computer simulation of microstructural evolution and mechanical performance in an interactive graphics software gives insight into the grain structure, enabling materials to be grown in the best possible manner according to the prescribed conditions. To normal users of any software, effective graphical interface for both the pre- and post-processors is needed. The use of object-oriented programming (OOP) considered to be a well-suited approach for serious developers has become a common paradigm in many software development fields, including scientific and engineering software [14,15]. Several finite element analysis programs including a GUI environment such as FER/View, FER/Solid, FER/Contact, etc. have been developed by Feng et al. and are reported online [16]. PCLab, an object-oriented Monte Carlo/Finite element software with interactive graphics, is developed based on OpenGL and Qt on an open numerical simulation software development platform OMT (Objected and Methodological Technology [17]).

The purpose of the present study is to illustrate the practical application of the object-oriented approach for the mechanical performance investigation of polycrystalline microstructures under a friendly graphical user interface environment. The remainder of this paper is organized as follows: Section 2 presents the general structure of the PCLab software, as well as the simulation methods and the functionalities of PCLab. Several examples for the microstructure evolution and the stress analysis are presented in Section 3 to illustrate the functionalities of the software and to highlight the graphics representations of the numerical solutions. Conclusions are presented in Section 4.

PCLab, a member in the CAE software family, is a prototype graphical interface software developed for the mechanical performance investigation of microstructure-based composites via Monte Carlo method and finite element method.

The proposed model of layered materials can be essentially divided into several functional modules: modeling of the microstructure, calculation of stress field and obtention of overall properties of the structure. Fig. 1
                         shows the flow chart of the software, which includes the most important modules, the Monte Carlo simulation module and the finite element stress analysis module.

The main software architecture to develop the PCLab application based on software development platform OMT is illustrated in Fig. 2
                        . Fig. 3
                         shows the user-interface of PCLab integrated MC and FEM applications with Project, View, Scripting/Message and Progress windows.

OMT platform manages a list of abstract modules such as std:: vector 〈OmtModuleBase*〉 m
                           _
                        modules. This is the biggest advantage of OOP in large scale software design to split a complicated problem into different concrete module, and using a uniform way to manage all module and to handle module common functionalities such as manage them in project window. Look at project window(Fig. 3) in which it is consistent with the design, each module corresponds one project item on GUI, and inside the concrete module, it can manage its own specific data items.

ModuleMesh, OmtTsmcMCS and OmtTsmcFEA modules derive from base class OmtModuleBase. These modules are product specific, so the concrete modules are created inside PCLab to perform its own job. Monte carlo module OmtTsmcMCS is in charge of MC simulation data setup for layered material, and launches the separate MC solver engine. That is why we say keeping various module independent to avoid confusion in such as multi-physics problem. The same to OmtTsmcFEA module, it manages FEA related data setup, and calls FEA solver engine for mechanical simulation. “Other Module” added on above chart is to explain that, with OOP design, PCLab is flexible to plug in other new functional module for the future extensity. For example, we are working on crystal builder module for the research of materials genome. If someone wants to work on a new functional module for the research in other fields in his/her applications, such a new module deriving from base class OmtModuleBase is designable.

In PCLab, it is also in charge of managing the relationship between modules, for example, mesh gets used by both MC and FEM, gathers MC solver output data and fill into FEA module for stress calculation and gathers both MC and FEA results data for postprocessing done inside OMT platform.

As compared with the traditional function-oriented programming technique, OOP is more structured and modular, yielding programs that are easily maintained, resilient, and powerful because of its basic features: encapsulation of data structure, inheritance and polymorphism etc. The basic concepts performed in PCLab are listed as follows:

                           
                              •
                              
                                 Encapsulation: Using MC module OmtTsmcMC to encapsulate all MC related data, operations together, and manage FEM related data, operations in its own module OmtTsmcFEA.


                                 Inheritance: We have a base abstract class OmtModuleBase used inside Omt platform, but the concrete module classes are implemented inside PCLab. With this very good OOP concept, we can keep all common data, behavior inside base class and manage them in a uniform way, and in the concrete class, it does specific work differently. As explained above, ModuleMesh, OmtTsmcMCS and OmtTsmcFEA modules derive from base class OmtModuleBase and they are created inside PCLab to perform its own job.


                                 Polymorphism: Take the operation of saving project as example to explain how this concept get used in PCLab. When user saves PCLab project, on OMT platform, first create project file, then do a loop on all module, and call each module SaveModule function. “SaveModule” is a virtual function defined in base class, and the concrete module override this method too. Although the uniform, simple way is used in OMT platform to ask module to do saving operation, in fact, the concrete class SaveModule method gets call in which each module can save its own data inside project file.

The mechanical properties of materials are intimately related to their microstructures, and computer simulation of microstructure evolution and mechanical performance such as stress distribution give insight into the grain structure, enabling materials to grow in the best possible manner according to the prescribed conditions. The main task for the mechanical performance investigation of microstructures is to integrate Monte Carlo module for polycrystalline growth computation in the software platform and to call FEM solver engine for stress computation.

The solver in MC simulation module is based on the Monte Carlo approach for the microstructure evolutions. The application of the Monte Carlo technique to simulate grain growth has been described in detail[6,13,18,19], thus only the essential feature of this technique is addressed here. A 2D continuum microstructure is mapped onto a discretized domain that composes a set of N
                           1 × N
                           2 lattice grids. Each of the lattice grids is assigned a random orientation number between 1 and the total orientation number Q. The adjacent lattice grid with the same state will form a grain. The grain area, A, is the number of lattice grids within one grain. The grain size (R) and the mean grain size (〈R 〉) are defined by 
                              
                                 R
                                 
                                 =
                                 
                                 
                                    A
                                 
                              
                            and 
                              
                                 
                                    〈
                                    R
                                    〉
                                 
                                 =
                                 
                                    
                                       N
                                       
                                          N
                                          
                                             g
                                             r
                                             a
                                             i
                                             n
                                          
                                       
                                    
                                 
                              
                            
                           [6], respectively, where, N is the total number of lattice grids, Ngrain
                            is the number of grains of the microstructure. During the microstructure evolution, the grain boundary migration is driven by the local interaction energy variation ΔE with a probability of reorientation.

The grain growth is modeled in the following procedures: Select a trial grid (ix, iy) in the lattice and note its orientation as Siold
                           , then generate randomly a new trial orientation number of the selected grid termed as Sinew
                           , and then determine if the reorientation is preferred or not based on the local interaction energy variation ΔE. Fig. 4
                           
                            shows the flow chart of MC simulation for microstructure evolution. The simulation time is measured in terms of a Monte Carlo step (MCS). Each MCS repeats the above procedures to judge reorientation attempts for all the N
                           1 × N
                           2 lattice grids.

For layered composites, it is assumed that the grains grow up independently in each individual layer, and the microstructure can be obtained layer by layer using MC simulation.

The solver in the finite element stress analysis module is developed for a linearly elastic material with microstructure obtained by the MC simulation in Section 2.2.1. For a 2D module, a cross section of a linearly elastic material is taken into account, and a plane strain problem is considered. The fundamental equations of elasticity theory including equilibrium equations, kinematics equations, and constitutive equations, which have been described in detail in Ref. [13], are applied for the numerical computation of mechanical behaviors of layered composites. A plane strain problem neglecting body forces is considered here. The 2D finite element model corresponding to the microstructure is utilized for the numerical mechanical analysis. The 4-node linear element is used in the analysis, and the nodes correspond to the grids obtained by the MC technique. Usually, there are relatively thin boundaries between grains or between layers in the layered materials, so we introduce four kinds of materials in a single layer, and they are grain, grain boundary, upper layer interface and lower layer interface. The element whose nodes have different orientations belongs to the grain boundaries, and that adjacent to other layer belongs to layer interface. The mechanical properties of microheterogeneous materials are characterized by a spatially variable elasticity tensor 
                              C
                           . Typically, to characterize the homogenized effective macroscopic response of such materials, a relation between averages is given by
                           
                           
                           
                              
                                 (1)
                                 
                                    
                                       
                                          〈
                                          σ
                                          〉
                                       
                                       =
                                       
                                          C
                                          *
                                       
                                       :
                                       
                                          〈
                                          
                                             ɛ
                                          
                                          〉
                                       
                                    
                                 
                              
                           where the quantity 
                              
                                 C
                                 *
                              
                            is the elasticity tensor defined within the domain Ω. The average stress ⟨σ⟩ and the average strain ⟨ε⟩ are defined by

                              
                                 (2)
                                 
                                    
                                       
                                          〈
                                          σ
                                          〉
                                       
                                       =
                                       
                                          1
                                          
                                             |
                                             Ω
                                             |
                                          
                                       
                                       
                                          ∫
                                          Ω
                                       
                                       σ
                                       d
                                       Ω
                                       ,
                                       
                                       
                                       
                                          〈
                                          
                                             ɛ
                                          
                                          〉
                                       
                                       =
                                       
                                          1
                                          
                                             |
                                             Ω
                                             |
                                          
                                       
                                       
                                          ∫
                                          Ω
                                       
                                       
                                          ɛ
                                       
                                       d
                                       Ω
                                    
                                 
                              
                           
                        

PCLab is an integrated graphics/analysis environment that is composed of three main parts, the preprocessor, the solvers and the postprocessor . After preprocessing, an input file is created, which is used by the solver. The results are written in an output file and displayed by the postprocessor. Fig. 1 shows the flow diagram of the software. Some main features of PCLab are summarized as follows:

“Grain growth parameters setting” and “material properties setting” shown in Fig. 1 belong to preprocess part, and the main functionalities are listed as follows:

                              
                                 •
                                 Allow user to create, modify and delete the model geometry (Lattice grids, layer thickness ratios, number of layers). The Monte Carlo simulation parameters dialog box is shown in Fig. 5 with default settings, and allow users, for example, to simulate the 2D microstructure evolution of a three-layer material with total geometry of 1 × 1 and layer thickness ratio of 1:1:1 during 300 MCS. The initial microstructure with grid orientation between 0 and 48 will be import from the exiting data when the Added simulation box is checked, otherwise it is randomly initialized. The results will be recorded for postprocess every 10 MCS.

Set the material properties for finite element analysis in a dialog box, as shown in Fig. 6. Taking a four-layered microstructure for example, the grain boundary and layer interfaces are default considered, and the corresponding boxes are all checked in the dialog box. The properties of four material of a selected individual layer including Young’s modulus and Poisson ratio are listed in the bottom.
                                    
                                    
                                    
                                    
                                    
                                 

Create input files for the solvers. This files are easy to read and contain only necessary information.

“Microstructure evolution simulation” and “Stress field solving” shown in Fig. 1 belong to solver part, and the main functionalities are listed as follows:

                              
                                 •
                                 Perform Monte Carlo simulation via calling MC engine.

Perform stress analysis via calling FEM engine.

Create output files of the solutions for postprocessor, including the grain orientation, the grain size, the number of grains, the stress distribution and the average stress at every output MCS.

“Grain growth plot and report” and “Field plot and report” shown in Fig. 1 belong to postprocess part, and the main functionalities are listed as follows:

                              
                                 •
                                 Read the output files of the solutions.

Import the stress analysis solutions.

Display the microstructure of the layered material at selected MCS step.

Display mesh of the material structure.

Create reports about the microstructure evolution such as the relationships between the grain size and the MCS step.

Create reports about the mechanical performance such as the average stress with the change of microstructure.

Show animation of the microstructure evolution and the corresponding stress distribution.

Create field plots such as stress and strain distribution at the selected MCS step, see Fig. 7.

In order to test and validate the functions and the capability of the PCLab software discussed above, several specific examples have been carried out.

                        Example 1
                        2D MC microstructure simulation


                        User can launch the PCLab.exe, and click the “New” button in the “File” menu of the user interface (Fig. 3) to create a new project to start a 2D microstructure evolution of a single-layer material. In the Scripting/Messange window, a command “project create -type OmtView -file D://PCLabTest.pcl” is executed, and three modules, namely Mesh, MonteCarlo and OmtFea, are built in the project window simultaneously. Then input the parameters of MC simulation in the dialog as shown in Fig. 5 by double click the Setup button in the project window or directly click the Data Edit button in the toolbar. On the “MonteCarlo” right click menu, click “Simulate” to do the microstructure evolution. After Monte Carlo simulation, the microstructure evolution are obtained and the corresponding grain analysis report are available as shown in Figs. 8 and 9. It is obviously seen that the grain size increases with the simulation time, whereas the number of grains decreases.

As shown in Fig. 5, there are two options provided to users to solve a 2D or 3D dimension problem. PCLab is successfully extended to simulate the 3D microstructure evolution, and the grain analysis report is obtained as shown in Figs. 10 and 11. It is obviously seen that the grain size increases with the simulation time, whereas the number of grains decreases.

After the MC simulation of a 2D microstructure evolution of layered material, the corresponding mechanical performance are studied getting through with the parameter setup process illustrated in Fig. 6. Fig. 3 shows the mesh of a three-layer material with 90  × 90 grids and the microstructure distribution at 1000 MCS, and the stress distribution is shown in Fig. 12. From the obtained results, it is seen that the stress distribution is heterogeneous in each individual layer because of grain orientation.

PCLab exhibits good flexibility for the numerical simulation. For example:

                        
                           •
                           Users can adjust the parameters in the parameter setting dialog box (right-left corner of the Fig. 5, the Added simulation check box) to obtain the initial grain orientation distribution with proper initial grain size from the existing MC results and continue to simulate the microstructure evolution.

In addition, users are allowed to manually control the grain size difference between the odd and the even layers (Fig. 13) through the Keep layer and Delta Step check boxes (Fig. 5).

One can take any situation with boundary effects into account by selecting the lower and the upper interface between layers in the process of stress computation parameter setting (Fig. 6).

Besides, in the stress analysis, it is easy to import the obtained FEA result by right click Solve item in the project window, and to do further analysis of the problem.

It is also allowed to rename the Solve name and modify the stress computation parameters to simulate another stress distribution for the same microstructure in a new folder.

In the FEA report plot, we can import the results of different situations and plot the reports together to view the effects of the parameters such as material properties, the grain boundaries, and the layer interfaces on the mechanical performance. Fig. 14 shows the average stress versus the grain size of a three-layered material with the same microstructure but different material properties. Curve 1 is for the material with hard inner layer, and Curve 2 is for the material with soft inner layer. The grain boundary in the hard layer of the former material plays the role of weakening effect whereas the one in the soft layer of the later material plays the role of strengthening effect. As the grains grow up, the volume fraction of the grain boundary is reduced, and the effect of grain boundary is reduced, too. That is why the average stress increases with the grain size in Curve 1, whereas the average stress decreases with the grain size in Curve 2.

The examples given above show that the PCLab software is friendly for users to simulate microstructure evolution and perform finite element analysis in a very convenient way.

@&#CONCLUSION@&#

In this paper, we have presented the application of the object-oriented approach to the software PCLab, which effectively combines the MC and FEM methods for mechanical analysis of microstructure-based layered composites. Several specific examples are used to demonstrate the functionalities and the proposed user interface has proved to be satisfactory and flexible. It is possible to tune the stress distribution by varying the grain size, the layer thickness ratio, the number of layers, the modulus ratios and other parameters. PCLab software for the grain growth process and stress analysis will provide an efficient tool for faster material design and application. It also provides a flexible, robust platform for the future extensity in the material multi-physics research.

@&#ACKNOWLEDGEMENT@&#

This work is supported by the National Natural Science Foundation of China (grant nos. 51372203 and 11372260), the National Basic Research Program of China (2011CB605806), the Basic Research Foundation of NWPU (nos. JCY20130114 and NPU-FFR-JC20110248), and the Foreign Talents Introduction and Academic Exchange Program (no. B08040).

@&#REFERENCES@&#

