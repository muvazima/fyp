@&#MAIN-TITLE@&#Enhanced colliding bodies optimization for design problems with continuous and discrete variables

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           A new multi-agent algorithm inspired by a collision between two objects in one-dimension is presented.


                        
                        
                           
                           An enhanced colliding bodies optimization which uses memory to save some best solutions is developed.


                        
                        
                           
                           A mechanism is utilized to escape from local optima.


                        
                        
                           
                           Performance of the proposed algorithm is compared to those of standard CBO and some optimization techniques.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Colliding Bodies Optimization (CBO)

Coefficient Of Restitution (COR)

Enhanced Colliding Bodies Optimization (ECBO)

Colliding Memory (CM)

Discrete and continuous optimization

Optimum design of truss structures

@&#ABSTRACT@&#


               
               
                  Colliding Bodies Optimization (CBO) is a new multi-agent algorithm inspired by a collision between two objects in one-dimension. Each agent is modeled as a body with a specified mass and velocity. A collision occurs between pairs of objects and the new positions of the colliding bodies are updated based on the collision laws. In this paper, Enhanced Colliding Bodies Optimization (ECBO) which uses memory to save some best solutions is developed. In addition, a mechanism is utilized to escape from local optima. The performance of the proposed algorithm is compared to those of standard CBO and some optimization techniques on some benchmark mathematical functions and three standard discrete and continuous structural design problems. Optimization results confirm the validity of the proposed approach.
               
            

@&#INTRODUCTION@&#

Structural optimization is a challenging field that has received considerable attention by engineers and researchers. In recent years, a new class of optimization techniques, meta-heuristic algorithms, was introduced. These are effective tools for solving various engineering problems, and enabling the designers to optimize their structures in a reasonable time.

Metaheuristic methods contain a wide range of algorithms that have been used to solve optimization problems, such as Genetic Algorithm (GA), developed by Holland [1] and Goldberg [2], Simulated Annealing (SA), proposed by Kirkpatrick et al. [3], Particle Swarm Optimization (PSO), proposed by Eberhart and Kennedy [4] and [5], Ant Colony Optimization (ACO), introduced by Dorigo [6], Harmony Search (HS) algorithm, invented by Geem et al. [7], Big Bang–Big Crunch algorithm (BB–BC), introduced by Erol and Eksin [8], Charged System Search (CSS) introduced by Kaveh and Talatahari [9], and Ray optimization (RO), developed by Kaveh and Khayatazad [10].

A very recent addition to meta-heuristic algorithms is the Colliding Bodies Optimization (CBO) method, which was introduced by Kaveh and Mahdavi [11]. CBO is a population-based stochastic optimization algorithm that originates from one dimensional collisions between two bodies in which one object collides with another object and they moves toward minimum energy level. The movement process of the objects is based on the governing laws from the physics. CBO is considered for solving optimization problems in this research because it has simple theoretical structure, usually converges quickly and does not depend on any internal parameter. Furthermore, in this study, by storing the best designs obtained so far in a memory and adding a mechanism to escape from local minima, standard CBO is enhanced to formulate the ECBO (Enhanced Colliding Bodies Optimization) algorithm.

The rest of this paper is organized as follows. In Section 2, a brief overview of the CBO is presented and also the enhanced version of this algorithm (ECBO) is introduced. Section 3 uses benchmark functions and three truss structures with continues and discrete variables to compares ECBO against CBO and some other popular optimization methods. Finally, conclusions are derived in Section 4.

This section describes the enhanced colliding bodies optimization algorithm. First, a brief overview of standard CBO is provided, and then the ECBO is introduced.

The collision is a natural occurrence and the Colliding Bodies Optimization (CBO) algorithm was developed based on this phenomenon by Kaveh and Mahdavi [11]. In this technique, one object collides with other object and they move towards a minimum energy level. The CBO is simple in concept, does not depend on any internal parameter, and does not use memory for saving the best-so-far solutions.

This algorithm, like other multi-agent methods, has a number of agents. Each solution candidate Xi
                         is considered as a colliding body (CB) and it has a specified mass defined as:
                           
                              (1)
                              
                                 
                                    
                                       m
                                    
                                    
                                       k
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             1
                                          
                                          
                                             fit
                                             (
                                             k
                                             )
                                          
                                       
                                    
                                    
                                       
                                          
                                             1
                                          
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   n
                                                
                                             
                                             
                                                
                                                   1
                                                
                                                
                                                   fit
                                                   (
                                                   i
                                                   )
                                                
                                             
                                          
                                       
                                    
                                 
                                 ,
                                 
                                 k
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 
                                 ,
                                 n
                              
                           
                        where fit(i) represents the objective function value of the ith CB and n is the number of colliding bodies.

In order to select pairs of objects for collision, CBs are sorted according to their mass in a decreasing order and they are divided into two equal groups: (i) stationary group and (ii) moving group. Moving objects collide to stationary objects to improve their positions and push stationary objects towards better positions (see Fig. 1
                        ). The velocity of the stationary bodies before collision is zero so
                           
                              (2)
                              
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 0
                                 ,
                                 
                                 i
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       2
                                    
                                 
                              
                           
                        
                     

The velocity of each moving body before collision is
                           
                              (3)
                              
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       x
                                    
                                    
                                       i
                                       -
                                       
                                          
                                             n
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                                 -
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                 i
                                 =
                                 
                                    
                                       n
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 1
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 2
                                 ,
                                 …
                                 
                                 ,
                                 n
                              
                           
                        
                     

The velocity of each stationary CB after the collision (v′
                           i
                        ) is specified by
                           
                              (4)
                              
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      i
                                                      +
                                                      
                                                         
                                                            n
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                   
                                                
                                                +
                                                ε
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      i
                                                      +
                                                      
                                                         
                                                            n
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                             v
                                          
                                          
                                             i
                                             +
                                             
                                                
                                                   n
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             m
                                          
                                          
                                             i
                                          
                                       
                                       +
                                       
                                          
                                             m
                                          
                                          
                                             i
                                             +
                                             
                                                
                                                   n
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                    
                                 
                                 ,
                                 
                                 i
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       2
                                    
                                 
                              
                           
                        
                     

The velocity of each moving CB after the collision (v′
                           i
                        ) is defined by
                           
                              (5)
                              
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                    
                                       ′
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      i
                                                   
                                                
                                                -
                                                ε
                                                
                                                   
                                                      m
                                                   
                                                   
                                                      i
                                                      -
                                                      
                                                         
                                                            n
                                                         
                                                         
                                                            2
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                       
                                       
                                          
                                             v
                                          
                                          
                                             i
                                          
                                       
                                    
                                    
                                       
                                          
                                             m
                                          
                                          
                                             i
                                          
                                       
                                       +
                                       
                                          
                                             m
                                          
                                          
                                             i
                                             -
                                             
                                                
                                                   n
                                                
                                                
                                                   2
                                                
                                             
                                          
                                       
                                    
                                 
                                 ,
                                 
                                 i
                                 =
                                 
                                    
                                       n
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 1
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 2
                                 ,
                                 …
                                 
                                 ,
                                 n
                              
                           
                        
                        ε is the coefficient of restitution (COR) that decreases linearly from unit to zero. Thus, it is stated as
                           
                              (6)
                              
                                 ε
                                 =
                                 1
                                 -
                                 
                                    
                                       iter
                                    
                                    
                                       
                                          
                                             iter
                                          
                                          
                                             max
                                          
                                       
                                    
                                 
                              
                           
                        where iter is the current iteration number and iter
                        max is the total number of iteration for optimization process.

New positions of CBs are updated according to their velocities after the collision and the positions of stationary CBs. Therefore, the new position of each stationary CB is
                           
                              (7)
                              
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                    
                                       new
                                    
                                 
                                 =
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                 
                                 +
                                 rand
                                 ∘
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                 i
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       2
                                    
                                 
                              
                           
                        where xi
                           new
                        , xi
                         and v′
                           i
                         are the new position, previous position and the velocity after the collision of the ith CB, respectively. rand is a random vector uniformly distributed in the range of [−1,1] and the sign ‘‘∘” denotes an element-by-element multiplication. The new position of each moving CB is calculated by
                           
                              (8)
                              
                                 
                                    
                                       x
                                    
                                    
                                       i
                                    
                                    
                                       new
                                    
                                 
                                 =
                                 
                                    
                                       x
                                    
                                    
                                       i
                                       -
                                       
                                          
                                             n
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                                 +
                                 rand
                                 ∘
                                 
                                    
                                       v
                                    
                                    
                                       i
                                    
                                    
                                       ′
                                    
                                 
                                 ,
                                 
                                 i
                                 =
                                 
                                    
                                       n
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 1
                                 ,
                                 
                                    
                                       n
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 2
                                 ,
                                 …
                                 
                                 ,
                                 n
                              
                           
                        
                     

The process of optimization is terminated if the maximum number of analyses have been evaluated. For further details, the reader may refer to Kaveh and Mahdavi [11].

The purpose of this section is to introduce a modified version of the CBO, Enhanced Colliding Bodies Optimization (ECBO), which improves the CBO to get faster and more reliable solutions. The introduction of memory can increase the convergence speed of ECBO with respect to standard CBO. Furthermore, changing some components of colliding bodies will help ECBO to escape from local minima. The flowchart of ECBO is shown in Fig. 2
                         and the steps involved are given as follows:
                           
                              
                                 Step 1: Initialization
                                    
                                       The initial positions of all CBs are determined randomly in an m-dimensional search space. 
                                             
                                                (9)
                                                
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         i
                                                      
                                                      
                                                         0
                                                      
                                                   
                                                   =
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         min
                                                      
                                                   
                                                   +
                                                   random
                                                   ∘
                                                   (
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         max
                                                      
                                                   
                                                   -
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         min
                                                      
                                                   
                                                   )
                                                   ,
                                                   
                                                   i
                                                   =
                                                   1
                                                   ,
                                                   2
                                                   ,
                                                   …
                                                   
                                                   ,
                                                   n
                                                
                                             
                                           where x
                                          i
                                          0 is the initial solution vector of the ith CB. Here, x
                                          min and x
                                          max are the bounds of design variables; random is a random vector which each component is in the interval [0,1]; n is the number of CBs.


                                 Step 2: Defining mass
                                    
                                       The value of mass for each CB is evaluated according to Eq. (1).


                                 Step 3: Saving

Considering a memory which saves some historically best CB vectors and their related mass and objective function values can improve the algorithm performance without increasing the computational cost [9]. For that purpose, a Colliding Memory (CM) is utilized to save a number of the best-so-far solutions. Therefore in this step, the solution vectors saved in CM are added to the population, and the same numbers of current worst CBs are deleted. Finally, CBs are sorted according to their masses in a decreasing order.


                                 Step 4: Creating groups
                                    
                                       CBs are divided into two equal groups: (i) stationary group and (ii) moving group. The pairs of CBs are defined according to Fig. 1.


                                 Step 5: Criteria before the collision

The velocity of stationary bodies before collision is zero (Eq. (2)). Moving objects move toward stationary objects and their velocities before collision are calculated by Eq. (3).


                                 Step 6: Criteria after the collision

The velocities of stationary and moving bodies are evaluated using Eqs. (4) and (5), respectively.


                                 Step 7: Updating CBs
                                    
                                       The new position of each CB is calculated by Eqs. (7) and (8).


                                 Step 8: Escape from local optima
                                    
                                       Meta-heuristic algorithms should have the ability to escape from the trap when agents get close to a local optimum. In ECBO, a parameter like 
                                             Pro
                                           within (0,1) is introduced and it is specified whether a component of each CB must be changed or not. For each colliding body 
                                             Pro
                                           is compared with rni
                                           (i
                                          =1, 2,…, n) which is a random number uniformly distributed within (0,1). If rni
                                          
                                          <
                                          
                                             Pro
                                          , one dimension of the ith CB is selected randomly and its value is regenerated as follows: 
                                             
                                                (10)
                                                
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         ij
                                                      
                                                   
                                                   =
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         j
                                                         ,min
                                                      
                                                   
                                                   +
                                                   random
                                                   ·
                                                   (
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         j
                                                         ,max
                                                      
                                                   
                                                   -
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         j
                                                         ,min
                                                      
                                                   
                                                   )
                                                
                                             
                                           where xij
                                           is the jth variable of the ith CB. xj,min
                                           and xj,max
                                           respectively, are the lower and upper bounds of the jth variable. In order to protect the structures of CBs, only one dimension is changed. This mechanism provides opportunities for the CBs to move all over the search space thus providing better diversity.


                                 Step 9: Terminal condition check
                                    
                                       The optimization process is terminated after a fixed number of iterations. If this criterion is not satisfied go to Step 2 for a new round of iteration.

The new optimization algorithm developed in this study was tested in six mathematical optimization problems and three truss design problems with continuous and discrete sizing variables. In order to obtain statistically significant data, 30 and 20 independent optimization runs were respectively carried out for mathematical optimization and truss design problems starting from different initial populations randomly generated. The optimization algorithms compared in this research were coded in MATLAB and structural analyses were performed using the direct stiffness method.

Optimization results obtained by ECBO in the six mathematical optimization problems were compared with results of CBO and results reported in literature for several variants of the Particle Swarm Optimization (PSO) algorithm [12]. PSO variants included GPSO with a fixed inertia weight ω
                        =0.4 [13], RPSO, CLPSO [14] and ALC-PSO [12].

The six test problems are described in Table 1
                        . The first two functions (f
                        1–f
                        2) are unimodal functions while f
                        3–f
                        6 are multimodal functions. All problems were solved considering 30 optimization variables and a population of 20 agents. The limit number of function evaluations was set equal to 200,000. In Table 1, ε is a predefined deviation from target optimum.

The f
                        6 problem is also utilized for adjusting the algorithm’s parameters and the obtained results are used in other mathematical optimization and truss design problems. In order to adjust the value of the 
                           Pro
                        , the size of the CM is taken as n/10 and different values of 
                           Pro
                         are taken as 0.15, 0.20, 0.25 and 0.30. Table 2
                         summarizes the results and shows that the value 0.25 is efficient for the algorithm. The parameter “success rate” indicates the percentage of successful runs for which an acceptable design could be found. The average and best optimized costs along with the corresponding standard deviation and the number of function evaluations (FEs) required in the optimization process also are reported in the table. All statistical indicators except the number of function evaluations are better when 
                           Pro
                         is set to 0.25. This parameter improves the exploration ability of the algorithm and choosing bigger value increases the computational cost.

In order to adjust the size of the CM, the value of 
                           Pro
                         is set to 0.25 and various sizes for the memory are tested as n/2, n/5, n/10 and n/20. Results are shown in Table 3
                        . Considering 1/10 of the population size is the most efficient value for the size of the CM resulting in the best successful runs, average cost, best cost and standard deviation. This parameter improves the exploitation ability of the algorithm and selecting large values can lead to premature convergence. Thus, the size of the CM and the value of 
                           Pro
                         are set to n/10 and 0.25, respectively.

Optimization results for all mathematical problems are presented in Table 4
                        . In the case of unimodal functions, convergence speed and accuracy are the most important parameters in comparing optimization algorithms because finding global optimum is relatively easy. It can be seen that ECBO was overall the fastest optimizer in the second test problem while GPSO required the lowest number of analyses in the first test problem.

Since the global minimum is more difficult to locate in the case of multimodal functions, reliability, accuracy and convergence speed are the most suited performance indicators. It can be seen that ECBO was the most efficient optimizer in problems f
                        3 and f
                        4. In summary, optimization results demonstrate that ECBO can perform well in both unimodal and multimodal mathematical optimization problems.

In this study, the penalty function method is utilized as a constraint-handling approach so the constrained objective function is expressed as follows
                           
                              (11)
                              
                                 Mer
                                 (
                                 {
                                 X
                                 }
                                 )
                                 =
                                 
                                    
                                       
                                          
                                             1
                                             +
                                             
                                                
                                                   ε
                                                
                                                
                                                   1
                                                
                                             
                                             ·
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      i
                                                      =
                                                      1
                                                   
                                                   
                                                      nc
                                                   
                                                
                                             
                                             
                                             
                                                max
                                             
                                             [
                                             0
                                             ,
                                             
                                                
                                                   g
                                                
                                                
                                                   i
                                                
                                             
                                             (
                                             {
                                             X
                                             }
                                             )
                                             ]
                                          
                                       
                                    
                                    
                                       
                                          
                                             ε
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                                 ×
                                 W
                                 (
                                 {
                                 X
                                 }
                                 )
                              
                           
                        where {X} is a solution vector; Mer({X}) is the pseudo-objective function; gi
                        ({X}) denotes design constraints (gi
                        ({X})⩽0); nc is the number of the constraints; W({X}) is weight of the structure. For all problems, ε
                        1 is set to unity and ε
                        2 is taken as 1.5 at the start and linearly increases to 3.

ECBO and CBO were used to optimize the 17-bar planar truss, spatial 72-bar truss and 582-bar tower. The maximum number of structural analyses was set equal to 20,000 for both algorithms. It was found that ECBO performs better with a population of 20 CBs although 40 and 50 CBs were utilized in Ref. [11] for the second and third test problem, respectively. For this reason, in order to make a fair comparison between CBO variants, the 17-bar and 72-bar trusses were optimized with 20 and 40 CBs while the 582-bar tower was optimized with 20 and 50 CBs.

The planar 17-bar truss structure optimized in the first structural test problem is schematized in Fig. 3
                           . The truss is subject to a concentrated force of 100 kips acting downward at node 9. This optimization problem includes seventeen independent sizing variables. The Young’s modulus is 30Msi and the material density is 0.268lb/in.3. The member stress limit is ±50ksi. Nodal displacements in both coordinate directions x and y must not exceed ±2in. The allowable minimum cross-sectional area of all elements is 0.1in.2.


                           Table 5
                            presents optimum designs obtained by Khot and Berke [15], Adeli and Kumar [16], standard CBO and ECBO. It can be seen that the best design was obtained by ECBO with 20 CBs: this is same as the best design so far reported in literature [15]. Furthermore, ECBO with 20 CBs has the smallest average weight and lowest standard deviation on optimized weight.

Convergence curves of ECBO and standard CBO with 20 and 40 CBs are compared in Fig. 4
                           . The optimization process of the best run of ECBO was completed in 14,180 structural analyses. Standard CBO with 20 and 40 CBs and ECBO with 40 CBs, respectively, required 5720, 15,560 and 12,520 structural analyses to converge to the optimum. The standard CBO with 20 CBs requires the lowest number of analyses but is trapped in a local optimum (see Fig. 4). Remarkably, the convergence curve of ECBO with 40 CBs lies below those relative to the other optimization algorithms.

The second truss design problem deals with the size optimization of the spatial 72-bar truss shown in Fig. 5
                           . The structure is subject to the loading conditions given in Table 6
                           . The member cross-sectional areas are divided into 16 groups because of structural symmetry: (1) A1–A4, (2) A5–A12, (3) A13–A16, (4) A17–A18, (5) A19–A22, (6) A23–A30, (7) A31–A34, (8) A35–A36, (9) A37–A40, (10) A41–A48, (11) A49–A52, (12) A53–A54, (13) A55–A58, (14) A59–A66 (15), A67–A70, and (16) A71–A72. The material density is 0.1lb/in.3 (2767.990kg/m3) and the modulus of elasticity is 10,000ksi (68,950MPa). The members are subjected to the stress limits of 25ksi (172.375MPa) both in tension and compression. The uppermost nodes are subjected to the displacement limitations of ±0.25in. (±6.35mm) in both x and y-coordinate directions. Cross-sectional areas can vary between 0.1 and 4in.2 (i.e. between 0.6452 and 25.81cm2).

This test problem was studied by many authors using different optimization techniques. For example, Erbatur et al. [17] utilized Genetic Algorithms (GA), Camp and Bichon [18] used Ant Colony Optimization (ACO), Perez and Behdinan [19] utilized Particle Swarm Optimization (PSO), Camp [20] used Big Bang–Big Crunch (BB–BC) and Kaveh et al. [21] employed Improved Ray Optimization (IRO).


                           Table 7
                            summarizes the results obtained by ECBO, standard CBO and the other optimization methods. The optimum design found by standard CBO with 40 CBs is the best overall although the difference between it and the optimum design obtained by ECBO with 20 CBs is very small. However, data on average weight indicate that standard CBO may be sensitive to the number of agents (i.e. colliding bodies).

Convergence histories of ECBO and standard CBO with 20 and 40 CBs are shown in Fig. 6
                           . Standard CBO and ECBO with 20 and 40 CBs, respectively, required 7000, 16,000, 18,000 and 18,000 analyses to converge to the optimum. The optimum design of the truss is obtained after 18,500, 19,621 and 15,350 analyses by using GA [17], BB–BC [20] and IRO [21], respectively.


                           Fig. 7
                            shows the 582-bar tower chosen as the last design example. A single load case is considered consisting of the lateral loads of 1.12kips (5.0kN) applied in both x- and y-directions and a vertical load of −6.74kips (−30kN) applied in the z-direction at all nodes of the tower. The 582-members are divided into 32 groups, because of structural symmetry. The tower is optimized for minimum volume with the cross-sectional areas of the members being the design variables. A discrete set of standard steel sections selected from W-shape profile list based on area and radii of gyration properties is used as sizing variables. Cross-sectional areas of elements can vary between 6.16 and 215in.2 (i.e. between 39.74 and 1387.09cm2). In this problem, CBs are allowed to select discrete values from this list (real numbers are rounded to the nearest integer). Limitation on stress and stability of truss elements are imposed according to the provisions of ASD-AISC [22] as follows.

The allowable tensile stresses for tension members are calculated by
                              
                                 (12)
                                 
                                    
                                       
                                          σ
                                       
                                       
                                          i
                                       
                                       
                                          +
                                       
                                    
                                    =
                                    0.6
                                    
                                       
                                          F
                                       
                                       
                                          y
                                       
                                    
                                 
                              
                           where Fy
                            stands for the yield strength.

The allowable stress limits for compression members are calculated depending on two possible failure modes of the members known as elastic and inelastic buckling. Thus
                              
                                 (13)
                                 
                                    
                                       
                                          σ
                                       
                                       
                                          i
                                       
                                       
                                          -
                                       
                                    
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        (
                                                                        1
                                                                        -
                                                                        
                                                                           
                                                                              
                                                                                 
                                                                                    λ
                                                                                 
                                                                                 
                                                                                    i
                                                                                 
                                                                                 
                                                                                    2
                                                                                 
                                                                              
                                                                           
                                                                           
                                                                              2
                                                                              
                                                                                 
                                                                                    C
                                                                                 
                                                                                 
                                                                                    c
                                                                                 
                                                                                 
                                                                                    2
                                                                                 
                                                                              
                                                                           
                                                                        
                                                                        )
                                                                        
                                                                           
                                                                              F
                                                                           
                                                                           
                                                                              y
                                                                           
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     5
                                                                  
                                                                  
                                                                     3
                                                                  
                                                               
                                                               +
                                                               
                                                                  
                                                                     3
                                                                     
                                                                        
                                                                           λ
                                                                        
                                                                        
                                                                           i
                                                                        
                                                                     
                                                                  
                                                                  
                                                                     8
                                                                     
                                                                        
                                                                           C
                                                                        
                                                                        
                                                                           c
                                                                        
                                                                     
                                                                  
                                                               
                                                               -
                                                               
                                                                  
                                                                     
                                                                        
                                                                           λ
                                                                        
                                                                        
                                                                           i
                                                                        
                                                                        
                                                                           3
                                                                        
                                                                     
                                                                  
                                                                  
                                                                     8
                                                                     
                                                                        
                                                                           C
                                                                        
                                                                        
                                                                           c
                                                                        
                                                                        
                                                                           3
                                                                        
                                                                     
                                                                  
                                                               
                                                            
                                                         
                                                      
                                                   
                                                   
                                                      for
                                                      
                                                      
                                                         
                                                            λ
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      <
                                                      C
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            12
                                                            
                                                               
                                                                  π
                                                               
                                                               
                                                                  2
                                                               
                                                            
                                                            E
                                                         
                                                         
                                                            23
                                                            
                                                               
                                                                  λ
                                                               
                                                               
                                                                  i
                                                               
                                                               
                                                                  2
                                                               
                                                            
                                                         
                                                      
                                                   
                                                   
                                                      for
                                                      
                                                      
                                                         
                                                            λ
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      ⩾
                                                      
                                                         
                                                            C
                                                         
                                                         
                                                            c
                                                         
                                                      
                                                   
                                                
                                                
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           where E is the modulus of elasticity; λi
                            is the slenderness ratio 
                              
                                 (
                                 
                                    
                                       λ
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       kl
                                    
                                    
                                       i
                                    
                                 
                                 /
                                 
                                    
                                       r
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                           ; Cc
                            denotes the slenderness ratio dividing the elastic and inelastic buckling regions 
                              
                                 (
                                 
                                    
                                       C
                                    
                                    
                                       c
                                    
                                 
                                 =
                                 
                                    
                                       2
                                       
                                          
                                             π
                                          
                                          
                                             2
                                          
                                       
                                       E
                                       /
                                       
                                          
                                             F
                                          
                                          
                                             y
                                          
                                       
                                    
                                 
                                 )
                              
                           ; k is the effective length factor (k is set 1 for all truss members); Li
                            is the member length; ri
                            is the minimum radius of gyration.

In ASD-AISC design code provisions [22], the maximum slenderness ratio is limited to 300 for tension members, and it is recommended to be 200 for compression members. Nodal displacements in all coordinate directions must be less than ±3.15in. (i.e. ±8cm)


                           Table 8
                            presents the optimum designs obtained by ECBO, standard CBO, Hasançebi et al. [23], Kaveh and Talatahari [24] and Kaveh and Talatahari [25]. It can be seen that the best design was obtained by ECBO with 20 CBs which also showed the smallest average volume and lowest standard deviation on optimization weight over the 20 independent optimization runs. The optimization process was completed in 19,700 analyses. PSO [23], DHPSACO [24], HBB–BC [25], Standard CBO with 20 and 50 CBs and ECBO with 50 CBs, respectively, required 50,000, 8500, 12,500, 6300, 17,700 and 19,800 analyses to converge to the optimum. The ECBO with 20 CBs achieves 1,348,337in.3 and 1,316,540in.3 in 6300 and 8500 analyses, respectively which are lighter than the results of other algorithms in that numbers of analysis.

Stress ratio and nodal displacements in all directions evaluated at the best design optimized by EBCO are shown Fig. 8
                           : the maximum stress ratio is 99.86% while maximum displacements in X and Y-coordinate directions are 3.1498 and 2.9941in., respectively. Convergence curves are compared in Fig. 9
                           . It can be seen that, although ECBO required more structural analyses to complete the optimization process, intermediate designs found by ECBO were always better than those found by CBO (convergence curves of ECBO always lie below their counterpart recorded for CBO).

Colliding bodies optimization is a meta-heuristic algorithm mimicking the mechanisms of 1-D collisions between bodies. CBO has a simple algorithmic structure, shows fast-converging behavior and does not require parameter tuning [26,27]. In this study, Enhanced Colliding Bodies Optimization (ECBO) was introduced in order to improve the performance of CBO yet preserving some above mentioned strength points of the standard formulation. A memory storing a certain number of the best-so-far obtained solutions is utilized in ECBO to improve convergence behavior. Furthermore, some components of CBs are randomly changed to allow agents escaping from local minima and prevent premature convergence. These two simple mechanisms added into ECBO practically left unaltered the colliding bodies search engine.

The ECBO algorithm was tested in six mathematical optimization problems including 30 design variables and compared with standard CBO and some PSO variants. Three truss design problems including 16, 17 continuous or 32 discrete sizing variables also were solved with ECBO and CBO and optimization results were compared with literature. Standard CBO was sensitive to the number of agents and needed more CBs to maintain better coverage of the search space and higher level of exploration. When the number of CBs is set equal to 20, after some iteration its convergence curve becomes straight and the algorithm gets trapped in local optima. The stochastic regeneration mechanism implemented in ECBO results in better exploration characteristics and ability to escape from local optima. The use of colliding memory allows intermediate designs found by ECBO to be better than those of standard CBO. In summary, it was found that ECBO is very competitive with other meta-heuristic algorithms and is superior over CBO in terms of reliability, solution accuracy and convergence speed.

@&#ACKNOWLEDGEMENT@&#

The first author is grateful to the Iran National Science Foundation for the support.

@&#REFERENCES@&#

