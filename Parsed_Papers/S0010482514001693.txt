@&#MAIN-TITLE@&#Modelling and simulating reaction–diffusion systems using coloured Petri nets

@&#HIGHLIGHTS@&#


               
                  
                  
                     
                        
                           
                           We present a new coloured Petri net approach to model reaction–diffusion systems.


                        
                        
                           
                           Spatial attributes of such systems are represented using colour definitions.


                        
                        
                           
                           We give a method to represent state- and/or space-dependent diffusion rate.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Reaction–diffusion systems

Petri net framework

Coloured stochastic/continous/hybrid Petri nets

Multiscaleness

Brusselator

@&#ABSTRACT@&#


               
               
                  Reaction–diffusion systems often play an important role in systems biology when developmental processes are involved. Traditional methods of modelling and simulating such systems require substantial prior knowledge of mathematics and/or simulation algorithms. Such skills may impose a challenge for biologists, when they are not equally well-trained in mathematics and computer science. Coloured Petri nets as a high-level and graphical language offer an attractive alternative, which is easily approachable. In this paper, we investigate a coloured Petri net framework integrating deterministic, stochastic and hybrid modelling formalisms and corresponding simulation algorithms for the modelling and simulation of reaction–diffusion processes that may be closely coupled with signalling pathways, metabolic reactions and/or gene expression. Such systems often manifest multiscaleness in time, space and/or concentration. We introduce our approach by means of some basic diffusion scenarios, and test it against an established case study, the Brusselator model.
               
            

@&#INTRODUCTION@&#

Reaction–diffusion systems often play an important role in systems biology, such as for the modelling of developmental processes [1,2]. Cellular or subcellular biological processes with fast diffusion of species can be seen as homogeneous, and thus spatial effects can be ignored. However, if the diffusion is slow, the spatial distribution of species is not uniform and has to be taken into account.

A traditional and widely used approach to represent such reaction–diffusion processes deploys deterministic partial differential equations (PDEs) [3], which describe the time evolution of spatially dependent concentrations. Although this formalism is attractive and mathematically well understood, it becomes inaccurate or even inapplicable when there are relatively few numbers of chemical species or stochastic fluctuations play an important role in a biological process.

Consequently, stochastic modelling of reaction–diffusion systems, using, e.g., chemical master equations [4], is increasingly gaining attention. It deals with discrete numbers of molecules of the chemical species involved and provides more accurate results than deterministic PDEs. A couple of stochastic simulation algorithms have been proposed, see, e.g., [2] for a review. For example, Brownian dynamics is a particle-based approach with continuous time and space, in which molecules evolve in terms of the Langevin equation. Cellular automata work on a lattice with a finite number of states in discrete time, in which diffusion is realized by the transition of molecules from some sites to neighbouring sites. Recently, Gillespie׳s stochastic simulation algorithm (SSA) [5] has been extended for spatial simulation by dividing a system into a number of well-mixed subvolumes or compartments, in which diffusion is treated as a random jump between neighbouring subvolumes or compartments [6,7].

Biological systems including reaction–diffusion processes usually comprise a variety of chemical and physical processes, e.g., molecular binding, enzymatic reactions and complex protein interactions. Some species can be present in small numbers of molecules, and other species in large numbers of molecules; some reactions may be slow, but others fast. For such highly heterogeneous reaction–diffusion systems, a single modelling and simulation method is usually not sufficient. It is necessary to combine different stochastic and deterministic methods to build a hybrid simulator addressing different aspects of a system [2], e.g., using SSA for small numbers of molecules and numerical integration of ordinary differential equations (ODEs) for large numbers of molecules, which are considered as concentrations.

Recently, we have explored different scenarios for the modelling and analysis of (multiscale) biological systems using coloured Petri nets. For example, in [8,9] we discussed spatial modelling and the colouring of space (discretisation), and in [10,11] the modelling of membrane systems and coupled Ca2+ channels, respectively.

In this paper, we will describe in detail how to model and simulate reaction–diffusion systems using a coloured Petri net framework that contains coloured stochastic Petri nets 
                        (
                        
                           
                              SPN
                           
                           
                              C
                           
                        
                        )
                     , coloured continuous Petri nets 
                        (
                        
                           
                              CPN
                           
                           
                              C
                           
                        
                        )
                     , and coloured generalised hybrid Petri nets 
                        (
                        
                           
                              GHPN
                           
                           
                              C
                           
                        
                        )
                     . We will show how standard high-level formalisms, which are typical for and well established in computer science, can be conveniently applied to deal with important biological problems, e.g., the reaction–diffusion problem. Compared with our previous work, this paper will address some specific issues associated with the modelling of reaction–diffusion systems. We present a systematic and step-wise approach to modelling them using coloured Petri nets and discuss in detail the colouring of space and the flexible representation of diffusion rates.

We are motivated by a couple of reasons. Firstly, coloured Petri nets are graphical and intuitive means, which are easy to construct and comprehend. Colours can be used to represent the locality of species, and thus diffusion can be treated as recolouring of species. Secondly, coloured Petri nets permit a parameterised modelling style. They allow us to easily change the size (resolution) of the space by changing the number of colours, or to adapt the notion of space by adapting the colour definitions. Thirdly, coloured Petri nets are promising to provide a unifying framework integrating deterministic, stochastic and hybrid formalisms to model and simulate different types of reaction–diffusion systems. Coloured Petri nets offer a large variety of analysis techniques, enable a wide range of analysis tasks (e.g., simulation with varying diffusion rates or different initial concentrations), and are supported by powerful tools like Snoopy [12,13]. Therefore, we are pioneering to apply coloured Petri nets, as we do believe that biologists are ready to use such convenient methods to cope with reaction–diffusion systems.

The main contributions of this paper are as follows. We present a new coloured Petri net approach with special emphasis on systems biology to model and simulate reaction–diffusion systems. Distinguished features of our approach are a method for representing spatial attributes of reaction–diffusion systems using easily exchangeable colour definitions, and a method for a flexible representation of state- and/or space-dependent diffusion rates.

In the remainder of this paper, we first briefly recall reaction–diffusion systems in Section 2 and coloured Petri nets in Section 3. We then introduce how to model reaction–diffusion systems using coloured Petri nets in Section 4 and give a case study, the Brusselator, in Section 5, followed by related work, reproducibility and the conclusions in Sections 6, 7 and 8, respectively.

When there is an abundance of species, a reaction–diffusion process can be modelled as a system of deterministic differential equations. For example, a biological deterministic reaction–diffusion system and its evolution over time τ can be given by a system of PDEs [14]
                     
                        
                           (1)
                           
                              
                                 
                                    ∂
                                    S
                                 
                                 
                                    ∂
                                    τ
                                 
                              
                              =
                              f
                              (
                              S
                              )
                              +
                              D
                              
                                 
                                    ∇
                                 
                                 
                                    2
                                 
                              
                              S
                           
                        
                     where S is a vector of concentrations of chemical species, f denotes the production and degradation of species, D is a diagonal matrix of diffusion coefficients, and 
                        ∇
                      is the Laplacian operator.

However, small abundance of species causes deterministic models to become inaccurate or even inappropriate, thus stochastic approaches have been used to simulate stochastic fluctuations. In this case, a reaction–diffusion system can be formulated as a master equation and thus stochastic simulation algorithms like the Gillespie stochastic simulation algorithm (SSA) have to be applied. A common approach [6,15] is to divide the whole system volume 
                        Ω
                      into N well-mixed subvolumes (compartments), each of which has a size of h. Therefore, diffusion is treated as a Markov jump process between neighbouring subvolumes with a rate constant 
                        k
                        =
                        
                           
                              D
                           
                           
                              c
                           
                        
                        /
                        
                           
                              h
                           
                           
                              2
                           
                        
                     , where D
                     
                        c
                      is the diffusion constant.

For example, consider a species, S, diffusing in one-dimensional space, see Fig. 1
                     . For this, the whole space is divided into N subvolumes. We denote the number of molecules of S in the ith subvolume by S
                     
                        i
                     , 
                        i
                        =
                        1
                        ,
                        2
                        ,
                        …
                        ,
                        N
                     . Assume k
                     1 and k
                     2 are two rate constants of the two diffusion directions, the one from left to right and the other from right to left, respectively. Then the diffusion process can be described as a set of chemical reactions
                        
                           (2)
                           
                              
                                 
                                    S
                                 
                                 
                                    j
                                 
                              
                              
                                 
                                    ⇌
                                 
                                 
                                    
                                       
                                          k
                                       
                                       
                                          2
                                       
                                    
                                 
                                 
                                    
                                       
                                          k
                                       
                                       
                                          1
                                       
                                    
                                 
                              
                              
                                 
                                    S
                                 
                                 
                                    j
                                    +
                                    1
                                 
                              
                              ,
                              
                              j
                              =
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              N
                              −
                              1
                              ,
                           
                        
                     each governed by mass action kinetics parameterised with the rate constants k
                     1 and k
                     2.

Let 
                        p
                        (
                        n
                        ,
                        τ
                        )
                      be the joint probability at time τ such that S
                     
                        i
                     =n
                     
                        i
                     , 
                        i
                        =
                        1
                        ,
                        2
                        ,
                        …
                        ,
                        N
                     , with 
                        n
                        =
                        (
                        
                           
                              n
                           
                           
                              1
                           
                        
                        ,
                        
                           
                              n
                           
                           
                              2
                           
                        
                        ,
                        …
                        ,
                        
                           
                              n
                           
                           
                              N
                           
                        
                        )
                     , denoting the number of molecules of species S in each of the N subvolumes. Let 
                        L
                        2
                        
                           
                              R
                           
                           
                              i
                           
                        
                        ,
                        R
                        2
                        
                           
                              L
                           
                           
                              i
                           
                        
                        :
                        
                           
                              N
                           
                           
                              N
                           
                        
                        →
                        
                           
                              N
                           
                           
                              N
                           
                        
                      be two functions [15] defined by
                        
                           (3)
                           
                              L
                              2
                              
                                 
                                    R
                                 
                                 
                                    i
                                 
                              
                              :
                              (
                              
                                 
                                    n
                                 
                                 
                                    1
                                 
                              
                              …
                              ,
                              
                                 
                                    n
                                 
                                 
                                    i
                                    −
                                    1
                                 
                              
                              ,
                              
                                 
                                    n
                                 
                                 
                                    i
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    n
                                 
                                 
                                    N
                                 
                              
                              )
                              
                              →
                              (
                              
                                 
                                    n
                                 
                                 
                                    1
                                 
                              
                              …
                              ,
                              
                                 
                                    n
                                 
                                 
                                    i
                                    −
                                    1
                                 
                              
                              −
                              1
                              ,
                              
                                 
                                    n
                                 
                                 
                                    i
                                 
                              
                              +
                              1
                              ,
                              …
                              ,
                              
                                 
                                    n
                                 
                                 
                                    N
                                 
                              
                              )
                              ,
                           
                        
                     with 
                        i
                        =
                        2
                        ,
                        …
                        ,
                        N
                     , and
                        
                           (4)
                           
                              R
                              2
                              
                                 
                                    L
                                 
                                 
                                    i
                                 
                              
                              :
                              (
                              
                                 
                                    n
                                 
                                 
                                    1
                                 
                              
                              …
                              ,
                              
                                 
                                    n
                                 
                                 
                                    i
                                 
                              
                              ,
                              
                                 
                                    n
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                              ,
                              …
                              ,
                              
                                 
                                    n
                                 
                                 
                                    N
                                 
                              
                              )
                              
                              →
                              (
                              
                                 
                                    n
                                 
                                 
                                    1
                                 
                              
                              …
                              ,
                              
                                 
                                    n
                                 
                                 
                                    i
                                 
                              
                              +
                              1
                              ,
                              
                                 
                                    n
                                 
                                 
                                    i
                                    +
                                    1
                                 
                              
                              −
                              1
                              ,
                              …
                              ,
                              
                                 
                                    n
                                 
                                 
                                    N
                                 
                              
                              )
                              ,
                           
                        
                     with 
                        i
                        =
                        1
                        ,
                        …
                        ,
                        N
                        −
                        1
                     .


                     L2R
                     
                        i
                      (R2L
                     
                        i
                     ) describes the change of the number of molecules in subvolume i, caused by its left (right) neighbouring subvolume 
                        i
                        −
                        1
                        (
                        i
                        +
                        1
                        )
                     .

Then, the master equation that corresponds to the system of chemical reactions given by Eq. (2) can be written as
                        
                           (5)
                           
                              
                                 
                                    ∂
                                    p
                                    (
                                    n
                                    ,
                                    τ
                                    )
                                 
                                 
                                    ∂
                                    τ
                                 
                              
                              =
                              
                                 
                                    k
                                 
                                 
                                    1
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    =
                                    2
                                 
                                 
                                    N
                                 
                              
                              {
                              (
                              
                                 
                                    n
                                 
                                 
                                    i
                                 
                              
                              +
                              1
                              )
                              p
                              (
                              L
                              2
                              
                                 
                                    R
                                 
                                 
                                    i
                                 
                              
                              n
                              ,
                              τ
                              )
                              −
                              
                                 
                                    n
                                 
                                 
                                    i
                                 
                              
                              p
                              (
                              n
                              ,
                              τ
                              )
                              }
                              +
                              
                                 
                                    k
                                 
                                 
                                    2
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    =
                                    1
                                 
                                 
                                    N
                                    −
                                    1
                                 
                              
                              {
                              (
                              
                                 
                                    n
                                 
                                 
                                    i
                                 
                              
                              +
                              1
                              )
                              p
                              (
                              R
                              2
                              
                                 
                                    L
                                 
                                 
                                    i
                                 
                              
                              n
                              ,
                              τ
                              )
                              −
                              
                                 
                                    n
                                 
                                 
                                    i
                                 
                              
                              p
                              (
                              n
                              ,
                              τ
                              )
                              }
                              ,
                           
                        
                     where the first (second) term on the right hand side corresponds to diffusion jumps from left (right) neighbours [15]. This equation can be seen as a discretisation in space of the diffusion item (the second item) of Eq. (1).

Petri nets [16] are weighted, directed, bipartite graphs, consisting of places, transitions and arcs that connect them. Places usually represent passive system components like atoms, molecules, genes, mRNAs, proteins, cells, or entire populations. Transitions represent active system components like different kinds of chemical reactions, e.g., association, dissociation, translation, transcription or diffusion. A place may contain one or more tokens, represented as black dots or by a natural number. Each arc has a weight indicating the multiplicity of the arc. The firing of a transition transfers tokens from its preplaces to its postplaces in terms of the weights of the associated arcs. The repeated firing of transitions simulates the evolution of a (biological) system.

For example, if we set N=3 in Fig. 1, i.e., dividing the whole volume into three subvolumes, we obtain the (qualitative) Petri net model illustrated in Fig. 2
                        (a). Places S
                        1 to S
                        3 represent the chemical compound S in subvolumes 1 to 3, respectively. Transitions t
                        21 and t
                        12 (t
                        32 and t
                        23) represent diffusion between subvolumes 1 and 2 (2 and 3). The firing of these transitions simulates the diffusion of the chemical compound S in one-dimensional space.

Coloured Petri nets [17,18] combine the expressive power of programming languages with Petri nets. Petri nets provide a graphical notation for modelling systems with concurrency, communication and synchronization. Programming languages offer data types for creating compact and parameterized models, which is the most important advantage of coloured Petri nets.

Coloured Petri nets (see Fig. 2(b) for an example) consist, as standard Petri nets, of places, transitions and arcs. Additionally, a coloured Petri net is enriched by a set of discrete data types (called colour sets), and a set of expressions that are used to define the initial marking, arc inscriptions, and guards. Each place gets assigned a colour set and may contain distinguishable tokens, represented as a multiset expression over the assigned colour set. A multiset is a set, where one element can occur several times. For example, in Fig. 2(b), a colour set Grid1D with three colours, 1–3, is defined and assigned to place S, to distinguish the three subvolumes in Fig. 2(a). A specific distribution of tokens over all places constitutes a marking of a coloured Petri net. For example, in Fig. 2(b), we denote the initial marking for the place S by a multiset expression 
                           1
                           
                              
                              
                                 `
                              
                           
                           2
                        , which means 1 token of colour 2. Each transition gets a guard, which is a Boolean expression over variables, constants or functions of the defined colour sets. The trivial guard “true” is usually not explicitly given. The guard must be evaluated to true for the enabling of the transition. For example, in Fig. 2(b), transition t has a guard IsNeighbor1D(x,a), which is a user-defined function that evaluates if subvolume a is a neighbour of subvolume x. Each arc gets assigned a multiset expression instead of the simple number serving as weight in (plain) Petri nets.

Enabling and firing of a transition are based on the evaluation of its guard and associated arc expressions. Before doing so, values must be assigned to all variables associated with the transition; each legal assignment makes a transition instance. If the guard is evaluated to true and the input places have sufficient suitable tokens, the transition instance is enabled and can fire. When a transition instance fires, a new marking is created. The set of markings reachable from the initial marking builds the state space of a given system. These reachable markings and the transitions between them form the reachability graph of the system.

For example, in Fig. 2(b), for transition t, there are two related variables x and a, each of which can take values 1–3, but they have to satisfy the guard IsNeighbor1D(x,a), i.e., species S can only move between neighbouring subvolumes. Thus there are four legal assignments: x=1 and a=2, x=2 and a=1, x=2 and a=3, and x=3 and a=2. For the initial marking 
                           1
                           
                              
                              
                                 `
                              
                           
                           2
                        , only two assignments, x=2 and a=1, and x=2 and a=3, can fire. For example, if we fire transition t under the assignment x=2 and a=1, one token of colour 2 is removed from place S, and one token of colour 1 is added to place S.

Besides, we can easily change the division (resolution) of the total volume 
                           Ω
                         by only changing the colour set Grid1D. That is, to change Grid1D to have N colours means to divide the total volume into N subvolumes.

Uncoloured Petri nets can be folded into coloured Petri nets, if partitions of the place and transition sets are given. Vice versa, coloured Petri nets with finite colour sets can be automatically unfolded into uncoloured Petri nets. The conversion between uncoloured and coloured Petri nets changes the style of representation, but does not change the actual net structure of the underlying biological reaction network.

Reaction–diffusion systems can be modelled as deterministic PDEs or (stochastic) chemical master equations. However, sometimes a combination of deterministic and stochastic methods is more appropriate.

Using coloured Petri nets, we can smoothly provide a unifying framework for modelling and simulating reaction–diffusion systems [19,13]. This framework illustrated in Fig. 3
                         relates three modelling paradigms: coloured stochastic Petri nets 
                           (
                           
                              
                                 SPN
                              
                              
                                 C
                              
                           
                           )
                        , coloured continuous Petri nets 
                           (
                           
                              
                                 CPN
                              
                              
                                 C
                              
                           
                           )
                        , and coloured generalised hybrid Petri nets 
                           (
                           
                              
                                 GHPN
                              
                              
                                 C
                              
                           
                           )
                        , which are extensions of three uncoloured Petri net paradigms: stochastic Petri nets 
                           (
                           SPN
                           )
                        , continuous Petri nets 
                           (
                           CPN
                           )
                        , and generalised hybrid Petri nets 
                           (
                           GHPN
                           )
                         
                        [20], respectively. For a given case study, the Petri nets at each level (coloured/uncoloured) share the same structure, but are specialised by their kinetic information. If we disregard the kinetics, we obtain the corresponding qualitative (coloured/uncoloured) Petri nets.

In 
                           
                              
                                 SPN
                              
                              
                                 C
                              
                           
                        , a stochastic firing rate is introduced and associated with each transition t, which is a random variable X
                        
                           t
                        , defined by the following exponential probability distribution:
                           
                              (6)
                              
                                 
                                    
                                       F
                                    
                                    
                                       
                                          
                                             X
                                          
                                          
                                             t
                                          
                                       
                                    
                                 
                                 (
                                 τ
                                 )
                                 =
                                 1
                                 −
                                 
                                    
                                       e
                                    
                                    
                                       −
                                       
                                          
                                             λ
                                          
                                          
                                             t
                                          
                                       
                                       ·
                                       τ
                                    
                                 
                                 ,
                                 
                                 τ
                                 ≥
                                 0
                                 .
                              
                           
                        where λ
                        
                           t
                         is the firing rate of transition t, which may be marking-dependent. To underline the marking dependency, we also use the term (firing) rate function. The semantics of 
                           
                              
                                 SPN
                              
                              
                                 C
                              
                           
                         is equivalent to a continuous time Markov chain (CTMC), which is constructed from the reachability graph of the underlying qualitative Petri net by labelling the arcs between states with transition rates.

In 
                           
                              
                                 CPN
                              
                              
                                 C
                              
                           
                        , the discrete values of places (the number of tokens) are replaced with continuous values, which describe the overall behaviour of species represented by places via concentrations. A deterministic rate is associated with each transition, which makes a continuous Petri net model a unique description of a set of ordinary differential equations (ODEs), where each differential equation describes the continuous token change on a given place by the continuously increasing flow of its pre-transitions and the continuously decreasing flow of its post-transitions. An equation for a place p has the following form:
                           
                              (7)
                              
                                 
                                    
                                       dm
                                       (
                                       p
                                       )
                                    
                                    
                                       d
                                       τ
                                    
                                 
                                 =
                                 
                                    
                                       ∑
                                    
                                    
                                       t
                                       
                                          
                                             ∈
                                          
                                          
                                             •
                                          
                                       
                                       p
                                    
                                 
                                 f
                                 (
                                 t
                                 ,
                                 p
                                 )
                                 ·
                                 
                                    
                                       v
                                    
                                    
                                       t
                                    
                                 
                                 −
                                 
                                    
                                       ∑
                                    
                                    
                                       t
                                       ∈
                                       
                                          
                                             p
                                          
                                          
                                             •
                                          
                                       
                                    
                                 
                                 f
                                 (
                                 p
                                 ,
                                 t
                                 )
                                 ·
                                 
                                    
                                       v
                                    
                                    
                                       t
                                    
                                 
                                 .
                              
                           
                        where 
                           
                              
                              
                                 •
                              
                           
                           p
                         and 
                           
                              
                                 p
                              
                              
                                 •
                              
                           
                         denote the pre-transitions and post-transitions of place p, respectively, 
                           f
                           (
                           t
                           ,
                           p
                           )
                         and 
                           f
                           (
                           p
                           ,
                           t
                           )
                         denote the two arcs between place p and transition t yielding the corresponding weights, and v
                        
                           t
                         is the deterministic generally state-dependent rate (function) of transition t (which corresponds to λ
                        
                           t
                        ).


                        If we combine 
                        
                           
                              
                                 SPN
                              
                              
                                 C
                              
                           
                         
                        and 
                        
                           
                              
                                 CPN
                              
                              
                                 C
                              
                           
                        , we obtain coloured generalised hybrid Petri nets, 
                           
                              
                                 GHPN
                              
                              
                                 C
                              
                           
                        . If we have large numbers of molecules and fast reactions, we use 
                           
                              
                                 CPN
                              
                              
                                 C
                              
                           
                        , otherwise 
                           
                              
                                 SPN
                              
                              
                                 C
                              
                           
                        . If both cases coexist, we use 
                           
                              
                                 GHPN
                              
                              
                                 C
                              
                           
                        .
                           Remarks
                           
                              
                                 
                                    •
                                    All these different quantitative models can be converted into each other just by different interpretation of the rate functions (as λ
                                       
                                          t
                                        or v
                                       
                                          t
                                       ). That is, when we interpret the rate functions stochastically (λ
                                       
                                          t
                                       ), it will be an 
                                          
                                             
                                                SPN
                                             
                                             
                                                C
                                             
                                          
                                       . If we interpret them as deterministic rates (v
                                       
                                          t
                                       ), it will be a 
                                          
                                             
                                                CPN
                                             
                                             
                                                C
                                             
                                          
                                       . If we have both interpretations within one model, we obtain a 
                                          
                                             
                                                GHPN
                                             
                                             
                                                C
                                             
                                          
                                       .

Rate functions (λ
                                       
                                          t
                                        or v
                                       
                                          t
                                       ) often follow the pattern of mass action kinetics [21]. Then we only specify the rate constants (k
                                       
                                          i
                                       ) in the chemical reactions, as in Eq. (2), and use the predefined function 
                                          MassAction
                                          (
                                          
                                             
                                                k
                                             
                                             
                                                i
                                             
                                          
                                          )
                                        when defining our Petri nets. All examples in this paper apply mass action kinetics.

@&#IMPLEMENTATION@&#

All these paradigms are supported by our Petri net modelling and simulation tool Snoopy [12,19,13]. For 
                           
                              
                                 SPN
                              
                              
                                 C
                              
                           
                        , Gillespie׳s SSA has been implemented in an object-oriented fashion, which facilitates the addition of other algorithms. For 
                           
                              
                                 CPN
                              
                              
                                 C
                              
                           
                        , 14 different ODE integrators, e.g., the Runge–Kutta algorithm and Backward Differentiation Formula (BDF) method, are provided [20]. For 
                           
                              
                                 GHPN
                              
                              
                                 C
                              
                           
                        , we use Gillespie׳s SSA to simulate the stochastic part and ODE integrators for the continuous part. The key idea is as follows. The set of ODEs generated by the continuous transitions are first numerically solved. The numerical integrator stops when a stochastic event occurs. When the event has been handled, the numerical integrator is resumed. The partitioning of a Petri net into its stochastic and continuous net parts can be done statically before simulation or dynamically during simulation; both options are supplied. See [20] for more details. Note that the simulation of a coloured (stochastic, continuous, hybrid) Petri net runs currently on an automatically unfolded (stochastic, continuous, hybrid) Petri net.

In order to use coloured Petri nets to model reaction–diffusion processes, one of the core problems is how to represent the space where diffusion occurs. In the following we deploy colour sets to encode spatial attributes. For this purpose, we discretise the system volume, i.e. we divide the whole system volume 
                           Ω
                         into a number of subvolumes in one-, two- or three-dimensional space. We take the one and two-dimensional space as examples to describe how to proceed.


                        Colouring one-dimensional space. We use the following definitions to colour one-dimensional space (“
                           |
                        ” denotes “logical or”, “&” “logical and” and “!” “logical not”): 
                           
                              
                                 
                                    
                                       
                                    
                                 
                              
                           
                        
                     

That is, we define a colour set with D1 colours in order to divide a grid into D1 cells, and address each cell by a colour. The diffusion of a species from one cell to another is modelled as the change of a colour to another, which is specified in the neighbour functions.

The use of the function IsNeighbor1D_RB means the adoption of the reflective boundary condition [22], which prohibits the diffusion of a component beyond the boundaries. As defined by the colourset Grid1D, x=1 and x=D1 are the boundary subvolumes. Thus, the diffusion of a component from subvolume x=1 to the left neighbour a=0 and from subvolume x=D1 to the right neighbour a=D1+1 is precluded. Components of subvolumes x=1 and x=D1 can only move in the opposite directions (reflection).

In contrast, the use of the function IsNeighbor1D_PB means the adoption of the periodic boundary condition [22], which asks for diffusion along a circle. The reason is as follows. In the expression 
                           a
                           =
                           −
                           x
                        , the minus is the (modulo) predecessor operator; so when x=1, a will be evaluated to D1. Similarly, in 
                           a
                           =+
                           x
                        , the plus is the (modulo) successor operator; so a will be 1, if x=D1. With other words, the right neighbour of the most right position is the first position, and the other way round.

Likewise, diffusion with barrier effects at the boundaries of a volume may require additional boundary conditions, e.g., the absorbing boundary condition [22], i.e., we would need output transitions (no post-places) for the cells at the space boundaries, which can be easily implemented by appropriately adjusting the neighbour function.


                        Colouring two-dimensional space. If we consider the whole space as a two-dimensional lattice, we can divide it into, e.g., D1×D2 cells. We define two constants D1 and D2 and then two integer colour sets CD1 and CD2 to address the rows and columns of the lattice, based on which we further define a two-dimensional product colour set, Grid2D, representing a rectangular D1×D2 lattice.

We then define four variables, a, x of the type CD1 and b, y of the type CD2, and thus two-dimensional coordinates, 
                           {
                           (
                           x
                           ,
                           y
                           )
                           |
                           x
                           =
                           1
                           ,
                           2
                           ,
                           …
                           ,
                           D
                           1
                           
                           and
                           
                           y
                           =
                           1
                           ,
                           2
                           ,
                           …
                           ,
                           D
                           2
                           }
                         to address each cell of the lattice. A non-boundary cell has 4 neighbours in terms of the von Neumann neighbourhood, or 8 neighbours in terms of the Moore neighbourhood [23]. See the following for the formal definitions. 
                           
                              
                                 
                                    
                                       
                                    
                                 
                              
                           
                        
                     

Note that the two neighbour functions, IsNeighbor2D4 and IsNeighbor2D8, adopt the reflective boundary condition. Of course, we can likewise define periodic or absorbing boundary conditions as discussed above for the one-dimensional setting.
                           Remarks
                           Representing space by means of colours has additionally the following advantages.
                                 
                                    •
                                    
                                       Representing space with an irregular shape. Predicates allow us to divide space into different irregular shapes. For example, applying the predicate 
                                          x
                                          +
                                          y
                                          ≤
                                          2
                                          ×
                                          MID
                                        to Grid2D, yields the subset Triangle2D, which represents the upper part of the lattice. This offers a flexible way to deal with space of different shapes.


                                       Easy to define neighbourhood relations. We can easily define any neighbourhood relation using logical expressions, see, e.g., IsNeighbor2D4 and IsNeighbor2D8. Usually, we only need to change the neighbour function and keep everything else as it is.


                                       Permitting other coordinate systems. The definitions above implicitly assume Cartesian coordinates. However, we can easily extend this to other coordinate systems like Polar coordinates [9].


                                       Definitions can be equally applied to any net class in the framework. Having specified the definitions above, we can equally apply them to 
                                          
                                             
                                                SPN
                                             
                                             
                                                C
                                             
                                          
                                       , 
                                          
                                             
                                                CPN
                                             
                                             
                                                C
                                             
                                          
                                       , and 
                                          
                                             
                                                GHPN
                                             
                                             
                                                C
                                             
                                          
                                       .


                        Fig. 2(b) has given an example, which models a reaction–diffusion process in one-dimensional space. If we associate a stochastic firing rate with transition t, we can interpret Fig. 2(b) as an 
                           
                              
                                 SPN
                              
                              
                                 C
                              
                           
                         model.

In fact, the modelling of diffusion–reaction systems using 
                           
                              
                                 SPN
                              
                              
                                 C
                              
                           
                         is very straightforward, which usually follows two steps. Let us take a simple system that involves the generation 
                           (
                           ϕ
                           
                              
                                 →
                              
                              
                                 
                                    
                                       k
                                    
                                    
                                       1
                                    
                                 
                              
                           
                           P
                           )
                        , death 
                           (
                           P
                           
                              
                                 →
                              
                              
                                 
                                    
                                       k
                                    
                                    
                                       2
                                    
                                 
                              
                           
                           ϕ
                           )
                         and diffusion (taking the form of Eq. (2)) of a species P as example to describe the modelling procedure; see Fig. 4
                         for the 
                           
                              
                                 SPN
                              
                              
                                 C
                              
                           
                         model.
                           
                              1.
                              We first only consider chemical reactions that are not associated with diffusion, and convert them into a Petri net. For example, we start off with 
                                    ϕ
                                    
                                       
                                          →
                                       
                                       
                                          
                                             
                                                k
                                             
                                             
                                                1
                                             
                                          
                                       
                                    
                                    P
                                  and 
                                    P
                                    
                                       
                                          →
                                       
                                       
                                          
                                             
                                                k
                                             
                                             
                                                2
                                             
                                          
                                       
                                    
                                    ϕ
                                  and convert them into transitions t
                                 1 and t
                                 2, respectively. We also have to assign a colour set, e.g., Grid2D to each place.

We then create for each species a transition to represent diffusion (Eq. (2)). For example, we create a transition t
                                 3 for the diffusion of species P by associating a guard, e.g., IsNeighbor2D8, and a rate function that adopts the law of mass action with a direction-independent diffusion rate constant k
                                 3.

If we set D1=101 and D2=101 and put 2000 tokens in the middle of the grid, i.e., the cell denoted by the colour (51,51), we obtain plots as illustrated in Fig. 5
                        .
                           Remark
                           If we associate direction-dependent rate constants to transition t (see Section 4.5 for how to do this), we can interpret Fig. 2(b) as an 
                                 
                                    
                                       SPN
                                    
                                    
                                       C
                                    
                                 
                               model that exactly models the chemical reactions given in Eq. (2), and thus exactly reflects the chemical master equation given in Eq. (5). Other 
                                 
                                    
                                       SPN
                                    
                                    
                                       C
                                    
                                 
                               models that describe reaction–diffusion processes reflect similar chemical master equations.

We can use the same idea from above to model reaction–diffusion processes using 
                           
                              
                                 CPN
                              
                              
                                 C
                              
                           
                        ; the only difference is that the rates of transitions are now interpreted as deterministic rates. In fact, 
                           
                              
                                 CPN
                              
                              
                                 C
                              
                           
                         is an approximation of 
                           
                              
                                 SPN
                              
                              
                                 C
                              
                           
                         
                        [16], which can be seen from Fig. 3. For example, reading Fig. 2(b) as a 
                           
                              
                                 CPN
                              
                              
                                 C
                              
                           
                         model with uniform reaction rates k generates the following underlying ODEs:
                           
                              (8)
                              
                                 
                                    
                                       
                                          
                                             dS
                                          
                                          
                                             1
                                          
                                       
                                    
                                    
                                       d
                                       τ
                                    
                                 
                                 =
                                 k
                                 ·
                                 
                                    
                                       S
                                    
                                    
                                       2
                                    
                                 
                                 −
                                 k
                                 ·
                                 
                                    
                                       S
                                    
                                    
                                       1
                                    
                                 
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       
                                          
                                             dS
                                          
                                          
                                             2
                                          
                                       
                                    
                                    
                                       d
                                       τ
                                    
                                 
                                 =
                                 k
                                 ·
                                 
                                    
                                       S
                                    
                                    
                                       1
                                    
                                 
                                 +
                                 k
                                 ·
                                 
                                    
                                       S
                                    
                                    
                                       3
                                    
                                 
                                 −
                                 2
                                 ·
                                 k
                                 ·
                                 
                                    
                                       S
                                    
                                    
                                       2
                                    
                                 
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    
                                       
                                          
                                             dS
                                          
                                          
                                             3
                                          
                                       
                                    
                                    
                                       d
                                       τ
                                    
                                 
                                 =
                                 k
                                 ·
                                 
                                    
                                       S
                                    
                                    
                                       2
                                    
                                 
                                 −
                                 k
                                 ·
                                 
                                    
                                       S
                                    
                                    
                                       3
                                    
                                 
                              
                           
                        
                     

Besides, if we interpret Fig. 4 as a 
                           
                              
                                 CPN
                              
                              
                                 C
                              
                           
                         model with D1=D2=101 and set the concentration of P in the middle of the grid to 2000, we obtain the plot illustrated in Fig. 6
                        .
                           Remark
                           The 
                                 
                                    
                                       CPN
                                    
                                    
                                       C
                                    
                                 
                               model for a reaction–diffusion process can be explained as spatial discretisation of a given PDEs model in the form of, e.g., Eq. (1). That is, for a set of PDEs in the form of Eq. (1), which are functions of space and time in 
                                 Ω
                                 ×
                                 [
                                 0
                                 ,
                                 T
                                 ]
                              , we use, e.g., the finite difference method to perform a semi-discretisation in space. As a result, we replace the space 
                                 Ω
                               by a set of subspaces and in each subspace we consider a system of ODEs [24]. Note that the spatial step h for discretisation has an effect on the accuracy of the simulation results. If we use a fixed spatial step h in the x-axis and y-axis, respectively, to solve a given PDE, then the stability condition is 
                                 d
                                 Δ
                                 t
                                 /
                                 
                                    
                                       h
                                    
                                    
                                       2
                                    
                                 
                                 ≤
                                 1
                                 /
                                 4
                              , where 
                                 Δ
                                 t
                               is the time step for numerically solving the PDE. See [25] for how to derive this, and [26] for how to derive this for a group of PDEs.

Besides, the neighbour functions above are closely related to the difference approximation methods that are used for discretizing space. For example, if we use two indexes (i,j), which run in the x-axis and y-axis respectively, to identify a two-dimensional grid point, and set 
                           Δ
                           x
                           =
                           Δ
                           y
                           =
                           h
                        , then for 
                           
                              
                                 ∇
                              
                              
                                 2
                              
                           
                           S
                           =
                           
                              
                                 
                                    
                                       ∂
                                    
                                    
                                       2
                                    
                                 
                                 S
                              
                              
                                 ∂
                                 
                                    
                                       x
                                    
                                    
                                       2
                                    
                                 
                              
                           
                           +
                           
                              
                                 
                                    
                                       ∂
                                    
                                    
                                       2
                                    
                                 
                                 S
                              
                              
                                 ∂
                                 
                                    
                                       y
                                    
                                    
                                       2
                                    
                                 
                              
                           
                        , we obtain the following second-order central differences [27]:
                           
                              (11)
                              
                                 
                                    
                                       
                                          
                                             ∂
                                          
                                          
                                             2
                                          
                                       
                                       S
                                    
                                    
                                       ∂
                                       
                                          
                                             x
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                                 →
                                 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             i
                                             +
                                             1
                                             ,
                                             j
                                          
                                       
                                       −
                                       2
                                       
                                          
                                             S
                                          
                                          
                                             i
                                             ,
                                             j
                                          
                                       
                                       +
                                       
                                          
                                             S
                                          
                                          
                                             i
                                             −
                                             1
                                             ,
                                             j
                                          
                                       
                                    
                                    
                                       
                                          
                                             h
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                              
                           
                        
                        
                           
                              (12)
                              
                                 
                                    
                                       
                                          
                                             ∂
                                          
                                          
                                             2
                                          
                                       
                                       S
                                    
                                    
                                       ∂
                                       
                                          
                                             y
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                                 →
                                 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             i
                                             ,
                                             j
                                             +
                                             1
                                          
                                       
                                       −
                                       2
                                       
                                          
                                             S
                                          
                                          
                                             i
                                             ,
                                             j
                                          
                                       
                                       +
                                       
                                          
                                             S
                                          
                                          
                                             i
                                             ,
                                             j
                                             −
                                             1
                                          
                                       
                                    
                                    
                                       
                                          
                                             h
                                          
                                          
                                             2
                                          
                                       
                                    
                                 
                              
                           
                        where 
                           (
                           i
                           +
                           1
                           ,
                           j
                           )
                        , 
                           (
                           i
                           −
                           1
                           ,
                           j
                           )
                        , 
                           (
                           i
                           ,
                           j
                           +
                           1
                           )
                         and 
                           (
                           i
                           ,
                           j
                           −
                           1
                           )
                         are four immediate neighbouring points of (i,j), immediately right, immediately left, directly above, and directly below, respectively. These two equations exactly correspond to the neighbour function IsNeighbor2D4 given in Section 4.1.

For illustrative purposes, we now interpret Fig. 4 as a 
                           
                              
                                 GHPN
                              
                              
                                 C
                              
                           
                         model, where t
                        1 and t
                        2 are regarded as stochastic transitions, and the diffusion t
                        3 as a deterministic transition. Keeping the same parameters (i.e., D1=D2=101, concentration 2000 for P in the middle of the grid), generates plots as illustrated in Fig. 7
                        .
                           Remark
                           The modelling of diffusion–reactions systems using 
                                 
                                    
                                       GHPN
                                    
                                    
                                       C
                                    
                                 
                               is also straightforward. A diffusion–reaction system is first divided into two parts, the deterministic and stochastic one, which are then modelled using 
                                 
                                    
                                       SPN
                                    
                                    
                                       C
                                    
                                 
                               and 
                                 
                                    
                                       CPN
                                    
                                    
                                       C
                                    
                                 
                              , respectively. Moreover, deterministic and stochastic parts can be dynamically repartitioned during simulation for further improvement of efficiency and accuracy.


                        Discussion and comparison of the three formalisms. A single stochastic simulation run of an 
                           
                              
                                 SPN
                              
                              
                                 C
                              
                           
                         model gives a trace of discrete molecules (see Fig. 5(a)), with the molecules scattered in space, while a deterministic simulation run of a 
                           
                              
                                 CPN
                              
                              
                                 C
                              
                           
                         model gives a trace of the continuous concentration of molecules (see Fig. 6), with the molecules continuously distributed in space. If we use the same rate functions and the same initial conditions, e.g., 2000 tokens in Fig. 5 (interpreted as molecules or as the concentration of molecules for 
                           
                              
                                 SPN
                              
                              
                                 C
                              
                           
                         and 
                           
                              
                                 CPN
                              
                              
                                 C
                              
                           
                        , respectively), the trace averaged over a large number of stochastic runs of an 
                           
                              
                                 SPN
                              
                              
                                 C
                              
                           
                         model approximates the trace of its corresponding 
                           
                              
                                 CPN
                              
                              
                                 C
                              
                           
                         model; compare Fig. 5(b), where the average trace looks like a continuous one, and Fig. 6. Moreover, we observe in Fig. 7 that molecules in a 
                           
                              
                                 GHPN
                              
                              
                                 C
                              
                           
                         simulation run on one hand scatter (like in Fig. 5(a)) and on the other hand are continuously distributed (like in Fig. 6). That is, 
                           
                              
                                 GHPN
                              
                              
                                 C
                              
                           
                         combine 
                           
                              
                                 SPN
                              
                              
                                 C
                              
                           
                         and 
                           
                              
                                 CPN
                              
                              
                                 C
                              
                           
                        .

In the standard diffusion approach, usually a single rate constant is used for the whole space of a model. In contrast, our approach supports very flexible ways to specify individual rate constants or even individual rate functions dealing with situations that are more complex than those handled by the standard approach. In the following, we will take the coloured Petri net model of one-dimensional diffusion (see Fig. 2(b)) as example to demonstrate some typical scenarios for deploying individual diffusion constants. For this model, we only need to assign appropriate rate constants to the single transition t.


                        Representing diffusion rates depending on directions. In the one-dimensional diffusion model given in Section 2, the diffusion rates depend on the two directions, the one from left to right (rate constant k
                        1), and the other from right to left (rate constant k
                        2). Suppose molecules are moving from the subvolume x to one of its neighbours a (see Fig. 2(b)). We can implement this in coloured Petri nets in the following way: 
                           
                              
                                 
                                    
                                       
                                    
                                 
                              
                           
                        
                     

That is, if the index of the subvolume x is less than that of one of its neighbours a, which means that molecules are going to move from left to right, we use the rate constant k
                        1, otherwise k
                        2.


                        Representing diffusion rates depending on the indexes of individual subvolumes. We even could forget about k
                        1 and k
                        2, and instead assume two functions 
                           
                              
                                 f
                              
                              
                                 1
                              
                           
                           (
                           x
                           )
                         and 
                           
                              
                                 f
                              
                              
                                 2
                              
                           
                           (
                           x
                           )
                         yielding the rate constants in the two directions. Suppose the diffusion rates do not only depend on the directions of diffusion, but also on the indexes of the individual subvolumes. This problem can be addressed in the following way: 
                           
                              
                                 
                                    
                                       
                                    
                                 
                              
                           
                        
                     

Here, 
                           
                              
                                 f
                              
                              
                                 1
                              
                           
                           (
                           x
                           )
                         and 
                           
                              
                                 f
                              
                              
                                 2
                              
                           
                           (
                           x
                           )
                         are two functions of the index x built by any combination of allowed arithmetic operations, which means that the indexes of the individual subvolumes are taken into account in the diffusion rates.


                        Representing diffusion rates depending on different areas. Suppose the diffusion rates depend on the area, e.g., the rate constant k
                        1 is used in subvolumes 1 to D1/2, while k
                        2 in subvolumes (D1/2+1) to D1. Then we can use, e.g., the following way to address this problem: 
                           
                              
                                 
                                    
                                       
                                    
                                 
                              
                           
                        
                     

Here we only discussed three simple scenarios of how to specify individual diffusion rates. With the strong programming capabilities of coloured Petri nets, we can easily specify flexible diffusion rates for even more complex situations.

The Brusselator is a simple reaction–diffusion model to investigate the dynamic evolution of interactive microscopic entities giving rise to microscopically organized patterns, e.g., Turing patterns. The spatio-temporal evolution of the Brusselator is given by the following PDEs [28]:
                        
                           (13)
                           
                              
                                 
                                    ∂
                                    U
                                 
                                 
                                    ∂
                                    τ
                                 
                              
                              =
                              A
                              −
                              (
                              B
                              +
                              1
                              )
                              U
                              +
                              
                                 
                                    U
                                 
                                 
                                    2
                                 
                              
                              V
                              +
                              
                                 
                                    ∇
                                 
                                 
                                    2
                                 
                              
                              U
                           
                        
                     
                     
                        
                           (14)
                           
                              
                                 
                                    ∂
                                    V
                                 
                                 
                                    ∂
                                    τ
                                 
                              
                              =
                              BU
                              −
                              
                                 
                                    U
                                 
                                 
                                    2
                                 
                              
                              V
                              +
                              D
                              
                                 
                                    ∇
                                 
                                 
                                    2
                                 
                              
                              V
                           
                        
                     where U and V are the concentrations of species, and A, B, D are parameters, among which B is the control parameter. Besides,
                        
                           (15)
                           
                              B
                              =
                              (
                              μ
                              +
                              1
                              )
                              ⁎
                              
                                 
                                    (
                                    1
                                    +
                                    η
                                    )
                                 
                                 
                                    2
                                 
                              
                              ,
                           
                        
                     as μ and η are defined to replace B as the control parameters.

Eqs. (13) and (14) fulfil the sufficient conditions established in [29], thus we adopt the idea of [30] to cast the Brusselator in the form:
                        
                           (16)
                           
                              ϕ
                              
                                 
                                    →
                                 
                                 
                                    A
                                 
                              
                              
                                 
                                    U
                                 
                                 
                                    xy
                                 
                              
                           
                        
                     
                     
                        
                           (17)
                           
                              
                                 
                                    U
                                 
                                 
                                    xy
                                 
                              
                              
                                 
                                    →
                                 
                                 
                                    B
                                 
                              
                              
                                 
                                    V
                                 
                                 
                                    xy
                                 
                              
                           
                        
                     
                     
                        
                           (18)
                           
                              2
                              
                                 
                                    U
                                 
                                 
                                    xy
                                 
                              
                              +
                              
                                 
                                    V
                                 
                                 
                                    xy
                                 
                              
                              
                                 
                                    →
                                 
                                 
                                    1
                                 
                              
                              3
                              
                                 
                                    U
                                 
                                 
                                    xy
                                 
                              
                           
                        
                     
                     
                        
                           (19)
                           
                              
                                 
                                    U
                                 
                                 
                                    xy
                                 
                              
                              
                                 
                                    →
                                 
                                 
                                    1
                                 
                              
                              ϕ
                           
                        
                     with the following migration between neighbouring cells, e.g., from cell (x,y) to cell (a,b):
                        
                           (20)
                           
                              
                                 
                                    U
                                 
                                 
                                    xy
                                 
                              
                              
                                 
                                    →
                                 
                                 
                                    1
                                    /
                                    
                                       
                                          h
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                              
                                 
                                    U
                                 
                                 
                                    ab
                                 
                              
                           
                        
                     
                     
                        
                           (21)
                           
                              
                                 
                                    V
                                 
                                 
                                    xy
                                 
                              
                              
                                 
                                    →
                                 
                                 
                                    D
                                    /
                                    
                                       
                                          h
                                       
                                       
                                          2
                                       
                                    
                                 
                              
                              
                                 
                                    V
                                 
                                 
                                    ab
                                 
                              
                              .
                           
                        
                     where 
                        x
                        ,
                        a
                        ∈
                        [
                        1
                        ,
                        D
                        1
                        ]
                     , 
                        y
                        ,
                        b
                        ∈
                        [
                        1
                        ,
                        D
                        2
                        ]
                     , and h is the spatial step in x-axis or y-axis. All rates apply mass action kinetics, so only the rate constants are given; see Table 1
                      for the rate functions.

Eqs. (16)–(21) reveal the structure, and the transformation into a Petri net becomes straightforward. The result is a coloured continuous Petri net model in two-dimensional space, which is given in Fig. 8
                     ; places U and V represent the two species, and transitions t
                     16 to t
                     21 correspond to Eqs. (16)–(21).

Our approach does not substitute mathematical reasoning, but simplifies experiments to computationally explore the parameter space, without requiring deep understanding of the underlying mathematics.

If we set the grid to 128×128 cells, with the initial concentrations 
                        U
                        (
                        60
                        ,
                        60
                        )
                        =
                        3
                      and 
                        V
                        (
                        60
                        ,
                        60
                        )
                        =
                        13
                     , and choose the integration method BDFs with reflective boundary condition (encoded in the neighbour function), we obtain at the simulation time step 5000 the patterns shown in Fig. 9
                     . More specifically, adopting the classification introduced in [28], we obtain (a) 
                        
                           
                              H
                           
                           
                              π
                           
                        
                      hexagons, (b) 
                        
                           
                              H
                           
                           
                              π
                           
                        
                      hexagon–stripe mixtures (more hexagons than stripes), (c) 
                        
                           
                              H
                           
                           
                              π
                           
                        
                      hexagon–stripe mixtures (more stripes than hexagons), (d) stripes (open circles), neither 
                        
                           
                              H
                           
                           
                              π
                           
                        
                      nor H
                     0 hexagons, (e) H
                     0 hexagon–stripe mixtures (more stripes than hexagons), (f) H
                     0 hexagon–stripe mixtures (more hexagons than stripes), and (g) H
                     0 hexagons. Here, 
                        
                           
                              H
                           
                           
                              π
                           
                        
                      hexagons mean hexagons with lower concentrations inside than outside, while H
                     0 hexagons mean hexagons with higher concentrations inside than outside.

By comparison, we observe that the patterns we generated using our approach are very similar to those given in [28], which were produced with the spectral and semi-implicit integration methods, periodic boundary condition, and random initial concentrations; spatial steps are not given. The minor differences between our patterns in Fig. 9 and the patterns in Fig. 6 of [28] can be explained by these differences in the integration method details, and – most importantly – initial concentrations, as we show next.

So far, the different patterns emerged from the same initial concentration (initial marking), just by varying the parameter μ. Thus, an interesting question arises whether the initial marking does have an influence on the final pattern. So, we continue with exploring different initial conditions, which can be easily varied for coloured Petri nets, and we obtain the answer in Fig. 10
                     . Choosing μ=0.30 and varying the initial markings does not change the general pattern (here the stripe pattern), but the specific shape or details of the pattern.

Besides this qualitative comparison, a quantitative comparison would be of interest, which however is impossible due to the unavailability of the software used in [28]. Nevertheless, we have compiled some figures in order to give the reader an idea of the computational expense of the experiments reported here.

The simulation of a coloured continuous Petri net runs on an automatically unfolded continuous Petri net, so the runtime of an experiment usually comprises unfolding and simulation time. However, when we have finished the unfolding once, we can perform several experiments by keeping the simulation window open, thus avoiding repeated unfolding. Table 2
                      gives some test results for increasing numbers of grid cells. We observe that the ratio of the unfolding time to the number of grid cells increases approximately linearly; likewise for the simulation time.

All Petri net models discussed in this paper were built and simulated with Snoopy [12]. The models can be obtained from [31]. For long-running simulations we recommend the use of S4, Snoopy׳s Steering Simulation Server [32].

The tool pipeline to produce the 2D plots given in this paper is as follows. First, we generate with Snoopy a simulation trace, which is written in a csv file. Then, a Java program called “snoopy2gnuplot” converts this trace into a file format that can be read by Gnuplot [33]. This data file together with a script file is read by Gnuplot, which finally leads to our 2D plots. The Java program and the Gnuplot scripts to generate the 2D plots are also provided on [31].

Moreover, we produced movies illustrating the evolution (pattern formation) of the Brusselator over time in the setting of Fig. 9, which can be found in [31] as well.

Thus, all our results can be easily reproduced by the interested reader.

@&#RELATED WORK@&#

Modelling frameworks for biological reaction–diffusion systems may involve spatial deterministic, stochastic, or even hybrid simulation (combining deterministic and stochastic simulation).


                     Spatial deterministic simulation is usually achieved using numerical integration methods to solve PDEs, which is implemented by, e.g., Virtual Cell [34] and SmartCell [35]. Virtual Cell uses a finite volume method to solve PDEs in complex cell geometries including 2D and 3D geometry, potentially obtained from microscope images. SmartCell is a general framework for modelling and simulating diffusion–reaction systems in a whole-cell context by considering different cell geometries. Both tools also support spatial stochastic and hybrid simulations.

Bertens et al. [36,37] combine time Petri nets (a Petri net class not discussed in this paper) and PDEs to describe biological gradient formation. They derive parameters from the PDEs modelling the gradient formation process and incorporate them in Petri nets. This method works on uncoloured (timed) Petri nets and is totally different from our approach.


                     Spatial stochastic simulation of reaction–diffusion systems can be divided into the lattice and off-lattice methods. The former can be further divided into spatial SSA simulation to produce exact or approximate traces of the Reaction–Diffusion Master Equation (RDME) and microscopic lattices-based methods [4]. Among RDME-based methods, the next subvolume method (NSM) [6], a spatial version of the next reaction method, is widely used, which has been implemented in MesoRD [38] and SmartCell. MesoRD reads model definition in the Systems Biology Markup Language (SBML) [39] and permits the definition of 2D or 3D geometry. There is another variation of the Gillespie SSA, the composition and rejection method, which was implemented in STEPS [40], another stochastic reaction–diffusion simulator. STEPS supports externally generated 3D tetrahedral meshes, and describes the chemical model and the geometry completely separately, which differs from many reaction–diffusion simulators. The methods based on microscopic lattices have been implemented in such tools as GridCell [41] and E-Cell [42]. GridCell divides the simulation space into a 3D cubic grid composed of discrete voxels. E-Cell provides a spatial simulation algorithm based on microscopic lattices, where the space is discretised into hexagonal close-packed lattice. The off-lattice methods are based on particles, and the popular and widely used simulators include Smoldyn [43], Cell++ [44], and SimCell [45]. Smoldyn applies a fixed time step for reaction and diffusion of particles in 1D, 2D, and 3D. Cell++ implements spatial modelling and simulation by combining a cellular automata engine with Brownian dynamics, while SimCell combines an agent-based or dynamic cellular automata algorithm with Brownian dynamics. See, e.g., [4] for more discussions on spatial stochastic simulation of reaction–diffusion systems.

Besides these software packages, which were specifically designed with biological reaction–diffusion systems in mind, there are many general-purpose software packages, which can also be used to model and simulate reaction–diffusion systems, e.g., Mason [46], NetLogo [47], and Repast [48]. All these tools are multi-agent modelling languages for simulating natural and social phenomena.


                     Spatial hybrid simulation is usually a combination of the above-mentioned spatial stochastic and deterministic simulation algorithms, which has been realised, e.g., in Virtual Cell or SmartCell. Virtual Cell implements a hybrid simulation algorithm by combining stochastic simulation based on particles and deterministic simulation that uses a finite volume method. SmartCell offers hybrid simulation by combining deterministic simulation and stochastic simulation based on the next reaction/next subvolume methods.


                     Our modelling and simulation framework (implemented in Snoopy) for reaction–diffusion systems differs from the above-mentioned frameworks or tools in many aspects. From the modelling point of view, we visually model reaction–diffusion systems as coloured Petri nets, which – together with standard Petri nets – are gaining increasing popularity among systems biologists. While other frameworks and tools usually define models using their own formats, our framework is widely applicable with the compromise of not being specifically tailored to biological scenarios. But Snoopy reads and writes the standard exchange format SBML, Level 2, Version 3 [39]. Furthermore, our approach is very flexible to represent, e.g., various geometries and different types of diffusion rates using the annotations of coloured Petri nets. From the simulation point of view, our framework includes deterministic, stochastic and hybrid simulations, which are also supplied by Virtual Cell and SmartCell. In fact, our framework implements a similar simulation scheme as SmartCell does, i.e., by combining deterministic simulation with Gillespie SSA without being constrained to diffusion–reaction systems. Besides, with respect to stochastic simulation, we adopt the same ideas as the spatial Gillespie SSA given in [6,7]. But from the analysis point of view, other frameworks or tools usually support only the analysis via simulation. However, our framework comprises a number of other powerful analysis techniques varying from structural analysis, standard state space analysis to model checking of temporal logics [19]. In this aspect, our framework provides more benefits than other tools.

In summary, we offer a quite different general-purpose framework for biological reaction–diffusion systems, which covers rich modelling, simulation and analysis techniques.

@&#DISCUSSION AND CONCLUSIONS@&#

In previous work we had discussed various scenarios of spatial modelling of biological systems using coloured Petri nets. In this paper, we have presented a framework for the use of coloured Petri nets to address an important type of biological phenomena, the reaction–diffusion processes. Compared with other approaches, coloured Petri nets – as a high-level and graphical general-purpose language – can be easily understood and deployed. The graphical modelling approach as well as the availability of different net classes and associated simulation algorithms, allows the user to focus on the modelling process: the representation of the (bio-) chemical system, its conversion into a coloured Petri net, and the specification of appropriate neighbourhood relations and boundary conditions. Different types of geometries or boundary conditions like reflective, periodic, absorbing, or even customary boundary conditions can be defined, as well as different types of individual state- and/or time-dependent diffusion rates. No prior knowledge of continuous, stochastic, or hybrid simulation algorithms is required. However, to correctly build coloured Petri models needs to learn an annotation language, but the modelling elements can be used for any application area and are not specific for biological systems.

Reaction–diffusion processes are usually closely coupled with signalling pathways, metabolic reactions and/or gene expression, which introduce multiscaleness in time, space and/or token numbers or concentration, respectively. In order to model and simulate such complex and multiscale systems, it is crucial to have a method, which conveniently combines modelling and simulation. For this purpose, our coloured Petri nets offer a unifying framework that integrates deterministic, stochastic and hybrid simulation algorithms. Thus, users can explore reaction–diffusion processes with any of these algorithms or a combination of them within one framework.

Another outstanding merit of coloured Petri nets is that they enjoy a wealth of analysis techniques, which range from structural analysis and qualitative model checking to different simulation techniques, and numerical and simulative model checking [19]. These analysis techniques can be easily applied to diffusion systems if we build them as coloured Petri net models in an environment accompanied by a rich tool suite, e.g., Charlie [49], Marcie [50], and MC2 tool [51]. See [19] for details on how to use these techniques.

Previously, we had explored the application of coloured Petri nets for the modelling of biological systems from two perspectives. One aim is to increase the modelling capabilities, i.e., how to conveniently model large-scale biological systems. Another one is to improve the analysis efficiency or performance of the models built, which relates to the runtime of both unfolding and simulation. For example, 
                        
                           
                              SPN
                           
                           
                              C
                           
                        
                      and 
                        
                           
                              CPN
                           
                           
                              C
                           
                        
                      have been used in [52] for modelling a Drosophila wing tissue that involves about 160,000 places and 230,000 transitions at the unfolded level; the runtime of the unfolding lasts about 2min, the continuous simulation about 120min, performed on a Mac (Quad-core Intel Xeon, CPU 2times 2.26GHz and DDR3 RAM 8 GB). In [8], phase variation in bacterial cell colonies has been built as an 
                        
                           
                              SPN
                           
                           
                              C
                           
                        
                      model, comprising about 30,000 places and 360,000 transitions at the unfolded level with an unfolding time of about 10min and stochastic simulation run time of about 40min performed on a PC (Intel(R) Core(TM) i5-2500, CPU 3.30GHz, and DDR3 RAM 2GB). These previous applications have clearly demonstrated that our approach can be used to model and analyse realistic, complex reaction–diffusion systems.

All spatial simulation techniques have to discretise space and time. In our approach, we discretise space at modelling level and time during simulation, while traditionally both discretisations are done by the integration method used for model simulation. In the end, the limitations of our approach coincide with the ones other approaches are facing, because the underlying algorithmic principles (stochastic simulation/numerical integration algorithms) are basically the same.

In a next step, we will continue to improve the modelling and simulation capabilities of coloured Petri nets for reaction–diffusion systems. For example, we are implementing parallel simulation for continuous, stochastic and hybrid Petri nets, which is expected to substantially accelerate the simulation speed. We also intend to explore coloured simulation of coloured Petri nets, which runs at the coloured (folded) level without generating their corresponding unfolded Petri nets. These features will be available in our Petri net tool Snoopy to increase user acceptance and to facilitate the modelling and analysis of such types of systems.

None declared.

@&#ACKNOWLEDGEMENTS@&#

This work has been supported by Germany Federal Ministry of Education and Research (0315449H), Natural Scientific Research Innovation Foundation in Harbin Institute of Technology (HIT.NSRIF.2009005), and National Natural Science Foundation of China (61273226). We would like to thank David Gilbert and Wolfgang Marwan for many fruitful discussions, Mostafa Herajy, Christian Rohr, and Martin Schwarick for their assistance in model construction and software development, and Zuobao Cao for his mathematical support. We also would like to thank the anonymous referees for their constructive comments.

Supplementary data associated with this article can be found in the online version at doi:10.1016/j.compbiomed.2014.07.004.


                     
                        
                           Application 1
                           
                        
                     
                  

@&#REFERENCES@&#

