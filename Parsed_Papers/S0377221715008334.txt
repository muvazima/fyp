@&#MAIN-TITLE@&#Fuel emissions optimization in vehicle routing problems with time-varying speeds

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Describes a method to minimize fuel emissions for a vehicle routing problem.


                        
                        
                           
                           Allowed speeds in the road network depend on the time of day.


                        
                        
                           
                           Routes between customers and vehicle speeds are decision variables.


                        
                        
                           
                           Method is tested using real traffic data from a London road network.


                        
                        
                           
                           Gives potential reductions in greenhouse gas produced from use of the method.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Distribution

Fuel emissions optimization

Vehicle routing problems

Column generation

Tabu search

@&#ABSTRACT@&#


               
               
                  The problem considered in this paper is to produce routes and schedules for a fleet of delivery vehicles that minimize the fuel emissions in a road network where speeds depend on time. In the model, the route for each vehicle must be determined, and also the speeds of the vehicles along each road in their paths are treated as decision variables. The vehicle routes are limited by the capacities of the vehicles and time constraints on the total length of each route. The objective is to minimize the total emissions in terms of the amount of Greenhouse Gas (GHG) produced, measured by the equivalent weight of CO2 (CO2e).
                  A column generation based tabu search algorithm is adapted and presented to solve the problem. The method is tested with real traffic data from a London road network. The results are analysed to show the potential saving from the speed adjustment process. The analysis shows that most of the fuel emissions reduction is able to be attained in practice by ordering the customers to be visited on the route using a distance-based criterion, determining a suitable path between customers for each vehicle and travelling as fast as is allowed by the traffic conditions up to a preferred speed.
               
            

@&#INTRODUCTION@&#

Technical developments and the growth in road traffic pose new challenges for research in vehicle routing and scheduling for freight transport. Remote vehicle tracking techniques enable the road traffic data for different times of day and different days of the week to be collected, so as to provide detailed information on transit times for different roads by time of day and day of week. This provides an opportunity to plan vehicle routes and schedules taking time-varying speeds into account. In addition, the growth in road traffic and the use of road freight transport also bring problems of environmental pollution. Concerns about the environmental impact of transport activities have led to new vehicle routing models where the objective is to minimize the harmful effects of transportation on the environment.

An increasing number of papers are being published where fuel emissions are explicitly modelled. However many of these simplify the model by assuming that paths between customers are fixed or that the speeds of the vehicles are time-independent. In the model described in this paper, the speed of the traffic on the underlying road network is time dependent. In addition, the path used by a vehicle between a pair of customers and the speeds on the road segments are decision variables. This paper will describe a column generation based tabu search algorithm, which can work together with a solution method for single paths, in order to minimize fuel emissions for Vehicle Routing Problems (VRPs) with time-varying speeds.

The algorithm is then used for modelling a distribution operation using real traffic data from a road network located in London. The aim of these experiments is to discover how much reduction in CO2e can be obtained by using the algorithm described in this paper, compared with other approaches that are faster to compute. Experiments are also carried out to determine the effect of allowing more waiting time at customers.

The paper is organized as follows. Section 2 contains a review of relevant literature. The problem is described in Section 3, which is followed by a set-partitioning model for the VRP. Section 4 introduces the framework of the column generation based tabu search algorithm, which is used to find a prospective sequence for a set of customers, and goes on to discuss details of the algorithm. The computational experiments and their results are then presented in Section 5. Finally, conclusions are drawn in Section 6, and the main findings are highlighted.

@&#LITERATURE REVIEW@&#

In recent years, there has been increasing interest in estimating the environmental effects of vehicle routing policies. A survey of recent work in this area can be found in Eglese and Bektaş (2014). Various models have been proposed for estimating the fuel used by vehicles when travelling on roads. Examples include one published by the European Commission in the MEET report described by Hickman, Hassel, Joumard, Samaras, and Sorenson (1999) and the Comprehensive Modal Emissions Model (CMEM) described by Scora and Barth (2006). The CO2 emissions are normally calculated as being proportional to the fuel used. The fuel consumption and hence the emissions may relate to factors such as the vehicle type, weight and speed. Demir, Bektaş, and Laporte (2011) provide a comparison of a number of such models.

Recent research on minimizing emissions in vehicle routing models can be divided into two main categories: the first is the set of models where time-independence is assumed and the second set includes models where the road conditions are subject to traffic congestion and so the time needed to travel along a road segment depends on the time of day.

Among the time-independent models, Palmer (2007) developed a model where vehicle speeds are inputs to the model and the approach is tested on a case study of home deliveries for grocery stores in the UK. He found an average saving of 4.8% in CO2 emissions was possible compared to using routes that minimize time, but at the expense of a 3.8% increase in the time required. His model does not take vehicle loads explicitly into account, but Suzuki (2011) uses a model where load is taken into account and finds that delivering relatively heavy items early in a tour can be worthwhile in reducing the fuel consumption. Several case studies have been reported using time-independent approaches with the objective of minimizing fuel consumption and hence emissions. For example, Ubeda, Arcelus, and Faulin (2011) consider emission factors in planning routes for a food delivery operation. They show savings of around 25.5% in CO2 emissions, but this is mainly due to reducing the number of routes needed compared to the original plan.

Other time-independent models allow the speeds of vehicles to be decision variables. The approach adopted by Bektaş and Laporte (2011) in their Pollution-Routing Problem (PRP) uses a CMEM-based model and considers both load and speed in estimating a cost function to be minimized. They propose a non-linear mixed integer mathematical programming formulation and show how it can be linearized. The formulation can only solve small PRP instances, but Demir, Bektaş, and Laporte (2012) provide an adaptive large neighbourhood search algorithm for much larger PRP instances. Van Woensel, Creten, and Vandaele (2001) develop a model showing how queuing theory can be used to describe traffic flows and calculate emissions using the model described in the MEET report.

In the set of time-dependent models, Eglese, Maden, and Slater (2006) make use of traffic speed information collected at different times on sections of a road network to create a Road Timetable showing the quickest times between origins and destinations starting at different times of the day. In Maden, Eglese, and Black (2010) the Road Timetable is used with a tabu-search called LANTIME to minimize the total time required for a distribution operation. Vehicles are assumed to travel at the speed which minimizes their emissions per unit distance unless the congestion indicates that this is not possible, when the vehicles travel at the average speed of the traffic recorded for that road segment at that time. Results from a case study based on the distribution plans for an electrical goods wholesaler in the UK show that CO2 emissions can be reduced by around 7% with this approach. This is because routes with high congestion and hence, enforced low speeds and high emissions, are avoided. Figliozzi (2010) also takes into account congestion in minimizing emissions using a model based on the MEET report. An integer programming formulation is presented and a solution algorithm is described which is tested on modified Solomon benchmark problems. In contrast to Maden et al. (2010), the model allows vehicles to travel faster than their optimum speed that minimizes emissions if the traffic conditions and speed limits allow. Thus, there are examples where uncongested conditions can lead to increased emissions.

Vehicle speeds may also be used as decision variables in time-dependent models. Jabali, van Woensel, and de Kok (2012) use a similar model to Figliozzi (2011) but with speed as an additional decision variable, though without the use of time windows. Their model is based on a complete network where the nodes represent the depot and customers, while the maximum speeds on the arcs linking the nodes are subject to similar profiles. They describe a tabu search heuristic for solving the problem and test it on standard benchmark instances. The results suggest that a reduction of about 11.4% in CO2 emissions can be achieved, but with a 17.1% increase in travel times. Franceschetti, Van Woensel, Honhon, Bektaş, and Laporte (2013) follow a similar approach which also takes costs into account in a similar way to Bektaş and Laporte (2011). A mathematical formulation is produced and provides insights on when it is profitable to wait at customers.

The model presented in this paper is in the last category of models which take into account time-dependent conditions and where vehicle speeds are decision variables. It is designed for use on a road network where information is available on the speed of traffic on individual road segments at different times of the day. The solution provides the path to follow between customers and the speeds to be applied on each road segment. It thus provides a more detailed model than the one used by Jabali et al. (2012); the path used between a pair of customers may change depending on the time of travel in our model. Also, it allows time window constraints for serving customers which are not included in Jabali et al. (2012).

If it is assumed that the path used between customers is fixed, then some other recent research on speed optimization is relevant. Fagerholt, Laporte, and Norstad (2010) present the Speed Optimization Problem (SOP) in the context of shipping, provide models to formulate the problem and a solution algorithm. Norstad, Fagerholt, and Laporte (2011) provide a recursive smoothing algorithm for the SOP that runs fast and has been shown to be optimal by Hvattum, Norstad, Fagerholt, and Laporte (2013).

It is often the case that reductions can be made in the emissions resulting from a distribution operation, but at the expense of more time or cost. There are methods explicitly aimed at modelling this issue through a multi-objective approach. One example is provided by Jemai, Zekri, and Mellouli (2012) where an evolutionary algorithm is used to solve a bi-objective VRP where one objective minimizes total distance, while the other minimizes CO2 emissions. Demir, Bektaş, and Laporte (2014) consider the bi-objective PRP where fuel consumption and driving time are the two relevant objectives.

Finally, there is an emerging strand of research considering vehicle routing problems for alternatively powered vehicles that are designed to be more environmentally friendly. Such vehicles may have a more limited range before requiring refuelling and there may be a limited availability of refuelling points. An example is given by Erdoğan and Miller-Hooks (2012) in which they define a “Green Vehicle Routing Problem” where there are additional constraints on how far the vehicles may travel without refuelling and the refuelling stations are located at specific places. They formulate a mixed integer program to minimise the total distance and develop heuristics for its solution. Tests are carried out based on the location of stations supplying biodiesel fuel in a part of the USA.

Let 
                        
                           G
                           =
                           (
                           
                              C
                              ,
                              A
                           
                           )
                        
                      be a graph, where 
                        
                           C
                           =
                           {
                           
                              
                                 c
                                 0
                              
                              ,
                              
                                 c
                                 1
                              
                              ,
                              …
                              ,
                              
                                 c
                                 n
                              
                           
                           }
                        
                      contains a depot (c0) and a set of customers to serve. We define 
                        
                           A
                           =
                           {
                           
                              a
                              
                                 (
                                 
                                    
                                       c
                                       i
                                    
                                    ,
                                    
                                       c
                                       j
                                    
                                 
                                 )
                              
                              :
                              
                                 c
                                 i
                              
                              ,
                              
                                 c
                                 j
                              
                              ∈
                              C
                              ,
                              
                              i
                              ≠
                              j
                           
                           }
                        
                      as the set of arcs connecting customer nodes. For any pair ci, cj
                      there may be more than one arc connecting them, representing different paths through the underlying road network. The time horizon for the delivery operation is divided into time slots. For each road segment, the maximum speed allowed by the traffic conditions is given for each time slot. The demand of customer ci
                      is d(ci
                     ) and the service time for customer ci is b(ci
                     ), where b(c
                     0) represents any initial loading time at the depot after the start time. In some problem sets, each customer ci
                      ∈ C is associated with a time window [e(ci
                     ), l(ci
                     )], where e(ci
                     ) and l(ci
                     ) are the lower and upper bound of the time window respectively (with e(c
                     0) the earliest start time and l(c
                     0) the latest finish time of the journey). There is a fleet of homogeneous vehicles available, each with capacity Q. A vehicle route starts and finishes at the depot node, and visits a subset of customers in some order. The path between two customers or between the depot and a customer must follow the road segments of the transportation network. The goal is to minimize the total fuel emissions by assigning the customers to routes and ordering the customers in each route subject to the capacity and time window constraints if they apply. In all problems, the waiting time at each customer after completing service is limited to a maximum value, W. There is no restriction on the number of vehicles.

The fuel emissions optimization VRP can be modelled as a set-partitioning problem. Let 
                        P
                      be the set of feasible vehicle routes. For each route, 
                        
                           p
                           ∈
                           P
                        
                     , the speed of the vehicle on each road segment and the waiting time at each customer are set to minimize the corresponding emissions, fp
                     , and are determined by a new heuristic approach referred to as NHA and described in Qian and Eglese (2014). The quantity αip
                      is a binary variable used to denote whether customer ci
                      is visited by a vehicle travelling along route p, where 
                        
                           
                              α
                              
                                 i
                                 p
                              
                           
                           =
                           1
                        
                      if customer ci
                      ∈ C is included in route p, and 
                        
                           
                              α
                              
                                 i
                                 p
                              
                           
                           =
                           0
                        
                     , otherwise. Let yp
                      be a decision variable to count the number of times route p is used. In a feasible solution, yp
                      should be 0 or 1 for all 
                        
                           p
                           ∈
                           P
                        
                     . The formulation is shown as follows.

                        
                           (1)
                           
                              
                                 m
                                 i
                                 n
                                 
                                    ∑
                                    
                                       p
                                       ∈
                                       P
                                    
                                 
                                 
                                    f
                                    p
                                 
                                 
                                    y
                                    p
                                 
                                 ,
                              
                           
                        
                     
                     
                        
                           (2)
                           
                              
                                 s
                                 .
                                 
                                 t
                                 .
                                 
                                    ∑
                                    
                                       p
                                       ∈
                                       P
                                    
                                 
                                 
                                    
                                       α
                                       
                                          i
                                          p
                                       
                                    
                                    
                                       y
                                       p
                                    
                                    =
                                    1
                                    
                                    f
                                    o
                                    r
                                    
                                    i
                                    =
                                    1
                                    ,
                                    2
                                    ,
                                    …
                                    ,
                                    n
                                    ,
                                 
                              
                           
                        
                     
                     
                        
                           (3)
                           
                              
                                 
                                    y
                                    p
                                 
                                 ∈
                                 
                                    {
                                    
                                       0
                                       ,
                                       1
                                    
                                    }
                                 
                                 
                                 ∀
                                 p
                                 ∈
                                 P
                                 .
                              
                           
                        
                     
                  

The proposed solution method uses a column generation algorithm that takes advantage of the power of the branch-and-price technique to solve a set partitioning problem. It is based on a branch-and-price-based large neighbourhood search algorithm for the Vehicle Routing Problem with Time Windows (VRPTW) proposed by Prescott-Gagnon, Desaulniers, and Rousseau (2009). The current solution is destroyed in the destruction step by selecting one of four operators randomly. This leaves a set of partial routes and isolated customers. The large neighbourhood then contains all feasible solutions that are compatible with the partial routes. A heuristic column generation algorithm is used to reconstruct the solution, where tabu search is used to generate columns of negative reduced cost.

The formulation of the restricted master problem (RMP) called within the method is described as follows.

                        
                           (4)
                           
                              
                                 
                                    (
                                    RMP
                                    )
                                 
                                 m
                                 i
                                 n
                                 
                                    ∑
                                    
                                       p
                                       ∈
                                       P
                                       
                                          
                                          ′
                                       
                                    
                                 
                                 
                                    f
                                    p
                                 
                                 
                                    y
                                    p
                                 
                                 ,
                              
                           
                        
                     
                     
                        
                           (5)
                           
                              
                                 s
                                 
                                 .
                                 t
                                 .
                                 
                                 
                                    ∑
                                    
                                       p
                                       ∈
                                       
                                          P
                                          ′
                                       
                                    
                                 
                                 
                                    α
                                    
                                       i
                                       p
                                    
                                 
                                 
                                    y
                                    p
                                 
                                 =
                                 1
                                 
                                 f
                                 o
                                 r
                                 
                                 i
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 n
                                 ,
                              
                           
                        
                     
                     
                        
                           (6)
                           
                              
                                 
                                    y
                                    p
                                 
                                 ≥
                                 0
                                 
                                 ∀
                                 p
                                 ∈
                                 P
                                 
                                    
                                    ′
                                 
                                 .
                              
                           
                        
                     The set 
                        
                           P
                           
                              
                              ′
                           
                           ⊆
                           P
                        
                      contains feasible routes that include the fixed parts of the solution that have not been removed in the destruction step. We wish to find whether the objective value of the RMP could be further improved by adding any route that has not been included in 
                        
                           P
                           
                              
                              ′
                           
                        
                     . Any route that improves the solution will have a negative reduced cost when added to the RMP. The reduced cost for any route can be calculated using the values of the dual prices associated with the constraints in (5). If no route exists that was not in 
                        
                           P
                           
                              
                              ′
                           
                        
                      with a negative reduced cost, then the solution is optimal. Therefore, the sub-problem of the column generation process is to find the column, which satisfies the time window and capacity constraints, with minimum reduced cost. The sub-problem can be formulated as:

                        
                           (7)
                           
                              
                                 m
                                 i
                                 
                                    n
                                    
                                       p
                                       ∈
                                       P
                                    
                                 
                                 
                                 
                                    f
                                    p
                                 
                                 −
                                 
                                    ∑
                                    
                                       i
                                       =
                                       1
                                    
                                    n
                                 
                                 
                                    π
                                    i
                                 
                                 
                                    α
                                    
                                       i
                                       p
                                    
                                 
                                 ,
                              
                           
                        
                     where πi
                      is the dual price associated with constraint i in (5).

A tabu search algorithm is used to solve the sub-problem heuristically, and the goal is to produce feasible routes with negative reduced costs that have not yet been included in set 
                        
                           P
                           
                              
                              ′
                           
                        
                     . The algorithm framework is briefly introduced in the following steps.

Step 1: Generate an initial solution with Clarke and Wright Savings Algorithm (parallel version). Go to Step 2.

Step 2: Apply a destroy operator to determine the neighbourhood. Go to Step 3.

Step 3: Solve the RMP, i.e. a set-partitioning problem formulated as an LP relaxation based on the current set of columns (routes). If the stopping rule for the column generation process is met, go to Step 6; otherwise, go to Step 4.

Step 4: Apply tabu search to generate new columns (routes). Go to Step 5.

Step 5: Find the fuel emissions for the new columns (routes) using NHA. Go to Step 3.

Step 6: If the solution is not integer, apply a branching strategy to get an integer solution. While the number of iterations for the algorithm is less than a specified maximum number, go to Step 2; otherwise, stop.

Details of the algorithm corresponding to these steps are discussed in the following sections. Additional details can be found in the PhD thesis (Qian, 2012).

Define 
                           
                              E
                              C
                              =
                              {
                              
                                 
                                    f
                                    ˜
                                 
                                 
                                    (
                                    
                                       
                                          c
                                          i
                                       
                                       ,
                                       
                                       
                                          c
                                          j
                                       
                                    
                                    )
                                 
                                 :
                                 
                                 
                                    c
                                    i
                                 
                                 ,
                                 
                                 
                                    c
                                    j
                                 
                                 ∈
                                 C
                                 ,
                                 
                                 i
                                 ≠
                                 j
                              
                              }
                           
                        , 
                           
                              E
                              D
                              =
                              {
                              
                                 
                                    d
                                    ˜
                                 
                                 
                                    (
                                    
                                       
                                          c
                                          i
                                       
                                       ,
                                       
                                       
                                          c
                                          j
                                       
                                    
                                    )
                                 
                                 :
                              
                              
                                 
                                    c
                                    i
                                 
                                 ,
                                 
                                 
                                    c
                                    j
                                 
                                 ∈
                                 C
                                 ,
                                 
                                 i
                                 ≠
                                 j
                              
                              }
                           
                         and 
                           
                              E
                              T
                              =
                              {
                              
                                 
                                    t
                                    ˜
                                 
                                 
                                    (
                                    
                                       
                                          c
                                          i
                                       
                                       ,
                                       
                                       
                                          c
                                          j
                                       
                                    
                                    )
                                 
                                 :
                                 
                                 
                                    c
                                    i
                                 
                                 ,
                                 
                                 
                                    c
                                    j
                                 
                                 ∈
                                 C
                                 ,
                                 
                                 i
                                 ≠
                                 j
                              
                              }
                           
                         as matrices of estimated travel cost (fuel emissions), travel distance and travel time from customer ci
                         to cj
                        . The initial values of the matrices are based on the weighted average speeds of arcs, where the weights are the lengths of the time slots for which the average speeds apply. The optimal speed under free flow is used, if the weighted average speed is greater than the optimal speed. The optimal speed is the speed of the vehicle that minimizes the fuel emissions per kilometer. Once a speed for each arc is determined, the emissions for each arc can be calculated and treated as a cost for each arc. The optimal path between customers and between depot and customer in terms of fuel emissions is calculated using Dijkstra's algorithm (Dijkstra, 1959) and the corresponding travel cost (fuel emissions), travel distance and travel time are used as the initial values of the elements in EC, ED and ET.

The initial customer assignment is computed by the Clarke and Wright Savings Algorithm (parallel version) (Clarke and Wright, 1964). Each customer is assigned to an individual route at the beginning. If the arrival time at customer ci
                        , which is approximately computed by 
                           
                              
                                 t
                                 ˜
                              
                              
                                 (
                                 
                                    
                                       c
                                       0
                                    
                                    ,
                                    
                                    
                                       c
                                       i
                                    
                                 
                                 )
                              
                           
                         is before the early time window e(ci
                        ), unlimited waiting is allowed. Thus, the starting service time at customer ci
                         denoted as ssti
                         is, 
                           
                              s
                              s
                              
                                 t
                                 i
                              
                              =
                              m
                              a
                              x
                              
                                 {
                                 e
                                 
                                    (
                                    
                                       c
                                       i
                                    
                                    )
                                 
                                 ,
                                 e
                                 
                                    (
                                    
                                       c
                                       0
                                    
                                    )
                                 
                                 +
                                 b
                                 
                                    (
                                    
                                       c
                                       0
                                    
                                    )
                                 
                                 +
                                 
                                    t
                                    ˜
                                 
                                 
                                    (
                                    
                                       
                                          c
                                          0
                                       
                                       ,
                                       
                                       
                                          c
                                          i
                                       
                                    
                                    )
                                 
                                 }
                              
                           
                        , and the corresponding waiting time denoted as wti
                         is, 
                           
                              w
                              
                                 t
                                 i
                              
                              =
                              s
                              s
                              
                                 t
                                 i
                              
                              −
                              
                                 (
                                 
                                    e
                                    
                                       (
                                       
                                          c
                                          0
                                       
                                       )
                                    
                                    +
                                    b
                                    
                                       (
                                       
                                          c
                                          0
                                       
                                       )
                                    
                                    +
                                    
                                       t
                                       ˜
                                    
                                    
                                       (
                                       
                                          
                                             c
                                             0
                                          
                                          ,
                                          
                                          
                                             c
                                             i
                                          
                                       
                                       )
                                    
                                 
                                 )
                              
                           
                        . Then routes are combined using the estimated travel costs based on fuel emissions. Capacity and time window constraints are considered when deciding if two routes can be merged.

There are four destroy operators used to modify the current solution in order to diversify the search. The destroy operators are analogous to the ones presented by Prescott-Gagnon et al. (2009) and more details are given in Qian (2012). With each destroy operator, only part of a complete route will be removed.

The large neighbourhood search is a process where each iteration starts with the application of a destroy operator to the current solution. Only one destroy operator is applied at each iteration through a roulette-wheel selection procedure. Each of the destroy operators is assigned a value ωi
                        . The destroy operator is chosen randomly at the beginning of each iteration, where each operator i has probability of 
                           
                              
                                 ω
                                 i
                              
                              /
                              
                                 ∑
                                 i
                              
                              
                                 ω
                                 i
                              
                           
                         to be selected. Following the method proposed by Prescott-Gagnon et al. (2009), the initial value of ωi
                         is set to 5. Whenever operator i is called and its use improves the current solution, the value of ωi
                         is increased by 1.

The column generation process has already been outlined at the beginning of Section 3. In Step 3 of the algorithm framework, the stopping rule is that either an improved integer solution has been found or the value of the objective in (4) has not been improved for a certain number of iterations.

A solution pool is kept to store the routes associated with the basic variables obtained by solving the last RMP at each iteration of the large neighbourhood search. After a destroy operator is selected and applied, the remaining customers in the route define the fixed part. Then, the routes in the solution pool with the same structure as the fixed part will be added to set 
                           
                              P
                              ′
                           
                        . As a result, the reconstruction process will start with a set of prospective columns, some of which may not be obtained by applying tabu search. Moreover, the fuel emissions for these routes do not need to be recalculated, which saves computational time. However, extra time is required to scan the structure of the routes in the solution pool, so the size of the solution pool is limited in order to control the extra time needed to manage it. Columns are removed by following the ‘first in first out’ rule once the solution pool is full. The solution pool can also be thought of as a long-term memory.

The tabu search algorithm is used to solve the sub-problem heuristically, and the goal is to produce feasible routes with negative reduced costs that have not yet been included in set 
                           
                              P
                              
                                 
                                 ′
                              
                           
                        . The costs used in the tabu search f′(ci
                        , cj
                        ) are based on the approximate costs, but they are adjusted by the dual prices, πi
                        , corresponding to the constraints in the RMP as follows.

                           
                              (8)
                              
                                 
                                    
                                       f
                                       ′
                                    
                                    
                                       (
                                       
                                          
                                             c
                                             i
                                          
                                          ,
                                          
                                          
                                             c
                                             j
                                          
                                       
                                       )
                                    
                                    =
                                    
                                       f
                                       ˜
                                    
                                    
                                       (
                                       
                                          
                                             c
                                             i
                                          
                                          ,
                                          
                                          
                                             c
                                             j
                                          
                                       
                                       )
                                    
                                    −
                                    
                                       π
                                       i
                                    
                                    ,
                                    
                                       
                                       for
                                       
                                    
                                    i
                                    =
                                    1
                                    ,
                                    2
                                    ,
                                    …
                                    ,
                                    n
                                    .
                                 
                              
                           
                        Routes associated with the basic variables after solving the RMP are used as initial solutions, and the tabu search approach is applied individually for each of them. Since the reduced costs of the basic variables are zero, they should be good initial solutions when searching for routes with negative reduced costs. The total number of iterations for the tabu search is at most 
                           
                              I
                              
                                 m
                                 a
                                 x
                              
                              
                                 t
                                 a
                                 b
                                 u
                              
                           
                        . As a result, the number of iterations allowed for each column is set to 
                           
                              ⌊
                              
                                 
                                    I
                                    
                                       m
                                       a
                                       x
                                    
                                    
                                       t
                                       a
                                       b
                                       u
                                    
                                 
                                 
                                    #
                                    
                                    o
                                    f
                                    
                                    b
                                    a
                                    s
                                    i
                                    c
                                    
                                    v
                                    a
                                    r
                                    i
                                    a
                                    b
                                    l
                                    e
                                    s
                                 
                              
                              ⌋
                           
                        
                        .
                     

Two simple operators are used to reconstruct new routes, which are removing and inserting a customer. Every time a customer node is removed/inserted, the reverse move is tabu for the next tbmax
                            iterations. Hence, at one iteration, a move is defined as removing a (non-tabu) customer and inserting another (non-tabu) customer at a possible insertion place. All possible removals and all possible insertion places are tested to find the best one. Only feasible moves are allowed in the search process, so the capacity and time window constraints have to be checked for each customer insertion and only the time window constraints for customer removal.

One of the advantages of applying a heuristic method to solve a VRP in a static network is that only the sub-routes changed by a neighbourhood move have to be re-evaluated. However, in a time-varying road network, the evaluation of a neighbourhood move is not so straightforward. The fuel emissions from any customer ci
                            to customer cj
                            may change according to different departure times from customer ci
                           , so the re-evaluation process is no longer simply an addition and subtraction operation of a few static values relating to the links between customers that have been changed. The time dimension has to be taken into account which leads to the need to re-evaluate significant parts of the affected routes.


                           Harwood, Mumford, and Eglese (2013) has examined different ways to estimate the cost of a neighbourhood move within a single tour with time-varying traversal speeds, when the objective is to minimize the total time. The tour is divided into three parts according to the nodes being moved: the pre-change part is the tour from the depot until the first node to be changed; the post-change part is the tour from the last node to be changed back to the depot; and the remaining section is called the changed part. To determine whether a move leads to an improvement, the pre-change part of the tour does not need to be recalculated and provided the First-In-First-Out (FIFO) property holds, the post-change part of the tour does not need to be recalculated either. Furthermore, the necessary and sufficient condition for an overall improvement to be achieved is that the tour from the depot to just before the post-change part should be improved. Therefore, only the changed part of the routes has to be revaluated to find out whether a neighbourhood move will improve the cost, if the FIFO property is maintained in a time-varying network. However the post-change part of the route still has to be recalculated in order to obtain the overall improvement, once a neighbourhood move has been identified as leading to an improvement.

When the objective is to minimize emissions or costs that depend on the time of travel, then these results do not apply. Suppose the optimal solution has been found from an origin node c
                           0 to node cj
                            which passes through ci
                           . That solution may not contain the optimal solution for a path from c
                           0 to ci
                           . This is because it may be better to travel faster/slower than the optimal speed with lower fuel efficiency from c
                           0 to ci
                           , so as to arrive at ci
                            earlier/later to avoid the congestion from ci
                            to cj
                           .

Consequently, any neighbourhood change requires the whole route to be re-evaluated to find the exact change in fuel emissions, which makes the problem of minimizing fuel emissions in a time-varying network more difficult to solve. In order to evaluate neighbourhood moves quickly, approximate values of the fuel emissions between customers are used to evaluate each move in the tabu search procedure. Using these approximate values means that only the links that have changed in the neighbourhood move need to be considered in estimating the change in emissions and so can be calculated quickly.

The estimations resulting from the time-varying speeds are improved from one iteration to the next by using a simple exponential smoothing method to update the values of the estimated travel cost (fuel emissions), travel distance and travel time between customers. After NHA has been applied to estimate the cost of a complete route, the values of 
                              
                                 
                                    f
                                    ˜
                                 
                                 
                                    (
                                    
                                       
                                          c
                                          i
                                       
                                       ,
                                       
                                       
                                          c
                                          j
                                       
                                    
                                    )
                                 
                                 ,
                                 
                                 
                                    d
                                    ˜
                                 
                                 
                                    (
                                    
                                       
                                          c
                                          i
                                       
                                       ,
                                       
                                       
                                          c
                                          j
                                       
                                    
                                    )
                                 
                                 
                                    
                                    and
                                    
                                 
                                 
                                    t
                                    ˜
                                 
                                 
                                    (
                                    
                                       
                                          c
                                          i
                                       
                                       ,
                                       
                                       
                                          c
                                          j
                                       
                                    
                                    )
                                 
                              
                           , where customer cj
                            follows customer ci
                            immediately in the complete route, are updated as follows:

                              
                                 (9)
                                 
                                    
                                       
                                          f
                                          ˜
                                       
                                       
                                          (
                                          
                                             
                                                c
                                                i
                                             
                                             ,
                                             
                                             
                                                c
                                                j
                                             
                                          
                                          )
                                       
                                       =
                                       
                                          w
                                          1
                                       
                                       
                                          
                                             f
                                             ˜
                                          
                                          *
                                       
                                       
                                          (
                                          
                                             
                                                c
                                                i
                                             
                                             ,
                                             
                                             
                                                c
                                                j
                                             
                                          
                                          )
                                       
                                       +
                                       
                                          (
                                          
                                             1
                                             −
                                             
                                                w
                                                1
                                             
                                          
                                          )
                                       
                                       
                                          f
                                          ˜
                                       
                                       
                                          (
                                          
                                             
                                                c
                                                i
                                             
                                             ,
                                             
                                             
                                                c
                                                j
                                             
                                          
                                          )
                                       
                                    
                                 
                              
                           
                           
                              
                                 (10)
                                 
                                    
                                       
                                          d
                                          ˜
                                       
                                       
                                          (
                                          
                                             
                                                c
                                                i
                                             
                                             ,
                                             
                                             
                                                c
                                                j
                                             
                                          
                                          )
                                       
                                       =
                                       
                                          w
                                          2
                                       
                                       
                                          
                                             d
                                             ˜
                                          
                                          *
                                       
                                       
                                          (
                                          
                                             
                                                c
                                                i
                                             
                                             ,
                                             
                                             
                                                c
                                                j
                                             
                                          
                                          )
                                       
                                       +
                                       
                                          (
                                          
                                             1
                                             −
                                             
                                                w
                                                2
                                             
                                          
                                          )
                                       
                                       
                                          d
                                          ˜
                                       
                                       
                                          (
                                          
                                             
                                                c
                                                i
                                             
                                             ,
                                             
                                             
                                                c
                                                j
                                             
                                          
                                          )
                                       
                                    
                                 
                              
                           
                           
                              
                                 (11)
                                 
                                    
                                       
                                          t
                                          ˜
                                       
                                       
                                          (
                                          
                                             
                                                c
                                                i
                                             
                                             ,
                                             
                                             
                                                c
                                                j
                                             
                                          
                                          )
                                       
                                       =
                                       
                                          w
                                          3
                                       
                                       
                                          
                                             t
                                             ˜
                                          
                                          *
                                       
                                       
                                          (
                                          
                                             
                                                c
                                                i
                                             
                                             ,
                                             
                                             
                                                c
                                                j
                                             
                                          
                                          )
                                       
                                       +
                                       
                                          (
                                          
                                             1
                                             −
                                             
                                                w
                                                3
                                             
                                          
                                          )
                                       
                                       
                                          t
                                          ˜
                                       
                                       
                                          (
                                          
                                             
                                                c
                                                i
                                             
                                             ,
                                             
                                             
                                                c
                                                j
                                             
                                          
                                          )
                                       
                                    
                                 
                              
                           where 
                              
                                 
                                    
                                       f
                                       ˜
                                    
                                    *
                                 
                                 
                                    (
                                    
                                       
                                          c
                                          i
                                       
                                       ,
                                       
                                       
                                          c
                                          j
                                       
                                    
                                    )
                                 
                                 ,
                                 
                                 
                                    
                                       d
                                       ˜
                                    
                                    *
                                 
                                 
                                    (
                                    
                                       
                                          c
                                          i
                                       
                                       ,
                                       
                                       
                                          c
                                          j
                                       
                                    
                                    )
                                 
                                 
                                    
                                    and
                                    
                                 
                                 
                                    
                                       t
                                       ˜
                                    
                                    *
                                 
                                 
                                    (
                                    
                                       
                                          c
                                          i
                                       
                                       ,
                                       
                                       
                                          c
                                          j
                                       
                                    
                                    )
                                 
                              
                            are the corresponding fuel emissions, travel time and travel distance from ci
                            to customer cj
                            in the complete route; and w
                           1, w
                           2 and w
                           3 are weights with values between 0 and 1. After some testing with different values, w
                           1, w
                           2 and w
                           3 are each set to 0.8 in subsequent runs.

Under the following two circumstances, NHA is applied to evaluate fuel emissions for the current complete route, so that more accurate values can be used:

                              
                                 •
                                 The estimated reduced cost of a new column is better than the best solution to the sub-problem associated with the RMP (7) so far. In this case, NHA is used to calculate the actual fuel emissions of the new column, in order to obtain the actual reduced cost. If the reduced cost is smaller than the best solution so far, the aspiration criterion is met, and the tabu restriction is overridden.

After 
                                       
                                          ⌊
                                          
                                             
                                                I
                                                
                                                   m
                                                   a
                                                   x
                                                
                                                
                                                   t
                                                   a
                                                   b
                                                   u
                                                
                                             
                                             
                                                #
                                                
                                                o
                                                f
                                                
                                                b
                                                a
                                                s
                                                i
                                                c
                                                
                                                v
                                                a
                                                r
                                                i
                                                a
                                                b
                                                l
                                                e
                                                s
                                             
                                          
                                          ⌋
                                       
                                     iterations of tabu search have been applied to a column, the fuel emissions of the column will be calculated by NHA. If the reduced cost based on the re-estimated fuel emission is negative, this column is added into set 
                                       
                                          P
                                          ′
                                       
                                    .

If there is an improved integer solution obtained by solving the RMP, the reconstruction process will stop, and a destroy operator will be invoked to determine a new large neighbourhood of the integer solution. Otherwise, the column generation process will stop if the value of (4) cannot be improved in the last 
                              
                                 I
                                 
                                    m
                                    a
                                    x
                                 
                                 
                                    C
                                    G
                                 
                              
                            iterations of solving the RMP, where 
                              
                                 I
                                 
                                    m
                                    a
                                    x
                                 
                                 
                                    C
                                    G
                                 
                              
                            represents the maximum number of column generation iterations and is a parameter to be set.

When the solution obtained by RMP in the last iteration is not integer, a heuristic branching strategy is applied to derive an integer solution. The branching strategy is to simply fix the decision variable with the largest fractional value at 1, and solve the linear problem again. This process is repeated until the solution is integer or no feasible solution can be found.

If any new integer solution can be obtained by applying the branching strategy, no matter whether it is better or worse than the initial solution at the beginning of the current iteration of large neighbourhood search, the solution will be used for the next iteration. This can help to diversify the search. If there is no feasible integer solution, the initial solution at the beginning of the current iteration of large neighbourhood search is used again in the next iteration.

The VRP algorithm is tested in this section with real traffic data for a road network located in London.

The data set used includes the locations of 60 stores and a depot. The depot and the stores are located in the southeast of London and the locations are based on those used by a well-known supermarket company. A map showing the locations is provided in Fig. 1
                        . Customer nodes 51–60 are located in the London congestion charge area. There are 208,488 nodes in the London network, which are linked by 219,880 bidirectional road segments and 37,651 unidirectional road segments. Each bidirectional road segment is replaced by a pair of unidirectional arcs, one in each direction. Hence, the network has 208,488 nodes and 477,411 unidirectional arcs. The distribution of arc lengths has a mean of 92.2 m with a maximum of 2848.7 m. About 70% of the arcs are shorter than 100 m, and only about 9% of arcs are longer than 200 m.

Traffic information was supplied from ITIS Holdings. From information obtained by tracking fleets of vehicles in the area, observations of speeds were obtained for all road segments. The 24-h period during a weekday was divided into 15 different time slots. Within each time slot the observed speeds were relatively stable, but speeds could be very different in different time slots due to the way that traffic congestion builds up at different times of the day. For each road segment, the mean speed in each time slot was taken to be the maximum speed that could apply to any vehicle starting to travel over the road segment within that time slot.

The stores are divided into five sets named A, B, C, D and E, and each set contains 25 stores or customers. Specifically, set A contains customers 1–25, set B contains customers 36–60 and set C contains customers 11–35. In set D, the customers are clustered and set E contains a randomly selected customer set. Both set B and set D include all of the customers located in the congestion charge area. The demands of customers are between 4 and 8 cages. The average service time for unloading one cage is two minutes. For some runs, no particular customer time windows were applied. In these cases, any store may have a delivery between 7 am and 5 pm which corresponds to the drivers’ shift time. For runs where customer time windows are applied, the earliest start times are randomly generated by following a uniform distribution with associated range between 7 am and 2 pm. The time window intervals are uniformly distributed between 1 and 5 h. Instances with no time windows are labelled by the set of customers with the addition of “0”, and the instances with time windows are labelled with the addition of “1”. The details of the customer demands and time windows are given in Appendix A. Due to London night time regulations for freight deliveries, the starting time from the depot is set to be after 7 am. The driver shift time is 10 hours, so the finishing time at the depot must be by 5 pm. Waiting time at each customer node or the depot is initially set to be a maximum of 5 minutes. A fleet of homogenous vehicles is used in the case study, which are rigid Diesel HGVs > 32 t subject to the EURO V emission standard (Department for Transport 2009). The corresponding speed-fuel curve is shown in Fig. 2
                        . The valid speed range is between 6 kilometre/hour and 90 kilometre/hour.

Using this fuel consumption curve is an approximation as it does not take into account effects like acceleration, deceleration and the gradients of the roads. However, in the case of road gradients, vehicles depart from and return to the same depot, so there is no overall change in altitude for a vehicle for each route. This means that there will be some cancellation of the effects of uphill gradients requiring more fuel, while downhill gradients require less fuel. Also no allowance has been made for the changing weight of the load carried. The fuel used in litres is converted to the equivalent greenhouse gas effect of CO2 in kilogram by multiplying by a factor of 3.1787. This was the factor proposed by the UK Government in 2010 in its guidance for reporting emissions (Department for Environment, Food and Rural Affairs, 2010).

The approach described in this paper was applied to the instances described and a summary of the results is provided in Appendix B. This shows the sequence of customers on each route, the total CO2 emissions, the distance travelled, the time required and the total waiting time for each instance. There are two sets of results: one set for instances without customer time windows and one set for instances with time windows.

In the computational experiments, the parameter values used are 
                           
                              
                                 I
                                 
                                    max
                                 
                                 tabu
                              
                              =
                              100
                              ,
                           
                        
                        
                           
                              
                                 I
                                 
                                    max
                                 
                                 CG
                              
                              =
                              30
                              ,
                           
                         and the length of the tabu list 
                           
                              t
                              
                                 
                                    b
                                 
                                 max
                              
                              =
                              4
                           
                        . Details concerning the parameter values can be found in Qian (2012). All the results are recorded as the better of two runs. All computations were carried out on the Lancaster high performance computer cluster with quad core Intel Nehalem 2.26 GigaHertz CPU and 24 Gb of memory.

Each vehicle is only allowed to undertake one trip. The results for the instances without customer time windows show that the average trip takes between 2 and 3 hours for each instance. If more than one trip per day were allowed, then the number of vehicles could be reduced, otherwise the vehicles would be available for other duties following the completion of their routes.

The results show that the set of instances with customer time windows require about 20% longer computational running time to produce the solutions compared to the set of instances with no customer time windows. Overall, the solutions for the set of instances with customer time windows produce just over 1% more emissions compared to the set of instances with no time windows, even though a longer waiting time is allowed for the set of instances with customer time windows to ensure feasible solutions.

In the following subsections, various aspects of the problem and solution method are investigated. The first subsection investigates the impact of the speed adjustment and path selection process, waiting time and starting time based on the tests on the five customer sets without time windows. The speed adjustment and path selection process refers to the path chosen and speeds adopted on the road network in travelling between specific customers. Then, the original method is compared against a simpler method, which generates customer sequences based on static information. Finally, the effect of the time window constraint is examined.

NHA, as described in Qian and Eglese (2014), finds the best path between two customers and the best speeds for the vehicle when leaving the first customer at a particular time. NHA thus has a path selection (PS) process and a speed adjustment (SA) process. The contributions from these different processes are examined in this section. The solutions from three methods are presented in Table 1. The column labelled ‘With PS & SA’ shows the solutions obtained by the model proposed in the first part of this paper using NHA; the ‘PS Only’ column shows the solutions obtained by the model without the speed adjustment process; and the last column shows results from the model with neither the path selection process nor the speed adjustment process being used. Without the speed adjustment process, the vehicle is assumed to travel at the speed allowed by the current congestion up to a specified maximum speed, corresponding to the optimal speed of the vehicle; while without the path selection process, the fastest path is used. However, the sequences of customers in all the methods are determined by the approximated fuel emissions matrices.

The path selection and speed adjustment processes reveal some contribution to the CO2e emissions reduction. On the average, about 10 kilogram CO2e emissions can be saved by applying both the path selection and speed adjustment processes, equivalent to a reduction of about 2–3%. In particular, the reduction for B_0 is up to 15 kilogram, which is 4% less than ‘Without PS & SA’. Compared to the speed adjustment process, the path selection process plays a more significant role in reducing fuel emissions. Around 4 kilogram extra CO2e is emitted on average by choosing a promising path and travelling with the fastest speeds allowed by the traffic conditions up to an optimal speed; while in the worst case B_0, another 12 kilogram emissions is produced by following the fastest paths at the fastest allowed speeds.

One reason that the performance of the speed adjustment process does not have a greater effect could be the shape of the fuel curves used in the experiments. As illustrated in Fig. 1, the maximum valid speed is 90 kilometre/hour, whose fuel efficiency is close to that of the optimal speed 65 kilometre/hour; and the fuel efficiency reduces quickly with the decrease of the speed. Therefore, it would not be wise to slow the speed any more than necessary. If the fuel emissions curve is very sensitive to the speeds, or increasing the speed makes the fuel curve steep, then the speed adjustment would be worth applying; otherwise, just carefully selecting a path, then travelling as fast as traffic conditions allow up to an optimal speed still provides a good solution.

All experiments so far are based on the condition that all the deliveries should start at 7 am, and waiting time at each customer node as well as the depot cannot exceed 5 minutes. Note that 7 am is the start of a peak period, when the road traffic is getting busy. Vehicles may be caught in traffic congestion, which results in extra fuel emissions. The fuel emissions may be improved by allowing longer waiting, or starting after the rush hour. Two scenarios are tested: one is starting at 7 am, but allowing waiting up to 4 hours; and the other is starting at 10 am, and with maximum waiting time being 5 minutes. They are compared to the original solutions with the starting time being 7 am and maximum waiting time being 5 minutes. Results are summarized in 
                           Tables 2
                            and 3
                           
                           
                           .

For each instance, seven vehicle routes are required to serve all customers. By allowing more waiting time, about 2–3 % CO2e can be saved. However, it is at the expense of 16–30 hours’ total waiting time. In instance C_0, for example, one complete route starts from the depot, then serves customers 2, 7, 1, 17 and returns back to the depot. By allowing a longer waiting time, the vehicle and driver wait at customer 2 for about 1.8 hours and wait at customer 1 for about 3 hours to avoid peak time congestion. As a result, the total CO2e for the route is reduced from 85 kilogram to 81 kilogram. In practice, the effect on costs of the extra waiting time will depend on how the drivers are being paid and whether any of the additional waiting time coincides with their breaks. For instance for B_0 and D_0, the improvement by waiting is smaller compared with others, but the total waiting time is also shorter, which is about 17 hours while others are more than 20 hours.

When the starting time is changed to 10 am and the morning peak is avoided, results from instances A_0, C_0 and E_0 show that about 1–2% CO2e can be saved. However the results for B_0 and D_0 are slightly worse than those for a starting time of 7 am. This may be because both instances contain 10 customers located in the congestion charge area, and the traffic flows in the city centre keep busy during the day time. It may also be because more travel is moved towards the evening peak when traffic is more congested.

In practice, the starting time is restricted by many factors, such as local authority regulations and the driver shift times. Attempts may be made to provide night time deliveries to avoid daytime congestion, but other problems like noise, safety and out-of-hours deliveries may mean that night time deliveries are not feasible.

In the original method, the customer sequence is determined by approximate fuel emission matrices, the values of which are updated from one iteration to the next. This requires repeated application of NHA within the method and results in high run times as shown in Appendix B. In order to reduce the computational burden, a simpler method is proposed for comparison that only considers static information when determining the vehicle assignment and the customer sequence. The VRP is first solved by minimizing the total distance, i.e. using the distance matrices within the column generation based tabu search algorithm. Then, NHA is applied to decide on speeds and paths for the pre-determined complete routes. In other words, the time-varying speeds are not considered until the sequences of customers have been decided. A comparison between the original method and the distance based approach (DBA) in terms of solution quality as well as computational time is shown in Table 4.

As shown in the table, DBA is able to obtain a solution close to the original method for instances A_0, C_0, D_0 and E_0. The performance of DBA for instance B_0 is not as good as for other instances, but it is only 1.6% worse than the solution obtained by the original method. In general, minimizing distance seems to be a good criterion for obtaining a good sequence of customers, before using NHA to find the detailed paths and speeds to be used when travelling between customers.

Meanwhile, the running time for DBA is much less than the original method. The running time of DBA is about 5–6 minutes, while that of the original method is more than 20 hours. This is because NHA is only used at the end of the process, after the customers have been allocated to routes and their sequences have been determined. DBA is able to get solutions that are very close to those obtained by the original method, but it needs less than 0.5% of the running time of the original method.

For the instances without time window constraints, DBA provides good solutions in terms of running time as well as solution quality. However, DBA has the potential risk of missing time windows by using static travel time data in scheduling the customer sequence. The impact of the time window constraint will be discussed in the next section.

All the above discussion is based on the instances without time window constraints, but only with 7 am as the earliest starting time and 5 pm as the latest finish time for the drivers’ working shift. In this section, the instances with time windows are tested. In order to guarantee a feasible solution for each instance, the maximum waiting time is set at 4 hours. Table 5 shows results obtained by the original method as well as the simpler method.

We note that DBA has again found solutions close to those obtained by the original method for instances C_1, D_1 and E_1 within a relatively short running time. However, the performance of DBA on A_1 is about 8% worse; and it cannot even find a feasible solution for instance B_1. DBA does not consider the time-varying speeds when scheduling the vehicle assignment and the customer sequence, and the travel time may be underestimated. Consequently, there is a risk that a vehicle has to speed up and follow a higher-emission strategy in order to satisfy the time window constraints or even cannot meet the time window constraints, when the time-varying speeds are taken into account.

@&#CONCLUSIONS@&#

In this paper, a column generation based tabu search algorithm is proposed to solve a vehicle routing problem where there are time-varying speeds and the objective is to minimize fuel emissions. The main findings can be summarized as follows:

                        
                           •
                           The proposed algorithm can produce sets of routes for an urban distribution problem with a reduction in GHG emissions of about 3% compared with an approach where the objective is to minimize total time.

Within NHA, the path selection process plays a more significant role in reducing fuel emissions, when compared with the speed adjustment process. When the speeds are allowed to be as fast as the traffic allows up to a maximum speed, the best fuel emission solution is only slightly worse than the one obtained using NHA, where the speeds are decision variables.

By allowing a long waiting time at customer nodes, vehicles can avoid being caught in congestion, and the fuel emissions can be reduced. However, the costs of such waiting, such as drivers’ salaries, have to be considered. An alternative way to attempt to avoid congestion is to depart later to avoid the morning peak period, but this may not significantly reduce the fuel emissions.

Minimizing distance can be an effective way to obtain a good sequence of customers. DBA, which determines the customer sequences by minimizing distance, has a good performance on instances without time windows, but there is a risk that it could fail to find a feasible solution, when it is applied with time-varying speeds. In this case, some simple repair strategy could be used to obtain a good feasible solution.

@&#ACKNOWLEDGMENT@&#

The first author was sponsored by the LANCS Initiative (EPSRC); Grant number: EP/F033613/1.

The demands (cages), service times (minutes), and time windows (hours) of the 60 customers as well as one depot are shown in the following table.

                           
                              
                                 
                                 
                                 
                                 
                                 
                                 
                                    
                                       Time windows
                                    
                                    
                                       Nodes
                                       Demands
                                       Service times
                                       Earliest
                                       Latest
                                    
                                 
                                 
                                    
                                       
                                       
                                       
                                       7
                                       17
                                    
                                    
                                       1
                                       8
                                       16
                                       11.6
                                       12.6
                                    
                                    
                                       2
                                       7
                                       14
                                       7.1
                                       11.2
                                    
                                    
                                       3
                                       6
                                       12
                                       10.8
                                       15.1
                                    
                                    
                                       4
                                       8
                                       16
                                       8.5
                                       10.2
                                    
                                    
                                       5
                                       7
                                       14
                                       12.1
                                       14.9
                                    
                                    
                                       6
                                       6
                                       12
                                       9.6
                                       12.5
                                    
                                    
                                       7
                                       6
                                       12
                                       14
                                       17
                                    
                                    
                                       8
                                       4
                                       8
                                       9.9
                                       13.6
                                    
                                    
                                       9
                                       7
                                       14
                                       14
                                       16.7
                                    
                                    
                                       10
                                       6
                                       12
                                       7.3
                                       8.5
                                    
                                    
                                       11
                                       6
                                       12
                                       8.6
                                       9.8
                                    
                                    
                                       12
                                       4
                                       8
                                       9.2
                                       13.8
                                    
                                    
                                       13
                                       8
                                       16
                                       11.9
                                       15.3
                                    
                                    
                                       14
                                       6
                                       12
                                       9.6
                                       11.1
                                    
                                    
                                       15
                                       5
                                       10
                                       9.2
                                       11.1
                                    
                                    
                                       16
                                       4
                                       8
                                       12.5
                                       14.5
                                    
                                    
                                       17
                                       5
                                       10
                                       9.1
                                       12.3
                                    
                                    
                                       18
                                       5
                                       10
                                       13.8
                                       16.5
                                    
                                    
                                       19
                                       4
                                       8
                                       13.4
                                       16.6
                                    
                                    
                                       20
                                       6
                                       12
                                       13.4
                                       14.9
                                    
                                    
                                       21
                                       5
                                       10
                                       13.1
                                       16.9
                                    
                                    
                                       22
                                       5
                                       10
                                       8
                                       10
                                    
                                    
                                       23
                                       6
                                       12
                                       7.4
                                       10.7
                                    
                                    
                                       24
                                       7
                                       14
                                       8.4
                                       10.8
                                    
                                    
                                       25
                                       4
                                       8
                                       11.3
                                       12.9
                                    
                                    
                                       26
                                       8
                                       16
                                       14
                                       17
                                    
                                    
                                       27
                                       6
                                       12
                                       7.1
                                       11.3
                                    
                                    
                                       28
                                       7
                                       14
                                       11.8
                                       13.4
                                    
                                    
                                       29
                                       6
                                       12
                                       9.3
                                       11.2
                                    
                                    
                                       30
                                       6
                                       12
                                       10.4
                                       12
                                    
                                    
                                       31
                                       6
                                       12
                                       8.4
                                       11.2
                                    
                                    
                                       32
                                       5
                                       10
                                       12.5
                                       16.7
                                    
                                    
                                       33
                                       8
                                       16
                                       9.8
                                       11.1
                                    
                                    
                                       34
                                       5
                                       10
                                       8.4
                                       13.3
                                    
                                    
                                       35
                                       4
                                       8
                                       13.8
                                       17
                                    
                                    
                                       36
                                       5
                                       10
                                       10.4
                                       13.8
                                    
                                    
                                       37
                                       7
                                       14
                                       7.8
                                       10.2
                                    
                                    
                                       38
                                       7
                                       14
                                       8
                                       10
                                    
                                    
                                       39
                                       4
                                       8
                                       9.8
                                       10.9
                                    
                                    
                                       40
                                       6
                                       12
                                       12.2
                                       14
                                    
                                    
                                       41
                                       7
                                       14
                                       11.2
                                       13.2
                                    
                                    
                                       42
                                       6
                                       12
                                       9.5
                                       13.1
                                    
                                    
                                       43
                                       6
                                       12
                                       11.4
                                       13.7
                                    
                                    
                                       44
                                       7
                                       14
                                       13.8
                                       16.5
                                    
                                    
                                       45
                                       7
                                       14
                                       10.5
                                       15.2
                                    
                                    
                                       46
                                       4
                                       8
                                       10.7
                                       15.7
                                    
                                    
                                       47
                                       7
                                       14
                                       7.2
                                       11
                                    
                                    
                                       48
                                       5
                                       10
                                       8.6
                                       11.1
                                    
                                    
                                       49
                                       8
                                       16
                                       12.3
                                       15.8
                                    
                                    
                                       50
                                       4
                                       8
                                       10.5
                                       13.2
                                    
                                    
                                       51
                                       6
                                       12
                                       12.9
                                       15.7
                                    
                                    
                                       52
                                       6
                                       12
                                       13.5
                                       16.5
                                    
                                    
                                       53
                                       4
                                       8
                                       8
                                       11.2
                                    
                                    
                                       54
                                       5
                                       10
                                       13.6
                                       17
                                    
                                    
                                       55
                                       5
                                       10
                                       9.4
                                       11.6
                                    
                                    
                                       56
                                       8
                                       16
                                       13.9
                                       16.2
                                    
                                    
                                       57
                                       6
                                       12
                                       9.8
                                       12.9
                                    
                                    
                                       58
                                       5
                                       10
                                       13.3
                                       15.3
                                    
                                    
                                       59
                                       6
                                       12
                                       8.7
                                       10
                                    
                                    
                                       60
                                       8
                                       16
                                       7.3
                                       12
                                    
                                 
                              
                           
                        
                     

For the five customer sets, A contains customer 1–25; B contains customer 36–60; C contains customer 11–35; D contains customer 1,2,13,18,21,24,25,30,31,34,35,38,43,44,48,51–60; and E contains customer 2,6,7,13–16,18,19,23,27–30,35,38,41,42,47,48,50,51,54–56.

The results of the instances A_0, B_0, C_0, D_0 and E_0 are shown as follows. The starting time is 7 am, and the maximum waiting time is 5 minutes.

                           
                              
                                 
                                 
                                 
                                 
                                 
                                    
                                       Instance name

                                       A_0
                                       B_0
                                       C_0
                                    
                                 
                                 
                                    
                                       Routes
                                       0-4-0
                                       0-3-13-2-1-0
                                       0-2-7-1-17-0
                                    
                                    
                                       
                                       0-8-12-17-11-15-0
                                       0-9-8-7-4-0
                                       0-8-24-20-25-0
                                    
                                    
                                       
                                       0-21-6-5-20-0
                                       0-16-5-19-12-0
                                       0-9-6-5-22-4-0
                                    
                                    
                                       
                                       0-2-1-7-0
                                       0-17-21-14-0
                                       0-11-19-18-10-0
                                    
                                    
                                       
                                       0-18-25-24-13-0
                                       0-18-24-25-20-0
                                       0-13-21-12-15-0
                                    
                                    
                                       
                                       0-9-22-23-3-0
                                       0-22-23-0
                                       0-14-23-3-0
                                    
                                    
                                       
                                       0-19-16-10-14-0
                                       0-6-10-11-15-0
                                       0-16-0
                                    
                                    
                                       Total CO2e
                                       329.5 kilogram

                                       379.7 kilogram

                                       344.4 kilogram

                                    
                                    
                                       Total distance

                                       231.8 kilometre

                                       244.2 kilometre

                                       240.8 kilometre

                                    
                                    
                                       Total time

                                       15.1 hour

                                       16.7 hour

                                       15.5 hour

                                    
                                    
                                       Total waiting time

                                       1.0 hour

                                       0.4 hour

                                       0.7 hour

                                    
                                    
                                       Running time

                                       19 hour 58 minutes 04 seconds

                                       22 hour 35 minutes 49 seconds

                                       21 hour 55 minutes 01 seconds

                                    
                                 
                              
                           
                        
                        
                           
                              
                                 
                                 
                                 
                                 
                                    
                                       Instance name

                                       D_0
                                       E_0
                                    
                                 
                                 
                                    
                                       Routes
                                       0-5-4-0
                                       0-13-9-12-2-0
                                    
                                    
                                       
                                       0-3-6-12-0
                                       0-19-23-14-15-0
                                    
                                    
                                       
                                       0-15-7-1-2-0
                                       0-20-3-18-1-0
                                    
                                    
                                       
                                       0-11-8-17-22-0
                                       0-7-11-6-5-0
                                    
                                    
                                       
                                       0-10-16-21-23-0
                                       0-8-17-10-0
                                    
                                    
                                       
                                       0-19-14-9-13-0
                                       0-21-4-16-0
                                    
                                    
                                       
                                       0-18-24-25-20-0
                                       0-25-24-22-0
                                    
                                    
                                       Total CO2e
                                       330.0 kilogram

                                       359.7 kilogram

                                    
                                    
                                       Total distance

                                       213.9 kilometre

                                       241.7 kilometre

                                    
                                    
                                       Total time

                                       15.8 hour

                                       16.8 hour

                                    
                                    
                                       Total waiting time

                                       0.6 hour

                                       1.1 hour

                                    
                                    
                                       Running time

                                       20 hour 46 minutes 33 seconds

                                       21 hour 17 minutes 48 seconds

                                    
                                 
                              
                           
                        
                     

The results of the instances A_1, B_1, C_1, D_1 and E_1 are shown as follows. The starting time is 7 am, and the maximum waiting time is 4 hours.

                           
                              
                                 
                                 
                                 
                                 
                                 
                                    
                                       Instance name

                                       A_1
                                       B_1
                                       C_1
                                    
                                 
                                 
                                    
                                       Routes
                                       0-4-0
                                       0-3-13-2-1-0
                                       0-4-5-6-9-0
                                    
                                    
                                       
                                       0-10-15-16-19-21-0
                                       0-4-7-8-9-0
                                       0-21-13-12-15-0
                                    
                                    
                                       
                                       0-6-5-20-18-0
                                       0-12-5-14-0
                                       0-17-1-7-2-0
                                    
                                    
                                       
                                       0-2-1-3-0
                                       0-15-17-16-21-0
                                       0-19-11-3-0
                                    
                                    
                                       
                                       0-11-17-12-8-25-0
                                       0-18-24-25-20-0
                                       0-18-10-16-0
                                    
                                    
                                       
                                       0-22-23-7-9-0
                                       0-22-23-0
                                       0-14-23-22-0
                                    
                                    
                                       
                                       0-14-24-13-0
                                       0-6-10-11-19-0
                                       0-24-20-25-8-0
                                    
                                    
                                       Total CO2e
                                       342.5 kilogram

                                       375.4 kilogram

                                       354.3 kilogram

                                    
                                    
                                       Total distance

                                       242.3 kilometre

                                       243.9 kilometre

                                       248.5 kilometre

                                    
                                    
                                       Total time

                                       52.3 hour

                                       50.9 hour

                                       49.4 hour

                                    
                                    
                                       Total waiting time

                                       37.9 hour

                                       34.7 hour

                                       35.1 hour

                                    
                                    
                                       Running time

                                       24 hour12 minutes 05 seconds

                                       28 hour 46 minutes 21 seconds

                                       25 hour 41 minutes 21 seconds

                                    
                                 
                              
                           
                        
                        
                           
                              
                                 
                                 
                                 
                                 
                                    
                                       Instance name

                                       D_1
                                       E_1
                                    
                                 
                                 
                                    
                                       Routes
                                       0-5-4-0
                                       0-13-5-7-9-0
                                    
                                    
                                       
                                       0-9-13-14-19-0
                                       0-19-23-22-15-0
                                    
                                    
                                       
                                       0-15-2-1-7-0
                                       0-20-10-17-3-0
                                    
                                    
                                       
                                       0-12-6-3-0
                                       0-1-18-11-6-0
                                    
                                    
                                       
                                       0-22-23-21-11-0
                                       0-12-2-21-0
                                    
                                    
                                       
                                       0-8-10-16-17-0
                                       0-16-4-0
                                    
                                    
                                       
                                       0-18-24-25-20-0
                                       0-14-24-25-8-0
                                    
                                    
                                       Total CO2e
                                       333.3 kilogram

                                       360.0 kilogram

                                    
                                    
                                       Total distance

                                       215.5 kilometre

                                       245.5 kilometre

                                    
                                    
                                       Total time

                                       52.2 hour

                                       57.5 hour

                                    
                                    
                                       Total waiting time

                                       37.2 hour

                                       43.3 hour

                                    
                                    
                                       Running time

                                       24 hour 20 minutes 17 seconds

                                       24 hour 55 minutes 29 seconds

                                    
                                 
                              
                           
                        
                     

@&#REFERENCES@&#

