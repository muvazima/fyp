@&#MAIN-TITLE@&#Cooperative weighted-fair control strategy for spectrum self-coexistence in multi-cell WRAN systems

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We investigate the self-coexistence problem in a multi-cell WRAN system.


                        
                        
                           
                           We propose an adaptive traffic-aware exclusive channel allocation scheme.


                        
                        
                           
                           The proposed scheme is based on a cooperative max-min weighted fair mechanism.


                        
                        
                           
                           Compared to other schemes, results reveal that our scheme provides significant performance gain.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Multi-cell system

Traffic-load estimation

Spectrum management

IEEE 802.22 standard

WRAN system

@&#ABSTRACT@&#


               
               
                  The emerging IEEE 802.22-based Wireless Regional Area Network (WRAN) is the first wireless standard based on the Cognitive Radio (CR) technology. WRAN is designed to offer wireless access services in a large coverage area by allowing Secondary Users (SUs) to opportunistically exploit the under-utilized licensed portion of spectrum that is primarily allocated for TV services. To enable efficient WRAN communications, the operation of a WRAN system should address two types of coexistence problem: incumbent co-existence and self-coexistence. In this paper, we investigate the self-coexistence problem in a multi-cell WRAN system that adopts an exclusive spectrum sharing policy. Specifically, we present an adaptive channel allocation scheme based on a cooperative max–min weighted fair allocation strategy. The proposed scheme is based on a centralized sensing mechanism that identifies the available spectrum opportunities for the WRAN cells. Our scheme dynamically allocates the available spectrum (idle channels) to the WRAN cells based on their expected traffic loads such that the total number of simultaneously admitted SU transmissions in the WRAN system is maximized. The expected traffic load is accurately estimated using a sample mean estimator based on previously monitored traffic in each cell. Simulation results indicate that our scheme is quite robust to traffic estimation error. Compared to reference spectrum allocation schemes, simulation results indicate that the proposed scheme effectively exploits the available spectrum opportunities by increasing the total number of served SU transmissions, which consequently results in a significant enhancement in the overall WRAN system performance.
               
            

@&#INTRODUCTION@&#

Cognitive Radio (CR) technology has been considered a promising means for addressing the spectrum scarcity problem through efficient dynamic spectrum access. CR provides unlicensed Secondary Users (SUs) with the ability to coexist with licensed Primary Radio (PR) users in a non-interfering mode. To enable efficient coexistence, SUs must perform spectrum sensing to determine idle channels, spectrum decision to select the best idle channel/channels, spectrum sharing to coordinate access among SUs, and spectrum mobility to vacate the occupied channel/channels when a licensed user appears. Specifically, SUs should have a cognitive capability to sense the RF environment, a self-organizing capability to analyze and learn from the sensed information and a reconfigurable capability to adapt their operating parameters according to the surrounding RF environment [1–5].

The IEEE 802.22 standard for a Wireless Regional Area Network (WRAN) system is considered as the first wireless standard based on CR technology. The WRAN system is a point to multi-point wireless access system that aims at providing wireless broadband access to users in rural and remote areas with an average coverage range of 33km for each WRAN cell [6,7]. The WRAN system opportunistically utilize idle VHF/UHF TV channels ranging from 54 to 862MHz to provide services with a performance that is comparable to that of DSL services. Specifically, the WRAN system consists of several WRAN cells. Each cell has its own Base Station (BS) that only serves the SU subscribers (called Customer-Premises Equipments (CPEs)) located within its coverage area. WRAN systems support two modes of operation: exclusive (each BS is assigned a fixed set of orthogonal and non-overlapped channels) and non-exclusive (channels can be utilized by more than one BS) spectrum sharing [7]. To enable efficient WRAN communications, the operation of a WRAN system should address two types of co-existence problem: incumbent co-existence (between licensed Digital TV (DTV) transmitters and SUs
                        1
                        The terms CPE and SU will be used interchangeably in this paper.
                     
                     
                        1
                     ) and self-coexistence (between SUs in overlapped WRAN cells). While several studies have effectively addressed the incumbent coexistence problem (with negligible impacts on PR users) based on spectrum sensing in a cooperative or non-cooperative mode [8,9], the self-coexistence problem is still a challenging issue in a multi-cell WRAN system.

@&#MOTIVATION@&#

Recently, several channel assignment schemes were proposed for CRNs (we refer the reader to [10] for a detailed survey). Most of these schemes aimed at assigning the most appropriate channel (channels) to the radio interfaces of a CR node based on a certain criteria while protecting the PR users (e.g., fairness, spectrum utilization, throughput, etc.). Hence the existing spectrum assignment schemes are suitable for intra-cell spectrum assignment within the same cell assuming that each cell is already allocated a given set of channels. However, in this paper, we aim at addressing the self-coexistence problem by allocating channels at the cell level rather than user-level.

Spectrum allocation algorithms that designed to deal with the self-coexistence problem in a WRAN system are often based on a Fixed Channel Allocation (FCA) strategy that statically allocates a fixed number of orthogonal channels to each cell during cell activation period [7,11–14]. The main drawback of such allocation mechanism is that it does not consider the prevailing SU and PR traffic conditions in the different cells. Employing such approach in a WRAN system may result in a significant increase in the number of blocked SU transmissions due to the unavailability of channels in heavily-loaded cells, while at the same time many channels may not be utilized in lightly-loaded cells. This results in inefficient spectrum utilization, which consequently increases the blocking probability for SU transmissions, leading to a significant reduction in system performance. Therefore, efficient spectrum allocation algorithms are needed to address the self-coexistence problem and improve system performance. These algorithms should provide efficient spectrum utilization.

In this work, we investigate the self-coexistence problem in a multi-cell WRAN system that adopts an exclusive spectrum sharing policy. Our objective is to provide an interference-free environment with minimum cooperation overhead. Specifically, we propose an adaptive traffic-aware exclusive channel allocation scheme (called TAECA) that overcomes the static nature of the FCA-based algorithms. TAECA dynamically allocates channels to the different WRAN cells according to their prevailing traffic load conditions such that the unnecessary blocking of SU transmissions in overlapped WRAN cells is minimized. This consequently maximizes the overall spectrum utilization. The proposed scheme is based on a cooperative max–min weighted fair mechanism for adaptively allocating idle channels to neighboring WRAN cells depending on their estimated traffic load conditions. To estimate the SU traffic load pattern in a given cell, the proposed scheme employs a statistical learning mechanism that adapts to network dynamics (i.e., user mobility and traffic conditions). Compared to reference schemes, simulation results reveal that TAECA effectively exploits the available spectrum, which provides a significant enhancement in WRAN system performance (in terms of the number of served SU transmissions) under different traffic load scenarios. By injecting artificial errors into the estimated traffic loads, our simulation results reveal that TAECA is quite robust against traffic estimation errors.

The rest of this paper is organized as follows. Related work is reviewed in Section 2. Section 3 introduces the main specification of a WRAN system and explains the self-coexistence problem. In Section 4, we present the proposed spectrum sharing algorithm. The performance of the proposed algorithm is evaluated in Section 5. Finally, Section 6 concludes the paper.

@&#RELATED WORK@&#

Several attempts were made to efficiently address the self-coexistence problem in WRAN systems (e.g., [11–21]). The authors in [11] proposed a Coexistence-Aware Spectrum Sharing (CASS) protocol to deal with WRANs. CASS supports two modes of operation: exclusive (each BS is assigned a fixed set of channels) and non-exclusive (channels can be used by more than one BS) spectrum sharing. CASS switches between the two modes based on the outcome of a channel evaluation procedure. In [12], the authors introduced a game theoretic based channel assignment algorithm to deal with the self coexistence problem in a WRAN system. The algorithm uses an interference-aware backoff window to control the maximum allowable interference in a WRAN system. The authors in [13] provided and implemented a solution to the self-coexistence problem based on dynamic management for channel occupation while protecting incumbent users. For the case where the number of WRAN cells is greater than the number of available channels, the authors in [14] proposed a multi-channel resource sharing algorithm that considers the overlapped area between WRAN cells when performing channel assignment such that the mutual interference is minimized. In [15], the authors proposed a Blocking Probability-Aware Channel Allocation (BPACA) that uses the blocking probability in each cell as a metric to redistribute the available channels without accounting for the actual traffic load conditions in the different WRAN cells. According to BPACA, the cells with higher blocking probabilities will be assigned more channels than the cells with lower blocking probabilities, irrespective of the actual traffic loads. This can result in fairness issues and reduce the overall network throughput. The self-coexistence problem is also studied in [16]. Specifically, the authors proposed three different algorithms: node-based, link-based, and node-link-based, where the later algorithm has the ability to present the best localization using star topology and maximal matching.

In [17], four different Dynamic Frequency Hopping (DFH) algorithms were proposed to address the WRAN self-coexistence problem (i.e., Fixed-Scheduling DFH (FDFH), Cooperative DFH (CDFH), Sectoral DFH (SDFH) and Fixed Scheduling Sectoral DFH (FSDFH) algorithms). These algorithms aimed at increasing the number of served users located in the overlapped area between neighboring WRAN cells by reducing the fraction of channels that are being used by neighboring WRAN cells. A Modified Minority Game (MMG) distributed approach was used in [18] to assign interference free channels to the competing overlapped WRAN cells. To achieve better spectrum utilization in dense cells, the authors in [19] proposed distributed algorithms for channel selection for WRAN systems. The proposed algorithms attempts to force the overlapped cells to operate on different channels as much as possible. In [20], a novel spectrum sharing algorithm was proposed for IEEE 802.22. This algorithm aims at minimizing the number of SUs who share the same set of channels. In [21], cooperate and non-cooperative channel allocation algorithms based on game theory were presented to tackle the self-coexistence problem based on SU signal-to-interference-and-noise ratio.

Most of the aforementioned algorithms were designed without accounting for the unbalanced traffic load distribution in the different WRAN cells. To the best of our knowledge, TAECA is the first adaptive spectrum allocation algorithm that aims at improving the WRAN system performance while achieving fairness. This can be accomplished by considering the prevailing traffic load and interference conditions in the different WRAN cells when allocating channels to them. Specifically, the fairness issue has been addressed in this paper by introducing a weighted max–min fairness spectrum allocation algorithm. The proposed algorithm dynamically allocates the available spectrum (idle channels) to the WRAN cells based on their prevailing traffic loads such that the total number of simultaneous admitted SU transmissions in the WRAN system is maximized.

In this section, we provide a brief overview of the IEEE 802.22 WRAN standard. Then, we discuss the system model and explain the self-coexistence problem in a multi-cell WRAN system.

The IEEE 802.22 WRAN system is considered as the most promising approach for broadband wireless regional area networks. This WRAN system is designed to provide broadband access with performance similar to the ADSL technology to less populated rural areas. The WRAN system provides packet-based transmission capabilities that can support a variety of services (e.g., data transport, internet access, video/voice streaming, etc.). The typical range of this system is 33km for coverage area of population density of 1.25person/km2. The WRAN system consists of several cells, each with its own BS. In each cell, the CPEs are connected to its BS through a wireless link to opportunistically utilizes the under-utilized portions of spectrum allocated to VHF/UHF TV broadcast service, ranging from 54-to-862MHz (a point to multi-point network topology). The BSs and CPEs have cognitive radio capabilities to avoid interfering with licensed incumbents and other WRAN systems. According to IEEE 802.22, identifying idle channels (spectrum sensing) can be performed in a centralized or a distributed manner. In the centralized approach, centralized servers inform CPEs of the list of all idle TV channels. On the other hand, the distributed approach is performed through local channel sensing, where each CPE identifies its available channel list. A combination of the two approaches can also be used [22]. For maximal protection of PRs, the FCC has set strict detectability requirements for the in-band sensing in IEEE 802.22, where PR users should be detected within 2s of their appearance with 
                           
                              <
                              0.1
                           
                         false detection probability.
                           2
                           According to the IEEE 802.22 standard, a PR user can tolerate up to 2s interruption by a SU.
                        
                        
                           2
                         According to the FCC, spectrum sensing combined with accessing a centralized database can ensure such strict requirements. This combined method is particularly shown to result in a very high probability of detection with reasonably small sensing error [23,24]. With such sensing method, the WRAN BSs/SUs are able to vacate any PR channel within the 2s interval, and hence will cause negligible impacts on PR performance.

The physical layer in IEEE 802.22 has a reconfigurable capability to adapt the transmission parameters of the BSs and CPEs (e.g., operating frequency, channel bandwidth, modulation order, coding scheme, etc.) according to the surrounding RF environment. The BS of each cell is responsible of performing such adaptive processes. Orthogonal Frequency Division Multiple Access (OFDMA) is the modulation technique that is used for uplink and downlink transmissions. The transmission power of the BSs and CPEs can be as high as 4W (36dBm) with reception sensitivity as low as −97dBm [25].

We consider a WRAN system consisting of 
                           
                              |
                              K
                              |
                           
                         neighboring WRAN cells, where 
                           
                              K
                           
                         is the set of all cells. Each cell has its own base station (i.e., BS1,BS2,
                        
                           
                              …
                           
                        
                        ,BS
                           
                              |
                              K
                              |
                           
                        ). A given BS can directly communicate with the CPEs located within its cell and with other neighboring BSs in the different cells. This WRAN system coexists geographically with M different PR Networks (PRNs), each with its own frequency channel/channels. Fig. 1
                         shows a conceptual view of the network under consideration with 
                           
                              |
                              K
                              |
                              =
                              5
                           
                        . Note that neighboring WRAN cells may overlap in their operating vicinities. The percentage of overlap heavily depends on several uncontrollable factors including the conditions of propagation, path loss exponent, shadowing, multi- path fading, and topographic characteristics of the service areas of each cell. In such environment, there are two types of co-existence problem: incumbent co-existence (between licensed PR users and SUs) and self-coexistence (between SUs in overlapped WRAN cells). The self-coexistence problem is emerging from the fact that multiple WRANs may overlap in a common geographical area [17]. This overlapping needs to be efficiently managed in a cooperative fashion to overcome the effects of interference between SUs and to improve system performance.

For off-line spectrum allocation, FCA assumes a fixed network and a prior knowledge of the traffic load conditions in the different cells. During network operation, however, the number of active SUs and the number of available idle channels may vary with time in each cell, depending on PRN dynamics and SU activities. Because cells only have local knowledge of their traffic loads, it is difficult to achieve the optimal network performance. Nevertheless, we present an adaptive channel allocation algorithm based on a cooperative max–min weighted fair share allocation strategy. The objective of this algorithm is to dynamically allocate the available spectrum (idle channels) to the 
                        
                           |
                           K
                           |
                        
                      WRAN cells based on their prevailing traffic loads such that the total number of simultaneous admitted SU transmissions in the WRAN system is maximized (i.e., the proposed algorithm computes a feasible channel allocation 
                        
                           Ω
                           (
                           t
                           )
                           =
                           {
                           
                              
                                 Ω
                              
                              
                                 1
                              
                           
                           (
                           t
                           )
                           ,
                           …
                           ,
                           
                              
                                 Ω
                              
                              
                                 |
                                 K
                                 |
                              
                           
                           (
                           t
                           )
                           }
                        
                     , where 
                        
                           
                              
                                 Ω
                              
                              
                                 i
                              
                           
                           (
                           t
                           )
                        
                      denotes the number of channels allocated to cell i at time t). Our algorithm guarantees that no cell is assigned a spectrum share larger than its expected traffic demand. According to our algorithm, cells with unsatisfied traffic demands are assigned resource shares (channels) in proportion to their expected traffic demands.

To enable an efficient spectrum utilization, the operation of a WRAN system should address two essential challenges: (1) determining the available spectrum opportunities, and (2) providing an efficient channel allocation strategy that allocate such opportunities to WRAN cells. While the first issue has been dealt with by the FCC through adopting a centralized sensing algorithm combined with accessing a central database of licensed services (internal or external) [23], the second issue is still a challenging problem. Thus, our algorithm addresses the second issue in a distributed manner (our proposed mechanism runs on each BS in the system) given that the available spectrum opportunities for the WRAN cells at a given time t are obtained using a centralized sensing/data-base algorithm that complies with the IEEE 802.22 standards regarding the PR protection and the detectability requirement. Thus, our proposed spectrum allocation mechanism is a cooperative and distributed algorithm that is based on a centralized sensing mechanism.

According to the proposed algorithm, time is divided into 
                           
                              
                                 
                                    T
                                 
                                 
                                    win
                                 
                              
                           
                        -second intervals. Each interval includes a beacon interval (BI) and a data transmission interval [17], see Fig. 2
                        . This requires a synchronization mechanism that allows the adjacent BSs to effectively exchange beacon messages. In [17], such a mechanism was proposed based on the fact that time synchronization is needed only between adjacent BSs, where their number is limited. The work in [17] demonstrated that synchronization between adjacent BSs in WRAN systems can be easy realized as all neighboring BSs are within the radio range of each other and their number is finite and limited. For our purposes, such mechanism can be used. During the BI, each base station BSi sends beacon messages to all adjacent BSs over all idle channels. This multi-channel transmission capability can be realized using Frequency Division Multiplexing (FDM), or Discontinuous Orthogonal FDM (D-OFDM)
                           3
                           IEEE 802.22 WRAN systems adopt OFDM as their physical layer technique [26].
                        
                        
                           3
                         
                        [2,27]. Each beacon message of BSi contains the following fields: (1) the set of presently available channels at time t, denoted by 
                           
                              C
                              (
                              t
                              )
                           
                        , (2) the expected number of SU transmission requests in cell i during the next observation window 
                           
                              [
                              t
                              ,
                              t
                              +
                              
                                 
                                    T
                                 
                                 
                                    win
                                 
                              
                              ]
                           
                        , denoted by 
                           
                              
                                 
                                    
                                       
                                          N
                                       
                                       
                                          ∼
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                           
                        , and (3) the time schedule of transmitting beacons by neighboring BSs (i.e., the order of beacon transmissions during the BI). From the exchanged beacons, each BS in the WRAN system maintains an 
                           
                              |
                              K
                              |
                           
                        -entry expected traffic load table. This table is periodically updated every observation-window time 
                           
                              
                                 
                                    T
                                 
                                 
                                    win
                                 
                              
                           
                        . At time t, the ith entry in this table contains the expected (estimated) number of SU transmission requests in cell i during the next observation window (
                           
                              
                                 
                                    
                                       
                                          N
                                       
                                       
                                          ∼
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                           
                        ).
                           Remark
                           Each BS station in the WRAN system is associated with a data region and a beacon region. According to the IEEE 802.22 standard, the data region of each BS has a typical radius of 
                                 
                                    
                                       
                                          r
                                       
                                       
                                          data
                                       
                                    
                                    =
                                    33
                                 
                              
                              km. The beacon region of any BS is defined as the region in which the BS’s beacons can be correctly decoded by all neighboring BSs whose data regions overlap with that of this BS. Let the radius of this region be 
                                 
                                    
                                       
                                          r
                                       
                                       
                                          bcn
                                       
                                    
                                 
                              . Our proposed algorithm requires 
                                 
                                    
                                       
                                          r
                                       
                                       
                                          bcn
                                       
                                    
                                    >
                                    2
                                    
                                       
                                          r
                                       
                                       
                                          data
                                       
                                    
                                 
                               to ensure correct reception of the beacons by other BSs in the overlapped cells. Note that beacon messages require a relatively low data rate, and consequently a low SINR threshold. Thus, the required constraint on 
                                 
                                    
                                       
                                          r
                                       
                                       
                                          bcn
                                       
                                    
                                 
                               (i.e., 
                                 
                                    
                                       
                                          r
                                       
                                       
                                          bcn
                                       
                                    
                                    >
                                    2
                                    
                                       
                                          r
                                       
                                       
                                          data
                                       
                                    
                                 
                              ) can be easily enforced through power control.

Initially, the TAECA evenly allocates the available (idle) channels to the 
                           
                              |
                              K
                              |
                           
                         WRAN cells. Then, at any given time t, every BSi, where 
                           
                              i
                              =
                              1
                              ,
                              …
                              ,
                              |
                              K
                              |
                           
                        , maintains the number of SU transmission requests in cell i during the observation window 
                           
                              [
                              t
                              -
                              
                                 
                                    T
                                 
                                 
                                    win
                                 
                              
                              ;
                              t
                              ]
                           
                        , denoted by 
                           
                              
                                 
                                    N
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                           
                        . Using the measured 
                           
                              
                                 
                                    N
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                           
                         and the information contained in the traffic load table computed at time 
                           
                              t
                              -
                              
                                 
                                    T
                                 
                                 
                                    win
                                 
                              
                           
                        , each cell i estimates the expected weighted average traffic load 
                           
                              
                                 
                                    
                                       
                                          N
                                       
                                       
                                          ∼
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                           
                        . Estimating the activity behavior of SUs (i.e., computing 
                           
                              
                                 
                                    
                                       
                                          N
                                       
                                       
                                          ∼
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                           
                        ) was investigate in [28]. Specifically, in [28], a SU can accurately estimate 
                           
                              
                                 
                                    
                                       
                                          N
                                       
                                       
                                          ∼
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                           
                         using the sample mean estimator based on the sequence of collected values of the number of SU requests in the previous observation windows. For our purposes, we assume that a similar mechanism for estimating 
                           
                              
                                 
                                    
                                       
                                          N
                                       
                                       
                                          ∼
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                           
                         is in place. Formally, 
                           
                              
                                 
                                    
                                       
                                          N
                                       
                                       
                                          ∼
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                           
                         can be estimated as follows [28]:
                           
                              (1)
                              
                                 
                                    
                                       
                                          
                                             N
                                          
                                          
                                             ∼
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 t
                                 )
                                 =
                                 α
                                 
                                    
                                       N
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 t
                                 )
                                 +
                                 (
                                 1
                                 -
                                 α
                                 )
                                 
                                    
                                       
                                          
                                             N
                                          
                                          
                                             ∼
                                          
                                       
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 t
                                 -
                                 
                                    
                                       T
                                    
                                    
                                       win
                                    
                                 
                                 )
                                 ,
                                 
                                 i
                                 =
                                 1
                                 ,
                                 2
                                 ,
                                 …
                                 ,
                                 |
                                 K
                                 |
                              
                           
                        where α is a forgetting factor, 
                           
                              0
                              <
                              α
                              ⩽
                              1
                           
                        . In Section 5, we study the robustness of our proposed algorithm under inaccurate SU traffic load estimation (i.e., estimation error in 
                           
                              
                                 
                                    
                                       
                                          N
                                       
                                       
                                          ∼
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                           
                        ).

Based on the expected traffic loads 
                           
                              
                                 
                                    
                                       
                                          N
                                       
                                       
                                          ∼
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                              ,
                              
                              ∀
                              i
                              ∈
                              K
                           
                        , our algorithm allocates the total number of presently available channels at time t (
                           
                              |
                              C
                              (
                              t
                              )
                              |
                           
                        ) to the 
                           
                              |
                              K
                              |
                           
                         WRAN cells. The new channel allocation will be used during the next observation window time. Formally, the proposed algorithm proceeds as follows:
                           
                              •
                              
                                 Step 1. Normalize cell demands with respect to the smallest demand: Given the expected traffic loads in all cells 
                                    
                                       
                                          
                                             
                                                
                                                   N
                                                
                                                
                                                   ∼
                                                
                                             
                                          
                                          
                                             i
                                          
                                       
                                       (
                                       t
                                       )
                                       ,
                                       
                                       i
                                       =
                                       1
                                       ,
                                       2
                                       ,
                                       …
                                       ,
                                       |
                                       K
                                       |
                                    
                                 , the algorithm identifies the smallest traffic load 
                                    
                                       
                                          
                                             N
                                          
                                          
                                             min
                                          
                                       
                                       =
                                       min
                                       {
                                       
                                          
                                             
                                                
                                                   N
                                                
                                                
                                                   ∼
                                                
                                             
                                          
                                          
                                             i
                                          
                                       
                                       (
                                       t
                                       )
                                       ,
                                       
                                       ∀
                                       i
                                       ∈
                                       K
                                       }
                                    
                                 . Then, the algorithm computes the normalized average traffic loads 
                                    
                                       
                                          
                                             w
                                          
                                          
                                             i
                                          
                                       
                                       =
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  N
                                                               
                                                               
                                                                  ∼
                                                               
                                                            
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      (
                                                      t
                                                      )
                                                   
                                                   
                                                      
                                                         
                                                            N
                                                         
                                                         
                                                            min
                                                         
                                                      
                                                   
                                                
                                                :
                                                
                                                i
                                                =
                                                1
                                                ,
                                                2
                                                ,
                                                …
                                                ,
                                                |
                                                K
                                                |
                                             
                                          
                                       
                                    
                                  such that the smallest traffic load is one (we show later in this section that the choice of the normalization factor does not affect the channel allocation outcome). Let 
                                    
                                       S
                                       =
                                       
                                          
                                             ∑
                                          
                                          
                                             k
                                             =
                                             1
                                          
                                          
                                             |
                                             K
                                             |
                                          
                                       
                                       
                                          
                                             w
                                          
                                          
                                             k
                                          
                                       
                                    
                                  denote the overall normalized traffic load in the WRAN system.


                                 Step 2. Divide the available resource into 
                                 S 
                                 shares: The algorithm divides the total number of presently available channels at time t (
                                    
                                       |
                                       C
                                       (
                                       t
                                       )
                                       |
                                    
                                 ) into S resource shares, each of a share value 
                                    
                                       v
                                       =
                                       
                                          
                                             |
                                             C
                                             (
                                             t
                                             )
                                             |
                                          
                                          
                                             S
                                          
                                       
                                       =
                                       
                                          
                                             |
                                             C
                                             (
                                             t
                                             )
                                             |
                                          
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   k
                                                   =
                                                   1
                                                
                                                
                                                   |
                                                   K
                                                   |
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         
                                                            
                                                               N
                                                            
                                                            
                                                               ∼
                                                            
                                                         
                                                      
                                                      
                                                         k
                                                      
                                                   
                                                   (
                                                   t
                                                   )
                                                
                                                
                                                   
                                                      
                                                         N
                                                      
                                                      
                                                         min
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                  channels.


                                 Step 3. Allocate resources to cells: For each cell i, the algorithm computes the associated spectrum resource share 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             i
                                          
                                       
                                    
                                  (in terms of the number of allocated channels) based on its normalized expected weighted average traffic load 
                                    
                                       
                                          
                                             w
                                          
                                          
                                             i
                                          
                                       
                                    
                                  as follows:
                                    
                                       (2)
                                       
                                          
                                             
                                                S
                                             
                                             
                                                i
                                             
                                          
                                          =
                                          
                                             
                                                vw
                                             
                                             
                                                i
                                             
                                          
                                          =
                                          ⌊
                                          
                                             
                                                S
                                             
                                             
                                                i
                                             
                                          
                                          ⌋
                                          +
                                          {
                                          
                                             
                                                S
                                             
                                             
                                                i
                                             
                                          
                                          }
                                          =
                                          
                                             
                                                |
                                                C
                                                (
                                                t
                                                )
                                                |
                                             
                                             
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      k
                                                      =
                                                      1
                                                   
                                                   
                                                      |
                                                      K
                                                      |
                                                   
                                                
                                                
                                                   
                                                      
                                                         
                                                            N
                                                         
                                                         
                                                            ∼
                                                         
                                                      
                                                   
                                                   
                                                      k
                                                   
                                                
                                                (
                                                t
                                                )
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      N
                                                   
                                                   
                                                      ∼
                                                   
                                                
                                             
                                             
                                                i
                                             
                                          
                                          (
                                          t
                                          )
                                          ,
                                          
                                          i
                                          =
                                          1
                                          ,
                                          2
                                          ,
                                          …
                                          ,
                                          |
                                          K
                                          |
                                       
                                    
                                 where 
                                    
                                       ⌊
                                       
                                          
                                             S
                                          
                                          
                                             i
                                          
                                       
                                       ⌋
                                       =
                                       ⌊
                                       
                                          
                                             vw
                                          
                                          
                                             i
                                          
                                       
                                       ⌋
                                    
                                  and 
                                    
                                       {
                                       
                                          
                                             S
                                          
                                          
                                             i
                                          
                                       
                                       }
                                    
                                  are the integer and fractional parts of 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             i
                                          
                                       
                                    
                                 , respectively. Note that for all 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                       0
                                       ⩽
                                       {
                                       
                                          
                                             S
                                          
                                          
                                             i
                                          
                                       
                                       }
                                       <
                                       1
                                    
                                 . It can be revealed from (2) that our algorithm allocates channels to each cell i in proportional to its expected traffic demand (
                                    
                                       
                                          
                                             
                                                
                                                   N
                                                
                                                
                                                   ∼
                                                
                                             
                                          
                                          
                                             i
                                          
                                       
                                       (
                                       t
                                       )
                                    
                                 ). We also note here that 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             i
                                          
                                       
                                    
                                  does not depend on the normalization factor 
                                    
                                       
                                          
                                             N
                                          
                                          
                                             min
                                          
                                       
                                    
                                 . Thus, the number of assigned channels will not be affected by changing the normalization factor (i.e., the performance of the proposed algorithm will not be affected when normalizing with respect to the average or the highest demand). After computing the term 
                                    
                                       
                                          
                                             S
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                       ∀
                                       i
                                    
                                 , the algorithm allocates 
                                    
                                       ⌊
                                       
                                          
                                             S
                                          
                                          
                                             i
                                          
                                       
                                       ⌋
                                    
                                  channels to cell i, where 
                                    
                                       i
                                       =
                                       1
                                       ,
                                       2
                                       ,
                                       …
                                       ,
                                       |
                                       K
                                       |
                                    
                                 . Then, the algorithm computes the total number of remaining unassigned channels (
                                    
                                       
                                          
                                             C
                                          
                                          
                                             rem
                                          
                                       
                                    
                                 ) as follows:
                                    
                                       (3)
                                       
                                          
                                             
                                                C
                                             
                                             
                                                rem
                                             
                                          
                                          =
                                          |
                                          C
                                          (
                                          t
                                          )
                                          |
                                          -
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   |
                                                   K
                                                   |
                                                
                                             
                                          
                                          ⌊
                                          
                                             
                                                S
                                             
                                             
                                                i
                                             
                                          
                                          ⌋
                                       
                                    
                                 where 
                                    
                                       
                                          
                                             C
                                          
                                          
                                             rem
                                          
                                       
                                    
                                  can only take one of the following non-zero values: 
                                    
                                       {
                                       1
                                       ,
                                       2
                                       ,
                                       …
                                       ,
                                       |
                                       K
                                       |
                                       -
                                       1
                                       }
                                    
                                 . If 
                                    
                                       
                                          
                                             C
                                          
                                          
                                             rem
                                          
                                       
                                       >
                                       0
                                    
                                 , the algorithm assigns the 
                                    
                                       
                                          
                                             C
                                          
                                          
                                             rem
                                          
                                       
                                    
                                  additional unassigned channel/channels to the 
                                    
                                       
                                          
                                             C
                                          
                                          
                                             rem
                                          
                                       
                                    
                                  cell/cells with the highest 
                                    
                                       {
                                       
                                          
                                             S
                                          
                                          
                                             i
                                          
                                       
                                       }
                                    
                                 .


                        Algorithm 1 summarizes the channel allocation process.
                           4
                           The subscript t is dropped in the pseudo-code to simplify the notation.
                        
                        
                           4
                         The above algorithm is repeated every 
                           
                              
                                 
                                    T
                                 
                                 
                                    win
                                 
                              
                           
                         time period. When repeating the above process, 
                           
                              C
                              (
                              t
                              )
                           
                         and 
                           
                              
                                 
                                    
                                       
                                          N
                                       
                                       
                                          ∼
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                              ,
                              
                              ∀
                              i
                              ∈
                              K
                           
                         are updated according to the prevailing PR/SU traffic conditions.
                           Algorithm 1
                           Spectrum allocation at observation time t 
                              
                                 
                                    
                                       
                                       
                                          
                                             
                                                Input: 
                                                
                                                   
                                                      
                                                         
                                                            
                                                               
                                                                  N
                                                               
                                                               
                                                                  ∼
                                                               
                                                            
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      ,
                                                      
                                                      i
                                                      =
                                                      1
                                                      ,
                                                      2
                                                      ,
                                                      …
                                                      ,
                                                      |
                                                      K
                                                      |
                                                      ,
                                                      C
                                                   
                                                
                                             
                                          
                                          
                                             
                                                Output: A feasible spectrum allocation to the 
                                                   
                                                      |
                                                      K
                                                      |
                                                   
                                                 cells
                                          
                                          
                                             Let 
                                                   
                                                      Ω
                                                      =
                                                      {
                                                      
                                                         
                                                            Ω
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                      ,
                                                      …
                                                      ,
                                                      
                                                         
                                                            Ω
                                                         
                                                         
                                                            |
                                                            K
                                                            |
                                                         
                                                      
                                                      }
                                                   
                                                 be the feasible channel allocation
                                          
                                          
                                             Let 
                                                   
                                                      
                                                         
                                                            Ω
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                 be the number of channels assigned to cell i
                                             
                                          
                                          
                                             Let 
                                                   
                                                      
                                                         
                                                            Ω
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      =
                                                      0
                                                      ,
                                                      
                                                      ∀
                                                      i
                                                      ∈
                                                      K
                                                   
                                                
                                             
                                          
                                          
                                             Compute 
                                                   
                                                      
                                                         
                                                            N
                                                         
                                                         
                                                            min
                                                         
                                                      
                                                      =
                                                      min
                                                      {
                                                      
                                                         
                                                            
                                                               
                                                                  N
                                                               
                                                               
                                                                  ∼
                                                               
                                                            
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      ,
                                                      
                                                      ∀
                                                      i
                                                      ∈
                                                      K
                                                      }
                                                   
                                                
                                             
                                          
                                          
                                             
                                                for all 
                                                
                                                   
                                                      i
                                                      ∈
                                                      K
                                                   
                                                
                                             
                                          
                                          
                                             
                                                Compute 
                                                   
                                                      
                                                         
                                                            w
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      =
                                                      
                                                         
                                                            
                                                               
                                                                  
                                                                     
                                                                        N
                                                                     
                                                                     
                                                                        ∼
                                                                     
                                                                  
                                                               
                                                               
                                                                  i
                                                               
                                                            
                                                         
                                                         
                                                            
                                                               
                                                                  N
                                                               
                                                               
                                                                  min
                                                               
                                                            
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                end-for
                                             
                                          
                                          
                                             Compute 
                                                   
                                                      S
                                                      =
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            i
                                                            =
                                                            1
                                                         
                                                         
                                                            |
                                                            K
                                                            |
                                                         
                                                      
                                                      
                                                         
                                                            w
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             Compute 
                                                   
                                                      v
                                                      =
                                                      
                                                         
                                                            |
                                                            C
                                                            |
                                                         
                                                         
                                                            S
                                                         
                                                      
                                                   
                                                
                                             
                                          
                                          
                                             
                                                for all 
                                                
                                                   
                                                      i
                                                      ∈
                                                      K
                                                   
                                                
                                             
                                          
                                          
                                             
                                                Compute 
                                                   
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      =
                                                      
                                                         
                                                            vw
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      =
                                                      ⌊
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      ⌋
                                                      +
                                                      {
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      }
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                
                                                   
                                                      
                                                         
                                                            Ω
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      =
                                                      ⌊
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      ⌋
                                                   
                                                
                                             
                                          
                                          
                                             
                                                end-for
                                             
                                          
                                          
                                             Compute 
                                                   
                                                      
                                                         
                                                            C
                                                         
                                                         
                                                            rem
                                                         
                                                      
                                                      =
                                                      |
                                                      C
                                                      |
                                                      -
                                                      
                                                         
                                                            ∑
                                                         
                                                         
                                                            i
                                                            =
                                                            1
                                                         
                                                         
                                                            |
                                                            K
                                                            |
                                                         
                                                      
                                                      ⌊
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      ⌋
                                                   
                                                
                                             
                                          
                                          
                                             
                                                if 
                                                
                                                   
                                                      
                                                         
                                                            C
                                                         
                                                         
                                                            rem
                                                         
                                                      
                                                      =
                                                      =
                                                      0
                                                   
                                                
                                             
                                          
                                          
                                             
                                                Return Ω
                                          
                                          
                                             
                                                else
                                             
                                          
                                          
                                             
                                                Let 
                                                   
                                                      U
                                                      =
                                                      {
                                                      {
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            1
                                                         
                                                      
                                                      }
                                                      ,
                                                      …
                                                      ,
                                                      {
                                                      
                                                         
                                                            S
                                                         
                                                         
                                                            |
                                                            K
                                                            |
                                                         
                                                      
                                                      }
                                                      }
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                while 
                                                
                                                   
                                                      
                                                         
                                                            C
                                                         
                                                         
                                                            rem
                                                         
                                                      
                                                      >
                                                      0
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                   
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            ∗
                                                         
                                                      
                                                      =
                                                      
                                                         
                                                            argmax
                                                         
                                                         
                                                            i
                                                         
                                                      
                                                      U
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                   
                                                      
                                                         
                                                            Ω
                                                         
                                                         
                                                            
                                                               
                                                                  i
                                                               
                                                               
                                                                  ∗
                                                               
                                                            
                                                         
                                                      
                                                      =
                                                      
                                                         
                                                            Ω
                                                         
                                                         
                                                            
                                                               
                                                                  i
                                                               
                                                               
                                                                  ∗
                                                               
                                                            
                                                         
                                                      
                                                      +
                                                      1
                                                   
                                                
                                             
                                          
                                          
                                             
                                                
                                                
                                                
                                                   
                                                      U
                                                      (
                                                      
                                                         
                                                            i
                                                         
                                                         
                                                            ∗
                                                         
                                                      
                                                      )
                                                   
                                                =0
                                          
                                          
                                             
                                                
                                                end-while
                                             
                                          
                                          
                                             
                                                Return Ω
                                          
                                          
                                             
                                                end-if
                                             
                                          
                                       
                                    
                                 
                              
                           

To illustrate the operation of the TAECA algorithm, we consider a WRAN system with five overlapped WRAN cells (i.e., 
                           
                              |
                              K
                              |
                              =
                              5
                           
                        ). At a given redistributing time t, assume that the number of presently available idle channels 
                           
                              |
                              C
                              (
                              t
                              )
                              |
                              =
                              30
                           
                         channels, and the expected traffic loads 
                           
                              {
                              
                                 
                                    
                                       
                                          N
                                       
                                       
                                          ∼
                                       
                                    
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                              :
                              
                              i
                              =
                              1
                              ,
                              …
                              ,
                              5
                           
                        } are given by 
                           
                              {
                              5
                              ,
                              20
                              ,
                              60
                              ,
                              15
                              ,
                              10
                              }
                           
                        . Given the above parameters, the normalized expected traffic loads 
                           
                              {
                              
                                 
                                    w
                                 
                                 
                                    i
                                 
                              
                              :
                              
                              i
                              =
                              1
                              ,
                              …
                              ,
                              5
                              }
                           
                        , the total number of shares S, and the share value v are given by 
                           
                              {
                              1
                              ,
                              4
                              ,
                              12
                              ,
                              3
                              ,
                              2
                              }
                              ,
                              
                              22
                           
                         and 1.364, respectively. According to our algorithm, the requested shares for the five cells are as follows: 
                           
                              
                                 
                                    S
                                 
                                 
                                    1
                                 
                              
                              =
                              ⌊
                              
                                 
                                    S
                                 
                                 
                                    1
                                 
                              
                              ⌋
                              +
                              {
                              
                                 
                                    S
                                 
                                 
                                    1
                                 
                              
                              }
                              =
                              1
                              +
                              0.364
                              ,
                              
                                 
                                    S
                                 
                                 
                                    2
                                 
                              
                              =
                              ⌊
                              
                                 
                                    S
                                 
                                 
                                    2
                                 
                              
                              ⌋
                              +
                              {
                              
                                 
                                    S
                                 
                                 
                                    2
                                 
                              
                              }
                              =
                              5
                              +
                              0.456
                              ,
                              
                                 
                                    S
                                 
                                 
                                    3
                                 
                              
                              =
                              ⌊
                              
                                 
                                    S
                                 
                                 
                                    3
                                 
                              
                              ⌋
                              +
                              {
                              
                                 
                                    S
                                 
                                 
                                    3
                                 
                              
                              }
                              =
                              16
                              +
                              0.368
                              ,
                              
                                 
                                    S
                                 
                                 
                                    4
                                 
                              
                              =
                              ⌊
                              
                                 
                                    S
                                 
                                 
                                    4
                                 
                              
                              ⌋
                              +
                              {
                              
                                 
                                    S
                                 
                                 
                                    4
                                 
                              
                              }
                              =
                              4
                              +
                              0.092
                           
                        , and 
                           
                              
                                 
                                    S
                                 
                                 
                                    5
                                 
                              
                              =
                              ⌊
                              
                                 
                                    S
                                 
                                 
                                    5
                                 
                              
                              ⌋
                              +
                              {
                              
                                 
                                    S
                                 
                                 
                                    5
                                 
                              
                              }
                              =
                              2
                              +
                              0.728
                           
                        . Note that number of remaining unassigned channels 
                           
                              
                                 
                                    C
                                 
                                 
                                    rem
                                 
                              
                           
                         is 2. Since, 
                           
                              {
                              
                                 
                                    S
                                 
                                 
                                    2
                                 
                              
                              }
                           
                         and 
                           
                              {
                              
                                 
                                    S
                                 
                                 
                                    5
                                 
                              
                              }
                           
                         are the largest fractional values, the additional 2 channels will be allocated to cells 2 and 5 (one channel for each cell). Formally, the final channel allocation based on the proposed algorithm is as follows:
                           
                              •
                              
                                 
                                    
                                       
                                          
                                             Ω
                                          
                                          
                                             1
                                          
                                       
                                       =
                                       1
                                    
                                  channel is allocated to cell 1.


                                 
                                    
                                       
                                          
                                             Ω
                                          
                                          
                                             2
                                          
                                       
                                       =
                                       6
                                    
                                  channels are allocated to cell 2.


                                 
                                    
                                       
                                          
                                             Ω
                                          
                                          
                                             3
                                          
                                       
                                       =
                                       16
                                    
                                  channels are allocated to cell 3.


                                 
                                    
                                       
                                          
                                             Ω
                                          
                                          
                                             4
                                          
                                       
                                       =
                                       4
                                    
                                  channels are allocated to cell 4.


                                 
                                    
                                       
                                          
                                             Ω
                                          
                                          
                                             5
                                          
                                       
                                       =
                                       3
                                    
                                  channels are allocated to cell 5.

@&#PERFORMANCE EVALUATION@&#

We evaluate the performance of our proposed algorithm via simulations. The proposed algorithm is compare with two reference algorithms: the FCA algorithm [17] and the traffic-aware algorithm in [15] (called BPACA). The BPACA scheme uses the blocking probability, which is a function of SU traffic load, in each cell as a channel assignment metric. It is worth mentioning that very few attempts have been made to allocate channels to the different cells in multi-cell WRAN systems based on the traffic distribution across the different cells. The most relevant work to this paper is BPACA, where the traffic load in each cell is indirectly used as a metric to redistribute the total number of available channels at a given time. The FCA algorithm evenly allocates the available channels at any given time t(
                        
                           |
                           M
                           (
                           t
                           )
                           |
                        
                     ) to the WRAN cells, which means that FCA adapts only to the PR traffic conditions. On the other hand, the other two algorithms dynamically allocate the available spectrum (which is varying over-time) according to both the prevailing CR traffic conditions and the varying PR activities.

Our network simulations are based on NS-3 programs. The NS-3 is a discrete-event network simulator used to simulate wired and wireless networks [29]. The developed simulation programs model a typical CRN environment with valid assumptions that comply with the IEEE 802.22 WRAN systems. Specifically, we followed the same approach used in CogNS [30] to integrate the CR capabilities in our developed NS-3 simulation programs. The main implemented components/capabilities in our NS-3 simulator are related to spectrum sensing to facilitate PR detection both in the physical and MAC layers, spectrum mobility for the hand off operations both in the physical and the MAC layers, spectrum sharing to ensure a fair spectrum usage between all the BSs and SUs, spectrum decision-making to support decision based on the current spectrum status, and spectrum database that will be used by the WRAN BSs to check PR channel availabilities. The major changes in the physical layer and MAC layer are related to the PRs’ activities to facilitate control information exchange between the SUs and the BSs. In our simulations, we repeated each experiment 10 times with different seed numbers and averaged the results (i.e., the simulation results are based on the average of ten independent simulation experiments, each lasts for 10,000s). The confidence intervals were sufficiently tight, and were not shown to prevent cluttering the plots.

We consider a WRAN system with five cells and M PR channels (see Fig. 1).


                        PR channel-availability model: We assume that the M PR channels have the same bandwidth. Without loss of generality, we also assume that the bandwidth of a PR channel is sufficient to serve one SU transmission. The channel availability of each PR channel is modeled as an ON/OFF process. The ON (OFF) state represent the case when the channel is busy (idle). We note here that the appropriateness of the 2-state ON/OFF PR activity model has been demonstrated in several previous works (e.g., this model was employed in [31–36]). In essence, the ON/OFF behavior is attributed to the bursty nature of many type of network traffic, including computer data, voice, and VBR video.
                           5
                           The ON/OFF model has been shown to provide a good match to voice over IP (VoIP) traffic over the Internet [35] and spectrum usage in wireless LANs [36].
                        
                        
                           5
                         The ON/OFF process is further specified by the distribution of its ON (busy) and OFF (idle) periods, which are both taken to be exponentially distributed. Let 
                           
                              
                                 
                                    T
                                 
                                 
                                    ON
                                 
                                 
                                    (
                                    i
                                    )
                                 
                              
                           
                         and 
                           
                              
                                 
                                    T
                                 
                                 
                                    OFF
                                 
                                 
                                    (
                                    i
                                    )
                                 
                              
                           
                         respectively represent the averages of ON and OFF periods for the ith PRN. Thus, the idle probability of channel i, denoted by 
                           
                              
                                 
                                    P
                                 
                                 
                                    I
                                 
                                 
                                    (
                                    i
                                    )
                                 
                              
                           
                        , is given by 
                           
                              
                                 
                                    P
                                 
                                 
                                    I
                                 
                                 
                                    (
                                    i
                                    )
                                 
                              
                              =
                              
                                 
                                    
                                       
                                          T
                                       
                                       
                                          OFF
                                       
                                       
                                          (
                                          i
                                          )
                                       
                                    
                                 
                                 
                                    
                                       
                                          T
                                       
                                       
                                          ON
                                       
                                       
                                          (
                                          i
                                          )
                                       
                                    
                                    +
                                    
                                       
                                          T
                                       
                                       
                                          OFF
                                       
                                       
                                          (
                                          i
                                          )
                                       
                                    
                                 
                              
                           
                        . We set 
                           
                              
                                 
                                    P
                                 
                                 
                                    I
                                 
                                 
                                    (
                                    i
                                    )
                                 
                              
                              =
                              
                                 
                                    P
                                 
                                 
                                    I
                                 
                              
                              ,
                              
                              ∀
                              i
                              ∈
                              {
                              1
                              ,
                              2
                              ,
                              …
                              ,
                              M
                           
                        }. We also assume that a centralized sensing algorithm that complies with the IEEE 802.22 WRAN standards is in place. As mentioned before spectrum sensing in IEEE 802.22-based system can be performed in a centralized or a distributed manner.


                        WRAN system model: We set the channel redistribution period (observation-window time) to two seconds
                           6
                           According to the IEEE 802.22 standard, a given channel can only be utilized by a SU transmission for at most 2s after the time it was sensed idle.
                        
                        
                           6
                         (i.e., 
                           
                              
                                 
                                    T
                                 
                                 
                                    win
                                 
                              
                              =
                              2
                           
                        
                        s, inline with the IEEE 802.22 standards). We evaluate the performance of the TAECA algorithm and compare it to that of the FCA algorithm under low-to-high PR channel availability conditions and two SU traffic load scenarios: unbalanced- and balanced-traffic load scenarios. The number of SUs is 200 users that are uniformly distributed over the five WRAN cells. Each SU in cell i generates transmission requests according to a Poisson process with rate 
                           
                              
                                 
                                    λ
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                           
                         (in packets/time slot), which is the same for all users within cell i. To capture the unbalanced traffic load scenario, we randomly vary the activity factor 
                           
                              
                                 
                                    λ
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                           
                         of SUs in each cell 
                           
                              i
                              ,
                              
                              ∀
                              i
                           
                        , every 20s. Specifically, we assume that 
                           
                              
                                 
                                    λ
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                           
                         is uniformly distributed between 
                           
                              [
                              0
                              ,
                              1
                              ]
                           
                        . By varying 
                           
                              
                                 
                                    λ
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                           
                         in each cell every 20s, the impact of 
                           
                              
                                 
                                    λ
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                           
                         on the WRAN performance is indirectly investigated. In the balanced load scenarios, we set 
                           
                              
                                 
                                    λ
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                           
                         to be the same for all SUs in the five WRAN cells (i.e., 
                           
                              
                                 
                                    λ
                                 
                                 
                                    i
                                 
                              
                              (
                              t
                              )
                              =
                              λ
                              (
                              t
                              )
                              ,
                              
                              ∀
                              i
                           
                        ).

We first investigate the unbalanced traffic load scenarios, where SUs in the different cells have different activity factors (i.e., 
                              
                                 
                                    
                                       λ
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 t
                                 )
                              
                           , where 
                              
                                 i
                                 =
                                 1
                                 ,
                                 …
                                 5
                              
                           ).


                           Overall WRAN system performance: 
                           Fig. 3
                           (a) and (b) respectively plot the SU blocking rate and the number of served requests for the TAECA, BPACA and FCA algorithms as a function of the number of PR channels (M) for different values of 
                              
                                 
                                    
                                       P
                                    
                                    
                                       I
                                    
                                 
                              
                           . These figures show that as the number of available channels increases the blocking rate decreases and the number of served requests increases, especially under low-to-moderate PR traffic loads. Specifically, TAECA significantly reduces SU blocking rate and increases the overall number of served requests by up to 45% compared to FCA and 28% compared to BPACA. This improvement is attributed to the fact that TAECA dynamically allocates spectrum shares (channels) to the different cells in proportion to their expected traffic loads such that no cell is assigned channels larger than its expected traffic demand. This adaptive allocation strategy significantly reduces the number of blocked SU transmissions due to the unavailability of channels in heavily-loaded cells, while the blocking rate at the lightly-loaded cells is not affected. This indeed achieves efficient spectrum utilization. Fig. 3(c) and (d) plot the blocking rate and the number of served requests for both algorithms as a function of the idle probability 
                              
                                 
                                    
                                       P
                                    
                                    
                                       I
                                    
                                 
                              
                           . These figures show that as 
                              
                                 
                                    
                                       P
                                    
                                    
                                       I
                                    
                                 
                              
                            increases, the blocking rate decreases and the number of served requests increases. For small values of 
                              
                                 
                                    
                                       P
                                    
                                    
                                       I
                                    
                                 
                              
                           , all channel allocation algorithms achieves a comparable performance as the number of available channels becomes smaller (i.e., no significant performance improvement is observed over the FCA and BPACA algorithms).


                           Per-cell performance: In order to study the per-cell performance, we use the same simulation setup discussed in Section 5.1, but with predefined non-uniform activity factors for SUs in the different cells. Formally, we set the SU activity factors 
                              
                                 
                                    
                                       λ
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       λ
                                    
                                    
                                       2
                                    
                                 
                                 ,
                                 …
                                 ,
                                 
                                    
                                       λ
                                    
                                    
                                       5
                                    
                                 
                              
                            in the 5 WRAN cells to 0.9, 0.9, 0.1, 0.8 and 0.1, respectively. Fig. 4
                            depicts the number of served requests for the various WRAN cells with different values of 
                              
                                 
                                    
                                       P
                                    
                                    
                                       I
                                    
                                 
                              
                            and M. For all algorithms, this figure exhibits that the number of served requests per cell increases as 
                              
                                 
                                    
                                       P
                                    
                                    
                                       I
                                    
                                 
                              
                           (M) increases, irrespective of the cell index. This is because a larger 
                              
                                 
                                    
                                       P
                                    
                                    
                                       I
                                    
                                 
                              
                           (M) increases the number of available channels, which consequently increases the number of allocated channels to each cell. Fig. 4(a)–(e) indicate that for heavily-loaded cells (i.e., Cells 
                              
                                 1
                                 ,
                                 
                                 2
                                 ,
                                 
                                 and,
                                 
                                 4
                              
                           ), TAECA outperforms the other two algorithms, especially under low-to-moderate PR traffic loads (i.e., the performance enhancement is larger at larger M and 
                              
                                 
                                    
                                       P
                                    
                                    
                                       I
                                    
                                 
                              
                           ). Specifically, for 
                              
                                 
                                    
                                       P
                                    
                                    
                                       I
                                    
                                 
                                 =
                                 0.9
                              
                            and 
                              
                                 M
                                 =
                                 100
                              
                           , TAECA increases the number of SU served requests by up to 60% compared to FCA and 30% compared to BPACA. It can also be observed that, although TAECA allocates less number of channels to the lightly-loaded cells (i.e., cells 3 and 5), which is not the best allocation strategy from those cell’s perspective, the per-cell performance for those cells under TAECA is comparable to that of the FCA and BPACA algorithms, irrespective of 
                              
                                 
                                    
                                       P
                                    
                                    
                                       I
                                    
                                 
                              
                            and M. This is because TAECA dynamically adapt the per-cell channel allocation to the current traffic load conditions in the different WRAN cells such that no cell is assigned a spectrum share larger than its expected traffic demand, whenever some cells are assigned channels less than their traffic demands. Specifically, TAECA assigns more channels to the cells with high traffic loads, while assigning less number of channels to the lightly-loaded cells. This is in contrast to the best allocation strategy from the lightly-loaded cells’ perspective, where each cell is attempting to select the maximum possible number of channels for its users (e.g., the FCA scheme).


                           System performance under inaccurate traffic load estimation: We also examine the robustness of TAECA under inaccurate traffic load estimation. The estimated traffic load 
                              
                                 
                                    
                                       N
                                    
                                    
                                       ∼
                                    
                                 
                                 (
                                 t
                                 )
                              
                            is given by 
                              
                                 
                                    
                                       
                                          1
                                          +
                                          ξ
                                       
                                    
                                 
                                 N
                                 (
                                 t
                                 )
                              
                           , where ξ is a uniform estimation error (
                              
                                 ξ
                                 ∼
                                 Uniform
                                 [
                                 -
                                 ∊
                                 ,
                                 ∊
                                 ]
                              
                            and 
                              
                                 0
                                 ⩽
                                 ∊
                                 <
                                 1
                              
                           ). Fig. 5
                            shows the effect of inaccurate traffic estimation on the WRAN performance under TAECA as a function of ∊ for different 
                              
                                 
                                    
                                       P
                                    
                                    
                                       I
                                    
                                 
                              
                            and M. Under moderate-to-high PR traffic loads (
                              
                                 
                                    
                                       P
                                    
                                    
                                       I
                                    
                                 
                                 =
                                 0.5
                              
                            and 0.1), it can be noted that there are no significant variations in the achieved system performance for different values of ∊, irrespective of M. For low PR traffic loads (
                              
                                 
                                    
                                       P
                                    
                                    
                                       I
                                    
                                 
                                 =
                                 0.9
                              
                           ), a minor reduction in the system performance is observed as ∊ increases for large values of M.


                           Fig. 6
                            plots the percentage reduction in the number of served SU transmissions due to inaccurate 
                              
                                 N
                                 (
                                 t
                                 )
                              
                            as a function of M. Specifically, for different values of 
                              
                                 
                                    
                                       P
                                    
                                    
                                       I
                                    
                                 
                              
                            and ∊, this figure indicates that the maximum percentage of reduction in system performance due to inaccurate estimation of N is less than 8%. The results in Figs. 5 and 6 reveal that TAECA is quite robust to traffic estimation errors. This is because TAECA needs only rough estimates of the local traffic conditions in the different WRAN cells in order to dynamically allocate channels to these cells accordingly.

Finally, we compare the performance of our proposed algorithm with that of the FCA algorithm under balanced traffic load scenarios, where the load is uniformly distributed in the WRAN system. We set 
                              
                                 
                                    
                                       λ
                                    
                                    
                                       i
                                    
                                 
                                 (
                                 t
                                 )
                                 =
                                 λ
                                 (
                                 t
                                 )
                              
                           , where 
                              
                                 i
                                 =
                                 1
                                 ,
                                 …
                                 ,
                                 5
                              
                           . Similar to the unbalanced scenarios, 
                              
                                 λ
                                 (
                                 t
                                 )
                              
                            varies every 20s according to a uniformly distributed random variable between 
                              
                                 [
                                 0
                                 ,
                                 1
                                 ]
                              
                           . Fig. 7
                           (a)–(d) show that all algorithms achieve comparable performance (i.e., no significant enhancement is observed) for all values of 
                              
                                 
                                    
                                       P
                                    
                                    
                                       I
                                    
                                 
                              
                            and M. This can be explained as follows: when the SU traffic loads are approximately the same in all the WRAN cells, channel redistribution is no longer needed over time. In this case, all algorithms provide comparable performance due to the uniformity of traffic loads in the WRAN system.

@&#CONCLUSIONS@&#

In this paper, we proposed a spectrum-efficient traffic-aware exclusive channel allocation scheme for multi-cell WRAN systems. The proposed scheme (TAECA) efficiently manages the self-coexistence problem in a multi-cell WRAN. TAECA improves the overall system performance through cooperative spectrum allocation that considers the traffic conditions in the different cells. Specifically, TAECA attempts at minimizing the unnecessary blocking of SU transmissions in the neighboring WRAN cells, which consequently maximizes spectrum utilization. TAECA employs an adaptive max–min weighted fair mechanism. This mechanism allocates idle channels to the different WRAN cells based on their prevailing traffic-load conditions. We investigated the performance of TAECA under two SU traffic-load scenarios: un-balanced and balanced traffic loads. We compared the performance of TAECA with that of reference schemes (BPACA and FCA). We showed that, under unbalanced traffic load scenarios, TAECA increases the overall number of served requests by up to 45% and 28% compared to FCA and BPACA, respectively. Although, TAECA may assign less number of channels to the lightly-loaded cells, which may not be optimal from those cells’ perspective, our results showed that the average per-cell performance of those cells under TAECA is comparable to that of the other schemes. Under balanced SU traffic load scenarios, the results showed that all schemes achieve comparable performance. In summary, TAECA provides efficient spectrum utilization by effectively reducing the blocking rate and increasing the number of served SU transmissions in the system.

@&#REFERENCES@&#

