@&#MAIN-TITLE@&#Beacon-based channel assignment and jammer mitigation for MANETs with multiple interfaces and multiple channels

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           working for multi-interface multi-channel MANETs


                        
                        
                           
                           being totally distributed i.e. no CCC or central entity


                        
                        
                           
                           enhancing throughput and reducing interference


                        
                        
                           
                           improving connectivity by balancing stations that are in the same vicinity and using the same


                        
                        
                           
                           channel


                        
                        
                           
                           performing adaptive channel assignment against jamming


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Ad-hoc networks

Channel assignment

Multiple interfaces

Jamming

@&#ABSTRACT@&#


               
               
                  The capability of accessing multiple channels through multiple interfaces improve network capacity and is desirable for future Mobile Ad-Hoc Networks (MANETs). However, due to the presence of jammers as well as mobility and ad-hoc features, MANETs require distributed and efficient resource management for channel assignment. To address the channel assignment problem, which is a non-deterministic polynomial-time hard (NP-hard) problem, we propose a heuristic algorithm called Channel Assignment and JAmmer Mitigation (CA-JAM). The CA-JAM algorithm assigns a distinct channel for every interface of one station, and then all stations exchange the assignment information through beacon frames on every individual interface. When one station receives a beacon, the station organizes the information into tables. Therefore, each station, distributively, uses the table to reduce the number of neighboring stations using the same channel to avoid interference which in turn improves the throughput. The tables are also used to learn the disconnected neighbors due to jamming so as to mitigate the effect of jamming and maintain connectivity. CA-JAM is fully distributed with no use of control channel or central entity; thus, it improves connectivity and reduces interference by balancing stations over the available channels while mitigating jamming effects from multi channel multi interface MANETs. We confirm that CA-JAM outperforms existing protocols using the OPNET simulator.
               
            

@&#INTRODUCTION@&#

Mobile ad-hoc networks (MANETs) provide flexibility and scalability to set up a network compared to infrastructure networks. Such networks can be used in military combat, disaster relief or large construction sites. All MANET stations with a single interface or radio
                        1
                     
                     
                        1
                        Throughout the text, the terms interface and radio are used interchangeably.
                      should belong to the same service set on a single channel to stay connected, even if the interface can switch between channels [1]. As the number of MANET stations increases, interference and collision among them increase as well. This degrades network capacity, flexibility and scalability. Unlike other networks, MANETs are designed to have minimal manual configuration, low cost of hardware, and tolerance to jamming attacks and mobility [2].

Jamming is caused by high powered devices intentionally designed to attack a wireless network, which is referred to as intentional jamming. Also, jamming can arise unintentionally from non-compatible standards, e.g. 802.11 and 802.15.1 operating in the 2.4GHz ISM band, which is mostly referred to as interference. Another type of jamming in MANETs is caused by denial-of-service (DoS) attacks [3] where malicious stations transmit false messages to consume network resource and starve other stations. To mitigate jamming, first we need to detect it and then avoid using the jammed channel. Under the assumption that such jamming attacks are detectable, stations can dynamically switch from one channel to another [4] as in dynamic spectrum access, where stations search for a new channel when the current operating channel is unavailable.

Due to the reduction of radio cost, it is now easier to fit multiple interfaces in one station, as seen in Wi-Fi devices that work for both 2.4GHz and 5GHz. Therefore, our aim is to exploit this advantage to enhance the network capacity and flexibility of MANETs with the help of Multiple Interfaces of stations operating on Multiple Channels (MIMC) [5] by proposing a new channel assignment scheme. In addition, the channel assignment algorithm should overcome the jamming problem as well.

In this paper, we first formulate the channel assignment problem as graph partitioning problem that minimizes the number of adjacent vertices on the same partition, and then propose a distributed and heuristic channel assignment algorithm called Channel Assignment and JAmmer Mitigation (CA-JAM), because the problem is found to be non-deterministic polynomial-time hard (NP-hard). In CA-JAM, first, each station determines a distinct random channel for all of its interfaces and exchanges beacons on each interface for a simple rendezvous process. To enhance the rendezvous process, algorithms described in [6] and [7] can be used. Up on receiving beacons from neighbors, stations organize the information into two tables: an interface table and a neighbor table. To avoid interference, stations look up the number of neighbors per interface from its interface table and check whether it has multiple links with all neighbors on this interface. If these conditions are satisfied, the station switches to another channel to organize a less congested network and seek more connectivity.

When a channel is jammed, the following steps are performed: (1) neighbors that are exclusive to the jammed interface are selected, i.e., neighbors with a single link; (2) channel information about the unjammed interfaces of these neighbors is inferred; and (3) the channel that is shared among most neighbors is selected and assigned to the jammed interface. Then, the interface switches to the assigned channel to re-establish communication with its neighbors to recover the lost connection due to the jammer presence. CA-JAM is a beacon-based fully distributed channel assignment scheme resistant to jamming attacks, where there is neither control channel nor a central unit. To make our algorithm off-the-shelf 802.11-compatible, we only slightly modified the beacon type that was defined in the IEEE 802.11 standard.

The rest of the paper is organized as follows. In Section 2, related work is presented, and in Section 3, our problem statement is described. In Sections 4 and 5, the proposed CA-JAM algorithm and our simulation results are described, respectively. Our conclusion is presented in Section 6.

@&#RELATED WORK@&#

The use of multiple interfaces incurs a channel assignment issue. There exist several studies about channel assignment in literature each from different perspective; in this section we assess previous works in this issue. In [8] and [9], the authors provided approaches on how graph theory can be used for channel assignment in MANETs. In [10], graphs are substantially applied to the channel allocation. First, the topology is determined based on the connectivity and interference graph. The interference graph is used to determine link interference, and an optimal algorithm is formulated based on the connectivity graph to reduce the multichannel link interference. Finally, authors proposed an approximation algorithm, because the coloring solution for the formulated graph is NP-hard. Moreover, interference among users is considered when designing channel allocation schemes. In [11], a centralized multi-radio conflict graph is used to model interference among stations, where a channel is assigned using station intelligence to minimize interference throughout the network. In [12], another form of conflict graph called Multi-Dimensional Conflict Graph (MDCG) is proposed to find a possible non-interfering channel assignment.

In [13], the authors proposed a static channel assignment algorithm, where each interface is assigned a distinct channel and that will determine the topology. The assignment strategy is to allocate interfaces in a common neighbor with as many distinct channels as possible such that the interference among connections is minimized. The authors of [16] suggested that one of the multiple interfaces is static while others are dynamic. In this method, HELLO messages are exchanged among the stations over the static interface and the information extracted from this message is used to mitigate interference among stations.

The proposed scheme in [36], strives to minimize interference with the help of channel assignment. This is a greedy assignment which requires all the links in the network as an input. The goal is to maximize the number of links that operate simultaneously. First each link is mapped with the first channel then the upper and lower bound SINR of each link while using that channel is obtained. Following that links are prioritized based on the upper and lower bound SINR on that channel; the link with highest priority will be assigned to that channel and the rest of the links are mapped to the next channel. This process is repeated until all the links are mapped to channel.

Adaptive Dynamic Channel Allocation protocol (ADCA) is a hybrid channel assignment protocol proposed in [25]. Like [16], one interface of each station is static while the others are dynamic. The purpose of the static interface is to enhance throughput between a station and central node whereas the dynamic interfaces are designed to work in on-demand mode. Time is divided into fixed intervals, each having a control and data interval. In the control interval dynamic interfaces negotiate a channel and choose the “least congested channel”. Each station has a queue associated with its neighbors and in the data interval the algorithm takes the queue length into consideration to choose to which group of neighbors it should communicate first. In [15], IEEE 802.11 stations obtain neighbor information through scanning and beacon broadcast. Then, they form a local coordination group based on similarity of available channels. The group votes on channels to select one channel as a coordination channel for future channel assignment.

The work in [21] suggests a group-based channel assignment (GCA) algorithm based on a divide and conquer approach. In GCA, stations are classified into a master and slaves, where the master is responsible for gathering new link formation and channel assignment. When a slave node joins the network it will send a request to its neighbors who acknowledge with a reply. However, it is the job of the master station to decide whether the new station’s link should be activated or not. If it decides to activate the new link, the master will send a broadcast message to all neighbors about the activation of the new link. In GCA, links are grouped based on the bandwidth requirement, and the groups are organized to form components. Then, links of each component are assigned to different channels. The first and second procedures guarantee a balance whereas the last procedure enhances throughput and fairness.

Another group based channel assignment is found in [33]. In this scheme, stations that are fully connected to one another belongs to one group. Stations that overhear other groups communication are called bridge stations. First each group will be assigned one channel in such a way that there is no collision between neighboring groups. One interface of each station in the group will use that for communication. Bridge stations will form fully connected group on their second interface and that group will be assigned a channel in the same manner. When stations communicate with in the group a Latin square based scheduling is implemented to avoid collision. When stations would like to communicate members of other group than its own then it will forward its data to the bridge station; the group made of bridge stations also employ Latin square method to avoid collision.

The authors in [14] investigate the joint effect of topology control and channel assignment in two stages; first, every station adjusts and checks its link until an undirected graph is constructed; second, every station is assigned a transmission channel. In [17], a joint channel assignment and routing protocol is proposed to minimize the maximum number of l-hop neighbors that share the same channel. Each station builds the network topology from periodical HELLO messages sent through the common control channel (CCC). Stations detect active neighbors using the request-to-send (RTS)/ clear-to-send (CTS) through CCC. Then, they choose a channel that is available for both stations from their list. Other stations update their available channel list upon listening to the RTS/CTS. The use of a CCC and 802.11-like MAC protocol is also found in [18].

Unlike [17], to detect channel availability, stations use spectrum sensing in addition to HELLO messages. One transceiver is used for a CCC whereas others are used for data exchange; Data Transmission reServation (DTS) is used for control packet transmission in order to announce spectrum reservation and transmit power to neighbors. Similarly, the work in [24] uses control information to implement channel assignment in MIMC environments. However, they reuse the 802.11 RTS/CTS messages in pursuit of avoiding two-hop interference. The basic steps of this work are summarized as follows: when two stations want to communicate, they exchange RTS/CTS on the control channel and the neighboring stations avoid using the same channel by overhearing the control information.

A channel assignment based on parallel rendezvous scheme with two interfaces was proposed by the authors in [34]. Stations uses hopping sequence to form a link with neighbors. The first interface is used for transmission and uses fast hopping whereas the second interface is used for reception and transmission of control messages such as HELLO packets; it follows slow hopping sequence. Station is required to be synchronized with its 1-hop neighbors with the second interface using the HELLO messages. Channel is divided into time slots, when two stations are in the same slot communication occur.

In [19], the authors proposed an Ad hoc On Demand Distance Vector (AODV) based joint channel assignment and routing algorithm. Similar to [17,18], this method uses a CCC for information control; however, it uses interference indices to weight channels to avoid interference in the network. The authors of [26] categorized channels into control and data classes. This work also modifies the famous AODV protocol to exchange control information. The authors in [23] add an extra routing layer to address channel assignment together with routing. First, each interface of a station is indexed and the channels from the lowest to the highest are assigned to these interfaces. The interface with the lowest index and channel is used for best efforts; i.e. control information includes the channel and interface. This work modifies the traditional Open Link State Routing (OLSR) protocol for the purpose of enhancing the throughput and performing channel assignment. The control information is piggybacked in Topology Control (TC) message of OLSR. The channel assignment is then performed using TC messages which are received from the neighbor based on estimation of available bandwidth of each node.

In [22], channel assignment using particle swarm optimization (PSO) is proposed. This is inspired by a social behavior, e.g. bird flocking or fish schooling. Due to the discrete nature of multi-hop networks, the original PSO could not be directly applied for CA. For this reason, the authors first developed discrete PSO (DPSO) algorithm to form DPSO-CA. The main focus of the work is to minimize interference while maintaining a topology. To preserve a topology, two neighbors must be assigned at least one channel. Interference is avoided by applying crossover and mutation for the initial channel assignment of the network, which is supervised by a central node. A more comprehensive survey on channel assignment can be found in [27].

Another bio-inspired joint work is found in [35]. The authors formulated an optimization problem to get the optimal channel and power allocation of the entire network such that throughput and fairness are enhanced. The problem is complex and NP-hard hard to find the optimal solution, which made the authors to consider the hybridization of two bio-inspired schemes, genetic algorithms (GA) and PSO such that optimal channel and power allocation are achieved. The authors used PSO to find the sub optimal solutions and use the solutions from PSO in GA to find the optimal solution.

Most 802.11-based MAC protocols require the availability of a CCC [17–19,23,24], topological view [13,14,22] or central entity [11,12,21] for channel assignment. Although, CCC, central entity or the whole network could easily be jammed or compromised, none of the above works has taken jamming into consideration. In addition, some of the works solve the channel assignment problem jointly with routing [19,23,26]. However, these works fail to work with multiple routing protocols designed for MANETs. Taking the design principles outlined in [20] into account and also considering the weakness of exiting work we have proposed CA-JAM; the contribution of this work in comparison with existing works is summarized as follows:

                        
                           •
                           We developed a channel assignment strategy that is scalable and flexible for multi-interface multi-channel MANETs while being totally distributed i.e. no CCC, central entity and no association with network layer for routing. In addition, we develop a scheme that enhance throughput and reduces interference. Our algorithm also improves connectivity by balancing stations that are in the same vicinity and using the same channel. Finally, CA-JAM is different from existing works because it provides an adaptive channel assignment against jamming attacks.
                                 2
                              
                              
                                 2
                                 This work is an extension of our previous work [32]. This work provides full description of the working principle of our proposed scheme, the proof on the NP-hardness of the scheme, and further performance evaluation.
                              
                           

For MANETs, the topology of a network can be represented as connectivity graph G(V, E), where a vertex in V represents a station in the network and an edge in E is placed between two vertices (u, v), if they are within the communication range. Let |V| denote the cardinality of V. A conflict graph is consequently defined to account for interference issues. In a conflict graph, vertices represent the communication links and edges are placed between vertices corresponding to interfering links based on the protocol model. However, the conventional conflict and connectivity graph does not capture the MIMC environment. To support our system model, we discuss a multi dimensional conflict graph (MDCG) in the following subsection. The notations used in our system model are described in Table 1.

An MDCG for MIMC MANETs is defined in [12]. To describe the conflict relationship among stations, we modify radio-link-channel (RLC) tuples used in [12] to 
                           
                              simple-RLC
                              M
                           
                         (
                           
                              S
                              −
                              
                                 RLC
                                 M
                              
                           
                        ); where M is the number of tuples created by stations with a common channel and can be calculated as M ≤ ⌈(|V| × nI
                        )∖2⌉. S-RLC is defined as 
                           
                              (
                              
                                 u
                                 c
                                 i
                              
                              ,
                              
                                 v
                                 c
                                 j
                              
                              )
                           
                         and indicates that there is a common channel c between interfaces i and j of stations u and v that forms a link. Using these tuples, we can describe all the possible conflicts in a MDCG. The conflicts can be explained using three events:

                           
                              •
                              
                                 X: stations are interfering in a protocol model.


                                 Y: stations are associated with the same channel.


                                 Z: stations that share a common interface at one or two stations.

There is a conflict between tuples when the condition 
                           
                              (
                              X
                              ∩
                              Y
                              ∩
                              
                                 Z
                                 ¯
                              
                              )
                              ∪
                              Z
                           
                         is true for two different S-RLCs. The first condition 
                           
                              X
                              ∩
                              Y
                              ∩
                              
                                 Z
                                 ¯
                              
                           
                         implies that concurrent transmissions within the same interference range are not supported, whereas the second condition Z implies that a single interface cannot support multiple transmissions. Let 
                           
                              
                                 
                                    S
                                    −
                                    RLC
                                 
                                 ¯
                              
                              =
                              
                                 {
                                 S
                                 −
                                 
                                    RLC
                                    1
                                 
                                 ,
                                 S
                                 −
                                 
                                    RLC
                                    2
                                 
                                 ,
                                 …
                                 ,
                                 S
                                 −
                                 
                                    RLC
                                    m
                                 
                                 }
                              
                           
                         (m ≤ K) be the set of tuples that transmit concurrently, then an indicator function is defined as follows:

                           
                              (1)
                              
                                 
                                    f
                                    
                                       (
                                       
                                          
                                             S
                                             −
                                             RLC
                                          
                                          ¯
                                       
                                       )
                                    
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                1
                                             
                                             
                                                
                                                   if
                                                   
                                                   there
                                                   
                                                   is
                                                   
                                                   a
                                                   
                                                   conflict
                                                   
                                                   in
                                                   
                                                   
                                                      
                                                         S
                                                         −
                                                         RLC
                                                      
                                                      ¯
                                                   
                                                   ,
                                                
                                             
                                          
                                          
                                             
                                                0
                                             
                                             
                                                otherwise.
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

To illustrate how the MDCG works, we assume a network with two available channels and three stations A, B and C. Here A has two interfaces while B and C have only one interface. A is within the transmission range of both B and C; however, B and C are not in the transmission range of each other as shown in Fig. 1a. This network can be mapped into four S-RLC tuples. For example, tuple 
                           
                              (
                              
                                 A
                                 1
                                 1
                              
                              ,
                              
                                 B
                                 1
                                 1
                              
                              )
                           
                         means that station A transmits to B on channel 1 and both stations use interface 1. Therefore, using 
                           
                              (
                              X
                              ∩
                              Y
                              ∩
                              
                                 Z
                                 ¯
                              
                              )
                              ∪
                              Z
                           
                         condition and considering all tuples, we obtain the MDCG as shown in Fig. 1b. According to the MDCG in Fig. 1b, there is no conflict in either 
                           
                              {
                              
                                 (
                                 
                                    A
                                    1
                                    1
                                 
                                 ,
                                 
                                    B
                                    1
                                    1
                                 
                                 )
                              
                              ,
                              
                                 (
                                 
                                    A
                                    2
                                    2
                                 
                                 ,
                                 
                                    C
                                    2
                                    1
                                 
                                 )
                              
                              }
                           
                         or 
                           
                              {
                              
                                 (
                                 
                                    A
                                    2
                                    2
                                 
                                 ,
                                 
                                    B
                                    2
                                    1
                                 
                                 )
                              
                              ,
                              
                                 (
                                 
                                    A
                                    1
                                    1
                                 
                                 ,
                                 
                                    C
                                    1
                                    1
                                 
                                 )
                              
                              }
                           
                         in 
                           
                              
                                 S
                                 −
                                 RLC
                              
                              ¯
                           
                         set. This implies (1) there will be no interference between links if the network is configured according to one of these two sets and ; (2) there is no interface conflict occurs in the network. Although the MDCG finds the ultimate none interfering tuples, it has several deficiencies as discussed in Section 2. Therefore, we propose an algorithm that can find the non-interfering tuples while avoiding these drawbacks of MDCG. In the following, we formulate the optimization problem.

The goal of channel assignment is to optimally allocate the limited number of channels available for MIMC MANETs. If the number of stations is less than the available channels or if the number of interfaces per station is equivalent to the available channels, then the optimal channel assignment can be achieved easily by exhaustive resource mapping. However, in most practical scenarios, the available channels are less than the number of stations and more than the number of interfaces. Minimizing the number of stations that are using the same channel minimizes interference and enhances the throughput; however, it affects connectivity k(G). Therefore, we need to identify the optimal number of stations that are with in close proximity and share the same channel while there is at least one path for any source destination pair in the network. Also no two interfaces of one station can have the same channel and there is no conflict according to the MDCG, i.e., two links on the same interference range do not transmit simultaneously. Mathematically, the optimization problem can be stated as follows:

                           
                              (2)
                              
                                 
                                    
                                       
                                       
                                       
                                          
                                             
                                                d
                                                
                                                   o
                                                   p
                                                   t
                                                
                                             
                                             =
                                             
                                                {
                                                min
                                                
                                                
                                                d
                                                
                                                   (
                                                   
                                                      u
                                                      c
                                                      i
                                                   
                                                   )
                                                
                                                }
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             
                                                subject
                                                
                                                to
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             
                                                u
                                                c
                                                i
                                             
                                             ≠
                                             
                                                u
                                                c
                                                j
                                             
                                             ,
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             
                                             ∀
                                             
                                                (
                                                i
                                                ,
                                                j
                                                )
                                             
                                             ∈
                                             
                                                N
                                                I
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             k
                                             (
                                             G
                                             )
                                             ≥
                                             1
                                             ,
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             f
                                             (
                                             
                                                
                                                   S
                                                   −
                                                   RLC
                                                
                                                ¯
                                             
                                             )
                                             ≤
                                             0
                                             ,
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             k
                                             
                                                (
                                                G
                                                )
                                             
                                             ,
                                             f
                                             
                                                (
                                                
                                                   
                                                      S
                                                      −
                                                      RLC
                                                   
                                                   ¯
                                                
                                                )
                                             
                                             ∈
                                             
                                                {
                                                0
                                                ,
                                                1
                                                }
                                             
                                          
                                       
                                    
                                    
                                       
                                       
                                       
                                          
                                             i
                                             ,
                                             j
                                             ,
                                             c
                                             ∈
                                             {
                                             0
                                             ,
                                             1
                                             ,
                                             2
                                             ,
                                             …
                                             }
                                          
                                       
                                    
                                 
                              
                           
                        where

                           
                              (3)
                              
                                 
                                    k
                                    
                                       (
                                       G
                                       )
                                    
                                    =
                                    
                                       {
                                       
                                          
                                             
                                                1
                                             
                                             
                                                
                                                   if
                                                   
                                                   there
                                                   
                                                   is
                                                   
                                                   at
                                                   
                                                   least
                                                   
                                                   one
                                                   
                                                   path
                                                   
                                                   for
                                                   
                                                   any
                                                   
                                                   source
                                                
                                             
                                          
                                          
                                             
                                             
                                                
                                                   
                                                   
                                                      and
                                                      
                                                      destination
                                                      ,
                                                   
                                                
                                             
                                          
                                          
                                             
                                                0
                                             
                                             
                                                
                                                   otherwise
                                                   .
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        Since the Finding the minimum degree of a vertex on each of its interfaces is equivalent to finding the optimal number of neighbors (dopt
                        ) that one station should have on each of its interfaces. The first constraint defines that two interfaces of one station cannot have the same channel. The second constraint means that the connectivity of the graph should always be greater than or equal to one. This enforces that there should always be one path for any (source, destination) pair. The third constraint states that the final solution to the optimization problem should not contain conflicting tuples; i.e., interference should not be caused while trying to solve the optimization problem. Therefore, if we can find the optimal number of neighbors that one station has to have on each of its interfaces, then by limiting each interface to that number, we can obtain the optimal throughput and connectivity because that is the optimal number of stations that should share the same channel. Like the NP-hardness of channel assignment problems in many literatures [10,28,29], the channel assignment of our work is also NP-hard for the MIMC ad-hoc networks. Since the domain of all the variables of this optimization problem is in integer, the nature of this optimization problem is of integer linear programming, which is NP-hard. The proof of the NP-hardness of the optimization problem is given as follows.

                           Theorem 1
                           
                              It is NP-hard to find the optimal number of neighbors at each interface.
                           

We want to divide the network such that every group has the same number of stations and there is connectivity between any two stations (k(G) ≥ 1). Let 
                                 
                                    d
                                    (
                                    
                                       u
                                       c
                                       i
                                    
                                    )
                                 
                               be the degree of a vertex of station u on interface i and channel c, and let dopt
                               be the optimal degree that every station has, i.e., the minimum number of neighbors of one station that share the same channel on a single interface. We show that it is NP-complete to find dopt
                               using the reduction from graph partitioning problem [30,31,31]. The graph partitioning problem states that given a graph G(V, E) and a constant k, it is NP-complete to induce G into k sub graphs 
                                 
                                    
                                       G
                                       1
                                    
                                    ,
                                    
                                       G
                                       2
                                    
                                    ,
                                    …
                                    ,
                                    
                                       G
                                       k
                                    
                                 
                               where the vertices of the induced sub graphs are equal, while minimizing the disconnection, i.e., capacity of edge cut, between sub graphs. Suppose we find dopt
                              , which implies 
                                 
                                    d
                                    (
                                    
                                       u
                                       c
                                       i
                                    
                                    )
                                 
                              =dopt
                               for all interfaces of one station on any channel. This means that the number of stations on a certain channel is equal to the degree of one station plus the station itself 
                                 
                                    (
                                    
                                       d
                                       
                                          o
                                          p
                                          t
                                       
                                    
                                    +
                                    1
                                    )
                                 
                              . This solution gives a valid graph partitioning with minimum edge cut. Therefore, it is NP-complete to find an optimal degree for any dopt
                               and 
                                 
                                    d
                                    (
                                    
                                       u
                                       c
                                       i
                                    
                                    )
                                 
                              .□

Before explaining our CA-JAM algorithm, we discuss some features that should be considered to design a good channel assignment scheme. Later, the effectiveness of the proposed CA-JAM will be evaluated based on these principles.

                           
                              •
                              Interface-channel mapping: in the MIMC MANETs, mapping an interface to a channel is not a simple task. It could create a disconnected network if interfaces of communicating neighbors have no common channel, i.e., neighbors would not be able to rendezvous.

Connectivity: channel assignment in MANETs is about having a connected network. Because there is no central unit to oversee the delivery of a packet from a source to a destination, the only way to achieve successful data delivery is to guarantee a path from any source to any destination.

Interference and jamming avoidance: interference could be caused intentionally by stations that want to disrupt an ongoing communication (jamming) or unintentionally by stations that are not aware of an ongoing communication (interference). A good channel assignment scheme should be able to avoid both types of interference.

In our system, stations exchange interface-to-channel mapping information using beacons that are broadcasted by every station periodically. The data communication between consecutive beacons follows the IEEE 802.11 protocol. Fig. 2 depicts beacon and data transmission in our system. It only shows the operation of one interface of three stations operating on the same channel. Time is divided into Beacon Interval (BI), which consists of Beacon Duration (BD) and 802.11 DCF duration. In BD, stations randomly choose the time to broadcast a beacon. We only modify the beacon message to include the interface/MAC index sending the beacon and the channels that are assigned to all the interfaces of a station, which makes CA-JAM easily implementable using off-the-shelf 802.11 interfaces. The received beacon is organized in two look-up tables, the Neighbor_Table and Interface_Table. When extracting the information from the beacon, if M-IDX is 2 the channel assigned to the sending interface is C-2. The rest C-i’s are used to re-establish a connection with the sending station in case this connection is lost. The detailed discussion on how to use the C-i’s to re-establish the lost connection is discussed in the following subsections.

First, the Neighbor_Table is a collection of tuples with the following information.

                        
                           •
                           
                              Neighbor_ID stores the information collected from STN-ID field of the beacon.


                              MAC_Index stores information extracted from M-IDX of the beacon. Because a neighbor has multiple interfaces, MAC_Index identifies the MAC of the interface that sent the beacon.


                              NbrChannel_i
                              
                                 
                                    
                                    
                                       (
                                       i
                                       ϵ
                                       {
                                       1
                                       ,
                                       …
                                       ,
                                       I
                                       }
                                       )
                                    
                                 
                               stores the neighbor’s channel number for each interface and is collected from C_i fields of the beacon, where 
                                 
                                    (
                                    i
                                    ϵ
                                    {
                                    1
                                    ,
                                    …
                                    ,
                                    I
                                    }
                                    )
                                 
                              .


                              Expiry_Time stores the maximum time a tuple remains relevant after it is created.

Second, the Interface_Table is made up of the following tuples:

                        
                           •
                           
                              Nbrs_on_Interface_i
                              
                                 
                                    
                                    
                                       (
                                       i
                                       ϵ
                                       {
                                       1
                                       ,
                                       …
                                       ,
                                       I
                                       }
                                       )
                                    
                                 
                               stores the list of neighbor IDs that are exclusive to interface i for I interfaces. This helps a station track the number of neighbors on each interface and their identities.

These tables are updated on three occasions: (1) when the channel of an interface switches; (2) when the information has expired and; (3) when a beacon is received. Note that a neighbor might be found on more than one interface, which means there are multiple links between any two stations. CA-JAM is solely based on the above look-up tables and composed of three modules: rendezvous, interference avoidance, and jammer mitigation, which will be explained in the following subsections.

This module covers the channel assignment during the MIMC MANET initialization or when a station joins the network for the first time. It is assumed that interfaces are indexed from 1 to nI
                        . Therefore, the station iterates through all of its interfaces and assigns each one a random channel that is different from others. This will enable stations to satisfy the first condition of the optimization problem, i.e., two interfaces of one station cannot have the same channel (
                           
                              
                                 u
                                 c
                                 i
                              
                              ≠
                              
                                 u
                                 c
                                 j
                              
                           
                        ). The rendezvous and random channel generator algorithms are given in Tables 2
                         and 3
                        , respectively.

After all interfaces have a distinct channel according to lines 1 to 3 of the rendezvous algorithm, the station broadcasts beacons on all interfaces and listens to its neighbors’ beacons. If a station hears at least one beacon from neighbors, then a rendezvous is completed and the station starts to update the tables. However, if there is no beacon for the whole beacon duration, which means there is no neighbor on that interface, the station waits until the next beacon duration, assigns a new channel, and broadcasts its new assignment while listening again (lines 5 to 13 of the rendezvous module). In other words, the station will stop rendezvous process when it receives a beacon from other station, which mean there is at least one node in that channel. Line 3 in the random channel module ensures that the new channel is not jammed or has already been assigned to another interface. This process is repeated until there is at least one neighbor on each interface, i.e., 
                           
                              d
                              (
                              
                                 u
                                 c
                                 i
                              
                              )
                              ≥
                              1
                           
                        . Through this process, the second condition of the optimization problem is fulfilled, i.e., k(G) ≥ 1. Unless the distance between one or a group of stations is much longer than the remaining network, there will be no disconnection. This is done by counting the entities of Nbrs_on_Interface_i from the Interface_Table. In other words, if the count of Nbrs_on_Interface_i is zero, it means there is no neighbor on that interface.

Now that the network has been established through rendezvous, all stations in the network have at least one or more neighbors on each of their interfaces. Let ΘCG
                         be the group of stations that reside on the transmission range of each other and use the same channel to form a communicating group. However, for successful communication , the ΘCG
                         group has to overcome interference that is caused by one of the following scenarios:

                           
                              •
                              First, the hidden and exposed terminal problems occur because they are common among the IEEE 802.11 networks.

Second, interference or congestion occurs, if the number of stations in ΘCG
                                  is high.

Third, interference occurs among ΘCG
                                  if there is any station that has a neighbor within the interference range that uses the same channel (
                                    
                                       f
                                       (
                                       
                                          
                                             S
                                             −
                                             RLC
                                          
                                          ¯
                                       
                                       )
                                       =
                                       1
                                    
                                 ).

Because stations that belong to the same ΘCG
                         listen to the probe messages broadcasted in the group, the first type of interference is easily avoided using the RTS/CTS mechanism. The second type of interference is caused by capacity overload due to the existence of many stations in the same ΘCG
                         or channel. Therefore, to avoid such interference, a station needs to check if the number of its neighbors on each specific interface 
                           
                              d
                              (
                              
                                 u
                                 c
                                 i
                              
                              )
                           
                         is greater than dopt
                        . Here, dopt
                         is the maximum number of neighbors a station can have on each of its interfaces optimally. For that matter, we compare if the current number of neighbors on one interface is greater than dopt
                        . For interfaces with 
                           
                              d
                              
                                 (
                                 
                                    u
                                    c
                                    i
                                 
                                 )
                              
                              ≥
                              
                                 d
                                 
                                    o
                                    p
                                    t
                                 
                              
                              ,
                           
                         stations check whether there are multiple links with all neighbors on this interface (i.e. if 
                           
                              S
                              (
                              
                                 u
                                 c
                                 i
                              
                              )
                              =
                              ∅
                           
                        ). When the condition holds, 
                           
                              S
                              (
                              
                                 u
                                 c
                                 i
                              
                              )
                              =
                              ∅
                              ,
                           
                         the station re-assigns a new distinct channel to that interface such that the current channel is less congested and new connections are created. This enhances the connectivity. Table 4
                         shows the pseudo code of the interference avoidance module, where lines 2 to 4 get the size of neighbors and the set of distinct neighbors of an interface, and lines 5 to 7 check the conditions (that the number of neighbors on this interface has exceeded dopt
                         and all neighbors in this interface have multiple links with this station) and when the condition is true station assign a new channel to this interface. Otherwise, the station will remain on the same channel because connectivity is more critical in MANETs. 
                           
                              S
                              (
                              
                                 u
                                 c
                                 i
                              
                              )
                           
                         is obtained by cross-referencing both tables. Station matches the Neighbor_ID with the Nbrs_on_Interface_i for 
                           
                              i
                              ϵ
                              {
                              1
                              ,
                              …
                              ,
                              I
                              }
                              ,
                           
                         if Neighbor_ID exists in more than one interface , it means neighbor has multiple link with this station so it will not be added to 
                           
                              S
                              (
                              
                                 u
                                 c
                                 i
                              
                              )
                           
                        . This implies 
                           
                              S
                              (
                              
                                 u
                                 c
                                 i
                              
                              )
                              =
                              ∅
                              ,
                           
                         means all neighbors on interface i has multiple links with this station. The module to select distinct channels is shown in Table 5
                        , where lines 3 to 9 count the number of interfaces on which neighbors exist and lines 10 to 12 check if the count is one i.e, if a neighbor is exclusive to the interface.

Eventually, when this process is repeated by every station, the number of neighbors on every interface converges to the minimum number that could communicate to that interface 
                           
                              d
                              
                                 (
                                 
                                    u
                                    c
                                    i
                                 
                                 )
                              
                              =
                              
                                 d
                                 
                                    o
                                    p
                                    t
                                 
                              
                           
                        . Thus the goal of the optimization problem is accomplished as stated in Section 3. This process implicitly avoids the primary interference; this will be discussed using an example in Section 4.4.

CA-JAM is able to switch channels to re-establish a link against jamming. When an operating channel of an interface is jammed, the station selects a set of neighbors that are distinct to the jammed interface 
                           
                              S
                              (
                              
                                 u
                                 c
                                 i
                              
                              )
                           
                         from the table, i.e., stations will try to reconnect with neighbors that share a single link rather than multiple ones. This is described in Table 6
                        . In line 2, it finds which channel is jammed and in line 3, the preparation of backup and candidate channels for that interface is requested by invoking the module as described in Table 7
                        . Similar to the interference avoidance module, members of 
                           
                              S
                              (
                              
                                 u
                                 c
                                 i
                              
                              )
                           
                         are selected by matching the Neighbor_ID with the NbrID_on_Interface_i for 
                           
                              i
                              ϵ
                              {
                              1
                              ,
                              …
                              ,
                              I
                              }
                           
                        . Then, for each neighbor in 
                           
                              S
                              (
                              
                                 u
                                 c
                                 i
                              
                              )
                              ,
                           
                         stations compare the jammed channel Cjmd
                         to the neighbors’ channels. When a match is found , i.e., 
                           
                              
                                 C
                                 
                                    j
                                    m
                                    d
                                 
                              
                              =
                              
                                 c
                                 i
                              
                              ,
                           
                        
                        
                           
                              i
                              ϵ
                              {
                              1
                              ,
                              …
                              ,
                              I
                              }
                           
                         of the neighbor, channels 
                           
                              c
                              
                                 i
                                 +
                                 1
                              
                           
                         and 
                           
                              c
                              
                                 i
                                 +
                                 2
                              
                           
                         will be added to the list of eligible backup (L-BCH) and candidate (L-CCH) channels, respectively. When 
                           
                              
                                 C
                                 
                                    j
                                    m
                                    d
                                 
                              
                              =
                              
                                 c
                                 
                                    N
                                    
                                       I
                                       −
                                       1
                                    
                                 
                              
                              ,
                           
                         then 
                           
                              c
                              
                                 n
                                 I
                              
                           
                         and c
                        1 will be used in the respective lists. If 
                           
                              
                                 C
                                 
                                    j
                                    m
                                    d
                                 
                              
                              =
                              
                                 c
                                 
                                    n
                                    I
                                 
                              
                              ,
                           
                         then c
                        1 and c
                        2 will be used. This is done through the backup and candidate channel module, lines 2 to 14. According to lines 15 and 16, the most common channel from 
                           
                              S
                              (
                              
                                 u
                                 c
                                 i
                              
                              )
                           
                         become backup (BCH) and candidate (CCH) channel using L-BCH and L-CCH. 
                           3
                        
                        
                           3
                           Both BCH and CCH might be considered as backup channels. In our system where we have three interfaces, the BCH and CCH of a certain interface are the two channels used in the other two interfaces.
                         When the operating channel of an interface of a station is jammed due to the presence of neighbor users, it independently switches to the BCH. If the BCH is not available, that interface switches to the CCH. In the circumstance when both BCH and CCH channels are jammed, a new channel other than the BCH and CCH will be assigned to the interface using the rendezvous process.

For instance, for stations with three interfaces, if the jammed channel of a neighbor is the first interface, then the channels that its neighbor uses for its second and third interfaces will be added to the list of eligible backup and candidate channels, respectively. Then from the list of eligible backup and candidate channels, the station selects the most dominant ones from both lists and makes them the BCH and CCH for the jammed interface. Next, the station updates the Neighbor_Table and assigns the BCH to its interface. If this is also jammed, it tries the CCH. In case both are not available then a random channel will be assigned according to the rendezvous process.

The CA-JAM algorithm is described using an example. We first describe rendezvous, and then explain interference avoidance and jammer mitigation, concurrently. Assume a network of five stations, each with three interfaces. We chose the number of interfaces to be three, because it is suitable to show the working principle of CA-JAM with backup and candidate channel, as discussed below. The simulation follows this as well. Only one neighbor per interface is allowed (
                           
                              
                                 d
                                 
                                    o
                                    p
                                    t
                                 
                              
                              =
                              1
                           
                        ). First, each station selects a distinct random channel for all its interfaces as depicted in Fig. 3
                        a. When stations pick the same channel with their interfaces and exchange beacons for rendezvous, a communicating group ΘCG
                         is formed. Fig. 3b shows the processes of beacon exchange and rendezvous. For instance, station A on channel 1 with its interface 1, 
                           
                              
                                 A
                                 1
                                 1
                              
                              ,
                           
                         and station B on channel 1 with its interface 1, 
                           
                              
                                 B
                                 1
                                 1
                              
                              ,
                           
                         form communicating group ΘCG
                        . Similarly, other stations form more groups: 
                           
                              
                                 Θ
                                 
                                    C
                                    G
                                 
                              
                              =
                              
                                 {
                                 
                                    (
                                    
                                       A
                                       1
                                       1
                                    
                                    ,
                                    
                                       B
                                       1
                                       1
                                    
                                    )
                                 
                                 ,
                                 
                                    (
                                    
                                       B
                                       5
                                       3
                                    
                                    ,
                                    
                                       C
                                       5
                                       3
                                    
                                    )
                                 
                                 ,
                                 
                                    (
                                    
                                       C
                                       6
                                       1
                                    
                                    ,
                                    
                                       D
                                       6
                                       1
                                    
                                    )
                                 
                                 ,
                                 
                                    (
                                    
                                       D
                                       8
                                       2
                                    
                                    ,
                                    
                                       E
                                       8
                                       2
                                    
                                    )
                                 
                                 ,
                                 
                                    (
                                    
                                       C
                                       2
                                       2
                                    
                                    ,
                                    
                                       D
                                       2
                                       3
                                    
                                    ,
                                    
                                       E
                                       2
                                       3
                                    
                                    )
                                 
                                 }
                              
                           
                        . During beacon reception, each station updates its Neighbor_Table a nd Interface_Table. In this paper, we only show the tables of stations B and D due to the lack of space. Fig. 3c demonstrates the update procedure applied for stations B and D.

As a result of assignment and rendezvous process, station D has more neighbors on its interface 3 than it is allowed. Station D is aware of the situation using the information from the Interface_Table. In the mean time, suppose channel 1 between station A and B is jammed as depicted in Fig. 3d. The next step for station D is to check whether there are multiple links with all neighbors on interface 3. This condition exists because, station D is connected with C and E through interface 1 and 2, respectively. Therefore, station D switches to another channel to avoid interference and most likely switches to a channel that is common with one of its neighbors. Meanwhile, station B finds which interface of station A lost a link. Using this information, station B adds the channel of the second and third interfaces to the backup and candidate channel list (L-BCH = { 2 } and L-CCH = { 8 }). Because there is no other neighbor on this channel at the time of jamming, both lists only contain a single element, which implies these channels directly become backup 
                           
                              B
                              C
                              H
                              (
                              
                                 B
                                 1
                              
                              )
                              =
                              2
                           
                         and candidate 
                           
                              C
                              C
                              H
                              (
                              
                                 B
                                 1
                              
                              )
                              =
                              8
                           
                         channels. Hence, station B switches its interface one to channel 2. It is important to note that, if station D had not left channel 2, the interference in that channel could have been severe. Although it is not shown here station A follows the same procedure as B; therefore, interface 1 of station A switches to channel 7 to mitigate the jammer effect. As depicted in Fig. 3e, CA-JAM results in a more connected and less interfered network at the end of channel assignment and jammer mitigation. Finally, Fig. 3f shows the updates of the Neighbor_Table and Interface_Table for stations B and D.

When the above process is performed repeatedly, neighbors per interface will be equal to one. This shows that CA-JAM can find non-interfering tuples, similar to the MDCG, without the help of a central entity or use of CCC and manages to mitigate jamming. The CA-JAM algorithm fulfills the design considerations: interface-channel mapping, connectivity, and interference avoidance. However, not every station transmits and receives all the times. Thus, it is not important to have only one neighbor per each interface just to find non-interfering tuples. In addition, stations can benefit from having a few neighbors rather than only one. Therefore, it is essential to determine how many neighbors per each interface (dopt
                        ) is sufficient. In the next section, we will determine and show that one neighbor per interface is not the ideal solution through simulation.

@&#PERFORMANCE EVALUATION@&#

In this section, we discuss experimental results obtained from the OPNET simulator. Table 8 presents our simulation parameters. As per traffic, each station is configured with three traffic types and any station can choose to transmit at any time unless its beacon duration time. During transmission time stations transmit one packet of each traffic type; however, the next transmission time is determined by traffic distribution. Unless specified otherwise, the distribution of packet inter arrival time remains uniform for the entire evaluation. In constant distribution the inter arrival is fixed whereas in uniform distribution the inter-arrival time is varied between the min and max value.Since we modified 802.11a standard in OPNET, to show the improvement by using multiple interfaces, we compared the single-interface scenario with the multi-interface using the legacy IEEE 802.11a protocol. In Fig. 4
                     , we present the network throughput as a function of the number of stations for the IEEE 802.11a protocol to show the impact of using multiple interfaces. When stations were equipped with multiple interfaces, the network throughput increased compared with a single interface. This ensures the use of multiple interfaces increases the capacity of the network.


                     Fig. 5
                     
                      depicts network throughput as a function of the number of neighbors per interface. The result showed that the throughput was maximum when the number of neighbors was three. It is interesting to note that according to this result, in MANETs, increasing the number of station for a given area did not always provide better throughput, i.e., the throughput of 45 stations was better than that of 50 stations as shown in Fig. 5.

To see the effect of jamming attack on the ideal neighbor number per interface of the network, we kept the number of stations 45 and varied the number of jammed channels. The results are compared in Fig. 6
                     . As the number of jammers increased from zero to three, the ideal number of neighbors per interface remained three; however, the throughput decreased as the number of jammers increased. This explains that CA-JAM adapted to jamming attacks very well. To validate that a MIMC MANET benefits from assigning the ideal number of neighbors per interface, we measured the average number of hops taken by data packet before it reach its destination (see Fig. 7
                     ). Moreover, the connectivity of the network was better when the number of neighbors per interface was three (
                        
                           
                              d
                              
                                 o
                                 p
                                 t
                              
                           
                           =
                           3
                        
                     ). From Figs. 5–7, we have learned that the network performs better when the ideal number of neighbors per interface is three. Therefore, for the remaining evaluation, the number of neighbors per interface for CA-JAM was set to three, 
                        
                           
                              d
                              
                                 o
                                 p
                                 t
                              
                           
                           =
                           3
                        
                     .

Then we evaluated the performance of CA-JAM for different traffic generation patterns and routing protocols as shown in Fig. 8
                     . Intuitively, we had chosen AODV as a routing protocol for CA-JAM simulation, since it incurs less routing information exchange. We considered the traffic patterns as Poisson and Constant distribution with mean 2 as well as Uniform distribution during interval [1,110]. We used routing protocols, AODV and OLSR. When we compared the routing protocols under the same traffic pattern, AODV showed a better performance than OLSR in all traffic distributions. This motivated us to choose AODV as a routing protocol for most of the simulation. However, CA-JAM has flexibility to work with any routing protocol . On the other hand, we simulated with different traffic types to see if CA-JAM reacts to load variation. Fig. 8 evidently shows that CA-JAM can adapt to various traffic types, which shows how CA-JAM could scale as the load in the network increases or decreases. Thus, CA-JAM is proved to work under various traffic loads and routing protocols, which shows its flexibility and scalability.

The performance of CA-JAM was compared with other algorithms for multi-interfaced stations. We compared CA-JAM to MDCG as well as the IEEE 802.11a standard. This is because MDCG captures the MIMC network environment compared to the rest of works mentioned in Section 2. Besides, CA-JAM was also compared with random assignment to show that simple channel assignment does not give the best solution. For the random channel assignment, we modified the IEEE 802.11 system to assign channels randomly. We compared their throughput, number of re-transmissions, and delay. As shown in Fig. 9
                     , the throughput of CA-JAM was higher than the other schemes. While random assignment showed a better result for a small number of stations, it was neither consistent nor better than CA-JAM as the number of stations increased. In addition, this does not mean random is better than CA-JAM in terms of over all performance, which will be shown when we discuss jamming, delay and retransmission afterwards.

Following that, we measured the performance of all channel assignment schemes under jamming attack; jammers jam the network every 1ms and send a packet of 1024 bits. As shown in Fig. 10
                     , the throughput of CA-JAM was always highest and decreased gradually as the number of jammed channels increased. Since jammers can not jam the entire area and due to the data transmitted between consecutive jamming trials, some throughput was still achievable even though all six available channels were jammed. In fact, the throughput of CA-JAM was twice higher than the other schemes, when the network was under jamming attack.

We also compared the delay performance of CA-JAM with other schemes. As depicted in Fig. 11
                     , the delay of CA-JAM was always stable and low, whereas the delay of IEEE 802.11 was very high and unstable because there is no means of controlling interference in 802.11 system. When the number of stations are varied, 802.11 system only follows the network setup, when the setup is suitable the network is more connected and less interfered, which leads to lower delay. On the other hand, in unsuitable network set up stations in 802.11 interfere most of the time since they reside in the same channel which leads to transmission delay due to an unsent packet. This is not the case for MDCG and CA-JAM because these schemes have interference avoidance mechanism where as in random scheme stations reside in different channel, which makes it less prone to delay compared to 802.11 systems. Moreover, the delay of CA-JAM only increased by a very small margin, even when the number of stations increased. In a disconnected network, the number of re-transmission attempts becomes very high, because stations did not have many paths. In Fig. 12
                     , the number of re-transmission attempts showed similar behavior with the delay. These results confirmed that the network achieved better connectivity and exhibited smaller interference under the CA-JAM assignment. In Fig. 9 the random assignment had a favorable channel selection when the number of nodes as small. However, the throughput was enhanced at the cost of higher delay and retransmission as shown in Figs. 11 and 12 respectively. In addition, random assignment exhibits a lower performance under jamming attack. This means that, even when random selection has the favorable conditions, the overall performance of CA-JAM is better in terms of delay, retransmission and throughput as well as under jamming attack.

Finally, since our work was based on beacon exchange and multiple channels, we investigated the effect of these parameters on the network throughput. Although a longer beacon interval provided some benefit to the network with a higher number of stations, it did the opposite for a network with a smaller number of stations, as shown in Fig. 13
                     . This means, the overhead created by short beacon interval is small. The longer intervals results in inconsistency rather than smaller overheads. Therefore, the selection of making the beacon interval 1 ms was a desirable choice.

In addition, multiple channels with the right channel assignment improved the capacity of MANETs. However, even with a good channel assignment scheme, too many channels did not always create a better throughput. This was because stations took more time for rendezvous. Even when a rendezvous was achieved it was done with small number of neighbors per interface because interfaces of stations were distributed over many available channels. Fig. 14
                      shows the effect of number of channels in the network. For CA-JAM, the throughput increased until the number of channels was six, and then it started to decrease again. For the MDCG and random schemes, the highest throughput was achieved when the number of channels was seven. Despite the fact that MDCG and random assignments had a maximum throughput at this number of channels, the throughput of both schemes is still lower than the proposed CA-JAM. However, when the number of channels is fewer than the number of interfaces, the random scheme outperforms CA-JAM. Although the available channels cannot be able to accommodate any more partitioning, due to the working principles of CA-JAM, it requires stations to change channels frequently such that there is a balanced assignment, which is not the case in the random scheme. Therefore, CA-JAM is suitable for MANETs where the number of channels is always greater than the number of interfaces.

@&#CONCLUSION@&#

MANETs can be easily deployed to provide essential help in a military and disaster relief networks. However, the presence of jammers, harsh environment of war zone or the absence of central entity, such as access point, affect the performance of such networks. The performance of MANETs can be enhanced by deploying stations with multiple interfaces that operate on multiple channels. While the network benefits from multiple interfaces, it still had limitations due to poor channel utilization. To overcome this issue, we proposed CA-JAM algorithm, which is a channel assignment scheme that considers jammer mitigation as well. Our simulation results showed that CA-JAM provided higher throughput with reasonable delay and re-transmission. The results confirmed that the proposed algorithm could greatly enhance the network performance; thus making MANETs feasible to use in any desired environment.

Although our focus has been channel assignment and current routing protocols are designed for single interfaced MANETS, there is a room to enhance the performance by jointly integrating it with a routing protocol. Our future work will integrate channel assignment with routing to achieve a better performance and fully utilize MIMC feature. Also, we plan to implement our work with off the shelf 802.11 products, to test the performance of CA-JAM in the real environments.

@&#ACKNOWLEDGMENT@&#

This research was supported by the Ministry of Science, ICT and Future Planning (MSIP), Korea, under the Global IT Talent support program (IITP-2015-R06181510030001002) supervised by the Institute for Information and Communication Technology Promotion (IITP).

@&#REFERENCES@&#

