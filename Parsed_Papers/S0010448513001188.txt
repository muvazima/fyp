@&#MAIN-TITLE@&#Classification, representation, and automatic extraction of deformation features in sheet metal parts

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Classification, representation and extraction of deformation features addressed.


                        
                        
                           
                           Basic deformation features Bend and Wall defined as a specific arrangement of faces.


                        
                        
                           
                           Compound deformation features handled as a specific combination of Bends and Walls.


                        
                        
                           
                           Compound deformation features represented as a Basic Deformation Features Graph.


                        
                        
                           
                           Algorithms to extract basic features and compound features presented.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Deformation features

Sheet-metal

Walls

Bends

Feature classification

Feature extraction

@&#ABSTRACT@&#


               
               
                  This paper presents classification, representation and extraction of deformation features in sheet-metal parts. The thickness is constant for these shape features and hence these are also referred to as constant thickness features. The deformation feature is represented as a set of faces with a characteristic arrangement among the faces. Deformation of the base-sheet or forming of material creates Bends and Walls with respect to a base-sheet or a reference plane. These are referred to as Basic Deformation Features (BDFs). Compound deformation features having two or more BDFs are defined as characteristic combinations of Bends and Walls and represented as a graph called Basic Deformation Features Graph (BDFG). The graph, therefore, represents a compound deformation feature uniquely. The characteristic arrangement of the faces and type of bends belonging to the feature decide the type and nature of the deformation feature. Algorithms have been developed to extract and identify deformation features from a CAD model of sheet-metal parts. The proposed algorithm does not require folding and unfolding of the part as intermediate steps to recognize deformation features. Representations of typical features are illustrated and results of extracting these deformation features from typical sheet metal parts are presented and discussed.
               
            

@&#INTRODUCTION@&#

Constant thickness part models are encountered typically in two domains—injection molding and sheet-metal forming. Injection molding is widely used for manufacturing a variety of parts, from the smallest component to entire body panels for mechanical packaging. Sheet-metal has applications in automobile, aircraft, shipbuilding, HVAC works, medical equipment, architecture, farming, reactors, and roofs for building among many others. Since all injection molded features are not constant thickness features, the focus of this paper is restricted to the feature in the sheet metal forming domain.

Sheet-metal can be cut and/or bent into a variety of shapes. A sheet-metal part is a combination of a number of individual features and each feature is related to other directly or indirectly. Sheet metal objects have been considered as solid models with constant thickness  [1–3] or surface models  [4,5] in the literature. However features in a sheet-metal object are created by removal of material, deformation or cut partially followed by local deformation. Sheet-metal features are classified into the following two categories: 
                        
                           i.
                           
                              Deformation features: Deformation features are present in constant thickness part models, as a result of deformation of material, as forming of material to obtain sheet-metal parts. Features in a sheet metal are also referred to as constant thickness features  [2,3,6,7]. In this paper, the term deformation feature is used to refer features in a sheet metal part. Deformation features in constant thickness part model are not associated with addition or removal of volume. Examples of the deformation features are wall, bend, flange, jog, dimple, rib or bead, louver and lance. Some of these deformation features are illustrated in Fig. 1
                              .

These features are created by beading, bending, forming, folding, turning, joggling, embossing, lancing or louver operation. Example of sheet-metal deformation features are depicted in Fig. 1.


                              Cut features: These features are associated with removal of material and are created by cutting, punching, stamping, shearing, nibbling, sniping, notching, or clipping operation. Examples of sheet-metal cut features are hole, slot, cutout, chamfer, fillet, vent, notch, and clip (Fig. 2
                              ). Extraction and recognition of these features are discussed by Nalluri  [8], Devarajan et al.  [9], Lipson and Shpitalni  [2] and Liu et al.  [3]. Cut features are also referred to as volumetric features as they are associated with subtraction of volume.

It must be mentioned here that the deformation features shown above are distinct from free-form surface features (FFSFs) referred in the literature  [10]. While FFSFs are features that modify a free-form surface, deformation features in sheet-metal part are created by local deformation of a volume. The representation, classification and extraction of volumetric features can be found in literature  [2,3,8,9,11,12]. The representation, classification and extraction of FFSFs can also be found in literature  [10]. The representation, classification and extraction of the deformation features encountered in sheet-metal parts are presented in this paper.

A formal classification of deformation features and algorithms to extract them from a CAD model are important from the point of view of better integration with process planning and other applications such as cost estimation. In industry, customers and suppliers often use different CAD tools which use different terms with different meanings and formats. The translation of a model results in loss of the engineering information such as that contained in features that are crucial for the downstream applications. For example feature information such as type of feature, thickness and bend radius present in the model is required for generating manufacturing plans. A formal taxonomy of features is also useful in enabling automatic translation of feature information across applications and forms an important motivation for the present work. The focus of this paper is representation, classification and extraction of deformation features encountered in sheet-metal parts.

The main claim of the paper is a new classification and representation of deformation features of constant thickness. The paper also presents algorithms for automatic extraction of these features from a B-Rep of the part. Towards this objective the following new developments are reported.
                        
                           1.
                           Definition of basic deformation features Bend and Wall as a characteristic arrangement of faces.

Definition of compound deformation features as characteristic combinations of Bends and Walls.

Basic Deformation Features Graph (BDFG) to represent compound deformation features.

Algorithms to extract basic deformation features and compound deformation features from a B-Rep of a sheet metal part.

This paper is organized as follows. Section  2 reviews the literature related to deformation features in sheet-metal parts and their classification and extraction. Section  3 first describes the definition and classification scheme for deformation features. The representation of deformation features as BDFG is presented next. The details of the procedure developed for the extraction of deformation features from a sheet-metal part are presented in Section  4. Section  5 describes the implementation details and presents results for some example sheet-metal parts with typical features. Section  6 discusses the advantages and limitations of the proposed classification and extraction. The paper concludes with a summary of work done and future work using the proposed representation.

@&#RELATED WORK@&#

Representation and extraction of deformation features in constant thickness part model has not received much attention in literature. Many methods have been proposed for the recognition and representation of form features in solid models  [8,12–14], but only a few techniques have been reported by researchers to recognize deformation features, based on solid model  [1,3,15] or surface model  [2,5]. The literature in the area of extraction and representation of features from a sheet-metal part is reviewed.

Lipson and Shpitalni  [2] analyzed the topological properties of sheet-metal parts represented schematically by a structure of zero thickness facets connected with zero-radius bend lines and identified minimum number of required components such as, bend lines, connecting or weld lines, and flat patterns. They have proposed a topological invariant for sheet-metal parts and thin walled objects, and also proposed a set of topological operators as basic building blocks for representation of a sheet-metal part. The proposed topological invariant may be used to represent a sheet-metal part schematically from a topological point of view. Feature information is not explicitly available.

Liu et al.  [3] have classified features of sheet-metal parts into two categories. Cellular features that are basic features forming the sheet-metal part and composites that are features integrated as a whole by other kind of cellular features. Cellular features are further categorized as Primitives, Add-ons and Connects. Primitives are features that exist independently in the part such as Wall and Drawing features. Add-ons are features that are added to other features. Cutout, Hole, Slot and Lance are classified as Add-on features. Connects are features that act as a bridge between features. This classification is motivated by the need to use sheet metal features for automating the stamping process planning.

Classification for sheet-metal features has also been presented by Kannan and Shunmugam  [15]. Features in sheet-metal parts are broadly classified into four major classes—cut, stretched, drawn and bent. The major difference between stretched and drawn features is that a change in sheet thickness occurs in the stretching operation whereas uniform sheet thickness is maintained in the case of a drawing operation. However, for the sake of convenience in modeling, a uniform sheet thickness is used by designers for both features. Bent and cut features involve pure bending and pure shear respectively. Some features like internal flanges, require a cut feature before flange is produced. This classification is used to develop reasoning for automating manufacturing planning activities for 3D sheet metal components.

Lentz and Sowerby  [1] identified sheet-metal features as concave and convex regions and their intersections. Sheet-metal part is first represented by modified face-adjacency hypergraph (MFAH) and then the face nodes are searched for concave, convex and intersection regions. Algorithms for the extraction of such regions from a B-Rep model are outlined. Surface types associated with the feature face considered are only planar, partial cylinder, partial tabulated cylinder, and partial cone. Curvature properties on the surface of a sheet metal component are used for extracting features. Some types of intersection of concave and convex regions are also discussed. The aim of the work presented in the paper is to enable CAD/CAM integration.

Joshi and Dutta  [5] have identified the need for recognition of sheet-metal features and their selective suppression. Sheet-metal parts have a very small thickness and have been modeled using surfaces to specify the shape of the part. Freeform surface models are used to model sheet-metal components, such as automobile body parts. The paper presents techniques to query B-Rep of freeform surface model to recognize and suppress features, viz. hole, fillet and boss, from freeform surface models of automobile sheet-metal panels in B-Rep format. Rule-based techniques are used to recognize these features which were very limited in nature. The focus of the work was to achieve improvement in quality of automatically generated finite element meshes.

Liu et al.  [3] proposed a method for automatically extracting features from a 3-D solid model of a sheet-metal part. Some typical features such as Wall, Bending, Drawing, Hole, Slot, and Cutout are handled. These are described in terms of edges, faces, loops and are represented as graph based diagrams. A hierarchical structure is introduced to represent sheet-metal parts. The method presented in the paper  [3] does not recognize complex features such as flange and lance. Only 80% of the feature types defined in the paper can be extracted automatically. Different types of feature are extracted by different feature-matching algorithms. Features with planar and cylindrical faces only are handled.

Sunil and Pande  [16] proposed a method to recognize features from sheet-metal parts represented in.STL format. The feature taxonomy in sheet-metal parts is presented first, and then the recognition criteria are defined. The motivation for the classification is operations namely stamping, drawing, blanking, piercing and bending used for producing sheet-metal parts. The taxonomy does not cover geometric and topological variations in features for the classification. A feature on a surface is defined simply as a set of connected meaningful regions having a particular geometry. A region-based and edge-based segmentation method has been adopted to decompose the model into meaningful regions. In the method, the critical region edge detection algorithm is based on triangular shape attributes, such as dihedral angle, needle triangle and cap triangle. These however are not intrinsic attributes of shape and also depend in the choice of resolution of the tessellated representation. Geometrical properties of facets, edges and vertices such as Gauss and Mean curvatures at vertices, orientations of facet normals, aspect ratio of triangles, and dihedral angle are computed to identify and classify the regions. Feature recognition rules have been formulated for recognizing a variety of protrusion and depression features typically occurring on automotive sheet-metal panels.

A system for recognizing sheet-metal features from STEP format has been presented by Kannan and Shunmugam  [15]. The proposed feature recognition system identifies manufacturing features in a generic manner. Taking 3D model data in STEP AP-203 format as input to the feature recognition system, the central plane of the component is first generated. The proposed feature recognition methodology basically involves a rule-base that derives information from the topology, geometry and Boolean logic. These methods utilize the commonality in geometry of various features having the same manufacturing attributes and hence the same rule is applied for a given feature. Different types of manufacturing features such as cut, stretched, drawn and bent features are identified from the shape model. The proposed feature recognition system is used as input to the feature reasoning system proposed by Kannan and Shunmugam  [17] for generating manufacturing information such as flat pattern, locations of features, internal cuts and blank profiles, operation sequence, bending sequence.

Commercial tools for sheet-metal feature recognition such as Sheet-metal recognition library  [7] and FeatureWorks  [18] operate on boundary representation (B-Rep) of solid models and surface models. The algorithm for recognition needs thickness of the sheet-metal part and a reference face to initiate the recognition. Unfolding and folding are used as intermediate steps for the recognition of sheet-metal features. The recognized sheet-metal deformation features including Wall, Bend, Flange, and Stamp.

Most of the efforts in the literature have focused on extraction of sheet metal features for integrating with process planning. These efforts typically enumerate a list of features to be targeted. Classification of sheet metal features has been proposed by some researchers  [2,16] but these are based on either behavior of curvature locally or on the basis of information pertinent to process planning only. A formal structure as a basis for classifying these features has not been described so far. Moreover, algorithms for feature extraction require folding and unfolding of the part [2,7,17–19]. The algorithm for extraction of deformation features proposed here does away with the need to either fold or unfold the part.

The deformation features are classified and represented in terms of faces and adjacency relationships between them. Deformation of a base-sheet creates Bends and Walls with respect to the base-sheet. These Bends and Walls are referred to as basic deformation features (BDFs). The BDFs are similar to the Wall and Bend features proposed by Liu et al.  [3]. However in the classification proposed here, the Bend feature can have conical, spherical or toroidal faces in addition to the cylindrical faces supported by the classification of Liu et al.  [3]. As the features are based on arrangement of faces, two basic deformation features are separated by common edges between the features. Deformation features in constant thickness objects are defined uniquely as a sequence of Walls and Bends with a characteristic arrangement of faces and type of bends. The Basic Deformation Features Graph (BDFG) is used to represent the sequence, the characteristic arrangement of the faces and type of bends belonging in a feature. The classification of faces, deformation features and the BDFG for representing deformation features are described in the following sub-sections. Some of the terms used in the classification and representation are defined in the next section.

1. Thickness: It is the minimum of the shortest distances between pairs of faces that lie on the same type of surface having anti-parallel normals and not facing each other. Anti-parallel implies the normals have the same direction but opposite sense. The check for whether two faces are facing each other can be accomplished by checking if a ray along the oriented normal intersects the other face. Thickness is constant for a sheet-metal part. Thickness is illustrated in Fig. 3
                        .

Determination of thickness first involves identification of faces that have the same surface type and with anti-parallel normals. Since the number of faces lying on cylindrical, conical, spherical or toroidal surface are smaller than number of planar faces the thickness is determined as the minimum of shortest distances between pairs of concentric faces of similar surface type that have anti-parallel normals as in Fig. 3(b). This reduces the number of faces that need to be processed to determine the thickness.

2. End faces: Faces that are identified to have the minimum distance from other faces of same surface type with anti-parallel normals are called end faces as shown in Fig. 3.

3. Shell faces: Faces having at least two end faces as neighbors are classified as shell faces as shown in Fig. 3.

4. Wall and Bend as Basic Deformation Features (BDFs): Each pair of planar end faces forms a Wall; each pair of non-planar end faces forms a Bend. Wall and Bend features are shown in Fig. 4
                        . The end faces are classified as Wall end face or Bend end face depending on the surface type being planar or non-planar respectively.

5. Shared Faces: The adjacent faces of two or more contiguous basic deformation features in the object that are co-planar, are classified as shared faces (refer Fig. 5
                        (a)). A face, shared by two or more contiguous basic deformation features in the object is also referred to as shared face (Fig. 5(b)).

6. Created Faces: A face that belongs to only one basic deformation feature, and has no co-planar adjacent faces is classified as created face (Fig. 5).

7. Interior Shell Faces: Shell face of a feature that is incident on the inner edge loop of an end face in the object is called interior shell face. Shell faces contiguous to an interior shell face are also termed as interior shell faces. Fig. 6
                        (a) illustrates both types of interior shell faces.

8. Boundary Shell Faces: Shell face of a feature that is not interior shell face is termed as boundary shell face (Fig. 6(b)).

9. Base-feature: A BDF that has an end face having the maximum surface area amongst all faces in the part is denoted as the base-feature. A BDF with end face having inner loop is also considered as base-feature.

10. Type of Bend: A bend feature is classified as concave or convex based on the principal curvature of its end faces. If one principal curvature of an end face of a bend is positive and another principal curvature of the end face is positive or zero then that bend is classified as concave type. If one principal curvature of an end face of a bend is negative and another principal curvature of the end face is negative or zero then that bend is classified to as convex type. In constant thickness objects, both end faces associated with a bend will have similar variation in principal curvatures. Therefore, only one end face from the chain of connected end faces, at either end in a bend needs to be considered to decide the type of the bend in the feature. Fig. 7
                         illustrates both types of Bends. There can be third type of Bend which has one principal curvature of an end face of a bend is positive and another principal curvature of the end face is negative. This type of bend is not considered in the classification as these are not encountered in typical deformation feature in constant thickness objects.

11. SimpleBend: A Bend in a feature is a SimpleBend when it is the first bend in the feature or if the type of this Bend and previous Bend in the feature is same.

12. SBend: A Bend in a feature is a SBend when type of this Bend and previous Bend in the feature are different.

The faces in the object associated with an individual “deformation feature” are classified as follows: 
                           
                              
                                 Created End Faces (CEFs)—End faces in a deformation feature that are also created faces are termed as created end faces. The CEFs are further classified as Created Wall End Faces (CWEFs) and Created Bend End Faces (CBEFs) depending upon the basic deformation feature type responsible for its creation, as shown in Fig. 8
                                 (a). CBEFs are non-planar whereas CWEFs are planar. Examples of CWEFs are 1, 2 (Fig. 9
                                 (a)) and 1, 2 (Fig. 9(b)), CBEFs are 3, 4 (Fig. 9(a)) and 3, 4 (Fig. 9(b)).


                                 Shared Shell Faces (SSFs)—If a shell face in a feature is a shared face then the shell face is classified as shared shell face (SSF). Examples of shared shell faces are shown in Fig. 8. The SSFs are further classified as Boundary SSFs (BSSFs) or Interior SSFs (ISSFs) based on whether the SSF of a feature is boundary shell face or interior shell face. Examples of BSSFs are 
                                    
                                       {
                                       5
                                       ,
                                       6
                                       }
                                    
                                    ,
                                    
                                       {
                                       7
                                       ,
                                       8
                                       }
                                    
                                  in Fig. 9(a) and ISSFs are 
                                    
                                       {
                                       5
                                       ,
                                       6
                                       }
                                    
                                  in Fig. 9(b).


                                 Created Shell Faces (CSFs)—If a shell face in a feature is created face then the shell face is classified as created shell face (CSFs) as shown in Fig. 8(a). The CSFs are further classified as Boundary CSFs (BCSFs) or Interior CSFs (ICSFs) based on whether the CSF of a feature is boundary shell face or interior shell face. Example of BCSFs is face 9 in Fig. 9(a), ICSFs is face 7 in Fig. 9(b).

Since all features are defined in terms of only these six types of faces namely, CWEFs, CBEFs, BSSFs, ISSFs, BCSFs and ICSFs, feature definitions are consistent and amenable to automated reasoning. Hierarchical structure of classification of these faces in a deformation feature is shown in Fig. 10
                        . These six types of faces of each deformation feature, along with face adjacency relationships, are used to classify and define deformation features in a part model.

The definition of deformation feature enables distinction between the generic content and the non-generic content. This is similar to the definitions proposed for volumetric features  [8] and FFSFs  [10]. The overall form and shape of a feature are separated into type and shape. The generic classification of a deformation feature is based on its type and nature. This classification is called generic because each instance of a feature under type and nature can in turn have multiple instances based on variations in the geometric parameters such as angle of bend, length/height of flange. The generic content of a deformation feature is defined in terms of basic deformation features namely Wall and Bend and their characteristics. The number and type of shell faces determines whether the identified feature is generated by partially cutting and subsequent deformation or generated by only deformation of the sheet. Deformation features are classified and represented based on the characteristics of the shell faces and Bends. The six types of faces, CWEFs, CBEFs, BSSFs, ISSFs, BCSFs and ICSFs and two types of Bends in the feature capture the feature form.

The characteristics of shell faces and Bends of the features are used to classify the feature into classes based on three factors described in the following sub-sections. Hierarchy of classification criteria in the feature definition is depicted in Fig. 11
                        . The type is defined by the characteristics of shell faces of the feature, whereas nature is defined by type of Bends in the feature.

Deformation features are classified into four classes based on the number and arrangement of boundary shell faces as defined below:


                           Interior:

This class of features does not have boundary shell faces (BSSFs  =  0 and BCSFs  =  0) and is referred to as Interior features in the proposed taxonomy.


                           One side boundary:

This class of features has a single boundary shared shell face, implying that BSSFs  =  1 or the feature has BCSFs without BSSFs (BSSFs  =  0 and 
                              
                                 BCSFs
                              
                              >
                              0
                           ). This class of features is referred to as OneSideBoundary in the proposed taxonomy.


                           Corner boundary:

This class of features has two adjacent BSSFs. Since two adjacent faces meet at a corner, this class of features is referred to as CornerBoundary in the proposed taxonomy.


                           Through boundary:

This class of features has two non-adjacent BSSFs and is called ThroughBoundary feature in the proposed taxonomy.

Based on the number of interior shell faces (ICSFs and ISSFs), features are further classified into two sub-classes which capture the feature creation process. These two sub-classes are described below:


                           Pure deformation:

Features in this class have ISSFs  =  0 and ICSFs  =  0. This class of features is referred to as PureDeformation in the proposed taxonomy. A PureDeformation feature can be interior, boundary (one side, corner, through) based on number and arrangement of boundary shell faces in the feature. This class of features is generated by various stamping or forming processes. Features such as Dimple, Bead, Emboss, Surface stamp, Curved stamp, Circular stamp, Stiffening rib or Dart created by beading, bending, crimping, forming, folding, turning, joggling, and embossing operations belong to this category.


                           Partially cut and deformation:

Features in this class have one or more interior shell faces which correspond to the partially cutting and deformation of the cut portion. Therefore features with 
                              
                                 ISSFs
                              
                              >
                              0
                            and/or 
                              
                                 ICSFs
                              
                              >
                              0
                            belong to this class. This class of features is referred to as PartiallyCutDeformation feature in the proposed taxonomy. Features in this class are obtained by deforming a partially cut feature. Features created by lancing, louver operations belong to this category.

Deformation features are further divided into two sub-classes based on the type of bends in the feature. This factor captures the nature of the deformation features.

As described earlier, Bends in the feature can be of same type (either concave or convex) or different types (some Bends are concave and some are convex). These variations in type of bends in a deformation feature are captured as SimpleBend and SBend in the proposed taxonomy. A deformation feature with SimpleBend means all Bends in the feature have the same type. A deformation feature with SBend means the feature has at-least one Bend with different type than other Bends in the feature. These two types of Bends are called SimpleBend and SBend respectively. Example of features with SimpleBend are edge flange, hem flange, counter sink emboss, 90° lance, and angled lance. Examples of features with SBend are jog, bead, dimple, louver, arc lance, and bridge lance.

Each deformation feature is classified uniquely based on the combination of the above three attributes. This classification captures the geometric and topological variations in deformation features.

Compound deformation features in constant thickness part model are defined as characteristic combinations of basic deformation features and represented by the Basic Deformation Features Graph (BDFG). While Liu et al.  [3], use an analogous term composite features it may be noted that the subsequent classification of features under this category is not as rigorous as proposed here. Individual cellular features like Drawing, Lancing, Bridge are the combination of BDFs (Walls and Bends) and can also be classified as composites. So the taxonomy proposed in the paper  [3] does not give unique presentation for a feature. BDFG presented here captures sequence and connection of basic deformation features. A compound deformation feature is, therefore, defined uniquely in terms of the BDFG to define the feature in a part model. In the remainder of the paper, a compound deformation feature is referred to as a deformation feature.

Each node in the graph is a Wall or Bend and is represented by W or B respectively. Each edge represents the connectivity of the basic deformation features denoted by the nodes as shown in Fig. 12
                        . The first node in the graph represents the base-sheet or base-feature. The base feature is usually a Wall. Subsequent nodes are denoted by W or B representing a Wall or Bend respectively. A Wall is represented by the number and type of shell faces. A Bend is represented by number and type of Bends, and, the number and type of shell faces. Arrangement of Walls and Bends in the graph and the characteristics of the Bends and shell faces enable classification of deformation features.


                        Fig. 12(c) shows the matrix representation of the graph (Fig. 12(b)) for the part shown in Fig. 12(a), where W and B in the figure represent Wall and Bend respectively. The value of 1 (one) in a cell of the matrix indicates that the two basic deformation features are connected through a common edge. Since the matrix represents connectivity between basic deformation features, it is symmetric and therefore only the upper diagonal matrix is stored. For the sheet-metal part shown in Fig. 12(a), the BDFG stored as the string “W-B(1,SimpleBend,{2BSSFs})-W(1,{2BSSFs,1BCSFs})” which indicates the presence of one Bend between two Walls which has 2 BSSFs and is of SimpleBend type.

Other (Compound) deformation features (like jog, dimple, bead, rib, lance, and louver) can easily be expressed using BDFG. Some of the deformation features, their matrix representation and values of BDFG in the proposed representation are shown in Table 1
                        .

First example (second row) in Table 1 represents a feature with two bends of type SBend with 2 BSSFs and 1 BCSFs. As there are only 2 BSSFs and 1 BCSFs with bends type as SBend, the feature is classified as ThroughBoundary_PureDeformation_SBend (Fig. 13
                        (a)). Second example in Table 1 represents a feature with bends type as SBend without shell faces, the feature is classified as Interior_PureDeformation_SBend (Fig. 13(b)). Similarly, third example in the table represents feature with bends type as SBend with 1 ISSFs, the feature is classified as Interior_ PartiallyCutDeformation_SBend.

Flowchart for the recognition of deformation features is shown in Fig. 14
                     .

The extraction and identification of a deformation features from a STEP file of a part model is explained in the following steps.


                     Step  1. STEP file of the part is read to extract the B-Rep: FACE structure is used to store faces information extracted from the B-Rep of a sheet-metal part. The FACE structure is shown in Fig. 15
                     . The structure has five fields. Values of first four fields are extracted from the B-Rep of the part model.


                     Step  2. Find thickness of the part model: As explained in Section  3, the thickness is identified as minimum of shortest distances between pairs of non-planar faces that lie on the same type of surface having anti-parallel normals. Following steps are followed to find the thickness.
                        
                           i.
                           Initialize thickness to be a large number

For all non-planar faces 
                                 
                                    a.
                                    For all other non-planar faces 
                                          
                                             i.
                                             Check if its surface type is same as surface type of the selected face.

Check if it is concentric to the selected face with its normal in opposite direction.

Find shortest distance between the two faces

If 
                                                   
                                                      distance
                                                   
                                                   <
                                                   
                                                      thickness
                                                   
                                                , assign the distance to thickness.

Face does not have internal edge loop.

Face has at-least two end-faces as neighbors.


                     Step  4. Classify EndFaces: EndFaces are classified as CBEF if the surface type of the EndFace is non-planar else the EndFace is CWEF.


                     Step  5. Extract basic deformation features (BDFs):

For an EndFace, ShellFaces that are adjacent to the EndFace are identified. An EndFace that is a common neighbor of all the ShellFaces identified is extracted from the list of EndFaces. These faces, two EndFaces and adjacent ShellFaces, form a BDF. The type of BDF, Wall or Bend, is decided based on the type of the EndFace—CWEF or CBEF respectively. The above procedure is repeated to find other BDFs till all EndFaces have been visited.


                     Step  6. Classify ShellFace: ShellFaces are first classified as Shared or Created and then classified as Boundary or Interior as described in Section  3.2. The combination of this classification of ShellFaces creates four types of ShellFaces as BSSFs, BCSFs, ISSFs or ICSFs.


                     Step  7. Identify compound deformation features in the part and construct their BDFGs: The basic deformation features identified in Step 5 are processed by the Procedure ConstructBDFG() to identify compound deformation features in the part and construct BDFG for each compound feature. As the compound feature is a combination of BDFs, the procedure essentially starts from a wall and terminates when all the wall or bend features in the compound feature have been added to the BDFG.

The procedure to find BDFG starts with a base feature. The base feature is a Wall BDF, with its CEF having the maximum area and whose visit-flag is FALSE (implying that BDF is unvisited). Procedure Traverse() starts the traversal from the CEF of the base feature. If the CEF has an internal loop or a chain of edges with unvisited BDFs, presence of other compound feature(s) is indicated. Edge loop (
                        
                           
                              
                                 e
                              
                           
                           
                              1
                           
                        
                        ,
                        
                           
                              
                                 e
                              
                           
                           
                              2
                           
                        
                        ,
                        
                           
                              
                                 e
                              
                           
                           
                              3
                           
                        
                        ,
                        
                           
                              
                                 e
                              
                           
                           
                              4
                           
                        
                     ) and edge loop (
                        
                           
                              
                                 e
                              
                           
                           
                              5
                           
                        
                        ,
                        
                           
                              
                                 e
                              
                           
                           
                              6
                           
                        
                        ,
                        
                           
                              
                                 e
                              
                           
                           
                              7
                           
                        
                        ,
                        
                           
                              
                                 e
                              
                           
                           
                              8
                           
                        
                        ,
                        
                           
                              
                                 e
                              
                           
                           
                              9
                           
                        
                        ,
                        
                           
                              
                                 e
                              
                           
                           
                              10
                           
                        
                        ,
                        
                           
                              
                                 e
                              
                           
                           
                              11
                           
                        
                        ,
                        
                           
                              
                                 e
                              
                           
                           
                              12
                           
                        
                     ) shown in Fig. 16
                      illustrate an internal loop and a chain of edges respectively in the CEF of the BDF marked in the figure. A BDFG is initiated in each case with the current BDF and BDFs incident on the loop or chain are added to the BDFG. Termination of traversal occurs when there are no adjacent BDFs that are unvisited or if the adjacent face to the current BDF is a shell face. In all cases termination of traversal of a particular BDFG happens when there are no further adjacent unvisited BDFs or if the adjacent entity is a SSF. During this traversal each BDF added is checked for presence of either an inner loop or a chain. Such BDFs are left unvisited so that they are visited again to trace the corresponding compound feature.

Once the inner loop and/or chain on the BDF have been processed, it is checked if there are two parallel edges in the CEF that have an unvisited BDF incident on them respectively (edges 
                        
                           
                              
                                 e
                              
                           
                           
                              1
                           
                        
                      and 
                        
                           
                              
                                 e
                              
                           
                           
                              3
                           
                        
                      in Fig. 17
                     ). If such edges exist then a BDFG is initialized with these two BDFs. Traversal continues across edges parallel to the first pair of edges (edges 
                        
                           
                              
                                 e
                              
                           
                           
                              2
                           
                        
                      and 
                        
                           
                              
                                 e
                              
                           
                           
                              4
                           
                        
                      in Fig. 17) till termination conditions are satisfied.

The type of Bend (SimpleBend or SBend) and the number and type of ShellFaces in the deformation feature are determined and added to the graph.


                     
                        
                           
                              
                              
                                 
                                    
                                       Procedure ConstructBDFG (List of BDFs) 
                                          
                                             {
                                          
                                       
                                    
                                 
                                 
                                    
                                        Set visit-flag of all BDFs to FALSE
                                 
                                 
                                    
                                        while (BDFs with visit-flag = FALSE exist)
                                          
                                             {
                                          
                                       
                                    
                                 
                                 
                                    
                                        Let BaseFeature be unvisited Wall BDF having CEF with largest area
                                 
                                 
                                    
                                        BDFG = Traverse (CEF of BaseFeature)
                                 
                                 
                                    
                                       
                                       
                                          
                                             }
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             }
                                          
                                       
                                    
                                 
                                 
                                    
                                       Procedure Traverse (Face of BDF) 
                                          
                                             {
                                          
                                       
                                    
                                 
                                 
                                    
                                        if (Face has Internal Loop/Chain) 
                                          
                                             {
                                          
                                       
                                    
                                 
                                 
                                    
                                        Initialize BDFG with BDF
                                 
                                 
                                    
                                        Initialize Open-Edge-List with all edges in the internal loop/chain
                                 
                                 
                                    
                                        Set flag =  TRUE
                                    
                                 
                                 
                                    
                                        while (flag =  TRUE) 
                                          
                                             {
                                          
                                       
                                    
                                 
                                 
                                    
                                        for each edge in Open-Edge-List 
                                          
                                             {
                                          
                                       
                                    
                                 
                                 
                                    
                                        if (visit-flag of BDF incident on edge is FALSE)
                                          
                                             {
                                          
                                       
                                    
                                 
                                 
                                    
                                        add BDF to BDFG
                                 
                                 
                                    
                                        if (BDF has no chain OR no ring)
                                 
                                 
                                    
                                        add BDF to BDF-VISITED-LIST
                                 
                                 
                                    
                                       
                                       
                                          
                                             }
                                          
                                       
                                    
                                 
                                 
                                    
                                        elseif (face incident on edge is SSF)
                                 
                                 
                                    
                                        remove edge from Open-Edge-List
                                 
                                 
                                    
                                       
                                       
                                          
                                             }
                                          
                                          ∖
                                          
                                          
                                          ∖
                                        for
                                 
                                 
                                    
                                        update Open-Edge-List
                                 
                                 
                                    
                                        if (Open-Edge-List is not a chain/Internal loop)
                                 
                                 
                                    
                                        break;
                                 
                                 
                                    
                                        elseif Open-Edge-List is NULL
                                 
                                 
                                    
                                        flag = FALSE
                                 
                                 
                                    
                                       
                                       
                                          
                                             }
                                          
                                       
                                    
                                 
                                 
                                    
                                        if (flag = FALSE)
                                          
                                             {
                                          
                                       
                                    
                                 
                                 
                                    
                                        set visit-flag of all BDFs in BDF-VISITED-LIST to TRUE
                                 
                                 
                                    
                                        return(BDFG)
                                 
                                 
                                    
                                       
                                       
                                          
                                             }
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             }
                                          
                                       
                                    
                                 
                                 
                                    if (Face has pair of edges with incident BDF having visit-flag = FALSE)
                                          
                                             {
                                          
                                       
                                    
                                 
                                 
                                    
                                        if two edges are parallel and both have a Bend incident
                                          
                                             {
                                          
                                          ∖
                                          ∖
                                        entry through a wall only
                                 
                                 
                                    
                                        initialize BDFG with BDF containing the face
                                 
                                 
                                    
                                        add the two Bends to BDFG
                                 
                                 
                                    
                                        add edges in the two bends that are parallel to the original edges to Open-Edge-List
                                 
                                 
                                    
                                        set DIR = vector defining the parallel edges
                                 
                                 
                                    
                                        set flag =  TRUE
                                    
                                 
                                 
                                    
                                        while (flag =  TRUE) 
                                          
                                             {
                                          
                                       
                                    
                                 
                                 
                                    
                                        for each edge in Open-Edge-List
                                          
                                             {
                                          
                                       
                                    
                                 
                                 
                                    
                                        if (visit-flag of BDF incident on the edge is FALSE)
                                          
                                             {
                                          
                                       
                                    
                                 
                                 
                                    
                                        add the BDF to BDFG
                                 
                                 
                                    
                                        if (BDF has no chain OR no ring)
                                 
                                 
                                    
                                        add BDF to BDF-VISITED-LIST
                                 
                                 
                                    
                                        remove edge from Open-Edge-List
                                 
                                 
                                    
                                        add edge in the BDF parallel to DIR to Open-Edge-List
                                 
                                 
                                    
                                       
                                       
                                          
                                             }
                                          
                                       
                                    
                                 
                                 
                                    
                                        else // only options are incident on SSF or on visited BDF
                                 
                                 
                                    
                                        remove edge from Open-Edge-List
                                 
                                 
                                    
                                       
                                       
                                          
                                             }
                                          
                                        //for
                                 
                                 
                                    
                                        if Open-Edge-List is NULL
                                 
                                 
                                    
                                        flag = FALSE
                                 
                                 
                                    
                                       
                                       
                                          
                                             }
                                          
                                       
                                    
                                 
                                 
                                    
                                        if (flag = FALSE)
                                          
                                             {
                                          
                                       
                                    
                                 
                                 
                                    
                                        set visit-flag of all BDFs in BDF-VISITED-LIST to TRUE
                                 
                                 
                                    
                                        return(BDFG)
                                 
                                 
                                    
                                       
                                       
                                          
                                             }
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                          
                                             }
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                       
                                          
                                             }
                                          
                                       
                                    
                                 
                                 
                                    
                                        else 
                                          
                                             {
                                          
                                       
                                    
                                 
                                 
                                    
                                        if (all edges in the face are incident on BDFs whose visit-flag == TRUE OR incident on SSFs)
                                 
                                 
                                    
                                        Set visit-flag of BDF containing face = TRUE
                                 
                                 
                                    
                                       
                                       
                                          
                                             }
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             }
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                  


                     Step  8. Classify the feature: The characteristics of the feature’s shell faces and Bends are used to classify the feature into classes based on the three factors described in the previous Section  3.3. The BDFG constructed in Step 7 is used for the classification of the deformation features by the following steps.


                     
                        
                           (a)
                           This step is used to classify FeatureType as Interior, OneSideBoundary, CornerBoundary or ThroughBoundary based on number and arrangement of BSSFs and BCSFs in the BDFG. If total number of BSSFs and BCSFs in the BDFG is zero then the FeatureType is Interior. If total number of BSSFs in the graph is zero with one or more BCSFs then the FeatureType is OneSideBoundary. If total number of BSSFs in the graph is one with zero or more BCSFs then also the FeatureType is OneSideBoundary. If 2 BSSFs in the graph are adjacent then the FeatureType is CornerBoundary. Otherwise, the FeatureType it is ThroughBoundary.

This step is used to classify FeatureType as PureDeformation or PartiallyCutDeformation based on the number of ISSFs and ICSFs in the BDFG. If total number of ISSFs and ICSFs in the BDFG is zero then the FeatureType is PureDeformation else it is PartiallyCutDeformation.

This step is used to classify FeatureNature as SimpleBend or SBend based on the type of Bends in the BDFG. If any node in the graph has Bends type as ‘SBend’ then the FeatureNature is SBend’ else it is SingleBend.

The B-Rep model of the object is taken as input. Presently, representation of the part model in a neutral format (STEP) is processed. The input neutral format is read and processed to find Walls and Bends. The steps described in Section  4 for representation, classification and extraction of the deformation features from a B-Rep are implemented in the MATLAB environment.

Examples of sheet-metal objects used for testing along with the definitions and labels of the features extracted are shown in Fig. 18
                      and Table 2
                     . Rendered images of the input part model and feature labels in the part model are shown in Column 1 (under 2 sub-columns). Representation of the constructed BDFG is presented in Column 2 which is constructed using the extracted BDFs. Column 3 lists (under 6 sub-columns) characteristics of the shell faces and Bends type in the feature. Column 4 gives the label to the identified deformation feature as used in the taxonomy. The test cases used have been taken from the literature  [15–17].
                  

@&#DISCUSSION@&#

The proposed approach can recognize sheet-metal deformation features as characteristic combinations of Walls and Bends. The results show that sheet-metal features like Wall, Bend, Flange, Jog, Dimple, Louver, Rib or Bead and Lance have been identified and represented as BDFG. The deformation features are classified based on characteristics of shell faces and Bends type to capture the feature form and can also be used to define feature creation process. This classification is application independent and can be used for finding semantic equivalences  [11,20] for the feature being exchanged across applications.

The classification and extraction of sheet metal features is primarily based on the topology of the part. It is therefore believed that the surface type associated with the feature will not be a problem. The only issue might be with operations involving the normal of the faces. For curved surfaces the normal is not fixed over the face. Therefore the steps involving determination of relative orientation of the normal of two faces will need to identify a representative normal for these computations. Since sheet metal parts are unlikely to have wrap around surfaces, simple schemes based on plane of maximal span can be devised to determine the representative normal.

In the proposed approach it is possible to classify, represent and extract automatically complex features such as flange and lance. These features cannot be extracted by the method presented by Liu et al.  [3]. Features containing faces other than planar and cylindrical faces can also be handled by the proposed approach presented in this paper. Features with non-planar and non-cylindrical faces are not handled by Liu et al.  [3].

Following are the advantages of the proposed representation, classification and extraction of deformation features. 
                        
                           1.
                           Only a B-Rep of the part is required as input for extraction of deformation features. No additional information such as construction history or any user intervention is required. The geometric and topological information are first extracted and then used for classification and representation of deformation features.

Folding and unfolding of the object is not required to recognize deformation features. Several approaches available in literature  [2,15,17,19], use intermediate steps as unfolding and folding of the part to recognize deformation features. Commercially available tools  [7,18] also require unfolding and folding of the part to recognize deformation features. The unfolding and folding steps are computationally expensive as unfolding requires i. flattening of every bend, and ii. flattening of the part in the pre-defined reference face. Unfolded parts may have volumetric features like notches and cutouts that can be identified before identification of the deformation features.

The reference face is automatically selected based on the largest surface area of end face and the BDF associated with that end face is identified. The selected BDF is referred to as Base-feature. This is in contrast to literature  [3] and commercially available tools  [7,18]; where the user has to interactively identify a planar face in the part as a reference face to initiate the recognition process.

Part thickness does not have to be provided as input. It is automatically determined from the B-Rep of the part. Commercially available tools  [7,18] require the user to initiate the recognition. In other efforts in the literature, planar faces have to be provided to identify the thickness of the part  [3].

The proposed classification, representation and extraction of the deformation features are consistent with the classification, representation and extraction of the volumetric features  [8] and free-form surface features  [10]. Face characteristics are used for classification and representation of these shape features. Feature types in the classification are based on faces and their adjacency relationship. Feature nature in the classification is based on the curvature variations across entities (faces, edges) in the identified feature. This extension of the DIFF model that is consistent with volumetric features and FFSFs makes it more complete and useful for building an ontology of shape features for use in enabling semantic interoperability  [11].

The classification proposed here also enables a formal class structure for deformation features as depicted in Fig. 19
                              . The features’ definitions are structured to separate the generic content from the non-generic content. Generic content is classified as feature type and feature nature. The type and the nature have pre-defined parameters for classification and representation which are extracted automatically from the part model for a deformation feature as presented in this paper.

While abstractions of reduced dimensions (such as mid-surface) could reduce the effort in feature extraction, obtaining the mid-surface for complex parts is a problem. Geometry and topology information required for representation, classification and extraction of a deformation feature is explicitly available in B-Rep of a part model containing the feature. A B-Rep model obtained from a CAD system is therefore taken as the input for the feature extraction algorithm. This form of input is also useful from the perspective of building a reasoning framework of semantic interoperability  [11,20]. It must also be highlighted here that the features are defined and classified based on the geometry and topology only and not with respect to any domain. The intent here is to have a set of features that are basically shape centric so that other features of interest can be identified or mapped from these. This is possible as the features have a formal definition. The formal definition of features are also likely to be useful in enabling interoperability of product models containing sheet metal features.

Much of the processing required in feature extraction relies on the topology and therefore likely to be robust. The main geometric computation involves the determination of the relative orientation of the normals. In the implementation a small threshold is used to account for rounding off errors. However if the B-Rep were to be obtained by reconstruction from scanned data, the threshold would have to be set somewhat higher.

@&#CONCLUSIONS@&#

New representation, classification and extraction algorithms for deformation features in a constant thickness object have been developed. The deformation feature is represented as a set of faces which are available in the B-Rep along with the details of the relationship between these faces. This paper has proposed a new representation for deformation features that enables extraction and classification. Deformation features are classified into type and nature based on the characteristics of the feature’s ShellFaces and curvatures respectively. This representation and classification is consistent with volumetric and free-form surface features and has been defined in the DIFF model.

The proposed approach relies only on the information that can be automatically extracted from the geometry and topology of the model containing the feature. The proposed classification of deformation features can be used to develop an ontology to determine semantic equivalences for the feature to be exchanged, mapped and used across PLM applications and can also be used to capture feature creation process.


                     Table A.1 presents the information about the basic deformation features, the BDFG as well as the parameters that are used to identify the deformation feature. The parameters and BDFG extracted from the B-Rep are compared with the entries in each row to identify the corresponding feature.

@&#REFERENCES@&#

