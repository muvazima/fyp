@&#MAIN-TITLE@&#A literature-driven method to calculate similarities among diseases

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We proposed a novel method which calculates disease–disease similarity.


                        
                        
                           
                           The proposed method can be used in constructing of disease network.


                        
                        
                           
                           The proposed method discovered the largest number of answer disease pairs and showed lowest p-value when compared with other comparable methods.


                        
                        
                           
                           The proposed method can provide an insight of relationship between diseases.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Disease network

Disease–disease similarity

Biomedical text mining

@&#ABSTRACT@&#


               
               
                  Background
                  “Our lives are connected by a thousand invisible threads and along these sympathetic fibers, our actions run as causes and return to us as results”. It is Herman Melville's famous quote describing connections among human lives. To paraphrase the Melville's quote, diseases are connected by many functional threads and along these sympathetic fibers, diseases run as causes and return as results. The Melville's quote explains the reason for researching disease–disease similarity and disease network. Measuring similarities between diseases and constructing disease network can play an important role in disease function research and in disease treatment. To estimate disease–disease similarities, we proposed a novel literature-based method.
               
               
                  Methods and results
                  The proposed method extracted disease–gene relations and disease–drug relations from literature and used the frequencies of occurrence of the relations as features to calculate similarities among diseases. We also constructed disease network with top-ranking disease pairs from our method. The proposed method discovered a larger number of answer disease pairs than other comparable methods and showed the lowest p-value.
               
               
                  Conclusions
                  We presume that our method showed good results because of using literature data, using all possible gene symbols and drug names for features of a disease, and determining feature values of diseases with the frequencies of co-occurrence of two entities. The disease–disease similarities from the proposed method can be used in computational biology researches which use similarities among diseases.
               
            

@&#INTRODUCTION@&#

Diseases are functionally connected to one another. One gene can cause various diseases, or inhibiting protein translation by one miRNA can be a contributing factor to various diseases. Therefore, a person with a certain disease has a higher probability of getting functionally connected disease than normal people. By using the disease connection information, the possibility of a specific disease onset for a person can be predicted and it is a simple example showing how disease–disease similarity can be utilized for disease-related function research. Disease–disease similarity will be of much help to disease research. It can be useful for development of new drug by aiding in drug repositioning, for searching new genes related to disease, and it can increase efficiency of network analysis in disease-related function research by enhancing disease networks.

There are three primary approaches to get disease–disease similarity: function-based approaches [1–3] and semantic-based approaches [4–12], and hybrid approaches of combining previous two approaches [13]. To seek the disease–disease similarity, function-based approaches compare functionally related genes, pathways and biological processes, and semantic-based approaches find similarity between disease terms of ontology related to diseases. Hybrid approaches utilize both functional similarity and semantic similarity. Liu et al. [1] calculated disease–disease similarity using both genetic information from GAD (Genetic Association Database) and environmental etiological factors from MeSH (Medical Subject Headings). Suthram et al. [2] calculated disease–disease similarity using mRNA expression from GEO (Gene Expression Omnibus) database and protein–protein interaction from HPRD (Human Protein Reference Database). Mathur and Dinakarpandian [3] calculated disease–disease similarity using semantic similarity of biological process based on gene ontology. In Li's case [4], a software package for calculating disease–disease similarity was developed using semantic similarities among terms of disease ontology and in the software, 10 methods of seeking semantic similarity are applied to disease ontology in calculating disease–disease similarity. Lastly, Cheng's [13] is a hybrid approach, which first calculates association score utilizing a gene function network and disease-related gene set, and secondly calculates semantic score on disease ontology, and finally gets disease–disease similarity adding these two scores.

Many existing methods find disease–disease similarity using genetic information or semantic information on gene ontology but there are also other similar approaches. Goh et al. [14] constructed human disease network with gene–disease associations from OMIM (Online Mendelian Inheritance in Man) database. They made a connection between two diseases if the diseases shared at least one gene. Lee et al. [15] constructed bipartite human disease association network using shared metabolic pathways from KEGG (Kyoto Encyclopedia of Genes and Genomes) database. Two diseases are linked if mutated enzymes associated with them catalyze adjacent metabolic reactions. Goh's method and Lee's method are related to the proposed method, but they cannot calculate disease-disease similarity. Zhang et al. [16] created feature vectors for disease phenotypes by utilizing phenotype records and calculated cosine similarities among disease phenotypes using the feature vectors, and then developed a disease phenotype network. van Driel et al. [17] employed text mining approach to calculate similarities between diseases. MeSH terms were served as features, and the number of times the term was found in an OMIM record was counted for feature value. They used MeSH hierarchy and inverse document frequency measure to refine feature values. Lastly, similarity between two diseases was computed by the cosine of the angle between their corresponding feature vectors. Hamaneh et al. [18] calculated disease–disease similarity by considering information flow on disease-protein network. The disease–protein network was made by using disease–gene associations from CTD (The Comparative Toxicogenomics Database) database and protein–protein interactions from ppiTrim database. Proteins were treated as features of a disease, and feature value was defined by the expected number of visits by random walker on the disease–protein network. Then disease–disease similarity was calculated by the cosine of the angle similar to van Driel's method.

Biomedical term relations from literature (research papers) can also help calculate disease–disease similarity. We propose a new literature-based method LDDSim (Literature-Driven Disease Similarities) to measure disease similarity. The proposed method extracts disease–gene relations and disease–drug relations from literature, and with the number of those relations, it builds disease–gene matrix and disease–drug matrix. Then the method calculates disease–disease similarity utilizing mutual information between the two diseases. In addition to it, we constructed disease network using the disease similarities.

@&#METHODS@&#

In this paper, we proposed a method that calculates disease-disease similarity and developed a disease network using disease pairs having high similarity. We extracted 36,686 disease-gene relations and 25,721 disease–drug relations from 9,803,245 MEDLINE abstracts in between year 1980 and 2012 using 27,850 disease names, 61,304 gene symbols and 9388 drug names from PharmGKB database. After constructing disease–gene matrix and disease–drug matrix with these relations, similarities of 3,353,503 disease pairs were calculated using mutual information between diseases. We uploaded source code and data files of the proposed method to (http://embio.yonsei.ac.kr/files/hjkim/LDDSim/Kim_LDDSim.zip).

@&#OVERVIEW@&#

The proposed method has three steps to calculate disease–disease similarities (Fig. 1
                        ). First step is to extract disease–gene relations and disease–drug relations from literature using disease list, gene list, and drug list. Second step is to make disease–gene matrix and disease–drug matrix utilizing disease–gene relations and disease–drug relations which are the outcomes of the previous step. In the third step, disease–disease similarities are calculated by using mutual information among diseases from disease–gene matrix and from disease–drug matrix.

The purpose of the first step is to extract disease–gene relations and disease–drug relations from literature which have high possibility to have actual relations. If a disease name and a gene symbol or a disease name and a drug name are co-occurred in a sentence of literature, then we can assume that there is a relation between two entities (disease–gene or disease–drug). We extracted disease–gene relations and disease–drug relations using disease names, gene symbols, and drug names from PharmGKB (The Pharmacogenomics Knowledgebase). The two entities of relations are co-occurred in abstracts of MEDLINE (Medical Literature Analysis and Retrieval System Online) (Fig. 2
                        ). The extracted relations are used in the second step to get frequencies of occurrence in the literature of the certain relations.

After extracting disease–gene relations and disease–drug relations, the next step is making disease-gene matrix and disease–drug matrix with the relations. A value of each cell in the matrices can be computed by counting the number of co-occurrences of corresponding two entities in the abstracts of MEDLINE (Fig. 3
                        ). In the disease–gene matrix, the rows represent diseases and the columns represent genes. Similarly in the disease–drug matrix, the rows represent diseases and the columns represent drugs. Because a large value of two entities in a matrix indicates a high frequency of co-occurrences in literature, we can assume that the larger the value of two entities, the closer the relation of the two entities is. With the values of the matrices, we can quantitatively estimate which gene or drug has a close relation with the certain disease and we can utilize the values as the features to calculate disease–disease similarities.

The third step is a phase to compute closeness among diseases. We used mutual information [19] between every two diseases in the matrices to calculate disease–disease similarities (Fig. 4
                        ). There are a few methods to calculate similarity (Mutual information, Pearson correlation, Spearman correlation, etc.). We assumed the values of diseases can have non-linear relations, therefore we used mutual information because it can generally find non-linear relations as well as linear relations [20,21]. When calculating disease–disease similarity, we consider both mutual information from the disease–gene matrix and mutual information from the disease–drug matrix. But some diseases can have all zero values in a matrix which indicates that the disease did not co-occur with any genes or drugs in the literature. In this case, mutual information between those two diseases is not applicable, and thus we only used available mutual information. In other words, we calculated mutual information between two diseases when the both diseases do not have all zero values in a matrix (Table 1
                        ). Similarity between disease d
                        
                           m
                         and disease d
                        
                           n
                         can be described as below.
                           
                              
                                 
                                    S
                                    i
                                    m
                                    (
                                    
                                       d
                                       m
                                    
                                    ,
                                    
                                       d
                                       n
                                    
                                    )
                                    =
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         
                                                            M
                                                            
                                                               I
                                                               G
                                                            
                                                            (
                                                            
                                                               d
                                                               m
                                                            
                                                            ,
                                                            
                                                               d
                                                               n
                                                            
                                                            )
                                                            +
                                                            M
                                                            
                                                               I
                                                               R
                                                            
                                                            (
                                                            
                                                               d
                                                               m
                                                            
                                                            ,
                                                            
                                                               d
                                                               n
                                                            
                                                            )
                                                         
                                                         2
                                                      
                                                   
                                                
                                                
                                                   
                                                      ,
                                                       
                                                      if
                                                       
                                                      Condition
                                                      =
                                                      A
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      M
                                                      
                                                         I
                                                         G
                                                      
                                                      (
                                                      
                                                         d
                                                         m
                                                      
                                                      ,
                                                      
                                                         d
                                                         n
                                                      
                                                      )
                                                   
                                                
                                                
                                                   
                                                      ,
                                                      if
                                                       
                                                      Condition
                                                      =
                                                      B
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      M
                                                      
                                                         I
                                                         R
                                                      
                                                      (
                                                      
                                                         d
                                                         m
                                                      
                                                      ,
                                                      
                                                         d
                                                         n
                                                      
                                                      )
                                                   
                                                
                                                
                                                   
                                                      ,
                                                      if
                                                       
                                                      Condition
                                                      =
                                                      C
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      N
                                                      /
                                                      A
                                                   
                                                
                                                
                                                   
                                                      ,
                                                      otherwise
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                        MI
                        
                           G
                        (d
                        
                           m
                        , d
                        
                           n
                        )=mutual information between disease d
                        
                           m
                         and disease d
                        
                           n
                         in Disease–Gene matrix. MI
                        
                           R
                        (d
                        
                           m
                        , d
                        
                           n
                        )=mutual information between disease d
                        
                           m
                         and disease d
                        
                           n
                         in Disease–Drug matrix. Condition information is described in Table 1.

When calculating similarity between two diseases, we consider both mutual information from the disease–gene matrix and mutual information from the disease–drug matrix. However, if mutual information between two diseases in one matrix is not computable, then we can only use mutual information between the two diseases in the other matrix. If both mutual information from the two matrices are all available, the average value of the two mutual information is used for normalization.

@&#RESULTS@&#

The proposed method can calculate similarities of 3,353,503 disease pairs. We evaluated the statistics of our similarities with mean, median, min, max, and standard deviation (Table 2
                     ).

The statistics indicate that the similarities are generally very low and there are high similarity-outliers because the mean is much larger than the median. For that reason, we can assume that the high similarity-outliers are significant. We investigated the trend of the similarities to get the outliers (Fig. 5
                     ).

We arranged similarities from our method in descending order. The curve in the Fig. 5 shows that there are stiffly large differences in high-ranking disease pairs and small differences in low-ranking disease pairs. We concluded that approximately 2000 disease pairs out of 3,353,503 disease pairs are high similarity-outliers and they are considered to be significant. The sorted list of all 3,353,503 disease–disease similarities from the proposed method can be downloaded via (http://embio.yonsei.ac.kr/files/hjkim/LDDSim/LDDSim_list.txt).

Two validations were performed to verify the effectiveness of the proposed method. The first one is a test on how accurately the method predicts disease–disease similarity. For the second, as manually checking over top 30 disease–disease similarities, we analyzed whether there is a real relation between two diseases.

To verify how accurately the proposed method can predict disease–disease similarity, we prepared a test set that is a mix of answer disease pairs and random disease pairs, and checked how many answer disease pairs the top-ranking disease pairs can find by ranking in descending order based on the proposed disease similarities. Then the result was compared with other 8 comparable methods (Resnik [5], Lin [7], modified Resnik [8], modified Lin [8], Relevance [9], Graph information content [10], Wang [11], Information coefficient similarity [12]). These 8 comparable methods were performed by using “DOSim” R package (http://cran.r-project.org/web/packages/DOSim/) of CRAN (The Comprehensive R Archive Network). The PharmGKB database has 61,304 disease names and they can produce 1,879,059,556 disease pairs. However, the proposed method can not calculate the similarities of all the disease pairs since its calculation is based on the relations in the literature. Likewise, the comparable methods also cannot calculate the similarities of all the disease pairs either because their calculation is based on disease ontology. Hence, the test was performed with 311,790 disease pairs of which all the proposed method and the comparable methods can calculate the similarities in common. We can only use those shared disease pairs in comparison. Answer disease pairs are 70 disease pairs which were manually checked to have a high similarity [3,22]. Cheng [13] also verified his method using the 70 disease pairs as a benchmark set. In this experiment, among the manually checked 70 disease pairs, we chose 50 disease pairs of which all the proposed method and the comparable methods can calculate the similarities in common, and used them as the answer pairs. In other words, we have 70 manually checked answer pairs, and 50 disease pairs out of 70 answer pairs were found from 311,790 disease pairs. Therefore, we used the 50 disease pairs as answer pairs and made a test set with 1000 disease pairs. Except the 50 answer pairs, 950 disease pairs were selected randomly from 311,790 disease pairs to produce total 1000 disease pairs (50 answer pairs+950 random pairs) for a test set. Then each method carries the similarity calculation on the test set and we check how many answer disease pairs are included among top 50 disease pairs. Since the result can vary depending on the 950 randomly selected pairs, above process was performed over 10,000 times and we computed the average. Compared with the 50 top-ranking disease pairs of the comparable methods, the proposed method has the largest number of answer disease pairs and the lowest p-value (Table 3
                        ), and has the highest precision and recall (Fig. 6
                        ). When calculating precision and recall, top 50 disease pairs are classified as positives and the other 950 disease pairs are classified as negatives. Therefore, precision is equal to recall because the number of false positives is equal to the number of false negatives.

Since the number of answer disease pairs is 50 among 1000 test disease pairs, the expected number of answer disease pairs becomes 2.50 if 50 pairs are chosen randomly from the whole test pairs. The proposed method found 23.79 answer disease pairs which is the largest number, and the method showed 4.33×10−12 as a p-value which is the lowest value compared with the other comparable methods. Moreover, the proposed method showed 0.4759 as precision and recall, and it is higher than any other precision and recall of the other comparable methods.

We also did additional experiments to compare our method with van Driel's method [17] and Hamaneh's method [18]. Since the three methods use different databases, it is impossible to directly compare the three methods but to carry out the comparison with shared similarities between them. Our method can calculate similarities of 3,353,503 disease pairs, van Driel's method can calculate similarities of 12,900,660 disease pairs, and Hamaneh's method can calculate similarities of 3,039,345 disease pairs. Similarities of 87,300 disease pairs are shared between our method and van Driel's method, and similarities of 23,644 disease pairs are shared between our method and Hamaneh's method. We can only use those shared similarities to compare the three methods. We have 70 manually checked answer pairs, and 21 disease pairs out of 70 answer pairs were found from 87,300 disease pairs (ours – van Driel's), 9 disease pairs out of 70 answer pairs were found from 23,644 disease pairs (ours – Hamaneh's). We produced 10,000 test sets to evaluate the three methods. Each test set consists of 420 disease pairs (21 answer pairs+399 random pairs from 87,279 pairs) for the (ours – van Driel's) experiment and 180 disease pairs (9 answer pairs+171 random pairs from 23,635 pairs) for the (ours – Hamaneh's) experiment. Then we checked how many answer disease pairs are included among top disease pairs, and also checked p-value and precision (or recall) in 10,000 test sets similar to the previous experiment (Tables 4 and 5
                        
                        ).

The results show that the proposed method can discover the larger number of answer disease pairs than van Driel's method and Hamaneh's method. The proposed method also showed the lowest p-value and the highest precision (or recall) among the three methods.

In the first experiment, among 1000 disease pairs of a test set, we only searched answer pairs on 50 top-ranking disease pairs. That is because we tried to validate our method in a similar way to classification problems. There are 50 answer pairs in 1000 disease pairs and our method prioritizes the disease pairs. We can classify that 50 top-ranking pairs are answers and the other 950 pairs are automatically classified to ‘predicted to be not related’. Under this circumstance, we can get the number of true positives, false positives, true negatives and false negatives. Moreover, precision and recall can also be calculated as an index for validation. But we decided searching answers on every number of disease pairs is needed. We searched answers on every number of disease pairs of a test set [1–1000 for the first experiment, 1–420 for (ours – mimMiner) experiment, 1–180 for (ours – Hamaneh's) experiment] (Figs. 7–9
                        
                        
                        ).

The results of (ours – mimMiner) and (ours – Hamaneh's) show that our method LDDSim discovered the largest number of answer pairs in all the conditions. The result of the first experiment shows LDDSim is superior to the other methods when searching answers on 1 to nearly 200 top-ranking disease pairs but not in 200–700 intervals. Our method calculates disease–disease similarities and prioritizes the disease pairs. In prioritization problems, well-prioritizing in high position is important because we can find all the answers in low position eventually.

We also computed redundancy rate to compare CoutoLin and LDDSim because CoutoLin showed much better performance than LDDSim in 200–400 intervals in the previous experiment (Fig. 10
                        ).

Through the evaluation, we wanted to show LDDSim is a novel approach and it can discover different types of disease pairs when compared to CoutoLin. We checked redundancy of top-ranking disease pairs in comparing with the other seven comparable methods (Resnik, Lin, relevance, GIC, simIC, Wang, and CoutoResnik). The disease pairs from CoutoLin are more redundant with respect to the other seven methods than LDDSim. It indicates that LDDSim finds more novel disease pairs than CoutoLin.

The proposed method can calculate similarities of 3,353,503 disease pairs. Among them, top 30 disease pairs were manually checked to find whether they are actually related in literature (Table 6
                        ).

Literature search showed that 23 disease pairs among the top 30 disease pairs in the similarity are actually related. In addition, since the rest 7 disease pairs (“HIV, Cystic fibrosis”, “HIV, Diabetic retinopathy”, “Systemic lupus erythematosus, Cystic fibrosis”, “Retinitis pigmentosa, Cystic fibrosis”, “HIV, Retinitis pigmentosa”, “AIDS, Cystic fibrosis”, “Cystic fibrosis, Parkinson's disease”) have the high similarity in the proposed method, they are worth researching.

We assumed that the top disease pairs from the proposed method have high possibility to have actual relations. The top 167 disease pairs from our method which are the top 0.005% of the all 3,353,503 disease pairs are chosen and used to construct a disease network (Fig. 11
                        ). The edge strength among diseases and the betweenness centrality of diseases are described in the figure. The edge strength indicates closeness between two diseases and the betweenness centrality is an indicator of a disease's centrality in the network. And we also checked disease pairs from our method which cannot be found by direct text mining (Table 7
                        ). The proposed method employs disease–gene relations and disease–drug relations to calculate disease–disease similarity. We extracted disease–disease relations directly from the MEDLINE and compared the relations with the top 167 disease pairs from our method. The 90 disease pairs were found by direct text mining and the other 77 disease pairs were proved to be novel.

@&#DISCUSSION@&#

The proposed method extracts disease–gene relations and disease–drug relations from literature to get feature values of diseases utilizing frequency of occurrences of the relations. Then disease–disease similarities can be calculated by using the feature values. The proposed method discovered a larger number of answer disease pairs than other comparable methods and also found many actual disease pairs when manually checking the top-ranking disease pairs. We presume that our method showed good results for three reasons. First, we used literature data. Biomedical literatures contain a huge number of disease-related researches. When selecting two entities in a sentence of literature, it is very likely that the two entities are actually related. Our method also extracts disease–gene relations and disease–drug relations when two entities are co-occurred in a sentence, and therefore we believe it affects the performance of our method in a good way. Second, we used all possible gene symbols and drug names for features of a disease. The number of features and how to set up the features are crucial factors since the proposed method calculates similarities among diseases based on feature values of the diseases. If we use limited gene symbols or drugs or particular user-defined features, the results will be biased. Third, we determined feature values of diseases using the frequencies of co-occurrence of two entities which are disease and gene or disease and drug. We assumed using the frequencies of occurrence of a relation in the whole literatures as a feature value can make better results than using the number of a certain keyword in the specific disease-related literatures as a feature value.

In our method, both disease–gene matrix and disease–drug matrix are used to calculate the disease similarities. Therefore, investigation of the relative importance of the disease–gene and disease–drug co-occurrences is needed. We evaluated our method by using only one of the two matrices and compared the results with the hybrid method (Table 8
                     ).

The Table 8 shows that result of using disease–gene relations and result of using disease–drug relations are very similar. They both discovered approximately 11 answer pairs, showed about 0.004 as a p-value, and showed about 0.23 as a precision(or recall). However, when they are used together, the performance is dramatically improved. We cannot tell which one is better to make a good result but we can expect synergy effect when using both relations together. This is why both disease–gene matrix and disease–drug matrix are used together in the proposed method.

We also analyzed the disease network of the top 167 disease pairs from the proposed method (Table 9
                     ). The disease network is composed of 48 diseases and the diseases are connected by 167 edges. One disease node has about 7 neighbor disease nodes in average. The disease network is fairly centralized but has low density. It can tell us that there are degree differences within diseases and diseases with high degree are located in the core position of the disease network. We calculated betweenness centrality to find the diseases which have many neighbors and are located in the core position. The betweenness centrality of a node reflects the number of shortest paths from all nodes to all other nodes that pass through the given node and it is an indicator of a node's centrality in a network. Therefore, a disease with high betweenness centrality can be assumed as a highly influential disease. In other words, a patient infected with a disease with high betweenness centrality has high possibility to get infected with other diseases and it indicates that a disease with high betweenness centrality is worth researching. With reference to the disease network of the top 167 disease pairs from our method (Fig. 11), there are three diseases (HIV, Parkinson's disease, cystic fibrosis) which have outstanding betweenness centrality. Based on our common sense, it comes as no surprise that HIV is a high influential disease. HIV causes failure of immune system and allows opportunistic infections to flourish [66],“Opportunistic infections and their relationship to HIV/AIDS” from AIDS.gov (http://www.aids.gov/hiv-aids-basics/staying-healthy-with-hiv-aids/potential-related-health-problems/opportunistic-infections)]. Parkinson's disease is often accompanied by difficulty with eating and swallowing, digestive problems, depression, difficulties with memory and thought processes, muscle rigidity, low bone density, and osteoporosis [“Parkinson's disease” from University of Maryland Medical Center (http://umm.edu/health/medical/reports/articles/parkinsons-disease), “Symptoms & Complications” from Parkinson's NSW (http://www.parkinsonsnsw.org.au/about-parkinsons-disease/symptoms-complications)]. Acid reflux, sinusitis, joint pain and arthritis, low bone density, osteoporosis, and diabetes are possible complications of cystic fibrosis [“Additional complications” from Cystic Fibrosis Trust (http://www.cysticfibrosis.org.uk/about-cf/living-with-cystic-fibrosis/additional-complications)]. We believe these symptoms increase probability of getting infected with other diseases. In particular, both low bone density and osteoporosis are appeared in patients with HIV, patients with Parkinson's disease and patients with cystic fibrosis. It is assumed that a person with low bone density or osteoporosis has a risk to get infected with diseases.

@&#CONCLUSIONS@&#

We calculated disease–disease similarity using literature data. Our method discovered a larger number of answer disease pairs than other comparable methods and we manually checked that 15 disease pairs out of the top 20 disease pairs have actual relations. Moreover, we constructed literature-driven disease network with the top 167 disease pairs. We presume that our method showed good results because of using literature data, using all possible gene symbols and drug names for features of a disease, and determining feature values of diseases with the frequencies of co-occurrence of two entities. The disease–disease similarities from the proposed method can be used in computational biology researches which use similarities among diseases [67–69]. The disease network can give an insight of relationship between diseases. However, our method has a limitation on calculating similarities of all possible disease pairs because our method is based on literature data. The disease ontology data or OMIM (Online Mendelian Inheritance in Man) data can be complementary to literature data. Besides, we used a small answer set (the 70 disease pairs) as a gold standard. The 70 answer disease pairs are proved to have actual relationships and a larger verified answer set is not available at this moment. The results of this paper are derived from this small answer set and a larger answer set is required to make more significant results. Finding and utilizing new data sets will be one of our further works.

None declared.

@&#ACKNOWLEDGEMENTS@&#

This work was supported by the National Research Foundation of Korea (NRF) grant funded by the Korea government (MSIP) (NRF-2015R1A2A1A05001845). We also appreciate Mr. Junsik Kim's proofreading efforts.

@&#REFERENCES@&#

