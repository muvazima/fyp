@&#MAIN-TITLE@&#Systematic rateless erasure code for short messages transmission

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Systematic Random code reconstruct the original message with zero extra coded symbols if the first k coded symbols are received intact.


                        
                        
                           
                           Reconstruct the original message with 99.9% success probability using extra ten overhead symbols.


                        
                        
                           
                           In channels of low erasure probability, systematic Random code outperforms Random code in term of lesser extra coded symbols and decoding steps to achieve complete decoding.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Channel coding

Rateless erasure code

Short messages transmission

Networking

@&#ABSTRACT@&#


               
               
                  In this paper, we propose a systematic rateless erasure code, namely systematic Random (SYSR) code based on Random code for short messages transmission. Given a message of k symbols, the sender will first send the message to the receiver as Part I coded symbols. The rest of coded symbols starting from 
                        
                           
                              
                                 
                                    k
                                    +
                                    1
                                 
                              
                           
                        
                     th onwards are termed as Part II coded symbols and they are generated by adding the message symbols randomly (XOR operation). The receiver reconstructs the original message instantly if all the Part I coded symbols are received intact. Otherwise, the receiver reconstructs the original message from any 
                        
                           k
                           +
                           10
                        
                      coded symbols of Part I and II with high probability of complete decoding (PCD), i.e. 99.9% success probability. Though SYSR code inherits the high decoding complexity of Random code, i.e. 
                        
                           O
                           (
                           
                              
                                 k
                              
                              
                                 3
                              
                           
                           )
                        
                     , both analysis and simulation results show that SYSR code achieves better PCD and fewer decoding steps than Random code.
               
            

@&#INTRODUCTION@&#

The rateless erasure code (also known as fountain code) is a class of erasure code, where the sender generates potentially infinite number of coded symbols from a message of k symbols. Upon receiving k
                     
                        
                           
                              
                                 
                                    1
                                    +
                                    ∊
                                 
                              
                           
                        
                      coded symbols, the receiver reconstructs the original message with high probability of complete decoding (PCD), i.e. 99.9% success probability, where ∊ denotes the decoding inefficiency and 
                        
                           ∊
                           ⩾
                           0
                        
                     .

To improve the decoding performance, the systematic rateless erasure code uses the k symbols of the original message as the first part of the coded symbols and the rest are generated using a sequence of bit operations on the original message. Then, the receiver reconstructs the original message instantly if the first k coded symbols are received intact. In case of any lost symbols, the receiver will reconstruct the original message from the subsequent coded symbols.

Significant research effort has been channelled to study rateless erasure codes in data networks, such as the Internet [1,2], vehicular ad-hoc network (VANET) [3,4], and delay-tolerant network (DTN) [5]. However, majority of the traffic in the Internet are short messages of less than 10 packets [6] and the VANET’s messages are normally in a few hundred bytes [7]. The state-of-the-art rateless erasure codes (e.g. Luby Transform (LT) code [8] and Raptor code [9]) are inappropriate in the aforementioned networks due to their inefficiency in sending short messages. For example, the decoding inefficiency, ∊ is as high as 15% for the messages of thousands symbols [10] and it increases to about 30% when 
                        
                           k
                           =
                           100
                        
                      
                     [11]. Likewise, many non-systematic rateless erasure codes have been proposed for short messages transmission (cf. Section 2). These coding schemes require non-negligible decoding complexity even if all the coded symbols are received intact.

In this paper, we propose a systematic rateless erasure code, namely systematic Random code (SYSR code) that is built on top of random matrix (a matrix of randomly distributed binary values). Like typical systematic rateless erasure code, a message of k symbols will form part of the encoded symbols (termed as Part I coded symbols) and the rest of coded symbols from 
                        
                           k
                           +
                           1
                        
                     th onwards (termed as Part II coded symbols) are generated by adding the k message symbols randomly, i.e. multiplying the random matrix with the message. Therefore, SYSR code is able to reconstruct the original message instantly if the Part I coded symbols are received intact. Otherwise, the original message can still be reconstructed with high PCD from any 
                        
                           k
                           +
                           10
                        
                      coded symbols of Part I and II with high PCD.

Unlike the rateless erasure codes that reviewed in Section 2, the high PCD of SYSR code is invariant to message length and applicable to short messages e.g. 
                        
                           k
                           =
                           10
                        
                      symbols. Since random matrix is a widely used mathematical framework for coding theory, it is unsurprising that SYSR code looks similar to the network coding scheme in [12] at first glance. However, we point out that SYSR code is an erasure code that involves only sender and receiver whereas the network coding involves multiple network nodes cooperating in the encoding and decoding processes.

The remainder of the paper is structured as follows: The state-of-the-art rateless erasure codes and the properties of Random matrix to achieve full rank are discussed in Sections 2 and 3, respectively. Then, we propose SYSR code that is built on top of random matrix in Section 4 and the decoding process will be explained with an example. The PCD and decoding algorithm of SYSR code is analysed in Section 5 and the corresponding numerical results are presented in Section 6 alongside result with Random code and Stepping-Random (SR) code. Finally, we draw the conclusion in Section 7.

@&#RELATED WORK@&#

The erasure codes such as Reed-Solomon code is a fixed rate systematic erasure code [13]. Given a message of k symbols, the encoder will send the n coded symbols to the receiver, where the first k coded symbols belong to original message. Then, the receiver reconstructs the original message from any k out of n coded symbols, irrespective of the sequence and the code rate is 
                        
                           k
                           /
                           n
                        
                     .

Generally, erasure codes require the sender to learn the channel erasure probability before initiating the encoding process. If more than 
                        
                           k
                           -
                           n
                        
                      coded symbols are lost in the erasure channel, there is no way for the receiver to reconstruct the original message. In this case, the sender needs to identify the lost packets and retransmit them manually. Such phenomenon underutilises the bandwidth.

To address the aforementioned issue, Byers et al. propose the idea of rateless erasure code [14]. Given a message of k symbols, the rateless erasure code generates potentially infinite number of coded symbols. Then, the receiver reconstructs the original message from any 
                        
                           k
                           
                              
                                 
                                    1
                                    +
                                    ∊
                                 
                              
                           
                        
                      coded symbols with high PCD, where ∊ denotes the decoding inefficiency. The sender does not require prior knowledge of the channel condition. It will keep sending the packets (i.e. coded symbols) until the receiver has sufficient packets (i.e. 
                        
                           k
                           
                              
                                 
                                    1
                                    +
                                    ∊
                                 
                              
                           
                        
                     ) to reconstruct the original message.

Luby Transform (LT) code [8] is the first practical rateless erasure code in the literature. A coded symbol is generated by selecting a degree d from the degree distribution (i.e. Soliton distribution) randomly. Then, d distinct message symbols are selected randomly and added together. The performance of LT code relies on the careful design of the degree distribution, which it ensures at least a degree one coded symbol exists in each iteration of the message passing algorithm during the decoding process. Then, Shokrollahi [9] further improves the decoding complexity of LT code by introducing the pre-code stage into the encoding process.

The aforementioned state-of-the-art rateless erasure codes are only efficient for long messages. To address the need in transmitting short messages, Hyytia et al. [15] and Zhang and Hranilovic [16] modify the degree distribution of LT code, respectively in order to improve the efficiency for short messages transmission. According to the published results, Hytia et al. require three to four extra coded symbols on average in order for a message of eight symbols to achieve complete decoding. On the other hand, the algorithm proposed by Zhang and Hranilovic [16] need extra 12 coded symbols to reconstruct a message of 32 symbols with high PCD. However, the aforementioned rateless erasure codes are not systematic in nature as well as those in [17–19]. For comparison, we will show that the proposed SYSR code achieves high PCD in 
                        
                           k
                           +
                           10
                        
                      coded symbols, or an extra of 1.6 coded symbols in average in Sections 5 and 6. On the contrary, the coding schemes in [20–22] are the systematic rateless erasure codes but they are not optimised for short messages transmission.

Random code is a rateless erasure code that uses a random matrix as the generator (see Section 3). It is able to achieve high PCD with 
                        
                           k
                           +
                           10
                        
                      coded symbols with the trade-off of high decoding complexity, i.e. 
                        
                           O
                           
                              
                                 
                                    
                                       
                                          k
                                       
                                       
                                          3
                                       
                                    
                                 
                              
                           
                        
                      using Gaussian elimination. To the best of our understanding, the earliest discussion about Random code (properties of random matrix) is found in [23] and some relevant discussions about the PCD appear in [24,25].

Both Windowed code [10] and Stepping-Random (SR) code [26] are the non-systematic rateless erasure codes built on top of random matrix framework. Both of them reconstruct the original message from 
                        
                           k
                           +
                           10
                        
                      coded symbols with high PCD in lossy channel. In particular, Windowed code has an improved decoding complexity but with the trade-off of lower PCD. Moreover, extra coded symbols are required in the decoding process even if the first k coded symbols are received intact.

Meanwhile, SR code has a similar coding structure as SYSR code, where both of them have Part I and II coded symbols. However, the Part I coded symbols of SR code are generated with stepping code—a Gray code like structure, in which each generator row matrix is different from the previous one by one bit. For example, the first four rows of the generator matrix in Eq. (1) belongs the Part I and each of them is one bit different in sequential. The rest of Part II rows are random matrices with values denoted as 
                        
                           
                              
                                 g
                              
                              
                                 i
                                 ,
                                 j
                              
                           
                        
                     . 
                        
                           (1)
                           
                              
                                 
                                    
                                 
                              
                           
                        
                     
                  

Despite the fact that SR code is a non-systematic rateless erasure code, it is able to reconstruct the original message from the first k (Part I) coded symbols if they are received intact. Comparatively, the Part I coded symbols of SYSR code are the original message symbols and it reconstructs the original messages with fewer decoding steps in channel of low erasure probability. We will compare the performance of SYSR code with Random code and SR code in Section 6.

In this section, we briefly describe the properties for random matrix to attain full rank. They will be used to construct SYSR code in Section 4. The definitions of the important notations are presented in Table 1
                      for the ease of explanation throughout the paper.

The random matrix is a matrix with randomly distributed binary values. Let 
                           
                              
                                 
                                    G
                                 
                                 
                                    (
                                    k
                                    +
                                    m
                                    )
                                    ×
                                    k
                                 
                              
                           
                         be a random matrix of size 
                           
                              
                                 
                                    
                                       k
                                       +
                                       m
                                    
                                 
                              
                              ×
                              k
                           
                        . Kolchin’s theorem (Theorem 3.2.1 in [23]) states that the probability for random matrix 
                           
                              
                                 
                                    G
                                 
                                 
                                    (
                                    k
                                    +
                                    m
                                    )
                                    ×
                                    k
                                 
                              
                           
                         to have rank 
                           
                              k
                              -
                              s
                           
                         is
                           
                              (2)
                              
                                 Pr
                                 
                                    
                                       
                                          rank
                                          
                                             
                                                
                                                   
                                                      
                                                         G
                                                      
                                                      
                                                         (
                                                         k
                                                         +
                                                         m
                                                         )
                                                         ×
                                                         k
                                                      
                                                   
                                                
                                             
                                          
                                          =
                                          k
                                          -
                                          s
                                       
                                    
                                 
                                 →
                                 Q
                                 ,
                              
                           
                        where
                           
                              (3)
                              
                                 Q
                                 =
                                 
                                    
                                       2
                                    
                                    
                                       -
                                       s
                                       
                                          
                                             
                                                m
                                                +
                                                s
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∏
                                       
                                       
                                          i
                                          =
                                          s
                                          +
                                          1
                                       
                                       
                                          ∞
                                       
                                    
                                 
                                 
                                    
                                       
                                          1
                                          -
                                          
                                             
                                                1
                                             
                                             
                                                
                                                   
                                                      2
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∏
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          m
                                          +
                                          s
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             1
                                             -
                                             
                                                
                                                   1
                                                
                                                
                                                   
                                                      
                                                         2
                                                      
                                                      
                                                         i
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                    
                                       -
                                       1
                                    
                                 
                                 ,
                              
                           
                        for 
                           
                              s
                              ⩾
                              0
                              ,
                              m
                              ∈
                              Z
                           
                         and 
                           
                              m
                              +
                              s
                              ⩾
                              0
                           
                        .

A random matrix of 
                           
                              
                                 
                                    
                                       k
                                       +
                                       m
                                    
                                 
                              
                              ×
                              k
                           
                         is full rank if it has rank k, where m is the total additional rows. Therefore, Eq. (3) can be re-expressed as
                           
                              
                                 Pr
                                 
                                    
                                       
                                          rank
                                          
                                             
                                                
                                                   
                                                      
                                                         G
                                                      
                                                      
                                                         (
                                                         k
                                                         +
                                                         m
                                                         )
                                                         ×
                                                         k
                                                      
                                                   
                                                
                                             
                                          
                                          =
                                          k
                                       
                                    
                                 
                                 =
                                 
                                    
                                       Q
                                    
                                    
                                       kol
                                    
                                 
                                 
                                    
                                       
                                          m
                                       
                                    
                                 
                                 ,
                              
                           
                        where
                           
                              (4)
                              
                                 
                                    
                                       Q
                                    
                                    
                                       kol
                                    
                                 
                                 
                                    
                                       
                                          m
                                       
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∏
                                       
                                       
                                          i
                                          =
                                          m
                                          +
                                          1
                                       
                                       
                                          ∞
                                       
                                    
                                 
                                 
                                    
                                       
                                          1
                                          -
                                          
                                             
                                                1
                                             
                                             
                                                
                                                   
                                                      2
                                                   
                                                   
                                                      i
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 .
                              
                           
                        
                     

From Eq. (4), the probability for a random matrix to reach full rank with zero additional row is 
                           
                              
                                 
                                    Q
                                 
                                 
                                    kol
                                 
                              
                              
                                 
                                    
                                       0
                                    
                                 
                              
                              =
                              0.2888
                           
                         (see Table 2
                        ). Additionally, adding extra ten rows will improve the probability to 
                           
                              
                                 
                                    Q
                                 
                                 
                                    kol
                                 
                              
                              
                                 
                                    
                                       10
                                    
                                 
                              
                              =
                              0.9990
                           
                        .

Generally, Kolchin’s theorem is an asymptotic equation and it only explains the PCD of a random matrix when k is large. On the other hand, the work in [25] complements Kolchin’s theorem by showing that the random matrix (Random code) is able to achieve high PCD with 
                           
                              k
                              +
                              10
                           
                         coded symbols even for small k, i.e.
                           
                              (5)
                              
                                 Pr
                                 
                                    
                                       
                                          rank
                                          
                                             
                                                
                                                   
                                                      
                                                         G
                                                      
                                                      
                                                         (
                                                         k
                                                         +
                                                         m
                                                         )
                                                         ×
                                                         k
                                                      
                                                   
                                                
                                             
                                          
                                          =
                                          k
                                       
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          k
                                          -
                                          m
                                          -
                                          1
                                       
                                    
                                 
                                 
                                    
                                       
                                          1
                                          -
                                          
                                             
                                                2
                                             
                                             
                                                i
                                                -
                                                k
                                             
                                          
                                       
                                    
                                 
                                 .
                              
                           
                        
                     

Kolchin’s theorem expresses the rankness of a matrix as a cumulative distribution function (CDF). Let 
                           
                              
                                 
                                    P
                                 
                                 
                                    kol
                                 
                              
                              
                                 
                                    
                                       m
                                    
                                 
                              
                              =
                              
                                 
                                    Q
                                 
                                 
                                    kol
                                 
                              
                              
                                 
                                    
                                       m
                                    
                                 
                              
                              -
                              
                                 
                                    Q
                                 
                                 
                                    kol
                                 
                              
                              
                                 
                                    
                                       m
                                       -
                                       1
                                    
                                 
                              
                           
                         be the probability mass function (PMF) for random matrix to reach full rank with m extra row and 
                           
                              
                                 
                                    P
                                 
                                 
                                    kol
                                 
                              
                              
                                 
                                    
                                       0
                                    
                                 
                              
                              =
                              
                                 
                                    Q
                                 
                                 
                                    kol
                                 
                              
                              
                                 
                                    
                                       0
                                    
                                 
                              
                           
                        . Accordingly, the expected extra rows needed for the random matrix to reach full rank is
                           
                              (6)
                              
                                 E
                                 
                                    
                                       
                                          rank
                                          
                                             
                                                
                                                   
                                                      
                                                         G
                                                      
                                                      
                                                         (
                                                         k
                                                         +
                                                         m
                                                         )
                                                         ×
                                                         k
                                                      
                                                   
                                                
                                             
                                          
                                          =
                                          k
                                       
                                    
                                 
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          m
                                          =
                                          0
                                       
                                       
                                          ∞
                                       
                                    
                                 
                                 
                                    
                                       mP
                                    
                                    
                                       kol
                                    
                                 
                                 
                                    
                                       
                                          m
                                       
                                    
                                 
                                 ≈
                                 1.6067
                                 ,
                              
                           
                        i.e. 1.6 extra rows are needed on average for a random matrix to reach full rank.

We propose a systematic rateless erasure code, namely systematic Random (SYSR) code that is built on top of random matrix framework. SYSR code outperforms Random code in erasure channels with low error rate and perform as good as Random code in a very lossy channel (e.g. erasure probability, 
                        
                           ρ
                           =
                           0.5
                        
                     ). We will elaborate the decoding process with an example for the ease of explanation. The performance analysis will be presented in Section 5 and the numerical results in Section 6.

In the encoding process, SYSR code generates two types of coded symbols:
                           
                              •
                              The first k coded symbols are the original message symbols and they are termed as Part I coded symbols.

The coded symbols starting from 
                                    
                                       
                                          
                                             
                                                k
                                                +
                                                1
                                             
                                          
                                       
                                    
                                 th onwards are termed as Part II coded symbols and they are generated with random matrix.

A message of k symbols with each symbol size l bits is denoted as a matrix of dimensions 
                           
                              k
                              ×
                              l
                           
                        , i.e. 
                           
                              
                                 
                                    M
                                 
                                 
                                    k
                                    ×
                                    l
                                 
                              
                           
                        . The Part I coded symbols are the original message symbols and its generator matrix is an identity matrix. Then, each Part II coded symbol (coded row matrix) 
                           
                              
                                 
                                    X
                                 
                                 
                                    1
                                    ×
                                    l
                                 
                              
                           
                         is independently generated by multiplying a random row matrix 
                           
                              
                                 
                                    G
                                 
                                 
                                    1
                                    ×
                                    k
                                 
                              
                           
                         with 
                           
                              
                                 
                                    M
                                 
                                 
                                    k
                                    ×
                                    l
                                 
                              
                           
                        , i.e.
                           
                              (7)
                              
                                 
                                    
                                       X
                                    
                                    
                                       1
                                       ×
                                       l
                                    
                                 
                                 =
                                 
                                    
                                       G
                                    
                                    
                                       1
                                       ×
                                       k
                                    
                                 
                                 ×
                                 
                                    
                                       M
                                    
                                    
                                       k
                                       ×
                                       l
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         g
                                                      
                                                      
                                                         0
                                                         ,
                                                         0
                                                      
                                                   
                                                
                                                
                                                   …
                                                
                                                
                                                   
                                                      
                                                         g
                                                      
                                                      
                                                         0
                                                         ,
                                                         k
                                                         -
                                                         1
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 ×
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         m
                                                      
                                                      
                                                         0
                                                         ,
                                                         0
                                                      
                                                   
                                                
                                                
                                                   …
                                                
                                                
                                                   
                                                      
                                                         m
                                                      
                                                      
                                                         0
                                                         ,
                                                         l
                                                         -
                                                         1
                                                      
                                                   
                                                
                                             
                                             
                                                
                                                   ⋮
                                                
                                                
                                                   ⋱
                                                
                                                
                                                   ⋮
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         m
                                                      
                                                      
                                                         k
                                                         -
                                                         1
                                                         ,
                                                         0
                                                      
                                                   
                                                
                                                
                                                   …
                                                
                                                
                                                   
                                                      
                                                         m
                                                      
                                                      
                                                         k
                                                         -
                                                         1
                                                         ,
                                                         l
                                                         -
                                                         1
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 =
                                 
                                    
                                       
                                          
                                             
                                                
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         0
                                                         ,
                                                         0
                                                      
                                                   
                                                
                                                
                                                   …
                                                
                                                
                                                   
                                                      
                                                         x
                                                      
                                                      
                                                         0
                                                         ,
                                                         l
                                                         -
                                                         1
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           
                        
                     

We assume that the receiver will receive both the coded symbol 
                           
                              
                                 
                                    X
                                 
                                 
                                    1
                                    ×
                                    l
                                 
                              
                           
                         and the corresponding generator matrix 
                           
                              
                                 
                                    G
                                 
                                 
                                    1
                                    ×
                                    k
                                 
                              
                           
                         at the same time as they are embedded in the same packet during the transmission. Subsequently, the receiver reconstructs the original message with Gaussian elimination when it has full rank generator matrix.

Since the Part I coded symbols are the original message symbols, the decoding process is completed instantly if they are received intact. Otherwise, at least 
                           
                              k
                              +
                              10
                           
                         of Part I and II coded symbols are required in order to reconstruct the original message with high PCD.

Assume that the receiver has received α Part I coded symbols and 
                           
                              k
                              +
                              10
                              -
                              α
                           
                         Part II coded symbols from the lossy erasure channel. Augmenting the coded symbol matrices 
                           
                              
                                 
                                    X
                                 
                                 
                                    (
                                    k
                                    +
                                    10
                                    )
                                    ×
                                    l
                                 
                              
                           
                         with their respective generator row matrices 
                           
                              
                                 
                                    G
                                 
                                 
                                    (
                                    k
                                    +
                                    10
                                    )
                                    ×
                                    k
                                 
                              
                           
                         and express them as
                           
                              (8)
                              
                                 
                                    
                                       
                                    
                                 
                              
                           
                        where 
                           
                              
                                 
                                    g
                                 
                                 
                                    i
                                    ,
                                    j
                                 
                              
                           
                         (
                           
                              
                                 
                                    x
                                 
                                 
                                    i
                                    ,
                                    j
                                 
                              
                           
                        ) denotes the ith row jth entry in the generator matrix (coded symbol matrix). We use the tilde notations (e.g. 
                           
                              
                                 
                                    g
                                 
                                 
                                    ̃
                                 
                              
                           
                         and 
                           
                              
                                 
                                    x
                                 
                                 
                                    ̃
                                 
                              
                           
                        ) to denote the Part I row matrices.

Before reconstructing the original message with Gaussian elimination, we apply the following steps to reduce the dimensions of the augmented matrix.
                           
                              
                                 Step 1:
                              Identify a Part I generator row matrix. Then, denote the position of the selected Part I generator as row i and its non-zero entry at column j.

Add (XOR) row i of both generator and coded symbols row matrices to those Part II row matrices, for which their j entries are non-zero.

Remove row i and column j from the augmented matrix.

Repeat from Step 1 until all the Part I row matrices are removed.

We illustrate the matrix reduction with an example as follows. Assume a message of 
                           
                              k
                              =
                              4
                           
                         symbols and symbol size 
                           
                              l
                              =
                              2
                           
                        . The receiver has 
                           
                              α
                              =
                              2
                           
                         Part I coded symbols and 
                           
                              k
                              +
                              10
                              -
                              α
                              =
                              12
                           
                         Part II coded symbols. Then, the augmented matrix can be represented as
                           
                              (9)
                              
                                 
                                    
                                       
                                    
                                 
                              
                           
                        Note that the first two row matrices belong to Part I and the rest are Part II. Some values of the augmented matrix are defined explicitly as 0 and 1 for ease of explanation.

In Step 1, we select the first Part I coded symbol in the generator matrix and its first entry is non-zero, i.e. 
                           
                              i
                              =
                              0
                           
                         and 
                           
                              j
                              =
                              0
                           
                        . In Step 2, we add row i to those Part II rows, in which their j entries are non-zero. Then, row i and column j are removed as instructed in Step 3. The remaining augmented matrix becomes
                           
                              (10)
                              
                                 
                                    
                                       
                                    
                                 
                              
                           
                        
                     

We still have one Part I coded symbol at second row (
                           
                              i
                              =
                              1
                           
                        ). Hence, we repeat Step 1 and Step 2, adding row i to the rest of Part II rows that have non-zero values in entries j. After Step 3, we have
                           
                              (11)
                              
                                 
                                    
                                       
                                    
                                 
                              
                           
                        Since there is no more Part I coded symbol, the Gaussian elimination will process the rest of the generator matrix of dimensions 
                           
                              12
                              ×
                              2
                           
                         (augmented matrix of dimensions 
                           
                              12
                              ×
                              4
                           
                        ) as usual.

This section analyses the performance of SYSR code in terms of PCD and its decoding algorithm (total number of XOR row operations).

Recall that there are two cases in the decoding process:
                           
                              •
                              Case I: Receive all the Part I coded symbols intact and the message is reconstructed instantly.

Case II: Receive total of 
                                    
                                       k
                                       +
                                       10
                                    
                                  Part I and II coded symbols and the message is reconstructed with high PCD.

Given the channel erasure probability ρ, the probability that Case I occurs is a binomial function, 
                           
                              Binom
                              
                                 
                                    
                                       0
                                       ,
                                       k
                                       ,
                                       ρ
                                    
                                 
                              
                           
                        . Correspondingly, the probability that Case II occurs is multiplication of 
                           
                              1
                              -
                              Binom
                              
                                 
                                    
                                       0
                                       ,
                                       k
                                       ,
                                       ρ
                                    
                                 
                              
                           
                         with Random code’s PCD equation (Eq. (4)). Hence, given a message of k symbols, the probability for SYSR code to achieve complete decoding with m extra coded symbols with channel erasure probability, ρ is
                           
                              (12)
                              
                                 
                                    
                                       Q
                                    
                                    
                                       SYSR
                                    
                                 
                                 
                                    
                                       
                                          m
                                          ,
                                          k
                                          ,
                                          ρ
                                       
                                    
                                 
                                 =
                                 Binom
                                 
                                    
                                       
                                          0
                                          ,
                                          k
                                          ,
                                          ρ
                                       
                                    
                                 
                                 -
                                 
                                    
                                       
                                          1
                                          -
                                          Binom
                                          
                                             
                                                
                                                   0
                                                   ,
                                                   k
                                                   ,
                                                   ρ
                                                
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       Q
                                    
                                    
                                       kol
                                    
                                 
                                 
                                    
                                       
                                          m
                                       
                                    
                                 
                                 .
                              
                           
                        
                     

The PMF of the SYSR code is
                           
                              (13)
                              
                                 
                                    
                                       P
                                    
                                    
                                       SYSR
                                    
                                 
                                 
                                    
                                       
                                          m
                                          ,
                                          k
                                          ,
                                          ρ
                                       
                                    
                                 
                                 =
                                 
                                    
                                       Q
                                    
                                    
                                       SYSR
                                    
                                 
                                 
                                    
                                       
                                          m
                                          ,
                                          k
                                          ,
                                          ρ
                                       
                                    
                                 
                                 -
                                 
                                    
                                       Q
                                    
                                    
                                       SYSR
                                    
                                 
                                 
                                    
                                       
                                          m
                                          -
                                          1
                                          ,
                                          k
                                          ,
                                          ρ
                                       
                                    
                                 
                                 ,
                              
                           
                        and
                           
                              
                                 
                                    
                                       P
                                    
                                    
                                       SYSR
                                    
                                 
                                 
                                    
                                       
                                          0
                                          ,
                                          k
                                          ,
                                          ρ
                                       
                                    
                                 
                                 =
                                 
                                    
                                       Q
                                    
                                    
                                       SYSR
                                    
                                 
                                 
                                    
                                       
                                          0
                                          ,
                                          k
                                          ,
                                          ρ
                                       
                                    
                                 
                                 .
                              
                           
                        Then, the expected extra coded symbols can be expressed as 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    m
                                    =
                                    0
                                 
                                 
                                    ∞
                                 
                              
                              
                                 
                                    mP
                                 
                                 
                                    SYSR
                                 
                              
                              
                                 
                                    
                                       m
                                       ,
                                       k
                                       ,
                                       ρ
                                    
                                 
                              
                           
                        .

The PCD of SYSR code for 
                           
                              k
                              =
                              10
                           
                         and 50 with increasing m are presented in Table 3. Generally, SYSR code has a higher PCD than Random code for the same m when both ρ and k are small (comparing PCD in Tables 2 and 3
                        ). Both codes have about the same PCD when ρ and k increase. Same observation is found on expected values presented in Table 4
                         where 1.6 extra coded symbols are required when ρ and k increase.

Generally, Gaussian elimination involves two algorithms—transforming the generator matrix (augmented matrix) into an upper triangular matrix and subsequently to an identity matrix with backward substitution. We will present the pseudo-codes for Random code and SYSR code to form upper triangular matrices in this section and Section 5.3, respectively. Note that both codes employ the same backward substitution and hence it will not be discussed in this paper.


                        Algorithm 1 and its corresponding flow chart in Fig. 1
                         present the process of forming an upper triangular matrix. The parameter randMat represents the generator matrix. In brief, the variable resultMat in second line represents a blank matrix and we will add the pivoting rows (the row with the first non-zero element at ith entry) to it later on.

The for-loop in lines 3–11 will loop through the k columns of the generator matrix in order to select the ith pivoting rows in each iteration (line 4). Then, the pivoting row will be moved from the randMat to the resultMat (line 5). Next, it searches the remaining rows in randMat, for which their ith entries are non-zero and XORs them with the pivoting row (line 8). At the end of line 12, the algorithm returns an upper triangular matrix.
                           Algorithm 1
                           The pseudo-code for forming an upper triangular matrix with Random code. 
                                 
                                    
                                       
                                       
                                          
                                             
                                                
                                                1: function FormUpperTriangularMatrix(randMat)
                                          
                                          
                                             
                                                
                                                2: resultMat=null matrix
                                          
                                          
                                             
                                                
                                                3: 
                                                for 
                                                
                                                   
                                                      i
                                                      =
                                                      0
                                                      ,
                                                      1
                                                      ,
                                                      …
                                                      ,
                                                      k
                                                      -
                                                      1
                                                   
                                                 
                                                do
                                             
                                          
                                          
                                             
                                                
                                                4: pivotRow=SearchPivotRow(i,randMat)
                                          
                                          
                                             
                                                
                                                5: Search ith pivoting row from randMat as pivotRow
                                          
                                          
                                             
                                                
                                                6: 
                                                for row in randMat do
                                             
                                          
                                          
                                             
                                                
                                                7: 
                                                
                                                if 
                                                ith entry of row is non-zero then
                                             
                                          
                                          
                                             
                                                
                                                8: 
                                                row
                                                
                                                   
                                                      ←
                                                   
                                                
                                                row
                                                
                                                   
                                                      ⊕
                                                   
                                                
                                                pivotRow
                                          
                                          
                                             
                                                
                                                9: 
                                                
                                                end if
                                             
                                          
                                          
                                             10: 
                                                end for
                                             
                                          
                                          
                                             11: 
                                                end for
                                             
                                          
                                          
                                             12: 
                                                return resultMat
                                          
                                          
                                             13: end function
                                             
                                          
                                       
                                    
                                 
                              
                           

The pseudo-code for SYSR code to form upper triangular matrix is presented in Algorithm 2 and the corresponding flow chart in Fig. 2
                        . The parameters idnMat and the randMat denote the generator matrices of Part I and II coded symbols, respectively. Basically, Algorithm 2 has similar structure with the Algorithm 1 except that the former will attempt to search the pivoting rows from idnMat first before getting them from the randMat, if not found (lines 4–10).
                           Algorithm 2
                           The pseudo-code for forming an upper triangular matrix with SYSR code. 
                                 
                                    
                                       
                                       
                                          
                                             
                                                
                                                1: function FormUpperTriangularMatrix(idnMat, randMat)
                                          
                                          
                                             
                                                
                                                2: resultMat=null matrix
                                          
                                          
                                             
                                                
                                                3: 
                                                for 
                                                
                                                   
                                                      i
                                                      =
                                                      0
                                                      ,
                                                      1
                                                      ,
                                                      …
                                                      ,
                                                      k
                                                      -
                                                      1
                                                   
                                                 
                                                do
                                             
                                          
                                          
                                             
                                                
                                                4: Search ith pivoting row from idnMat as pivotRow
                                          
                                          
                                             
                                                
                                                5: 
                                                if pivotRow
                                                
                                                   
                                                      ≠
                                                   
                                                
                                                NOT_FOUND do
                                             
                                          
                                          
                                             
                                                
                                                6: 
                                                Move pivotRow from idnMat to resultMat
                                          
                                          
                                             
                                                
                                                7: 
                                                else
                                             
                                          
                                          
                                             
                                                
                                                8: 
                                                Search ith pivoting row from randMat as pivotRow
                                          
                                          
                                             
                                                
                                                9: 
                                                Move pivotRow from randMat to resultMat
                                          
                                          
                                             10: 
                                                end if
                                             
                                          
                                          
                                             11: 
                                                for row in randMat do
                                             
                                          
                                          
                                             12: 
                                                
                                                if 
                                                ith entry of row is non-zero then
                                             
                                          
                                          
                                             13: 
                                                row
                                                
                                                   
                                                      ←
                                                   
                                                
                                                row
                                                
                                                   
                                                      ⊕
                                                   
                                                
                                                pivotRow
                                          
                                          
                                             14: 
                                                
                                                end if
                                             
                                          
                                          
                                             15: 
                                                end for
                                             
                                          
                                          
                                             16: 
                                                end for
                                             
                                          
                                          
                                             17: 
                                                return resultMat
                                          
                                          
                                             18: end function
                                             
                                          
                                       
                                    
                                 
                              
                           

To explain the improved decoding algorithm in SYSR code, assume α Part I coded symbols are received and they need to XOR with 
                           
                              k
                              +
                              10
                              -
                              α
                           
                         Part II rows, i.e. 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    =
                                    1
                                 
                                 
                                    α
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    j
                                    =
                                    1
                                 
                                 
                                    k
                                    +
                                    10
                                    -
                                    α
                                 
                              
                              
                                 
                                    
                                       k
                                       +
                                       l
                                    
                                 
                              
                           
                        , where one row operation consists of 
                           
                              k
                              +
                              l
                           
                         XOR operations. After that, 
                           
                              k
                              -
                              α
                           
                         pivoting rows will be selected from randMat for similar XOR row operations and then removed (corresponds to the expression 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    i
                                    =
                                    1
                                 
                                 
                                    k
                                    -
                                    α
                                 
                              
                              
                                 
                                    ∑
                                 
                                 
                                    j
                                    =
                                    i
                                    +
                                    1
                                 
                                 
                                    k
                                    +
                                    10
                                    -
                                    α
                                 
                              
                              
                                 
                                    
                                       k
                                       +
                                       l
                                    
                                 
                              
                           
                        ). Hence, we denote the number of XOR operations for SYSR code to form an upper triangular matrix as χ, where
                           
                              (14)
                              
                                 χ
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          α
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          1
                                       
                                       
                                          k
                                          +
                                          10
                                          -
                                          α
                                       
                                    
                                 
                                 
                                    
                                       
                                          k
                                          +
                                          l
                                       
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          =
                                          1
                                       
                                       
                                          k
                                          -
                                          α
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          =
                                          i
                                          +
                                          1
                                       
                                       
                                          k
                                          +
                                          10
                                          -
                                          α
                                       
                                    
                                 
                                 
                                    
                                       
                                          k
                                          +
                                          l
                                       
                                    
                                 
                                 =
                                 
                                    
                                       
                                          k
                                          +
                                          l
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   α
                                                
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   j
                                                   =
                                                   1
                                                
                                                
                                                   k
                                                   +
                                                   10
                                                   -
                                                   α
                                                
                                             
                                          
                                          
                                             
                                                
                                                   1
                                                
                                             
                                          
                                          +
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   k
                                                   -
                                                   α
                                                
                                             
                                          
                                          
                                             
                                                
                                                   ∑
                                                
                                                
                                                   j
                                                   =
                                                   i
                                                   +
                                                   1
                                                
                                                
                                                   k
                                                   +
                                                   10
                                                   -
                                                   α
                                                
                                             
                                          
                                          
                                             
                                                
                                                   1
                                                
                                             
                                          
                                       
                                    
                                 
                                 =
                                 
                                    
                                       
                                          k
                                          +
                                          l
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             
                                                1
                                             
                                             
                                                2
                                             
                                          
                                          
                                             
                                                k
                                             
                                             
                                                2
                                             
                                          
                                          +
                                          
                                             
                                                19
                                             
                                             
                                                2
                                             
                                          
                                          k
                                          +
                                          
                                             
                                                1
                                             
                                             
                                                2
                                             
                                          
                                          
                                             
                                                
                                                   α
                                                   -
                                                   
                                                      
                                                         α
                                                      
                                                      
                                                         2
                                                      
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                                 .
                              
                           
                        
                     

Since 
                           
                              0
                              ⩽
                              α
                              ⩽
                              k
                           
                        , Eq. (14) is a non-increasing function and each received Part I coded symbols will reduce the number of XOR operations, except 
                           
                              α
                              =
                              1
                           
                        . Note that if all the Part I coded symbols are received intact (i.e. 
                           
                              α
                              =
                              k
                           
                        ), the original message can be reconstructed instantly without forming the upper triangular matrix with Algorithm 2.

Eventually, if none of the Part I coded symbols are received (i.e. 
                           
                              α
                              =
                              0
                           
                        ),
                           
                              (15)
                              
                                 
                                    
                                       
                                          
                                             χ
                                          
                                       
                                    
                                    
                                       α
                                       =
                                       0
                                    
                                 
                                 =
                                 
                                    
                                       1
                                    
                                    
                                       2
                                    
                                 
                                 
                                    
                                       k
                                    
                                    
                                       3
                                    
                                 
                                 +
                                 
                                    
                                       1
                                    
                                    
                                       2
                                    
                                 
                                 
                                    
                                       k
                                    
                                    
                                       2
                                    
                                 
                                 l
                                 +
                                 
                                    
                                       19
                                    
                                    
                                       2
                                    
                                 
                                 
                                    
                                       k
                                    
                                    
                                       2
                                    
                                 
                                 +
                                 
                                    
                                       19
                                    
                                    
                                       2
                                    
                                 
                                 kl
                                 ,
                              
                           
                        which means that SYSR code has the same complexity as Random code in the process of constructing an upper triangular matrix (Algorithm 1).

Overall, SYSR code requires decoding complexity of 
                           
                              O
                              
                                 
                                    
                                       
                                          
                                             k
                                          
                                          
                                             3
                                          
                                       
                                    
                                 
                              
                           
                         when zero Part I coded symbols are received. The decoding complexity is improved with each received Part I coded symbols and eventually the original message can be reconstructed instantly if all the Part I coded symbols are received intact.

In this section, we measure the performance of Random code, SYSR code and SR code in terms of PCD and the average number of XOR row operations to reconstruct the original messages (i.e. forming upper triangular matrix and backward substitution). The simulator consists of three main components – the sender (encoder), which generates the coded symbols continuously, the erasure channel that drops the coded symbols with erasure probability ρ and the receiver (decoder), which attempts to reconstruct the original message when it has 
                        
                           k
                           +
                           10
                        
                      coded symbols. Each simulation scenario is repeated for 1000 times and the averaged results are presented.


                     Fig. 3
                      illustrates the PCD of SYSR code (simulation and analytical), Random code and SR code with incremental extra coded symbols for message length of 
                        
                           k
                           =
                           10
                        
                      symbols. The interpolated lines in the graphs are used to show the trends of the PCD with respect to each incremental extra coded symbol. When 
                        
                           ρ
                           =
                           0.00
                        
                     , both SYSR and SR code are able to reconstruct the original message with high PCD from the first k coded symbols (Part I coded symbols) and no extra coded symbol is required (Fig. 3(a)). However, as ρ increases they require at most extra ten coded symbols to achieve high PCD (Fig. 3(b)–(d)). Meanwhile, Random code requires 
                        
                           k
                           +
                           10
                        
                      coded symbols to reach high PCD in all the cases.

We observe that the PCD of SYSR code is similar to SR code in all the cases. They outperform Random code when the channel erasure probability is small and perform as good as Random code in a very lossy channel (e.g. 
                        
                           ρ
                           =
                           0.5
                        
                     ). Similar PCD results are obtained for messages with 
                        
                           k
                           =
                           10
                        
                     , 50, 100 and 250 symbols in channels of various erasure probabilities. Since SYSR code is able to achieve high PCD with ten extra coded symbols irrespective of the message length, it needs an average of 1.6 extra coded symbols to achieve complete decoding in lossy channels as shown in Fig. 4
                     .


                     Fig. 5
                      presents the average number of XOR row operations needed by Random code, SYSR code and SR code to form upper triangular matrix and backward substitution for messages of 
                        
                           k
                           =
                           100
                        
                      symbols subject to various channel erasure probabilities. Overall, SYSR code requires the least XOR row operations among the rest. In particular, when 
                        
                           ρ
                           =
                           0.00
                        
                      SYSR code receives all the Part I coded symbols intact and the original message can be reconstructed instantly. As ρ increases, more Part II coded symbols are required in reconstructing the original messages due to missing Part I coded symbols. Therefore, the total XOR row operations increases. Meanwhile, Random code requires about the same total XOR row operations in all the cases as its generator matrices only consist of randomly distributed binary values.

Generally, as ρ increases, more Part II coded symbols are involved in the decoding process. Since the Part II coded symbols are generated with a random matrix, the performance of SYSR code approaches that of Random code. Therefore, we omit the simulation results for 
                        
                           ρ
                           >
                           0.5
                        
                      in this paper. SYSR code will achieve high PCD with 
                        
                           k
                           +
                           10
                        
                      coded symbols (with 1.6 extra coded symbols) under very lossy channel conditions and the total number of required XOR row operations will be the same as Random code.

@&#CONCLUSION@&#

SYSR code is a systematic rateless erasure code that is built on top of random matrix. Due to that, it inherits the strength and the weakness of Random code in lossy channel, i.e. the high probability of complete decoding (PCD) is achievable with 
                        
                           k
                           +
                           10
                        
                      coded symbols, but with the decoding complexity of 
                        
                           O
                           
                              
                                 
                                    
                                       
                                          k
                                       
                                       
                                          3
                                       
                                    
                                 
                              
                           
                        
                     . Nonetheless, the analysis and numerical results demonstrate that SYSR code achieves better PCD and fewer decoding steps in the channel of low erasure probability. On the other hand, the fixed decoding redundancy of SYSR code is a double-edged sword. Given a message of 
                        
                           k
                           =
                           10
                        
                      symbols, the required coded symbols for SYSR code to achieve high PCD in lossy channel appears to be double of the total message symbols, i.e. 
                        
                           k
                           +
                           10
                           =
                           20
                        
                     . We will work at this issue in the future.

@&#REFERENCES@&#

