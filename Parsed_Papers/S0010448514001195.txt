@&#MAIN-TITLE@&#Semantic interoperability of knowledge in feature-based CAD models

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Design intent should be captured and the semantics should be processed by intelligent systems.


                        
                        
                           
                           We investigate the use of Semantic Web technologies for the exchange of “intelligent” CAD models.


                        
                        
                           
                           We define axioms and mapping rules to achieve semantic integration between CAD ontologies.


                        
                        
                           
                           We extend semantic integration with a similarity measurement to detect similar design features.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Feature-based design

Semantic web

Ontology

Reasoning

Similarity measure

SWRL

@&#ABSTRACT@&#


               
               
                  A major issue in product development is the exchange and sharing of product knowledge among many actors. This knowledge includes many concepts such as design history, component structure, features, parameters, constraints, and more.
                  Regarding CAD models, most of the current CAD systems provide feature-based design for the construction of solid models and to carry, semantically, product information throughout its life cycle. Unfortunately, existing solutions and standards, such as STEP, for exchanging product information, are limited to the process of geometrical data, where semantics assigned to product model are completely lost during the translation process. Moreover, STEP does not provide a sound basis to reason with knowledge.
                  The work described in this paper is part of our approach based on the development of OWL ontologies to preserve semantics associated with product data. In this work, we will focus on the semantic integration of these ontologies by defining axioms and rules. The integration process relies basically on reasoning capabilities provided by description logics in order to recognize automatically additional mappings among ontologies entities. Furthermore, the mapping process is enhanced with a semantic similarity measure to detect similar design features. Similarity measure integrates all aspects of OWL DL language. Thus, similarity functions are defined for each type of entity to involve all the features that make its definition. However, this will enable data analysis, as well as manage and discover implicit relationships among product data based on semantic modeling and reasoning.
               
            

@&#INTRODUCTION@&#

The increasing number of product development tools entails effective collaboration among different partners. Exchanging CAD (Computer Aided Design) data is essential because CAD models represent the core result of product development, namely the product shape. Actually, most of the current CAD systems provide feature-based design for the construction of solid models. Firstly, geometric modelers were regarded as the appropriate representation of product information, but later the feature approach has been proposed to enhance the capabilities of solid modelers  [1]. Thus, efficient data exchange implies the possibility to integrate all relevant engineering data into a compound product model in a reusable form.

However, existing solutions for exchanging product information are limited to the process of geometrical data, where semantics assigned to product model are completely lost during the translation process. Current standards, such as STEP (STandard for the Exchange of Product model data)  [2] have attempted to solve this problem, but they are not based on formal semantics that will enable rigorous semantics  [3]. Moreover, STEP does not provide a sound basis to reason with knowledge.

Our research investigates the use of Semantic Web technologies, such as ontologies and semantic web rule languages for the exchange of “intelligent” CAD models among different systems, while maintaining the original relations among entities of the model. Ontologies have been proposed as an important and natural means of representing real world knowledge for the development of database designs. Furthermore, Ontology offers an additional benefit for exchanging CAD models by way of its reasoning ability. Hence, we have proposed a method of sharing CAD models based on the construction of a “Common Design Features Ontology”, called CDFO, used as an Interlingua for the exchange of product data  [4]. Implicit facts and constraints are explicitly represented using OWL (Web Ontology Language) and SWRL (Semantic Web Rule Language). These technologies will facilitate collaborative engineering and improve product data management.

In this paper, we present our semantic integration method between developed ontologies represented with OWL DL language. This method is based on inference mechanisms provided by reasoners (e.g. Pellet) in order to minimize human interaction thus enhancing semantic interoperability. Rules are also defined to create more complex relations between entities of different ontologies. A similarity-based method for feature ontologies is then defined to match entities having no equivalent correspondences. This method is based on the development of similarity functions that consider all OWL DL constructs used in entities descriptions.

The rest of our paper is composed as follows: In Section  2, we present an overview of related work for CAD models interoperability including our proposed methodology for sharing CAD models. This methodology requires the development of a common ontology called CDFO and applications ontologies specific to CAD systems and standards. Integration methodology of different ontologies is described in Section  3, and examples are provided in its different subsections. Our methodology is extended with a similarity-based method described in Section  4. This similarity method requires the development of a similarity global function and local functions described in Sections  5 and 6 respectively. Conclusions are drawn at the end of this paper.

@&#RELATED WORK@&#

CAD data exchange problem is highly addressed by the international standard ISO 10303, known as STEP, which provides system-independent formats for the transmission of data, in computer-interpretable form. STEP, as various neutral formats, has been proven successful in the exchange of product geometry on a high quality level. Nevertheless, the problem consists in the ability to edit the outset model in the target system. Indeed, design intent including construction history, parameters, constraints, and features are potentially lost  [5].

However, new parts of STEP, such as Part 55  [6], Part 108  [7], and Part 111  [8], have been developed to cover these concepts. Pratt et al.  [9] proposed a STEP-based approach for the exchange of parametrized feature-based CAD models. Kim et al.  [10] proposed a method for CAD models data exchange that preserves the design intent based on STEP. Li et al.  [11] proposed a method for the exchange of parametric data between two different types of CAD systems, namely mechanical and ship CAD systems. A method for the exchange of procedural 2D CAD models using STEP is presented in  [12]. However, STEP does not have a logical formalism that enables formal semantics  [3]. Barbau et al.,  [3] proposed an approach to enable the translation of STEP schema and its instances, defined in EXPRESS, to OWL. This provides a semantically enriched model, called OntoSTEP, that can easily be integrated with OWL ontologies. OntoSTEP considers AP203 and AP214, that mainly focus on geometric information, to enrich semantically product information available in STEP files. In a manufacturing environment, an OWL product ontology, named ONTO-PDM  [13], is proposed as a common core model to facilitate systems interoperability. It describes mainly the assembly structure of a product and the material model. This approach reuses knowledge embedded into existing standards for product technical data, notably STEP PDM schema (Product Data Management). This knowledge is formalized using First Order Logic (FOL) patterns. Both OntoSTEP and OntoPDM approaches import their conceptual model of data from STEP where design intent and features are already lost. However, OntoSTEP could be part of our methodology as translating native CAD formats and standards into OWL is a primordial phase to create application ontologies.

The problem of defining an appropriate and comprehensive feature taxonomy has been recognized as one of the central problems in order to share feature-based CAD models. Choi et al.,  [5] define a set of neutral modeling commands describing the history of construction and modeling features. The data exchange is realized by using an XML file containing the history of commands used during the design process. Although this method enables the mapping between different terminologies, having the same meaning but different syntax, the mapping is performed only syntactically but not semantically. To consider the semantic aspect, Seo et al.,  [14] extend this approach by developing an ontology based on the macro-parametric approach to achieve semantic interoperability. Cheon et al.,  [15] proposed a method to translate the 3D data reconstructed from a free-hand 2D sketch into an editable 3D data based on the procedural model reflecting the design intent.

The project PSL (Process Specification Language)  [16], developed at NIST (National Institute of Standards and Technology) proposes an ontology, as neutral format, for the representation of information in the domain of manufacturing. The ontology is represented with the language KIF (Knowledge Interchange Format)  [17]. Although PSL focuses on the representation of data relevant to the manufacturing process, efforts were made to match concepts of design and manufacturing. However, these efforts have been limited to the mapping of geometry and related information from design to manufacturing  [18].

Dartigues et al.,  [19,20] highlighted the drawbacks of STEP for integrating features between two phases of product development: design and process planning, and thereby proposed an ontological approach using the language KIF (Knowledge Interchange Format). Patil et al.,  [18] theorized an ontology-based framework to enable exchange of product data semantics across different application domains. The authors proposed as a tool the PSRL (Product Semantic Representation Language). In the prototypal implementation, descriptions and axioms are defined from a comparative study between two feature-based CAD systems: Solidworks and Unigraphics.

In our previous work  [21,4], we have proposed an ontological approach that aims to enhance semantic interoperability between CAD systems. We focused on preserving the design intent, namely features originally defined by engineers in CAD models.

Our approach uses Semantic Web technologies for exchanging feature-based CAD models by considering semantics assigned to product data. This will enable data analysis, as well as manage and discover implicit relationships among product data based on semantic modeling and reasoning. In our approach, we define the neutral format as an OWL ontology, which is then enriched from the logical data model with axioms and rules. Thus, the CAD models are represented as the instances of the ontology defining concepts and relationships among these concepts.

As illustrated in Fig. 1
                     , we consider the interoperability issues at two levels of heterogeneities: syntactic and semantic. Syntactic heterogeneity is settled by the homogenization process of applications syntax into OWL DL. For this purpose, only the syntax is changed, but the terminologies remain intact. Homogenization process has led to the development of specific CAD applications ontologies, and a common ontology, CDFO, serving as a neutral format  [4]. In this framework, we have developed a common ontology for design features exchange called CDFO, with a special attention to part design features. The graphical representation of our ontology is described in  [4] to highlight certain characteristics and relationships between different concepts of our ontology. However, there is structural and semantic heterogeneity which cannot be connected by syntactic mapping. We tackle the semantic heterogeneities by developing a methodology to explicitly state and exchange meaning of terminologies by associating them with their context. Thus, axioms and mapping rules are defined to achieve the semantic integration between the applications ontologies and the common ontology (cf. Section  3). This integration method takes advantage of ontologies reasoning in order to infer implicit relationships among product data.

Our integration method is accomplished by defining axioms and rules which enable terms to be reasoned as being equivalent semantically, for instance, even though they are using different terminologies. OWL expressiveness allows the definition of logical classes (
                        ⊓
                        ,
                        ⊔
                        ,
                        ¬
                     ), which enable automatic classification of product components. Thus, we create axioms and rules to map different entities. These axioms and rules constitute a basic element to perform reasoning operations. Consequently, we use ontologies reasoning ability to recognize automatically additional mappings between entities.

Suppose that we have a source ontology 
                        X
                      to convert to a target ontology 
                        Y
                     . 
                        X
                      defines two levels of components: terminological (TBox) that defines the set of features in a CAD system and assertion (ABox) that represents features instances defined in a specific CAD model. The ontology 
                        Y
                      is yet described at the terminological level having no instances. The aim is at creating instances in 
                        Y
                      by finding for each instance in 
                        X
                      the corresponding concept in 
                        Y
                     . An ad hoc ontology, called mapping ontology, is created to store mapping axioms and rules between 
                        X
                      and 
                        Y
                     . As illustrated in Fig. 2
                     , in order to carry out this integration, our methodology consists mainly of two steps: “Axiomatization” and “Recognition”, defined in the following sub-sections.

Ontologies axiomatization is a primary step in our integration method. It should be performed before the recognition process of semantic mappings. Axiomatization process aims at enriching ontologies semantics by the definition of axioms and rules between different entities. It is processed manually by experts of the domain. The axiomatization can be applied between entities of the same ontology, intra-ontology, or belonging to various ontologies, inter-ontology. Moreover, axioms can be defined for concepts and properties. However, axiomatization process is performed through the high level expressiveness of OWL and the use of SWRL to define formally more complex relationships. 
                           Example
                           An important aspect of sharing semantically CAD models is the ability to store the design history as far as the order of the arguments is highly meaningful. In our common ontology, each PartDocument is composed of an ordered sequence of bodies. A solid body SolidBody is in turn defined by an ordered set of solid components, characterizing the shape of this body.

Thus, the description of SolidBody concept in our ontology includes an existential restriction on the property hasList, implemented as following: 
                           
                              
                                 
                                    SolidBody
                                 
                                 ⊑
                                 
                                    Body
                                 
                                 ⊓
                                 
                                    (
                                    ∃
                                    
                                    
                                       hasList
                                    
                                    
                                       (
                                       
                                          SolidBodyComponentList
                                       
                                       ⊔
                                       
                                          EmptyList
                                       
                                       )
                                    
                                    )
                                 
                                 .
                              
                           
                         The class SolidBodyComponentList is a subtype of the OWLList class that specifies the order of statements in OWL. An item of this list may contain a sketch or a part design feature. Though there is no standard definition of an ordered set in OWL, Drummond et al.  [22] presents an implementation of an OWL list, used as a basis in our ontology definition. The OWLList class has the following characteristics  [22]: 
                           
                              •
                              An OWLList instance is considered as an element of a list, followed only by another instance of OWLList.

The class EmptList is a subtype of OWLList containing no other elements. It is defined by the following restriction: 
                                    
                                       
                                          
                                             EmptyList
                                          
                                          ≡
                                          
                                             OWLList
                                          
                                          ⊓
                                          
                                             (
                                             ¬
                                             
                                                (
                                                ∃
                                                
                                                   isFollowedBy owl : Thing
                                                
                                                )
                                             
                                             ⊔
                                             ¬
                                             
                                                (
                                                ∃
                                                
                                                
                                                   hasContents owl : Thing
                                                
                                                )
                                             
                                             )
                                          
                                          .
                                       
                                    
                                 
                              


                                 hasContents is a functional object property defining a pointer to the content of an element of the list.


                                 hasNext is a functional property of OWLList that indicates the subsequent direct element of the list.


                                 isFollowedBy is a transitive property, defined as a super property of hasNext to enable inferring all the indirect subsequent elements of the list.

Thus, the description of SolidBodyComponentList, defining a list of components is represented as following: 
                           
                              
                                 
                                    SolidBodyComponentList
                                 
                                 ≡
                                 
                                    OWLList
                                 
                                 ⊓
                                 
                                    (
                                    
                                       (
                                       ∃
                                       
                                       
                                          hasNext EmptyList
                                       
                                       )
                                    
                                    ⊔
                                    
                                       (
                                       ∃
                                       
                                       
                                          hasNext SolidBodyComponentList
                                       
                                       )
                                    
                                    )
                                 
                                 ⊓
                                 
                                    (
                                    ∃
                                    
                                    
                                       hasContents
                                    
                                    
                                    
                                       (
                                       
                                          Sketch
                                       
                                       ⊔
                                       
                                          Feature
                                       
                                       )
                                    
                                    )
                                 
                                 ⊓
                                 
                                    (
                                    ∀
                                    
                                       hasContents
                                    
                                    
                                    
                                       (
                                       
                                          Sketch
                                       
                                       ⊔
                                       
                                          Feature
                                       
                                       )
                                    
                                    )
                                 
                                 .
                              
                           
                        
                     

Furthermore, SolidBodyComponentList has two subclasses to define the first and the last element of the list, respectively SolidBodyFirstComponent and SolidBodyLastComponent. The last component of a list is an element having no successors. This is defined in our ontology with the following description: 
                           
                              
                                 
                                    SolidBodyLastComponent
                                 
                                 ≡
                                 
                                    SolidBodyComponentList
                                 
                                 ⊓
                                 
                                    (
                                    
                                       (
                                       ∃
                                       
                                       
                                          hasNext EmptyList
                                       
                                       )
                                    
                                    ⊔
                                    ¬
                                    
                                       (
                                       ∃
                                       
                                       
                                          hasNext owl : Thing
                                       
                                       )
                                    
                                    )
                                 
                                 .
                              
                           
                        
                     

Semantic mapping recognition aims at inferring automatically additional mappings between entities to strengthen the integration of semantic data. The recognition process relies mainly on the inference services provided by a reasoner, e.g., Pellet  [23]. To integrate two ontologies, mappings are created explicitly to define correspondences between ontologies entities. These mappings, called “Anchor Axioms”, are stored in a third ad hoc ontology, called mapping ontology.

Thus, to perform the recognition of semantic mappings, the reasoning process receives as input the mapping ontology. The latter imports the ontologies to integrate and defines a set of axioms and mapping rules between entities of imported ontologies. The result of reasoning process is a set of triplets 
                           
                              〈
                              
                                 
                                    E
                                 
                                 
                                    1
                                 
                              
                              ,
                              
                                 Corresp
                              
                              ,
                              
                                 
                                    E
                                 
                                 
                                    2
                                 
                              
                              〉
                           
                         defining mappings between two entities 
                           
                              
                                 E
                              
                              
                                 1
                              
                           
                         and 
                           
                              
                                 E
                              
                              
                                 2
                              
                           
                        , belonging respectively to ontologies 
                           
                              
                                 O
                              
                              
                                 1
                              
                           
                         and 
                           
                              
                                 O
                              
                              
                                 2
                              
                           
                        . Corresp determines the type of relationship, e.g., equivalence or subsumption. Once the inferred mappings validated, they can be added to the mapping ontology as “Anchor Axioms” for further reasoning operations.

Semantic mapping recognition could be applied at two levels: terminological and factual. At the terminological level, mappings are applied to the descriptions of concepts and properties. At the factual level, inferences can detect the types of instances representing the CAD model in the target ontology.

The terminological reasoning of our method aims at inferring semantic mappings between descriptions of concepts and properties of different ontologies. At this level, instances representing a product model are not considered. In fact, the main operations executed by the reasoner are based on the test of subsumption between two entities, or on the test of satisfiability of a concept. Thus, the reasoner performs a mutual subsumption test between two entities 
                           
                              
                                 E
                              
                              
                                 1
                              
                           
                         and 
                           
                              
                                 E
                              
                              
                                 2
                              
                           
                        . For example, Corresp may refer to Subsumption, if a subsumption is inferred in only one direction, or to Equivalence if inferred in both directions. 
                           Example
                           Consider the integration of application ontologies of two CAD systems: CatiaV5 and SolidWorks. We focus more specifically on the feature Hole as defined in both CAD systems.

Subsequently, we consider the impact of creating mapping axioms on object properties defined in the applications ontologies of both systems. For example, consider the object properties defining the bottom angle of a hole in CatiaV5 and SolidWorks (SW) respectively: Catia:hasBottomAngle and SW:hasDrillAngle.

Descriptions of these two properties in the application ontologies are represented respectively as follows: 
                           
                              
                                 
                                    
                                       Catia : hasBottomAngle
                                    
                                    
                                    
                                       (
                                       
                                          Catia : Hole
                                       
                                       ,
                                       
                                          Angle
                                       
                                       )
                                    
                                 
                              
                              
                                 
                                    
                                       SW : hasDrillAngle
                                    
                                    
                                    
                                       (
                                       
                                          SW : ComplexHole
                                       
                                       ,
                                       
                                          Angle
                                       
                                       )
                                    
                                    .
                                 
                              
                           
                        
                     

These axioms define the domain and the range for each object property. In fact, we added to the mapping ontology an anchor axiom defining an equivalence correspondence between these two properties, that is to say: 
                           
                              
                                 
                                    Catia : hasBottomAngle
                                 
                                 ≡
                                 
                                    SW : hasDrillAngle
                                 
                                 .
                              
                           
                         This anchor axiom has led to the inference of a set of additional semantic mappings between entities of these ontologies. The list of inferred mappings is as follows: 
                           
                              
                                 
                                    
                                       SW : SimpleDrilled
                                    
                                    ⊑
                                    
                                       Catia : Hole
                                    
                                 
                              
                              
                                 
                                    
                                       SW : TaperedDrilled
                                    
                                    ⊑
                                    
                                       Catia : Hole
                                    
                                 
                              
                              
                                 
                                    
                                       SW : CounterBoreDrilled
                                    
                                    ⊑
                                    
                                       Catia : Hole
                                    
                                 
                              
                              
                                 
                                    
                                       SW : CounterSinkDrilled
                                    
                                    ⊑
                                    
                                       Catia : Hole
                                    
                                 
                              
                              
                                 
                                    
                                       SW : CounterDrilledDrilled
                                    
                                    ⊑
                                    
                                       Catia : Hole
                                    
                                 
                              
                           
                         where SimpleDrilled, TaperedDrilled, CounterBoreDrilled, CounterSinkDrilled and CounterDrilledDrilled are subclasses of SW:ComplexHole.

Although OWL adds considerable expressiveness, it does have some limitations, particularly with respect to what can be said about properties (e.g. no composition constructor). One way to address this problem would be to extend OWL with some form of “rules language”. One such proposed extension is SWRL (Semantic Web Rule Language), which is a Horn clause rules extension to OWL DL that overcomes many of these limitations. The proposed rules are of the form of an implication between an antecedent (body) and consequent (head), i.e. 
                        
                           
                              Antecedent
                           
                           →
                           
                              Consequent
                           
                        . The intended meaning can be read as: whenever the conditions specified in the antecedent hold, then the conditions specified in the consequent must also hold.

In this section, we extend our semantic integration methodology by creating rules, defined with SWRL. These rules are added to our ontologies to specify conditional correspondences between entities. Furthermore, we used for reasoning operations a rule-based inference engine, namely JESS  [24]. In the following, we present different cases that state the need to create rules in order to increase the automation process while integrating different ontologies. SWRL is used for defining formally more general relationships flexibly. In particular, using OWL and SWRL, inferred facts could be detected to effectively discover implicit relationships by explicit assertions. 
                           Example
                           In this example, the aim is at translating design features with their specific parameters from one system to another by integrating CAD systems ontologies while maintaining the semantics associated with the geometrical data. Hence, we provide examples of creating axioms and mapping rules defined for this purpose.

In this example, we consider the translation process of a specific feature, namely complex holes between CatiaV5 and SolidWorks. Note that we do not intend to define axioms and rules for all types of holes, nor for their entire parameters. Mappings between “hole” parameters in both CAD systems are illustrated in Fig. 3
                        .

Firstly, holes in CatiaV5 are defined as subclasses of the concept Hole, where they inherit the basic parameters: depth and diameter. The complex holes in CatiaV5 are defined according to three additional head parameters: HeadAngle, HeadDiameter and HeadDepth. Thus, each specification of complex hole is defined semantically with a combination of these three parameters. For instance, the CounterDrill hole is a hole that should embed in its definition these three parameters altogether. The other complex holes could be defined in terms of a combination of two additional parameters, or only one as the Tapered hole.

On the other hand, the complex holes in SolidWorks holes are defined with a list of additional parameters specific for each hole specification. For example, the CounterDrill hole is defined in terms of its three specific parameters, namely CounterDrillAngle, CounterDrillDepth and CounterDrillDiameter. In fact, an additional parameter of a complex hole in SolidWorks is specific to the type of hole.

Consequently, matching parameters of holes in CatiaV5 and SolidWorks could not be defined in a generic way. For instance, the parameter HeadDepth of CatiaV5 may be equivalent to CBoreDepth, CSunkDepth or CDrillDepth depending on the hole specification. This is illustrated in Fig. 3 using dashed lines. However, a conditional equivalence rule between two parameters should be established in respect to the context, namely the hole specification.

We will highlight some semantic axioms and rules created to map holes parameters between CatiaV5 and Solidworks. The following two axioms describe direct equivalences, represented by solid lines in Fig. 3, between parameters of CatiaV5 and SolidWorks. 
                           Axiom 1
                           The “hasHoleDiameter” property in CatiaV5 is equivalent to the property “hasDiameter” in SolidWorks. 
                                 
                                    
                                       
                                          Catia : hasHoleDiameter
                                       
                                       ≡
                                       
                                          SW : hasDiameter
                                       
                                       .
                                    
                                 
                              
                           


                        
                           Axiom 2
                           The “hasHoleDepth” property in CatiaV5 is equivalent to the property “hasDepth” in SolidWorks. 
                                 
                                    
                                       
                                          Catia : hasHoleDepth
                                       
                                       ≡
                                       
                                          SW : hasDepth
                                       
                                       .
                                    
                                 
                              
                           

However, “contextual” equivalences, i.e., dependent on holes specifications, are defined by creating semantic mapping rules using SWRL. These rules allow defining mapping between the complex hole parameters for both systems CatiaV5 and SolidWorks. These rules take into account the context in which these parameters were used. We describe two of these rules as follows:


                        Rule  1: 
                           
                              
                                 
                                    
                                       Catia : Counterbored
                                    
                                    
                                       (
                                       ?
                                       x
                                       )
                                    
                                    ∧
                                    
                                       Catia : Length
                                    
                                    
                                       (
                                       ?
                                       y
                                       )
                                    
                                    ∧
                                    
                                       Catia : hasHeadDepth
                                    
                                    
                                       (
                                       ?
                                       x
                                       ,
                                       ?
                                       y
                                       )
                                    
                                 
                              
                              
                                 
                                    →
                                    
                                       SW : hasCounterBoreDepth
                                    
                                    
                                       (
                                       ?
                                       x
                                       ,
                                       ?
                                       y
                                       )
                                    
                                    .
                                 
                              
                           
                        
                     


                        Rule  2: 
                           
                              
                                 
                                    
                                       Catia : Counterbored
                                    
                                    
                                       (
                                       ?
                                       x
                                       )
                                    
                                    ∧
                                    
                                       Catia : Length
                                    
                                    
                                       (
                                       ?
                                       y
                                       )
                                    
                                    ∧
                                    
                                       Catia : hasHeadDiameter
                                    
                                    
                                       (
                                       ?
                                       x
                                       ,
                                       ?
                                       y
                                       )
                                    
                                 
                              
                              
                                 
                                    →
                                    
                                       SW : hasCounterBoreDiameter
                                    
                                    
                                       (
                                       ?
                                       x
                                       ,
                                       ?
                                       y
                                       )
                                    
                                    .
                                 
                              
                           
                        
                     

The first rule says: consider two variables of instances 
                           x
                         and 
                           y
                         defined in CatiaV5. If 
                           x
                        , an instance of the CounterBored hole, is related to the depth 
                           y
                        , an instance of HeadDepth, through the property hasHeadDepth. Then, the equivalent property in SolidWorks is hasCounterBoreDepth. This implies that 
                           x
                         is related to 
                           y
                         in Solidworks through the property hasCounterBoreDepth. Likewise, remaining rules define contextual equivalences among the hole parameters in CatiaV5 and Solidworks. Note that these rules are unidirectional, i.e., enabling mapping from CatiaV5 to Solidworks.

To enhance interoperability efficiency, the mapping rules should be bidirectional between an application ontology and the common ontology CDFO, and then additional mapping rules are defined by the same way to ensure mapping from SolidWorks to CatiaV5. These rules have been implemented and tested, and hole instances created with CatiaV5 have been automatically reasoned as being instances of corresponding holes in SolidWorks ontology.

Suppose CounterBoredHole_1, an instance of the feature Catia:CounterBore, represented by Catia:CounterBore (CounterBoredHole_1). This instance is characterized by the following two properties: 
                           
                              
                                 
                                    
                                       Catia : hasHeadDiameter
                                    
                                    
                                       (
                                       
                                          CounterBoredHole
                                       
                                       _
                                       1
                                       ,
                                       
                                          Diameter
                                       
                                       _
                                       1
                                       )
                                    
                                 
                              
                              
                                 
                                    
                                       Catia : hasHeadDepth
                                    
                                    
                                       (
                                       
                                          CounterBoredHole
                                       
                                       _
                                       1
                                       ,
                                       
                                          Depth
                                       
                                       _
                                       1
                                       )
                                    
                                 
                              
                           
                         where Diameter_1 and Depth_1 are two instances defining dimension values. Thus, calling the Jess inference engine has led to the deduction of the two following instantiations:
                           
                              
                                 
                                    
                                       SW : hasCounterBoreDiameter
                                    
                                    
                                       (
                                       
                                          CounterBoredHole
                                       
                                       _
                                       1
                                       ,
                                       
                                          Diameter
                                       
                                       _
                                       1
                                       )
                                    
                                 
                              
                              
                                 
                                    
                                       SW : hasCounterBoreDepth
                                    
                                    
                                       (
                                       
                                          CounterBoredHole
                                       
                                       _
                                       1
                                       ,
                                       
                                          Depth
                                       
                                       _
                                       1
                                       )
                                    
                                    .
                                 
                              
                           
                        
                     

Furthermore, these deductions imply to infer that CounterBoredHole_1 is an instance of the concepts defined as “domain” of the object properties SW:hasCounterBoreDiameter and SW:hasCounterBoreDepth, that is to say it belongs to the SW:ComplexHole.

We have presented in Section  3 our methodology of semantic ontology integration based on the axiomatization process and reasoning mechanisms to infer additional mappings among ontologies entities. Reasoning-based methods are restricted to “exact” correspondences, i.e. the presence or not of a relationship, as equivalence or subsumption, between two entities. However, it is sometimes necessary to assess, in an approximate manner, the similarity measure between entities to assist users with integration methods.

Actually, during the exchange of product data between two ontologies, some instances in an ontology could not be transferred to the other ontology due to the lack of equivalent concepts in the target system. Patil et al.,  [18] present reasons that hinder detection of exact correspondences between concepts. For instance, same concepts may have different structures in their applications, where more or less attributes can be defined. Thus, we extend our integration methodology with a similarity-based approach providing means for ‘approximate’ semantic mapping between entities having no equivalence in target systems. In this context, we will define factors involved in our context-aware similarity method for concepts of our ontologies represented with OWL DL.

The notion of similarity originated in psychology and was established to determine why and how entities are grouped into categories, and why some categories are comparable to each other while others are not  [25]. In computer science, similarity measure has been considered as an effective means to improve methods of knowledge extraction and semantic integration of heterogeneous data sources. Similarity consists in computing a distance between two entities by comparing their components, i.e. all the features involved in their definition. These components reflect heterogeneities at different levels: syntactic, structural and semantic  [26].

For semantic interoperability, many proposed approaches of ontology alignment are based on similarity measure between different entities to map entities that are semantically “similar”. The mapping function “map” is formally defined as  [27]: 
                           
                              
                                 
                                    map
                                 
                                 :
                                 O
                                 →
                                 
                                    
                                       O
                                    
                                    
                                       ′
                                    
                                 
                                 
                                 such as  
                                 
                                    map
                                 
                                 
                                    (
                                    
                                       
                                          e
                                       
                                       
                                          1
                                       
                                    
                                    )
                                 
                                 =
                                 
                                    
                                       e
                                    
                                    
                                       1
                                    
                                    
                                       ′
                                    
                                 
                                   if  
                                 
                                    Sim
                                 
                                 
                                    (
                                    
                                       
                                          e
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          e
                                       
                                       
                                          1
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                 
                                 >
                                 t
                              
                           
                         where 
                           O
                         and 
                           
                              
                                 O
                              
                              
                                 ′
                              
                           
                         are two ontologies to align, 
                           
                              
                                 e
                              
                              
                                 1
                              
                           
                         and 
                           
                              
                                 e
                              
                              
                                 1
                              
                              
                                 ′
                              
                           
                         represent entities of two ontologies, 
                           
                              
                                 e
                              
                              
                                 1
                              
                           
                           ∈
                           0
                         and 
                           
                              
                                 e
                              
                              
                                 1
                              
                              
                                 ′
                              
                           
                           ∈
                           
                              
                                 0
                              
                              
                                 ′
                              
                           
                        . 
                           t
                         is a threshold of similarity, i.e. the minimum acceptable value to consider entities as similar, where 
                           t
                           ∈
                           
                              [
                              0
                              ,
                              1
                              ]
                           
                        .

The similarity function 
                           
                              Sim
                           
                           :
                           O
                           ×
                           O
                           →
                           R
                         is a function of a pair of entities to a real value defining the similarity of two entities, with the following characteristics: 
                           
                              
                                 
                                    ∀
                                    x
                                    ,
                                    y
                                    ∈
                                    O
                                    ,
                                    
                                    
                                       Sim
                                    
                                    
                                       (
                                       x
                                       ,
                                       y
                                       )
                                    
                                    ≥
                                    0
                                    
                                       (
                                       
                                          positivity
                                       
                                       )
                                    
                                 
                              
                              
                                 
                                    ∀
                                    x
                                    ∈
                                    O
                                    ,
                                    
                                    ∀
                                    y
                                    ,
                                    z
                                    ∈
                                    O
                                    ,
                                    
                                    
                                       Sim
                                    
                                    
                                       (
                                       x
                                       ,
                                       x
                                       )
                                    
                                    ≥
                                    
                                       Sim
                                    
                                    
                                       (
                                       y
                                       ,
                                       z
                                       )
                                    
                                    
                                       (
                                       
                                          maximality
                                       
                                       )
                                    
                                    .
                                 
                              
                           
                        
                     

In the literature, different approaches of similarity measure have been proposed  [28–30]. Two main models can be distinguished: Geometric models, called also the multidimensional models  [31] and the feature model, also known as the “Contrast Model”  [32]. In the dimensional models entities are described in the form of a limited set of dimensions. A dimension is an axis in space. Thus, an entity is defined by its coordinates in the space of axes (dimensions) and receives a value for each dimension that defines it. The proximity between the objects in this space reflects their similarity.

On the other hand, Tversky  [32] proposed a model of similarity based on the concept attributes (The Contrast Model). In this model, concepts are defined as a list of attributes. The similarity measure is based on a formula involving both common and distinctive attributes of compared entities. It is formally defined with a linear function of common and distinctive attributes as: 
                           
                              
                                 
                                    Sim
                                 
                                 
                                    (
                                    a
                                    ,
                                    b
                                    )
                                 
                                 =
                                 θ
                                 f
                                 
                                    (
                                    A
                                    ∩
                                    B
                                    )
                                 
                                 −
                                 α
                                 f
                                 
                                    (
                                    A
                                    −
                                    B
                                    )
                                 
                                 −
                                 β
                                 f
                                 
                                    (
                                    B
                                    −
                                    A
                                    )
                                 
                              
                           
                         where 
                           a
                         is the subject of comparison and 
                           b
                         is the referent. 
                           f
                         is a function measuring the matching of two objects described as a set of attributes. 
                           A
                         is the set of attributes of the concept 
                           a
                         and 
                           B
                         is the set of attributes of the concept 
                           b
                        . “
                           ∩
                        ” and “−” are Boolean operators that represent the common and distinctive attributes respectively, and 
                           θ
                           ,
                           α
                           ,
                           β
                           ≥
                           0
                         are coefficients given to common and distinctive attributes. They reflect the importance of each parameter of the function.

The function of Tversky is an asymmetric function if 
                           
                              (
                              α
                              ≠
                              β
                              )
                           
                        , i.e. 
                        
                           
                              Sim
                           
                           
                              (
                              a
                              ,
                              b
                              )
                           
                           ≠
                           
                              Sim
                           
                           
                              (
                              b
                              ,
                              a
                              )
                           
                        . According to Tversky, while computing the similarity, more importance should be given to the subject of the comparison, the concept a. Thus, we give more weight to attributes of the subject compared (a) than attributes of the referent (b), thus 
                           
                              (
                              α
                              >
                              β
                              )
                           
                        . This implies that the function of Tversky is an asymmetric directional function.

A review similarity methods based on ontology representations is presented in  [30]. OLA  [33] and EDOLA  [34] alignment methods are defined for ontologies represented with OWL Lite. Euzenat et al.,  [33] define a similarity measure method of OWL Lite ontologies based on two factors: the entity category (class, instance, property, etc.) and the set of characteristics related to a category (e.g., super-classes, properties, and instances). This method has the advantage of considering OWL Lite ontologies specifications, e.g. classes and properties hierarchy, restrictions on classes, and properties characteristics. In fact, it processes the class internal structure, defined in terms of properties and constraints, as well as the external structure defined in terms of subsumption and semantic relations with other classes. However, this method does not consider some constructors of OWL Lite, namely the disjunction construct. Furthermore, additional tests should be performed to define parameters weights in similarity functions.

Zghal et al.,  [27] define a similarity measure method for ontology alignment in OWL DL, called SODA (Structural Alignment Ontology OWL-DL). This method defines two models for calculating similarity: local and global. It combines the local similarity measure (structural and terminology) for the evaluation of the global similarity measure.

Sim-DL  [35] is another method for semantic similarity measurement for OWL DL ontologies. It has been proposed for the information retrieval in the domain of geography. This method is appropriate to 
                           ALCNR
                         variant of the description logic. It is implemented with Protégé ontology editor.

Patil et al.,  [18] define a similarity measure method, based on the “Contrast Model”, between OWL DL ontologies for the exchange of data semantics of a product model. This method defines a global function of aggregation in terms of similarity local functions based on concepts descriptions and their context. However, this method local functions do not consider the similarity of attributes to compare. In other words, the classification of concepts attributes to compare is based strictly on exact equivalences: equivalent attributes are added to the set of common attributes, otherwise to the set of distinctive attributes. Furthermore, no similarity measure between OWL properties has been defined in this method.

A generic scenario for similarity measure has been used in many approaches  [36,37]. This scenario consists mainly of the following steps: 
                           
                              1.
                              Selection of entities to match.

Transformation of concepts to a normal form, such as the DNF (Disjunctive Normal Form).

Definition of an alignment matrix for concepts descriptions. It applies to all components of concepts.

Application of constructor specific similarity functions to selected pairs.

Determination of a global function of similarity. It represents an aggregate function in terms of similarity local functions, having a weight assigned to each function.

In the next subsection, we will define our similarity method to the integration of our ontologies of product models. Actually, the knowledge representation language is a key factor for defining the similarity method functions. However, most of the existing methods consider only subsets of ontology specifications. Our aim is at defining a method considering a larger set of OWL ontology constructs. In addition, our method applies not only to concepts but also to properties in an ontology. Therefore, our method is defined to be suitable to the expressiveness of OWL DL, based on description logic DL and more specifically on its variant 
                           SHOIN(D)
                        .

OWL DL enables defining complex concepts with constructors, e.g., intersection, union, negation, restrictions on properties, and cardinality restrictions. In our approach, we are specifically interested in structural and semantic aspects rather than terminology. Actually, our similarity measure method does not consider the syntax of the compared entities (e.g. their names or labels). Nevertheless, many algorithms for syntactic and lexical comparisons have been proposed in the literature  [30,38,39], and could be easily integrated into our similarity method.

Similarity methods often require a preliminary phase of treatment, called “pre-processing” phase  [30]. It consists mainly in defining similarities for different entities, called “anchor” values, serving as initial similarities for further similarities computing. These values can be the result of syntactic or lexical functions, or predefined by the user using equivalence or disjunction axioms. Similarities values between entities of two ontologies 
                           
                              
                                 O
                              
                              
                                 1
                              
                           
                         and 
                           
                              
                                 O
                              
                              
                                 2
                              
                           
                         are represented in a vector of triplets 
                           
                              
                                 V
                              
                              
                                 
                                    sim
                                 
                              
                           
                        . Each triplet is defined by: 
                           
                              
                                 
                                    〈
                                    
                                       
                                          E
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          E
                                       
                                       
                                          2
                                       
                                    
                                    ,
                                    
                                       val
                                    
                                    〉
                                 
                                 
                                 where  
                                 
                                    
                                       E
                                    
                                    
                                       1
                                    
                                 
                                 ∈
                                 
                                    
                                       O
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                 
                                    
                                       E
                                    
                                    
                                       2
                                    
                                 
                                 ∈
                                 
                                    
                                       O
                                    
                                    
                                       2
                                    
                                 
                                 ,
                                 
                                 
                                    val
                                 
                                 ∈
                                 R
                                   with  
                                 0
                                 ≤
                                 
                                    val
                                 
                                 ≤
                                 1
                                 .
                              
                           
                        
                        
                           
                              
                                 E
                              
                              
                                 1
                              
                           
                           ,
                           
                              
                                 E
                              
                              
                                 2
                              
                           
                         represent a pair of entities belonging respectively to 
                           
                              
                                 O
                              
                              
                                 1
                              
                           
                         and 
                           
                              
                                 O
                              
                              
                                 2
                              
                           
                        , and 
                           
                              val
                           
                         is the similarity value assigned to this pair of entities (for example, 
                           
                              val
                           
                           =
                           1
                         for equivalent entities).

For an entity 
                           E
                           ∈
                           
                              
                                 O
                              
                              
                                 1
                              
                           
                        , of category 
                           X
                         (class, property or instance), similarity matching consists in finding the entity 
                           F
                           ∈
                           
                              
                                 O
                              
                              
                                 2
                              
                           
                         of the same category 
                           X
                        , such as: 
                           
                              
                                 
                                    Sim
                                 
                                 
                                    (
                                    E
                                    ,
                                    F
                                    )
                                 
                                 =
                                 max
                                 
                                    (
                                    
                                       Sim
                                    
                                    
                                       (
                                       E
                                       ,
                                       
                                          
                                             F
                                          
                                          
                                             i
                                          
                                       
                                       )
                                    
                                    )
                                 
                                 ,
                                 
                                 ∀
                                 
                                    
                                       F
                                    
                                    
                                       i
                                    
                                 
                                 ∈
                                 
                                    
                                       O
                                    
                                    
                                       2
                                    
                                 
                              
                           
                         where 
                           
                              
                                 F
                              
                              
                                 i
                              
                           
                         is the 
                           i
                        th entity of category 
                           X
                         in 
                           
                              
                                 O
                              
                              
                                 2
                              
                           
                        , and 
                           1
                           ≤
                           i
                           ≤
                           n
                         (
                           n
                         is the number of entities of category 
                           X
                         in 
                           
                              
                                 O
                              
                              
                                 2
                              
                           
                        ). Once the similarity between 
                           E
                         and 
                           F
                         is calculated, the triplet representing the similarity will be added to the vector of similarity 
                           
                              
                                 V
                              
                              
                                 
                                    sim
                                 
                              
                           
                        . Category represents an entity type such as class, object property, or data type property. An aggregated function is associated to each category, which considers entities descriptions and their related entities (subsumption or semantic relations). It is based particularly on a model for calculating similarity at two levels: local and global. These functions will be detailed in Sections  5 and 6. 
                           
                              •
                              
                                 Similarity global function: is specific to each category. It represents the similarity final value for a pair of entities. It is described by an aggregate function of weighted local similarity functions.


                                 Similarity local function: is defined for entities descriptions that are parts of knowledge represented with OWL constructs.

Similarity global function of two entities designates the final value calculated in terms of related knowledge to both entities, regarding OWL DL expressiveness. Thus, it relies on the internal and external structures of entities to match. Methods based on the entities internal structure use descriptions such as range of properties (object or data type property), cardinalities, and some characteristics of properties (transitivity, symmetry, etc.)  [30]. Regarding the external structure, similarity measure is mainly based on the position of these entities in their hierarchy, i.e., if two entities are similar, their neighbors may also be similar.

The definition of our global function is based on that defined in OLA method for OWL Lite  [33]. Therefore, we adapt our global function to consider the extension of the OWL DL sub-language compared to OWL Lite. Actually, the similarity global function depends on two factors: 
                        
                           •
                           The category of entities to match, as defined in OWL DL: a class or concept (
                                 C
                              ), an object property (
                                 R
                              ), a data type property (
                                 P
                              ), a data type (
                                 D
                              ), an instance of class (
                                 
                                    IC
                                 
                              ), an instance of property (
                                 
                                    IR
                                 
                              ), or a data value (
                                 V
                              ).

The set of features associated to each category, such as its description, its hierarchy, its characteristics, etc.
                           

As presented in OLA, these categories can be related together using specific relationships, denoted 
                        F
                        
                           (
                           x
                           )
                        
                        =
                        
                           {
                           x
                           ;
                           ∃
                           y
                           ;
                           
                              〈
                              x
                              ,
                              y
                              〉
                           
                           ∈
                           F
                           }
                        
                     . These relationships are classified into many categories as following: 
                        
                           1.
                           
                              Specialization (
                                 S
                              ): between classes or properties. In a hierarchy, a sub-entity is a “specification” of a super-entity, and each super-entity is a “generalization” of the sub-entity.


                              Attribution (
                                 A
                              ): between a class and a property, or between a class instance and a property instance. It can be specified into: (
                                 
                                    
                                       A
                                    
                                    
                                       r
                                    
                                 
                              ) for object property, or (
                                 
                                    
                                       A
                                    
                                    
                                       p
                                    
                                 
                              ) for data type property.


                              Instantiation (
                                 I
                              ): between an instance and its type, e.g. between a class instance and a class, a property instance and a property.


                              Equivalence (
                                 E
                              ): between classes or properties.


                              Exclusion (
                                 X
                              ): (disjunction of classes). It is used to denote that intersection of two classes should be empty.


                              Domain (
                                 
                                    Do
                                 
                              ): between a property and classes defined as domain of the property.

Range (
                                 
                                    Co
                                 
                              ): between a property and classes defined as range of the property.


                              Inverse Property (
                                 
                                    InvP
                                 
                              ): between two object properties. For instance, the property “hasPrevious” is the inverse of the property “hasNext”.

Functions are also defined to specify certain characteristics of properties such as transitivity or symmetry of a property. Having a Boolean value (0 or 1), these functions are defined as following: 
                                 
                                    •
                                    
                                       
                                          
                                             Func
                                          
                                          
                                             (
                                             R
                                             )
                                          
                                          ,
                                          
                                             Func
                                          
                                          
                                             (
                                             P
                                             )
                                          
                                       : indicates respectively whether an object property (
                                          R
                                       ) or a data type property (
                                          P
                                       ) is functional or not.


                                       
                                          
                                             Tr
                                          
                                          
                                             (
                                             R
                                             )
                                          
                                          ,
                                          
                                             Sim
                                          
                                          
                                             (
                                             R
                                             )
                                          
                                          ,
                                          
                                             Inv
                                          
                                          
                                             (
                                             R
                                             )
                                          
                                       : indicates respectively whether an object property 
                                          R
                                        is transitive, symmetric, or inverse functional.

As defined in  [33], each category is specified by a list of characteristics and relations. Thus, the global function associated to a category is defined according to these characteristics and relations. The similarity global function 
                        
                           
                              
                                 Sim
                              
                           
                           
                              X
                           
                        
                        
                           (
                           C
                           ,
                           D
                           )
                        
                     , for a category 
                        X
                     , between two entities 
                        C
                      and 
                        D
                     , depends on the similarity values of pairs of entities 
                        
                           (
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 D
                              
                              
                                 j
                              
                           
                           )
                        
                     , where 
                        
                           (
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                           )
                        
                      and 
                        
                           (
                           
                              
                                 D
                              
                              
                                 j
                              
                           
                           )
                        
                      are related entities to 
                        C
                      and 
                        D
                      respectively (for example 
                        
                           
                              C
                           
                           
                              i
                           
                        
                      is a subclass of 
                        C
                     ).

The pair 
                        
                           (
                           C
                           ,
                           D
                           )
                        
                      to match is called “anchor” pair of the similarity, and pairs 
                        
                           (
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 D
                              
                              
                                 j
                              
                           
                           )
                        
                      related respectively to 
                        
                           (
                           C
                           ,
                           D
                           )
                        
                      are contributors pairs, since they affect directly the similarity value of the anchor pair  [33]. A contributor pair in a function can be an anchor pair in another function. This “contribution” relationship to determine similarity can be propagated transitively through the pairs of entities to be evaluated according to a depth 
                        n
                     , with 
                        n
                        >
                        0
                     . A depth parameter 
                        n
                      is defined in our algorithm to determine the order of propagation for similarity measure. By default, only direct entities are involved in the similarity computing, i.e. 
                     
                        n
                        =
                        1
                     .

In our method, we used the similarity global function defined in OLA  [33]. This global function is obtained by aggregating the similarity values of contributor pairs, by a weighted sum of these values, to control the contribution of each element. Practically, the global function of similarity 
                        
                           
                              
                                 Sim
                              
                           
                           
                              X
                           
                        
                        :
                        
                           
                              X
                           
                           
                              2
                           
                        
                        →
                        
                           [
                           0
                           ,
                           1
                           ]
                        
                     , relative to a category 
                        X
                      is defined as following  [33]: 
                        
                           
                              
                                 
                                    
                                       Sim
                                    
                                 
                                 
                                    X
                                 
                              
                              
                                 (
                                 x
                                 ,
                                 
                                    
                                       x
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    F
                                    ∈
                                    N
                                    
                                       (
                                       X
                                       )
                                    
                                 
                              
                              
                                 
                                    ω
                                 
                                 
                                    F
                                 
                                 
                                    X
                                 
                              
                              
                                 
                                    
                                       MSim
                                    
                                 
                                 
                                    Y
                                 
                              
                              
                                 (
                                 F
                                 
                                    (
                                    x
                                    )
                                 
                                 ,
                                 F
                                 
                                    (
                                    
                                       
                                          x
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                 
                                 )
                              
                           
                        
                      where 
                        N
                        
                           (
                           X
                           )
                        
                      denotes the set of relations defined for each category 
                        X
                     . A particular weight is associated to each type of relation 
                        F
                        
                           (
                           x
                           )
                        
                     . To consider the importance of each relation, a weighting parameter 
                        
                           
                              ω
                           
                           
                              F
                           
                           
                              X
                           
                        
                     , is defined, where each weight is positive 
                        
                           
                              ω
                           
                           
                              F
                           
                           
                              X
                           
                        
                        ≥
                        0
                     , and the weights sum equals 1, 
                        ∑
                        
                           
                              ω
                           
                           
                              F
                           
                           
                              X
                           
                        
                        =
                        1
                     .


                     Table 1
                      presents the characteristics of each category considered in the similarity global function definition. These characteristics are defined, according to OWL DL, for two main categories: concepts (category “class”) and properties (categories: “object property” and “data type property”).

The similarity global function of two classes 
                        C
                      and 
                        D
                      is defined by 
                        
                           
                              
                                 
                                    
                                       Sim
                                    
                                 
                                 
                                    C
                                 
                              
                              
                                 (
                                 C
                                 ,
                                 D
                                 )
                              
                              =
                              
                                 
                                    ω
                                 
                                 
                                    E
                                 
                                 
                                    C
                                 
                              
                              
                                 Sim
                              
                              
                                 (
                                 E
                                 
                                    (
                                    C
                                    )
                                 
                                 ,
                                 E
                                 
                                    (
                                    D
                                    )
                                 
                                 )
                              
                              +
                              
                                 
                                    ω
                                 
                                 
                                    S
                                 
                                 
                                    C
                                 
                              
                              
                                 Sim
                              
                              
                                 (
                                 S
                                 
                                    (
                                    C
                                    )
                                 
                                 ,
                                 S
                                 
                                    (
                                    D
                                    )
                                 
                                 )
                              
                              +
                              
                                 
                                    ω
                                 
                                 
                                    A
                                    R
                                 
                                 
                                    R
                                 
                              
                              
                                 MSim
                              
                              
                                 (
                                 
                                    
                                       A
                                    
                                    
                                       R
                                    
                                 
                                 
                                    (
                                    C
                                    )
                                 
                                 ,
                                 
                                    
                                       A
                                    
                                    
                                       R
                                    
                                 
                                 
                                    (
                                    D
                                    )
                                 
                                 )
                              
                              +
                              
                                 
                                    ω
                                 
                                 
                                    A
                                    P
                                 
                                 
                                    P
                                 
                              
                              
                                 MSim
                              
                              
                                 (
                                 
                                    
                                       A
                                    
                                    
                                       P
                                    
                                 
                                 
                                    (
                                    C
                                    )
                                 
                                 ,
                                 
                                    
                                       A
                                    
                                    
                                       P
                                    
                                 
                                 
                                    (
                                    D
                                    )
                                 
                                 )
                              
                           
                        
                      where 
                        
                           
                              ω
                           
                           
                              F
                           
                           
                              X
                           
                        
                        ≥
                        0
                     , and 
                        ∑
                        
                           
                              ω
                           
                           
                              F
                           
                           
                              X
                           
                        
                        =
                        1
                     .

The equation indicates that the similarity global function between two classes 
                        C
                      and 
                        D
                     , is calculated in terms of similarities of their equivalent entities 
                        
                           (
                           E
                           
                              (
                              C
                              )
                           
                           ,
                           E
                           
                              (
                              D
                              )
                           
                           )
                        
                     , their ascendant and descendant entities 
                        
                           (
                           S
                           
                              (
                              C
                              )
                           
                           ,
                           S
                           
                              (
                              D
                              )
                           
                           )
                        
                     , their object properties 
                        
                           (
                           
                              
                                 A
                              
                              
                                 R
                              
                           
                           
                              (
                              C
                              )
                           
                           ,
                           
                              
                                 A
                              
                              
                                 R
                              
                           
                           
                              (
                              D
                              )
                           
                           )
                        
                     , and their data type properties 
                        
                           (
                           
                              
                                 A
                              
                              
                                 P
                              
                           
                           
                              (
                              C
                              )
                           
                           ,
                           
                              
                                 A
                              
                              
                                 P
                              
                           
                           
                              (
                              D
                              )
                           
                           )
                        
                     . The global function for classes is illustrated in (Fig. 4
                     (a)).

For the similarities of properties, 
                        
                           MSim
                        
                        
                           (
                           
                              Multiple Similarities
                           
                           )
                        
                      indicates that the calculation is carried out between two sets of elements. We used the similarity function, “Match-Based Similarity” defined by Touzani  [40]: 
                        
                           
                              
                                 MSim
                              
                              
                                 (
                                 E
                                 ,
                                 
                                    
                                       E
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                              =
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             (
                                             i
                                             ,
                                             
                                                
                                                   i
                                                
                                                
                                                   ′
                                                
                                             
                                             )
                                          
                                          ∈
                                          
                                          
                                             pairs
                                          
                                          
                                             (
                                             E
                                             ,
                                             
                                                
                                                   E
                                                
                                                
                                                   ′
                                                
                                             
                                             )
                                          
                                       
                                    
                                    
                                       Sim
                                    
                                    
                                       (
                                       i
                                       ,
                                       
                                          
                                             i
                                          
                                          
                                             ′
                                          
                                       
                                       )
                                    
                                 
                                 
                                    
                                       Max
                                    
                                    
                                       (
                                       
                                          |
                                          E
                                          |
                                       
                                       ,
                                       
                                          |
                                          
                                             
                                                E
                                             
                                             
                                                ′
                                             
                                          
                                          |
                                       
                                       )
                                    
                                 
                              
                           
                        
                      where 
                        
                           (
                           E
                           )
                        
                      and 
                        
                           (
                           
                              
                                 E
                              
                              
                                 ′
                              
                           
                           )
                        
                      represent two sets of elements of the same category. This function requires that the similarities between pairs of elements 
                        
                           (
                           i
                           ,
                           
                              
                                 i
                              
                              
                                 ′
                              
                           
                           )
                        
                      of 
                        
                           (
                           E
                           ,
                           
                              
                                 E
                              
                              
                                 ′
                              
                           
                           )
                        
                      are already computed. Then a selection phase is performed to select for each element 
                        i
                      of 
                        
                           (
                           E
                           )
                        
                      the element 
                        
                           
                              i
                           
                           
                              ′
                           
                        
                      of 
                        
                           (
                           
                              
                                 E
                              
                              
                                 ′
                              
                           
                           )
                        
                      with the maximum similarity.

Regarding the knowledge related to the description of a property, the similarity function between two properties 
                        
                           
                              R
                           
                           
                              1
                           
                        
                      and 
                        
                           
                              R
                           
                           
                              1
                           
                           
                              ′
                           
                        
                     , illustrated in (Fig. 4(b)), is defined by: 
                        
                           
                              
                                 
                                    
                                       Sim
                                    
                                 
                                 
                                    R
                                 
                              
                              
                                 (
                                 
                                    
                                       R
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       
                                          
                                             R
                                          
                                          
                                             1
                                          
                                       
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                              =
                              
                                 
                                    ω
                                 
                                 
                                    
                                       
                                          D
                                       
                                       
                                          o
                                       
                                    
                                 
                                 
                                    C
                                 
                              
                              
                                 
                                    
                                       Sim
                                    
                                 
                                 
                                    C
                                 
                              
                              
                                 (
                                 A
                                 ,
                                 
                                    
                                       A
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                              +
                              
                                 
                                    ω
                                 
                                 
                                    
                                       
                                          C
                                       
                                       
                                          o
                                       
                                    
                                 
                                 
                                    C
                                 
                              
                              
                                 
                                    
                                       Sim
                                    
                                 
                                 
                                    C
                                 
                              
                              
                                 (
                                 B
                                 ,
                                 
                                    
                                       B
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                              +
                              
                                 
                                    ω
                                 
                                 
                                    E
                                 
                                 
                                    R
                                 
                              
                              
                                 
                                    
                                       Sim
                                    
                                 
                                 
                                    R
                                 
                              
                              
                                 (
                                 
                                    
                                       R
                                    
                                    
                                       3
                                    
                                 
                                 ,
                                 
                                    
                                       
                                          
                                             R
                                          
                                          
                                             3
                                          
                                       
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                              +
                              
                                 
                                    ω
                                 
                                 
                                    S
                                 
                                 
                                    R
                                 
                              
                              
                                 
                                    
                                       Sim
                                    
                                 
                                 
                                    R
                                 
                              
                              
                                 (
                                 
                                    
                                       R
                                    
                                    
                                       2
                                    
                                 
                                 ,
                                 
                                    
                                       
                                          
                                             R
                                          
                                          
                                             2
                                          
                                       
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                              +
                              
                                 
                                    ω
                                 
                                 
                                    
                                       Func
                                    
                                 
                              
                              
                                 Func
                              
                              
                                 (
                                 
                                    
                                       R
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       
                                          
                                             R
                                          
                                          
                                             1
                                          
                                       
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                              +
                              
                                 
                                    ω
                                 
                                 
                                    
                                       Sym
                                    
                                 
                              
                              
                                 Sym
                              
                              
                                 (
                                 
                                    
                                       R
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       
                                          
                                             R
                                          
                                          
                                             1
                                          
                                       
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                              +
                              
                                 
                                    ω
                                 
                                 
                                    
                                       Tr
                                    
                                 
                              
                              
                                 Tr
                              
                              
                                 (
                                 
                                    
                                       R
                                    
                                    
                                       1
                                    
                                 
                                 ,
                                 
                                    
                                       
                                          
                                             R
                                          
                                          
                                             1
                                          
                                       
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                           
                        
                      where: 
                        
                           
                              ω
                           
                           
                              F
                           
                           
                              X
                           
                        
                        ≥
                        0
                     , and 
                        ∑
                        
                           
                              ω
                           
                           
                              F
                           
                           
                              X
                           
                        
                        =
                        1
                     . 
                        Example
                        Consider the example of measuring the similarity between two concepts Revolve and Hole, representing two design features. The similarity global function between these two concepts is defined by: 
                              
                                 
                                    
                                       
                                          
                                             Sim
                                          
                                       
                                       
                                          C
                                       
                                    
                                    
                                       (
                                       
                                          Revolve
                                       
                                       ,
                                       
                                          Hole
                                       
                                       )
                                    
                                    =
                                    
                                       
                                          ω
                                       
                                       
                                          E
                                       
                                       
                                          C
                                       
                                    
                                    
                                    
                                       Sim
                                    
                                    
                                       (
                                       E
                                       
                                          (
                                          
                                             Revolve
                                          
                                          )
                                       
                                       ,
                                       E
                                       
                                          (
                                          
                                             Hole
                                          
                                          )
                                       
                                       )
                                    
                                    +
                                    
                                       
                                          ω
                                       
                                       
                                          S
                                       
                                       
                                          C
                                       
                                    
                                    
                                    
                                       Sim
                                    
                                    
                                       (
                                       S
                                       
                                          (
                                          
                                             Revolve
                                          
                                          )
                                       
                                       ,
                                       S
                                       
                                          (
                                          
                                             Hole
                                          
                                          )
                                       
                                       )
                                    
                                    +
                                    
                                       
                                          ω
                                       
                                       
                                          
                                             
                                                A
                                             
                                             
                                                R
                                             
                                          
                                       
                                       
                                          R
                                       
                                    
                                    
                                    
                                       MSim
                                    
                                    
                                       (
                                       
                                          
                                             A
                                          
                                          
                                             R
                                          
                                       
                                       
                                          (
                                          
                                             Revolve
                                          
                                          )
                                       
                                       ,
                                       
                                          
                                             A
                                          
                                          
                                             R
                                          
                                       
                                       
                                          (
                                          
                                             Hole
                                          
                                          )
                                       
                                       )
                                    
                                    +
                                    
                                       
                                          ω
                                       
                                       
                                          
                                             
                                                A
                                             
                                             
                                                P
                                             
                                          
                                       
                                       
                                          P
                                       
                                    
                                    
                                    
                                       MSim
                                    
                                    
                                       (
                                       
                                          
                                             A
                                          
                                          
                                             P
                                          
                                       
                                       
                                          (
                                          
                                             Revolve
                                          
                                          )
                                       
                                       ,
                                       
                                          
                                             A
                                          
                                          
                                             P
                                          
                                       
                                       
                                          (
                                          
                                             Hole
                                          
                                          )
                                       
                                       )
                                    
                                    .
                                 
                              
                            We consider particularly the similarity measure between the set of properties of both concepts. Thus, we suppose that: 
                              
                                 •
                                 The similarities values of equivalent concepts and neighbors concepts are zero, i.e. 
                                    
                                       
                                          Sim
                                       
                                       
                                          (
                                          E
                                          
                                             (
                                             
                                                Revolve
                                             
                                             )
                                          
                                          ,
                                          E
                                          
                                             (
                                             
                                                Hole
                                             
                                             )
                                          
                                          )
                                       
                                       =
                                       0
                                     and 
                                       
                                          Sim
                                       
                                       
                                          (
                                          S
                                          
                                             (
                                             
                                                Revolve
                                             
                                             )
                                          
                                          ,
                                          S
                                          
                                             (
                                             
                                                Hole
                                             
                                             )
                                          
                                          )
                                       
                                       =
                                       0
                                    
                                 

The weights are evenly distributed between the different components, i.e. 
                                    
                                       
                                          
                                             ω
                                          
                                          
                                             E
                                          
                                          
                                             C
                                          
                                       
                                       =
                                       
                                          
                                             ω
                                          
                                          
                                             S
                                          
                                          
                                             C
                                          
                                       
                                       =
                                       
                                          
                                             ω
                                          
                                          
                                             
                                                
                                                   A
                                                
                                                
                                                   R
                                                
                                             
                                          
                                          
                                             R
                                          
                                       
                                       =
                                       
                                          
                                             ω
                                          
                                          
                                             
                                                
                                                   A
                                                
                                                
                                                   P
                                                
                                             
                                          
                                          
                                             P
                                          
                                       
                                       =
                                       0.25
                                    
                                 

The set of properties for Revolve and Hole is given respectively by: 
                                       
                                          
                                             
                                                
                                                   (
                                                   E
                                                   )
                                                
                                                =
                                                A
                                                
                                                   (
                                                   
                                                      Revolve
                                                   
                                                   )
                                                
                                                =
                                                
                                                   {
                                                   
                                                      hasDiameter
                                                   
                                                   ,
                                                   
                                                      hasSketch
                                                   
                                                   }
                                                
                                             
                                          
                                          
                                             
                                                
                                                   (
                                                   
                                                      
                                                         E
                                                      
                                                      
                                                         ′
                                                      
                                                   
                                                   )
                                                
                                                =
                                                A
                                                
                                                   (
                                                   
                                                      Hole
                                                   
                                                   )
                                                
                                                =
                                                
                                                   {
                                                   
                                                      hasRadius
                                                   
                                                   ,
                                                   
                                                      hasProfile
                                                   
                                                   ,
                                                   
                                                      hasName
                                                   
                                                   }
                                                
                                                .
                                             
                                          
                                       
                                    
                                 

Note that 
                        A
                      denotes the attribution function of a concept to a property, and is composed of 
                        
                           (
                           
                              
                                 A
                              
                              
                                 R
                              
                           
                           )
                        
                      for the object properties and 
                        
                           (
                           
                              
                                 A
                              
                              
                                 P
                              
                           
                           )
                        
                      for the data type properties.

Suppose that similarity measure between pairs of elements of 
                        
                           (
                           E
                           )
                        
                      and 
                        
                           (
                           
                              
                                 E
                              
                              
                                 ′
                              
                           
                           )
                        
                      have the following values: 
                        
                           
                              
                                 
                                    Sim
                                 
                                 
                                    (
                                    
                                       hasDiameter
                                    
                                    ,
                                    
                                       hasRadius
                                    
                                    )
                                 
                                 =
                                 0.72
                                 ;
                                 
                                 
                                    Sim
                                 
                                 
                                    (
                                    
                                       hasSketch
                                    
                                    ,
                                    
                                       hasRadius
                                    
                                    )
                                 
                                 =
                                 0.18
                              
                           
                           
                              
                                 
                                    Sim
                                 
                                 
                                    (
                                    
                                       hasDiameter
                                    
                                    ,
                                    
                                       hasProfile
                                    
                                    )
                                 
                                 =
                                 0.20
                                 ;
                                 
                                 
                                    Sim
                                 
                                 
                                    (
                                    
                                       hasSketch
                                    
                                    ,
                                    
                                       hasProfile
                                    
                                    )
                                 
                                 =
                                 0.67
                              
                           
                           
                              
                                 
                                    Sim
                                 
                                 
                                    (
                                    
                                       hasDiameter
                                    
                                    ,
                                    
                                       hasName
                                    
                                    )
                                 
                                 =
                                 0.11
                                 ;
                                 
                                 
                                    Sim
                                 
                                 
                                    (
                                    
                                       hasSketch
                                    
                                    ,
                                    
                                       hasName
                                    
                                    )
                                 
                                 =
                                 0.09
                                 .
                              
                           
                        
                     
                  

Thus, the selected entities, representing the best similarity for each element are: 
                        
                           
                              
                                 Pairs
                              
                              
                                 (
                                 E
                                 ,
                                 
                                    
                                       E
                                    
                                    
                                       ′
                                    
                                 
                                 )
                              
                              =
                              
                                 {
                                 
                                    (
                                    
                                       hasDiameter
                                    
                                    ,
                                    
                                       hasRadius
                                    
                                    )
                                 
                                 ,
                                 
                                    (
                                    
                                       hasSketch
                                    
                                    ,
                                    
                                       hasProfile
                                    
                                    )
                                 
                                 }
                              
                           
                        
                      and: 
                        
                           
                              
                                 
                                    MSim
                                 
                                 
                                    (
                                    E
                                    ,
                                    
                                       
                                          E
                                       
                                       
                                          ′
                                       
                                    
                                    )
                                 
                                 =
                                 
                                    
                                       0.72
                                       +
                                       0.67
                                    
                                    
                                       3
                                    
                                 
                                 =
                                 0.46
                              
                           
                           
                              
                                 
                                    
                                       
                                          Sim
                                       
                                    
                                    
                                       C
                                    
                                 
                                 
                                    (
                                    
                                       Revolve
                                    
                                    ,
                                    
                                       Hole
                                    
                                    )
                                 
                                 =
                                 
                                    
                                       ω
                                    
                                    
                                       A
                                    
                                    
                                       R
                                    
                                 
                                 
                                    MSim
                                 
                                 
                                    (
                                    A
                                    
                                       (
                                       
                                          Revolve
                                       
                                       )
                                    
                                    ,
                                    A
                                    
                                       (
                                       
                                          Hole
                                       
                                       )
                                    
                                    )
                                 
                                 =
                                 0.5
                                 ×
                                 0.46
                                 =
                                 0.23
                                 .
                              
                           
                        
                     
                  

Similarity local functions are defined to measure similarity between two entities descriptions. We have chosen a scenario, used in many similarity methods  [18,35], based mainly on the following steps: 
                        
                           •
                           
                              Normalization: it consists in transforming the description into a normal form, such as the conjunction (CNF: Conjunctive Normal Form) or disjunction (DNF: Disjunctive Normal Form).


                              Matrix: it consists in applying an alignment matrix between the different parts resulting from the first step.


                              Specific functions to logical constructors: it consists in comparing the different elements of the matrix and defining a similarity local function specific to each constructor 
                                 
                                    (
                                    ∩
                                    ,
                                    ∪
                                    ,
                                    ∃
                                    ,
                                    ∀
                                    ,
                                    ≤
                                    ,
                                    ≥
                                    )
                                 
                              .

(1) Normalization of entities descriptions:

This is a preliminary phase before computing similarity. Compared entities have to be rephrased to a canonical form to reduce potential syntactic influence. Normalization process is performed by applying certain rules of conversion. It depends basically on the underlying representation language and its importance increases with the expressiveness of the used language. For DLs based languages, a subsumption algorithm, presented in  [41], enables converting a concept description into DNF. Concretely, an implementation was performed in the SIM-DL project for similarity measure in the domain of geography  [35]. Developers of this application provided us the API of this implementation to normalize OWL DL descriptions.

For the normalization process, a concept description is firstly converted to its Negative Normal Form (NNF), i.e. the only negatives in a description are of the form 
                        
                           (
                           ¬
                           A
                           )
                        
                     , where 
                        A
                      is a primitive concept. Concepts descriptions are converted into NNF by applying the following rules, using De Morgan’s laws: 
                        
                           
                              
                                 ¬
                                 ⊤
                                 →
                                 ⊥
                              
                           
                           
                              
                                 ¬
                                 ⊥
                                 →
                                 ⊤
                              
                           
                           
                              
                                 ¬
                                 ¬
                                 C
                                 →
                                 C
                              
                           
                           
                              
                                 ¬
                                 
                                    (
                                    C
                                    ∪
                                    D
                                    )
                                 
                                 →
                                 ¬
                                 C
                                 ∩
                                 ¬
                                 D
                              
                           
                           
                              
                                 ¬
                                 
                                    (
                                    C
                                    ∩
                                    D
                                    )
                                 
                                 →
                                 ¬
                                 C
                                 ∪
                                 ¬
                                 D
                              
                           
                           
                              
                                 ¬
                                 
                                    (
                                    ∀
                                    R
                                    .
                                    C
                                    )
                                 
                                 →
                                 
                                    (
                                    ∃
                                    
                                    R
                                    .
                                    ¬
                                    C
                                    )
                                 
                              
                           
                           
                              
                                 ¬
                                 
                                    (
                                    ∃
                                    R
                                    .
                                    C
                                    )
                                 
                                 →
                                 
                                    (
                                    ∀
                                    
                                    R
                                    .
                                    ¬
                                    C
                                    )
                                 
                              
                           
                           
                              
                                 ¬
                                 
                                    (
                                    ≤
                                    n
                                    R
                                    )
                                 
                                 →
                                 ≥
                                 
                                    (
                                    n
                                    +
                                    1
                                    )
                                 
                                 R
                              
                           
                           
                              
                                 ¬
                                 
                                    (
                                    ≥
                                    n
                                    R
                                    )
                                 
                                 →
                                 ≤
                                 
                                    (
                                    n
                                    −
                                    1
                                    )
                                 
                                 R
                                 
                                 if  
                                 n
                                 >
                                 1
                              
                           
                           
                              
                                 ¬
                                 
                                    (
                                    ≥
                                    n
                                    R
                                    )
                                 
                                 →
                                 ∀
                                 
                                 R
                                 .
                                 ⊥
                                 
                                 if  
                                 n
                                 =
                                 1
                              
                           
                        
                      where 
                        C
                      and 
                        D
                      are two complex concepts, 
                        R
                      is a relation, and 
                        n
                      an integer.

The result is then converted into DNF applying the following rules: 
                        
                           
                              
                                 A
                                 ∩
                                 
                                    (
                                    C
                                    ∪
                                    D
                                    )
                                 
                                 ↔
                                 
                                    (
                                    A
                                    ∩
                                    C
                                    )
                                 
                                 ∪
                                 
                                    (
                                    A
                                    ∩
                                    D
                                    )
                                 
                              
                           
                           
                              
                                 
                                    (
                                    C
                                    ∪
                                    D
                                    )
                                 
                                 ∩
                                 A
                                 ↔
                                 
                                    (
                                    C
                                    ∩
                                    A
                                    )
                                 
                                 ∪
                                 
                                    (
                                    D
                                    ∩
                                    A
                                    )
                                 
                                 .
                              
                           
                        
                     
                  

Thus, a description of an entity 
                        C
                      is normalized in DNF 
                        iff  
                        C
                        ≡
                        ⊤
                        ,
                        C
                        ≡
                        ⊥
                        ,
                          or  
                        C
                        ≡
                        
                           
                              C
                           
                           
                              1
                           
                        
                        ∪
                        
                           
                              C
                           
                           
                              2
                           
                        
                        ∪
                        
                           
                              C
                           
                           
                              3
                           
                        
                        ∪
                        ⋯
                        ∪
                        
                           
                              C
                           
                           
                              n
                           
                        
                      and each 
                        
                           
                              C
                           
                           
                              i
                           
                        
                        
                           (
                           i
                           :
                           1
                           …
                           n
                           )
                        
                      is a disjunction of 
                        C
                      composed of a conjunction of elements described as follows: 
                        
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                              ≡
                              
                                 
                                    E
                                 
                                 
                                    1
                                 
                              
                              ∩
                              
                                 
                                    E
                                 
                                 
                                    2
                                 
                              
                              ∩
                              
                                 
                                    E
                                 
                                 
                                    3
                                 
                              
                              ∩
                              
                                 
                                    E
                                 
                                 
                                    4
                                 
                              
                              ∩
                              
                                 
                                    E
                                 
                                 
                                    5
                                 
                              
                              ∩
                              
                              
                                 
                                    E
                                 
                                 
                                    6
                                 
                              
                           
                        
                      where 
                        
                           
                              E
                           
                           
                              i
                           
                        
                        ,
                        1
                        ≤
                        i
                        ≤
                        6
                     , is an element of conjunction that matches one of the six following components: 
                        
                           
                              
                                 
                                    
                                       E
                                    
                                    
                                       1
                                    
                                 
                                 ≡
                                 
                                    (
                                    
                                       
                                          ∩
                                       
                                       
                                          0
                                       
                                       
                                          I
                                       
                                    
                                    
                                       
                                          A
                                       
                                       
                                          i
                                       
                                    
                                    )
                                 
                              
                           
                           
                              
                                 
                                    
                                       E
                                    
                                    
                                       2
                                    
                                 
                                 ≡
                                 
                                    (
                                    
                                       
                                          ∩
                                       
                                       
                                          0
                                       
                                       
                                          J
                                       
                                    
                                    R
                                    .
                                    
                                       
                                          D
                                       
                                       
                                          j
                                       
                                    
                                    )
                                 
                              
                           
                           
                              
                                 
                                    
                                       E
                                    
                                    
                                       3
                                    
                                 
                                 ≡
                                 
                                    (
                                    
                                       
                                          ∩
                                       
                                       
                                          0
                                       
                                       
                                          K
                                       
                                    
                                    ∀
                                    R
                                    .
                                    
                                       
                                          D
                                       
                                       
                                          k
                                       
                                    
                                    )
                                 
                              
                           
                           
                              
                                 
                                    
                                       E
                                    
                                    
                                       4
                                    
                                 
                                 ≡
                                 
                                    (
                                    
                                       
                                          ∩
                                       
                                       
                                          0
                                       
                                       
                                          L
                                       
                                    
                                    ∃
                                    R
                                    .
                                    
                                       
                                          D
                                       
                                       
                                          l
                                       
                                    
                                    )
                                 
                              
                           
                           
                              
                                 
                                    
                                       E
                                    
                                    
                                       5
                                    
                                 
                                 ≡
                                 
                                    (
                                    
                                       
                                          ∩
                                       
                                       
                                          0
                                       
                                       
                                          M
                                       
                                    
                                    ≥
                                    n
                                    R
                                    .
                                    
                                       
                                          D
                                       
                                       
                                          m
                                       
                                    
                                    )
                                 
                              
                           
                           
                              
                                 
                                    
                                       E
                                    
                                    
                                       6
                                    
                                 
                                 ≡
                                 
                                    (
                                    
                                       
                                          ∩
                                       
                                       
                                          0
                                       
                                       
                                          N
                                       
                                    
                                    ≤
                                    p
                                    R
                                    .
                                    
                                       
                                          D
                                       
                                       
                                          n
                                       
                                    
                                    )
                                 
                                 .
                              
                           
                        
                     
                     
                        
                           
                              E
                           
                           
                              1
                           
                        
                      denotes the set of intersection of primitive concepts 
                        
                           
                              A
                           
                           
                              i
                           
                        
                     , or their negation. 
                        R
                      is a binary relation. 
                        
                           
                              E
                           
                           
                              3
                           
                        
                      and 
                        
                           
                              E
                           
                           
                              4
                           
                        
                      represent restrictions defined respectively by universal and existential quantifiers
                        .
                        
                           
                              E
                           
                           
                              5
                           
                        
                      and 
                        
                           
                              E
                           
                           
                              6
                           
                        
                      represent restrictions on minimum and maximum cardinalities constructs.

(2) Defining the alignment matrix.

The normalization process generates for each description a set of disjunction. Thus, the descriptions of 
                        C
                      and 
                        D
                     , dubbed 
                        
                           
                              C
                           
                           
                              
                                 des
                              
                           
                        
                      and 
                        
                           
                              D
                           
                           
                              
                                 des
                              
                           
                        
                     , are respectively represented as follows: 
                        
                           
                              
                                 
                                    
                                       C
                                    
                                    
                                       
                                          des
                                       
                                    
                                 
                                 ≡
                                 
                                    
                                       C
                                    
                                    
                                       1
                                    
                                 
                                 ∪
                                 
                                    
                                       C
                                    
                                    
                                       2
                                    
                                 
                                 ∪
                                 
                                    
                                       C
                                    
                                    
                                       3
                                    
                                 
                                 ∪
                                 ⋯
                                 ∪
                                 
                                    
                                       C
                                    
                                    
                                       m
                                    
                                 
                              
                           
                           
                              
                                 
                                    
                                       D
                                    
                                    
                                       
                                          des
                                       
                                    
                                 
                                 ≡
                                 
                                    
                                       D
                                    
                                    
                                       1
                                    
                                 
                                 ∪
                                 
                                    
                                       D
                                    
                                    
                                       2
                                    
                                 
                                 ∪
                                 
                                    
                                       D
                                    
                                    
                                       3
                                    
                                 
                                 ∪
                                 ⋯
                                 ∪
                                 
                                    
                                       D
                                    
                                    
                                       n
                                    
                                 
                              
                           
                        
                      where each disjunction of 
                        
                           
                              C
                           
                           
                              
                                 des
                              
                           
                        
                      and 
                        
                           
                              D
                           
                           
                              
                                 des
                              
                           
                        
                      is represented respectively by 
                        
                           
                              C
                           
                           
                              
                                 dis
                              
                           
                        
                      and 
                        
                           
                              D
                           
                           
                              
                                 dis
                              
                           
                        
                     .

The alignment matrix is necessary to determine which parts of descriptions are compared. Most theories assume similarity to be a binary relation, i.e. applied to a pair of entities. Hence, an alignment matrix between various disjunction elements is established. For comparing 
                        
                           
                              C
                           
                           
                              
                                 des
                              
                           
                        
                      and 
                        
                           
                              D
                           
                           
                              
                                 des
                              
                           
                        
                      the alignment matrix creates tuples 
                        
                           Sim
                        
                        
                           (
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 D
                              
                              
                                 j
                              
                           
                           )
                        
                      for all possible combinations of the Cartesian product 
                        
                           
                              C
                           
                           
                              
                                 des
                              
                           
                        
                        ×
                        
                           
                              D
                           
                           
                              
                                 des
                              
                           
                        
                        [42]. 
                        
                           
                              
                                 
                                    
                                       M
                                    
                                 
                                 
                                    
                                       Des
                                    
                                 
                              
                              =
                              
                                 [
                                 
                                    
                                       
                                          
                                             
                                                C
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                D
                                             
                                             
                                                1
                                             
                                          
                                       
                                       
                                          
                                             
                                                C
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                D
                                             
                                             
                                                2
                                             
                                          
                                       
                                       
                                          ⋯
                                       
                                       
                                          
                                             
                                                C
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                D
                                             
                                             
                                                n
                                                −
                                                1
                                             
                                          
                                       
                                       
                                          
                                             
                                                C
                                             
                                             
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                D
                                             
                                             
                                                n
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                C
                                             
                                             
                                                2
                                             
                                          
                                          ,
                                          
                                             
                                                D
                                             
                                             
                                                1
                                             
                                          
                                       
                                       
                                          
                                             
                                                C
                                             
                                             
                                                2
                                             
                                          
                                          ,
                                          
                                             
                                                D
                                             
                                             
                                                2
                                             
                                          
                                       
                                       
                                          ⋯
                                       
                                       
                                          
                                             
                                                C
                                             
                                             
                                                2
                                             
                                          
                                          ,
                                          
                                             
                                                D
                                             
                                             
                                                n
                                                −
                                                1
                                             
                                          
                                       
                                       
                                          
                                             
                                                C
                                             
                                             
                                                2
                                             
                                          
                                          ,
                                          
                                             
                                                D
                                             
                                             
                                                n
                                             
                                          
                                       
                                    
                                    
                                       
                                          ⋮
                                       
                                       
                                          ⋮
                                       
                                       
                                          ⋮
                                       
                                       
                                          ⋮
                                       
                                       
                                          ⋮
                                       
                                    
                                    
                                       
                                          
                                             
                                                C
                                             
                                             
                                                m
                                                −
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                D
                                             
                                             
                                                1
                                             
                                          
                                       
                                       
                                          
                                             
                                                C
                                             
                                             
                                                m
                                                −
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                D
                                             
                                             
                                                2
                                             
                                          
                                       
                                       
                                          ⋯
                                       
                                       
                                          
                                             
                                                C
                                             
                                             
                                                m
                                                −
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                D
                                             
                                             
                                                n
                                                −
                                                1
                                             
                                          
                                       
                                       
                                          
                                             
                                                C
                                             
                                             
                                                m
                                                −
                                                1
                                             
                                          
                                          ,
                                          
                                             
                                                D
                                             
                                             
                                                n
                                             
                                          
                                       
                                    
                                    
                                       
                                          
                                             
                                                C
                                             
                                             
                                                m
                                             
                                          
                                          ,
                                          
                                             
                                                D
                                             
                                             
                                                1
                                             
                                          
                                       
                                       
                                          
                                             
                                                C
                                             
                                             
                                                m
                                             
                                          
                                          ,
                                          
                                             
                                                D
                                             
                                             
                                                2
                                             
                                          
                                       
                                       
                                          ⋯
                                       
                                       
                                          
                                             
                                                C
                                             
                                             
                                                m
                                             
                                          
                                          ,
                                          
                                             
                                                D
                                             
                                             
                                                n
                                                −
                                                1
                                             
                                          
                                       
                                       
                                          
                                             
                                                C
                                             
                                             
                                                m
                                             
                                          
                                          ,
                                          
                                             
                                                D
                                             
                                             
                                                n
                                             
                                          
                                       
                                    
                                 
                                 ]
                              
                              .
                           
                        
                     
                  


                     Matrix of parts to match.

Each element of the matrix 
                        
                           (
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 D
                              
                              
                                 j
                              
                           
                           )
                        
                      represents a pair of disjunction 
                        
                           
                              C
                           
                           
                              
                                 dis
                              
                           
                        
                      and 
                        
                           
                              D
                           
                           
                              
                                 dis
                              
                           
                        
                     . As mentioned before, each disjunction is a set of conjunction of elements 
                        
                           
                              E
                           
                           
                              i
                           
                        
                     . Similarity between two elements 
                        
                           (
                           
                              
                                 E
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 E
                              
                              
                                 i
                              
                              
                                 ′
                              
                           
                           )
                        
                      can only be calculated if both elements are based on the same constructor. For instance, a cardinality restriction (≤), cannot be compared to a restriction on universal quantification 
                        ∀
                     . Thus, we define a specific similarity function for each type of constructors.

Once similarity values of all pairs 
                        
                           Sim
                        
                        
                           (
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 D
                              
                              
                                 j
                              
                           
                           )
                        
                      are calculated, we choose for each 
                        
                           
                              C
                           
                           
                              i
                           
                        
                      the disjunction 
                        
                           
                              D
                           
                           
                              j
                           
                        
                      with the highest similarity value for further computation. These selected pairs are used to determine the similarity value between 
                        
                           
                              C
                           
                           
                              
                                 des
                              
                           
                        
                      and 
                        
                           
                              D
                           
                           
                              
                                 des
                              
                           
                        
                     . Thus, the set of selected pairs is represented as follows: 
                        
                           
                              S
                              =
                              
                                 {
                                 
                                    (
                                    
                                       
                                          C
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          D
                                       
                                       
                                          l
                                       
                                    
                                    )
                                 
                                 ,
                                 
                                    (
                                    
                                       
                                          C
                                       
                                       
                                          2
                                       
                                    
                                    ,
                                    
                                       
                                          D
                                       
                                       
                                          m
                                       
                                    
                                    )
                                 
                                 ,
                                 …
                                 ,
                                 
                                    (
                                    
                                       
                                          C
                                       
                                       
                                          n
                                       
                                    
                                    ,
                                    
                                       
                                          D
                                       
                                       
                                          z
                                       
                                    
                                    )
                                 
                                 }
                              
                              .
                           
                        
                     
                  

Note that each disjunction 
                        
                           
                              C
                           
                           
                              i
                           
                        
                      and 
                        
                           
                              D
                           
                           
                              j
                           
                        
                      is selected only once and presented in the set 
                        S
                     . The similarity function between the descriptions 
                        
                           
                              C
                           
                           
                              
                                 des
                              
                           
                        
                      and 
                        
                           
                              D
                           
                           
                              
                                 des
                              
                           
                        
                     , defined as the average of the similarities of the selected set 
                        S
                     , is given by the following function: 
                        
                           
                              
                                 
                                    
                                       Sim
                                    
                                 
                                 
                                    
                                       des
                                    
                                 
                              
                              
                                 (
                                 C
                                 ,
                                 D
                                 )
                              
                              =
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             (
                                             
                                                
                                                   C
                                                
                                                
                                                   i
                                                
                                             
                                             ,
                                             
                                                
                                                   D
                                                
                                                
                                                   j
                                                
                                             
                                             )
                                          
                                          ∈
                                          S
                                       
                                    
                                    
                                       
                                          
                                             Sim
                                          
                                       
                                       
                                          
                                             dis
                                          
                                       
                                    
                                    
                                       (
                                       
                                          
                                             C
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             D
                                          
                                          
                                             j
                                          
                                       
                                       )
                                    
                                 
                                 
                                    
                                       Max
                                    
                                    
                                       (
                                       m
                                       ,
                                       n
                                       )
                                    
                                 
                              
                           
                        
                      where 
                        
                           
                              
                                 Sim
                              
                           
                           
                              
                                 des
                              
                           
                        
                        
                           (
                           C
                           ,
                           D
                           )
                        
                      represents the similarity value at the description level between the pair 
                        
                           (
                           C
                           ,
                           D
                           )
                        
                     , and 
                        
                           
                              
                                 Sim
                              
                           
                           
                              
                                 dis
                              
                           
                        
                        
                           (
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 D
                              
                              
                                 j
                              
                           
                           )
                        
                      denotes the similarity value between selected pairs 
                        
                           
                              C
                           
                           
                              i
                           
                        
                        ,
                        
                           
                              D
                           
                           
                              j
                           
                        
                     , whose function will be described in the following section. 
                        m
                      and 
                        n
                      represent the number of disjunction of the descriptions of 
                        C
                      and 
                        D
                     , respectively. 
                        Example
                        Consider the description of two concepts 
                              C
                            and 
                              D
                            as following: 
                              
                                 
                                    
                                       
                                          
                                             C
                                          
                                          
                                             
                                                des
                                             
                                          
                                       
                                       ≡
                                       
                                          
                                             C
                                          
                                          
                                             1
                                          
                                       
                                       ∪
                                       
                                          
                                             C
                                          
                                          
                                             2
                                          
                                       
                                       ∪
                                       
                                          
                                             C
                                          
                                          
                                             3
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             D
                                          
                                          
                                             
                                                des
                                             
                                          
                                       
                                       ≡
                                       
                                          
                                             D
                                          
                                          
                                             1
                                          
                                       
                                       ∪
                                       
                                          
                                             D
                                          
                                          
                                             2
                                          
                                       
                                       ∪
                                       
                                          
                                             D
                                          
                                          
                                             3
                                          
                                       
                                       ∪
                                       
                                          
                                             D
                                          
                                          
                                             4
                                          
                                       
                                       .
                                    
                                 
                              
                           
                        

Suppose that similarity values 
                              
                                 
                                    
                                       Sim
                                    
                                 
                                 
                                    
                                       dis
                                    
                                 
                              
                              
                                 (
                                 
                                    
                                       C
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       D
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                            between pairs 
                              
                                 (
                                 
                                    
                                       C
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       D
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                            are represented in the following matrix: 
                              
                                 
                                    
                                       
                                          
                                             M
                                          
                                       
                                       
                                          
                                             Des
                                          
                                       
                                    
                                    =
                                    
                                       [
                                       
                                          
                                             
                                                
                                                   
                                                      C
                                                   
                                                   
                                                      1
                                                   
                                                
                                                ,
                                                
                                                   
                                                      D
                                                   
                                                   
                                                      1
                                                   
                                                
                                                =
                                                0.64
                                             
                                             
                                                
                                                   
                                                      C
                                                   
                                                   
                                                      1
                                                   
                                                
                                                ,
                                                
                                                   
                                                      D
                                                   
                                                   
                                                      2
                                                   
                                                
                                                =
                                                0.52
                                             
                                             
                                                
                                                   
                                                      C
                                                   
                                                   
                                                      1
                                                   
                                                
                                                ,
                                                
                                                   
                                                      D
                                                   
                                                   
                                                      3
                                                   
                                                
                                                =
                                                0.31
                                             
                                             
                                                
                                                   
                                                      C
                                                   
                                                   
                                                      1
                                                   
                                                
                                                ,
                                                
                                                   
                                                      D
                                                   
                                                   
                                                      4
                                                   
                                                
                                                =
                                                0.12
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      C
                                                   
                                                   
                                                      2
                                                   
                                                
                                                ,
                                                
                                                   
                                                      D
                                                   
                                                   
                                                      1
                                                   
                                                
                                                =
                                                0.49
                                             
                                             
                                                
                                                   
                                                      C
                                                   
                                                   
                                                      2
                                                   
                                                
                                                ,
                                                
                                                   
                                                      D
                                                   
                                                   
                                                      2
                                                   
                                                
                                                =
                                                0.76
                                             
                                             
                                                
                                                   
                                                      C
                                                   
                                                   
                                                      2
                                                   
                                                
                                                ,
                                                
                                                   
                                                      D
                                                   
                                                   
                                                      3
                                                   
                                                
                                                =
                                                0.67
                                             
                                             
                                                
                                                   
                                                      C
                                                   
                                                   
                                                      2
                                                   
                                                
                                                ,
                                                
                                                   
                                                      D
                                                   
                                                   
                                                      4
                                                   
                                                
                                                =
                                                0.28
                                             
                                          
                                          
                                             
                                                
                                                   
                                                      C
                                                   
                                                   
                                                      3
                                                   
                                                
                                                ,
                                                
                                                   
                                                      D
                                                   
                                                   
                                                      1
                                                   
                                                
                                                =
                                                0.15
                                             
                                             
                                                
                                                   
                                                      C
                                                   
                                                   
                                                      3
                                                   
                                                
                                                ,
                                                
                                                   
                                                      D
                                                   
                                                   
                                                      2
                                                   
                                                
                                                =
                                                0.36
                                             
                                             
                                                
                                                   
                                                      C
                                                   
                                                   
                                                      3
                                                   
                                                
                                                ,
                                                
                                                   
                                                      D
                                                   
                                                   
                                                      3
                                                   
                                                
                                                =
                                                0.64
                                             
                                             
                                                
                                                   
                                                      C
                                                   
                                                   
                                                      3
                                                   
                                                
                                                ,
                                                
                                                   
                                                      D
                                                   
                                                   
                                                      4
                                                   
                                                
                                                =
                                                0.31
                                             
                                          
                                       
                                       ]
                                    
                                    .
                                 
                              
                           
                        

Thus, for each disjunction 
                        
                           
                              C
                           
                           
                              i
                           
                        
                     , we select the disjunction 
                        
                           
                              D
                           
                           
                              j
                           
                        
                      with the highest similarity value. This amounts to select for each row of the matrix the highest value. Thus, the set of selected pairs, 
                        S
                     , is represented by: 
                        
                           
                              S
                              =
                              
                                 {
                                 
                                    (
                                    
                                       
                                          C
                                       
                                       
                                          1
                                       
                                    
                                    ,
                                    
                                       
                                          D
                                       
                                       
                                          1
                                       
                                    
                                    )
                                 
                                 ,
                                 
                                    (
                                    
                                       
                                          C
                                       
                                       
                                          2
                                       
                                    
                                    ,
                                    
                                       
                                          D
                                       
                                       
                                          2
                                       
                                    
                                    )
                                 
                                 ,
                                 
                                    (
                                    
                                       
                                          C
                                       
                                       
                                          3
                                       
                                    
                                    ,
                                    
                                       
                                          D
                                       
                                       
                                          3
                                       
                                    
                                    )
                                 
                                 }
                              
                              .
                           
                        
                     
                  

Then, the similarity value between descriptions is calculated by the following function: 
                        
                           
                              
                                 
                                    
                                       Sim
                                    
                                 
                                 
                                    
                                       des
                                    
                                 
                              
                              
                                 (
                                 C
                                 ,
                                 D
                                 )
                              
                              =
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          
                                             (
                                             
                                                
                                                   C
                                                
                                                
                                                   i
                                                
                                             
                                             ,
                                             
                                                
                                                   D
                                                
                                                
                                                   j
                                                
                                             
                                             )
                                          
                                          ∈
                                          S
                                       
                                    
                                    
                                       
                                          
                                             Sim
                                          
                                       
                                       
                                          
                                             dis
                                          
                                       
                                    
                                    
                                       (
                                       
                                          
                                             C
                                          
                                          
                                             i
                                          
                                       
                                       ,
                                       
                                          
                                             D
                                          
                                          
                                             j
                                          
                                       
                                       )
                                    
                                 
                                 
                                    
                                       Max
                                    
                                    
                                       (
                                       m
                                       ,
                                       n
                                       )
                                    
                                 
                              
                              =
                              
                                 
                                    0.64
                                    +
                                    0.76
                                    +
                                    0.64
                                 
                                 
                                    
                                       Max
                                    
                                    
                                       (
                                       3
                                       ,
                                       4
                                       )
                                    
                                 
                              
                              =
                              
                                 
                                    2.04
                                 
                                 
                                    4
                                 
                              
                              =
                              0.51
                              .
                           
                        
                     
                  

(3) Defining the local function of disjunction.

Once descriptions converted to DNF, each disjunction component 
                        
                           
                              C
                           
                           
                              i
                           
                        
                      of the concept 
                        C
                      is composed of conjunction of elements 
                        
                           
                              E
                           
                           
                              i
                           
                        
                     , defined as follows: 
                        
                           
                              
                                 
                                    C
                                 
                                 
                                    i
                                 
                              
                              ≡
                              
                                 (
                                 
                                    
                                       ∩
                                    
                                    
                                       0
                                    
                                    
                                       I
                                    
                                 
                                 
                                 
                                    
                                       A
                                    
                                    
                                       i
                                    
                                 
                                 )
                              
                              ∩
                              
                                 (
                                 
                                    
                                       ∩
                                    
                                    
                                       0
                                    
                                    
                                       J
                                    
                                 
                                 
                                 R
                                 .
                                 
                                    
                                       D
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                              ∩
                              
                                 (
                                 
                                    
                                       ∩
                                    
                                    
                                       0
                                    
                                    
                                       K
                                    
                                 
                                 ∀
                                 
                                 R
                                 .
                                 
                                    
                                       D
                                    
                                    
                                       k
                                    
                                 
                                 )
                              
                              ∩
                              
                                 (
                                 
                                    
                                       ∩
                                    
                                    
                                       0
                                    
                                    
                                       L
                                    
                                 
                                 ∃
                                 
                                 R
                                 .
                                 
                                    
                                       D
                                    
                                    
                                       l
                                    
                                 
                                 )
                              
                              ∩
                              
                                 (
                                 
                                    
                                       ∩
                                    
                                    
                                       0
                                    
                                    
                                       M
                                    
                                 
                                 ≥
                                 n
                                 
                                 R
                                 .
                                 
                                    
                                       D
                                    
                                    
                                       m
                                    
                                 
                                 )
                              
                              ∩
                              
                                 (
                                 
                                    
                                       ∩
                                    
                                    
                                       0
                                    
                                    
                                       N
                                    
                                 
                                 ≤
                                 p
                                 
                                 R
                                 .
                                 
                                    
                                       D
                                    
                                    
                                       n
                                    
                                 
                                 )
                              
                              .
                           
                        
                     
                     
                        
                           
                              C
                           
                           
                              i
                           
                        
                      is composed of intersection of primitives 
                        
                           
                              A
                           
                           
                              i
                           
                        
                     , of relations 
                        R
                     , of concepts defined by existential 
                        
                           (
                           ∃
                           )
                        
                      and universal 
                        
                           (
                           ∀
                           )
                        
                      quantification, or cardinality restrictions.

Computing similarity measure for pairs of disjunction, 
                        
                           
                              
                                 Sim
                              
                           
                           
                              
                                 dis
                              
                           
                        
                        
                           (
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 D
                              
                              
                                 j
                              
                           
                           )
                        
                     , requires defining local functions specific to each type of constructors. Previously, we have distinguished six types of constructors of elements conjunctions. Thus, 
                        
                           
                              
                                 Sim
                              
                           
                           
                              
                                 dis
                              
                           
                        
                        
                           (
                           
                              
                                 C
                              
                              
                                 i
                              
                           
                           ,
                           
                              
                                 D
                              
                              
                                 j
                              
                           
                           )
                        
                     , is defined by a normalized sum of similarities computed from local functions, i.e. by comparing the elements 
                        
                           
                              E
                           
                           
                              i
                           
                        
                      and 
                        
                           
                              
                                 
                                    E
                                 
                                 
                                    i
                                 
                              
                           
                           
                              ′
                           
                        
                      having the same constructor.
                        
                           
                              
                                 
                                    
                                       Sim
                                    
                                 
                                 
                                    
                                       dis
                                    
                                 
                              
                              
                                 (
                                 
                                    
                                       C
                                    
                                    
                                       i
                                    
                                 
                                 ,
                                 
                                    
                                       D
                                    
                                    
                                       j
                                    
                                 
                                 )
                              
                              =
                              
                                 
                                    ∑
                                    
                                       
                                          
                                             Sim
                                          
                                       
                                       
                                          
                                             prim
                                          
                                       
                                    
                                    +
                                    ∑
                                    
                                       
                                          
                                             Sim
                                          
                                       
                                       
                                          
                                             prop
                                          
                                       
                                    
                                    +
                                    ∑
                                    
                                       
                                          
                                             Sim
                                          
                                       
                                       
                                          
                                             exist
                                          
                                       
                                    
                                    +
                                    ∑
                                    
                                       
                                          
                                             Sim
                                          
                                       
                                       
                                          
                                             uni
                                          
                                       
                                    
                                    +
                                    ∑
                                    
                                       
                                          
                                             Sim
                                          
                                       
                                       
                                          
                                             min
                                          
                                       
                                    
                                    +
                                    ∑
                                    
                                       
                                          
                                             Sim
                                          
                                       
                                       
                                          
                                             max
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          
                                             Nb
                                          
                                       
                                       
                                          
                                             elements
                                          
                                       
                                    
                                 
                              
                           
                        
                      where local functions are defined as: 
                        
                           
                              
                                 Sim
                              
                           
                           
                              
                                 prim
                              
                           
                        
                      for the intersection of primitives, 
                        
                           
                              
                                 Sim
                              
                           
                           
                              
                                 exist
                              
                           
                        
                      for existential quantifications, 
                        
                           
                              
                                 Sim
                              
                           
                           
                              
                                 uni
                              
                           
                        
                      for universal quantification, and 
                        
                           
                              
                                 Sim
                              
                           
                           
                              
                                 min
                              
                           
                        
                      and 
                        
                           
                              
                                 Sim
                              
                           
                           
                              
                                 max
                              
                           
                        
                      for minimum and maximum cardinality restrictions, respectively. Each function is supposed to be normalized, i.e. the return value is between 0 and 1. 
                        
                           
                              
                                 Nb
                              
                           
                           
                              
                                 elements
                              
                           
                        
                      is the sum of elements compared in the different functions.

Local functions are based on the “Contrast Model”, proposed by Tversky, where similarity values are proportional to the number of common attributes, and inversely proportional to the distinctive attributes of elements 
                        
                           
                              E
                           
                           
                              i
                           
                        
                      and 
                        
                           
                              
                                 
                                    E
                                 
                                 
                                    i
                                 
                              
                           
                           
                              ′
                           
                        
                     . As above-mentioned (cf. Section  4.1), the contrast model function is defined as  [32]: 
                        
                           
                              
                                 Sim
                              
                              
                                 (
                                 a
                                 ,
                                 b
                                 )
                              
                              =
                              θ
                              f
                              
                                 (
                                 A
                                 ∩
                                 B
                                 )
                              
                              −
                              α
                              f
                              
                                 (
                                 A
                                 −
                                 B
                                 )
                              
                              −
                              β
                              f
                              
                                 (
                                 B
                                 −
                                 A
                                 )
                              
                              .
                           
                        
                     
                  

To normalize this similarity function, we apply the following equation: 
                        
                           
                              
                                 Sim
                              
                              
                                 (
                                 a
                                 ,
                                 b
                                 )
                              
                              =
                              
                                 
                                    θ
                                    f
                                    
                                       (
                                       A
                                       ∩
                                       B
                                       )
                                    
                                 
                                 
                                    θ
                                    f
                                    
                                       (
                                       A
                                       ∩
                                       B
                                       )
                                    
                                    +
                                    α
                                    f
                                    
                                       (
                                       A
                                       −
                                       B
                                       )
                                    
                                    +
                                    β
                                    f
                                    
                                       (
                                       B
                                       −
                                       A
                                       )
                                    
                                 
                              
                           
                        
                      where 
                        f
                      is a cardinality function 
                        ≥
                        0
                      and 
                        θ
                        ,
                        α
                        ,
                        β
                      are coefficients 
                        ≥
                        0
                     .

Our method for classification of common and distinctive attributes does not rely on “exact” equivalences between attributes, but on an acceptance threshold which determines this distinction. In other words, two attributes are considered common if their similarity measure is greater than the acceptance threshold defined in our algorithm, otherwise they are distinctive.

For two elements 
                        
                           
                              E
                           
                           
                              i
                           
                        
                      and 
                        
                           
                              E
                           
                           
                              i
                           
                           
                              ′
                           
                        
                        ,
                        
                        
                           
                              N
                           
                           
                              
                                 
                                    E
                                 
                                 
                                    i
                                 
                              
                              ∩
                              
                                 
                                    E
                                 
                                 
                                    i
                                 
                                 
                                    ′
                                 
                              
                           
                        
                      represents the set their common attributes, 
                        
                           
                              N
                           
                           
                              
                                 
                                    E
                                 
                                 
                                    i
                                 
                              
                              −
                              
                                 
                                    E
                                 
                                 
                                    i
                                 
                                 
                                    ′
                                 
                              
                           
                        
                      the set of distinctive attributes of 
                        
                           
                              E
                           
                           
                              i
                           
                        
                     , and 
                        
                           
                              N
                           
                           
                              
                                 
                                    E
                                 
                                 
                                    i
                                 
                                 
                                    ′
                                 
                              
                              −
                              
                                 
                                    E
                                 
                                 
                                    i
                                 
                              
                           
                        
                      the set distinctive attributes of 
                        
                           
                              E
                           
                           
                              i
                           
                           
                              ′
                           
                        
                     . Similarity local functions of elements 
                        
                           
                              E
                           
                           
                              i
                           
                        
                      and 
                        
                           
                              E
                           
                           
                              i
                           
                           
                              ′
                           
                        
                     , specific to each constructor, are described in the following algorithms:

1. 
                        
                           
                              
                                 Sim
                              
                           
                           
                              
                                 prim
                              
                           
                        
                     : for elements of the conjunction form 
                        
                           
                              E
                           
                           
                              1
                           
                        
                        ≡
                        
                           (
                           
                              
                                 ∩
                              
                              
                                 0
                              
                              
                                 I
                              
                           
                           
                              
                                 A
                              
                              
                                 i
                              
                           
                           )
                        
                     . In this algorithm, we seek for each primitive concept 
                        X
                      of 
                        
                           
                              E
                           
                           
                              i
                           
                        
                      if there is a primitive 
                        Y
                      of 
                        
                           
                              E
                           
                           
                              i
                           
                           
                              ′
                           
                        
                      which is similar. Note that for primitives, anchor similarities could be defined in 
                        
                           
                              V
                           
                           
                              
                                 sim
                              
                           
                        
                      computed by inference services or introduced by the user itself.


                     
                        
                           
                        
                     
                  

2. 
                        
                           
                              
                                 Sim
                              
                           
                           
                              
                                 prop
                              
                           
                        
                     : for elements of the conjunction form 
                        
                           
                              E
                           
                           
                              2
                           
                        
                        ≡
                        
                           (
                           
                              
                                 ∩
                              
                              
                                 0
                              
                              
                                 J
                              
                           
                           R
                           .
                           
                              
                                 D
                              
                              
                                 j
                              
                           
                           )
                        
                     . In this algorithm, we seek for each property 
                        R
                        .
                        C
                      of 
                        
                           
                              E
                           
                           
                              i
                           
                        
                      if there is a similar property 
                        
                           
                              R
                           
                           
                              ′
                           
                        
                        .
                        D
                      of 
                        
                           
                              E
                           
                           
                              i
                           
                           
                              ′
                           
                        
                     , and having their range concepts 
                        C
                      and 
                        D
                      also similar.


                     
                        
                           
                        
                     
                  

3. 
                        
                           
                              
                                 Sim
                              
                           
                           
                              
                                 uni
                              
                           
                        
                     : for elements of the conjunction form 
                        
                           
                              E
                           
                           
                              3
                           
                        
                        ≡
                        
                           (
                           
                              
                                 ∩
                              
                              
                                 0
                              
                              
                                 K
                              
                           
                           ∀
                           R
                           .
                           
                              
                                 D
                              
                              
                                 k
                              
                           
                           )
                        
                     . In this algorithm, we seek for each property 
                        ∀
                        R
                        .
                        C
                      of 
                        
                           
                              E
                           
                           
                              i
                           
                        
                      if there is a similar property 
                        ∀
                        
                           
                              R
                           
                           
                              ′
                           
                        
                        .
                        D
                      of 
                        
                           
                              E
                           
                           
                              i
                           
                           
                              ′
                           
                        
                     , and having their range concepts 
                        C
                      and 
                        D
                      also similar.


                     
                        
                           
                        
                     
                  

4. 
                        
                           
                              
                                 Sim
                              
                           
                           
                              
                                 exist
                              
                           
                        
                     : for elements of the conjunction form 
                        
                           
                              E
                           
                           
                              4
                           
                        
                        ≡
                        
                           (
                           
                              
                                 ∩
                              
                              
                                 0
                              
                              
                                 L
                              
                           
                           ∃
                           R
                           .
                           
                              
                                 D
                              
                              
                                 l
                              
                           
                           )
                        
                     . In this algorithm, we seek for each property 
                        ∃
                        R
                        .
                        C
                      of 
                        
                           
                              E
                           
                           
                              i
                           
                        
                      of if there is a similar property 
                        ∃
                        
                           
                              R
                           
                           
                              ′
                           
                        
                        .
                        D
                      of 
                        
                           
                              E
                           
                           
                              i
                           
                           
                              ′
                           
                        
                     , and having their range concepts 
                        C
                      and 
                        D
                      also similar.


                     
                        
                           
                        
                     
                  

5. 
                        
                           
                              
                                 Sim
                              
                           
                           
                              
                                 min
                              
                           
                        
                     : for elements of the conjunction form 
                        
                           
                              E
                           
                           
                              5
                           
                        
                        ≡
                        
                           (
                           
                              
                                 ∩
                              
                              
                                 0
                              
                              
                                 M
                              
                           
                           ≥
                           n
                           R
                           .
                           
                              
                                 D
                              
                              
                                 m
                              
                           
                           )
                        
                     . In this algorithm, we seek for each property having a minimum cardinality 
                        
                           (
                           ≥
                           
                              
                                 n
                              
                              
                                 1
                              
                           
                           R
                           )
                        
                      of 
                        
                           
                              E
                           
                           
                              i
                           
                        
                      if there is a similar property 
                        
                           (
                           ≥
                           
                              
                                 n
                              
                              
                                 2
                              
                           
                           R
                           )
                        
                      of 
                        
                           
                              E
                           
                           
                              i
                           
                           
                              ′
                           
                        
                     , and such as 
                        
                           
                              n
                           
                           
                              1
                           
                        
                        ≥
                        
                           
                              n
                           
                           
                              2
                           
                        
                     .


                     
                        
                           
                        
                     
                  

6. 
                        
                           
                              
                                 Sim
                              
                           
                           
                              
                                 max
                              
                           
                        
                     : for elements of the conjunction form 
                        
                           
                              E
                           
                           
                              6
                           
                        
                        ≡
                        
                           (
                           
                              
                                 ∩
                              
                              
                                 0
                              
                              
                                 N
                              
                           
                           ≤
                           p
                           R
                           .
                           
                              
                                 D
                              
                              
                                 n
                              
                           
                           )
                        
                     . In this algorithm, we seek for each property having a maximum cardinality 
                        
                           (
                           ≤
                           
                              
                                 n
                              
                              
                                 1
                              
                           
                           R
                           )
                        
                      of 
                        
                           
                              E
                           
                           
                              i
                           
                        
                      if there is a similar property 
                        
                           (
                           ≤
                           
                              
                                 n
                              
                              
                                 2
                              
                           
                           R
                           )
                        
                      of 
                        
                           
                              E
                           
                           
                              i
                           
                           
                              ′
                           
                        
                     , and such as 
                        
                           
                              n
                           
                           
                              1
                           
                        
                        ≤
                        
                           
                              n
                           
                           
                              2
                           
                        
                     .


                     
                        
                           
                        
                     
                  


                     
                        Example
                        Consider the similarity measure between tapered hole features as defined in CatiaV5 and SolidWorks. The description of the tapered hole feature in CatiaV5 is defined as: 
                              
                                 
                                    
                                       CatiaTapered
                                    
                                    ⊏
                                    
                                       Catia : Hole
                                    
                                    ⊓
                                    
                                       (
                                       ∃
                                       
                                       
                                          hasHoleDiameter Length
                                       
                                       )
                                    
                                    ⊓
                                    
                                       (
                                       ∃
                                       
                                       
                                          hasHoleDepth Length
                                       
                                       )
                                    
                                    ⊓
                                    
                                       (
                                       ≤
                                       1
                                       
                                       
                                          hasBottomAngle Angle
                                       
                                       )
                                    
                                    ⊓
                                    
                                       (
                                       ∃
                                       
                                       
                                          hasHeadAngle Angle
                                       
                                       )
                                    
                                    .
                                 
                              
                           
                        

On the other hand, the description of a tapered hole in SolidWorks is defined as: 
                              
                                 
                                    
                                       SWTapered
                                    
                                    ⊏
                                    
                                       SW : Hole
                                    
                                    ⊓
                                    
                                       (
                                       ∃
                                       
                                       
                                          hasMinorDiameter Length
                                       
                                       )
                                    
                                    ⊓
                                    
                                       (
                                       ∃
                                       
                                       
                                          hasMajorDiameter Length
                                       
                                       )
                                    
                                    ⊓
                                    
                                       (
                                       ≤
                                       1
                                       
                                       
                                          hasDrillAngle Angle
                                       
                                       )
                                    
                                    ⊓
                                    
                                       (
                                       ∃
                                       
                                       
                                          hasDiameter Length
                                       
                                       )
                                    
                                    ⊓
                                    
                                       (
                                       ∃
                                       
                                       
                                          hasDepth Length
                                       
                                       )
                                    
                                    .
                                 
                              
                           
                        

We suppose the equivalence correspondences are defined between entities as the following: 
                              
                                 
                                    
                                       
                                          
                                             
                                                Catia : Hole
                                             
                                          
                                          
                                             ≡
                                          
                                          
                                             
                                                SW : Hole
                                             
                                          
                                       
                                       
                                          
                                             
                                                Catia : hasHoleDiameter
                                             
                                          
                                          
                                             ≡
                                          
                                          
                                             
                                                SW : hasDiameter
                                             
                                          
                                       
                                       
                                          
                                             
                                                Catia : hasHoleDepth
                                             
                                          
                                          
                                             ≡
                                          
                                          
                                             
                                                SW : hasDepth
                                             
                                          
                                       
                                       
                                          
                                             
                                                Catia : hasBottomAngle
                                             
                                          
                                          
                                             ≡
                                          
                                          
                                             
                                                SW : hasDrillAngle
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                            Thus the number of common and distinct properties of tapered hole feature is: 
                              
                                 
                                    
                                       
                                          
                                             
                                                CatiaTapered
                                             
                                             ∩
                                             
                                                SwTapered
                                             
                                             =
                                             4
                                          
                                          
                                       
                                       
                                          
                                             
                                                CatiaTapered
                                             
                                             −
                                             
                                                SwTapered
                                             
                                             =
                                             1
                                          
                                          
                                             
                                                {
                                                
                                                   Catia : hasHeadAngle
                                                
                                                }
                                             
                                          
                                       
                                       
                                          
                                             
                                                SwTapered
                                             
                                             −
                                             
                                                CatiaTapered
                                             
                                             =
                                             2
                                          
                                          
                                             
                                                {
                                                
                                                   SW : hasMinorDiameter
                                                
                                                ,
                                                
                                                   SW : hasMajorDiameter
                                                
                                                }
                                             
                                             .
                                          
                                       
                                    
                                 
                              
                            The similarity function is thus defined by: 
                              
                                 
                                    
                                       Sim
                                    
                                    
                                       (
                                       A
                                       ,
                                       B
                                       )
                                    
                                    =
                                    
                                       
                                          θ
                                          f
                                          
                                             (
                                             A
                                             ∩
                                             B
                                             )
                                          
                                       
                                       
                                          θ
                                          f
                                          
                                             (
                                             A
                                             ∩
                                             B
                                             )
                                          
                                          +
                                          α
                                          f
                                          
                                             (
                                             A
                                             −
                                             B
                                             )
                                          
                                          +
                                          β
                                          f
                                          
                                             (
                                             B
                                             −
                                             A
                                             )
                                          
                                       
                                    
                                    =
                                    
                                       
                                          4
                                       
                                       
                                          4
                                          +
                                          
                                             (
                                             0.75
                                             ×
                                             1
                                             )
                                          
                                          +
                                          
                                             (
                                             0.25
                                             ×
                                             2
                                             )
                                          
                                       
                                    
                                    =
                                    0.76
                                    .
                                 
                              
                           
                        

@&#CONCLUSION@&#

We proposed an ontology-based approach for the exchange of feature-based CAD models. We focused in this paper on the semantic integration method between ontologies that preserve semantics associated with CAD product data. The exchange of Product shape is not sufficient. Other design engineering data should be considered such as parameters, constraints, features, design history, etc. This could be carried out by providing the ability to access design knowledge and retrieve needed information not only asserted by designers, but also implicit facts inferred by reasoning engines. Thus, this research takes full advantages of Semantic Web technologies to represent complicated relations that are scattered among form features and parts. We use a descriptive logic language, namely OWL DL to define formally concepts, their properties and their potential interactions in our ontology. More complex rules are created using SWRL. We focus on integrating various ontologies by means of ontology reasoning and matching issues to support more effective sharing of product semantics across heterogeneous life cycle processes.

Our semantic integration method takes advantages of OWL/SWRL expressiveness to define complex axioms and rules to map entities of different ontologies. Furthermore, our method uses inference mechanisms provided by reasoning engines, such as Pellet and JESS. Finally, our method is enriched by the development of a similarity measure method based on the entities description to seek similar entities in the target system. The aim is to assist designers by proposing “approximate” correspondence to facilitate semantic interoperability. The proposed method, is based on previous works for computing similarities, but adapted to OWL DL. It defines a global and local similarity functions. Global functions are defined according to the types of entities, such as class or property, while local functions are defined in terms of OWL constructs and based on the approach of common and distinctive attributes of entities components.

However, our integration method have some limitations that should be addressed in the future. We can extend our similarity method by considering the syntax of compared entities, as well as their annotations and comments. This would provide additional mappings to define “anchor axioms”. Moreover, additional experiments must be performed to have more concise results, e.g. to determine the parameters defined in our algorithm, such as the weights and the threshold of acceptance, in a more realistic way.

@&#REFERENCES@&#

