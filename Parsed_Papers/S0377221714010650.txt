@&#MAIN-TITLE@&#Hybrid search for the optimal PMU placement problem on a power grid

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We consider the optimal PMU placement problem and give a hybrid two-phase algorithm.


                        
                        
                           
                           We perform the algorithm on the IEEE power systems and demonstrate its effectiveness.


                        
                        
                           
                           We also consider a theoretical model and provide lower bounds on the number of PMUs.


                        
                        
                           
                           The algorithm can achieve the optimum in the theoretical model of the power systems.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Combinatorial optimization

Smart grid

Optimal PMU placement

Power domination

Power system

@&#ABSTRACT@&#


               
               
                  With increasing global concerns regarding energy management, the concept of the smart grid has become a particularly important interdisciplinary research topic. In order to continually monitor a power utility system and efficiently observe all of the states of electric nodes and branches on a smart grid, placing PMUs (phasor measurement units) at selected nodes on the grid can monitor the operation conditions of the entire power grid. This study investigates methods for minimizing the high installation costs of PMUs, in order to monitor the entire system using a set of PMUs according to the power observation rules. Notably, this problem of monitoring a power grid can be transformed into the OPP (optimal PMU placement) problem. The objective is to simultaneously minimize the number of PMUs and ensure the complete observability of the whole power grid. This combinatorial optimization problem has been shown to be NP-complete. In this paper, we propose a hybrid two-phase algorithm for this problem. The first phase of the algorithm quickly identifies a set of candidate locations of PMUs based on a graph-theoretic decomposition approach for the power domination problem in tree-type graphs. Then, we use a local search heuristic method to derive the minimum number of PMUs in the second phase. In addition to the practical model, this study also considers the ideal model, in which all load nodes are assumed to be zero injection. The numerical studies on various IEEE power test systems demonstrate the superior performance of the proposed algorithm in both the models in regard to computational time and solution quality. In particular, in the ideal model, the number of PMUs required for the test systems can be significantly reduced. We also provide theoretical lower bounds on the number of installed PMUs in the ideal model and show that the derived solution can achieve the bound of the test systems.
               
            

@&#INTRODUCTION@&#

PMUs (Phasor measurement units) are devices offering advanced monitoring, analysis, control and protection in modern smart grid applications. Phadke (1993) conducted pioneering work on PMU development and utilization, which introduced the concept of synchronized phasor estimation, coupled with computer-based measurement techniques and other applications of PMUs. The capability of PMUs has created substantial improvements in the accuracy and robustness of state estimations. In particular, when feeding such accurate and on-line information provided by PMUs into the modern EMS (energy management systems), power system operators can quickly supervise entire systems’ dynamics. Moreover, based on the rapid development of GPS (global positioning satellite systems), the common time reference of PMUs with GPS signals for synchronizing voltage and current measurement can offer an accuracy of less than 1 μs (Bertsch, Carnal, Karlsson, Cdaniel and Vu, 2005). Exploiting the ability of PMUs placed at electric nodes leads to high-precision measurement of voltage and current phasors. Therefore, there have been several large-scale implementations of PMU-based power systems around the world, such as the EIPP (Eastern Interconnect Phasor Project) (Donnelly, Ingram and Carroll, 2006), the NASPI (North American SynchroPhasor Initiative) (Dagle, 2008) and GridStat (Gjermundr d, Bakken, Hauser and Bose, 2009). For more details about applications of PMUs, readers may refer to Phadke and Thorp’s survey (Phadke and Thorp, 2008).

With the growing number of PMUs planned for installation in current power systems, there is a pressing need for utility companies and research institutes to investigate optimal solutions to PMU placement problems, taking into account the limitations of cost and communication facilities. Therefore, the OPP (optimal PMU placement) problem attempts to determine the minimum number of PMUs, such that the entire system is completely observable. The challenge of selecting an appropriate placement of PMUs can be considered a combinatorial optimization problem which has been proven to be NP-complete even for special classes of power networks (Haynes, Hedetniemi, Hedetniemi and Henning, 2002).

In the last decades, there has been a considerable amount of research devoted to this OPP problem, for which a variety of algorithms have been proposed. They can be briefly classified into three categories (Manousakis, Korres and Georgilakis, 2012): graph-based algorithms, mathematical programming and meta-heuristic methods. Regarding graph-based algorithms, the OPP problem is actually closely related to the famous vertex cover problem and the domination problem in graph theory (Haynes, Hedetniemi, Hedetniemi and Henning, 2002). Baldwin, Mili, Boisen and Adapa (1993) first studied the minimal PMU placement problem, providing a dual search technique with simulated annealing heuristic. Nuiqi and Phadke investigated the OPP problem using tree search techniques (Nuiqi and Phadke, 2005); they introduced the concept of network unobservability and provided a depth-search tree algorithm. The rationale behind these algorithms was to reduce problem complexity using graph sparsification techniques (Daehyun, Michailidis and Devetsikiotis, 2011). Similar approaches have been exploited in network optimization problems, such as the network design problem with relays (Konak, 2012) and the network hub location problem (Contreras, Fernndez and Marn, 2010). Because most practical large-scale power systems possess sparse properties, graph-based algorithms can quickly identify possible locations of PMUs in power networks.

In terms of mathematical programming, some recent studies using IP (integer programming) approaches have been discussed.  Guo (2008a); 2008b) formulated the OPP problem by ILP (integer linear programming) and solved the ILP model on several IEEE power test systems. Dua, Dambhare, Gajbhiye and Soman (2008) presented a multi-stage procedure for a similar ILP model of the OPP problem. Subsequently, Korkali and Abur (2009) proposed a binary integer linear programming formulation in which channel limits of PMUs were taken into account. Furthermore, they considered the OPP problem with different contingency conditions (Aminifar, Khodaei, Fotuhi-Firuzabad and Shahidepour, 2010; Chen and Abur, 2006). IP-based methods have solved this generalized model to derive the optimal placement of PMUs as well as to detect contingencies. However, some of the above ILP-based methods did not consider the effects of zero injection nodes (described later) , which could further reduce the number of PMUs required; this results in a lack of generality for these proposed ILP models. The execution processes which incorporated the effect of zero injection nodes toward achieving a global optima were less effective and time-consuming. In addition, a theoretical study (Aazami, 2010) revealed that the traditional relaxation techniques for approximating the IP models of the OPP problem may cause a large integrality gap between the solution quality of the IP model and of its relaxation problem.

Meta-heuristic methods based on intelligent search processes have also been widely applied to the OPP problem. GA-based (genetic algorithm) procedures such as the non-dominated sorting genetic algorithm (Milosevic and Begovic, 2003; Peng, Sun and Guo, 2010) and the immunity genetic algorithm (Aminifar, Lucas, Khodaei and Fotuhi-Firuzabad, 2009) were proposed for solving PMU placement.  Peng, Sun and Wang (2006) provided an algorithm, the Tabu search, to minimize the number of PMU installations. A modified BPSO (binary particle swarm optimization) algorithm (Hajian, Ranjbar, Amraee and Mozafari, 2011), as well as an exhaustive binary search approach (Chakrabarti and Kyriakides, 2008) to determine the global optimum, was presented recently. However, such meta-heuristic methods cannot guarantee optimality as deterministic algorithms can. In addition, the meta-heuristics might have convergence problems that can result in lower solving efficiency with the increasing size of a power system. The obstacles restrict their applications to practical large-scale power networks.

In this paper, we propose a hybrid two-phase algorithm for the OPP problem, which combines both merits of graph-based concepts and a meta-heuristic method. In Phase 1, a graph decomposition algorithm for tree-type graphs is applied to general graphs. The next phase selects the location of PMUs derived from Phase 1 as an initial solution for the optimal placement, and achieves complete observability using the ABC (Artificial Bee Colony) algorithm (Basturk and Karaboga, 2006; Karaboga and Akay, 2009; Karaboga and Basturk, 2008). The key advantage of the ABC algorithm lies in its efficiency and capability in regards to handling complex optimization problems due to the way in which the algorithm balances exploration and exploitation processes. Specifically, the ABC algorithm is capable of finding near-optimal solutions with relatively modest computational requirements. Moreover, utilization of the local search technique with a better initial solution derived by the first phase is computationally light.

Most of the previous work has concentrated on power systems containing a small set of zero injection nodes, i.e. the practical model. In addition to the practical model, this study considers the ideal model in which sufficient conventional measurements are supposed to exist within a power system  (Xu and Abur, 2004). Thus, assuming all nodes to be zero injection nodes may further reduce the number of installed PMUs for the full observability of the entire system. The ideal model can also be referred to as the PD (power domination) problem (Haynes, Hedetniemi, Hedetniemi and Henning, 2002) in graph theory (formally defined in the next section).

We summarize the main contributions of this paper as follows:

                        
                           1.
                           We propose a hybrid two-phase search algorithm in which the first phase can quickly identify the possible location of installed PMUs by extending the concept of a graph decomposition technique in tree-type graphs (Haynes, Hedetniemi, Hedetniemi and Henning, 2002) to approximate the topology of a given power system with sparse properties. Then, a meta-heuristic ABC algorithm is implemented to efficiently obtain near-optimal placement in the next phase.

We apply the proposed algorithm to the IEEE power test systems; the experimental results demonstrate the efficiency and effectiveness of the algorithm. Specifically, in the practical model, the number of PMUs derived by the two-phase algorithm reaches the currently best results among the literature. Moreover, the result can be more efficiently computed, as compared with all existing algorithms.

In addition, we also test the proposed algorithm in the context of the ideal model of test systems. In particular, we prove that the algorithm can reach the global optimum for these power systems from a theoretical perspective, i.e. the number of PMUs derived in the ideal model attains the theoretical lower bound we have proposed.

The remainder of this paper is organized as follows. An introduction to the problem formulation and previous related work are presented in Section 2. In Section 3, we propose the hybrid two-phase algorithm for solving this OPP problem. The graph-based algorithm is employed in Phase 1, and the ABC algorithm is used in Phase 2. We conduct and explain numerical studies on IEEE power test systems in Section 4. Finally, we provide further discussions and conclusions in Section 5.

This section presents a mathematical formulation of the OPP problem and a more detailed description of the PD problem and the ABC algorithm. We also introduce the concept of conventional measurement, as well as the definition of zero injection nodes which can reduce the number of installed PMUs and offer benefits in the ideal model.

Let G = (V, E) be a graph representation of a power grid in which a node in V represents an electric node location, and an edge in E represents a transmission line joining two nodes. A PMU installed at a node can directly measure the information of the node itself and its incident edges. The objective of the OPP problem is to find a placement of PMUs in order to fully observe the power grid, such that the number of PMUs installed is minimized. The observability of a power system can be state-estimated and measured through PMUs based on Ohm’s Law, Kirchhoff’s Current Law and Kirchhoff’s Voltage Law (Baldwin, Mili, Boisen and Adapa, 1993). Note that, although PMUs can be placed either in a node or in a transmission line, for simplicity, it is assumed that all PMUs are installed in nodes in this study. We introduce the observation rules in the following example.

In Fig. 1
                        , a vertical bar represents a (bus) node in the power system, i.e. a node in the graph. The line segment connecting two bars represents a transmission line in the power system, i.e. an edge in the graph. A zero injection (bus) node is a node location into which no complex power is being injected; for example, nodes A and G in Fig. 1. This node is a non-zero injection node if it is connected to a load, represented by an arrow; for instance, nodes B, C, D, E and F in Fig. 1. Note that an electric node is considered to be zero injection if its state information can be accommodated by an existing SCADA (Supervisory Control and Data Acquisition) system, i.e. the conventional measurement can be obtained (Chakrabarti, Kyriakides and Eliades, 2009).

Assume PMUs are installed at nodes B and F. The states of nodes A, B, C, E, F and G can be directly measured or observed based on Ohm’s Law. However, node D is unobservable because the loads on node C and node E are unknown. If node C or E is a zero injection node, i.e. no load is associated with them, then node D can be observed using Kirchhoff’s Current Law. Clearly, zero injection nodes have the potential to reduce the number of PMUs required, as described earlier. If all nodes are assumed to be zero injection, it is the ideal model. The observation rules of the OPP problem can be formally defined as follows:

                           
                              (R1)
                              If node v is placed with a PMU, then v and all of its neighbor nodes are also observed.

If node v and all of its neighbor nodes except one, say node w, are observable and node v is a zero injection node, then node w can also be observed.

Referring to Aazami (2010), the OPP problem can be formulated as follows:


                     
                        
                           
                              
                                 z
                                 
                                    v
                                 
                                 t
                              
                           
                        
                        
                           a binary variable that indicates whether node v is observed in iteration t
                           

a binary variable that indicates whether node u can observe node v in iteration t + 1

a binary decision variable that is equal to 1 if PMU is installed at node v and 0 otherwise

closed neighborhood; N[i] represents the set consisting of node i itself and all its neighbors

the set of zero injection nodes

the set of iterations t which specifies the order of observed nodes following the rules

For the IP formulation of the OPP problem described above, the objective function is to minimize the number of PMUs satisfying all of the constraints. Given a graph G = (V, E), the goal actually involves finding an order in which nodes are observed by the installed PMUs, because the PMUs propagates the observation following the observation rules. Thus, we let T = {1, 2, …, |V|} denote the set of iterations to specify the order of observed nodes following the rules. Constraint (1) determines that the graph G is fully observed, i.e. every node is observed. Constraint (2) presents the information such that there is exactly one node to be observed in each iteration t, i.e. the constraint specifies the order in which the nodes are observed. Constraints (3) and (4) characterize the major difference between the ideal model and the practical model, respectively. In Constraint (3), if a node u is a zero injection node and all of its neighbors except one are all observed, then the observation rule (R2) can be applied. Otherwise, the observation propagates following Constraint (4). For instance, assume nodes C and E are zero injection nodes in Fig. 1. Nodes A, B, C, E, F and G can be observed by rule (R1) and node D can be observed by rule (R2). As mentioned earlier, because sufficient conventional measurements exist in the ideal model, each node can be considered a zero injection node. That is, let P = V in the ideal model, such that nodes can be observed following Constraint (3) through the benefit of zero injection nodes. Note that the ideal model can clearly reduce the number of PMUs required but significantly increase the problem’s complexity. In addition, we use 
                        
                           Y
                           
                              u
                              ,
                              v
                           
                           t
                        
                      to indicate whether u can observe v in iteration t + 1. So, Constraint (5) shows that, in iteration t, node v can be observed if a PMU is placed at v (xv
                      = 1) or at least one of v’s neighbors is ready to observe v in iteration t − 1. Finally, Constraint (6) presents the observation rule (R1).

The ideal model of the OPP problem can be transformed into the PD (power domination) problem in graph theory, which was initiated by  Haynes, Hedetniemi, Hedetniemi and Henning (2002). In the PD problem, for a node subset S⊆V, the sub-graph observed by S is denoted by 
                           
                              P
                              S
                           
                        . In terms of notions in graph theory, the location for PMU placements is equivalent to a feasible PDS (power dominating set) S*⊆V if every node can be observed by S* according to the above observation rules, i.e. 
                           
                              
                                 P
                                 
                                    S
                                    *
                                 
                              
                              =
                              V
                           
                        . Therefore, the ideal model of the OPP problem can be interpreted as finding a feasible PDS S* of minimum cardinality for graph G.

In the last decades, NP-completeness proofs and theoretical upper bounds of the PD problem have been investigated in Haynes et al.’s work (Haynes, Hedetniemi, Hedetniemi and Henning, 2002). They also proposed a linear time algorithm using the SD (spider decomposition) technique for tree-type graphs, where a spider is a tree formed from a star by subdividing its edges any number of times; spider decomposition is a partition of the node set such that each subset induces a spider. Furthermore,  Kneis, Molle, Richter and Rossmanith (2006) and  Guo, Niedermeier and Raible (2008) independently explored the parametrized complexity of the PD problem. Guo et al. also showed this problem remains NP-complete for planar graphs and that it cannot be approximated better than the domination problem for general graphs using a reduction scheme in complexity theory. Some notable approximation results have been provided recently. Aazami and Stilp  (Aazami, 2010; Aazami and Stilp, 2009) showed the separation of approximation hardness between power domination and domination regarding problem complexity. They proved that the power domination problem cannot be approximated by any algorithms within ratio 
                           
                              O
                              (
                              
                                 2
                                 
                                    
                                       log
                                       
                                          1
                                          −
                                          ϵ
                                       
                                    
                                    n
                                 
                              
                              )
                           
                         unless NP⊆DTIME(n
                        
                           polylog (n)), where n = |V| is the number of nodes, in contrast to the logarithmic approximation threshold of the domination problem. They also proposed an 
                           
                              O
                              (
                              
                                 n
                              
                              )
                           
                        -approximation algorithm for planar graphs based on a given tree-width.  Raible and Fernau (2012) presented an algorithm for general graphs that runs in O*(1.7548
                           n
                        ) time, using a fixed parameter tractable scheme. Moreover,  Brueni and Heath (2005), and  Zhao, Kang and Chang (2006) independently showed that the minimum cardinality of PDS is no larger than 
                           
                              n
                              3
                           
                         in a connected graph of order n ≥ 3, and also characterized the extreme graphs which attain the upper bound.

Note that the OPP problem is usually considered in sparse networks, where a graph representation G = (V, E) of a power system is called sparse if the number of edges is proportional to the number of nodes, i.e. |E| = c · |V|, for a constant c. Therefore, we extend the concept of the SD technique, which has performed well in tree-type sparse graphs, to construct a greedy spider-based spanning tree which approximates the topology of a given power system, and which is used to find approximate solutions for the OPP problem in Phase 1.

The ABC algorithm is used to reduce the number of PMUs in Phase 2. The performance of the ABC algorithm proves to be comparable to other notable meta-heuristic optimization algorithms, including: the GA (Genetic Algorithm), PSO (Particle Swarm Algorithm), EA (evolutionary algorithm), DE (Differential Evolution) and the PS-EA (Particle Swarm Inspired Evolutionary Algorithm). Specifically, the ABC algorithm balances exploration and exploitation processes, and employs different selection operators together, such as greedy selection, probabilistic selection and random selection. Recent studies have demonstrated that the result and the solution quality derived by the ABC algorithm outperforms other heuristic methods for practical large-scale engineering optimization problems (Karaboga and Akay, 2009; Karaboga and Basturk, 2008; Szeto, Wu and Ho, 2011).

The ABC algorithm is a population-based meta-heuristic approach proposed by Basturk and Karaboga (Basturk and Karaboga, 2006; Karaboga and Akay, 2009; Karaboga and Basturk, 2008). The ABC algorithm is inspired by the intelligent foraging behavior of honeybee swarms. All foraging bees are classified into three distinct categories: (i) employed, (ii) onlookers and (iii) scouts. The rationale behind the ABC algorithm is described as follows. All bees currently exploiting a food source are classified as employed. The employed bees bring loads of nectar from a food source to the hive and share the information with onlooker bees, who are then able to choose a source which appears to be of high quality. Thus, rich food sources attract more bees than poor ones do. In the solution evolution process, the solution is improved via a local search process called greedy selection (Karaboga and Akay, 2009; Karaboga and Basturk, 2008) carried out by onlooker and employed bees. According to this process, if the fitness of the candidate source is better than the present source, the bee changes to the candidate one. Onlookers select a food source using shared information from employed bees with the probability of success which is proportional to the amount of nectar contained in that food source. Furthermore, an employed bee abandons a solution if it did not improve a predetermined number of iterations, limit, and may return to being a scout. Scout bees undertake exploration, whereas employed and onlooker bees undertake exploitation. The population of the solutions is subject to repeated cycles, C = 1, 2, …, MCN (Maximum Cycle Number). The process is repeated until the termination condition is satisfied.

In terms of solutions in regard to the ABC algorithm, the number of food sources equals the number of employed bees. Also, the ABC generates a randomly distributed initial population of SN solutions, where SN denotes the number of employed bees. Xh
                        (h = 1, 2, …, SN) is a d-dimensional vector. Here, d represents the number of optimization parameters. Note that this is the first study that uses an ABC algorithm for the OPP problem, especially for both the practical and the ideal models. The solution designed for this problem will be presented in Section 3.2.

We propose a hybrid two-phase algorithm combining a graph-based algorithm and a meta-heuristic ABC algorithm. This algorithm can be described as follows. In Phase 1, a graph-based algorithm will be explored. A spanning tree T* is first constructed by using the concept of the SD (spider decomposition) technique proposed by Haynes, Hedetniemi, Hedetniemi and Henning (2002). As mentioned earlier, the SD technique is able to optimally solve the power domination problem in tree-type graphs. They proved that the minimum number of PMUs required for a tree-type graph can be derived using the minimum spider decomposition.

                        Lemma 3.1
                        
                           (Haynes, Hedetniemi, Hedetniemi and Henning, 2002) The power domination number of a tree is precisely the spider number of the tree.

In this paper, we refer to their concept and present a greedy SD-like approach in the first phase. The rationale behind the first phase is that the SD-like approach can construct a spider-based spanning tree that approximates the topology of the given power system which usually possesses the sparse property.

Next, a feasible PDS 
                        
                           S
                           
                              T
                              *
                           
                        
                      of minimum cardinality for this specific spanning tree T* is generated by Algorithm 1 proposed in Haynes, Hedetniemi, Hedetniemi and Henning (2002). Note that, although the obtained PDS 
                        
                           S
                           
                              T
                              *
                           
                        
                      can retain the complete observability of this specified spanning tree T*, this PDS 
                        
                           S
                           
                              T
                              *
                           
                        
                      may not retain the feasibility for the entire power grid G since multiple loops may be involved in the entire power grid G. Thus, in order to ensure the complete observability of the entire power grid G, the proposed hybrid algorithm will move to Phase 2. The meta-heuristic ABC algorithm will be deployed.

We will later conduct the hybrid algorithm on IEEE power test systems to demonstrate its performance concerning computational time and solution quality. In the practical model, the experiments achieve the currently best results in the literature. Moreover, the algorithm outperforms all existing approaches regarding computational efficiency. Furthermore, in order to examine the effectiveness of our algorithm in the context of the ideal model, we also obtain theoretical lower bounds on the number of required PMUs for each of the IEEE power systems (see Appendix A). In particular, the experimental result can attain the lower bounds, i.e. the hybrid algorithm optimally solves the OPP problem in the ideal model in regard to these power systems.


                        Algorithm 1
                         outlines the graph-based algorithm for finding an approximate PDS. An example of the construction of a spider-based spanning tree via the SD-like technique in the ideal model of the IEEE 57-bus test system is illustrated in Fig. 2
                        . First, select node 9 as the first spider center, since it has the maximum degree of unobserved neighbors.

Then, the center can propagate through adjacent nodes following the observation rules, and forms a spider 
                           
                              
                                 P
                                 
                                    {
                                    
                                       v
                                       9
                                    
                                    }
                                 
                              
                              ,
                           
                         as shown in Fig. 2(a). The unobserved degree of each remaining node in the system is updated and the next node with the maximum unobserved degree is node 1, as shown in Fig. 2(b). The similar procedure is repeatedly performed until all nodes in G are contained in the union of these spiders, which forms a spanning tree T*. Fig. 2(c) shows that the union of the spiders 
                           
                              P
                              
                                 {
                                 
                                    v
                                    9
                                 
                                 ,
                                 
                                    v
                                    1
                                 
                                 ,
                                 
                                    v
                                    56
                                 
                                 ,
                                 
                                    v
                                    22
                                 
                                 ,
                                 
                                    v
                                    27
                                 
                                 }
                              
                           
                         derived by their centers 9, 1, 56, 22 and 27 constructs the spanning tree T*. Note that the minimal PDS 
                           
                              S
                              
                                 T
                                 *
                              
                           
                         for the T* can be obtained in linear time (Guo, Niedermeier and Raible, 2008; Haynes, Hedetniemi, Hedetniemi and Henning, 2002; Liao, 2014) (as shown in Fig. 2(d)). Therefore, the fast SD-like algorithm in Phase 1 is suitable for practical large-scale power networks.

The ABC algorithm is then applied to minimize the PMU number of the solution derived. In the ABC algorithm, each food source represents a possible solution, i.e. the number of food sources equals the number of employed bees. The steps of the ABC algorithm for the PMU placement problem are detailed in Algorithm 2
                        .

In the OPP problem, each bee represents a strategy of placement and a collection of binary values forms a set of solutions to express which positions have (given value 1) or lack (given value 0) PMUs installed. For example, consider a system with 14 (buses) nodes. The solution vector (0 1 1 0 0 0 1 0 0 0 1 0 0 0) represents:

                              
                                 •
                                 Nodes 2, 3, 7 and 11 have PMUs installed.

The dimension d of the solution is 14.

In the ABC algorithm, the first half of the bee colony comprises employed bees, whereas the latter half comprises the onlookers (Karaboga and Akay, 2009). Let Xi
                            ∈ Rd
                            denote the ith step solution in the update process. A new candidate solution Vi
                            is given by the following search equation:

                              
                                 (8)
                                 
                                    
                                       
                                          V
                                          
                                             i
                                             j
                                          
                                       
                                       =
                                       
                                          X
                                          
                                             i
                                             j
                                          
                                       
                                       +
                                       u
                                       
                                          (
                                          
                                             X
                                             
                                                i
                                                j
                                             
                                          
                                          −
                                          
                                             X
                                             
                                                k
                                                j
                                             
                                          
                                          )
                                       
                                       ,
                                    
                                 
                              
                           where Xij
                            (or Vij
                           ) denotes the jth element of Xi
                            (or Vi
                           ) and j is a random index from the index set {1, 2, ..., d}. Xk
                            denotes another solution selected at random from the population and u is a random number normally distributing in [ − 1, 1]. In the onlooker stage, the solutions are selected according to the probability

                              
                                 (9)
                                 
                                    
                                       
                                          P
                                          h
                                       
                                       =
                                       
                                          
                                             f
                                             i
                                             
                                                t
                                                i
                                             
                                          
                                          
                                             
                                                ∑
                                                
                                                   i
                                                   =
                                                   1
                                                
                                                
                                                   S
                                                   N
                                                
                                             
                                             f
                                             i
                                             
                                                t
                                                i
                                             
                                          
                                       
                                       ,
                                    
                                 
                              
                           where fiti
                            denotes the fitness value of the ith solution.

To guide ABC toward an increased amount of nectar amount, a thoughtful and simple fitness function must be assigned to assess each solution. The following fitness function (10) is designed for this OPP problem:

                              
                                 (10)
                                 
                                    
                                       f
                                       i
                                       
                                          t
                                          i
                                       
                                       =
                                       
                                          {
                                          
                                             
                                                
                                                   
                                                      1
                                                      /
                                                      
                                                         
                                                            |
                                                         
                                                         
                                                            f
                                                            i
                                                         
                                                         
                                                            |
                                                            +
                                                            1
                                                         
                                                      
                                                      ,
                                                   
                                                
                                                
                                                   
                                                      if
                                                      
                                                      
                                                         
                                                            f
                                                            i
                                                         
                                                         <
                                                         0
                                                      
                                                      ;
                                                   
                                                
                                             
                                             
                                                
                                                   
                                                      
                                                         f
                                                         i
                                                      
                                                      ,
                                                   
                                                
                                                
                                                   
                                                      if
                                                      
                                                      
                                                         
                                                            f
                                                            i
                                                         
                                                         ≥
                                                         0
                                                      
                                                      ,
                                                   
                                                
                                             
                                          
                                       
                                    
                                 
                              
                           where fi
                            represents the objective value of ith solution.

To demonstrate the feasibility and effectiveness of the proposed method, the hybrid two-phase algorithm has been performed on the IEEE 14-bus, 39-bus, 57-bus and 118-bus test systems for both the practical model and the ideal model. The simulation software was carried out in C environment on an Intel core dual (3.16 gigahertz) with 1 gigabyte RAM. The set of zero injection nodes in each test system is presented in Table 1
                     .

Consider the practical model of the IEEE test systems. Phase 1 provides an initial placement using 4, 11, 14 and 32 PMUs for the IEEE 14-bus, 39-bus, 57-bus and 118-bus test systems, respectively. The next phase takes relatively fewer iterations to considerably reduce the number of PMUs required to 3, 8, 11 and 28, as shown in Table 2
                        . Phase 2 not only reduces the number of PMUs, but also guarantees the complete observability. Note that the two-phase algorithm can generate multiple solutions for both the practical model and the ideal model, even on the large-scale IEEE test systems (see Tables 2 and 6
                        ). These multiple solutions provide flexibility of PMU placement, which can benefit utility companies, especially when considering the different installation costs of PMUs in different places. Moreover, PMU placement with contingency constraints has become a critical issue in recent years (Aminifar, Khodaei, Fotuhi-Firuzabad and Shahidepour, 2010). However, it is difficult to detect contingencies such as PMU failures or line outages. In Emami and Abur’s study (Emami and Abur, 2010), they identified a set of backup PMUs for strategic PMU placement against topology changes associated with contingencies. Therefore, these multiple solutions derived by our proposed algorithm can actually offer backup placement for PMU installations and enhance the robust observability of power systems.

Subsequently, we compare the result with those obtained by other approaches such as BPSO, IP, ILP, GA, Immunity GA and Tabu search for these IEEE test systems. Table 3
                         demonstrates the effectiveness of the hybrid two-phase algorithm. Here N/A means the results of the corresponding test problem are not available in the literature. For each IEEE test system, the number of PMUs derived by the hybrid algorithm meets the currently best results in the literature.

Furthermore, regarding computational efficiency, we compare our algorithm with the BPSO method in Hajian et al.’s work (Hajian, Ranjbar, Amraee and Mozafari, 2011) which claimed that the PSO is one of the fastest meta-heuristic algorithms. Fig. 3
                         shows that the proposed algorithm can reach the currently best solution in relatively fewer iterations on the IEEE 39-bus test system. Precisely, our algorithm converged in four iterations, while the BPSO method derived the solution after 26 generations (as shown in Hajian, Ranjbar, Amraee and Mozafari (2011)). We remark that in order to compare against the BPSO method on the other IEEE test systems, we have reproduced Hajian et al.’s algorithm and followed their settings, but the reproduced algorithm cannot achieve the performance reported in Hajian, Ranjbar, Amraee and Mozafari (2011) due to some limitation. Thus, such comparison cannot be made in a consistent way.

In addition, we also only conducted the ABC algorithm, i.e. single-phase ABC, on the IEEE test systems to demonstrate the merit of the proposed hybrid two-phase approach. As shown in Tables 4
                         and 5, the comparison results reveal the advantage of performing the graph-theoretic SD-like algorithm in Phase 1. In particular, on the 118-bus system, the single-phase ABC algorithm can achieve neither the currently best results in the practical model nor the lower bound in the ideal model. Here the result was derived under a setting of 2000 maximum iterations. Note that we presented the average CPU execution time in Tables 4
                         and 5, while the computation of Phase 1 of the two-phase algorithm takes less than 10 milliseconds for each of the IEEE test systems. We remark that the execution time is almost gradually increasing with the scale of the test systems in the practical model. However, in the ideal model, the execution time is not proportional to the size of the test systems, because the variation of iterations depends on the quality of initial placements from the results of Phase 1. The 39-bus test system possesses a more complicated topology so that the number of iterations needed for this test system is relatively large in the ideal model.

Consider the ideal model of the IEEE test systems in which every node is a zero injection node. Phase 1 provided an initial solution of the PMU placement on the IEEE test systems, which uses 2, 4, 4 and 8 PMUs, respectively (see Table 6). Phase 2 further reduced the number of PMUs required and the refined solutions achieve complete observability. In particular, the computational results in Table 6 meet the theoretical lower bound derived in the Appendix A, i.e. the hybrid two-phase algorithm achieves the global optimum and provides the optimal PMU placement for these IEEE test systems. We note that the ABC algorithm in Phase 2 can perform well because the graph-based SD-like algorithm offered better initial solutions in Phase 1 as compared to the common technique of the ABC algorithm using random initial solutions.

Subsequently, consider the difference between the practical model and the ideal model. Table 2 shows that the number of PMUs required for complete observability of the practical model of the IEEE test systems is 3, 8, 11 and 28, respectively. Accordingly, each of these is about 
                           
                              1
                              5
                           
                         to 
                           
                              1
                              4
                           
                         of the number of total nodes. On the other hand, in regard to the ideal model (see Table 6), the number of PMUs needed for complete observability can be significantly reduced to 2, 5, 3 and 8, respectively. Accordingly, each of these is only about 
                           
                              1
                              10
                           
                         the size of the systems.

Moreover, because most of the previous studies in the literature have exploited IP-based methods to solve the OPP problem, we also conducted experiments in the context of the ideal model of the power test systems using the IP formulation, as described in Section 2.1. The simulation tool was carried out in a Gurobi environment (I. Gurobi Optimization, 2012) and the results are presented in Table 7
                        . As mentioned earlier, although the number of installed PMUs can be reduced in the ideal model, the problem complexity will significantly increase. As shown in Table 7, even when the IP-based method can be optimally deployed on the small IEEE 39-bus system, the number of iterations grows tremendously (almost 280 million iterations) while the CPU time approaches 40 hours. For the IEEE 57-bus and 118-bus systems, we limited the running time to 60 hours, in regard to CPU execution time. Thus, the number of PMUs derived did not meet the optimum; the IP-based method produced one more and four more PMUs required, respectively. In contrast, the proposed two-phase algorithm can solve the ideal model efficiently ( see Table 5). Moreover, the lower bound presented in Appendix A shows that our algorithm is able to obtain an optimal solution in the ideal model of the power test systems. We note that Aazami (2010) proved that the LP relaxation techniques for IP (integer programming) formulation of the PD problem, i.e. in the ideal model, have a large integrality gap of Ω(n), where n is the number of total nodes in a given system.

In this paper, we have proposed a new hybrid two-phase search approach for solving the OPP problem. Numerical studies have shown that good initial solutions provided by the greedy SD-like approach in Phase 1 of the proposed algorithm can significantly improve the iterative searching process in Phase 2. Moreover, we have considered both the practical model and the ideal model of the IEEE power test systems. The experimental results on the practical model have demonstrated its effectiveness and achieved the currently best results in comparison to the literature. In addition, the iterative searching process is able to converge rapidly and outperform existing algorithms in the context of computational efficiency. In regard to the ideal model, the number of PMUs can be significantly reduced from 
                        
                           
                              1
                              5
                           
                           ,
                        
                     
                     
                        
                           1
                           4
                        
                      to 
                        
                           1
                           10
                        
                      of the number of total nodes. Furthermore, we have derived a theoretical lower bound for the ideal model and proved that the proposed algorithm can reach the global optimum in the ideal model on the test systems.

The OPP problem pertains to real applications in monitoring a power grid and determines the health of a power system. Therefore, it would be worthwhile to study specific variations of the OPP problem. For instance, further studies might consider the robustness of a power system. PMU failures and line outages provide a new contingency-constrained model of the OPP problem (Aminifar, Khodaei, Fotuhi-Firuzabad and Shahidepour, 2010). It would be of interest to determine whether the proposed hybrid search approach could be modified to solve the stochastic model of the OPP problem, in which every (bus) node or (transmission) line is associated with a probability of failure.

@&#ACKNOWLEDGMENTS@&#

We wish to thank the anonymous reviewers whose valuable comments and suggestions aided us in improving the quality of the presentation of this paper. This work was supported in part by the Ministry of Science and Technology, Taiwan, R.O.C. under Grant Number NSC 102-2221-E-007-075-MY3, NSC 100-3113-P-002-012 and MOST 103-3113-E-002-014.

We refer to Aazami and Stilp (2009) and provide lower bounds on the number of PMUs required for those IEEE test systems from a theoretical point of view. Given a graph G = (V, E) and a node subset S⊆V, the node subset R⊆V is called an S-strong region if 
                        
                           R
                           ¬
                           ⊆
                           
                              P
                              
                                 S
                                 ∪
                                 n
                                 b
                                 r
                                 (
                                 R
                                 )
                              
                           
                           ,
                        
                      where nbr(R) is the neighbor node set of the node set R, which is defined by nbr(R) = {v ∈ V∣uv ∈ E, u ∈ R, v∉R}. The following lemma provides another characterization of the strong region.

                        Lemma A.1
                        
                           (Aazami and Stilp, 2009) Given a graph G = (V, E), a subset R⊆V is an S-strong region if and only if for every feasible power dominating set S*, we have R∩(S*∖S) ≠ ∅.

Based on the above lemma, no electric nodes, excluding the boundary ones in every S-strong region, can be observed by a PMU outside the region. That is, each of the strong regions needs at least one PMU to achieve complete observability. For example, the IEEE 14-bus system in Fig. A.1
                      illustrates this property. For a node set S = {1, 2, 3, 4, 5, 7, 8}, the corresponding S-strong region is R = {6, 9, 10, 11, 12, 13, 14} and its neighbor node subset is nbr(R) = {4, 5, 7}. The maximum region observed by S and nbr(R) is 
                        
                           
                              P
                              
                                 S
                                 ∪
                                 n
                                 b
                                 r
                                 (
                                 R
                                 )
                              
                           
                           =
                           
                              {
                              1
                              ,
                              2
                              ,
                              3
                              ,
                              4
                              ,
                              5
                              ,
                              6
                              ,
                              7
                              ,
                              8
                              ,
                              9
                              }
                           
                        
                     . Except for boundary nodes 6 and 9, no nodes in the S-strong region R can be observed by any possible PMUs outside the region. As for S = {6, 7, 8, 9, 10, 11, 12, 13, 14}, the corresponding S-strong region is R = {1, 2, 3, 4, 5}. Likewise, an arbitrary power grid can be decomposed into several strong regions using an exhaustive search. The decomposition results of the other IEEE test systems are provided in Figs. A.2–A.4
                     
                     
                     .

Therefore, it is implied that the number of PMUs required for these four test systems is at least 2, 5, 3 and 8, respectively.

@&#REFERENCES@&#

