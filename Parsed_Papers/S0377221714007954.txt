@&#MAIN-TITLE@&#Incorporating priorities for waiting customers in the hypercube queuing model with application to an emergency medical service system in Brazil

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We extend the hypercube model to analyze EMS with different priorities in queues.


                        
                        
                           
                           Then we analyze the results obtained when applying this approach to a case study.


                        
                        
                           
                           We investigate scenarios for this system considering different periods of the day.


                        
                        
                           
                           The model can accurately evaluate average response times for each class of calls.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

OR in health services

Hypercube model

Queuing priority

Emergency medical services

SAMU

@&#ABSTRACT@&#


               
               
                  Emergency medical services (EMS) assist different classes of patients according to their medical seriousness. In this study, we extended the well-known hypercube model, based on the theory of spatially distributed queues, to analyze systems with multiple priority classes and a queue for waiting customers. Then, we analyzed the computational results obtained when applying this approach to a case study from an urban EMS in the city of Ribeirão Preto, Brazil. We also investigated some scenarios for this system studying different periods of the day and the impact of increasing the demands of the patient classes. The results showed that relevant performance measures can be obtained to analyze such a system by using the analytical model extended to deal with queuing priority. In particular, it can accurately evaluate the average response time for each class of emergency calls individually, paying particular attention to high priority calls.
               
            

@&#INTRODUCTION@&#

In emergency medical services (EMS), the response time, which is the interval between the arrival of the emergency call and the arrival of the medical team at the call location, is of major concern as this delay might be the difference between life and death of the patients involved, depending on their medical seriousness. EMS managers must take operational and tactical decisions in these systems in order to evaluate the trade-off between providing suitable care to the system users (service level) and reducing the costs related to the medical resources and capacity (ambulances, stations, specialists and equipment). In Brazil, some urban EMS in moderate to large cities are called SAMU, modeled after the French SAMU (Système d'Aide Médicale Urgente). Comprehensive analysis of these systems should take into account the particularities associated to the configuration and operation of the system, such as multiple types of emergency calls, multiple types of system resources, period of the day or week, particular operational policies in locating and dispatching ambulances, among others. Furthermore, more accurate and effective analysis of these systems should also deal with the probabilistic aspects allied to a system's operation, such as the servers’ availability, the spatial (location) distribution of calls and servers and the temporal (time) distribution of call arrivals and services.

The hypercube queuing model was initially proposed by Larson (1974) and then extended and applied in various studies (see
Galvão & Morabito, 2008; Swersey, 1994; and the references therein). This model can represent systems’ uncertainties and incorporates the identity of the servers, as well as the possible cooperation among them. It has been an effective descriptive approach to analyze and plan emergency service systems. Larson's basic model includes priority disciplines for servers’ dispatching only if there are servers available when a call arrives. In case all servers are busy, arriving calls wait in a queue (or are transferred to another system) and the queuing calls are served based on a FCFS (First Come First Served) discipline.

Some modifications/extensions of the basic hypercube model include zero capacity queue meaning whereby arriving calls are lost when all servers are busy, for example, in Chelst and Barlach (1981), Mendonça and Morabito (2001), Iannoni and Morabito (2007), Iannoni, Morabito, and Saydam (2009), Larson and Odoni (2007) and Chiyoshi, Iannoni, and Morabito (2011). Some of these studies also include diverse dispatching policies, such as multiple dispatches of ambulances, partial backup, different types of servers and calls, among others. Only a few studies on hypercube models explore limited capacity queue and layering approaches to deal with different types of calls, for example in Burwell, Jarvis, and Mcknew, (1993), Larson and Odoni (2007) and Takeda, Widmer, and Morabito (2007). Alternatively, several researchers address the computational limitations of the basic hypercube model by proposing approximated versions, where other assumptions are required, such as in Larson (1975), Jarvis (1985) and Atkinson, Kovalenko, and Kuznetsov (2006, 2008). For example, Larson's hypercube approximation proposes correction factors to deal with the assumption of independent and homogeneous servers (all servers with the same service time distribution) when analyzing systems with infinite queue capacity, whereas Jarvis’ model extended the later allowing service rates to depend on the server and call locations and null queue capacity. Exact and approximated hypercube models have also been integrated into optimization approaches, for example in Galvão, Chiyoshi, and Morabito (2005), Rajagopalan, Saydam, and Xiao (2008), Ingolfsson, Budge, and Erkut (2008) and Iannoni, Morabito, and Saydam (2011).

An alternative to approximately model distinct classes of users (types of emergency calls) and their respective priorities in the hypercube model is to subdivide the region under analysis into different geographic sub-regions (called atoms) and then subdivide each of these atoms into sub-atoms corresponding to independent sources of the call types. This procedure is referred to in the literature as layering (Larson & Odoni, 2007). For example, in Takeda et al. (2007), this procedure was applied to model two classes of calls in the SAMU system in the city of Campinas, Brazil: high priority calls (involving risk to life) requiring advanced life support ambulances and low priority calls requiring basic life support ambulances. Basically, each atom of the system was subdivided into two sub-atoms with different dispatching lists according to the type of resource (ambulance) required. The study showed that in case the utilization level of the ambulances is relatively low, and even without explicitly modeling priority disciplines in queues (i.e., simply using the FCFS discipline combined with layering), the hypercube model can be an accurate method to analyze systems with different types of calls and priorities.

Another policy also adopted by some EMS with multiple priority users and queues is the server reservation, also called cut-off queuing, as studied, for example in Taylor and Templeton (1980) and Schaack and Larson (1986). According to this strategy, servers are reserved to high priority calls by assuming that low priority calls may wait in queue until a predetermined number of servers become available. For example, Schaack and Larson (1986) proposed an N-server cut-off queuing model with different priorities (which is not a hypercube model family model). Their model was called M/M/{Nr
                     }, where a queued customer of priority r only enters service when there are fewer than Nr
                      servers busy and there are no higher priority customers waiting for service. Other studies addressing problems with different types of calls and/or different types of servers (ambulances), but not studying specifically priorities in queue, can be found, for example in Larson and Mcknew (1982), Goldberg et al. (1990), Iannoni and Morabito (2007) and Chiyoshi et al. (2011).

In some emergency service systems the assistance required differs among the users according to the type of event, resources requested, number of victims/patients and seriousness involved. Examples are found in EMS, police patrol services, emergency services provided by firefighters and also in emergency services to operate in case of major catastrophes such as earthquakes, floods terrorists attacks, among other systems (see e.g., Green & Kolesar, 2004; Larson, 2004; Swersey, 1994). In case of high congested systems, the response process involving priority policies sometimes results in significant divergent waiting times among the user classes, assuming that low priority users may be held behind in a queue if there are also higher priority users waiting for available servers (e.g., ambulance, police patrol, firefighter vehicles). Consequently, the service availability for higher priority users will increase, resulting in an improved quality of service for them.

Appropriate analysis of such systems should explicitly take into account priority policies in queues in order to evaluate accurate response times for the different classes of users. In view of this, the present work studies extensions to the hypercube queuing model in order to properly deal with these situations. The extended model can be applied to these server-to-customer emergency systems cited above to evaluate the response time of each user class individually. The response time includes the waiting time in a queue, in case all servers are busy, the set-up delay, the travel time between the server and call locations and other possible delays occurring after the assignment of ambulances that are recorded as part of the service time statistics. Therefore, in the present study the response time is evaluated as the sum of the waiting time in queue and the mean travel time between the ambulance and call locations.

Hence, in this study we propose a modified hypercube queuing model to analyze emergency systems involving different priorities in queue, assuming a non-preemptive priority discipline, a finite queue size and distinct servers. To the best of our knowledge, there are no other studies in the literature explicitly exploring a priority policy to distinct classes of users in queues using the hypercube model. This model is then applied to analyze a case study of the SAMU system of Ribeirão Preto, a medium-sized city located in Sao Paulo State, Brazil. Similar to other SAMU systems, this EMS provides assistance to different classes of users, including high priority emergencies that require advanced life support ambulances, as well as moderate to low priority emergencies requiring basic life support ambulances. The computational results obtained by applying the model to this EMS are useful to evaluate performance measures for different periods of the day. We also compared the results obtained with a discrete event simulation model that was used to assess the effects of relaxing some restricting hypothesis assumed by the hypercube model, such as the Poisson arrival process, exponentially distributed service times indistinguishable for users’ regions and class, a finite queue size and mean travel time inputs indistinguishable for user class (as listed in Section 4). Furthermore, the model results were also compared with sample data of the system.

This paper is organized as follows: Section 2 presents the extended hypercube model to deal with different priorities in queues and Section 3 presents a general procedure to generate the equilibrium probabilities for the system states of the extended model. Section 4 describes the case study, its statistical analysis and the simulation model. The computational results obtained by applying the model to the case study and to alternative scenarios are discussed in Section 5. Finally, Section 6 presents some concluding remarks and discusses some perspectives for future research.

The basic idea of the hypercube model is to expand the state space description of a simple multi-server queuing system (M/M/m/ or M/M/m/m system, where m is the number of servers) in order to represent each server individually and account for the spatial nature of the system. Supposing that each server has two possible statuses: idle (0) or busy (1) at any given instant, there are 2
                        m
                      possible system states in the hypercube (i.e., the possible server configurations), which correspond to the vertices of an m-dimensional hypercube (with 2
                        m
                      vertices), plus the number of queuing states. The model requires the solution of linear systems, where the variables involved are the equilibrium (steady) state probabilities of the system. With these probabilities, the different steady-state performance measures can be calculated, such as mean user response times, server workloads, number of dispatches per server in each region, among others.

The analysis implies that the region under study is divided into geographic atoms, which corresponds to independent sources of calls. It is assumed that the calls arrive at each atom j according to a Poisson process, regardless of other atoms, with arrival rate λj
                     . The m servers (ambulances) of the system are spatially distributed and when available, their dispatching occurs according to a preference dispatching list predefined for each atom. The model assumes negative exponential service times. In general, each server i has a distinct mean service time 1/μi
                     , which includes the set-up time (preparation equip time), the on-scene service time and the travel times (which include the travel time from the ambulance location to the patient location, the travel time back to the ambulance base, and the possible travel time to transport the patient to the hospital or other healthcare facility).

In EMS, when the degree of severity of the patient´s condition differs significantly from patient to patient, the system may require the classification of the patients into priority categories. For instance, the service provided to high priority users may differ from that provided to low priority users in two ways. The first consists of using better equipped service units for patients or more specialized medical teams in more serious conditions. For example, the SAMU systems in Brazil generally operate with two types of ambulances: ALS (Advanced Life Support) ambulances to assist only high priority calls (involving risk to life) and BLS (Basic Life Support) ambulances to moderate and low priority calls. Unlike other EMS in North America and Europe, these two types of ambulances regularly operate with rescuers and differ only in terms of equipment (ALS ambulances transport material for patient reanimation and more pre-hospital care equipment). Conversely, in the French SAMU, all emergency calls are responded by ALS ambulances (also called SMUR – Service Mobile d'Urgence et de Réanimation), which are staffed by specialized medical personnel (doctors and nurses). In the United States, the ambulances are not staffed by doctors, but usually by a crew of EMT (Emergency Medical Technicians), which may differ according to certain levels of training such as basic EMT, intermediary EMT and paramedical EMT (see e.g. NHTSA, 1990, 2006).

The second way to differ the response between high and low priority classes is by using priority-based discipline for queued users. To properly represent queuing priority problems using the hypercube model, the system states in a queue should be redefined in order to also describe the priorities of the users in queues, rather than just the number of users as in the basic model. Note that only the states implying queuing require this extension, i.e., only when all servers are busy and there are users waiting for the service.

As mentioned in Section 1, the issue of using special units for service priority users can be handled through a procedure known as layering. It consists of observing the demand atoms as made up of layers, each layer being the source of users of one class of priority. In order to illustrate this procedure, let us analyze a two-atom system in which each atom is the home location of a service unit. In the absence of priorities, we would set up a minimum distance based dispatch policy, making each service unit the preferential server for the calls from the atom it is located on and the backup server for the calls from the other atom, as depicted in Table 1
                     .

When severity-based priorities are introduced, we use layering to build the dispatch policy in which patient condition supersedes distance considerations. As an example, let us take a system with two classes of patients, say, a and b, and one advanced service unit to be used preferentially for class a patients located at atom 1. The corresponding dispatch matrix is shown in Table 2
                     . The use of layers leads to a system of an increased number of demand sources, but the structure of the problem is not altered so that the basic hypercube model can be used to represent the system (see e.g., Larson & Odoni, 2007).

As for the handling priorities in hypercube queuing models, the literature concerning the problem is scarce. The approach followed here consists of expanding the queue states of the system. In the basic hypercube model, the queue states are simply described by the number of users. In order to handle priorities, in addition to the queue size, the composition of the queue as to the number of users of each priority class is required. In view of that, for the present model, when analyzing a system involving r priority classes, the queue states when s users are waiting can be represented as particular ordered combinations (or vectors) with s elements, indicating the priority class of the users in queue.

For example, by supposing a three-class priority queuing system (r = 3) with priority classes labeled a, b and c from higher to lower priorities, when s = 2 users are waiting in a queue, the possible states of the system are: {aa}, {ab}, {ac}, {bb}, {bc} and {cc}. Fig. 1
                     shows the transitions into and out of the queue state {ab}, where each class r ∈ D = {a, b, c} arrives according to a Poisson process, with a mean arrival rate λr
                     , and µ is the total mean service rate (i.e., 
                        
                           μ
                           =
                           
                              ∑
                              
                                 i
                                 =
                                 1
                              
                              m
                           
                           
                              μ
                              i
                           
                        
                     , where μi
                      is the mean service rate of server i assumed exponentially distributed). It can be observed in the figure that the priority queuing discipline is modeled by making {ab} → {b} when a given server becomes free (with transition rate μ), and not allowing the {ab} → {a} transition that would violate the priority discipline. The balance equations around the queue states are built in the usual way by setting the total transition rate of the system into a given state equal to the total transition rate out of the same state. For instance, the equilibrium equation of state {ab} is given as (see Fig. 1):

                        
                           (1)
                           
                              
                                 
                                    (
                                    λ
                                    +
                                    μ
                                    )
                                 
                                 
                                    P
                                    
                                       {
                                       a
                                       b
                                       }
                                    
                                 
                                 =
                                 
                                    λ
                                    a
                                 
                                 
                                    P
                                    
                                       {
                                       b
                                       }
                                    
                                 
                                 +
                                 
                                    λ
                                    b
                                 
                                 
                                    P
                                    
                                       {
                                       a
                                       }
                                    
                                 
                                 +
                                 μ
                                 
                                    P
                                    
                                       {
                                       a
                                       a
                                       b
                                       }
                                    
                                 
                              
                           
                        
                     where λ = ∑
                        r ∈ D
                     
                     λr
                      and P
                     {.} stands for the equilibrium probability of state {.}.

This non-preemptive priority discipline assumes that when one low-priority user is waiting, as soon as a server becomes free, the low-priority user enters service if there is not a higher priority call in the queue. Other alternative priority policies could be studied, for example, a cutoff priority discipline as mentioned before in Section 1, or a partial backup with a priority policy, but at the expense of enlarging the model's state space and involving significant modifications in the balance equations.

The present model also assumes a queue limited to L users due to the hypercube computational requirements. This is a defined parameter based on the system's congestion level and/or the queue and loss probabilities, as an arriving call of any priority is lost to the system when L users are waiting in a queue. The extension of the above procedure for systems with a larger number of classes is straightforward. As described above, the queue states are represented here by ordered strings of labels attached to priority classes. When we have r priority classes, the number of priority queue states of size s can be evaluated as the number of s-combinations with a repetition of r objects. Accordingly, the total number of queue states K in an r-class priority queuing system with queue limited to L users is given by:

                        
                           (2)
                           
                              
                                 K
                                 =
                                 
                                    (
                                    
                                       
                                          
                                             
                                                r
                                                +
                                                L
                                             
                                          
                                       
                                       
                                          
                                             L
                                          
                                       
                                    
                                    )
                                 
                                 −
                                 1
                              
                           
                        
                     
                  

For example, for a three priority class queuing system with a maximum queue size of L = 10, the total number of queues state turns out to be K = 285. Thus, if we are dealing with a 10 server system, the total number of equations of the model is 210 + 285. It should be noted that in the same system operating under the FCFS queuing discipline, the total number of equations would be 210 + 10. In view of that, the handling of the priority discipline involves relative reasonable costs in terms of additional computing effort (assuming that L = 10 is large enough), and it appears that the number of states and consequently computing efforts depend more significantly on the number of hypercube states (2m
                     ) than on the dispatching policy involved for a reasonable value for L.

Most of the output measures for the extended model presented here can be obtained in the usual way of Larson's basic model. One exception would be the response time for each priority class, which includes the mean waiting time in queue, the mean travel time from an ambulance base to call location and set-up times. In the following section, we show how to evaluate the mean waiting time in a queue for each priority class. More details related to the other main performance measures can be found, for example in Larson and Odoni (2007), Takeda et al. (2007), Galvão and Morabito (2008), Chiyoshi et al. (2011) and Souza (2010).

In determining the mean waiting time for each priority class, it turns out that the distribution of the queue length for each class of users can be obtained from the queue state probabilities. If we define nr
                      as the number of class r users in queue, the probability P(nr = j) is given by the sum of the probabilities associated with the queue states in which the number of class r users is j:

                        
                           (3)
                           
                              
                                 P
                                 
                                    (
                                    
                                       n
                                       r
                                    
                                    =
                                    j
                                    )
                                 
                                 =
                                 
                                    ∑
                                    
                                       ∀
                                       S
                                       s
                                       .
                                       t
                                       .
                                       n
                                       (
                                       r
                                       ,
                                       S
                                       )
                                       =
                                       j
                                    
                                 
                                 P
                                 
                                    {
                                    S
                                    }
                                 
                              
                           
                        
                     where S is the queue state and n(r, S) is the number of class r users in S. From this distribution, the mean queue length of class k users can be determined as:

                        
                           (4)
                           
                              
                                 
                                    L
                                    
                                       q
                                       r
                                    
                                 
                                 =
                                 
                                    ∑
                                    j
                                 
                                 j
                                 P
                                 
                                    (
                                    
                                       n
                                       r
                                    
                                    =
                                    j
                                    )
                                 
                              
                           
                        
                     from which the mean waiting time is obtained as:

                        
                           (5)
                           
                              
                                 
                                    W
                                    
                                       q
                                       r
                                    
                                 
                                 =
                                 
                                    
                                       L
                                       
                                          q
                                          r
                                       
                                    
                                    
                                       λ
                                       r
                                    
                                 
                              
                           
                        
                     using Little's formula (Little, 1961). Developments in theory and practice of this formula are revised and further discussed in various papers, for example in Whitt (1991), and more recently in Wolff (2011), Little (2011) and Kim and Whitt (2013, 2014). As shown in these papers, Little's formula holds under curiously general conditions. For example, what concerns the hypercube queuing model (assuming stationary process, infinite time period and long term average arrival rate), the formula is applicable as it holds for subclasses of clients (items), as well as for the whole population, and it is independent of the queue discipline (Little, 2011). By taking into account different priority classes, additional performance measures can also be evaluated by the extended hypercube model, such as dispatch frequencies for each server to each atom according to the user class, loss probabilities and travel times statistics to each class individually, among others.

Assuming a non-preemptive policy and taking the three-priority class queuing system (with classes a, b and c) as discussed in Section 2, a class c user can leave the queue when a server becomes available and there are no users with higher priorities (classes a or b) waiting in the queue. Fig. 2
                     illustrates the queue states and the possible transitions among them for this priority queuing system with m = 3 servers and a limited queue up to L = 3 users (starting from the hypercube state {1 1 1}). We refer to Sn
                      as the set of queue states implying in n users in the system, where n = m + s.

The equilibrium equations of the queue states in Fig. 2 can be built in a similar fashion to Eq. (1) in Section 2. In order to address larger problems, the method presented here requires two computing routines. The objective of the first is to generate the priority queue state (combinations with repetition). The second routine is to generate the coefficients of the equations associated with the queue states. In the first case, a known algorithm to generate the set containing all non-identical combinations for a given pair of the number of objects and the combination size was used (see Timofeeva, 2004). The second was a simple and specific routine designed to evaluate every non-zero transition rate between two states. Brief descriptions of the routines are given in the sequel.

In order to describe the procedure to generate the queue states (or the vectors representing states), we use the simple example with three priority classes, but the method can be generalized for r classes. The queue states with one user waiting are: {a}, {b} and {c}. And the queue states with two users waiting are obtained as follows: adding element “a” to the left of all queue states with one user (vectors with one element), then adding element “b” to the left of the queue states with one user “b” or “c”, and to conclude adding element “c” to the left of the states with one user “c”. After that, we create the states: {aa}, {ab}, {ac}, {bb}, {bc}, {cc}. The procedure is then repeated to all queue states until states with s users wait in the queue. For convenience sake, the respective pseudo-code is described in detail inAppendix A. Fig. 3
                     
                     illustrates this procedure for a queue with r = 3 priority classes and a capacity of L = 3 users. The set of queue states (Bp
                     ), where r = 3, L = 3, K = |Bp
                     | = 19 can be given as:

                        
                           
                              
                                 
                                    B
                                    p
                                 
                                 =
                                 
                                    (
                                    
                                       
                                          
                                             
                                                {
                                                a
                                                }
                                                ,
                                                {
                                                b
                                                }
                                                ,
                                                {
                                                c
                                                }
                                                ,
                                                {
                                                a
                                                a
                                                }
                                                ,
                                                {
                                                a
                                                b
                                                }
                                                ,
                                                {
                                                a
                                                c
                                                }
                                                ,
                                                {
                                                b
                                                b
                                                }
                                                ,
                                                {
                                                b
                                                c
                                                }
                                                ,
                                                {
                                                c
                                                c
                                                }
                                                ,
                                                {
                                                a
                                                a
                                                a
                                                }
                                                ,
                                                {
                                                a
                                                a
                                                b
                                                }
                                                ,
                                             
                                          
                                       
                                       
                                          
                                             
                                                {
                                                a
                                                a
                                                c
                                                }
                                                ,
                                                {
                                                a
                                                b
                                                b
                                                }
                                                ,
                                                {
                                                a
                                                b
                                                c
                                                }
                                                ,
                                                {
                                                a
                                                c
                                                c
                                                }
                                                ,
                                                {
                                                b
                                                b
                                                b
                                                }
                                                ,
                                                {
                                                b
                                                b
                                                c
                                                }
                                                ,
                                                {
                                                b
                                                c
                                                c
                                                }
                                                ,
                                                {
                                                c
                                                c
                                                c
                                                }
                                             
                                          
                                       
                                    
                                    )
                                 
                              
                           
                        
                     
                  

In
Appendix A, we also describe the computational method in more detail (pseudo-code) to generate the coefficients of the balance equations around the queue states. For example, the procedure to generate the steady state transition rates of the system into a given state with n users uses the signals “+” and “−”, representing the inputs and outputs, respectively. The first step of this procedure consists of comparing pairs of states, and then eliminating the pairs with differences in terms of the number of users waiting (marked as difference in +1 or −1). Initially, we remove from the vectors (states) all the elements from vectors with fewer elements using more elements (users), obtaining the difference between them. If this difference is more than one element, the pair of vectors is eliminated. In case the original vector (state) has fewer elements (users), the pair corresponds to the arrival of a user in the system, for example from state {ab} to {aab}, with the arrival of a user class a. Otherwise, if the original vector has more elements, the procedure also incorporates an additional filter to eliminate the unfeasible transitions, such as: from state {ab} to state {a}, meaning that user class b was served before user class a.

The feasible transitions correspond to the ones where a user leaves the queue according to the priority order, for example from state {bcc} to state {cc}, when user class b leaves the queue. Alternatively, the procedure to generate the steady state transition rates out of a given state with n users supposes that these transitions occur: (i) when a user goes into the system, with arrival rate λ (only for feasible transitions respecting capacity L of the queue), or (ii) when one of the m servers finishes its service, with service rate µ. In the coefficients matrix of the system of equations for the queue states (Fig. 4), the diagonal entries are the symmetries of the transition rates of the system out of the corresponding states.

As described before, the case study of the SAMU system of Ribeirão Preto (a city of about 600 thousand inhabitants) provides pre-hospital care to different classes of emergency calls. The system works with three types of calls according to their seriousness and priority: a, b and c. Type a emergencies correspond to emergency requests with the highest priority, requiring the dispatch of an ALS ambulance and involving risks to the patient´s life. Type b calls correspond to calls with moderate severity, which are more tolerant for waiting in a queue than type a calls, and correspond to a relatively large amount of emergency requests. Conversely, type c calls correspond to calls with a lower degree of severity than type b calls, which can wait in queue for a longer time to be serviced without involving risks to the patient´s life. Users with priority b and c can be serviced by a BLS ambulance; BLS ambulances do not have the same specialized equipment and their operation costs are relatively lower than ALS ambulances, reserved to type a requests. Alternatively, some EMS operating with only ALS ambulances usually respond only to type a and/or b requests.

Normally, there are ten ambulances operating in the SAMU system: one ALS and nine BLS. The total region (city) serviced by the SAMU case study is divided into five regions: North, South, East, West and Central, as shown in Fig. 5
                     .The managers of SAMU only provided the data aggregated within these five regions (already physically established by them). For that reason, we decided not to study the system by partitioning the whole region in more than five (and less populated) regions. The decentralized location of the ten ambulances through the region is: Central region: the ALS and two BLS vehicles; North, South and West region: two BLS vehicles; East: one BLS vehicle. In applying the extended hypercube model and the simulation model (described below) to analyze this system, we assumed that each region corresponds to geographic atoms as independent sources of calls. Thus, atom 1 – Central region; atom 2 – North; atom 3 – South, atom 4 – East and atom 5 – West (Fig. 5). Moreover, using the layering procedure, each atom was subdivided into three sub-atoms (layers a, b and c) according to the priority classes (types of calls). For example, for atom 1 – Central region: central a (1a), central b (1b) and central c (1c).

The dispatching policy of the system can be described as follows:

                        
                           1.
                           If the arriving call is of class a (highest priority emergency), the ALS vehicle is sent, if available. In case the ALS ambulance is busy, the dispatcher checks the availability of the preferential BLS ambulance of the atom (from the call's origin). The preferential ambulance for each atom corresponds to the ambulance based there. If there is more than one ambulance located in the same base and they are available, dispatching is done by a random selection among them. When the preferential ambulances are busy, the dispatcher checks the availability of the other ambulances of the system (called backups), and the dispatching is done by a random selection among them.

Similarly, for class b or c calls (requiring the dispatch of BLS ambulances), the dispatcher checks the availability of the preferential ambulances and randomly selects one to be dispatched when there is more than one ambulance available. In case the preferential ambulances are busy, an available ambulance from another atom is sent. In all cases, only one ambulance is dispatched to service a call.

Finally, in case all ambulances are busy when a call arrives, the call goes into a queue following a priority discipline. In the real system, the queue does not have a finite capacity. However, in the present hypercube model with limited capacity, when the waiting room of the queue is full, the call is lost to the system and immediately transferred to another system. We show below that this assumption is reasonable in analyzing this case study, based on the simulation model results.

The sample data was collected at the reception call center of the SAMU over one year. Graphical and statistical analyses were conducted in each region to verify if there were significant variations in the call data by month, week or day of the week. These analyses indicated that the monthly call arrival rates remained approximately constant, and that there were no significant differences between arrival data during weekends and workdays. Then, similar analyses were made using the arrival data from a set of 10 days sorted from a typical month (according to the managers of the system) in order to determine if there were significant variations in different periods of the day. We observed two distinct higher demand periods: from 10:00 a.m. to 2:00 p.m., and from 6:00 p.m. to 11:00 p.m. In addition, we also analyzed the data from the period 0:00 a.m. to 7:00 a.m., which showed significant data variations compared to other periods. Hence, we analyzed the computational results by applying the extended hypercube model and the simulation model to analyze this SAMU considering these three distinct periods separately, called: morning (M), afternoon (A) and night (N). Regarding the number of ambulances operating, there were ten ambulances working in the mornings and afternoons, and nine ambulances at night (in this case, with one less in atom 5 – West region).


                     Table 3 presents some statistics for the arrival process of emergency calls in each sub-atom of the three periods analyzed. The arrival rate for each sub-atom jr (i.e., atom j and class r), λjr
                      (calls per hour), was determined based on the total system arrival rate λ and the proportion of each type of call in each atom pjr
                      (j = 1, 2, … , 5, k ∈ D where D = {a, b, c}), given as: λjk
                      = λpjk
                     . Table 4
                     shows some statistics related to the ambulance service process, such as: the mean service rate for each ambulance μi
                      (in calls per hour), the respective standard deviation and the average and coefficient of variation of the travel times (in minutes) for ambulance i from its base to the call location. It is worth remembering that the night period (N) has one ambulance less than the other two periods. As defined before, the mean service time includes the set-up time, the on-scene time and the related travel times. More details related to the travel time estimates and other statistics are found in Souza (2010). Note in Table 4 that the mean service time for some BLS ambulances during the morning is higher (lower service rates) than the afternoon and night. According to the system operators, these times can depend, for example, in the diverging operation of medical equips, location of arriving calls, traffic problems in the morning (e.g., delays associated to trips, taking patients to hospital and travelling back to the base), set-up times or other unknown variables. Note also in Table 4 that the mean travel time corresponds to a relatively small fraction of the total service time.

Following the statistical analysis described above, we applied three goodness-of-fit tests (Kolmogorov–Smirnov, Anderson Darling and Chi-square tests) using the Best-Fit software to verify the hypercube assumption that the interval between successive arrivals is exponentially distributed (e.g., a Poisson process with total system arrival rate λ aggregating all sub-atoms). These tests were unable to reject this assumption with 5 percent of significance. An interesting study by Kim and Whitt (2014) provides analyses to apply appropriate statistical tests of a Poisson process to arrival data. According to Galvão and Morabito (2008) and also our experience in analyzing EMS problems, even if the Poisson arrival assumption appears to be very restrictive, it is frequently satisfied in various real-world systems. On the other hand, the same goodness-of-fit tests were able to reject the assumption whereby the service process of each ambulance is exponentially distributed with 5 percent
 of significance. We also applied an analysis of variance to verify the difference among the ambulances’ mean service rates. This analysis indicated (using 5 percent
 of significance) that the ambulances should be assumed non-homogeneous when applying the model to analyze this system.

We applied the extended hypercube model described in Sections 2 and 3 to analyze the system's operation during each period (M – morning, A – afternoon and N – night) separately. The model was solved using a Pascal-coded algorithm implemented in Delphi. We supposed that the queue is limited to L = 5 users. This assumption seems to be reasonable to the present study as the probability of more than 5 users in the waiting line is less than 10−4. Analyzing the periods operating with 10 ambulances (morning and afternoon), the total number of system states yields 210 = 1024 in the hypercube, plus 55 states in the queue. Furthermore, to cope with the dispatching policy for atoms with more than one preferential ambulance as described above, we applied a procedure to randomly generate an ordered list of dispatching as proposed in Burwell et al. (1993). For example, in case of atoms with more than one preferential ambulance (i.e., Central, North, South and East regions), this procedure randomly determines the first and second preferential ambulances to be dispatched. Similarly for the backup ambulances based on other atoms of the system, the procedure randomly determines the preference dispatching order of backup ambulances in case the preferential ones are busy (assuming that all of them have the same chance to be chosen, regardless of their location).

In developing hypercube queuing models, it is useful to build independent companion simulation models. This procedure allows for partial outputs of both models to be cross checked along the way, preventing occasional mistakes going unnoticed during the development of the analytic model. On the other hand, the simulation models (once validated by the real system’ statistics) can also be used to assess the effects of relaxing some restricting hypothesis the hypercube models are built on. A similar approach was followed, for example, in Goldberg et al. (1990), where a simulation model was used to evaluate the effects of the assumptions of an analytic model applied to a real EMS.

In view of that, we built a simulation model of the SAMU system under study using the Arena software to analyze only the afternoon period and we estimated steady-state results assuming that the conditions in this period remained constant. However, this model does not correspond to a very detailed imitation of the system operation since that would be beyond the scope of this paper. This simulation could involve a replication of several aspects of the system operation, for example the dynamic behavior of each ambulance, the specific locations of the calls, the scheduling of the medical equips, the roadway configuration and traffic according to different periods of the day, among many others. Following the aim of this study, the present companion simulation model was used during the development of the proposed hypercube model evaluating some of its simplifying assumptions, such as:
                        
                        
                           
                              (i)
                              
                                 Poisson distribution for the arrival process: The simulation model incorporates distinct arrival distributions for each user class (a, b, c) in each atom as obtained by the statistical analysis of the sample data. For example, from this analysis, we determined which general probabilistic distribution best fits the arrival data for distinct atoms according to the user class. Remember that the hypercube model is applied assuming a Poisson distribution to the aggregated arrival data (hypothesis not rejected by the goodness-of-fit tests). It is important to mention that, in practice, the dispatcher at the reception center assigns an ambulance to a call according to its priority and the region (atom) where it is located (regardless of its specific address within the region). As described in Section 3, these administrative regions were already defined in the real system: regions Central, North, South, East and West.


                                 Exponential distribution service times of ambulances without distinction of classes: The simulation model incorporates distinct service time probability distributions for each ambulance according to the user class and the different regions it travels to. We recall that, besides the assumption of exponentially distributed service times, the hypercube model also assumes that each ambulance has a single service time distribution, independently of the user class and the region/atom the ambulance serves.


                                 Travel time inputs regardless of user class and mean inter-atom travel time matrix (when determining the mean travel time measures): Regarding the travel times, the simulation model includes distinct probability distributions of travel times from each ambulance location to the call locations (atoms) based on the user class. Similar to this, the model incorporates the response times for the individual ambulances as a function of the severity of the call in each atom. The travel time probability distributions also reflect the specific location of the calls (sited within a given region/atom). We should remember that the hypercube model assumes that the ambulance travel time is included in the service time independently of the user class (with exponential distribution). Furthermore, when evaluating mean travel time performance measures, the model uses an inter-atom travel time matrix as the input, assuming the call locations at the center of the atoms (indistinctly to the class and based on node distances).


                                 Limited queue: The simulation model allows a waiting line with unlimited capacity, whereas the hypercube model assumes a queue limited to L users.

Besides taking into account different classes of users (a, b and c) and their priority in the queue, the simulation model also incorporates the location of the ambulances, the different types of ambulances (ALS and BLS), and the particular dispatching policy in the real system operation as described above. According to this dispatching policy, when a call arrives, the simulation dispatcher verifies the availability of the preferential ambulances of the atom, the class of the call and the location (region) it comes from. If there is more than one preferential ambulance available in the atom, the one to be dispatched is randomly selected among them. In case the preferential ambulances are busy, an available ambulance from another atom (randomly sorted) is sent. As in the real system, the simulation does not dispatch an ALS ambulance to service class b and c calls (whereas the hypercube model allows for these dispatches in case all BLS ambulances are busy).

The statistical analysis of the sample data for the simulation model used the best-fit probability distributions indicated by the Best-Fit software analyses. To illustrate, the random distributions obtained by the Best-Fit for the input related to the interval between the arrival of calls (separately for class a, b and c calls) in each region are shown in Table 5, and the respective distributions of service times for combinations of ambulance/user class/atoms are shown in Table 6.
                        Nevertheless, for some of the inputs described above, the number of observations in the sample data is insufficient to describe a known probability distribution (mostly, less than six observations, as shown for example in Table 3). In those cases, the simulation model uses an empirical distribution (see e.g.,Arena, 2012
 and
Law & Kelton, 1991
                        
) or the mean interval between arrivals based on the few observations.

Regarding the settings of the simulation run, the transient period (warm up) assuming continuous simulation was determined by the graphical analysis of the moving average of the results during a long simulation run. For more details of this procedure, the reader is referred to Banks (1998) and Kelton, Sadowski, and Sadowski (2002). In this case study simulation, the warm-up time was 3000 hours. Other statistical tools from Arena software were applied to determine the simulation run-length period (more details of this procedure can also be found in Kelton et al., 2002). Following this procedure, the simulation run was more than 90,000 hours (more than 10 years). In the tables below, all figures in the columns under the heading “Simulation” were derived from the simulation model with the relaxations listed above, and the best-fitting probabilistic distributions and respective parameters are: Lognormal (lognormal mean,
 log standard deviation); Exponential (mean); Erlang (exponential mean, shape parameter); Gamma (shape parameter, scale parameter).

The hypercube model results of the state probabilities showed that the probability the system stays with all ambulances available (P
                     0000000000), with all of them busy (P
                     1111111111) and the queue probability (PQ
                     ) are relatively small. For example, by analyzing the afternoon period, P
                     0000000000, P
                     1111111111 and PQ
                      are less than 0.01 and the mean system waiting time (Wq
                     ) is less than 0.1 minutes. Table 7 presents the results of the ambulances’ workloads obtained by the model for the three periods analyzed, where ambulance 1 corresponds to the ALS ambulance and ambulances 2–10 are BLS ambulances. For example, workload ρi
                      is calculated by the model taking the sum of probabilities for all states where server i is busy, that is: 
                        
                           
                              ρ
                              i
                           
                           =
                           
                              ∑
                              
                                 B
                                 ∈
                                 
                                    C
                                    i
                                 
                              
                           
                           
                              P
                              B
                           
                           +
                           
                              P
                              Q
                           
                        
                     , where Ci
                      corresponds to the set of states of the hypercube where server i is busy, and PQ
                      is the queue probability. We compared the model outputs with the simulation outputs, when applied to the afternoon period (which corresponds to the largest sample data).

Note in Table 7 that the relative deviations obtained by comparing the hypercube model with the simulation results were relatively small for the BLS ambulances (the relative deviation is on average 0.057). Conversely, the relative deviation considering the ALS ambulances is significant (0.43), but this result could be explained by the small size of the sample data concerning the operation of this ambulance (sample with only five observations for the period analyzed). The total relative deviation (considering all ambulances) is not significant (only 0.01 on average). Observe that, in general, the ambulance workloads in the morning are higher than in the afternoon. Even though the arrival rates in the afternoon are higher than in the morning, the mean service time of ambulances are shorter during the afternoon (as discussed in Section 4), resulting in lower utilization rates of ambulances during this period. During the night period, the system utilization is even lower than the morning and afternoon, and the queue probability is less than 10−4. For example, the average workload for ALS and BLS ambulances are around 2 percent
 and 20 percent
, respectively. In general, the system queue probability and the mean waiting time are relatively diminutive for the three periods, indicating that the response time is close to the travel time (from the ambulance base to the call location).
                  


                     Table 8 presents the results of the mean travel time for each sub-atom (in minutes) during the afternoon period obtained by the hypercube, the simulation model and the sample data collected in the system. Note that, in general, the results obtained by the hypercube are reasonably close to the ones of simulation and the sample data. These results show that the hypercube model's assumptions, relaxed in the simulation model (see Section 4), do not correspond to significant constraints for an effective application of the model for this case study. More details related to the evaluation of these and other performance measures analyzing the different periods of the day can be found in Souza (2010).

We also evaluated some queue statistics by using the hypercube model and simulation as described in Section 3. The mean waiting times for the three periods analyzed are relatively small, as well as the loss probabilities. For example, taking the results for the afternoon period, the mean waiting time obtained by the hypercube was 0.0205 and by simulation was 0.03 minutes. However, we could not compare the queue outputs obtained by both models with the sample data or other empirical analysis, as the managers of SAMU did not have recorded queue statistics available of the real operation (e.g., calls waiting time in queue).

We applied the hypercube model to investigate the impact of increasing the demand of the morning period (based on the original scenario) in the SAMU case study. All the other parameters described above remained the same, such as the number of ambulances (N = 10), queue capacity (L = 5) and priority classes (r = 3). In particular, we evaluated two conflicting performance measures: the mean waiting time in queue (i.e., an external measure important for the system user) and the ambulances’ workloads (an internal measure of interest to the system manager). Table 9 shows the impacts on the workload results by increasing the demand, and consequently the congestion level ρ = λ/μ. Note that, the average utilization of ambulances varies from 0.46 (when the demand increases by 10 percent
) to 0.90 (when the demand increases by 150 percent
). The results for the mean waiting time in the queue when the demand increases from 10 percent
 to 150 percent
 are presented in Table 10
                        . Note that the mean waiting time in the queue increases significantly when compared to the original scenario (analyzing the morning period). Taking, for example, the hypercube results for the scenario with 150 percent
 increase in demand, we obtain P
                        0000000000 < 10−4, P
                        1111111111 = 
0.1038; the loss probability is 0.1083 and the queue probability (PQ
                        ) is 0.5328.

Observe that by applying the priority hypercube queuing model to a higher congested system (or higher ρ), the differences to the mean waiting time among the diverse user classes can be significant. For example, taking the scenario assuming 150 percent
 in demand increase, the mean waiting time of class a is about 44.8 percent
 and 80.2 percent
 lower than the waiting time of classes b and c, respectively, and 64.8 percent
 lower than the mean waiting time overall calls (9.1 minutes). The model could be easily adapted to investigate other alternative and interesting scenarios, such as the reduction in the number of operating ambulances, a fourth class of users (e.g., transfer of patients), modifications to the location and distribution of ambulances, modification on demand zones, or a combination of two or more of these scenarios.

We also conducted experiments by applying the hypercube model using layering with the FCFS discipline (as described in Section 2) in order to evaluate the effects and benefits of using the extended hypercube with queue priority discipline to estimate the queue statistics. By this analysis, we can estimate the system congestion value ρ, from which we start to observe significant benefits of using the priority queue hypercube model as congestion increases. For example, the system congestion of the SAMU case study above is only ρ = 0.34 and the mean waiting time in the queue is less than 0.02 minutes. In this case, we observed minor differences between the results obtained by both models. However, when the system utilization goes beyond 50 percent
, the differences between the models start to be significant in terms of the mean waiting time for different priority classes. We found that by using the layering approach, the mean queue waiting time for class a and b users may be overestimated, while for class c this measure is underestimated. Thus, the extended hypercube model with priority disciplines can be an interesting alternative to analyze systems with higher utilization values, and consequently a larger number of users in the queue. More details of these analyses can be found in Souza, Morabito, Chiyoshi, and Iannoni (2013).

@&#CONCLUSIONS@&#

In this study, we extended the hypercube queuing model to analyze urban EMS, incorporating different priority classes of users in the system queue. In these systems, emergency calls can have different priorities for service according to the seriousness involved. We presented this extension explicitly studying priority policies to users in the waiting line; in particular by modifications in the equilibrium equations related to the queue states. Furthermore, we showed that the extended model can effectively evaluate important performance measures to the system, with special concern to the mean travel time and mean waiting time for different classes of users, calculated individually. The model was applied to a case study of a SAMU system in Brazil, analyzing three different periods of the day, separately. In order to verify the computational effectiveness and applicability of the extended hypercube model regarding some assumptions required, we also compared the model results with the sample data and the results of a simulation model where these simplifying assumptions were relaxed.

An interesting line of research would be to extend the hypercube queuing model to deal with the re-dispatching of ambulances, when after completing medical assistance, the ambulance is assumed available to be re-dispatched to other arriving calls during its trip back to the base. The present extended hypercube model could also be adapted to study systems with dispatching policies involving partial backup, when only some of the system ambulances can be sent to a given call. Another interesting topic for future research would be to study districting problems to subdivide the whole region into smaller and less populated sub-regions (atoms) in order to obtain more precise system performance evaluations. This model could also support decisions related to the locations of ambulances’ bases and their respective response (coverage) areas.

The authors would like to thank the anonymous referees for their useful comments and suggestions, the SAMU system for its collaboration with this research and CNPq and FAPESP
 for their financial support.

In this appendix, we briefly describe the computational pseudo-code used to generate the queue states for the system with r classes of users and queue capacity of L users. Each user in the queue generates a level of possible states, and the notation “//” corresponds to program comments.

                        
                           r
                        
                        
                           number of priority classes;

queue capacity;

notation of priority class k in lexicographic order;

number of states in queue of j calls;

state j of the queue with i calls;

Procedure to generate the queue states:

{for i = 1 to r do


                     e(1, i) = c(i) // the states on the first level of the queue are the classes of users represented by notation {c(i)}//

for i = 2 to L do // the following procedure is repeated for each level of the queue//


                     u = 0

for j = 1 to r do;

for k = 1 to n(i – 1) do // the states of level i are generated from the states of the immediately preceding level, listed in lexicography order //

if c(j) <= e(i – 1, k) // the following procedure is accomplished only if the immediate preceding level only has users of priority higher or equal to c(j)//


                     u = u + 1 // position of a state in level i //


                     e(i, u) = c(j) + e(i – 1, j) } // the user of class j is set on the left of the preceding level (i – 1)//

The following code generates the transition rates that the system enters in a given state n . Given:

                        
                           n(k)
                        
                           the number of states in the last layer of the queue;

the total number of queue states until the last layer;

the vectors (string) of the possible states of the queue


                     L1 and L2 the size of vectors S1 and S2 (number of users in queue), respectively

                        
                           InOut:
                        
                        
                           store the information if users have entered or left the queue using the signals + and –, respectively.

the state with the biggest number of users.

the state with the smallest number of users.

a vector obtained by the difference between the biggest and the smallest state (by comparing S1 and S2), the rest of this subtraction corresponds to a user entering or leaving the system (always one user).

for i = 1 to nt do

for j = 1 to nt do // procedure to generate a matrix (matrix of strings) with the number of rows and columns equal to the total number of queue states until the last layer //

{ L1 = Length(S(i)) // compute the quantity of users waiting in queue in state {S(i)}//


                     L2 = Length(S(j)) // compute the quantity of users waiting in queue in state {S(j)} //

if |L1–L2| <> 1 //the following procedure is accomplished only if the difference (in module) of the number of users in queue between the two states is different to 1//


                     mat(i, j) = empty

GoTo End

if L1 > L2 //If the state S(i) has one user more than state S(j), then //


                     InOut = + // the signal “+” indicates that a user entered in queue //


                     Bigger = S(i) //the state with more users is S(i) //


                     Smaller = S(j) //the state with less users is S(j) //

Else // If the state S(i) has one user less than state S(j), then //

InOut = − // the signal “−” indicates that a user left the queue //


                     Bigger = S(j) // the state with more users is S(j) //


                     Smaller = S(i) // the state with less users is S(i) //


                     user = Bigger − Smaller //this procedure indicates the different of vectors, in the way that, all users that are at the same time in both states are removed from the biggest state of the queue //

if Length(user) <> 1 //if the difference is more than one user, then //


                     mat(i, j) = empty

GoTo End

if (InOut = −) and (user > Bigger) //if a user leaves the queue (signal −) and the user from the difference of strings is bigger than the biggest state of queue (this procedure assures that a user with lower priority cannot be serviced before a user with higher priority), then//


                     mat(i, j) = empty

GoTo End
                  


                     mat(i, j) = InOut + user //the matrix element in row i and column j is the signal (+ or −, indicating if a user entered or left the queue, respectively) + the user that remains from the subtraction of strings //


                     End}
                  

The system leaves state n when a call arrives with arrival rate λ (for states that correspond to the maximum capacity of the queue), or when a service is completed with service rate µ. The rate that the system leaves state n is set on the diagonal of the coefficient matrix of the equilibrium equations. The following procedure is done for the matrix diagonal:

(Procedure to generate the transition rates the system leaves state n).

{j = nt – n(k) //number of states that are not in the last level of the queue//

for i = 1 to nt do //the procedure is repeated for all states of the queue //

if i <= j //if the states of the queue are not from the last level of the queue, then //


                     mat(i, i) = −(totLamb + mu)

else


                     mat(i, i) = mu}

@&#REFERENCES@&#

