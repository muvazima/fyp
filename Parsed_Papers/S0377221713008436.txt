@&#MAIN-TITLE@&#An aggressive reduction scheme for the simple plant location problem

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           The simple plant location problem is a classical problem in OR.


                        
                        
                           
                           We present an aggressive reduction scheme for it.


                        
                        
                           
                           The reduction procedures are based on optimality arguments and linear programming.


                        
                        
                           
                           Typically over 98% of the variables are eliminated.


                        
                        
                           
                           This enables larger instances than ever before to be solved to proven optimality.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Facility location

Combinatorial optimization

Integer programming

@&#ABSTRACT@&#


               
               
                  Pisinger et al. introduced the concept of ‘aggressive reduction’ for large-scale combinatorial optimization problems. The idea is to spend much time and effort in reducing the size of the instance, in the hope that the reduced instance will then be small enough to be solved by an exact algorithm.
                  We present an aggressive reduction scheme for the ‘Simple Plant Location Problem’, which is a classical problem arising in logistics. The scheme involves four different reduction rules, along with lower- and upper-bounding procedures. The scheme turns out to be particularly effective for instances in which the facilities and clients correspond to points on the Euclidean plane.
               
            

@&#INTRODUCTION@&#

The Simple Plant Location Problem (SPLP), sometimes called the Uncapacitated Facility Location Problem or Uncapacitated Warehouse Location Problem, is a fundamental and much-studied problem in the Operational Research literature. A formal definition is as follows. We are given a set I of facilities and a set J of clients. For any i
                     ∈
                     I, the fixed cost of opening facility i is f
                     
                        i
                     . For any i
                     ∈
                     I and any j
                     ∈
                     J, the cost of serving client j from facility i is c
                     
                        ij
                     . The goal is to decide which facilities to open, and to assign each client to an open facility, at minimum cost.

An excellent survey of the early work on the SPLP is given by Krarup and Pruzan (1983). In that survey, it is also formally proven that the SPLP is NP-hard, by reduction from the Set Covering Problem. More recent surveys on theory, algorithms and applications include Cornuéjols, Nemhauser, and Wolsey (1990), Labbé and Louveaux (1997), Labbé, Peeters, and Thisse (1995) and Verter (2011).

Some instances of the SPLP arising in practice have hundreds or even thousands of clients. Moreover, instances with large numbers of facilities and clients arise if one takes a continuous location problem and then ‘discretises’ it, by modeling continuous regions (approximately) as sets of discrete points. This led us, in our former paper (Letchford & Miller, 2012), to devise fast heuristics and bounding procedures for large-scale instances. In this paper, we move on to consider how to solve such instances to proven optimality (or near-optimality).


                     Pisinger, Rasmussen, and Sandvik (2007) introduced the concept of ‘aggressive reduction’ for large-scale combinatorial optimization problems. The idea is to spend much time and effort in reducing the size of the instance, using a suitable collection of variable-elimination tests. The hope is that the reduced instance will then be small enough to be solved by an exact algorithm.

In this paper, we present an aggressive reduction scheme for the SPLP, which uses four different reduction procedures. The scheme turns out to be particularly effective when the facilities and clients correspond to points on the Euclidean plane, and the cost of assigning a client to a facility is proportional to the distance between them. Indeed, for this case, we are able to solve instances that are significantly larger than those previously solved in the literature.

The structure of the paper is as follows. Section 2 is a brief literature review. In Section 3, we present two reduction procedures that are ‘bound free’, in the sense that no lower or upper bound is needed to apply them. In Section 4, we present some simple lower- and upper-bounding procedures, based on linear programming (LP). In Section 5, we present two more reduction procedures, that use the bounds in combination with LP duality. Extensive computational results are given in Section 6, and concluding remarks are given in Section 7.

We assume throughout the paper that the f
                     
                        i
                      and c
                     
                        ij
                      are positive integers. We also let m denote the number of facilities and n the number of clients.

@&#LITERATURE REVIEW@&#

In this section, we review the main papers on relaxations, lower bounds, reduction rules and exact algorithms for the SPLP. There are also many papers on heuristics, meta-heuristics and approximation algorithms for the SPLP, but we do not cover them, for the sake of brevity. Instead, we refer the reader to the surveys mentioned in the introduction.

It is possible to formulate the SPLP as a 0–1 LP in several ways (see, e.g., Balinski, 1965; Cornuéjols, Nemhauser, & Wolsey, 1980; Efroymson & Ray, 1966; Krarup & Pruzan, 1983). The most commonly used formulation, due to Balinski (1965), is the following:
                           
                              (1)
                              
                                 
                                    min
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          I
                                       
                                    
                                 
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          I
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          J
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                              
                           
                        
                        
                           
                              (2)
                              
                                 s
                                 .
                                 t
                                 .
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          I
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 =
                                 1
                                 
                                 (
                                 ∀
                                 j
                                 ∈
                                 J
                                 )
                              
                           
                        
                        
                           
                              (3)
                              
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 -
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ⩾
                                 0
                                 
                                 (
                                 ∀
                                 i
                                 ∈
                                 I
                                 ,
                                 
                                 j
                                 ∈
                                 J
                                 )
                              
                           
                        
                        
                           
                              (4)
                              
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 (
                                 ∀
                                 i
                                 ∈
                                 I
                                 ,
                                 
                                 j
                                 ∈
                                 J
                                 )
                              
                           
                        
                        
                           
                              (5)
                              
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 ∈
                                 {
                                 0
                                 ,
                                 1
                                 }
                                 
                                 (
                                 ∀
                                 i
                                 ∈
                                 I
                                 )
                                 .
                              
                           
                        Here, x
                        
                           ij
                         indicates whether client j is assigned to facility i, and y
                        
                           i
                         indicates whether facility i is opened. The constraints (2) and (3) will be called assignment constraints and variable upper bounds (VUBs), respectively.

The LP relaxation is obtained by replacing the constraints (4), (5) with lower and upper bounds of 0 and 1, respectively. A key feature of this relaxation is that it typically gives a very good lower bound, and is often even integral (Ahn, Cooper, Cornuéjols, & Frieze, 1988; Efroymson & Ray, 1966; Morris, 1978; ReVelle, 1993). On the other hand, the presence of the VUBs makes the LP highly degenerate. Specialised primal simplex methods have been devised to cope with VUBs (Schrage, 1975; Todd, 1982), but they are not entirely satisfactory. For an alternative formulation of the SPLP as a set covering problem, see Cornuéjols et al. (1980).

In their seminal paper, Bilde and Krarup (1977) proposed to compute a lower bound by solving the dual of the LP approximately. The dual can be written, after some simplification, in the following form:
                           
                              (6)
                              
                                 
                                    max
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          J
                                       
                                    
                                 
                                 
                                    
                                       v
                                    
                                    
                                       j
                                    
                                 
                              
                           
                        
                        
                           
                              (7)
                              
                                 s
                                 .
                                 t
                                 .
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          J
                                       
                                    
                                 
                                 
                                    
                                       w
                                    
                                    
                                       ij
                                    
                                 
                                 ⩽
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 
                                 (
                                 ∀
                                 i
                                 ∈
                                 I
                                 )
                              
                           
                        
                        
                           
                              (8)
                              
                                 
                                    
                                       v
                                    
                                    
                                       j
                                    
                                 
                                 -
                                 
                                    
                                       w
                                    
                                    
                                       ij
                                    
                                 
                                 ⩽
                                 
                                    
                                       c
                                    
                                    
                                       ij
                                    
                                 
                                 
                                 (
                                 ∀
                                 i
                                 ∈
                                 I
                                 ,
                                 
                                 j
                                 ∈
                                 J
                                 )
                              
                           
                        
                        
                           
                              (9)
                              
                                 
                                    
                                       v
                                    
                                    
                                       j
                                    
                                 
                                 ⩾
                                 0
                                 
                                 (
                                 ∀
                                 j
                                 ∈
                                 J
                                 )
                              
                           
                        
                        
                           
                              (10)
                              
                                 
                                    
                                       w
                                    
                                    
                                       ij
                                    
                                 
                                 ⩾
                                 0
                                 
                                 (
                                 ∀
                                 i
                                 ∈
                                 I
                                 ,
                                 
                                 j
                                 ∈
                                 J
                                 )
                                 .
                              
                           
                        Here, the v
                        
                           j
                         and w
                        
                           ij
                         are the dual variables for the assignment constraints and VUBs, respectively. Now, observe that there always exists an optimal solution to the dual in which
                           
                              (11)
                              
                                 
                                    
                                       w
                                    
                                    
                                       ij
                                    
                                 
                                 =
                                 
                                    max
                                 
                                 {
                                 0
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       j
                                    
                                 
                                 -
                                 
                                    
                                       c
                                    
                                    
                                       ij
                                    
                                 
                                 }
                                 
                                 (
                                 ∀
                                 i
                                 ∈
                                 I
                                 ,
                                 
                                 j
                                 ∈
                                 J
                                 )
                                 .
                              
                           
                        This leads to the following so-called condensed dual:
                           
                              (12)
                              
                                 
                                    max
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          J
                                       
                                    
                                 
                                 
                                    
                                       v
                                    
                                    
                                       j
                                    
                                 
                              
                           
                        
                        
                           
                              (13)
                              
                                 s
                                 .
                                 t
                                 .
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          J
                                       
                                    
                                 
                                 
                                    max
                                 
                                 {
                                 0
                                 ,
                                 
                                    
                                       v
                                    
                                    
                                       j
                                    
                                 
                                 -
                                 
                                    
                                       c
                                    
                                    
                                       ij
                                    
                                 
                                 }
                                 ⩽
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 
                                 (
                                 ∀
                                 i
                                 ∈
                                 I
                                 )
                              
                           
                        
                        
                           
                              
                                 
                                    
                                       v
                                    
                                    
                                       j
                                    
                                 
                                 ⩾
                                 0
                                 
                                 (
                                 ∀
                                 j
                                 ∈
                                 J
                                 )
                                 .
                              
                           
                        Bilde and Krarup devised a fast heuristic, called dual ascent, for finding a good feasible solution to the condensed dual. The basic idea is to initialise the v
                        
                           j
                         at small values, and then repeatedly scan through the set of customers, increasing the dual values little by little until no more increase is possible.

In our own paper (Letchford & Miller, 2012), we showed that dual ascent runs in 
                           
                              O
                              (
                              
                                 
                                    m
                                 
                                 
                                    2
                                 
                              
                              n
                              )
                           
                         time. We described an improved version, which is faster in practice but has the same worst-case running time, along with a modified version which runs in only 
                           
                              O
                              (
                              mn
                              log
                              m
                              )
                           
                         time, yet still produces reasonably good lower bounds.


                        Erlenkotter (1978) proposed an effective iterative method, called ‘dual adjustment’, for improving the dual solution generated by dual ascent. Several enhancements were also proposed by Körkel (1989). More recently, Hansen, Brimberg, Urosevic, and Mladenovic (2007) presented a variable neighborhood search (VNS) heuristic for the condensed dual. For the sake of brevity, we do not go into details.

In Beasley (1993), Galvão and Raggi (1989), it was proposed to solve the dual approximately using Lagrangian relaxation, rather than dual ascent/adjustment. The assignment constraints (2) are relaxed, using a vector 
                           
                              λ
                              ∈
                              
                                 
                                    R
                                 
                                 
                                    n
                                 
                              
                           
                         of Lagrangian multipliers. The relaxed problem is then to minimize the Lagrangian
                           
                              
                                 F
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 λ
                                 )
                                 =
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          I
                                       
                                    
                                 
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          I
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          J
                                       
                                    
                                 
                                 (
                                 
                                    
                                       c
                                    
                                    
                                       ij
                                    
                                 
                                 -
                                 
                                    
                                       λ
                                    
                                    
                                       j
                                    
                                 
                                 )
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          J
                                       
                                    
                                 
                                 
                                    
                                       λ
                                    
                                    
                                       j
                                    
                                 
                                 ,
                              
                           
                        subject to (3)–(5). This relaxation can be solved quickly, by computing for each i
                        ∈
                        I the ‘Lagrangian reduced cost’:
                           
                              (14)
                              
                                 
                                    
                                       r
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 -
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          J
                                       
                                    
                                 
                                 
                                    max
                                 
                                 {
                                 0
                                 ,
                                 
                                    
                                       λ
                                    
                                    
                                       j
                                    
                                 
                                 -
                                 
                                    
                                       c
                                    
                                    
                                       ij
                                    
                                 
                                 }
                                 ,
                              
                           
                        and then opening all facilities for which r
                        
                           i
                         is negative. The corresponding lower bound is:
                           
                              (15)
                              
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          J
                                       
                                    
                                 
                                 
                                    
                                       λ
                                    
                                    
                                       j
                                    
                                 
                                 -
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          I
                                       
                                    
                                 
                                 
                                    max
                                 
                                 {
                                 0
                                 ,
                                 -
                                 
                                    
                                       r
                                    
                                    
                                       i
                                    
                                 
                                 }
                                 .
                              
                           
                        
                     

The problem of finding optimal Lagrangian multipliers, the so-called Lagrangian dual, takes the form:
                           
                              
                                 
                                    
                                       
                                          max
                                       
                                       
                                          λ
                                          ∈
                                          
                                             
                                                R
                                             
                                             
                                                n
                                             
                                          
                                       
                                    
                                 
                                 
                                    
                                       
                                          min
                                       
                                       
                                          (
                                          x
                                          ,
                                          y
                                          )
                                          ∈
                                          
                                             
                                                {
                                                0
                                                ,
                                                1
                                                }
                                             
                                             
                                                mn
                                                +
                                                m
                                             
                                          
                                       
                                    
                                 
                                 F
                                 (
                                 x
                                 ,
                                 y
                                 ,
                                 λ
                                 )
                                 .
                              
                           
                        This can be solved approximately using, for example, the subgradient method.

Very recently, Beltran-Royo, Vial, and Alonso-Ayuso (2012) applied to the SPLP a method called semi-Lagrangian relaxation. It gives tighter lower bounds, but at the cost of an increased running time.

By ‘problem reduction’, we mean permanently fixing variables to 0 or 1, without losing any optimal solutions.


                        Körkel (1989) showed how to apply problem reduction to the SPLP, within a dual ascent or dual adjustment context. Let 
                           
                              
                                 
                                    v
                                 
                                 
                                    ¯
                                 
                              
                              ∈
                              
                                 
                                    R
                                 
                                 
                                    n
                                 
                              
                           
                         denote a feasible solution to the condensed dual, let LB 
                           
                              =
                              
                                 
                                    ∑
                                 
                                 
                                    j
                                    ∈
                                    J
                                 
                              
                              
                                 
                                    
                                       
                                          v
                                       
                                       
                                          ¯
                                       
                                    
                                 
                                 
                                    j
                                 
                              
                           
                         denote the corresponding lower bound, let UB be any upper bound, and, for all i
                        ∈
                        I, define
                           
                              (16)
                              
                                 
                                    
                                       s
                                    
                                    
                                       i
                                    
                                 
                                 =
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 -
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          J
                                       
                                    
                                 
                                 
                                    max
                                 
                                 {
                                 0
                                 ,
                                 
                                    
                                       
                                          
                                             v
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       j
                                    
                                 
                                 -
                                 
                                    
                                       c
                                    
                                    
                                       ij
                                    
                                 
                                 }
                                 .
                              
                           
                        Then, just like r
                        
                           i
                         in the previous section, s
                        
                           i
                         can be viewed as an estimate of the reduced cost of y
                        
                           i
                         in the primal. So, for any i
                        ∈
                        I such that s
                        
                           i
                         exceeds UB−LB, the variable y
                        
                           i
                         can be permanently fixed to 0, along with x
                        
                           ij
                         for all j
                        ∈
                        J. Also, for any i
                        ∈
                        I and j
                        ∈
                        J such that
                           
                              
                                 
                                    
                                       s
                                    
                                    
                                       i
                                    
                                 
                                 +
                                 
                                    max
                                 
                                 {
                                 0
                                 ,
                                 
                                    
                                       c
                                    
                                    
                                       ij
                                    
                                 
                                 -
                                 
                                    
                                       
                                          
                                             v
                                          
                                          
                                             ¯
                                          
                                       
                                    
                                    
                                       j
                                    
                                 
                                 }
                                 >
                                 UB
                                 -
                                 LB
                                 ,
                              
                           
                        the variable x
                        
                           ij
                         can be permanently fixed to 0.


                        Beasley (1993) gave a slightly different problem reduction procedure, for use in a Lagrangian context. It uses the Lagrangian reduced costs r
                        
                           i
                         given in Eq. (14). Namely, if r
                        
                           i
                         is positive and LB+
                        r
                        
                           i
                        
                        >UB for any i, then y
                        
                           i
                         can be permanently fixed to 0 and, if r
                        
                           i
                         is negative and LB−
                        r
                        
                           i
                        
                        >UB for any i, then y
                        
                           i
                         can be permanently fixed to 1.

All of the exact algorithms of which we are aware are based on branch-and-bound. An early one of Efroymson and Ray (1966) used a 0–1 LP formulation that has a weak lower bound, but can be solved by inspection. The one of Bilde and Krarup (1977) derived lower bounds using dual ascent, and upper bounds by opening all facilities for which s
                        
                           i
                        
                        =0. The algorithm of Erlenkotter (1978) is similar, except that dual adjustment was used to improve the lower bounds. Further improvements to this scheme were made in Körkel (1989), and Van Roy and Erlenkotter (1982). These algorithms can solve instances with up to about 200 facilities and clients.


                        Beasley (1993) derived lower bounds using Lagrangian relaxation, and upper bounds by opening all facilities for which r
                        
                           i
                        
                        ⩽0. Galvão and Raggi (1989) presented a three-phase exact algorithm, using dual ascent, then Lagrangian relaxation, then branch-and-bound. (This approach can in fact be viewed as a rudimentary aggressive reduction scheme.) These algorithms can solve instances with up to a couple of hundred facilities and clients.

More recently, Hansen et al. (2007) presented a branch-and-bound algorithm based on both primal and dual VNS heuristics, and Beltran-Royo et al. (2012) devised one based on semi-Lagrangian relaxation. These algorithms can solve some instances with thousands of facilities and clients, but some instances with a few hundred facilities and clients remain a challenge.

In this section, we present our first two reduction procedures, which, as mentioned in the introduction, are ‘bound-free’. We remark that all of our procedures store the assignment costs c
                     
                        ij
                      in a particular format. Specifically, we store the following for each client j
                     ∈
                     J:
                        
                           1.
                           The ‘degree’ of the client, denoted by d(j), which is the number of variables x
                              
                                 ij
                               which have not yet been eliminated.

The set of the indices in I associated with those variables, which we denote by I(j).

A list of the associated c
                              
                                 ij
                               values.

Also, throughout the remainder of the paper, we let 
                        
                           
                              
                                 d
                              
                              
                                 ¯
                              
                           
                        
                      denote the current maximum client degree, and σ(d) denote the current sum of the degrees (which is equal to the number of x variables that still remain).

Our first bound-free reduction procedure is based on the following simple lemma:
                           Lemma 1
                           
                              For each client index j
                              ∈
                              J, define
                              
                                 
                                    
                                       
                                          
                                             Δ
                                          
                                          
                                             j
                                          
                                       
                                       =
                                       
                                          
                                             
                                                min
                                             
                                             
                                                i
                                                ∈
                                                I
                                             
                                          
                                       
                                       {
                                       
                                          
                                             c
                                          
                                          
                                             ij
                                          
                                       
                                       +
                                       
                                          
                                             f
                                          
                                          
                                             i
                                          
                                       
                                       }
                                       .
                                    
                                 
                              
                              One can then eliminate (i.e., permanently fix at zero) all variables x
                              
                                 ij
                               
                              for which c
                              
                                 ij
                              
                              ⩾
                              Δ
                              
                                 j
                              
                              , without losing at least one optimal solution.
                           

For a given j
                              ∈
                              J, let k
                              ∈
                              I be such that c
                              
                                 kj
                              
                              +
                              f
                              
                                 k
                              
                              =
                              Δ
                              
                                 j
                              . Now, suppose a feasible solution has x
                              
                                 ij
                               equal to 1 for some i
                              ∈
                              I⧹{k} such that c
                              
                                 ij
                              
                              ⩾
                              Δ
                              
                                 j
                              . Then one can obtain another feasible solution with no larger cost, by changing the value of x
                              
                                 ij
                               from 1 to 0, changing the value of x
                              
                                 kj
                               from 0 to 1, and setting y
                              
                                 k
                               to 1 (regardless of whether it was 0 or 1 before).□

The following lemma shows that one can apply this reduction rule efficiently:
                           Lemma 2
                           
                              One can eliminate variables in accordance with 
                              
                                 Lemma 1 
                              in 
                              
                                 
                                    O
                                    (
                                    mn
                                    )
                                 
                               
                              time.
                           

For a given j, one can compute Δ
                              
                                 j
                               in 
                                 
                                    O
                                    (
                                    m
                                    )
                                 
                               time. Once this is done, one can identify all i
                              ∈
                              I such that c
                              
                                 ij
                              
                              ⩾
                              Δ
                              
                                 j
                               in 
                                 
                                    O
                                    (
                                    m
                                    )
                                 
                               time. Repeating this for all j
                              ∈
                              J gives the desired running time.□

Although this reduction procedure is very simple, it performs remarkably well when the facility costs are small relative to the assignment costs (see Section 6). It also has the nice feature that it processes each client independently, and therefore needs only 
                           
                              O
                              (
                              m
                              )
                           
                         space.

Our second bound-free reduction procedure is based on the following theorem:
                           Theorem 1
                           
                              Let j
                              ∈
                              J and i
                              ∈
                              I(j) be fixed. Define the set:
                              
                                 
                                    
                                       
                                          
                                             I
                                          
                                          
                                             ∗
                                          
                                       
                                       (
                                       i
                                       ,
                                       j
                                       )
                                       =
                                       
                                          
                                             
                                                p
                                                ∈
                                                I
                                                (
                                                j
                                                )
                                                :
                                                
                                                
                                                   
                                                      c
                                                   
                                                   
                                                      pj
                                                   
                                                
                                                ⩾
                                                
                                                   
                                                      c
                                                   
                                                   
                                                      ij
                                                   
                                                
                                             
                                          
                                       
                                       .
                                    
                                 
                              
                              Also, for all q
                              ∈
                              J, define:
                              
                                 
                                    
                                       c
                                       (
                                       i
                                       ,
                                       j
                                       ,
                                       q
                                       )
                                       =
                                       
                                          
                                             
                                                min
                                             
                                             
                                                p
                                                ∈
                                                
                                                   
                                                      I
                                                   
                                                   
                                                      ∗
                                                   
                                                
                                                (
                                                i
                                                ,
                                                j
                                                )
                                                ∩
                                                I
                                                (
                                                q
                                                )
                                             
                                          
                                       
                                       {
                                       
                                          
                                             c
                                          
                                          
                                             pq
                                          
                                       
                                       }
                                       .
                                    
                                 
                              
                              (If I
                              ∗
                              (i, j)
                              ∩
                              I(q)
                              
                              =
                              ∅ for some q, then just set c(i, j, q) to infinity.) Then, if there exists some facility p
                              ∈
                              I⧹I
                              ∗
                              (i, j) such that:
                              
                                 
                                    (17)
                                    
                                       
                                          
                                             f
                                          
                                          
                                             p
                                          
                                       
                                       ⩽
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                q
                                                ∈
                                                J
                                                :
                                                
                                                p
                                                ∈
                                                I
                                                (
                                                q
                                                )
                                             
                                          
                                       
                                       
                                          max
                                       
                                       
                                          
                                             
                                                0
                                                ,
                                                c
                                                (
                                                i
                                                ,
                                                j
                                                ,
                                                q
                                                )
                                                -
                                                
                                                   
                                                      c
                                                   
                                                   
                                                      pq
                                                   
                                                
                                             
                                          
                                       
                                       ,
                                    
                                 
                              
                              then one can eliminate all variables x
                              
                                 kj
                               
                              for which k
                              ∈
                              I
                              ∗
                              (i, j), without losing at least one optimal solution.
                           

Suppose that, in an optimal solution, x
                              
                                 kj
                              
                              =1 for some k
                              ∈
                              I
                              ∗(i, j). Then, all facilities in I(j)⧹I
                              ∗(i, j) must be closed, since, otherwise, client j could have been assigned to a nearer open facility. So, every client q
                              ∈
                              J, including j itself, must be assigned to a nearest open facility in I
                              ∗(i, j). The cost of assigning a client q to a facility in I
                              ∗(i, j) is at least c(i, j, q). Now, suppose that the specified facility p exists. Consider what would happen if the optimal solution was modified by opening facility p, and then re-assigning to facility p every client for which c(i, j, q)>
                              c
                              
                                 pq
                              . The cost incurred by opening facility p would be f
                              
                                 p
                              , whereas the total cost saved by the re-assignment would be no smaller than the right-hand side of (17). Therefore, the new solution would be no more expensive than the original solution. Since the original solution was optimal by assumption, the new one must be too. Therefore there exists an optimal solution such that x
                              
                                 kj
                              
                              =0 for all k
                              ∈
                              I
                              ∗(i, j).

The following lemma gives a bound on the running time needed to put Theorem 1 into practice.
                           Lemma 3
                           
                              For a fixed j
                              ∈
                              J, one can find in 
                              
                                 
                                    O
                                    (
                                    σ
                                    (
                                    d
                                    )
                                    log
                                    m
                                    )
                                 
                               
                              time the location i
                              ∈
                              I(j) that is closest to j, among all locations for which a facility p satisfying 
                              
                                 (17)
                               
                              exists.
                           

First, suppose that i is fixed. One can compute I
                              ∗(i, j) in 
                                 
                                    O
                                    (
                                    m
                                    )
                                 
                               time. Then, one can compute the c(i, j, q) for all q in 
                                 
                                    O
                                    (
                                    σ
                                    (
                                    d
                                    )
                                    )
                                 
                               time. After that, one compute the right-hand side of (17) for all p in 
                                 
                                    O
                                    (
                                    σ
                                    (
                                    d
                                    )
                                    )
                                 
                               time. Note that 
                                 
                                    m
                                    =
                                    O
                                    (
                                    σ
                                    (
                                    d
                                    )
                                    )
                                 
                              . So, for fixed i, one can check in 
                                 
                                    O
                                    (
                                    σ
                                    (
                                    d
                                    )
                                    )
                                 
                               time whether a facility p exists satisfying (17). Let us call this entire 
                                 
                                    O
                                    (
                                    σ
                                    (
                                    d
                                    )
                                    )
                                 
                              -time procedure an ‘i-check’.

Now, using any of several standard sorting algorithms, one can sort the facilities in non-decreasing order of distance from j in 
                                 
                                    O
                                    (
                                    m
                                    log
                                    m
                                    )
                                 
                               time. Using binary search, one can then find the desired location i by performing 
                                 
                                    O
                                    (
                                    m
                                    )
                                 
                               
                              i-checks. The time taken to perform these i-checks is 
                                 
                                    O
                                    (
                                    σ
                                    (
                                    d
                                    )
                                    log
                                    m
                                    )
                                 
                              . This dominates the time taken to sort the facilities.□

The second reduction procedure, then, consists of doing the above for each client j
                        ∈
                        J. The total time taken by the procedure is 
                           
                              O
                              (
                              σ
                              (
                              d
                              )
                              n
                              log
                              m
                              )
                           
                        . Although this running time is rather high, we have found that it is well worth it, since it typically leads to well over 95% of the variables being eliminated (see Section 6). The space used is 
                           
                              O
                              (
                              σ
                              (
                              d
                              )
                              )
                           
                        .

After applying the bound-free reduction procedures, the next step in our aggressive reduction scheme is to compute lower and upper bounds. This is explained in the following two sections.

As mention in Section 2, the lower bound obtained by solving the LP relaxation of the 0–1 LP is typically strong, but solving the LP exactly is time-consuming, due to its large size and its degeneracy. For this reason, we expected that it would be necessary to use dual ascent/adjustment or Lagrangian relaxation to compute lower bounds. It turns out, however, that our bound-free reduction procedures are so effective at eliminating x variables, that the LP relaxation of the reduced problem can usually be solved in reasonable times with the simplex method.

Recall that I(j) denotes the set of locations such that the variable x
                        
                           ij
                         has not yet been eliminated. The LP that we solve is the following:
                           
                              (18)
                              
                                 
                                    min
                                 
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          I
                                       
                                    
                                 
                                 
                                    
                                       f
                                    
                                    
                                       i
                                    
                                 
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 +
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          j
                                          ∈
                                          J
                                       
                                    
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          I
                                          (
                                          j
                                          )
                                       
                                    
                                 
                                 
                                    
                                       c
                                    
                                    
                                       ij
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                              
                           
                        
                        
                           
                              (19)
                              
                                 s
                                 .
                                 t
                                 .
                                 
                                 
                                    
                                       
                                          ∑
                                       
                                       
                                          i
                                          ∈
                                          I
                                          (
                                          j
                                          )
                                       
                                    
                                 
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ⩾
                                 1
                                 
                                 (
                                 ∀
                                 j
                                 ∈
                                 J
                                 )
                              
                           
                        
                        
                           
                              (20)
                              
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 -
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ⩾
                                 0
                                 
                                 (
                                 ∀
                                 j
                                 ∈
                                 J
                                 ,
                                 
                                 i
                                 ∈
                                 I
                                 (
                                 j
                                 )
                                 )
                              
                           
                        
                        
                           
                              (21)
                              
                                 
                                    
                                       x
                                    
                                    
                                       ij
                                    
                                 
                                 ⩾
                                 0
                                 
                                 (
                                 ∀
                                 j
                                 ∈
                                 J
                                 ,
                                 
                                 i
                                 ∈
                                 I
                                 (
                                 j
                                 )
                                 )
                              
                           
                        
                        
                           
                              (22)
                              
                                 
                                    
                                       y
                                    
                                    
                                       i
                                    
                                 
                                 ⩾
                                 0
                                 
                                 (
                                 ∀
                                 i
                                 ∈
                                 I
                                 )
                                 .
                              
                           
                        Note that this LP has 
                           
                              O
                              (
                              σ
                              (
                              d
                              )
                              )
                           
                         variables and constraints. Note also that the assignment constraints have been changed from equations to inequalities, and we do not include explicit upper bounds of 1 on the variables. This has no effect on the lower bound, but it reduces the size of the LP, and also ensures that the dual of the LP is in the same form as (6)–(10).

We found that, in practice, the dual simplex method solves the LP relaxation more quickly than the primal simplex method. This is probably because setting all variables to zero immediately yields a dual feasible solution, whereas one would have to use artificial variables to find a primal feasible solution.

We denote by (x
                        ∗, y
                        ∗) the optimal primal solution, and (v
                        ∗, w
                        ∗) the optimal dual solution. For reasons which will become clear in the Section 5, we will need access to (v
                        ∗, w
                        ∗) in our final two reduction procedures. Note however that, given v
                        ∗, one can re-construct w
                        ∗ using the identity (11) for all j
                        ∈
                        J and i
                        ∈
                        I(j). Therefore it suffices to store only v
                        ∗ in memory. This is useful because storing v
                        ∗ takes up only 
                           
                              O
                              (
                              n
                              )
                           
                         space, whereas storing w
                        ∗ would take 
                           
                              O
                              (
                              σ
                              (
                              d
                              )
                              )
                           
                         space.

In practice, the lower bound obtained from the LP is usually extremely strong. In fact, typically it is within 0.02% of optimal; see Section 6.

Since the lower bound from the LP is typically very strong, it seems plausible that the optimal solution to the LP relaxation could have some useful information that could be exploited in a heuristic. This was the motivation for our two procedures for producing upper bounds.

The first heuristic is a modified version of the classical ‘drop’ heuristic of Feldman, Lehrer, and Ray (1966). In our version, all facilities with positive y
                        ∗ values are opened initially, but then facilities that have small y
                        ∗ values are the first to be considered for closure. In each iteration, we compute for suitable clients j the quantity δ
                        
                           j
                        , that represents the change in the cost that would occur if client j were re-assigned to the second nearest open facility. The heuristic is as follows:
                           
                              
                                 
                                 
                                    
                                       Let 
                                             
                                                
                                                   
                                                      I
                                                   
                                                   
                                                      +
                                                   
                                                
                                                =
                                                
                                                   
                                                      
                                                         i
                                                         ∈
                                                         I
                                                         :
                                                         
                                                         
                                                            
                                                               y
                                                            
                                                            
                                                               i
                                                            
                                                            
                                                               ∗
                                                            
                                                         
                                                         >
                                                         0
                                                      
                                                   
                                                
                                             
                                          .
                                    
                                    
                                       Sort the facilities in I
                                          + in non-decreasing order of y
                                          ∗ value.
                                    
                                    
                                       Store the sorted facility indices in a list L.
                                    
                                    
                                       Temporarily open all facilities in I
                                          +.
                                    
                                    
                                       For each client j
                                          ∈
                                          J:
                                    
                                    
                                       
                                          Temporarily assign j to the nearest facility in I
                                          +
                                          ∩
                                          I(j).
                                    
                                    
                                       For each facility i in L do:
                                    
                                    
                                       
                                           Let S be the set of clients currently assigned to i.
                                    
                                    
                                       
                                           For each j
                                          ∈
                                          S do:
                                    
                                    
                                       
                                           Let T
                                          = (I
                                          +
                                          ∩
                                          I(j))⧹{i}.
                                    
                                    
                                       
                                           If T
                                          =∅, then set δ
                                          
                                             j
                                           to infinity.
                                    
                                    
                                       
                                           Otherwise, set δ
                                          
                                             j
                                           to min
                                             k∈T
                                          
                                          c
                                          
                                             kj
                                          
                                          −
                                          c
                                          
                                             ij
                                          .
                                    
                                    
                                       
                                           If 
                                             
                                                
                                                   
                                                      f
                                                   
                                                   
                                                      i
                                                   
                                                
                                                ⩾
                                                
                                                   
                                                      ∑
                                                   
                                                   
                                                      j
                                                      ∈
                                                      S
                                                   
                                                
                                                
                                                   
                                                      δ
                                                   
                                                   
                                                      j
                                                   
                                                
                                             
                                          , then close facility i.
                                    
                                    
                                       Output the cost of the resulting solution.
                                    
                                 
                              
                           
                        
                     

If implemented in a naive way, this first heuristic takes 
                           
                              O
                              (
                              σ
                              (
                              d
                              )
                              m
                              )
                           
                         time and 
                           
                              O
                              (
                              σ
                              (
                              d
                              )
                              )
                           
                         space. Using an appropriate data structure, however, it can be implemented to run in only 
                           
                              O
                              (
                              σ
                              (
                              d
                              )
                              )
                           
                         time. The key is to keep, for each client, a pointer to the second-nearest open facility, and update it only when necessary. A similar data structure was used in our earlier paper (Letchford & Miller, 2012). We omit details, for brevity.

Our second heuristic, which is more time-consuming, uses LP. The idea is to iteratively round fractional y variables to 1, until a 0–1 solution is obtained:
                           
                              
                                 
                                 
                                    
                                       Let (x
                                          ∗, y
                                          ∗) be the optimal solution to the LP relaxation.
                                    
                                    
                                       Repeat:
                                    
                                    
                                       
                                           Let 
                                             
                                                F
                                                ≔
                                                {
                                                i
                                                ∈
                                                I
                                                :
                                                0
                                                <
                                                
                                                   
                                                      y
                                                   
                                                   
                                                      i
                                                   
                                                   
                                                      ∗
                                                   
                                                
                                                <
                                                1
                                                }
                                             
                                          .
                                    
                                    
                                       
                                           Let 
                                             
                                                k
                                                ≔
                                                arg
                                                max
                                                {
                                                
                                                   
                                                      y
                                                   
                                                   
                                                      i
                                                   
                                                   
                                                      ∗
                                                   
                                                
                                                :
                                                i
                                                ∈
                                                F
                                                }
                                             
                                          .
                                    
                                    
                                       
                                           Add the equation y
                                          
                                             k
                                          
                                          =1 to the LP.
                                    
                                    
                                       
                                           Re-optimize the LP via dual simplex.
                                    
                                    
                                       
                                           Update (x
                                          ∗, y
                                          ∗).
                                    
                                    
                                       Until y
                                          
                                             i
                                          
                                          ∈{0,1} for all i
                                          ∈
                                          I.
                                    
                                    
                                       Output the cost of the resulting solution.
                                    
                                 
                              
                           
                        
                     

Although this second heuristic involves the solution of 
                           
                              O
                              (
                              m
                              )
                           
                         LPs, in practice, the number of LPs solved is very small. Moreover, the number of dual simplex pivots needed to re-optimize the LP in each iteration is also typically very small.

We take the best of the upper bounds from the two heuristics as our definitive upper bound. In practice, this upper bound is usually extremely strong. As with the lower bound, it is typically within 0.02% of optimal; see Section 6.

In this section, we present our other two reduction procedures, which use the lower and upper bounds obtained with the procedures described in the previous section, together with certain information from the LP relaxation. Specifically, the first uses reduced costs, and the second uses shadow prices.

A standard procedure for eliminating variables in integer programming is reduced-cost fixing, due to Balas and Martin (1980). The basic idea is that, if an integer variable takes the value 0 in the LP solution, and its reduced cost exceeds the difference between the lower bound from the LP and the an upper bound, then that variable can be fixed at 0 permanently.

Observe that, in the case of the SPLP, forcing a variable x
                        
                           ij
                         to take the value 1 also forces the variable y
                        
                           i
                         to take the value 1. Using this fact, one can make reduced-cost fixing more powerful. This was shown already by Körkel (1989) in the context of dual ascent (Section 2.4), but we will prove it in the context of LP.

First, we show how to compute reduced costs efficiently:
                           Lemma 4
                           
                              Let 
                              
                                 
                                    
                                       
                                          v
                                       
                                       
                                          ∗
                                       
                                    
                                    ∈
                                    
                                       
                                          Q
                                       
                                       
                                          +
                                       
                                       
                                          n
                                       
                                    
                                 
                               
                              be the vector of optimal dual prices for the constraints 
                              
                                 (19)
                              
                              , that was obtained in Section 
                              4.1
                              . For any j
                              ∈
                              J and i
                              ∈
                              I(j), the reduced cost of x
                              
                                 ij
                               
                              is:
                              
                                 
                                    
                                       
                                          
                                             π
                                          
                                          
                                             ij
                                          
                                          
                                             ∗
                                          
                                       
                                       =
                                       
                                          max
                                       
                                       
                                          
                                             
                                                0
                                                ,
                                                
                                                   
                                                      c
                                                   
                                                   
                                                      ij
                                                   
                                                
                                                -
                                                
                                                   
                                                      v
                                                   
                                                   
                                                      j
                                                   
                                                   
                                                      ∗
                                                   
                                                
                                             
                                          
                                       
                                       ,
                                    
                                 
                              
                              and, for any i
                              ∈
                              I, the reduced cost of y
                              
                                 i
                               
                              is:
                              
                                 
                                    
                                       
                                          
                                             ρ
                                          
                                          
                                             i
                                          
                                          
                                             ∗
                                          
                                       
                                       =
                                       
                                          
                                             f
                                          
                                          
                                             i
                                          
                                       
                                       -
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                ∈
                                                J
                                                :
                                                
                                                i
                                                ∈
                                                I
                                                (
                                                j
                                                )
                                             
                                          
                                       
                                       
                                          max
                                       
                                       
                                          
                                             
                                                0
                                                ,
                                                
                                                   
                                                      v
                                                   
                                                   
                                                      j
                                                   
                                                   
                                                      ∗
                                                   
                                                
                                                -
                                                
                                                   
                                                      c
                                                   
                                                   
                                                      ij
                                                   
                                                
                                             
                                          
                                       
                                       .
                                    
                                 
                              
                           

From LP duality, the reduced cost of x
                              
                                 ij
                               will equal the slack of the corresponding constraint (8). That is, it will equal 
                                 
                                    
                                       
                                          c
                                       
                                       
                                          ij
                                       
                                    
                                    -
                                    
                                       
                                          v
                                       
                                       
                                          j
                                       
                                       
                                          ∗
                                       
                                    
                                    +
                                    
                                       
                                          w
                                       
                                       
                                          ij
                                       
                                       
                                          ∗
                                       
                                    
                                 
                              . Similarly, the reduced cost of y
                              
                                 i
                               will equal the slack of the corresponding constraint (7), but with the dual variables omitted for all VUBs whose x variables have already been eliminated. That is, it will equal
                                 
                                    
                                       
                                          
                                             f
                                          
                                          
                                             i
                                          
                                       
                                       -
                                       
                                          
                                             
                                                ∑
                                             
                                             
                                                j
                                                ∈
                                                J
                                                :
                                                
                                                i
                                                ∈
                                                I
                                                (
                                                j
                                                )
                                             
                                          
                                       
                                       
                                          
                                             w
                                          
                                          
                                             ij
                                          
                                          
                                             ∗
                                          
                                       
                                       .
                                    
                                 
                              Now, from (11), one can obtain an optimal dual vector 
                                 
                                    
                                       
                                          w
                                       
                                       
                                          ∗
                                       
                                    
                                    ∈
                                    
                                       
                                          Q
                                       
                                       
                                          +
                                       
                                       
                                          σ
                                          (
                                          d
                                          )
                                       
                                    
                                 
                               by setting 
                                 
                                    
                                       
                                          w
                                       
                                       
                                          ij
                                       
                                       
                                          ∗
                                       
                                    
                                 
                               to 
                                 
                                    max
                                    
                                       
                                          
                                             0
                                             ,
                                             
                                                
                                                   v
                                                
                                                
                                                   j
                                                
                                                
                                                   ∗
                                                
                                             
                                             -
                                             
                                                
                                                   c
                                                
                                                
                                                   ij
                                                
                                             
                                          
                                       
                                    
                                 
                               for all j
                              ∈
                              J and all i
                              ∈
                              I(j). The results then follow immediately.□

Now we present our strengthened version of reduced-cost fixing:
                           Proposition 1
                           
                              Let LB be the lower bound obtained by solving the LP 
                              (18)–(22)
                              , let UB be an upper bound, and let π
                              ∗ 
                              and ρ
                              ∗ 
                              be the vectors of reduced costs defined in 
                              
                                 Lemma 4
                              . If, for some j
                              ∈
                              J and i
                              ∈
                              I(j), we have
                              
                                 
                                    
                                       
                                          
                                             π
                                          
                                          
                                             ij
                                          
                                          
                                             ∗
                                          
                                       
                                       +
                                       
                                          
                                             ρ
                                          
                                          
                                             i
                                          
                                          
                                             ∗
                                          
                                       
                                       >
                                       UB
                                       -
                                       LB
                                       ,
                                    
                                 
                              
                              then we eliminate x
                              
                                 ij
                               
                              without losing any optimal solutions.
                           

We consider two cases. The first case is 
                                 
                                    
                                       
                                          ρ
                                       
                                       
                                          i
                                       
                                       
                                          ∗
                                       
                                    
                                    =
                                    0
                                 
                              . From the definition of reduced costs, if we forced x
                              
                                 ij
                               to take the value 1, the lower bound would increase by at least 
                                 
                                    
                                       
                                          π
                                       
                                       
                                          ij
                                       
                                       
                                          ∗
                                       
                                    
                                 
                              , and the result is immediate. The second case is 
                                 
                                    
                                       
                                          ρ
                                       
                                       
                                          i
                                       
                                       
                                          ∗
                                       
                                    
                                    >
                                    0
                                 
                              . In this case, we can obtain an alternative optimal dual solution by increasing the value of w
                              
                                 ij
                               by 
                                 
                                    
                                       
                                          ρ
                                       
                                       
                                          i
                                       
                                       
                                          ∗
                                       
                                    
                                 
                              . From Lemma 4, the effect of this change will be to cause the reduced cost of y
                              
                                 i
                               to drop from 
                                 
                                    
                                       
                                          ρ
                                       
                                       
                                          i
                                       
                                       
                                          ∗
                                       
                                    
                                 
                               to zero and the reduced cost of x
                              
                                 ij
                               to increase by 
                                 
                                    
                                       
                                          ρ
                                       
                                       
                                          i
                                       
                                       
                                          ∗
                                       
                                    
                                 
                              . We can then proceed as in the first case.□

Note that this third reduction procedure takes only 
                           
                              O
                              (
                              σ
                              (
                              d
                              )
                              )
                           
                         time. Moreover, the space complexity is only 
                           
                              O
                              (
                              n
                              )
                           
                        , since the only thing that needs to be stored in the computer’s memory throughout is the vector v
                        ∗. Nevertheless, the procedure is very powerful, and it seems to complement the bound-free reduction procedures nicely (see Section 6).

For the sake of completeness, we mention that an analog of Proposition 1 can be derived for use in the context of Lagrangian relaxation. Specifically, for a given vector 
                           
                              λ
                              ∈
                              
                                 
                                    R
                                 
                                 
                                    n
                                 
                              
                           
                         of Lagrangian multipliers, a given vector 
                           
                              r
                              ∈
                              
                                 
                                    R
                                 
                                 
                                    m
                                 
                              
                           
                         of Lagrangian reduced costs as defined in (14), a given lower bound LB as defined in (15), and an arbitrary upper bound UB, one can eliminate x
                        
                           ij
                         if
                           
                              
                                 
                                    max
                                 
                                 {
                                 0
                                 ,
                                 
                                    
                                       c
                                    
                                    
                                       ij
                                    
                                 
                                 -
                                 
                                    
                                       λ
                                    
                                    
                                       j
                                    
                                 
                                 }
                                 +
                                 
                                    max
                                 
                                 {
                                 0
                                 ,
                                 
                                    
                                       r
                                    
                                    
                                       i
                                    
                                 
                                 }
                                 >
                                 UB
                                 -
                                 LB
                                 .
                              
                           
                        We omit the (simple but tedious) proof for the sake of brevity.

Our final reduction procedure uses the dual prices for the VUBs (20) to replace x variables by y variables:
                           Proposition 2
                           
                              Let LB be the lower bound obtained by solving the LP 
                              (18)–(22)
                              , let UB be an upper bound, and let 
                              
                                 
                                    
                                       
                                          v
                                       
                                       
                                          ∗
                                       
                                    
                                    ∈
                                    
                                       
                                          Q
                                       
                                       
                                          +
                                       
                                       
                                          n
                                       
                                    
                                 
                               
                              be the vector of optimal dual prices for the constraints 
                              
                                 (19)
                              
                              , that was obtained in Section 
                              4.1
                              . If, for any j
                              ∈
                              J and i
                              ∈
                              I(j), we have
                              
                                 
                                    
                                       
                                          
                                             w
                                          
                                          
                                             ij
                                          
                                          
                                             ∗
                                          
                                       
                                       =
                                       
                                          max
                                       
                                       
                                          
                                             
                                                0
                                                ,
                                                
                                                   
                                                      v
                                                   
                                                   
                                                      j
                                                   
                                                   
                                                      ∗
                                                   
                                                
                                                -
                                                
                                                   
                                                      c
                                                   
                                                   
                                                      ij
                                                   
                                                
                                             
                                          
                                       
                                       >
                                       UB
                                       -
                                       LB
                                       ,
                                    
                                 
                              
                              then we can replace the variable x
                              
                                 ij
                               
                              with the variable y
                              
                                 i
                               
                              in the 0–1 LP, without losing any optimal solutions. (The variable x
                              
                                 ij
                              
                              , the VUB y
                              
                                 i
                              
                              −
                              x
                              
                                 ij
                              
                              ⩾
                              0, and the binary condition x
                              
                                 ij
                              
                              ∈{0,1} can then all be discarded.)
                           

By definition, 
                                 
                                    
                                       
                                          w
                                       
                                       
                                          ij
                                       
                                       
                                          ∗
                                       
                                    
                                 
                               is the dual price for the VUB y
                              
                                 i
                              
                              −
                              x
                              
                                 ij
                              
                              ⩾0. That means that, if the slack of the VUB in a feasible solution to the LP relaxation is equal to some ∊
                              >0, the cost of that LP solution must be at least 
                                 
                                    LB
                                    +
                                    ∊
                                    
                                       
                                          w
                                       
                                       
                                          ij
                                       
                                       
                                          ∗
                                       
                                    
                                 
                              . Moreover, the slack of the VUB in a 0–1 solution can only be either 0 or 1. So, if the stated condition holds, any solution for which the slack is 1 has a cost of at least 
                                 
                                    LB
                                    +
                                    
                                       
                                          w
                                       
                                       
                                          ij
                                       
                                       
                                          ∗
                                       
                                    
                                 
                              , and therefore cannot be optimal. It follows that the slack must be 0 in an optimal solution. This means in turn that x
                              
                                 ij
                               must equal y
                              
                                 i
                               in an optimal solution.□

This reduction procedure, like the one given in the previous section, takes only 
                           
                              O
                              (
                              σ
                              (
                              d
                              )
                              )
                           
                         time and 
                           
                              O
                              (
                              n
                              )
                           
                         space. It is worth noting that it works best when 
                           
                              
                                 
                                    v
                                 
                                 
                                    j
                                 
                                 
                                    ∗
                                 
                              
                           
                         is much larger than c
                        
                           ij
                        , whereas the one in the previous section works best when the reverse holds. In that sense, the two bound-based reduction procedures complement each other nicely.

Note that the 0–1 LP that results after the application of the last procedure is no longer of the form (1)–(5), because y variables now appear in the assignment constraints. For this reason, we do not store the reduced 0–1 LP using the data structure described at the start of Section 3. Instead, we simply store the final 0–1 LP in its entirety. This 0–1 LP can then be passed to a standard LP-based branch-and-bound solver, and solved to proven optimality. Once the optimal y vector is obtained, one can easily ‘reconstruct’ the optimal x vector, in 
                           
                              O
                              (
                              σ
                              (
                              d
                              )
                              )
                           
                         time, by simply assigning each client to its nearest open facility.

If the solver permits it, one can also pass the upper bound UB to it, and ask it to prune any branch-and-bound nodes whose lower bound exceeds UB. This typically leads to a reduction in the number of branch-and-bound nodes.

In this section we report the results of some computational experiments. Our four reduction procedures and three bounding procedures were coded in C, using Microsoft Visual Studio.Net 2008. We used routines from the Callable Library of IBM CPLEX version 12.1 to solve the LP relaxations and to run branch-and-bound. Specifically, the initial LP relaxation described in Section 4.1 was solved by dual simplex, the LPs were re-optimized using dual simplex in the iterated rounding heuristic described in Section 4.2, and the final reduced 0–1 LPs were solved with the mixed-integer optimizer. We used default parameter settings in all cases, with one exception: in the branch-and-bound phase, the precision was increased so that we were guaranteed to find the exact optimal value. The code was run on a 2.33GHz PC with 3.25Gb of RAM, operating under Windows XP.

When designing our aggressive reduction scheme, we had in mind mainly instances in which facilities and customers are located in the Euclidean plane. For this reason, the majority of our test instances were created according to the scheme used in Ahn et al. (1988) and Hansen et al. (2007). This involves setting m equal to n, setting each facility and customer location to a random point in the unit square, setting each assignment cost to the Euclidean distance between the corresponding points, and taking facility costs from a uniform distribution.

Since the current leading algorithm is the one in Hansen et al. (2007), we consider the same four options as they do for the facility costs:
                           
                              •
                              Small and constant: all facility costs set to 
                                    
                                       
                                          
                                             n
                                          
                                       
                                       /
                                       1000
                                    
                                 .

Medium and constant: all facility costs set to 
                                    
                                       
                                          
                                             n
                                          
                                       
                                       /
                                       100
                                    
                                 .

Large and constant: all facility costs set to 
                                    
                                       
                                          
                                             n
                                          
                                       
                                       /
                                       10
                                    
                                 .

Varied: facility costs uniformly distributed between 
                                    
                                       
                                          
                                             n
                                          
                                       
                                       /
                                       1000
                                    
                                  and 
                                    
                                       
                                          
                                             n
                                          
                                       
                                       /
                                       10
                                    
                                 .

To avoid problems with rounding errors, all costs were then multiplied by 5000 and rounded down to the nearest integer.

Results for the above four families of instances are reported in the following four sections. In Section 6.6, we report results for some other instances, taken from the literature.

We begin with the random instances with small and constant facility costs. In this case, we were able to solve instances with m
                        =
                        n up to 10000. Table 1
                         shows, for each problem size, the results obtained from the first three phases of our scheme. Specifically, for the first and second reduction procedures (Sections 3.1 and 3.1), the cumulative percentage of x variables eliminated and the running time in seconds is shown. For the bounding phase (Section 4), we report the gap between the lower and upper bounds and the optimum, expressed as a percentage of the optimum, along with the running time in seconds. The figures given in each row are the average over five random instances.

We see that the bound-free reduction procedures are extremely effective for these instances, typically eliminating over 99.7% of the variables. Moreover, the lower and upper bounds are of extremely good quality, being consistently within a fraction of a percent of optimal.


                        Table 2
                         shows, for each problem size, the results obtained from the last three phases of our scheme. For the third and fourth reduction procedures (Sections 5.1 and 5.2), we again show the cumulative percentage of x variables eliminated and the running time. For the branch-and-bound phase, we report the number of branch-and-bound nodes and the running time.

We see that, due to the good bounds, the last two reduction procedures eliminate a significant proportion of the variables that remained after the first two reduction procedures. This renders the reduced instance quite easy to solve by branch-and-bound. The running times of the last two reduction procedures are negligible, and the times taken by branch-and-bound are reasonable, especially if one considers the huge size of the original instances. (Note that an instance with m
                        =
                        n
                        =10,000 has over one hundred million variables.).

We remark that the previous best algorithm for these instances, due to Hansen et al. (2007), runs into difficulties when n reaches 7000 or so. Given the exponential growth in running times exhibited by exact algorithms for the SPLP, we believe that our approach is genuinely superior to theirs, rather than being merely due to using a slightly faster machine. Moreover, the only thing preventing us from solving larger instances in this class was the memory available on the machine.

Next, we consider the instances with medium and constant facility costs. Since these instances were harder, we were able to solve only instances with m
                        =
                        n up to 4000. The results are shown in Tables 3 and 4
                        
                        . Again, each figure is the average over five instances.

In this case, the first reduction procedure is significantly less effective than before, particularly for the larger instances. (The explanation is that, as the facility costs increase, the quantities Δ
                        
                           j
                         increase as well, which makes it less likely that any given assignment cost c
                        
                           ij
                         will be larger than Δ
                        
                           j
                        .) The other reduction procedures, and the bounding procedures, are slightly less effective as well.

Nevertheless, we believe that, on the whole, these results are very encouraging. Indeed, for instances in this class, Hansen et al. (2007) were able to solve only instances with m
                        =
                        n
                        ⩽3000. For us, the bottleneck was the memory limit in the LP solver in our version of CPLEX, which could cope only with two million variables.

Next, we consider the instances with large and constant facility costs. These instances were harder still, and we were able to solve only instances with m
                        =
                        n up to 1750. The results are shown in Tables 5 and 6
                        
                        .

We see that, for these instances, the first reduction procedure failed to eliminate any variables at all. The other reduction procedures, and the bounding procedures, show some deterioration as well. Nevertheless, these results are again very good. For comparison, for instances in this class, Hansen et al. (2007) were able to solve only instances with m
                        =
                        n
                        ⩽1400. Again, for us, the bottleneck was the LP solver.

Next, we consider the instances with varied facility costs. These instances turned out to be very easy, and we were able to solve instances with m
                        =
                        n up to 18000. The results are in Tables 7 and 8
                        
                        .

We see that all reduction procedures work extremely well for these instances. An intuitive explanation for this is the following. When m is very large, there is a high probability that every customer is close to a cheap facility. Then, the variable c
                        
                           ij
                         has a high chance of being eliminated, in the first three reduction procedures, if facility i is expensive.

We remark that, for instances in this class, Hansen et al. (2007) solved only instances with n
                        ⩽15000. Again, for us, the bottleneck was the LP solver.

Some other instances of the SPLP are available in the uncapacitated facility location library, UflLib. It can be found on the web at:


                        http://www.mpi-inf.mpg.de/departments/d1/projects/benchmarks/UflLib/
                     

Some of these instances, such as the Euclidean, K-median and ORLIB instances, are constructed using a similar procedure to the one described above. For those instances, the results obtained with our reduction scheme were similar to those given in the previous sections. The other instances, however, were constructed in different ways.

For the sake of brevity, we do not report results for all of the instances in UflLib. Instead, we report results for two sets of instances that proved to be especially difficult for our scheme. These were the so-called M* instances of Kratica, Tosic, Filipovic, and Ljubic (2001), and the KG instances, which were created by Ghosh (2003) using a similar scheme to that of Körkel (1989).

In the M* instances, there is a negative correlation between the facility costs and the assignment costs. (More precisely, f
                        
                           i
                         is small when 
                           
                              
                                 
                                    ∑
                                 
                                 
                                    j
                                    ∈
                                    J
                                 
                              
                              
                                 
                                    c
                                 
                                 
                                    ij
                                 
                              
                           
                         is large, and vice versa.) There are 22 M* instances, all of which have m
                        =
                        n. For values of m of 100, 200, 300 and 500, there are 5 instances each. There is also an instance with m
                        =1000 and another with m
                        =2000. The results for these instances are displayed in Tables 9 and 10
                        
                        . For the instances with m
                        ⩽500, each figure is the average over the five instances. The missing values occur either because the optimal solution values are unknown, or because we were unable to solve the LP relaxation, due to time and memory problems. The value in parentheses in Table 9, for m
                        =500, is the average percentage gap between the upper and lower bounds found by our bounding procedures.

We see that the first, second and fourth reduction procedures have little or no effect, and the third reduction procedure works well only when m
                        =100. As a result, the LP and branch-and-bound solvers take an excessive amount of time and memory. Also, the lower bounds are poor. These factors combine to make the instances with m
                        ⩾500 unsolvable with our approach. This is actually not surprising, since the M* instances were explicitly designed to have a large number of near-optimal solutions (Kratica et al., 2001), which makes it hard to identify variables that could not be in an optimal solution.

In the KG instances, the facility and assignment costs are taken from uniform distributions. These instances come in three sizes, with m
                        =
                        n
                        ∈{250, 500, 750}. They also come in two kinds, ‘symmetric’ and ‘asymmetric’. Also, instances named ‘a’, ‘b’ and ‘c’ have small, medium and large facility costs, respectively. For each of the resulting 18 combinations, there are five instances in the test set. This makes 90 instances in total.

The results for these instances are displayed in Tables 11 and 12
                        
                        . The figures in each row are the average over the five instances.

We see that the first reduction procedure is effective for the instances with small facility costs, but of no use at all for the other instances. The second reduction procedure is of some value, but the benefit decreases as the facility costs get larger. The gaps between the lower and upper bounds are comparatively large, and they increase as the facility costs increase. Due to these large gaps, the last two reduction procedures are of no benefit at all. The net effect is that we are able to solve only the smallest instances with small facility costs (of which there are ten). Although this may seem unimpressive, it is actually quite an achievement. By comparison, the algorithm in Beltran-Royo et al. (2012) managed to solve only two of them.

@&#CONCLUSION@&#

In this paper, we have demonstrated that ‘aggressive reduction’, originally proposed in the context of the quadratic knapsack problem, works very well when applied to planar Euclidean instances of the Simple Plant Location Problem. Using our five-phase scheme, in conjunction with the CPLEX MIP solver, we are able to solve to proven optimality larger instances than any previously solved in the literature. On the other hand, the M* and KG instances present a major challenge to our approach.

As mentioned in the previous section, the only thing that prevented us from solving still larger planar Euclidean instances was limited computer memory. To address this, one could perhaps investigate the possibility of adding another reduction step, based on dual ascent/adjustment or Lagrangian relaxation, either immediately before or immediately after the second bound-free reduction procedure. Another possible topic for future research would be to add a local search step, to improve the upper bounds found by our heuristic. Finally, one could investigate the generation of cutting planes to strengthen the LP relaxation, either in the bounding phase or in the final branch-and-bound phase.

@&#ACKNOWLEDGEMENT@&#

The first author was supported in part by the Engineering and Physical Sciences Research Council under Grant EP/D072662/1.

@&#REFERENCES@&#

