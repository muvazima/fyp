@&#MAIN-TITLE@&#A cloud-based platform to develop context-aware mobile applications by domain experts

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           We implement a cloud-based platform to obtain and manage context data


                        
                        
                           
                           The platform is designed for people with no programming skills in order to develop context-aware mobile apps


                        
                        
                           
                           The reasoning process of the platform has been optimized using the “conditions as facts” rule pattern


                        
                        
                           
                           The context data gathering process has been optimized using an algorithm that detects the activity of the user


                        
                     
                  
               
            

@&#KEYPHRASES@&#

End-user development

Domain expert

Context-awareness

Mobile

Middleware

@&#ABSTRACT@&#


               
               
                  Context-awareness enables the personalization of computer systems according to the users' needs and their particular situation at a given time. The personalization capabilities are usually implemented by programmers due to the complex processes that are involved. However, an important trend in software development is that more and more software systems are being implemented not only by programmers but also by people with expertise in other domains. Since most of the existing context-aware development toolkits are designed for programmers, non-technical users cannot develop these kinds of systems. The design of tools to create context-aware systems by users that do not have programming skills but are experts in the domain where the system is going to be deployed, will contribute to speed up the adoption of these kinds of services by the society. This paper presents a cloud-based platform to ease the development of context-aware mobile applications by people without programming skills. The platform has been designed to be used in a tourism domain. This way, tourism experts can send tourist information to mobile users according to their context data (indoor/outdoor location, language, and date and time range). An energy-efficient mobile app has been developed in order to obtain context data from the user's device and to receive personalized information in real time based on these data. The architecture and implementation details of the system are presented and the evaluation of the platform by tourism domain experts is discussed.
               
            

@&#INTRODUCTION@&#

The recent advances in mobile technologies and their increasing popularity are speeding up the achievement of the ubiquitous computing vision [1]. For the first time ever there are more gadgets in the world than there are people [2]. Smartphone sales surpassed one billion units in 2014 [3] and it is expected that over half of mobile phone users globally will have smartphones in 2018 [4]. In addition to this, global mobile data traffic grew 69% in 2014 [5]. It is a fact that these devices are replacing cameras, music players and Global Positioning System (GPS) tools. Definitely, they have become an open window to information and services at any time and place. This computing scenario requires the development of new technologies in order to provide mobile users with the correct information and services on the move. This way, a personalization layer is needed in order to filter and adapt all the information that is consumed by mobile users.

In this sense, context data is essential in order to carry out this personalization process. In the last decade, location has been widely used as one of the key parameters in order to be able to personalize mobile applications. For instance, in the tourism domain [6] Location Based Services (LBS) [7] have been widely used in order to filter the results of mobile searches. In this manner, the information about the nearest points of interest can be automatically adapted, providing tourists with a better search experience. But there are other relevant context data, like the time and date, the user's device characteristics or the environment [8].

The development of context-aware mobile applications and services is usually carried out by experimented programmers that implement the personalization layer of the business logic according to the end-user requirements. But computer programming is becoming a widespread practice. Indeed, one important trend in software technology is that more and more applications and services are being written not only by professional software developers but also by people with expertise in other domains. End-User Development (EUD) [9] emerges as a key ingredient for ensuring the acceptability of context-aware systems by end-users and has accordingly been identified as a key future challenge for research in technological visions of ubiquitous and pervasive computing [10]. EUD can contribute to empower users as active citizens of the information society, improving the user experience and the effectiveness of context-aware systems.

Several middleware and programming frameworks have been proposed in order to simplify the development of context-aware applications and services [11]. However, most of them offer high level application programming interfaces (APIs) for skilled programmers. This makes the involvement of non-technical domain experts almost impossible. The design and configuration of context-aware applications by domain experts can speed up and improve the quality of these kinds of services, promoting the widespread adoption of context-awareness.

This work presents a cloud-based development platform in order to configure the behavior of context-aware mobile applications by people that do not have technical skills. More precisely, the design of the platform has been focused in the tourism domain, in order to provide tourism domain experts with the tools to create personalized tourism mobile services. The personalization process is based on the configuration of logical rules that trigger the delivery of tourist information based on the mobile users' context data (indoor/outdoor location, language, and date and time range). The platform provides a web front-end where all the features involved in the configuration of context-aware systems can be easily managed without coding any programming line.

The article is organized as follows: in Section 2, the related work is presented. In Section 3, the implemented context-aware platform is described. Section 4 analyzes the performance of the platform. Section 5 discusses the platform user evaluation. Finally, Section 6 presents the conclusions of this research work.

@&#RELATED WORK@&#

Context-aware computing has been widely studied in the last years. Several authors have stated different definitions for the concept of context. Some of these definitions consider context as the surroundings of the interaction between the user and the application [12]. Other authors consider the activity or the task of the user as the main context information for the system [13]. A third group of authors consider that context is the needed information to characterize the situation of an entity [14]. In this research work, context will be considered from a computing perspective, having into account the third group of definitions mentioned before.

Apart from context definitions, several authors have proposed development methodologies for the implementation of context-aware systems. Henricksen and Indulska [15] proposed a methodology and a modeling language called Context Modeling Language (CML). This language was developed for conceptual modeling of databases that store context data. It has different constructs for capturing the needed classes and context sources, the quality of context data and the dependencies and constraints between context fact types. This way, system designers can specify the requirements of context data needed by the system. The methodology is divided in five different stages: analysis, design, implementation, configuration of the system and validation. Context-oriented Programming (COP) [16] is a programming model that offers mechanisms to adapt the system to be implemented according to the gathered context data. These approaches are focused on system designers and programmers and do not involve users with no programming skills. In that way, domain experts cannot take part in the development process.

Regarding context-aware toolkits and frameworks, the Context Toolkit [14] is one of the first programming environments designed to ease the development of context-aware systems. This framework presents an architecture composed of different functional modules in order to acquire, aggregate and interpret context information. With this framework, programmers are able to acquire, aggregate and interpret context information. It uses key/value pairs to model context data. Other approaches like CASS [17] propose a layered middleware architecture that uses a relational data model to represent context data. JCAF [18] is a framework and a runtime environment to develop and deploy contextual computing applications. It uses an object oriented model to represent context data. These three approaches use interpreters to convert acquired raw data into higher level context data, but these transformations cannot be very complex because there is no inference mechanism. The CoBra [19] middleware proposes a different approach where software agents are used in order to acquire and process context data in a smart meeting room environment. SOCAM [20] and Semantic Spaces [21] are also frameworks based on three different layers, namely a sensing layer, a middleware layer and an application layer. Several similar approaches have been developed in recent years [22], but all of them are designed for programmers.

The first EUD environments to create applications for mobile devices have mainly targeted desktop and web environments. Examples of desktop EUD environments have been tourism [23] and home applications [24]. Other authors have proposed visual approaches where non-technical users can be involved in the development of context-aware systems. For instance, iCAP [25] allows end-users to design application prototypes by defining rules that are graphically edited through basic operations like dragging different elements onto rule sheets. eBlocks [26] facilitates the creation of customized sensor-based systems and the configuration of condition tables. The VS-CaSP system [27] provides end-users with a 3D environment to configure and design context-aware systems in smart buildings.

Apart from that, there are context-aware web platforms that can be configured using any web browser, like the OPEN [28] framework or Context Cloud [29]. The main drawback of these platforms is that the user still needs the involvement of programmers in the management of context data because some coding skills are required for the creation and configuration of context rules.

Other approaches are supported by mobile applications that can be personalized according to the user's context. For instance, Tasker [30] is an Android app that allows users to perform context-sensitive actions based on simple event-trigger rules. Locale [31] is another Android app that allows users to create situations specifying conditions under which the user's phone settings should change. However, these approaches are ad-hoc applications, so there is still a need for more general solutions, ready for wide use for developing context-aware mobile applications by end-users.

The implemented prototype is a context-aware platform that enables people with no programming skills to configure the behavior of mobile applications based on context data. More precisely, the platform has been designed for tourism domain experts. This way, they can provide visitors on the move with relevant information according to their situation. This information is delivered automatically to the visitor's mobile device, based on some context parameters that can be configured with the web-based interface of the platform.

The context parameters that can be used to customize the delivery of information are the location and language of the mobile user, a date range and a time range. The location context parameter can be configured creating circular areas over a Google Maps layer, using the web interface of the platform. This way, the platform user can configure the condition of being inside or outside the created area. These areas can be indoors or outdoors. Also, the platform allows tourism domain experts to specify the information that will be sent to the mobile device of the visitor once the context conditions are fulfilled thanks to a WYSIWYG text editor. All these configurations can be carried out through the web interface, without any programming line.

The platform has been designed with three main technological and scientific trends in mind, such as the Web of Things, End-User Development and Cloud Computing.

The Web of Things (WoT) vision [32] is a web based approach for the Internet of Things. WoT is about re-using Web standards to connect the embedded devices built into everyday smart objects. Well-accepted and understood standards such as URI, HTTP, REST, Atom, etc. are used to access the functionality of the smart objects. This way, the platform can interact with the context sources in a restful way. This means that the platform exposes a REST application programming interface (API) that context sources (e.g. mobile devices, smart sensors, web services) can use in order to send data to the platform.

EUD principles have been taken into account as well. This is a research topic that describes the activities or techniques that allow end-users to program computers [9]. People who are not professional developers can use EUD tools to create or modify software without significant knowledge of a programming language. For instance, the most popular EUD tool is the spreadsheet. This way, the context-aware platform has been designed taking into account that users have no programming skills.

Finally, Cloud Computing is a computing paradigm that involves delivering hosted services over the Internet [33]. The Platform-as-a-Service (PaaS) paradigm has been used in order to design the platform architecture. This way, the platform is defined as a set of software development tools hosted on a web server that the end-user can use to configure the context-aware mobile applications.

Based on the aforementioned design guidelines, the context-aware platform has been implemented. The following sections present the implementation details, including the description of the used context data model, the architecture and the functionalities of the platform.

The storage and management of context data are crucial requirements in the development of context-aware toolkits. A context data model is needed in order to represent and manage context data more effectively. Several types of data models can be used to model context data, like key-value pairs, relational models, ontologies and object oriented models [34].

A key-value pair model is the simplest one but it is not expressive enough to model context. For instance, reasoning mechanisms cannot be used with this data model in order to trigger personalization rules. Apart from that, relationships between different context entities (e.g. temperature, person, weather) are hard to represent.

Relational models are supported by data bases. These models allow the configuration of relationships between different context entities and they provide developers with a very powerful and well known query language (SQL), but there is a lack of reasoning layers as well.

The most used context data models are object oriented models and ontology based models, which are more expressive than the aforementioned ones and they can be used with powerful reasoning engines in order to infer high level context or situations, from low level context, that is, raw context data coming from the context sources.

On the one hand, ontologies have been widely used because of their expressivity [28]. There are a lot of axioms that can be used to create restrictions and relationships between data. Also, there are powerful reasoning engines that can be applied to a semantic model in order to infer knowledge based on the defined axioms and restrictions. But there are several drawbacks when using ontologies. For instance, it is not easy to define the restrictions and axioms that should be applied to the ontology model. If they are not configured correctly, unexpected results may occur in the reasoning process. This way, experts in semantic web are needed when using this modeling technique.

On the other hand, object oriented models are very popular between programmers because a lot of the existing programming languages are designed based on this coding paradigm. These models allow the creation of rich relationships between context entities. Apart from that, reasoning engines based on rules can be applied to infer high level context.

There are several context processing patterns that have been identified in the literature review that could be used to design the architecture of the platform [35]. One of the most used approaches is to consider context-aware systems as reactive systems that adapt their behavior based on the gathered context data. This way, the architecture of the platform has been designed in order to generate outputs (e.g. text, data, JSON, URL) triggered by logical rules, that will be sent to mobile applications based on the mobile user's context.

All the layers of the architecture and the context data model have been implemented using an object oriented model because of its simplicity and easy management. The selected programming language is Java [36]. On the other hand, in order to infer high level context an expert system based on the definition of logical rules has been configured as part of the architecture (Drools Expert [37]). These rules are triggered based on the created context model and the received data. The context data model and the expert system have been the bases to design the rest of the architecture. Fig. 1
                         shows the different layers of this architecture and their main modules.

The architecture is based on the common layers identified in the reviewed works [11]: context sources layer, processing layer, management layer and application layer. This way, the platform can be considered as a black box that receives inputs from the identified context sources and produces outputs triggered by the defined context rules.

The first layer is where all the context sources are. These sources are usually distributed and provide heterogeneous data. This is the case of sensor networks, web services, mobile devices or data bases. For the implemented platform, three different context sources have been used. The most important context source is the user's mobile device. In order to get data from the smartphone, the mobile user has to install an application. This application has an embedded SDK that obtains the locale of the device and the location data every 30s using a background service. These data are sent to the processing layer with a randomly generated user identifier. The time and date of the server where the platform is deployed are also used as context data.

In order to detect the mobile user in indoor environments where the GPS is not accurate enough, the system uses iBeacons that provide the location based on Bluetooth connectivity. This way, the SDK continuously scans for iBeacon devices and sends the UUID of the detected beacons.

Based on the locale, location, date and time context parameters, the tourism domain expert is able to define and configure context rules in order to send information to the user's smartphone.

The processing layer is responsible for transforming context raw data into the context data model. The data model is based on an object oriented model that has been implemented using Java Bean classes. This layer exposes an API to all the context sources that want to send data to the platform. In our prototype, the mobile device is the one who uses this API to send the identifier and the location of the mobile user. Thanks to this API, third party services could be used in order to send data to the platform as well. This layer uses a geospatial information system (GIS) in order to match the location coordinates or iBeacon UUIDs with the already created areas. Once the data model is populated, the resulting Java objects are passed to the management layer.

The management layer is where the reasoning process is carried out. The expert system used to infer high level context is fed by the conditions created by the domain expert. These conditions can be configured using the user interface (UI) of the platform, which can be accessed with any connected web browser. The UI of the Fig. 2
                            allows the creation of virtual areas (indoors or outdoors) where the mobile user can be detected (arriving or leaving), as well as the conditions of time and date ranges.

Also, the information that will be sent to the user's mobile device once these conditions are satisfied can be specified. This information can be detailed in three different languages (Spanish, French and English). Only users with the locale equal to the specified language will receive the information. Thus, the language of the visitor is considered as context data. The information can be edited using a WYSIWYG editor. An icon for the information can be configured as well.

When the domain expert configures an area, the context conditions and the information to be sent, a new rule is created and stored in the platform (Rules). The conditions and the data specified by the platform user are also stored in a data base (DB). All the data coming from the processing layer in the form of Java Bean instances is stored in the knowledge base (KB), and the reasoning process is carried out. If any of the created rules are fired, the information specified by the domain expert is sent to the user's mobile device using a push messaging service.

As mentioned before, the mobile user has to install an application in order to receive the personalized information coming from the platform according to the context conditions specified by the tourism domain expert. An Android application has been developed in order to visualize this information, which is also responsible for gathering and sending user's context data (randomly generated user identifier, location and locale) to the platform.

As aforementioned, this process is carried out as a background service periodically, so the mobile user can use any other application at the same time. When the context conditions are matched with the ones configured in the platform, the mobile user receives a notification with relevant information for that situation and the mobile device vibrates. The mobile user can manage all the received notifications, deleting or storing them in the mobile device.

There are two main bottlenecks that could affect the performance of the overall system. The first one has to do with the location data gathering process from the GPS sensor of the user's smartphone. This is a frequent process that can drain the battery of the smartphone in a few hours. The other one is related with the reasoning process of the platform. Reasoning over thousands of facts can be a very time consuming process that can affect the service quality of the implemented platform. This way, different strategies have been designed in order to overcome these major issues.

The SDK embedded in the application obtains the context data from the user's smartphone periodically in order to be processed and managed by the platform. As it obtains data from the GPS of the mobile device, the battery drains very quickly. This is one of the major problems in these kinds of context-aware systems [38].

In order to be more energy-efficient, an algorithm has been designed that manages the gathering process of the location data. The algorithm uses the activity recognition service from Google Play Services [39] in order to detect if the mobile user is still, standing or walking. If the user is still or standing, the GPS is switched off. If the user is walking the algorithm switches on the GPS if it was switched off. The activity checking process is repeated every 10s.

Also, the Internet connection availability is checked every 10s. If there is no Internet connection, the GPS is switched off, because there is no possibility to send the location coordinates to the platform. If the Internet connection is available, the GPS is switched on if it was not available.

The location gathering process from the GPS is performed every 30s. Once the SDK obtains the location coordinates, it sends them to the platform. In the response of the platform, the distance to the closest area from user's location is returned. This data is used in order to estimate the needed time to reach that area considering an average human walking speed of 1m per second. If the time is higher than 5min, the GPS is switched off for 4min. If the time is less than 5min, the location coordinates are obtained again after a pause of 30s. This algorithm is illustrated in Fig. 3
                        .

The algorithm has been implemented and evaluated. A walking route of an hour was designed, with four different outdoor areas configured in the platform in order to send certain information to the smartphone. Two Nexus 4 smartphones were used. In the first one, an app with the optimization algorithm was installed. The second one had an app with no optimization algorithm. This second app was configured in order to obtain and send GPS location coordinates to the platform every two minutes. The route was walked five times with the two smartphones, measuring the battery consumption of the GPS. The app with no optimization algorithm consumed an average of 943.48J, while for the app with the optimization algorithm the consumption of energy was 23.1J, which is significantly better.

The reasoning process is crucial for the management of the gathered context data. This process is responsible for inferring high level context based on raw context data or low level context. In order to perform the reasoning over all the obtained low level context data facts, a reasoning engine based on rules has been used. This engine is part of an expert system that is fed by rules that are created by the defined context conditions. The reasoning process is automatically scheduled in order to be fired once per second. If it spends more than a second in order to reason over all the facts that are stored in the KB, the process is launched again when the current process finishes. This way, a continuous reasoning is carried out.

In order to reduce the number of rules that are generated by the platform user based on the configured context conditions, the “conditions as facts” design pattern has been used [40]. In this manner, all the context conditions that are specified by the domain expert are transformed into facts that are stored in the KB. These context conditions are modeled as Java Bean objects, with context parameters as properties.

In order to do so, the “ContextConditions” Java class has been created. This class has several properties to store all the configured context conditions and context data values. For instance, the properties “areaName”, “fromDate” or “toDate” have been added to the “ContextConditions” class to store the area and the date range configured by the platform user. This way, when the user of the platform configures the context conditions using the user interface, a new “ContextConditions” instance is created and inserted in the KB, with the condition values stored in its properties.

Apart from that, the platform's data model uses a “User” Java class in order to store data coming from the user's mobile device, that is, the identifier, the locale and the location coordinates or iBeacon UUIDs that are then transformed into area names. These two fact types are used by the expert system in order to verify if the context conditions are satisfied. The matching is performed by one rule that has been added to the expert system. Following a simplified example of a rule is shown. In the “when” part of the rule, all the conditions that have to be satisfied are specified based on the “ContextConditions” and “User” facts. The “then” part of the rule is responsible for sending data to the user's mobile device if the conditions are fulfilled.
                           
                              rule
                                    
                                       when
                                             
                                                ContextCondition(
                                                      
                                                         $areaName=areaName,

new Date ()>=fromDate,

new Date ()<=toDate

…)

$user: User (currentAreas contains $areaName)

then
                                             
                                                sendInfoToUser ($user)

end

In this case, the name of the area that has been created by the user of the platform and the date range that has been specified are used as context conditions. The “fromDate” and “toDate” properties are compared to the server's current date in order to test the date range condition, and the “areaName” property is stored in the “$areaName” variable in order to be compared with the mobile user's current areas, which are stored in the “User” fact. These areas are calculated based on the user's location and are stored in the “currentAreas” property of the “User” object. If all these conditions are true, the data is sent to the user's mobile device with the “sendInfoToUser” method.

A user evaluation has been designed in order to test whether the implemented platform can be suitable for people without programming skills. Next sections describe the methodology and the results of the user evaluation.

@&#METHODOLOGY@&#

The platform has been evaluated with 10 non-technical people that are tourism domain experts, that is, people related with the travel and tourism industries with no computer programming skills. Participants had to complete two tasks using the platform, where they had to configure the context conditions and the information to be sent to the app according to different parameters. They were given a mobile device with an Android mobile application that was able to visualize the received information from the platform.

An external observer annotated all the problems that the participants found using the platform. Also, once a task was finished, the time spent in its configuration was annotated. After the evaluation, the external observer calculated the completion level of the tasks based on a 100 point scale. These points were assigned based on the carried out configurations for each of the tasks: area creation (20 points), area conditions (30 points), date (10 points) and time (10 points) range configuration, information to be sent (10 points) and reception of the information in the mobile device (20 points). 50 points were considered as a sufficient score to mark the task as completed, based on the weights that were assigned to the different subtasks that participants had to carry out in order to successfully complete the tasks.

After the evaluation, the participants had to fill out a questionnaire based on the System Usability Scale (SUS) [41]. This is one of the most used questionnaires for measuring perceptions of usability.

@&#RESULTS@&#

The results of the evaluation have been analyzed based on the level of completion of each of the tasks, the time spent to finish them and the obtained SUS scores. The level of completion of each of the tasks was evaluated by the external observer. A minimum of 50 points was required in order to consider that the task was successfully completed.

According to this score, all the participants completed the tasks successfully, with an average score of 80 points for the first task and 90 points for the second task. This way, the second task obtained better scores.

The reason for this could be that platform users were not already familiar with the user interface when they started to complete the first task. For the second task, they were more confident because they knew how to proceed with the platform and how to configure all the required context conditions.

It has to be said that before the evaluation, participants did not know how to use the platform and they were not informed about its functionalities. This way, for the first task users had to analyze the user interface and try all the different controls and components in order to know how to configure them to successfully complete the task.

The average time spent in order to complete all the tasks was 15min. For the first task, participants spent an average of 11min. The second task was completed in an average time of 4min. This evidences that participants get more confident with the platform as they use it.

After the evaluation, all the participants had to fill out a SUS questionnaire based on ten different questions, in order to get the usability scores for the platform. This scale establishes that the scores that are over 68 points state that the platform is usable. Table 1
                         shows the evaluation results.

According to this scale, the platform is usable for all the participants, with an average score of 80 points. The minimum score was 77.5 and the maximum score was 92.5. This evidences that the implemented platform was perceived as a useful tool by the participants of the evaluation and that they find it easy to use.

@&#CONCLUSIONS@&#

This paper presents a platform in order to configure context-aware mobile services and applications using a web platform that has been designed for people with no programming skills. The architecture of the platform follows the design guidelines of the reviewed context-aware toolkits, with a user interface that has been adapted in order to allow the configuration of all the needed context conditions and parameters with no programming code.

As the results of the user evaluation evidence, the designed platform is able to empower end-users in the development of context-aware mobile applications. The participants of the user evaluation found that the platform was usable and they were able to configure it in order to develop a context-aware mobile application. This brings new opportunities to the context-aware computing research field and the mobile industry.

One of the main disadvantages of these kinds of systems is that the location of the mobile user has to be continuously acquired in order to personalize the behavior of the system. This has a negative impact in the battery of the mobile device as it drains very quickly. An algorithm has been implemented in order to improve the efficiency of the location gathering process from the mobile device.

Most of the reviewed works are laboratory prototypes, with no commercial usage. The implementation of systems like the one presented in this research work, can enhance the early adoption of context-aware systems by users with no technical skills. The widespread adoption of these technologies will provide people with a better user experience and a higher personalization of services.

@&#ACKNOWLEDGMENT@&#

This research work has been supported by the Strategic Research Programme ETORTEK (Smartur IE12-343) of the Basque Government.

@&#REFERENCES@&#

