@&#MAIN-TITLE@&#Common mistakes in computing the nucleolus

@&#HIGHLIGHTS@&#


               
               
                  
                     
                        
                           
                           Common mistakes in computing the nucleolus are found in the literature.


                        
                        
                           
                           The mistakes have propagated in a wide range of applications over the years.


                        
                        
                           
                           We clarify how to use linear programming and duality for computing the nucleolus.


                        
                        
                           
                           Mistaken examples from this and other journals are corrected.


                        
                     
                  
               
            

@&#KEYPHRASES@&#

Game theory

Nucleolus

Cost allocation

Linear programming

Duality

@&#ABSTRACT@&#


               
               
                  Despite linear programming and duality have correctly been incorporated in algorithms to compute the nucleolus, we have found mistakes in how these have been used in a broad range of applications. Overlooking the fact that a linear program can have multiple optimal solutions and neglecting the relevance of duality appear to be crucial sources of mistakes in computing the nucleolus. We discuss these issues and illustrate them in five mistaken examples from this and other journals. The purpose of this note is to prevent these mistakes propagate longer by clarifying how linear programming and duality can be correctly used for computing the nucleolus.
               
            

@&#INTRODUCTION@&#

One of the main solution concepts in cooperative game theory is the nucleolus, proposed by Schmeidler (1969). A number of approaches have been developed in order to compute it, as reviewed by Leng and Parlar (2010) and Çetiner (2013). Although linear programming and duality have been correctly used in several approaches (e.g. Fromen, 1997; Hallefjord et al., 1995; Kimms and Çetiner, 2012), we have found that the nucleolus has been wrongly computed over the years in a wide variety of contexts. The mistakes appear to be caused by overlooking the possibility that a linear program can have multiple solutions, and by neglecting the use of the dual solution as a valuable source of information in such cases. In this short communication, we discuss these issues and illustrate them in five examples taken from articles published in this journal and others. The examples correspond to applications of cooperative game theory in joint development of projects (Kruś and Bronisz, 2000), production and transportation planning (Sakawa et al., 2001), electricity markets (SatyaRamesh and Radhakrishna, 2009), manufacturing (Oh and Shin, 2012), and investments (Lemaire, 1984). It came to our attention that similar errors have appeared in such a wide range of applications. Our purpose in this note is to clarify how linear programming and duality can be used to correctly calculate the nucleolus, thus to prevent an even larger propagation of these errors. The clarification on how to use these concepts is presented in Section 2 of this note. In Section 3, we present the mistaken examples from previous literature and compute the correct nucleolus to them. In Section 4, we conclude with some final remarks.

Let N = {1, …, n} be the set of players and K the set of all non-empty subsets of N. The characteristic function 
                        
                           v
                           :
                           K
                           →
                           R
                        
                      assigns to each coalition S in K the cost of coalition S. A preimputation or cost allocation vector x = (x
                     1, …, xn
                     ) assigns to each player j in N a quantity xj
                      such that ∑
                        j ∈ N
                     
                     xj
                      = v(N); that is, the cost of the grand coalition N is split among its members according to the allocation x (
                        
                           
                              x
                              j
                           
                           ∈
                           R
                           
                           ∀
                           j
                           ∈
                           N
                        
                     ). An allocation vector x satisfies rationality if ∑
                        j ∈ S
                     
                     xj
                      ≤ v(S)~∀S ∈ K. The core of the game is the set of preimputations that satisfy the rationality conditions.

Define the excess of coalition S at x as ɛ(x, S) = v(S) − ∑
                        j ∈ S
                     
                     xj
                     . The excess is a measure of how satisfied a coalition S is with the cost allocation x. The larger the excess of S, the more satisfied coalition S is. Define the excess vector at x as e(x) = (ɛ(x, S
                     1), …, ɛ(x, Sm
                     )), where the sets Si
                      represent the coalitions in K∖N, and m = 2
                        n
                      − 2. For an excess vector 
                        
                           e
                           ∈
                           
                              R
                              m
                           
                           ,
                        
                      define a mapping θ such that θ(e) = y, where 
                        
                           y
                           ∈
                           
                              R
                              m
                           
                        
                      is the vector which results from arranging the components of e in a non-decreasing order. A vector y = (y
                     1, …, ym
                     ) is said to be lexicographically greater than another vector 
                        
                           
                              y
                              ¯
                           
                           =
                           
                              (
                              
                                 
                                    y
                                    ¯
                                 
                                 1
                              
                              ,
                              …
                              ,
                              
                                 
                                    y
                                    ¯
                                 
                                 m
                              
                              )
                           
                        
                      if either 
                        
                           y
                           =
                           
                              y
                              ¯
                           
                        
                      or there exists h ∈ {1, …, m} such that 
                        
                           
                              y
                              h
                           
                           >
                           
                              
                                 y
                                 ¯
                              
                              h
                           
                        
                      and 
                        
                           
                              y
                              i
                           
                           =
                           
                              
                                 y
                                 ¯
                              
                              i
                           
                           
                           ∀
                           i
                           <
                           h
                        
                      (if h = 1, it is enough that 
                        
                           
                              y
                              h
                           
                           >
                           
                              
                                 y
                                 ¯
                              
                              h
                           
                        
                     ). We annotate 
                        
                           y
                           ⪰
                           
                              y
                              ¯
                           
                        
                     .

Note in some contexts the characteristic function v is defined as a benefit instead of cost, and the excess as a measure of dissatisfaction instead of satisfaction. Both perspectives can be approached in equivalent ways. We rather adopt the cost perspective, since most of the recent interest for cooperative games in Operations Research comes from cost sharing problems in collaborative logistics. Also, our attention focus in games with a non-empty core. A main question in these games is how the players should share the cost v(N) when collaborating in the grand coalition N. The nucleolus is one of the most used solution concepts for this problem.

The nucleolus of a cost sharing game with non-empty core can be defined as the preimputation x which lexicographically maximizes the excess vector, that is, 
                        
                           θ
                           
                              (
                              e
                              
                                 (
                                 x
                                 )
                              
                              )
                           
                           ⪰
                           θ
                           
                              (
                              e
                              
                                 (
                                 
                                    x
                                    ¯
                                 
                                 )
                              
                              )
                           
                        
                      for all preimputation 
                        
                           x
                           ¯
                        
                     . Schmeidler (1969) proves that the nucleolus is unique. In order to compute the nucleolus, let us first consider the following linear programming model (henceforth denoted as P), which looks for a preimputation x = (x
                     1, …, xn
                     ) that maximizes the minimum excess ɛ among all the coalitions.

                        
                           (1)
                           
                              
                                 
                                    
                                       
                                          (
                                          P
                                          )
                                          
                                          
                                          max
                                          
                                          
                                          ɛ
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (2)
                           
                              
                                 
                                    
                                       
                                          
                                             s.t.
                                             
                                             ɛ
                                             +
                                             
                                                ∑
                                                
                                                   j
                                                   ∈
                                                   S
                                                
                                             
                                             
                                                x
                                                j
                                             
                                          
                                       
                                    
                                    
                                       ≤
                                    
                                    
                                       
                                          v
                                          (
                                          S
                                          )
                                          
                                          ∀
                                          S
                                          ⊂
                                          N
                                          ,
                                          S
                                          ≠
                                          ∅
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (3)
                           
                              
                                 
                                    
                                       
                                          
                                             
                                                ∑
                                                
                                                   j
                                                   ∈
                                                   N
                                                
                                             
                                             
                                                x
                                                j
                                             
                                          
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          v
                                          (
                                          N
                                          )
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (4)
                           
                              
                                 
                                    
                                       
                                          ɛ
                                       
                                    
                                    
                                       ∈
                                    
                                    
                                       
                                          R
                                          ,
                                          
                                          
                                          
                                             x
                                             j
                                          
                                          
                                          ∈
                                          
                                          R
                                          
                                          
                                          ∀
                                          j
                                          ∈
                                          N
                                       
                                    
                                 
                              
                           
                        
                     Objective function (1) maximizes ɛ. Constraints (2) impose that such ɛ cannot be greater than the excess of any coalition. Thus, (1) and (2) together provide that ɛ is exactly equal to the minimum excess. Constraint (3) is the efficiency condition, which provides that the cost of the grand coalition v(N) is split among its players according to the allocation x. Constraints (4) state the nature of the variables. The solution to P is not necessarily unique. As we will illustrate in the numerical examples, it may occur that more than one allocation x leads to the optimal objective value. In addition, a solution of P provides an allocation that maximizes the lowest excess, but not necessarily the second or any subsequent lowest excess. The nucleolus can be found by solving a sequence of linear programs (LPs), as in the algorithm by Fromen (1997) which we briefly outline below. The first LP in the sequence corresponds to P. Let ɛ1 be the optimal objective value of P. The kth LP (k > 1) in the sequence is formulated below.

                        
                           (5)
                           
                              
                                 
                                    
                                       
                                          max
                                          
                                             ɛ
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (6)
                           
                              
                                 
                                    
                                       
                                          
                                             s.t.
                                             
                                             
                                                ɛ
                                                k
                                             
                                             +
                                             
                                                ∑
                                                
                                                   j
                                                   ∈
                                                   S
                                                
                                             
                                             
                                                x
                                                j
                                             
                                          
                                       
                                    
                                    
                                       ≤
                                    
                                    
                                       
                                          v
                                          
                                             (
                                             S
                                             )
                                          
                                          
                                          ∀
                                          S
                                          ⊂
                                          N
                                          :
                                          S
                                          ∉
                                          
                                             F
                                             k
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (7)
                           
                              
                                 
                                    
                                       
                                          
                                             
                                                ɛ
                                                i
                                             
                                             +
                                             
                                                ∑
                                                
                                                   j
                                                   ∈
                                                   S
                                                
                                             
                                             
                                                x
                                                j
                                             
                                          
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          v
                                          
                                             (
                                             S
                                             )
                                          
                                          
                                          ∀
                                          S
                                          ∈
                                          
                                             F
                                             i
                                          
                                          ,
                                          
                                          i
                                          ∈
                                          
                                             {
                                             1
                                             ,
                                             …
                                             ,
                                             k
                                             −
                                             1
                                             }
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (8)
                           
                              
                                 
                                    
                                       
                                          
                                             
                                                ∑
                                                
                                                   j
                                                   ∈
                                                   N
                                                
                                             
                                             
                                                x
                                                j
                                             
                                          
                                       
                                    
                                    
                                       =
                                    
                                    
                                       
                                          v
                                          (
                                          N
                                          )
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (9)
                           
                              
                                 
                                    
                                       
                                          
                                             ɛ
                                             k
                                          
                                       
                                    
                                    
                                       ∈
                                    
                                    
                                       
                                          R
                                          ,
                                          
                                          
                                          
                                             x
                                             j
                                          
                                          
                                          ∈
                                          
                                          R
                                          
                                          
                                          ∀
                                          j
                                          ∈
                                          N
                                       
                                    
                                 
                              
                           
                        
                     In this kth LP, objective function (5) and constraints (6) provide that the kth minimum excess ɛ
                        k
                      is maximized. Constraints (7) state that the excess of the coalitions contained in set Fi
                      must be equal to the optimal objective value ɛ
                        i
                      to the ith LP. Constraints (8) and (9) state conditions for the efficiency and nature of the variables, respectively. The set Fi
                      is the set of all coalitions for which the excess constraint (6) is satisfied with equality sign for all the solutions to the ith LP. Thus, the excess of the coalitions in Fi
                      must be fixed to ɛ
                        i
                      in the kth LP in the series for all k > i, as expressed in constraint (7). The set 
                        
                           F
                           k
                        
                      is simply the union of all the coalitions for which its excess has been fixed in a previous LP in the sequence, that is, 
                        
                           
                              F
                              k
                           
                           =
                           
                              ⋃
                              
                                 i
                                 <
                                 k
                              
                           
                           
                              F
                              i
                           
                        
                     . Note by defining 
                        
                           
                              F
                              1
                           
                           =
                           ∅
                        
                      and omitting constraints (7) for k = 1, one recovers the first problem P in the sequence. A key issue is how to find the set Fi
                     , and here is where dual linear programming plays a relevant role. The dual of P, which we will refer as model D, is formulated below.

                        
                           (10)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             (
                                             D
                                             )
                                          
                                          
                                          
                                          min
                                          
                                             ∑
                                             
                                                S
                                                ∈
                                                K
                                             
                                          
                                          v
                                          
                                             (
                                             S
                                             )
                                          
                                          ·
                                          
                                             y
                                             S
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (11)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             s.t.
                                             
                                             
                                                ∑
                                                
                                                   S
                                                   ∈
                                                   K
                                                   ∖
                                                   N
                                                
                                             
                                             
                                                y
                                                S
                                             
                                             =
                                             1
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (12)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             
                                                ∑
                                                
                                                   S
                                                   ∈
                                                   K
                                                   :
                                                   j
                                                   ∈
                                                   S
                                                
                                             
                                             
                                                y
                                                S
                                             
                                             =
                                             0
                                             
                                             ∀
                                             j
                                             ∈
                                             N
                                          
                                       
                                    
                                 
                              
                           
                        
                     
                     
                        
                           (13)
                           
                              
                                 
                                    
                                    
                                    
                                       
                                          
                                             y
                                             S
                                          
                                          ≥
                                          0
                                          
                                          ∀
                                          S
                                          ∈
                                          K
                                          ∖
                                          N
                                          ,
                                          
                                          
                                             y
                                             N
                                          
                                          ∈
                                          R
                                       
                                    
                                 
                              
                           
                        
                     From duality theory, when the optimal value of a dual variable is positive, the inequality constraint associated to this variable must hold with equality at any optimal solution of P. Therefore, given a solution to P the set F
                     1 can be formed by all the coalitions S for which yS
                      is positive in the corresponding solution to D. Analogously, for a general k, the set Fk
                      can be formed by all the coalitions such that the dual variable associated to constraint (6) is positive in the corresponding optimal solution to the dual problem of the kth LP in the sequence. In order to find the nucleolus, the solution process proceeds until a k where the LP has a unique solution. At the latest, such unique solution will be obtained when constraints (7) and (8) define a system of n independent linear equations.

Strictly speaking, the previous procedure computes the prenucleolus of the game. The nucleolus requires x not only to be a preimputation but also to satisfy the individual rationality constraint xj
                      ≤ v({j})~∀j ∈ N. This can be explicitly added as a constraint in the LPs for games whose core may be empty. However, in games with non-empty core the prenucleolus coincides with the nucleolus, so the explicit inclusion of this constraint is not needed. Also, notice that for games with non-empty core the optimal objective value is non-negative for all the LPs in the sequence, thus one can declare ɛ
                        k
                      ≥ 0 instead of 
                        
                           
                              ɛ
                              k
                           
                           ∈
                           R
                        
                     .

In this section we present five examples taken from a variety of contexts in the literature, where the nucleolus has been wrongly calculated. The first two examples are taken from articles published in this journal and the other three examples from other journals. We identify two main sources of error. First, overlooking the fact that the solution to model P is not unique. Second, given a particular solution to the ith LP in the sequence, the set Fi
                      has been wrongly computed as the set of all coalitions whose excess is equal to ɛ
                        i
                      at such particular solution.

We use the notation 
                        
                           
                              v
                              ^
                           
                           
                              (
                              S
                              )
                           
                        
                      for referring to the characteristic function of games where the players share benefits instead of costs (the LP models for these games remain the same as in Section 2 by defining 
                        
                           v
                           
                              (
                              S
                              )
                           
                           =
                           −
                           
                              v
                              ^
                           
                           
                              (
                              S
                              )
                           
                        
                     ).


                        Kruś and Bronisz (2000) consider a cooperative game where different agents are interested in the implementation of a project. The authors outline a correct algorithm for calculating the nucleolus (and other nucleoli variants) based on a sequence of LPs. They correctly acknowledge that the solution to an LP in the sequence may not have a unique solution, and also that the optimal dual solution is useful for the implementation of the algorithm. They refer the reader to Christensen et al. (1996), who indeed incorporate the information of the dual values in the solution process correctly. Despite the correctness of the algorithm by Kruś and Bronisz (2000), we have found a calculation error in a numerical example reported in their article. The characteristic function of this example is shown in the third column of Table 1
                        . The first and second columns of the table show an index c ∈ {1, …, 2
                           n
                         − 1} that we use to refer to each coalition and the players who conform them, respectively. The next three columns show the correct nucleolus solution x we have computed for this example, and the excess vector in non-decreasing order together with the index of each coalition in this vector. The last three columns show the solution 
                           
                              x
                              ¯
                           
                         given by Kruś and Bronisz (2000), and the corresponding excess vector.

The allocation 
                           
                              
                                 x
                                 ¯
                              
                              =
                              
                                 (
                                 0.96
                                 ,
                                 0.26
                                 ,
                                 0.18
                                 ,
                                 0.49
                                 )
                              
                           
                         is one of the multiple optimal solutions to model P. The optimal objective value to this model is ɛ1 = 0.18. For the allocation 
                           
                              
                                 x
                                 ¯
                              
                              ,
                           
                         the excess of four coalitions (3, 8, 12 and 14) equals ɛ1. By defining F
                        1 = {3, 8, 12, 14}, constraints (7) and (8) conform a system of linear equations whose unique solution is 
                           
                              
                                 x
                                 ¯
                              
                              ,
                           
                         so there is no need to solve more LPs in the sequence.

The optimal solution we obtain for the dual problem D in this example is y
                        3 = y
                        12 = 0.5 and yc
                         = 0~∀c ∈ K∖{3, 12}. Then, we define F
                        1 = {3, 12}, which determines a unique value for x
                        3. By solving the corresponding second LP, we obtain ɛ2 = 0.38667 and positive optimal dual values for y
                        11, y
                        13 and y
                        14. By fixing the excess of these three coalitions to ɛ2 and using the efficiency condition and the allocation for x
                        3 previously obtained, the unique allocation x = (0.75, 0.48, 0.18, 0.47) is found, which is the nucleolus of this game. Note in Table 1, the first and second lowest excesses are the same for both solutions x and 
                           
                              
                                 x
                                 ¯
                              
                              ,
                           
                         but the third lowest excess ɛ = 0.39 at x is greater (and thus better regarding the nucleolus notion of fairness) than the third lowest excess 
                           
                              
                                 
                                    ɛ
                                 
                                 ¯
                              
                              =
                              0.18
                           
                         at 
                           
                              x
                              ¯
                           
                        .


                        Sakawa et al. (2001) deal with a problem on production and transportation planning based on a real case of a housing material manufacturer. The authors acknowledge the usefulness of solving a sequence of linear programs for calculating the nucleolus. They also mention that by examining the optimal solution of the dual problem, one can identify which constraints must hold with the equality when solving such LPs. However, there is no explicit mention to what this examination consists on. They present data for a 5-player game, where each player represents one city or sale base in the network of the manufacturer. The characteristic function of this game, as well as our solution x and their solution 
                           
                              
                                 x
                                 ¯
                              
                              ,
                           
                         are shown in Table 2
                        .

In order to compute the nucleolus x, we solve the first LP in the sequence and find a solution where five coalitions are left with the lowest excess ɛ1 = 0.034, but only three optimal dual variables are positive (y
                        16, y
                        21 and y
                        30). Then, by defining F
                        1 = {16, 21, 30} and running the second LP, the solution we obtain has two positive optimal dual variables (y
                        9 and y
                        26). Fixing the excess of these two coalitions, together with the excess of the three previous coalitions and the efficiency constraint, define a system of equations whose unique solution is the nucleolus x. Note that the excess vector at x is lexicographically greater than the excess vector at 
                           
                              x
                              ¯
                           
                        . While the absolute difference between the components of x and 
                           
                              x
                              ¯
                           
                         appear to be small, their relative differences amount up to 9.1 percent, which in our view is significant (specially since the allocations in this problem represent percentages applied to a profit in the order of millions). Since the characteristic function of this game is given with three decimal digits and the allocations with six decimal digits, one may interpret that the differences in x and 
                           
                              x
                              ¯
                           
                         are merely due to numerical issues. However, we discard this interpretation by an exhaustive exploration where we verified that small perturbations of v(S) have relatively low effects in the nucleolus of the game.


                        SatyaRamesh and Radhakrishna (2009) present a cooperative game to allocate the transactional transmission losses in a problem on electricity markets. In their first case study, they use a dataset from the IEEE 14-bus test system. The characteristic function for this system is shown in Table 3
                        . The allocation 
                           
                              x
                              ¯
                           
                         they report as the nucleolus is a solution to the first LP in the sequence, but not for the second one. In the solution we obtain for the first LP, the dual variables with positive values are y
                        3 and y
                        4. By defining F
                        1 = {3, 4}, the value of x
                        3 is fixed and the second LP gives as solution the allocation x, which is the correct nucleolus for this game.


                        Oh and Shin (2012) address a cost sharing problem on joint network-centric manufacturing. They compute the nucleolus for an example using the characteristic function given in Table 4
                        . Their solution 
                           
                              x
                              ¯
                           
                         solves the first LP in the sequence (we neglect the last digit of the excess), but fails to solve the second one. In the solution we obtain for the first LP, y
                        3 and y
                        4 are the only dual variables with positive values. By defining F
                        1 = {3, 4} and solving the second LP, the optimal solution x is obtained, which is the correct nucleolus for this game.


                        Lemaire (1984) discusses several cost allocation methods in the context of investment groups and insurance companies. The Example 3 on his article illustrates a problem where different players collaborate by investing in common funds and need to split the interest gained from the investment. The data and results for this example are shown in Table 5
                        . The allocation 
                           
                              x
                              ¯
                           
                         solves the first LP of the sequence, but not the second one. In the solution we obtain for the first LP in the series, there are three coalitions with the lowest excess ɛ1 = 6562.5, but only two optimal dual values are positive (y
                        1 and y
                        6). By defining F
                        1 = {1, 6} and running the second LP, we obtain the solution x which is the correct nucleolus for this game. Note the excess vector at x is lexicographically greater than the excess vector at 
                           
                              
                                 x
                                 ¯
                              
                              ,
                           
                         since their two first components are equal but the third component of the former is greater than the third component of the latter (7031.3 > 6562.5).

We would like to conclude this section with some remarks on the computational implementation of the sequence of LPs. First of all, the explicit implementation of the dual model is not needed as most optimization software can provide information on the dual solution after the primal model has been solved. For example, in our computations we used AMPL/CPLEX 12.6, which includes a command called .dual for this purpose.

Second, as well as the primal, the dual model may have multiple solutions. Suppose this occurs for the kth LP, and let y and 
                           
                              y
                              ¯
                           
                         be two different optimal solutions of the corresponding dual model. If one obtains y before 
                           
                              
                                 y
                                 ¯
                              
                              ,
                           
                         only those coalitions associated to the positive components of y will be included in the set Fk
                        . For those coalitions associated to the positive components of 
                           
                              y
                              ¯
                           
                         which are zero in y (and thus not included in Fk
                        ), constraint (8) must also hold with equality in the kth LP, although this information is not provided by the solution y. In consequence, the optimal objective value 
                           
                              
                                 ɛ
                                 
                                    k
                                    +
                                    1
                                 
                                 *
                              
                           
                         of the k + 1th LP must be equal to the optimal objective value 
                           
                              
                                 ɛ
                                 k
                                 *
                              
                           
                         of the kth LP. The set F
                        
                           k + 1 will be defined according to the optimal solution obtained for the k + 1th LP and so on. The same optimal objective value will be obtained in the sequence until the excess value 
                           
                              
                                 ɛ
                                 k
                                 *
                              
                           
                         is fixed for all coalitions associated to positive dual values. Thus, when the dual model has multiple solutions, the sequence through one gets to the nucleolus might be affected, but not the nucleolus itself (recall this is unique).

Third, some numerical issues may arise in the solution process. For example, when fixing the excesses ɛ
                           k
                         according to the equality constraints (7), the precision settings of the solver may affect the solution. Also, when identifying the dual variables with positive values, one may include certain tolerance to numbers that differ from zero by an insignificant amount (e.g. 10−9), in order to avoid a wrong definition of the sets Fi
                        . Recently, Puerto and Perea (2013) develop an approach to compute the nucleolus by solving only one LP, though of much larger dimension than the LPs in the sequential approach. They also point out the computation may be affected by numerical precision issues and propose a procedure to avoid them. Comparing the two approaches define a possible avenue for future research.

We as readers and researchers can certainly tolerate the existence of errors in past literature. However, when we realized that several authors in several different contexts have incurred in similar errors and obtained conclusions based on wrong results, we found worthy to write this note in order to facilitate correctness in future works. Especially, because of the growing interest that cooperative game solution concepts have captivated in our field recently. It is fair to mention that when elaborating this note, we also verified that several other authors have calculated the nucleolus correctly (e.g. Frisk et al., 2010; Lozano, 2012; Lozano et al., 2013).


                     Granot and Granot (1992) and Skorin-Kapov and Skorin-Kapov (2005) assert that a method for computing the nucleolus by solving a sequence of LPs was “implicitly suggested” by Schmeidler (1969). Whether an explicit algorithm in Schmeidler’s seminal work would have prevented mistakes will remain unknown. We attempted to trace where in the literature the errors originated. Although we do not have an answer for such question, when preparing this note we found a number of fuzzy statements which might lead to confusion. For example, Faigle et al. (2001) state that when solving the second LP in the sequence one must fix the first lowest excess for “all coalitions that become tight at ɛ = ɛ1”. Would this be interpreted as all coalitions for which constraint (2) is satisfied with equality at an optimal solution of P, it may lead to a wrong nucleolus. Another example is the early and highly cited manuscript by Lemaire (1984). He states that in order to compute the nucleolus “one has to solve the linear program”, followed by a formulation which is equivalent to P. A mention to the possibility of this LP having multiple solutions is omitted. As we showed in Section 3.5, the LP in his Example 3 has multiple solutions and the author reports a wrong nucleolus. This manuscript is curiously one of the first hits in Google Scholar when searching for “game theory” and “cost allocation”. In a later article, Lemaire (1991) briefly mentions that the nucleolus is computed by solving a finite sequence of linear programs, without any additional specification on this sequence. Moreover, in this article he includes the same wrong example from the previous manuscript. Lemaire cites an even earlier article by Hamlen et al. (1977), which presents a single LP model (equivalent to P) to compute the nucleolus for a 3-player game. Despite the years gone by, these ambiguities appear to still induce errors in recent literature, as SatyaRamesh and Radhakrishna (2009) cite Lemaire (1984) as the basis for the allocation methods they use.

Finally, although our attention focused on the nucleolus, several other similar nucleoli variations have been given in the literature. For example, the same article by Kruś and Bronisz (2000) include the weak nucleolus, the concession nucleolus, the proportional nucleolus and the disruption nucleolus. These last two are also used by Lemaire (1984). A similar algorithm as for the nucleolus is generally used in order to compute these variations, being the main difference the way in which the excess is defined. Therefore, we hope our note will help to prevent errors not only in the computation of the nucleolus, but also in the computation of all types of nucleoli.

@&#ACKNOWLEDGMENTS@&#

We would like to thank Kaja Lorentzen, Tone Lund and Evangelos Toumasatos, for fruitful discussion which helped us to elaborate this note. We would also like to thank Holger Meinhardt for using his code to verify the correctness of our results to the numerical examples of Section 3. We are also grateful to four anonymous reviewers, whose comments helped us to improve the note, specially to the reviewer who implemented the numerical examples and verified the correctness of our results.

@&#REFERENCES@&#

